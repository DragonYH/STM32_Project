
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014dd0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  08015070  08015070  00016070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016258  08016258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016260  08016260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016264  08016264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  08016268  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020ac  240002d0  08016538  000182d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400237c  08016538  0001837c  2**0
                  ALLOC
  9 ._D3_Area     00000008  38000000  38000000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 ._DTCM_Area   00000010  20000000  20000000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  0001a008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031956  00000000  00000000  0001a036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006912  00000000  00000000  0004b98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  000522a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019b7  00000000  00000000  000544a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c06  00000000  00000000  00055e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003332b  00000000  00000000  00096a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f30f  00000000  00000000  000c9d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0024909f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d68  00000000  00000000  00249158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00252ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  00252f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00253135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015058 	.word	0x08015058

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	08015058 	.word	0x08015058

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	@ 0x28
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	463b      	mov	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003b6:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <MX_ADC1_Init+0x120>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ba:	4b3c      	ldr	r3, [pc, #240]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003c2:	4b3a      	ldr	r3, [pc, #232]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003c8:	4b38      	ldr	r3, [pc, #224]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003ce:	4b37      	ldr	r3, [pc, #220]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d0:	2208      	movs	r2, #8
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b35      	ldr	r3, [pc, #212]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003da:	4b34      	ldr	r3, [pc, #208]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80003e0:	4b32      	ldr	r3, [pc, #200]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b31      	ldr	r3, [pc, #196]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b2f      	ldr	r3, [pc, #188]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80003f8:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003fe:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000400:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000404:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000406:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800040c:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800040e:	2201      	movs	r2, #1
 8000410:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 8000414:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000416:	2204      	movs	r2, #4
 8000418:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800041a:	4b24      	ldr	r3, [pc, #144]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800041c:	2240      	movs	r2, #64	@ 0x40
 800041e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000420:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000422:	2200      	movs	r2, #0
 8000424:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000426:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000428:	2201      	movs	r2, #1
 800042a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042c:	481f      	ldr	r0, [pc, #124]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800042e:	f001 fd9d 	bl	8001f6c <HAL_ADC_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000438:	f000 fe34 	bl	80010a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	4619      	mov	r1, r3
 8000446:	4819      	ldr	r0, [pc, #100]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000448:	f002 feac 	bl	80031a4 <HAL_ADCEx_MultiModeConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000452:	f000 fe27 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <MX_ADC1_Init+0x124>)
 8000458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800045a:	2306      	movs	r3, #6
 800045c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800045e:	2305      	movs	r3, #5
 8000460:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000462:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000466:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000468:	2304      	movs	r3, #4
 800046a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800047a:	f001 fffb 	bl	8002474 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000484:	f000 fe0e 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <MX_ADC1_Init+0x128>)
 800048a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800048c:	230c      	movs	r3, #12
 800048e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	4619      	mov	r1, r3
 8000494:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000496:	f001 ffed 	bl	8002474 <HAL_ADC_ConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80004a0:	f000 fe00 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	@ 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	240002ec 	.word	0x240002ec
 80004b0:	40022000 	.word	0x40022000
 80004b4:	10c00010 	.word	0x10c00010
 80004b8:	0c900008 	.word	0x0c900008

080004bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b0bc      	sub	sp, #240	@ 0xf0
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	22c0      	movs	r2, #192	@ 0xc0
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f012 fce4 	bl	8012eaa <memset>
  if(adcHandle->Instance==ADC1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a54      	ldr	r2, [pc, #336]	@ (8000638 <HAL_ADC_MspInit+0x17c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	f040 80a0 	bne.w	800062e <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004f2:	f04f 0300 	mov.w	r3, #0
 80004f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004fa:	2319      	movs	r3, #25
 80004fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80004fe:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000502:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 8000504:	2307      	movs	r3, #7
 8000506:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000508:	2302      	movs	r3, #2
 800050a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000510:	2300      	movs	r3, #0
 8000512:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000514:	2300      	movs	r3, #0
 8000516:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800051c:	2300      	movs	r3, #0
 800051e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fd2c 	bl	8008f84 <HAL_RCCEx_PeriphCLKConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000532:	f000 fdb7 	bl	80010a4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000536:	4b41      	ldr	r3, [pc, #260]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800053c:	4a3f      	ldr	r2, [pc, #252]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000546:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b39      	ldr	r3, [pc, #228]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800055a:	4a38      	ldr	r2, [pc, #224]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000564:	4b35      	ldr	r3, [pc, #212]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b32      	ldr	r3, [pc, #200]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000578:	4a30      	ldr	r2, [pc, #192]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	2303      	movs	r3, #3
 8000598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005a6:	4619      	mov	r1, r3
 80005a8:	4825      	ldr	r0, [pc, #148]	@ (8000640 <HAL_ADC_MspInit+0x184>)
 80005aa:	f005 fb53 	bl	8005c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ae:	2310      	movs	r3, #16
 80005b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005c4:	4619      	mov	r1, r3
 80005c6:	481f      	ldr	r0, [pc, #124]	@ (8000644 <HAL_ADC_MspInit+0x188>)
 80005c8:	f005 fb44 	bl	8005c54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <HAL_ADC_MspInit+0x190>)
 80005d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000602:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000606:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000614:	f003 fa46 	bl	8003aa4 <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 800061e:	f000 fd41 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000626:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000628:	4a07      	ldr	r2, [pc, #28]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	37f0      	adds	r7, #240	@ 0xf0
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000
 800063c:	58024400 	.word	0x58024400
 8000640:	58020000 	.word	0x58020000
 8000644:	58020800 	.word	0x58020800
 8000648:	24000350 	.word	0x24000350
 800064c:	40020010 	.word	0x40020010

08000650 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2224      	movs	r2, #36	@ 0x24
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f012 fc24 	bl	8012eaa <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_DAC1_Init+0x60>)
 8000666:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <MX_DAC1_Init+0x5c>)
 800066a:	f002 ffd5 	bl	8003618 <HAL_DAC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000674:	f000 fd16 	bl	80010a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000694:	f003 f8be 	bl	8003814 <HAL_DAC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 fd01 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	240003c8 	.word	0x240003c8
 80006b0:	40007400 	.word	0x40007400

080006b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <HAL_DAC_MspInit+0x90>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d131      	bne.n	800073a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80006e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fa:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000712:	2310      	movs	r3, #16
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	2303      	movs	r3, #3
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <HAL_DAC_MspInit+0x98>)
 8000726:	f005 fa95 	bl	8005c54 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	210f      	movs	r1, #15
 800072e:	2036      	movs	r0, #54	@ 0x36
 8000730:	f002 fece 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000734:	2036      	movs	r0, #54	@ 0x36
 8000736:	f002 fee5 	bl	8003504 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	@ 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40007400 	.word	0x40007400
 8000748:	58024400 	.word	0x58024400
 800074c:	58020000 	.word	0x58020000

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <MX_DMA_Init+0x3c>)
 8000758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800075c:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <MX_DMA_Init+0x3c>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_DMA_Init+0x3c>)
 8000768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	200b      	movs	r0, #11
 800077a:	f002 fea9 	bl	80034d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800077e:	200b      	movs	r0, #11
 8000780:	f002 fec0 	bl	8003504 <HAL_NVIC_EnableIRQ>

}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400

08000790 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b55      	ldr	r3, [pc, #340]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ac:	4a53      	ldr	r2, [pc, #332]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b6:	4b51      	ldr	r3, [pc, #324]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c4:	4b4d      	ldr	r3, [pc, #308]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ca:	4a4c      	ldr	r2, [pc, #304]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d4:	4b49      	ldr	r3, [pc, #292]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b46      	ldr	r3, [pc, #280]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a44      	ldr	r2, [pc, #272]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b42      	ldr	r3, [pc, #264]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b3e      	ldr	r3, [pc, #248]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	4a3d      	ldr	r2, [pc, #244]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000810:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800081e:	4b37      	ldr	r3, [pc, #220]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000824:	4a35      	ldr	r2, [pc, #212]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082e:	4b33      	ldr	r3, [pc, #204]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083c:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <MX_GPIO_Init+0x16c>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000842:	4a2e      	ldr	r2, [pc, #184]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084c:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <MX_GPIO_Init+0x16c>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	4828      	ldr	r0, [pc, #160]	@ (8000900 <MX_GPIO_Init+0x170>)
 8000860:	f005 fba8 	bl	8005fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2102      	movs	r1, #2
 8000868:	4826      	ldr	r0, [pc, #152]	@ (8000904 <MX_GPIO_Init+0x174>)
 800086a:	f005 fba3 	bl	8005fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2101      	movs	r1, #1
 8000872:	4825      	ldr	r0, [pc, #148]	@ (8000908 <MX_GPIO_Init+0x178>)
 8000874:	f005 fb9e 	bl	8005fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2140      	movs	r1, #64	@ 0x40
 800087c:	4822      	ldr	r0, [pc, #136]	@ (8000908 <MX_GPIO_Init+0x178>)
 800087e:	f005 fb99 	bl	8005fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000882:	2320      	movs	r3, #32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800088e:	2301      	movs	r3, #1
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4819      	ldr	r0, [pc, #100]	@ (8000900 <MX_GPIO_Init+0x170>)
 800089a:	f005 f9db 	bl	8005c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800089e:	2302      	movs	r3, #2
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4813      	ldr	r0, [pc, #76]	@ (8000904 <MX_GPIO_Init+0x174>)
 80008b6:	f005 f9cd 	bl	8005c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <MX_GPIO_Init+0x178>)
 80008d2:	f005 f9bf 	bl	8005c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008e2:	2301      	movs	r3, #1
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4806      	ldr	r0, [pc, #24]	@ (8000908 <MX_GPIO_Init+0x178>)
 80008ee:	f005 f9b1 	bl	8005c54 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	@ 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	58024400 	.word	0x58024400
 8000900:	58020800 	.word	0x58020800
 8000904:	58020400 	.word	0x58020400
 8000908:	58022000 	.word	0x58022000

0800090c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	@ (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000948:	f005 fb68 	bl	800601c <HAL_I2C_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000952:	f000 fba7 	bl	80010a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4809      	ldr	r0, [pc, #36]	@ (8000980 <MX_I2C1_Init+0x74>)
 800095a:	f005 ff67 	bl	800682c <HAL_I2CEx_ConfigAnalogFilter>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 fb9e 	bl	80010a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_I2C1_Init+0x74>)
 800096c:	f005 ffa9 	bl	80068c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 fb95 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	240003dc 	.word	0x240003dc
 8000984:	40005400 	.word	0x40005400
 8000988:	307075b1 	.word	0x307075b1

0800098c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0ba      	sub	sp, #232	@ 0xe8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	22c0      	movs	r2, #192	@ 0xc0
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f012 fa7c 	bl	8012eaa <memset>
  if(i2cHandle->Instance==I2C1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a26      	ldr	r2, [pc, #152]	@ (8000a50 <HAL_I2C_MspInit+0xc4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d145      	bne.n	8000a48 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009bc:	f04f 0208 	mov.w	r2, #8
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 fad6 	bl	8008f84 <HAL_RCCEx_PeriphCLKConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009de:	f000 fb61 	bl	80010a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a00:	23c0      	movs	r3, #192	@ 0xc0
 8000a02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a06:	2312      	movs	r3, #18
 8000a08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <HAL_I2C_MspInit+0xcc>)
 8000a26:	f005 f915 	bl	8005c54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 8000a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a30:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 8000a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 8000a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	37e8      	adds	r7, #232	@ 0xe8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40005400 	.word	0x40005400
 8000a54:	58024400 	.word	0x58024400
 8000a58:	58020400 	.word	0x58020400

08000a5c <oled_Show>:
// SPWM波调制比
float M = 0.9f;
// 显示函数
uint8_t textBuf[128] = {0};
void oled_Show()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af02      	add	r7, sp, #8
  // IN:
  sprintf((char *)textBuf, "IN:%4.2fV %4.2fA", signal_V->u_0, signal_I->u_0);
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <oled_Show+0x40>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	edd3 7a00 	vldr	s15, [r3]
 8000a6a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <oled_Show+0x44>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	edd3 7a00 	vldr	s15, [r3]
 8000a76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a7a:	ed8d 7b00 	vstr	d7, [sp]
 8000a7e:	ec53 2b16 	vmov	r2, r3, d6
 8000a82:	4908      	ldr	r1, [pc, #32]	@ (8000aa4 <oled_Show+0x48>)
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <oled_Show+0x4c>)
 8000a86:	f012 f9ad 	bl	8012de4 <siprintf>
  OLED_ShowString(0, 0, textBuf);
 8000a8a:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <oled_Show+0x4c>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f010 fadc 	bl	801104c <OLED_ShowString>
  // OUT:
  // DC:
  // FAC:
  // EFF:
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	08015070 	.word	0x08015070
 8000aa8:	24000430 	.word	0x24000430

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ab2:	f000 f9b9 	bl	8000e28 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ab6:	4b77      	ldr	r3, [pc, #476]	@ (8000c94 <main+0x1e8>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d11b      	bne.n	8000afa <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac2:	f3bf 8f4f 	dsb	sy
}
 8000ac6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ac8:	f3bf 8f6f 	isb	sy
}
 8000acc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ace:	4b71      	ldr	r3, [pc, #452]	@ (8000c94 <main+0x1e8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ad6:	f3bf 8f4f 	dsb	sy
}
 8000ada:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000adc:	f3bf 8f6f 	isb	sy
}
 8000ae0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ae2:	4b6c      	ldr	r3, [pc, #432]	@ (8000c94 <main+0x1e8>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4a6b      	ldr	r2, [pc, #428]	@ (8000c94 <main+0x1e8>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aee:	f3bf 8f4f 	dsb	sy
}
 8000af2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af4:	f3bf 8f6f 	isb	sy
}
 8000af8:	e000      	b.n	8000afc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000afa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000afc:	4b65      	ldr	r3, [pc, #404]	@ (8000c94 <main+0x1e8>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d138      	bne.n	8000b7a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b08:	4b62      	ldr	r3, [pc, #392]	@ (8000c94 <main+0x1e8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b10:	f3bf 8f4f 	dsb	sy
}
 8000b14:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b16:	4b5f      	ldr	r3, [pc, #380]	@ (8000c94 <main+0x1e8>)
 8000b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b1c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	0b5b      	lsrs	r3, r3, #13
 8000b22:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b26:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	08db      	lsrs	r3, r3, #3
 8000b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b30:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	015a      	lsls	r2, r3, #5
 8000b36:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000b3a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b40:	4954      	ldr	r1, [pc, #336]	@ (8000c94 <main+0x1e8>)
 8000b42:	4313      	orrs	r3, r2
 8000b44:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	1e5a      	subs	r2, r3, #1
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1ef      	bne.n	8000b32 <main+0x86>
    } while(sets-- != 0U);
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1e5a      	subs	r2, r3, #1
 8000b56:	60ba      	str	r2, [r7, #8]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1e5      	bne.n	8000b28 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5c:	f3bf 8f4f 	dsb	sy
}
 8000b60:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b62:	4b4c      	ldr	r3, [pc, #304]	@ (8000c94 <main+0x1e8>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a4b      	ldr	r2, [pc, #300]	@ (8000c94 <main+0x1e8>)
 8000b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b6c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6e:	f3bf 8f4f 	dsb	sy
}
 8000b72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b74:	f3bf 8f6f 	isb	sy
}
 8000b78:	e000      	b.n	8000b7c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b7a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 ff5c 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f8a4 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f7ff fe04 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b88:	f7ff fde2 	bl	8000750 <MX_DMA_Init>
  MX_TIM2_Init();
 8000b8c:	f000 fdaa 	bl	80016e4 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000b90:	f000 fdf6 	bl	8001780 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000b94:	f7ff fbfc 	bl	8000390 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000b98:	f010 fdb4 	bl	8011704 <MX_USB_DEVICE_Init>
  MX_DAC1_Init();
 8000b9c:	f7ff fd58 	bl	8000650 <MX_DAC1_Init>
  MX_I2C1_Init();
 8000ba0:	f7ff feb4 	bl	800090c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ba4:	f000 fa84 	bl	80010b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000ba8:	205c      	movs	r0, #92	@ 0x5c
 8000baa:	f011 fb6b 	bl	8012284 <malloc>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b39      	ldr	r3, [pc, #228]	@ (8000c98 <main+0x1ec>)
 8000bb4:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 8000bb6:	2020      	movs	r0, #32
 8000bb8:	f011 fb64 	bl	8012284 <malloc>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b36      	ldr	r3, [pc, #216]	@ (8000c9c <main+0x1f0>)
 8000bc2:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000bc4:	205c      	movs	r0, #92	@ 0x5c
 8000bc6:	f011 fb5d 	bl	8012284 <malloc>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b34      	ldr	r3, [pc, #208]	@ (8000ca0 <main+0x1f4>)
 8000bd0:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8000bd2:	2020      	movs	r0, #32
 8000bd4:	f011 fb56 	bl	8012284 <malloc>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b31      	ldr	r3, [pc, #196]	@ (8000ca4 <main+0x1f8>)
 8000bde:	601a      	str	r2, [r3, #0]
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压环
 8000be0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <main+0x1ec>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a2d      	ldr	r2, [pc, #180]	@ (8000c9c <main+0x1f0>)
 8000be6:	6811      	ldr	r1, [r2, #0]
 8000be8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000bec:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8000ca8 <main+0x1fc>
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f010 fae3 	bl	80111bc <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流环
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca0 <main+0x1f4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca4 <main+0x1f8>)
 8000bfc:	6811      	ldr	r1, [r2, #0]
 8000bfe:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c02:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8000ca8 <main+0x1fc>
 8000c06:	4618      	mov	r0, r3
 8000c08:	f010 fad8 	bl	80111bc <pll_Init>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000c0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	4825      	ldr	r0, [pc, #148]	@ (8000cac <main+0x200>)
 8000c16:	f002 fdcd 	bl	80037b4 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4823      	ldr	r0, [pc, #140]	@ (8000cac <main+0x200>)
 8000c1e:	f002 fd1d 	bl	800365c <HAL_DAC_Start>
  // ADC校准并开启
  HAL_Delay(200);
 8000c22:	20c8      	movs	r0, #200	@ 0xc8
 8000c24:	f000 ff64 	bl	8001af0 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000c28:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4820      	ldr	r0, [pc, #128]	@ (8000cb0 <main+0x204>)
 8000c30:	f002 fa54 	bl	80030dc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线性度校准
 8000c34:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000c38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000c3c:	481c      	ldr	r0, [pc, #112]	@ (8000cb0 <main+0x204>)
 8000c3e:	f002 fa4d 	bl	80030dc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adcBuf, 2);
 8000c42:	2202      	movs	r2, #2
 8000c44:	491b      	ldr	r1, [pc, #108]	@ (8000cb4 <main+0x208>)
 8000c46:	481a      	ldr	r0, [pc, #104]	@ (8000cb0 <main+0x204>)
 8000c48:	f001 fb32 	bl	80022b0 <HAL_ADC_Start_DMA>
  HAL_Delay(1000);
 8000c4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c50:	f000 ff4e 	bl	8001af0 <HAL_Delay>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000c54:	2100      	movs	r1, #0
 8000c56:	4818      	ldr	r0, [pc, #96]	@ (8000cb8 <main+0x20c>)
 8000c58:	f00b fbcc 	bl	800c3f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4816      	ldr	r0, [pc, #88]	@ (8000cb8 <main+0x20c>)
 8000c60:	f00b fbc8 	bl	800c3f4 <HAL_TIM_PWM_Start>
  // OLED初始化
  OLED_Init();
 8000c64:	f010 fa20 	bl	80110a8 <OLED_Init>
  // INA238初始化
  ina238_Init(&hi2c1, 0);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4814      	ldr	r0, [pc, #80]	@ (8000cbc <main+0x210>)
 8000c6c:	f010 f8c8 	bl	8010e00 <ina238_Init>
  // 开启中断
  HAL_TIM_Base_Start_IT(&htim2);
 8000c70:	4813      	ldr	r0, [pc, #76]	@ (8000cc0 <main+0x214>)
 8000c72:	f00b fae5 	bl	800c240 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 虚拟串口输出日志
    oled_Show();
 8000c76:	f7ff fef1 	bl	8000a5c <oled_Show>
    CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000c7a:	2180      	movs	r1, #128	@ 0x80
 8000c7c:	4811      	ldr	r0, [pc, #68]	@ (8000cc4 <main+0x218>)
 8000c7e:	f010 fe01 	bl	8011884 <CDC_Transmit_FS>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000c82:	2101      	movs	r1, #1
 8000c84:	4810      	ldr	r0, [pc, #64]	@ (8000cc8 <main+0x21c>)
 8000c86:	f005 f9ae 	bl	8005fe6 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000c8a:	20c8      	movs	r0, #200	@ 0xc8
 8000c8c:	f000 ff30 	bl	8001af0 <HAL_Delay>
    oled_Show();
 8000c90:	bf00      	nop
 8000c92:	e7f0      	b.n	8000c76 <main+0x1ca>
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000004 	.word	0x20000004
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	42480000 	.word	0x42480000
 8000cac:	240003c8 	.word	0x240003c8
 8000cb0:	240002ec 	.word	0x240002ec
 8000cb4:	38000000 	.word	0x38000000
 8000cb8:	240005d4 	.word	0x240005d4
 8000cbc:	240003dc 	.word	0x240003dc
 8000cc0:	24000588 	.word	0x24000588
 8000cc4:	24000430 	.word	0x24000430
 8000cc8:	58022000 	.word	0x58022000

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09e      	sub	sp, #120	@ 0x78
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd6:	224c      	movs	r2, #76	@ 0x4c
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f012 f8e5 	bl	8012eaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2220      	movs	r2, #32
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f012 f8de 	bl	8012eaa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f007 f8ec 	bl	8007ecc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b48      	ldr	r3, [pc, #288]	@ (8000e1c <SystemClock_Config+0x150>)
 8000cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfc:	4a47      	ldr	r2, [pc, #284]	@ (8000e1c <SystemClock_Config+0x150>)
 8000cfe:	f023 0301 	bic.w	r3, r3, #1
 8000d02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d04:	4b45      	ldr	r3, [pc, #276]	@ (8000e1c <SystemClock_Config+0x150>)
 8000d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b44      	ldr	r3, [pc, #272]	@ (8000e20 <SystemClock_Config+0x154>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a43      	ldr	r2, [pc, #268]	@ (8000e20 <SystemClock_Config+0x154>)
 8000d14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b41      	ldr	r3, [pc, #260]	@ (8000e20 <SystemClock_Config+0x154>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d26:	bf00      	nop
 8000d28:	4b3d      	ldr	r3, [pc, #244]	@ (8000e20 <SystemClock_Config+0x154>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d34:	d1f8      	bne.n	8000d28 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b3b      	ldr	r3, [pc, #236]	@ (8000e24 <SystemClock_Config+0x158>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d3c:	4a39      	ldr	r2, [pc, #228]	@ (8000e24 <SystemClock_Config+0x158>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d46:	4b37      	ldr	r3, [pc, #220]	@ (8000e24 <SystemClock_Config+0x158>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	4b31      	ldr	r3, [pc, #196]	@ (8000e20 <SystemClock_Config+0x154>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a30      	ldr	r2, [pc, #192]	@ (8000e20 <SystemClock_Config+0x154>)
 8000d5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b2e      	ldr	r3, [pc, #184]	@ (8000e20 <SystemClock_Config+0x154>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e1c <SystemClock_Config+0x150>)
 8000d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d72:	4a2a      	ldr	r2, [pc, #168]	@ (8000e1c <SystemClock_Config+0x150>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d7a:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <SystemClock_Config+0x150>)
 8000d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d86:	bf00      	nop
 8000d88:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <SystemClock_Config+0x154>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d94:	d1f8      	bne.n	8000d88 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d96:	2301      	movs	r3, #1
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da0:	2302      	movs	r3, #2
 8000da2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da4:	2302      	movs	r3, #2
 8000da6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000da8:	2305      	movs	r3, #5
 8000daa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000dac:	23c0      	movs	r3, #192	@ 0xc0
 8000dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000db4:	2314      	movs	r3, #20
 8000db6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f007 f8c7 	bl	8007f60 <HAL_RCC_OscConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000dd8:	f000 f964 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ddc:	233f      	movs	r3, #63	@ 0x3f
 8000dde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de0:	2303      	movs	r3, #3
 8000de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000de8:	2308      	movs	r3, #8
 8000dea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dec:	2340      	movs	r3, #64	@ 0x40
 8000dee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df0:	2340      	movs	r3, #64	@ 0x40
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dfa:	2340      	movs	r3, #64	@ 0x40
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2104      	movs	r1, #4
 8000e04:	4618      	mov	r0, r3
 8000e06:	f007 fd05 	bl	8008814 <HAL_RCC_ClockConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e10:	f000 f948 	bl	80010a4 <Error_Handler>
  }
}
 8000e14:	bf00      	nop
 8000e16:	3778      	adds	r7, #120	@ 0x78
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58000400 	.word	0x58000400
 8000e20:	58024800 	.word	0x58024800
 8000e24:	58024400 	.word	0x58024400

08000e28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e3a:	f002 fb71 	bl	8003520 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000e46:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000e4a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fb8e 	bl	8003590 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000e78:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000e7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000e7e:	230f      	movs	r3, #15
 8000e80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 fb7f 	bl	8003590 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8000e96:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e9a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fb74 	bl	8003590 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	f002 fb51 	bl	8003550 <HAL_MPU_Enable>

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	ed2d 8b02 	vpush	{d8}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a6a      	ldr	r2, [pc, #424]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8000ece:	f000 fdef 	bl	8001ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eda:	f040 80c4 	bne.w	8001066 <HAL_TIM_PeriodElapsedCallback+0x1ae>
 8000ede:	4b66      	ldr	r3, [pc, #408]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	dd1d      	ble.n	8000f28 <HAL_TIM_PeriodElapsedCallback+0x70>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f003 021f 	and.w	r2, r3, #31
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000efc:	f3bf 8f4f 	dsb	sy
}
 8000f00:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f02:	4a5e      	ldr	r2, [pc, #376]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	3320      	adds	r3, #32
 8000f0e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3b20      	subs	r3, #32
 8000f14:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	dcf2      	bgt.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f1c:	f3bf 8f4f 	dsb	sy
}
 8000f20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f22:	f3bf 8f6f 	isb	sy
}
 8000f26:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000f28:	bf00      	nop
  {
    // 缓存adcBuf
    SCB_InvalidateDCache_by_Addr(adcBuf, sizeof(adcBuf));
    signal_V->u_0 = adcBuf[0] * 3.3f / 65536.0f;
 8000f2a:	4b53      	ldr	r3, [pc, #332]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f36:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001080 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000f3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f3e:	4b51      	ldr	r3, [pc, #324]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001088 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4a:	edc3 7a00 	vstr	s15, [r3]
    signal_I->u_0 = adcBuf[1] * 3.3f / 65536.0f;
 8000f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001080 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000f5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f62:	4b4a      	ldr	r3, [pc, #296]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001088 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_V, signal_config_V, signal_V); // 电压环
 8000f72:	4b44      	ldr	r3, [pc, #272]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a46      	ldr	r2, [pc, #280]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000f78:	6811      	ldr	r1, [r2, #0]
 8000f7a:	4a42      	ldr	r2, [pc, #264]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f010 fa02 	bl	8011388 <pll_Control>
    pll_Control(signal_I, signal_config_I, signal_V); // 电流环
 8000f84:	4b41      	ldr	r3, [pc, #260]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a42      	ldr	r2, [pc, #264]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000f8a:	6811      	ldr	r1, [r2, #0]
 8000f8c:	4a3d      	ldr	r2, [pc, #244]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f010 f9f9 	bl	8011388 <pll_Control>
    // 调节SPWM占空比
    // 要想实现PFC，需要让电流相位与电压相位相同，而电压相位由电网控制，所以需要闭环控制的是电流相位
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 8000f96:	4b40      	ldr	r3, [pc, #256]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000fa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fac:	4b3b      	ldr	r3, [pc, #236]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000fb6:	4b35      	ldr	r3, [pc, #212]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000fbe:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80010a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8000fc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fca:	f011 f8cb 	bl	8012164 <arm_sin_f32>
 8000fce:	eef0 7a40 	vmov.f32	s15, s0
 8000fd2:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000fd6:	4b30      	ldr	r3, [pc, #192]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fe4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000fe8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff0:	4b29      	ldr	r3, [pc, #164]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff8:	ee17 2a90 	vmov	r2, s15
 8000ffc:	635a      	str	r2, [r3, #52]	@ 0x34
    // 反馈侧
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 8000ffe:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001010:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001014:	4b21      	ldr	r3, [pc, #132]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001016:	edd3 7a00 	vldr	s15, [r3]
 800101a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001026:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80010a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 800102a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	f011 f897 	bl	8012164 <arm_sin_f32>
 8001036:	eef0 7a40 	vmov.f32	s15, s0
 800103a:	ee28 7a27 	vmul.f32	s14, s16, s15
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800104c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001050:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001060:	ee17 2a90 	vmov	r2, s15
 8001064:	639a      	str	r2, [r3, #56]	@ 0x38
    // dcVolt = ina238_GetVolt(&hi2c1);
    // DAC模拟输出，便于调试，不需要时可关闭
    // HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_1->theta + PI / 2.f) + 2048.f);
  }
  /* USER CODE END Callback 1 */
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	ecbd 8b02 	vpop	{d8}
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40001000 	.word	0x40001000
 8001078:	38000000 	.word	0x38000000
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	40533333 	.word	0x40533333
 8001084:	20000000 	.word	0x20000000
 8001088:	47800000 	.word	0x47800000
 800108c:	20000008 	.word	0x20000008
 8001090:	20000004 	.word	0x20000004
 8001094:	2000000c 	.word	0x2000000c
 8001098:	240005d4 	.word	0x240005d4
 800109c:	24000000 	.word	0x24000000
 80010a0:	3fc90fdb 	.word	0x3fc90fdb

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010b4:	4b27      	ldr	r3, [pc, #156]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010b6:	4a28      	ldr	r2, [pc, #160]	@ (8001158 <MX_SPI1_Init+0xa8>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c8:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010ca:	2207      	movs	r2, #7
 80010cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ce:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_SPI1_Init+0xa4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_SPI1_Init+0xa4>)
 8001102:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001106:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_SPI1_Init+0xa4>)
 800110a:	2200      	movs	r2, #0
 800110c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_SPI1_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_SPI1_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_SPI1_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_SPI1_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_SPI1_Init+0xa4>)
 8001128:	2200      	movs	r2, #0
 800112a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_SPI1_Init+0xa4>)
 800112e:	2200      	movs	r2, #0
 8001130:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_SPI1_Init+0xa4>)
 8001134:	2200      	movs	r2, #0
 8001136:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_SPI1_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_SPI1_Init+0xa4>)
 8001140:	f00a fc1e 	bl	800b980 <HAL_SPI_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800114a:	f7ff ffab 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	240004b0 	.word	0x240004b0
 8001158:	40013000 	.word	0x40013000

0800115c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0bc      	sub	sp, #240	@ 0xf0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	22c0      	movs	r2, #192	@ 0xc0
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f011 fe94 	bl	8012eaa <memset>
  if(spiHandle->Instance==SPI1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a38      	ldr	r2, [pc, #224]	@ (8001268 <HAL_SPI_MspInit+0x10c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d169      	bne.n	8001260 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800118c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001198:	2300      	movs	r3, #0
 800119a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 feef 	bl	8008f84 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80011ac:	f7ff ff7a 	bl	80010a4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011b0:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <HAL_SPI_MspInit+0x110>)
 80011b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011b6:	4a2d      	ldr	r2, [pc, #180]	@ (800126c <HAL_SPI_MspInit+0x110>)
 80011b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011c0:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <HAL_SPI_MspInit+0x110>)
 80011c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b27      	ldr	r3, [pc, #156]	@ (800126c <HAL_SPI_MspInit+0x110>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d4:	4a25      	ldr	r2, [pc, #148]	@ (800126c <HAL_SPI_MspInit+0x110>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <HAL_SPI_MspInit+0x110>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ec:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <HAL_SPI_MspInit+0x110>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f2:	4a1e      	ldr	r2, [pc, #120]	@ (800126c <HAL_SPI_MspInit+0x110>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <HAL_SPI_MspInit+0x110>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800120a:	23a0      	movs	r3, #160	@ 0xa0
 800120c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800121c:	2301      	movs	r3, #1
 800121e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001222:	2305      	movs	r3, #5
 8001224:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800122c:	4619      	mov	r1, r3
 800122e:	4810      	ldr	r0, [pc, #64]	@ (8001270 <HAL_SPI_MspInit+0x114>)
 8001230:	f004 fd10 	bl	8005c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001234:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001238:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800124e:	2305      	movs	r3, #5
 8001250:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001254:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <HAL_SPI_MspInit+0x118>)
 800125c:	f004 fcfa 	bl	8005c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001260:	bf00      	nop
 8001262:	37f0      	adds	r7, #240	@ 0xf0
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40013000 	.word	0x40013000
 800126c:	58024400 	.word	0x58024400
 8001270:	58020000 	.word	0x58020000
 8001274:	58021800 	.word	0x58021800

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_MspInit+0x30>)
 8001280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001284:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <HAL_MspInit+0x30>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_MspInit+0x30>)
 8001290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	58024400 	.word	0x58024400

080012ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b090      	sub	sp, #64	@ 0x40
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	d827      	bhi.n	800130a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80012ba:	2200      	movs	r2, #0
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	2036      	movs	r0, #54	@ 0x36
 80012c0:	f002 f906 	bl	80034d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012c4:	2036      	movs	r0, #54	@ 0x36
 80012c6:	f002 f91d 	bl	8003504 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80012ca:	4a29      	ldr	r2, [pc, #164]	@ (8001370 <HAL_InitTick+0xc4>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012d0:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <HAL_InitTick+0xc8>)
 80012d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012d6:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <HAL_InitTick+0xc8>)
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012e0:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <HAL_InitTick+0xc8>)
 80012e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012ee:	f107 0210 	add.w	r2, r7, #16
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f007 fe01 	bl	8008f00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001300:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001304:	2b00      	cmp	r3, #0
 8001306:	d106      	bne.n	8001316 <HAL_InitTick+0x6a>
 8001308:	e001      	b.n	800130e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e02b      	b.n	8001366 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800130e:	f007 fde1 	bl	8008ed4 <HAL_RCC_GetPCLK1Freq>
 8001312:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001314:	e004      	b.n	8001320 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001316:	f007 fddd 	bl	8008ed4 <HAL_RCC_GetPCLK1Freq>
 800131a:	4603      	mov	r3, r0
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001322:	4a15      	ldr	r2, [pc, #84]	@ (8001378 <HAL_InitTick+0xcc>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	0c9b      	lsrs	r3, r3, #18
 800132a:	3b01      	subs	r3, #1
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <HAL_InitTick+0xd0>)
 8001330:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <HAL_InitTick+0xd4>)
 8001332:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_InitTick+0xd0>)
 8001336:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800133a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800133c:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <HAL_InitTick+0xd0>)
 800133e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001340:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <HAL_InitTick+0xd0>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <HAL_InitTick+0xd0>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800134e:	480b      	ldr	r0, [pc, #44]	@ (800137c <HAL_InitTick+0xd0>)
 8001350:	f00a ff1f 	bl	800c192 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d104      	bne.n	8001364 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800135a:	4808      	ldr	r0, [pc, #32]	@ (800137c <HAL_InitTick+0xd0>)
 800135c:	f00a ff70 	bl	800c240 <HAL_TIM_Base_Start_IT>
 8001360:	4603      	mov	r3, r0
 8001362:	e000      	b.n	8001366 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	3740      	adds	r7, #64	@ 0x40
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2400000c 	.word	0x2400000c
 8001374:	58024400 	.word	0x58024400
 8001378:	431bde83 	.word	0x431bde83
 800137c:	24000538 	.word	0x24000538
 8001380:	40001000 	.word	0x40001000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <NMI_Handler+0x4>

0800138c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <MemManage_Handler+0x4>

0800139c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <UsageFault_Handler+0x4>

080013ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <DMA1_Stream0_IRQHandler+0x10>)
 80013ea:	f003 f921 	bl	8004630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	24000350 	.word	0x24000350

080013f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <TIM2_IRQHandler+0x10>)
 80013fe:	f00b f907 	bl	800c610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	24000588 	.word	0x24000588

0800140c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <TIM6_DAC_IRQHandler+0x20>)
 8001412:	791b      	ldrb	r3, [r3, #4]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800141a:	4804      	ldr	r0, [pc, #16]	@ (800142c <TIM6_DAC_IRQHandler+0x20>)
 800141c:	f002 f970 	bl	8003700 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001420:	4803      	ldr	r0, [pc, #12]	@ (8001430 <TIM6_DAC_IRQHandler+0x24>)
 8001422:	f00b f8f5 	bl	800c610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	240003c8 	.word	0x240003c8
 8001430:	24000538 	.word	0x24000538

08001434 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <OTG_FS_IRQHandler+0x10>)
 800143a:	f005 fbe7 	bl	8006c0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	24001b04 	.word	0x24001b04

08001448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_kill>:

int _kill(int pid, int sig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001462:	f011 fd85 	bl	8012f70 <__errno>
 8001466:	4603      	mov	r3, r0
 8001468:	2216      	movs	r2, #22
 800146a:	601a      	str	r2, [r3, #0]
  return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_exit>:

void _exit (int status)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ffe7 	bl	8001458 <_kill>
  while (1) {}    /* Make sure we hang here */
 800148a:	bf00      	nop
 800148c:	e7fd      	b.n	800148a <_exit+0x12>

0800148e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e00a      	b.n	80014b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a0:	f3af 8000 	nop.w
 80014a4:	4601      	mov	r1, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	60ba      	str	r2, [r7, #8]
 80014ac:	b2ca      	uxtb	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dbf0      	blt.n	80014a0 <_read+0x12>
  }

  return len;
 80014be:	687b      	ldr	r3, [r7, #4]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e009      	b.n	80014ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	60ba      	str	r2, [r7, #8]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3301      	adds	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dbf1      	blt.n	80014da <_write+0x12>
  }
  return len;
 80014f6:	687b      	ldr	r3, [r7, #4]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_close>:

int _close(int file)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001528:	605a      	str	r2, [r3, #4]
  return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_isatty>:

int _isatty(int file)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f011 fcea 	bl	8012f70 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	24080000 	.word	0x24080000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	24000584 	.word	0x24000584
 80015d0:	24002380 	.word	0x24002380

080015d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015d8:	4b37      	ldr	r3, [pc, #220]	@ (80016b8 <SystemInit+0xe4>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015de:	4a36      	ldr	r2, [pc, #216]	@ (80016b8 <SystemInit+0xe4>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015e8:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <SystemInit+0xe8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	2b06      	cmp	r3, #6
 80015f2:	d807      	bhi.n	8001604 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015f4:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <SystemInit+0xe8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 030f 	bic.w	r3, r3, #15
 80015fc:	4a2f      	ldr	r2, [pc, #188]	@ (80016bc <SystemInit+0xe8>)
 80015fe:	f043 0307 	orr.w	r3, r3, #7
 8001602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001604:	4b2e      	ldr	r3, [pc, #184]	@ (80016c0 <SystemInit+0xec>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2d      	ldr	r2, [pc, #180]	@ (80016c0 <SystemInit+0xec>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001610:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <SystemInit+0xec>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001616:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <SystemInit+0xec>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4929      	ldr	r1, [pc, #164]	@ (80016c0 <SystemInit+0xec>)
 800161c:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <SystemInit+0xf0>)
 800161e:	4013      	ands	r3, r2
 8001620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001622:	4b26      	ldr	r3, [pc, #152]	@ (80016bc <SystemInit+0xe8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800162e:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <SystemInit+0xe8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 030f 	bic.w	r3, r3, #15
 8001636:	4a21      	ldr	r2, [pc, #132]	@ (80016bc <SystemInit+0xe8>)
 8001638:	f043 0307 	orr.w	r3, r3, #7
 800163c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <SystemInit+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <SystemInit+0xec>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800164a:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <SystemInit+0xec>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <SystemInit+0xec>)
 8001652:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <SystemInit+0xf4>)
 8001654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <SystemInit+0xec>)
 8001658:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <SystemInit+0xf8>)
 800165a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <SystemInit+0xec>)
 800165e:	4a1c      	ldr	r2, [pc, #112]	@ (80016d0 <SystemInit+0xfc>)
 8001660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <SystemInit+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <SystemInit+0xec>)
 800166a:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <SystemInit+0xfc>)
 800166c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <SystemInit+0xec>)
 8001670:	2200      	movs	r2, #0
 8001672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <SystemInit+0xec>)
 8001676:	4a16      	ldr	r2, [pc, #88]	@ (80016d0 <SystemInit+0xfc>)
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <SystemInit+0xec>)
 800167c:	2200      	movs	r2, #0
 800167e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <SystemInit+0xec>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <SystemInit+0xec>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800168a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <SystemInit+0xec>)
 800168e:	2200      	movs	r2, #0
 8001690:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <SystemInit+0x100>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <SystemInit+0x104>)
 8001698:	4013      	ands	r3, r2
 800169a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800169e:	d202      	bcs.n	80016a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <SystemInit+0x108>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <SystemInit+0x10c>)
 80016a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00
 80016bc:	52002000 	.word	0x52002000
 80016c0:	58024400 	.word	0x58024400
 80016c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80016c8:	02020200 	.word	0x02020200
 80016cc:	01ff0000 	.word	0x01ff0000
 80016d0:	01010280 	.word	0x01010280
 80016d4:	5c001000 	.word	0x5c001000
 80016d8:	ffff0000 	.word	0xffff0000
 80016dc:	51008108 	.word	0x51008108
 80016e0:	52004000 	.word	0x52004000

080016e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <MX_TIM2_Init+0x98>)
 8001704:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <MX_TIM2_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_TIM2_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_TIM2_Init+0x98>)
 8001718:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800171c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_TIM2_Init+0x98>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	@ (800177c <MX_TIM2_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800172a:	4814      	ldr	r0, [pc, #80]	@ (800177c <MX_TIM2_Init+0x98>)
 800172c:	f00a fd31 	bl	800c192 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001736:	f7ff fcb5 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <MX_TIM2_Init+0x98>)
 8001748:	f00b f996 	bl	800ca78 <HAL_TIM_ConfigClockSource>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001752:	f7ff fca7 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <MX_TIM2_Init+0x98>)
 8001764:	f00b fedc 	bl	800d520 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800176e:	f7ff fc99 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	24000588 	.word	0x24000588

08001780 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b09a      	sub	sp, #104	@ 0x68
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	222c      	movs	r2, #44	@ 0x2c
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f011 fb75 	bl	8012eaa <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017c0:	4b4a      	ldr	r3, [pc, #296]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80017c2:	4a4b      	ldr	r2, [pc, #300]	@ (80018f0 <MX_TIM8_Init+0x170>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017c6:	4b49      	ldr	r3, [pc, #292]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b47      	ldr	r3, [pc, #284]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 80017d2:	4b46      	ldr	r3, [pc, #280]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80017d4:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80017d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b44      	ldr	r3, [pc, #272]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017e0:	4b42      	ldr	r3, [pc, #264]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b41      	ldr	r3, [pc, #260]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017ec:	483f      	ldr	r0, [pc, #252]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80017ee:	f00a fcd0 	bl	800c192 <HAL_TIM_Base_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80017f8:	f7ff fc54 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001800:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001802:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001806:	4619      	mov	r1, r3
 8001808:	4838      	ldr	r0, [pc, #224]	@ (80018ec <MX_TIM8_Init+0x16c>)
 800180a:	f00b f935 	bl	800ca78 <HAL_TIM_ConfigClockSource>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001814:	f7ff fc46 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001818:	4834      	ldr	r0, [pc, #208]	@ (80018ec <MX_TIM8_Init+0x16c>)
 800181a:	f00a fd89 	bl	800c330 <HAL_TIM_PWM_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001824:	f7ff fc3e 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001834:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001838:	4619      	mov	r1, r3
 800183a:	482c      	ldr	r0, [pc, #176]	@ (80018ec <MX_TIM8_Init+0x16c>)
 800183c:	f00b fe70 	bl	800d520 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001846:	f7ff fc2d 	bl	80010a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184a:	2360      	movs	r3, #96	@ 0x60
 800184c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 6000-1;
 800184e:	f241 736f 	movw	r3, #5999	@ 0x176f
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001858:	2300      	movs	r3, #0
 800185a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800185c:	2304      	movs	r3, #4
 800185e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	481e      	ldr	r0, [pc, #120]	@ (80018ec <MX_TIM8_Init+0x16c>)
 8001872:	f00a ffed 	bl	800c850 <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800187c:	f7ff fc12 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001884:	2204      	movs	r2, #4
 8001886:	4619      	mov	r1, r3
 8001888:	4818      	ldr	r0, [pc, #96]	@ (80018ec <MX_TIM8_Init+0x16c>)
 800188a:	f00a ffe1 	bl	800c850 <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001894:	f7ff fc06 	bl	80010a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4807      	ldr	r0, [pc, #28]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80018ce:	f00b feb5 	bl	800d63c <HAL_TIMEx_ConfigBreakDeadTime>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 80018d8:	f7ff fbe4 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80018dc:	4803      	ldr	r0, [pc, #12]	@ (80018ec <MX_TIM8_Init+0x16c>)
 80018de:	f000 f847 	bl	8001970 <HAL_TIM_MspPostInit>

}
 80018e2:	bf00      	nop
 80018e4:	3768      	adds	r7, #104	@ 0x68
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	240005d4 	.word	0x240005d4
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001904:	d117      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <HAL_TIM_Base_MspInit+0x74>)
 8001908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800190c:	4a16      	ldr	r2, [pc, #88]	@ (8001968 <HAL_TIM_Base_MspInit+0x74>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <HAL_TIM_Base_MspInit+0x74>)
 8001918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	201c      	movs	r0, #28
 800192a:	f001 fdd1 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800192e:	201c      	movs	r0, #28
 8001930:	f001 fde8 	bl	8003504 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001934:	e013      	b.n	800195e <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM8)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0c      	ldr	r2, [pc, #48]	@ (800196c <HAL_TIM_Base_MspInit+0x78>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d10e      	bne.n	800195e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_TIM_Base_MspInit+0x74>)
 8001942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001946:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <HAL_TIM_Base_MspInit+0x74>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_TIM_Base_MspInit+0x74>)
 8001952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	58024400 	.word	0x58024400
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <HAL_TIM_MspPostInit+0x68>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d11e      	bne.n	80019d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <HAL_TIM_MspPostInit+0x6c>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001998:	4a10      	ldr	r2, [pc, #64]	@ (80019dc <HAL_TIM_MspPostInit+0x6c>)
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <HAL_TIM_MspPostInit+0x6c>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019b0:	23c0      	movs	r3, #192	@ 0xc0
 80019b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019c0:	2303      	movs	r3, #3
 80019c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <HAL_TIM_MspPostInit+0x70>)
 80019cc:	f004 f942 	bl	8005c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40010400 	.word	0x40010400
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58020800 	.word	0x58020800

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019e8:	f7ff fdf4 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ec:	480c      	ldr	r0, [pc, #48]	@ (8001a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ee:	490d      	ldr	r1, [pc, #52]	@ (8001a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a04:	4c0a      	ldr	r4, [pc, #40]	@ (8001a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a12:	f011 fab3 	bl	8012f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff f849 	bl	8000aac <main>
  bx  lr
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a24:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8001a28:	08016268 	.word	0x08016268
  ldr r2, =_sbss
 8001a2c:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8001a30:	2400237c 	.word	0x2400237c

08001a34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC3_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3e:	2003      	movs	r0, #3
 8001a40:	f001 fd3b 	bl	80034ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a44:	f007 f89c 	bl	8008b80 <HAL_RCC_GetSysClockFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_Init+0x68>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	4913      	ldr	r1, [pc, #76]	@ (8001aa4 <HAL_Init+0x6c>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_Init+0x68>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <HAL_Init+0x6c>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa8 <HAL_Init+0x70>)
 8001a7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001aac <HAL_Init+0x74>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a82:	200f      	movs	r0, #15
 8001a84:	f7ff fc12 	bl	80012ac <HAL_InitTick>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e002      	b.n	8001a98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a92:	f7ff fbf1 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	080150cc 	.word	0x080150cc
 8001aa8:	24000008 	.word	0x24000008
 8001aac:	24000004 	.word	0x24000004

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	24000010 	.word	0x24000010
 8001ad4:	24000620 	.word	0x24000620

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	24000620 	.word	0x24000620

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	24000010 	.word	0x24000010

08001b38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <HAL_GetREVID+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0c1b      	lsrs	r3, r3, #16
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	5c001000 	.word	0x5c001000

08001b50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	609a      	str	r2, [r3, #8]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3360      	adds	r3, #96	@ 0x60
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	430b      	orrs	r3, r1
 8001be6:	431a      	orrs	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001bec:	bf00      	nop
 8001bee:	371c      	adds	r7, #28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	611a      	str	r2, [r3, #16]
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3360      	adds	r3, #96	@ 0x60
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]
  }
}
 8001c54:	bf00      	nop
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3330      	adds	r3, #48	@ 0x30
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	211f      	movs	r1, #31
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	401a      	ands	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	f003 011f 	and.w	r1, r3, #31
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f023 0203 	bic.w	r2, r3, #3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	60da      	str	r2, [r3, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3314      	adds	r3, #20
 8001d14:	461a      	mov	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	0e5b      	lsrs	r3, r3, #25
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	4413      	add	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	0d1b      	lsrs	r3, r3, #20
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2107      	movs	r1, #7
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	401a      	ands	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0d1b      	lsrs	r3, r3, #20
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0318 	and.w	r3, r3, #24
 8001d7e:	4908      	ldr	r1, [pc, #32]	@ (8001da0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d80:	40d9      	lsrs	r1, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	400b      	ands	r3, r1
 8001d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	000fffff 	.word	0x000fffff

08001da4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 031f 	and.w	r3, r3, #31
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6093      	str	r3, [r2, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	5fffffc0 	.word	0x5fffffc0

08001de4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	6fffffc0 	.word	0x6fffffc0

08001e34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <LL_ADC_Enable+0x24>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	7fffffc0 	.word	0x7fffffc0

08001e84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <LL_ADC_Disable+0x24>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	f043 0202 	orr.w	r2, r3, #2
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	7fffffc0 	.word	0x7fffffc0

08001eac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <LL_ADC_IsEnabled+0x18>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_ADC_IsEnabled+0x1a>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_IsDisableOngoing+0x18>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_IsDisableOngoing+0x1a>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <LL_ADC_REG_StartConversion+0x24>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	7fffffc0 	.word	0x7fffffc0

08001f20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d101      	bne.n	8001f38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e18f      	b.n	80022a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7fe fa91 	bl	80004bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff19 	bl	8001de4 <LL_ADC_IsDeepPowerDownEnabled>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d004      	beq.n	8001fc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff feff 	bl	8001dc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff34 	bl	8001e34 <LL_ADC_IsInternalRegulatorEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d114      	bne.n	8001ffc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff18 	bl	8001e0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fdc:	4b87      	ldr	r3, [pc, #540]	@ (80021fc <HAL_ADC_Init+0x290>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	4a87      	ldr	r2, [pc, #540]	@ (8002200 <HAL_ADC_Init+0x294>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	3301      	adds	r3, #1
 8001fec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fee:	e002      	b.n	8001ff6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f9      	bne.n	8001ff0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff17 	bl	8001e34 <LL_ADC_IsInternalRegulatorEnabled>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10d      	bne.n	8002028 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff77 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 8002032:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 8129 	bne.w	8002294 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f040 8125 	bne.w	8002294 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002052:	f043 0202 	orr.w	r2, r3, #2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff24 	bl	8001eac <LL_ADC_IsEnabled>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d136      	bne.n	80020d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a65      	ldr	r2, [pc, #404]	@ (8002204 <HAL_ADC_Init+0x298>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_ADC_Init+0x112>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a63      	ldr	r2, [pc, #396]	@ (8002208 <HAL_ADC_Init+0x29c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d10e      	bne.n	800209c <HAL_ADC_Init+0x130>
 800207e:	4861      	ldr	r0, [pc, #388]	@ (8002204 <HAL_ADC_Init+0x298>)
 8002080:	f7ff ff14 	bl	8001eac <LL_ADC_IsEnabled>
 8002084:	4604      	mov	r4, r0
 8002086:	4860      	ldr	r0, [pc, #384]	@ (8002208 <HAL_ADC_Init+0x29c>)
 8002088:	f7ff ff10 	bl	8001eac <LL_ADC_IsEnabled>
 800208c:	4603      	mov	r3, r0
 800208e:	4323      	orrs	r3, r4
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e008      	b.n	80020ae <HAL_ADC_Init+0x142>
 800209c:	485b      	ldr	r0, [pc, #364]	@ (800220c <HAL_ADC_Init+0x2a0>)
 800209e:	f7ff ff05 	bl	8001eac <LL_ADC_IsEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a53      	ldr	r2, [pc, #332]	@ (8002204 <HAL_ADC_Init+0x298>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_ADC_Init+0x15a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a51      	ldr	r2, [pc, #324]	@ (8002208 <HAL_ADC_Init+0x29c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_Init+0x15e>
 80020c6:	4a52      	ldr	r2, [pc, #328]	@ (8002210 <HAL_ADC_Init+0x2a4>)
 80020c8:	e000      	b.n	80020cc <HAL_ADC_Init+0x160>
 80020ca:	4a52      	ldr	r2, [pc, #328]	@ (8002214 <HAL_ADC_Init+0x2a8>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f7ff fd3c 	bl	8001b50 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80020d8:	f7ff fd2e 	bl	8001b38 <HAL_GetREVID>
 80020dc:	4603      	mov	r3, r0
 80020de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d914      	bls.n	8002110 <HAL_ADC_Init+0x1a4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d110      	bne.n	8002110 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7d5b      	ldrb	r3, [r3, #21]
 80020f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7f1b      	ldrb	r3, [r3, #28]
 8002104:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002106:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002108:	f043 030c 	orr.w	r3, r3, #12
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	e00d      	b.n	800212c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7d5b      	ldrb	r3, [r3, #21]
 8002114:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800211a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002120:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7f1b      	ldrb	r3, [r3, #28]
 8002126:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7f1b      	ldrb	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	3b01      	subs	r3, #1
 800213a:	045b      	lsls	r3, r3, #17
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002156:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	4b2c      	ldr	r3, [pc, #176]	@ (8002218 <HAL_ADC_Init+0x2ac>)
 8002166:	4013      	ands	r3, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	69b9      	ldr	r1, [r7, #24]
 800216e:	430b      	orrs	r3, r1
 8002170:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fed2 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 800217c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fedf 	bl	8001f46 <LL_ADC_INJ_IsConversionOngoing>
 8002188:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d15f      	bne.n	8002250 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d15c      	bne.n	8002250 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7d1b      	ldrb	r3, [r3, #20]
 800219a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <HAL_ADC_Init+0x2b0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d130      	bne.n	8002224 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <HAL_ADC_Init+0x2b4>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021d6:	3a01      	subs	r2, #1
 80021d8:	0411      	lsls	r1, r2, #16
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021de:	4311      	orrs	r1, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021e4:	4311      	orrs	r1, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021ea:	430a      	orrs	r2, r1
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	e01c      	b.n	8002234 <HAL_ADC_Init+0x2c8>
 80021fa:	bf00      	nop
 80021fc:	24000004 	.word	0x24000004
 8002200:	053e2d63 	.word	0x053e2d63
 8002204:	40022000 	.word	0x40022000
 8002208:	40022100 	.word	0x40022100
 800220c:	58026000 	.word	0x58026000
 8002210:	40022300 	.word	0x40022300
 8002214:	58026300 	.word	0x58026300
 8002218:	fff0c003 	.word	0xfff0c003
 800221c:	ffffbffc 	.word	0xffffbffc
 8002220:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fde0 	bl	8002e10 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d10c      	bne.n	8002272 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f023 010f 	bic.w	r1, r3, #15
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	1e5a      	subs	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002270:	e007      	b.n	8002282 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 020f 	bic.w	r2, r2, #15
 8002280:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	@ 0x54
 8002292:	e007      	b.n	80022a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002298:	f043 0210 	orr.w	r2, r3, #16
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	@ 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	bf00      	nop

080022b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a55      	ldr	r2, [pc, #340]	@ (8002418 <HAL_ADC_Start_DMA+0x168>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d004      	beq.n	80022d0 <HAL_ADC_Start_DMA+0x20>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a54      	ldr	r2, [pc, #336]	@ (800241c <HAL_ADC_Start_DMA+0x16c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_Start_DMA+0x24>
 80022d0:	4b53      	ldr	r3, [pc, #332]	@ (8002420 <HAL_ADC_Start_DMA+0x170>)
 80022d2:	e000      	b.n	80022d6 <HAL_ADC_Start_DMA+0x26>
 80022d4:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <HAL_ADC_Start_DMA+0x174>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fd64 	bl	8001da4 <LL_ADC_GetMultimode>
 80022dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fe1c 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 808c 	bne.w	8002408 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Start_DMA+0x4e>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e087      	b.n	800240e <HAL_ADC_Start_DMA+0x15e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d002      	beq.n	8002318 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b09      	cmp	r3, #9
 8002316:	d170      	bne.n	80023fa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fbfb 	bl	8002b14 <ADC_Enable>
 800231e:	4603      	mov	r3, r0
 8002320:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d163      	bne.n	80023f0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800232c:	4b3e      	ldr	r3, [pc, #248]	@ (8002428 <HAL_ADC_Start_DMA+0x178>)
 800232e:	4013      	ands	r3, r2
 8002330:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a37      	ldr	r2, [pc, #220]	@ (800241c <HAL_ADC_Start_DMA+0x16c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d002      	beq.n	8002348 <HAL_ADC_Start_DMA+0x98>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e000      	b.n	800234a <HAL_ADC_Start_DMA+0x9a>
 8002348:	4b33      	ldr	r3, [pc, #204]	@ (8002418 <HAL_ADC_Start_DMA+0x168>)
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4293      	cmp	r3, r2
 8002350:	d002      	beq.n	8002358 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	f023 0206 	bic.w	r2, r3, #6
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	659a      	str	r2, [r3, #88]	@ 0x58
 800237c:	e002      	b.n	8002384 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002388:	4a28      	ldr	r2, [pc, #160]	@ (800242c <HAL_ADC_Start_DMA+0x17c>)
 800238a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002390:	4a27      	ldr	r2, [pc, #156]	@ (8002430 <HAL_ADC_Start_DMA+0x180>)
 8002392:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002398:	4a26      	ldr	r2, [pc, #152]	@ (8002434 <HAL_ADC_Start_DMA+0x184>)
 800239a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	221c      	movs	r2, #28
 80023a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0210 	orr.w	r2, r2, #16
 80023ba:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f7ff fc89 	bl	8001cde <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3340      	adds	r3, #64	@ 0x40
 80023d6:	4619      	mov	r1, r3
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f001 febe 	bl	800415c <HAL_DMA_Start_IT>
 80023e0:	4603      	mov	r3, r0
 80023e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fd85 	bl	8001ef8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023ee:	e00d      	b.n	800240c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80023f8:	e008      	b.n	800240c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002406:	e001      	b.n	800240c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002408:	2302      	movs	r3, #2
 800240a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800240c:	7dfb      	ldrb	r3, [r7, #23]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000
 800241c:	40022100 	.word	0x40022100
 8002420:	40022300 	.word	0x40022300
 8002424:	58026300 	.word	0x58026300
 8002428:	fffff0fe 	.word	0xfffff0fe
 800242c:	08002ce7 	.word	0x08002ce7
 8002430:	08002dbf 	.word	0x08002dbf
 8002434:	08002ddb 	.word	0x08002ddb

08002438 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b0a1      	sub	sp, #132	@ 0x84
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a9d      	ldr	r2, [pc, #628]	@ (8002704 <HAL_ADC_ConfigChannel+0x290>)
 800248e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x2a>
 800249a:	2302      	movs	r3, #2
 800249c:	e321      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x66e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fd38 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8306 	bne.w	8002ac4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d108      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x62>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0e9b      	lsrs	r3, r3, #26
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2201      	movs	r2, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	e016      	b.n	8002504 <HAL_ADC_ConfigChannel+0x90>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024e6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80024ee:	2320      	movs	r3, #32
 80024f0:	e003      	b.n	80024fa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80024f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2201      	movs	r2, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	69d1      	ldr	r1, [r2, #28]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	430b      	orrs	r3, r1
 8002510:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6859      	ldr	r1, [r3, #4]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	f7ff fbb1 	bl	8001c86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fcf9 	bl	8001f20 <LL_ADC_REG_IsConversionOngoing>
 800252e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fd06 	bl	8001f46 <LL_ADC_INJ_IsConversionOngoing>
 800253a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800253c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 80b3 	bne.w	80026aa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 80af 	bne.w	80026aa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6819      	ldr	r1, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	461a      	mov	r2, r3
 800255a:	f7ff fbd3 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800255e:	4b6a      	ldr	r3, [pc, #424]	@ (8002708 <HAL_ADC_ConfigChannel+0x294>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800256a:	d10b      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x110>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	e01d      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x14c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10b      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x136>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	e00a      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x14c>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d027      	beq.n	800261a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6919      	ldr	r1, [r3, #16]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025d8:	f7ff faee 	bl	8001bb8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6919      	ldr	r1, [r3, #16]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	7e5b      	ldrb	r3, [r3, #25]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x17e>
 80025ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80025f0:	e000      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x180>
 80025f2:	2300      	movs	r3, #0
 80025f4:	461a      	mov	r2, r3
 80025f6:	f7ff fb18 	bl	8001c2a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	7e1b      	ldrb	r3, [r3, #24]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d102      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x19c>
 800260a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800260e:	e000      	b.n	8002612 <HAL_ADC_ConfigChannel+0x19e>
 8002610:	2300      	movs	r3, #0
 8002612:	461a      	mov	r2, r3
 8002614:	f7ff faf0 	bl	8001bf8 <LL_ADC_SetDataRightShift>
 8002618:	e047      	b.n	80026aa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002620:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	069b      	lsls	r3, r3, #26
 800262a:	429a      	cmp	r2, r3
 800262c:	d107      	bne.n	800263e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800263c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002644:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	069b      	lsls	r3, r3, #26
 800264e:	429a      	cmp	r2, r3
 8002650:	d107      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002660:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002668:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	069b      	lsls	r3, r3, #26
 8002672:	429a      	cmp	r2, r3
 8002674:	d107      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002684:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800268c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	069b      	lsls	r3, r3, #26
 8002696:	429a      	cmp	r2, r3
 8002698:	d107      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fbfc 	bl	8001eac <LL_ADC_IsEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 820d 	bne.w	8002ad6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f7ff fb47 	bl	8001d5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002704 <HAL_ADC_ConfigChannel+0x290>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f040 8133 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d110      	bne.n	800270c <HAL_ADC_ConfigChannel+0x298>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	3301      	adds	r3, #1
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	bf94      	ite	ls
 80026fa:	2301      	movls	r3, #1
 80026fc:	2300      	movhi	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	e01e      	b.n	8002740 <HAL_ADC_ConfigChannel+0x2cc>
 8002702:	bf00      	nop
 8002704:	47ff0000 	.word	0x47ff0000
 8002708:	5c001000 	.word	0x5c001000
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800271a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800271e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e003      	b.n	8002730 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2b09      	cmp	r3, #9
 8002738:	bf94      	ite	ls
 800273a:	2301      	movls	r3, #1
 800273c:	2300      	movhi	r3, #0
 800273e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002740:	2b00      	cmp	r3, #0
 8002742:	d079      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x2ec>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	3301      	adds	r3, #1
 8002758:	069b      	lsls	r3, r3, #26
 800275a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800275e:	e015      	b.n	800278c <HAL_ADC_ConfigChannel+0x318>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800276e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002770:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002778:	2320      	movs	r3, #32
 800277a:	e003      	b.n	8002784 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800277c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	069b      	lsls	r3, r3, #26
 8002788:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x338>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	3301      	adds	r3, #1
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	e017      	b.n	80027dc <HAL_ADC_ConfigChannel+0x368>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80027ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80027be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80027c4:	2320      	movs	r3, #32
 80027c6:	e003      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80027c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	3301      	adds	r3, #1
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	ea42 0103 	orr.w	r1, r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x38e>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0e9b      	lsrs	r3, r3, #26
 80027f2:	3301      	adds	r3, #1
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	051b      	lsls	r3, r3, #20
 8002800:	e018      	b.n	8002834 <HAL_ADC_ConfigChannel+0x3c0>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002812:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e003      	b.n	8002826 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800281e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002834:	430b      	orrs	r3, r1
 8002836:	e07e      	b.n	8002936 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x3e0>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	3301      	adds	r3, #1
 800284c:	069b      	lsls	r3, r3, #26
 800284e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002852:	e015      	b.n	8002880 <HAL_ADC_ConfigChannel+0x40c>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e003      	b.n	8002878 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	3301      	adds	r3, #1
 800287a:	069b      	lsls	r3, r3, #26
 800287c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x42c>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	3301      	adds	r3, #1
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	e017      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x45c>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	61bb      	str	r3, [r7, #24]
  return result;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80028b8:	2320      	movs	r3, #32
 80028ba:	e003      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	ea42 0103 	orr.w	r1, r2, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x488>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0e9b      	lsrs	r3, r3, #26
 80028e6:	3301      	adds	r3, #1
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	3b1e      	subs	r3, #30
 80028f4:	051b      	lsls	r3, r3, #20
 80028f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	e01b      	b.n	8002934 <HAL_ADC_ConfigChannel+0x4c0>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	60fb      	str	r3, [r7, #12]
  return result;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002914:	2320      	movs	r3, #32
 8002916:	e003      	b.n	8002920 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f003 021f 	and.w	r2, r3, #31
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	3b1e      	subs	r3, #30
 800292e:	051b      	lsls	r3, r3, #20
 8002930:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002934:	430b      	orrs	r3, r1
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	4619      	mov	r1, r3
 800293c:	f7ff f9e2 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f280 80c6 	bge.w	8002ad6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a67      	ldr	r2, [pc, #412]	@ (8002aec <HAL_ADC_ConfigChannel+0x678>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_ADC_ConfigChannel+0x4ea>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a65      	ldr	r2, [pc, #404]	@ (8002af0 <HAL_ADC_ConfigChannel+0x67c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x4ee>
 800295e:	4b65      	ldr	r3, [pc, #404]	@ (8002af4 <HAL_ADC_ConfigChannel+0x680>)
 8002960:	e000      	b.n	8002964 <HAL_ADC_ConfigChannel+0x4f0>
 8002962:	4b65      	ldr	r3, [pc, #404]	@ (8002af8 <HAL_ADC_ConfigChannel+0x684>)
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff f919 	bl	8001b9c <LL_ADC_GetCommonPathInternalCh>
 800296a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5e      	ldr	r2, [pc, #376]	@ (8002aec <HAL_ADC_ConfigChannel+0x678>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_ADC_ConfigChannel+0x50c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5d      	ldr	r2, [pc, #372]	@ (8002af0 <HAL_ADC_ConfigChannel+0x67c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10e      	bne.n	800299e <HAL_ADC_ConfigChannel+0x52a>
 8002980:	485a      	ldr	r0, [pc, #360]	@ (8002aec <HAL_ADC_ConfigChannel+0x678>)
 8002982:	f7ff fa93 	bl	8001eac <LL_ADC_IsEnabled>
 8002986:	4604      	mov	r4, r0
 8002988:	4859      	ldr	r0, [pc, #356]	@ (8002af0 <HAL_ADC_ConfigChannel+0x67c>)
 800298a:	f7ff fa8f 	bl	8001eac <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	4323      	orrs	r3, r4
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf0c      	ite	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	2300      	movne	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	e008      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x53c>
 800299e:	4857      	ldr	r0, [pc, #348]	@ (8002afc <HAL_ADC_ConfigChannel+0x688>)
 80029a0:	f7ff fa84 	bl	8001eac <LL_ADC_IsEnabled>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d07d      	beq.n	8002ab0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a51      	ldr	r2, [pc, #324]	@ (8002b00 <HAL_ADC_ConfigChannel+0x68c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d130      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x5ac>
 80029be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d12b      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4b      	ldr	r2, [pc, #300]	@ (8002afc <HAL_ADC_ConfigChannel+0x688>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	f040 8081 	bne.w	8002ad6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a44      	ldr	r2, [pc, #272]	@ (8002aec <HAL_ADC_ConfigChannel+0x678>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x574>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a43      	ldr	r2, [pc, #268]	@ (8002af0 <HAL_ADC_ConfigChannel+0x67c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x578>
 80029e8:	4a42      	ldr	r2, [pc, #264]	@ (8002af4 <HAL_ADC_ConfigChannel+0x680>)
 80029ea:	e000      	b.n	80029ee <HAL_ADC_ConfigChannel+0x57a>
 80029ec:	4a42      	ldr	r2, [pc, #264]	@ (8002af8 <HAL_ADC_ConfigChannel+0x684>)
 80029ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f7ff f8bd 	bl	8001b76 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029fc:	4b41      	ldr	r3, [pc, #260]	@ (8002b04 <HAL_ADC_ConfigChannel+0x690>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	4a41      	ldr	r2, [pc, #260]	@ (8002b08 <HAL_ADC_ConfigChannel+0x694>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a10:	e002      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f9      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a1e:	e05a      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a39      	ldr	r2, [pc, #228]	@ (8002b0c <HAL_ADC_ConfigChannel+0x698>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d11e      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x5f4>
 8002a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d119      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a30      	ldr	r2, [pc, #192]	@ (8002afc <HAL_ADC_ConfigChannel+0x688>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d14b      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2a      	ldr	r2, [pc, #168]	@ (8002aec <HAL_ADC_ConfigChannel+0x678>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x5de>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a28      	ldr	r2, [pc, #160]	@ (8002af0 <HAL_ADC_ConfigChannel+0x67c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x5e2>
 8002a52:	4a28      	ldr	r2, [pc, #160]	@ (8002af4 <HAL_ADC_ConfigChannel+0x680>)
 8002a54:	e000      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x5e4>
 8002a56:	4a28      	ldr	r2, [pc, #160]	@ (8002af8 <HAL_ADC_ConfigChannel+0x684>)
 8002a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f7ff f888 	bl	8001b76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a66:	e036      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a28      	ldr	r2, [pc, #160]	@ (8002b10 <HAL_ADC_ConfigChannel+0x69c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d131      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x662>
 8002a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d12c      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1e      	ldr	r2, [pc, #120]	@ (8002afc <HAL_ADC_ConfigChannel+0x688>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d127      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a18      	ldr	r2, [pc, #96]	@ (8002aec <HAL_ADC_ConfigChannel+0x678>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d004      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x626>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a16      	ldr	r2, [pc, #88]	@ (8002af0 <HAL_ADC_ConfigChannel+0x67c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x62a>
 8002a9a:	4a16      	ldr	r2, [pc, #88]	@ (8002af4 <HAL_ADC_ConfigChannel+0x680>)
 8002a9c:	e000      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x62c>
 8002a9e:	4a16      	ldr	r2, [pc, #88]	@ (8002af8 <HAL_ADC_ConfigChannel+0x684>)
 8002aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7ff f864 	bl	8001b76 <LL_ADC_SetCommonPathInternalCh>
 8002aae:	e012      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ac2:	e008      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ade:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3784      	adds	r7, #132	@ 0x84
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40022100 	.word	0x40022100
 8002af4:	40022300 	.word	0x40022300
 8002af8:	58026300 	.word	0x58026300
 8002afc:	58026000 	.word	0x58026000
 8002b00:	cb840000 	.word	0xcb840000
 8002b04:	24000004 	.word	0x24000004
 8002b08:	053e2d63 	.word	0x053e2d63
 8002b0c:	c7520000 	.word	0xc7520000
 8002b10:	cfb80000 	.word	0xcfb80000

08002b14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff f9c3 	bl	8001eac <LL_ADC_IsEnabled>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d16e      	bne.n	8002c0a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <ADC_Enable+0x100>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e05a      	b.n	8002c0c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff f97e 	bl	8001e5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b60:	f7fe ffba 	bl	8001ad8 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c18 <ADC_Enable+0x104>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <ADC_Enable+0x66>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a29      	ldr	r2, [pc, #164]	@ (8002c1c <ADC_Enable+0x108>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <ADC_Enable+0x6a>
 8002b7a:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <ADC_Enable+0x10c>)
 8002b7c:	e000      	b.n	8002b80 <ADC_Enable+0x6c>
 8002b7e:	4b29      	ldr	r3, [pc, #164]	@ (8002c24 <ADC_Enable+0x110>)
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f90f 	bl	8001da4 <LL_ADC_GetMultimode>
 8002b86:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	@ (8002c1c <ADC_Enable+0x108>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d002      	beq.n	8002b98 <ADC_Enable+0x84>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	e000      	b.n	8002b9a <ADC_Enable+0x86>
 8002b98:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <ADC_Enable+0x104>)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02c      	beq.n	8002bfc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d130      	bne.n	8002c0a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ba8:	e028      	b.n	8002bfc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f97c 	bl	8001eac <LL_ADC_IsEnabled>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff f94c 	bl	8001e5c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc4:	f7fe ff88 	bl	8001ad8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d914      	bls.n	8002bfc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d00d      	beq.n	8002bfc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be4:	f043 0210 	orr.w	r2, r3, #16
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf0:	f043 0201 	orr.w	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e007      	b.n	8002c0c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d1cf      	bne.n	8002baa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	8000003f 	.word	0x8000003f
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40022100 	.word	0x40022100
 8002c20:	40022300 	.word	0x40022300
 8002c24:	58026300 	.word	0x58026300

08002c28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff f94c 	bl	8001ed2 <LL_ADC_IsDisableOngoing>
 8002c3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f933 	bl	8001eac <LL_ADC_IsEnabled>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d047      	beq.n	8002cdc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d144      	bne.n	8002cdc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030d 	and.w	r3, r3, #13
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10c      	bne.n	8002c7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f90d 	bl	8001e84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c72:	f7fe ff31 	bl	8001ad8 <HAL_GetTick>
 8002c76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c78:	e029      	b.n	8002cce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e023      	b.n	8002cde <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c96:	f7fe ff1f 	bl	8001ad8 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d914      	bls.n	8002cce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1dc      	bne.n	8002c96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d14b      	bne.n	8002d98 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d021      	beq.n	8002d5e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe ff9e 	bl	8001c60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d032      	beq.n	8002d90 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d12b      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11f      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d5c:	e018      	b.n	8002d90 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff fb51 	bl	8002438 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d96:	e00e      	b.n	8002db6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff fb5b 	bl	8002460 <HAL_ADC_ErrorCallback>
}
 8002daa:	e004      	b.n	8002db6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fb3d 	bl	800244c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fb2d 	bl	8002460 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a7a      	ldr	r2, [pc, #488]	@ (8003008 <ADC_ConfigureBoostMode+0x1f8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <ADC_ConfigureBoostMode+0x1c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a79      	ldr	r2, [pc, #484]	@ (800300c <ADC_ConfigureBoostMode+0x1fc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d109      	bne.n	8002e40 <ADC_ConfigureBoostMode+0x30>
 8002e2c:	4b78      	ldr	r3, [pc, #480]	@ (8003010 <ADC_ConfigureBoostMode+0x200>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e008      	b.n	8002e52 <ADC_ConfigureBoostMode+0x42>
 8002e40:	4b74      	ldr	r3, [pc, #464]	@ (8003014 <ADC_ConfigureBoostMode+0x204>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01c      	beq.n	8002e90 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e56:	f006 f80d 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 8002e5a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e64:	d010      	beq.n	8002e88 <ADC_ConfigureBoostMode+0x78>
 8002e66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e6a:	d873      	bhi.n	8002f54 <ADC_ConfigureBoostMode+0x144>
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e70:	d002      	beq.n	8002e78 <ADC_ConfigureBoostMode+0x68>
 8002e72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e76:	d16d      	bne.n	8002f54 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	60fb      	str	r3, [r7, #12]
        break;
 8002e86:	e068      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	60fb      	str	r3, [r7, #12]
        break;
 8002e8e:	e064      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e90:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e94:	f04f 0100 	mov.w	r1, #0
 8002e98:	f007 fa7e 	bl	800a398 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e9c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002ea6:	d051      	beq.n	8002f4c <ADC_ConfigureBoostMode+0x13c>
 8002ea8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002eac:	d854      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002eae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002eb2:	d047      	beq.n	8002f44 <ADC_ConfigureBoostMode+0x134>
 8002eb4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002eb8:	d84e      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002eba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ebe:	d03d      	beq.n	8002f3c <ADC_ConfigureBoostMode+0x12c>
 8002ec0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ec4:	d848      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002ec6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eca:	d033      	beq.n	8002f34 <ADC_ConfigureBoostMode+0x124>
 8002ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ed0:	d842      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002ed2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ed6:	d029      	beq.n	8002f2c <ADC_ConfigureBoostMode+0x11c>
 8002ed8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002edc:	d83c      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002ede:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ee2:	d01a      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002ee4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ee8:	d836      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002eea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002eee:	d014      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002ef0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002ef4:	d830      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002efa:	d00e      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002efc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f00:	d82a      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002f02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f06:	d008      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002f08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f0c:	d824      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002f0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f12:	d002      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002f14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f18:	d11e      	bne.n	8002f58 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	60fb      	str	r3, [r7, #12]
        break;
 8002f2a:	e016      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
        break;
 8002f32:	e012      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	60fb      	str	r3, [r7, #12]
        break;
 8002f3a:	e00e      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	60fb      	str	r3, [r7, #12]
        break;
 8002f42:	e00a      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	09db      	lsrs	r3, r3, #7
 8002f48:	60fb      	str	r3, [r7, #12]
        break;
 8002f4a:	e006      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	60fb      	str	r3, [r7, #12]
        break;
 8002f52:	e002      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002f54:	bf00      	nop
 8002f56:	e000      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002f58:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f5a:	f7fe fded 	bl	8001b38 <HAL_GetREVID>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d815      	bhi.n	8002f94 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003018 <ADC_ConfigureBoostMode+0x208>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d908      	bls.n	8002f82 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f7e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f80:	e03e      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	e035      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800301c <ADC_ConfigureBoostMode+0x20c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d808      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002fb0:	609a      	str	r2, [r3, #8]
}
 8002fb2:	e025      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003020 <ADC_ConfigureBoostMode+0x210>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d80a      	bhi.n	8002fd2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	e016      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	@ (8003024 <ADC_ConfigureBoostMode+0x214>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d80a      	bhi.n	8002ff0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fec:	609a      	str	r2, [r3, #8]
}
 8002fee:	e007      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40022000 	.word	0x40022000
 800300c:	40022100 	.word	0x40022100
 8003010:	40022300 	.word	0x40022300
 8003014:	58026300 	.word	0x58026300
 8003018:	01312d00 	.word	0x01312d00
 800301c:	005f5e10 	.word	0x005f5e10
 8003020:	00bebc20 	.word	0x00bebc20
 8003024:	017d7840 	.word	0x017d7840

08003028 <LL_ADC_IsEnabled>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <LL_ADC_IsEnabled+0x18>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <LL_ADC_IsEnabled+0x1a>
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <LL_ADC_StartCalibration>:
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <LL_ADC_StartCalibration+0x38>)
 8003062:	4013      	ands	r3, r2
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003070:	430a      	orrs	r2, r1
 8003072:	4313      	orrs	r3, r2
 8003074:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	3ffeffc0 	.word	0x3ffeffc0

0800308c <LL_ADC_IsCalibrationOnGoing>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800309c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030a0:	d101      	bne.n	80030a6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_ADC_REG_IsConversionOngoing>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d101      	bne.n	80030cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_ADCEx_Calibration_Start+0x1e>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e04c      	b.n	8003194 <HAL_ADCEx_Calibration_Start+0xb8>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff fd90 	bl	8002c28 <ADC_Disable>
 8003108:	4603      	mov	r3, r0
 800310a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d135      	bne.n	800317e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003116:	4b21      	ldr	r3, [pc, #132]	@ (800319c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003118:	4013      	ands	r3, r2
 800311a:	f043 0202 	orr.w	r2, r3, #2
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff90 	bl	8003050 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003130:	e014      	b.n	800315c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	3301      	adds	r3, #1
 8003136:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4a19      	ldr	r2, [pc, #100]	@ (80031a0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d30d      	bcc.n	800315c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003144:	f023 0312 	bic.w	r3, r3, #18
 8003148:	f043 0210 	orr.w	r2, r3, #16
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e01b      	b.n	8003194 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff93 	bl	800308c <LL_ADC_IsCalibrationOnGoing>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e2      	bne.n	8003132 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003170:	f023 0303 	bic.w	r3, r3, #3
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	655a      	str	r2, [r3, #84]	@ 0x54
 800317c:	e005      	b.n	800318a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003192:	7dfb      	ldrb	r3, [r7, #23]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	ffffeefd 	.word	0xffffeefd
 80031a0:	25c3f800 	.word	0x25c3f800

080031a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b09f      	sub	sp, #124	@ 0x7c
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0be      	b.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d102      	bne.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031dc:	4b5b      	ldr	r3, [pc, #364]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	e001      	b.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e09d      	b.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff ff54 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 800320c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff4e 	bl	80030b4 <LL_ADC_REG_IsConversionOngoing>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d17f      	bne.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800321e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003220:	2b00      	cmp	r3, #0
 8003222:	d17c      	bne.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a47      	ldr	r2, [pc, #284]	@ (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a46      	ldr	r2, [pc, #280]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003238:	4b45      	ldr	r3, [pc, #276]	@ (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800323a:	e000      	b.n	800323e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800323c:	4b45      	ldr	r3, [pc, #276]	@ (8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800323e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d039      	beq.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	431a      	orrs	r2, r3
 8003256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003258:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3a      	ldr	r2, [pc, #232]	@ (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a38      	ldr	r2, [pc, #224]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10e      	bne.n	800328c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800326e:	4836      	ldr	r0, [pc, #216]	@ (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003270:	f7ff feda 	bl	8003028 <LL_ADC_IsEnabled>
 8003274:	4604      	mov	r4, r0
 8003276:	4835      	ldr	r0, [pc, #212]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003278:	f7ff fed6 	bl	8003028 <LL_ADC_IsEnabled>
 800327c:	4603      	mov	r3, r0
 800327e:	4323      	orrs	r3, r4
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e008      	b.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800328c:	4832      	ldr	r0, [pc, #200]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800328e:	f7ff fecb 	bl	8003028 <LL_ADC_IsEnabled>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d047      	beq.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	4b2d      	ldr	r3, [pc, #180]	@ (800335c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	6811      	ldr	r1, [r2, #0]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	6892      	ldr	r2, [r2, #8]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	431a      	orrs	r2, r3
 80032b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032ba:	e03a      	b.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80032bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1d      	ldr	r2, [pc, #116]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d10e      	bne.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80032dc:	481a      	ldr	r0, [pc, #104]	@ (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032de:	f7ff fea3 	bl	8003028 <LL_ADC_IsEnabled>
 80032e2:	4604      	mov	r4, r0
 80032e4:	4819      	ldr	r0, [pc, #100]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032e6:	f7ff fe9f 	bl	8003028 <LL_ADC_IsEnabled>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4323      	orrs	r3, r4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	e008      	b.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80032fa:	4817      	ldr	r0, [pc, #92]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80032fc:	f7ff fe94 	bl	8003028 <LL_ADC_IsEnabled>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d010      	beq.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003316:	4013      	ands	r3, r2
 8003318:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800331a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800331c:	e009      	b.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003330:	e000      	b.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003332:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800333c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003340:	4618      	mov	r0, r3
 8003342:	377c      	adds	r7, #124	@ 0x7c
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}
 8003348:	40022000 	.word	0x40022000
 800334c:	40022100 	.word	0x40022100
 8003350:	40022300 	.word	0x40022300
 8003354:	58026300 	.word	0x58026300
 8003358:	58026000 	.word	0x58026000
 800335c:	fffff0e0 	.word	0xfffff0e0

08003360 <__NVIC_SetPriorityGrouping>:
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003388:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 800338a:	4313      	orrs	r3, r2
 800338c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800338e:	4a04      	ldr	r2, [pc, #16]	@ (80033a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	60d3      	str	r3, [r2, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00
 80033a4:	05fa0000 	.word	0x05fa0000

080033a8 <__NVIC_GetPriorityGrouping>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4907      	ldr	r1, [pc, #28]	@ (80033fc <__NVIC_EnableIRQ+0x38>)
 80033de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_SetPriority>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800340c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003410:	2b00      	cmp	r3, #0
 8003412:	db0a      	blt.n	800342a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	490c      	ldr	r1, [pc, #48]	@ (800344c <__NVIC_SetPriority+0x4c>)
 800341a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	440b      	add	r3, r1
 8003424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003428:	e00a      	b.n	8003440 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4908      	ldr	r1, [pc, #32]	@ (8003450 <__NVIC_SetPriority+0x50>)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	3b04      	subs	r3, #4
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	440b      	add	r3, r1
 800343e:	761a      	strb	r2, [r3, #24]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <NVIC_EncodePriority>:
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	@ 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f1c3 0307 	rsb	r3, r3, #7
 800346e:	2b04      	cmp	r3, #4
 8003470:	bf28      	it	cs
 8003472:	2304      	movcs	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3304      	adds	r3, #4
 800347a:	2b06      	cmp	r3, #6
 800347c:	d902      	bls.n	8003484 <NVIC_EncodePriority+0x30>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3b03      	subs	r3, #3
 8003482:	e000      	b.n	8003486 <NVIC_EncodePriority+0x32>
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	f04f 32ff 	mov.w	r2, #4294967295
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	43d9      	mvns	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	4313      	orrs	r3, r2
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ff4c 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034de:	f7ff ff63 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 80034e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	6978      	ldr	r0, [r7, #20]
 80034ea:	f7ff ffb3 	bl	8003454 <NVIC_EncodePriority>
 80034ee:	4602      	mov	r2, r0
 80034f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff82 	bl	8003400 <__NVIC_SetPriority>
}
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800350e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff56 	bl	80033c4 <__NVIC_EnableIRQ>
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003524:	f3bf 8f5f 	dmb	sy
}
 8003528:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800352a:	4b07      	ldr	r3, [pc, #28]	@ (8003548 <HAL_MPU_Disable+0x28>)
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	4a06      	ldr	r2, [pc, #24]	@ (8003548 <HAL_MPU_Disable+0x28>)
 8003530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003534:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003536:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_MPU_Disable+0x2c>)
 8003538:	2200      	movs	r2, #0
 800353a:	605a      	str	r2, [r3, #4]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000ed00 	.word	0xe000ed00
 800354c:	e000ed90 	.word	0xe000ed90

08003550 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003558:	4a0b      	ldr	r2, [pc, #44]	@ (8003588 <HAL_MPU_Enable+0x38>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_MPU_Enable+0x3c>)
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	4a09      	ldr	r2, [pc, #36]	@ (800358c <HAL_MPU_Enable+0x3c>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800356e:	f3bf 8f4f 	dsb	sy
}
 8003572:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003574:	f3bf 8f6f 	isb	sy
}
 8003578:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000ed90 	.word	0xe000ed90
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	785a      	ldrb	r2, [r3, #1]
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_MPU_ConfigRegion+0x84>)
 800359e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d029      	beq.n	80035fc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80035a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003614 <HAL_MPU_ConfigRegion+0x84>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7b1b      	ldrb	r3, [r3, #12]
 80035b4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7adb      	ldrb	r3, [r3, #11]
 80035ba:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7a9b      	ldrb	r3, [r3, #10]
 80035c2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80035c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7b5b      	ldrb	r3, [r3, #13]
 80035ca:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80035cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7b9b      	ldrb	r3, [r3, #14]
 80035d2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80035d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7bdb      	ldrb	r3, [r3, #15]
 80035da:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80035dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7a5b      	ldrb	r3, [r3, #9]
 80035e2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80035e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7a1b      	ldrb	r3, [r3, #8]
 80035ea:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035ec:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035f4:	4a07      	ldr	r2, [pc, #28]	@ (8003614 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035f6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035f8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80035fa:	e005      	b.n	8003608 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80035fc:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <HAL_MPU_ConfigRegion+0x84>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003602:	4b04      	ldr	r3, [pc, #16]	@ (8003614 <HAL_MPU_ConfigRegion+0x84>)
 8003604:	2200      	movs	r2, #0
 8003606:	611a      	str	r2, [r3, #16]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed90 	.word	0xe000ed90

08003618 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e014      	b.n	8003654 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	791b      	ldrb	r3, [r3, #4]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd f83a 	bl	80006b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	795b      	ldrb	r3, [r3, #5]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_DAC_Start+0x16>
 800366e:	2302      	movs	r3, #2
 8003670:	e040      	b.n	80036f4 <HAL_DAC_Start+0x98>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6819      	ldr	r1, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2201      	movs	r2, #1
 800368c:	409a      	lsls	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10f      	bne.n	80036bc <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d11d      	bne.n	80036e6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	e014      	b.n	80036e6 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2102      	movs	r1, #2
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d107      	bne.n	80036e6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0202 	orr.w	r2, r2, #2
 80036e4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003716:	d120      	bne.n	800375a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800371e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003726:	d118      	bne.n	800375a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2204      	movs	r2, #4
 800372c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003742:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003752:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f852 	bl	80037fe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003768:	d120      	bne.n	80037ac <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003778:	d118      	bne.n	80037ac <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2204      	movs	r2, #4
 800377e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f043 0202 	orr.w	r2, r3, #2
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003794:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80037a4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f972 	bl	8003a90 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	3308      	adds	r3, #8
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e004      	b.n	80037e8 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	3314      	adds	r3, #20
 80037e6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	461a      	mov	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	795b      	ldrb	r3, [r3, #5]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_DAC_ConfigChannel+0x18>
 8003828:	2302      	movs	r3, #2
 800382a:	e12a      	b.n	8003a82 <HAL_DAC_ConfigChannel+0x26e>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2202      	movs	r2, #2
 8003836:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b04      	cmp	r3, #4
 800383e:	f040 8081 	bne.w	8003944 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003842:	f7fe f949 	bl	8001ad8 <HAL_GetTick>
 8003846:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d140      	bne.n	80038d0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800384e:	e018      	b.n	8003882 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003850:	f7fe f942 	bl	8001ad8 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d911      	bls.n	8003882 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003864:	4b89      	ldr	r3, [pc, #548]	@ (8003a8c <HAL_DAC_ConfigChannel+0x278>)
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f043 0208 	orr.w	r2, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2203      	movs	r2, #3
 800387c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0ff      	b.n	8003a82 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003888:	4b80      	ldr	r3, [pc, #512]	@ (8003a8c <HAL_DAC_ConfigChannel+0x278>)
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1df      	bne.n	8003850 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8003890:	2001      	movs	r0, #1
 8003892:	f7fe f92d 	bl	8001af0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	6992      	ldr	r2, [r2, #24]
 800389e:	641a      	str	r2, [r3, #64]	@ 0x40
 80038a0:	e023      	b.n	80038ea <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038a2:	f7fe f919 	bl	8001ad8 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d90f      	bls.n	80038d0 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da0a      	bge.n	80038d0 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f043 0208 	orr.w	r2, r3, #8
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2203      	movs	r2, #3
 80038ca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e0d8      	b.n	8003a82 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	dbe3      	blt.n	80038a2 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80038da:	2001      	movs	r0, #1
 80038dc:	f7fe f908 	bl	8001af0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	6992      	ldr	r2, [r2, #24]
 80038e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	ea02 0103 	and.w	r1, r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	409a      	lsls	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	21ff      	movs	r1, #255	@ 0xff
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	ea02 0103 	and.w	r1, r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6a1a      	ldr	r2, [r3, #32]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d11d      	bne.n	8003988 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003952:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	221f      	movs	r2, #31
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4013      	ands	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2207      	movs	r2, #7
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4013      	ands	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d102      	bne.n	80039b2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	e00f      	b.n	80039d2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d102      	bne.n	80039c0 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80039ba:	2301      	movs	r3, #1
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e008      	b.n	80039d2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80039c8:	2301      	movs	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	e001      	b.n	80039d2 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4313      	orrs	r3, r2
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43da      	mvns	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	400a      	ands	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	22c0      	movs	r2, #192	@ 0xc0
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	400a      	ands	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20008000 	.word	0x20008000

08003a90 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7fe f814 	bl	8001ad8 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e316      	b.n	80040ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a66      	ldr	r2, [pc, #408]	@ (8003c5c <HAL_DMA_Init+0x1b8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d04a      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a65      	ldr	r2, [pc, #404]	@ (8003c60 <HAL_DMA_Init+0x1bc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d045      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a63      	ldr	r2, [pc, #396]	@ (8003c64 <HAL_DMA_Init+0x1c0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d040      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a62      	ldr	r2, [pc, #392]	@ (8003c68 <HAL_DMA_Init+0x1c4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d03b      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a60      	ldr	r2, [pc, #384]	@ (8003c6c <HAL_DMA_Init+0x1c8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d036      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5f      	ldr	r2, [pc, #380]	@ (8003c70 <HAL_DMA_Init+0x1cc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d031      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a5d      	ldr	r2, [pc, #372]	@ (8003c74 <HAL_DMA_Init+0x1d0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02c      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5c      	ldr	r2, [pc, #368]	@ (8003c78 <HAL_DMA_Init+0x1d4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d027      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5a      	ldr	r2, [pc, #360]	@ (8003c7c <HAL_DMA_Init+0x1d8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a59      	ldr	r2, [pc, #356]	@ (8003c80 <HAL_DMA_Init+0x1dc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01d      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a57      	ldr	r2, [pc, #348]	@ (8003c84 <HAL_DMA_Init+0x1e0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a56      	ldr	r2, [pc, #344]	@ (8003c88 <HAL_DMA_Init+0x1e4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a54      	ldr	r2, [pc, #336]	@ (8003c8c <HAL_DMA_Init+0x1e8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a53      	ldr	r2, [pc, #332]	@ (8003c90 <HAL_DMA_Init+0x1ec>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a51      	ldr	r2, [pc, #324]	@ (8003c94 <HAL_DMA_Init+0x1f0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a50      	ldr	r2, [pc, #320]	@ (8003c98 <HAL_DMA_Init+0x1f4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <HAL_DMA_Init+0xbc>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <HAL_DMA_Init+0xbe>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 813b 	beq.w	8003dde <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a37      	ldr	r2, [pc, #220]	@ (8003c5c <HAL_DMA_Init+0x1b8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d04a      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a36      	ldr	r2, [pc, #216]	@ (8003c60 <HAL_DMA_Init+0x1bc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d045      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a34      	ldr	r2, [pc, #208]	@ (8003c64 <HAL_DMA_Init+0x1c0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d040      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a33      	ldr	r2, [pc, #204]	@ (8003c68 <HAL_DMA_Init+0x1c4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d03b      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a31      	ldr	r2, [pc, #196]	@ (8003c6c <HAL_DMA_Init+0x1c8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d036      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a30      	ldr	r2, [pc, #192]	@ (8003c70 <HAL_DMA_Init+0x1cc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d031      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8003c74 <HAL_DMA_Init+0x1d0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d02c      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8003c78 <HAL_DMA_Init+0x1d4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d027      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c7c <HAL_DMA_Init+0x1d8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d022      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c80 <HAL_DMA_Init+0x1dc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d01d      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a28      	ldr	r2, [pc, #160]	@ (8003c84 <HAL_DMA_Init+0x1e0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d018      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a27      	ldr	r2, [pc, #156]	@ (8003c88 <HAL_DMA_Init+0x1e4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d013      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a25      	ldr	r2, [pc, #148]	@ (8003c8c <HAL_DMA_Init+0x1e8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00e      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a24      	ldr	r2, [pc, #144]	@ (8003c90 <HAL_DMA_Init+0x1ec>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d009      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a22      	ldr	r2, [pc, #136]	@ (8003c94 <HAL_DMA_Init+0x1f0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a21      	ldr	r2, [pc, #132]	@ (8003c98 <HAL_DMA_Init+0x1f4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d108      	bne.n	8003c2a <HAL_DMA_Init+0x186>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e007      	b.n	8003c3a <HAL_DMA_Init+0x196>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c3a:	e02f      	b.n	8003c9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c3c:	f7fd ff4c 	bl	8001ad8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d928      	bls.n	8003c9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e246      	b.n	80040ea <HAL_DMA_Init+0x646>
 8003c5c:	40020010 	.word	0x40020010
 8003c60:	40020028 	.word	0x40020028
 8003c64:	40020040 	.word	0x40020040
 8003c68:	40020058 	.word	0x40020058
 8003c6c:	40020070 	.word	0x40020070
 8003c70:	40020088 	.word	0x40020088
 8003c74:	400200a0 	.word	0x400200a0
 8003c78:	400200b8 	.word	0x400200b8
 8003c7c:	40020410 	.word	0x40020410
 8003c80:	40020428 	.word	0x40020428
 8003c84:	40020440 	.word	0x40020440
 8003c88:	40020458 	.word	0x40020458
 8003c8c:	40020470 	.word	0x40020470
 8003c90:	40020488 	.word	0x40020488
 8003c94:	400204a0 	.word	0x400204a0
 8003c98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1c8      	bne.n	8003c3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4b83      	ldr	r3, [pc, #524]	@ (8003ec4 <HAL_DMA_Init+0x420>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003cc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003d00:	4b71      	ldr	r3, [pc, #452]	@ (8003ec8 <HAL_DMA_Init+0x424>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b71      	ldr	r3, [pc, #452]	@ (8003ecc <HAL_DMA_Init+0x428>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d0c:	d328      	bcc.n	8003d60 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b28      	cmp	r3, #40	@ 0x28
 8003d14:	d903      	bls.n	8003d1e <HAL_DMA_Init+0x27a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d1c:	d917      	bls.n	8003d4e <HAL_DMA_Init+0x2aa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d24:	d903      	bls.n	8003d2e <HAL_DMA_Init+0x28a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b42      	cmp	r3, #66	@ 0x42
 8003d2c:	d90f      	bls.n	8003d4e <HAL_DMA_Init+0x2aa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b46      	cmp	r3, #70	@ 0x46
 8003d34:	d903      	bls.n	8003d3e <HAL_DMA_Init+0x29a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b48      	cmp	r3, #72	@ 0x48
 8003d3c:	d907      	bls.n	8003d4e <HAL_DMA_Init+0x2aa>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b4e      	cmp	r3, #78	@ 0x4e
 8003d44:	d905      	bls.n	8003d52 <HAL_DMA_Init+0x2ae>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b52      	cmp	r3, #82	@ 0x52
 8003d4c:	d801      	bhi.n	8003d52 <HAL_DMA_Init+0x2ae>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_DMA_Init+0x2b0>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d5e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0307 	bic.w	r3, r3, #7
 8003d76:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d117      	bne.n	8003dba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00e      	beq.n	8003dba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f001 fdcf 	bl	8005940 <DMA_CheckFifoParam>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2240      	movs	r2, #64	@ 0x40
 8003dac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e197      	b.n	80040ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f001 fd0a 	bl	80057dc <DMA_CalcBaseAndBitshift>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	223f      	movs	r2, #63	@ 0x3f
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	e0cd      	b.n	8003f7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ed0 <HAL_DMA_Init+0x42c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a39      	ldr	r2, [pc, #228]	@ (8003ed4 <HAL_DMA_Init+0x430>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01d      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a38      	ldr	r2, [pc, #224]	@ (8003ed8 <HAL_DMA_Init+0x434>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a36      	ldr	r2, [pc, #216]	@ (8003edc <HAL_DMA_Init+0x438>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a35      	ldr	r2, [pc, #212]	@ (8003ee0 <HAL_DMA_Init+0x43c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a33      	ldr	r2, [pc, #204]	@ (8003ee4 <HAL_DMA_Init+0x440>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a32      	ldr	r2, [pc, #200]	@ (8003ee8 <HAL_DMA_Init+0x444>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a30      	ldr	r2, [pc, #192]	@ (8003eec <HAL_DMA_Init+0x448>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_DMA_Init+0x38e>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_DMA_Init+0x390>
 8003e32:	2300      	movs	r3, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8097 	beq.w	8003f68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a24      	ldr	r2, [pc, #144]	@ (8003ed0 <HAL_DMA_Init+0x42c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d021      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a22      	ldr	r2, [pc, #136]	@ (8003ed4 <HAL_DMA_Init+0x430>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01c      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a21      	ldr	r2, [pc, #132]	@ (8003ed8 <HAL_DMA_Init+0x434>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d017      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003edc <HAL_DMA_Init+0x438>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d012      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee0 <HAL_DMA_Init+0x43c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00d      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee4 <HAL_DMA_Init+0x440>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d008      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee8 <HAL_DMA_Init+0x444>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a19      	ldr	r2, [pc, #100]	@ (8003eec <HAL_DMA_Init+0x448>)
 8003e86:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4b13      	ldr	r3, [pc, #76]	@ (8003ef0 <HAL_DMA_Init+0x44c>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d021      	beq.n	8003ef4 <HAL_DMA_Init+0x450>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b80      	cmp	r3, #128	@ 0x80
 8003eb6:	d102      	bne.n	8003ebe <HAL_DMA_Init+0x41a>
 8003eb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ebc:	e01b      	b.n	8003ef6 <HAL_DMA_Init+0x452>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e019      	b.n	8003ef6 <HAL_DMA_Init+0x452>
 8003ec2:	bf00      	nop
 8003ec4:	fe10803f 	.word	0xfe10803f
 8003ec8:	5c001000 	.word	0x5c001000
 8003ecc:	ffff0000 	.word	0xffff0000
 8003ed0:	58025408 	.word	0x58025408
 8003ed4:	5802541c 	.word	0x5802541c
 8003ed8:	58025430 	.word	0x58025430
 8003edc:	58025444 	.word	0x58025444
 8003ee0:	58025458 	.word	0x58025458
 8003ee4:	5802546c 	.word	0x5802546c
 8003ee8:	58025480 	.word	0x58025480
 8003eec:	58025494 	.word	0x58025494
 8003ef0:	fffe000f 	.word	0xfffe000f
 8003ef4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68d2      	ldr	r2, [r2, #12]
 8003efa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b6e      	ldr	r3, [pc, #440]	@ (80040f4 <HAL_DMA_Init+0x650>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4a6e      	ldr	r2, [pc, #440]	@ (80040f8 <HAL_DMA_Init+0x654>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f001 fc45 	bl	80057dc <DMA_CalcBaseAndBitshift>
 8003f52:	4603      	mov	r3, r0
 8003f54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2201      	movs	r2, #1
 8003f60:	409a      	lsls	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	e008      	b.n	8003f7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2240      	movs	r2, #64	@ 0x40
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2203      	movs	r2, #3
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e0b7      	b.n	80040ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a5f      	ldr	r2, [pc, #380]	@ (80040fc <HAL_DMA_Init+0x658>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d072      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a5d      	ldr	r2, [pc, #372]	@ (8004100 <HAL_DMA_Init+0x65c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d06d      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a5c      	ldr	r2, [pc, #368]	@ (8004104 <HAL_DMA_Init+0x660>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d068      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004108 <HAL_DMA_Init+0x664>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d063      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a59      	ldr	r2, [pc, #356]	@ (800410c <HAL_DMA_Init+0x668>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d05e      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a57      	ldr	r2, [pc, #348]	@ (8004110 <HAL_DMA_Init+0x66c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d059      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a56      	ldr	r2, [pc, #344]	@ (8004114 <HAL_DMA_Init+0x670>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d054      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a54      	ldr	r2, [pc, #336]	@ (8004118 <HAL_DMA_Init+0x674>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d04f      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a53      	ldr	r2, [pc, #332]	@ (800411c <HAL_DMA_Init+0x678>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d04a      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a51      	ldr	r2, [pc, #324]	@ (8004120 <HAL_DMA_Init+0x67c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d045      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a50      	ldr	r2, [pc, #320]	@ (8004124 <HAL_DMA_Init+0x680>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d040      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a4e      	ldr	r2, [pc, #312]	@ (8004128 <HAL_DMA_Init+0x684>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d03b      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a4d      	ldr	r2, [pc, #308]	@ (800412c <HAL_DMA_Init+0x688>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d036      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a4b      	ldr	r2, [pc, #300]	@ (8004130 <HAL_DMA_Init+0x68c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d031      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <HAL_DMA_Init+0x690>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d02c      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a48      	ldr	r2, [pc, #288]	@ (8004138 <HAL_DMA_Init+0x694>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d027      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a47      	ldr	r2, [pc, #284]	@ (800413c <HAL_DMA_Init+0x698>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a45      	ldr	r2, [pc, #276]	@ (8004140 <HAL_DMA_Init+0x69c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01d      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a44      	ldr	r2, [pc, #272]	@ (8004144 <HAL_DMA_Init+0x6a0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a42      	ldr	r2, [pc, #264]	@ (8004148 <HAL_DMA_Init+0x6a4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a41      	ldr	r2, [pc, #260]	@ (800414c <HAL_DMA_Init+0x6a8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3f      	ldr	r2, [pc, #252]	@ (8004150 <HAL_DMA_Init+0x6ac>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a3e      	ldr	r2, [pc, #248]	@ (8004154 <HAL_DMA_Init+0x6b0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3c      	ldr	r2, [pc, #240]	@ (8004158 <HAL_DMA_Init+0x6b4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_DMA_Init+0x5ca>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <HAL_DMA_Init+0x5cc>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d032      	beq.n	80040da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f001 fcdf 	bl	8005a38 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b80      	cmp	r3, #128	@ 0x80
 8004080:	d102      	bne.n	8004088 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800409c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d010      	beq.n	80040c8 <HAL_DMA_Init+0x624>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d80c      	bhi.n	80040c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f001 fd5c 	bl	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	e008      	b.n	80040da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	a7fdabf8 	.word	0xa7fdabf8
 80040f8:	cccccccd 	.word	0xcccccccd
 80040fc:	40020010 	.word	0x40020010
 8004100:	40020028 	.word	0x40020028
 8004104:	40020040 	.word	0x40020040
 8004108:	40020058 	.word	0x40020058
 800410c:	40020070 	.word	0x40020070
 8004110:	40020088 	.word	0x40020088
 8004114:	400200a0 	.word	0x400200a0
 8004118:	400200b8 	.word	0x400200b8
 800411c:	40020410 	.word	0x40020410
 8004120:	40020428 	.word	0x40020428
 8004124:	40020440 	.word	0x40020440
 8004128:	40020458 	.word	0x40020458
 800412c:	40020470 	.word	0x40020470
 8004130:	40020488 	.word	0x40020488
 8004134:	400204a0 	.word	0x400204a0
 8004138:	400204b8 	.word	0x400204b8
 800413c:	58025408 	.word	0x58025408
 8004140:	5802541c 	.word	0x5802541c
 8004144:	58025430 	.word	0x58025430
 8004148:	58025444 	.word	0x58025444
 800414c:	58025458 	.word	0x58025458
 8004150:	5802546c 	.word	0x5802546c
 8004154:	58025480 	.word	0x58025480
 8004158:	58025494 	.word	0x58025494

0800415c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e226      	b.n	80045c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_DMA_Start_IT+0x2a>
 8004182:	2302      	movs	r3, #2
 8004184:	e21f      	b.n	80045c6 <HAL_DMA_Start_IT+0x46a>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	f040 820a 	bne.w	80045b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a68      	ldr	r2, [pc, #416]	@ (8004350 <HAL_DMA_Start_IT+0x1f4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04a      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a66      	ldr	r2, [pc, #408]	@ (8004354 <HAL_DMA_Start_IT+0x1f8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d045      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a65      	ldr	r2, [pc, #404]	@ (8004358 <HAL_DMA_Start_IT+0x1fc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d040      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a63      	ldr	r2, [pc, #396]	@ (800435c <HAL_DMA_Start_IT+0x200>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a62      	ldr	r2, [pc, #392]	@ (8004360 <HAL_DMA_Start_IT+0x204>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d036      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a60      	ldr	r2, [pc, #384]	@ (8004364 <HAL_DMA_Start_IT+0x208>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a5f      	ldr	r2, [pc, #380]	@ (8004368 <HAL_DMA_Start_IT+0x20c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d02c      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a5d      	ldr	r2, [pc, #372]	@ (800436c <HAL_DMA_Start_IT+0x210>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d027      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004370 <HAL_DMA_Start_IT+0x214>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a5a      	ldr	r2, [pc, #360]	@ (8004374 <HAL_DMA_Start_IT+0x218>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a59      	ldr	r2, [pc, #356]	@ (8004378 <HAL_DMA_Start_IT+0x21c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a57      	ldr	r2, [pc, #348]	@ (800437c <HAL_DMA_Start_IT+0x220>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a56      	ldr	r2, [pc, #344]	@ (8004380 <HAL_DMA_Start_IT+0x224>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a54      	ldr	r2, [pc, #336]	@ (8004384 <HAL_DMA_Start_IT+0x228>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a53      	ldr	r2, [pc, #332]	@ (8004388 <HAL_DMA_Start_IT+0x22c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_Start_IT+0xee>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a51      	ldr	r2, [pc, #324]	@ (800438c <HAL_DMA_Start_IT+0x230>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d108      	bne.n	800425c <HAL_DMA_Start_IT+0x100>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e007      	b.n	800426c <HAL_DMA_Start_IT+0x110>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f001 f906 	bl	8005484 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a34      	ldr	r2, [pc, #208]	@ (8004350 <HAL_DMA_Start_IT+0x1f4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d04a      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a33      	ldr	r2, [pc, #204]	@ (8004354 <HAL_DMA_Start_IT+0x1f8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d045      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a31      	ldr	r2, [pc, #196]	@ (8004358 <HAL_DMA_Start_IT+0x1fc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d040      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a30      	ldr	r2, [pc, #192]	@ (800435c <HAL_DMA_Start_IT+0x200>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d03b      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004360 <HAL_DMA_Start_IT+0x204>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d036      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004364 <HAL_DMA_Start_IT+0x208>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d031      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004368 <HAL_DMA_Start_IT+0x20c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d02c      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a2a      	ldr	r2, [pc, #168]	@ (800436c <HAL_DMA_Start_IT+0x210>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d027      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a28      	ldr	r2, [pc, #160]	@ (8004370 <HAL_DMA_Start_IT+0x214>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a27      	ldr	r2, [pc, #156]	@ (8004374 <HAL_DMA_Start_IT+0x218>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d01d      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <HAL_DMA_Start_IT+0x21c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a24      	ldr	r2, [pc, #144]	@ (800437c <HAL_DMA_Start_IT+0x220>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a22      	ldr	r2, [pc, #136]	@ (8004380 <HAL_DMA_Start_IT+0x224>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a21      	ldr	r2, [pc, #132]	@ (8004384 <HAL_DMA_Start_IT+0x228>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <HAL_DMA_Start_IT+0x22c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_DMA_Start_IT+0x1bc>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <HAL_DMA_Start_IT+0x230>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d101      	bne.n	800431c <HAL_DMA_Start_IT+0x1c0>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_DMA_Start_IT+0x1c2>
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d036      	beq.n	8004390 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 021e 	bic.w	r2, r3, #30
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0216 	orr.w	r2, r2, #22
 8004334:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d03e      	beq.n	80043bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0208 	orr.w	r2, r2, #8
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e035      	b.n	80043bc <HAL_DMA_Start_IT+0x260>
 8004350:	40020010 	.word	0x40020010
 8004354:	40020028 	.word	0x40020028
 8004358:	40020040 	.word	0x40020040
 800435c:	40020058 	.word	0x40020058
 8004360:	40020070 	.word	0x40020070
 8004364:	40020088 	.word	0x40020088
 8004368:	400200a0 	.word	0x400200a0
 800436c:	400200b8 	.word	0x400200b8
 8004370:	40020410 	.word	0x40020410
 8004374:	40020428 	.word	0x40020428
 8004378:	40020440 	.word	0x40020440
 800437c:	40020458 	.word	0x40020458
 8004380:	40020470 	.word	0x40020470
 8004384:	40020488 	.word	0x40020488
 8004388:	400204a0 	.word	0x400204a0
 800438c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 020e 	bic.w	r2, r3, #14
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 020a 	orr.w	r2, r2, #10
 80043a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0204 	orr.w	r2, r2, #4
 80043ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a83      	ldr	r2, [pc, #524]	@ (80045d0 <HAL_DMA_Start_IT+0x474>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d072      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a82      	ldr	r2, [pc, #520]	@ (80045d4 <HAL_DMA_Start_IT+0x478>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d06d      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a80      	ldr	r2, [pc, #512]	@ (80045d8 <HAL_DMA_Start_IT+0x47c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d068      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a7f      	ldr	r2, [pc, #508]	@ (80045dc <HAL_DMA_Start_IT+0x480>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d063      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a7d      	ldr	r2, [pc, #500]	@ (80045e0 <HAL_DMA_Start_IT+0x484>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d05e      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7c      	ldr	r2, [pc, #496]	@ (80045e4 <HAL_DMA_Start_IT+0x488>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d059      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7a      	ldr	r2, [pc, #488]	@ (80045e8 <HAL_DMA_Start_IT+0x48c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d054      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a79      	ldr	r2, [pc, #484]	@ (80045ec <HAL_DMA_Start_IT+0x490>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d04f      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a77      	ldr	r2, [pc, #476]	@ (80045f0 <HAL_DMA_Start_IT+0x494>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d04a      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a76      	ldr	r2, [pc, #472]	@ (80045f4 <HAL_DMA_Start_IT+0x498>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d045      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a74      	ldr	r2, [pc, #464]	@ (80045f8 <HAL_DMA_Start_IT+0x49c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d040      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a73      	ldr	r2, [pc, #460]	@ (80045fc <HAL_DMA_Start_IT+0x4a0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d03b      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a71      	ldr	r2, [pc, #452]	@ (8004600 <HAL_DMA_Start_IT+0x4a4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d036      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a70      	ldr	r2, [pc, #448]	@ (8004604 <HAL_DMA_Start_IT+0x4a8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d031      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a6e      	ldr	r2, [pc, #440]	@ (8004608 <HAL_DMA_Start_IT+0x4ac>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d02c      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a6d      	ldr	r2, [pc, #436]	@ (800460c <HAL_DMA_Start_IT+0x4b0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d027      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6b      	ldr	r2, [pc, #428]	@ (8004610 <HAL_DMA_Start_IT+0x4b4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d022      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6a      	ldr	r2, [pc, #424]	@ (8004614 <HAL_DMA_Start_IT+0x4b8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d01d      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a68      	ldr	r2, [pc, #416]	@ (8004618 <HAL_DMA_Start_IT+0x4bc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d018      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a67      	ldr	r2, [pc, #412]	@ (800461c <HAL_DMA_Start_IT+0x4c0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a65      	ldr	r2, [pc, #404]	@ (8004620 <HAL_DMA_Start_IT+0x4c4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00e      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a64      	ldr	r2, [pc, #400]	@ (8004624 <HAL_DMA_Start_IT+0x4c8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a62      	ldr	r2, [pc, #392]	@ (8004628 <HAL_DMA_Start_IT+0x4cc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_DMA_Start_IT+0x350>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a61      	ldr	r2, [pc, #388]	@ (800462c <HAL_DMA_Start_IT+0x4d0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d101      	bne.n	80044b0 <HAL_DMA_Start_IT+0x354>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <HAL_DMA_Start_IT+0x356>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01a      	beq.n	80044ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a37      	ldr	r2, [pc, #220]	@ (80045d0 <HAL_DMA_Start_IT+0x474>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d04a      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a36      	ldr	r2, [pc, #216]	@ (80045d4 <HAL_DMA_Start_IT+0x478>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d045      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a34      	ldr	r2, [pc, #208]	@ (80045d8 <HAL_DMA_Start_IT+0x47c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d040      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a33      	ldr	r2, [pc, #204]	@ (80045dc <HAL_DMA_Start_IT+0x480>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d03b      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a31      	ldr	r2, [pc, #196]	@ (80045e0 <HAL_DMA_Start_IT+0x484>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d036      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a30      	ldr	r2, [pc, #192]	@ (80045e4 <HAL_DMA_Start_IT+0x488>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d031      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2e      	ldr	r2, [pc, #184]	@ (80045e8 <HAL_DMA_Start_IT+0x48c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d02c      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2d      	ldr	r2, [pc, #180]	@ (80045ec <HAL_DMA_Start_IT+0x490>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d027      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2b      	ldr	r2, [pc, #172]	@ (80045f0 <HAL_DMA_Start_IT+0x494>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d022      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2a      	ldr	r2, [pc, #168]	@ (80045f4 <HAL_DMA_Start_IT+0x498>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d01d      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a28      	ldr	r2, [pc, #160]	@ (80045f8 <HAL_DMA_Start_IT+0x49c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d018      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a27      	ldr	r2, [pc, #156]	@ (80045fc <HAL_DMA_Start_IT+0x4a0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d013      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a25      	ldr	r2, [pc, #148]	@ (8004600 <HAL_DMA_Start_IT+0x4a4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00e      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a24      	ldr	r2, [pc, #144]	@ (8004604 <HAL_DMA_Start_IT+0x4a8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d009      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a22      	ldr	r2, [pc, #136]	@ (8004608 <HAL_DMA_Start_IT+0x4ac>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <HAL_DMA_Start_IT+0x430>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a21      	ldr	r2, [pc, #132]	@ (800460c <HAL_DMA_Start_IT+0x4b0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d108      	bne.n	800459e <HAL_DMA_Start_IT+0x442>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e012      	b.n	80045c4 <HAL_DMA_Start_IT+0x468>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0201 	orr.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e009      	b.n	80045c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40020010 	.word	0x40020010
 80045d4:	40020028 	.word	0x40020028
 80045d8:	40020040 	.word	0x40020040
 80045dc:	40020058 	.word	0x40020058
 80045e0:	40020070 	.word	0x40020070
 80045e4:	40020088 	.word	0x40020088
 80045e8:	400200a0 	.word	0x400200a0
 80045ec:	400200b8 	.word	0x400200b8
 80045f0:	40020410 	.word	0x40020410
 80045f4:	40020428 	.word	0x40020428
 80045f8:	40020440 	.word	0x40020440
 80045fc:	40020458 	.word	0x40020458
 8004600:	40020470 	.word	0x40020470
 8004604:	40020488 	.word	0x40020488
 8004608:	400204a0 	.word	0x400204a0
 800460c:	400204b8 	.word	0x400204b8
 8004610:	58025408 	.word	0x58025408
 8004614:	5802541c 	.word	0x5802541c
 8004618:	58025430 	.word	0x58025430
 800461c:	58025444 	.word	0x58025444
 8004620:	58025458 	.word	0x58025458
 8004624:	5802546c 	.word	0x5802546c
 8004628:	58025480 	.word	0x58025480
 800462c:	58025494 	.word	0x58025494

08004630 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	@ 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800463c:	4b67      	ldr	r3, [pc, #412]	@ (80047dc <HAL_DMA_IRQHandler+0x1ac>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a67      	ldr	r2, [pc, #412]	@ (80047e0 <HAL_DMA_IRQHandler+0x1b0>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	0a9b      	lsrs	r3, r3, #10
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a5f      	ldr	r2, [pc, #380]	@ (80047e4 <HAL_DMA_IRQHandler+0x1b4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04a      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a5d      	ldr	r2, [pc, #372]	@ (80047e8 <HAL_DMA_IRQHandler+0x1b8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d045      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5c      	ldr	r2, [pc, #368]	@ (80047ec <HAL_DMA_IRQHandler+0x1bc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d040      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5a      	ldr	r2, [pc, #360]	@ (80047f0 <HAL_DMA_IRQHandler+0x1c0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03b      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a59      	ldr	r2, [pc, #356]	@ (80047f4 <HAL_DMA_IRQHandler+0x1c4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d036      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a57      	ldr	r2, [pc, #348]	@ (80047f8 <HAL_DMA_IRQHandler+0x1c8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a56      	ldr	r2, [pc, #344]	@ (80047fc <HAL_DMA_IRQHandler+0x1cc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d02c      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a54      	ldr	r2, [pc, #336]	@ (8004800 <HAL_DMA_IRQHandler+0x1d0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d027      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a53      	ldr	r2, [pc, #332]	@ (8004804 <HAL_DMA_IRQHandler+0x1d4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a51      	ldr	r2, [pc, #324]	@ (8004808 <HAL_DMA_IRQHandler+0x1d8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01d      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a50      	ldr	r2, [pc, #320]	@ (800480c <HAL_DMA_IRQHandler+0x1dc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004810 <HAL_DMA_IRQHandler+0x1e0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a4d      	ldr	r2, [pc, #308]	@ (8004814 <HAL_DMA_IRQHandler+0x1e4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004818 <HAL_DMA_IRQHandler+0x1e8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a4a      	ldr	r2, [pc, #296]	@ (800481c <HAL_DMA_IRQHandler+0x1ec>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_DMA_IRQHandler+0xd2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a48      	ldr	r2, [pc, #288]	@ (8004820 <HAL_DMA_IRQHandler+0x1f0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d101      	bne.n	8004706 <HAL_DMA_IRQHandler+0xd6>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_DMA_IRQHandler+0xd8>
 8004706:	2300      	movs	r3, #0
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 842b 	beq.w	8004f64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2208      	movs	r2, #8
 8004718:	409a      	lsls	r2, r3
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80a2 	beq.w	8004868 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2e      	ldr	r2, [pc, #184]	@ (80047e4 <HAL_DMA_IRQHandler+0x1b4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d04a      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2d      	ldr	r2, [pc, #180]	@ (80047e8 <HAL_DMA_IRQHandler+0x1b8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d045      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2b      	ldr	r2, [pc, #172]	@ (80047ec <HAL_DMA_IRQHandler+0x1bc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d040      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2a      	ldr	r2, [pc, #168]	@ (80047f0 <HAL_DMA_IRQHandler+0x1c0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d03b      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a28      	ldr	r2, [pc, #160]	@ (80047f4 <HAL_DMA_IRQHandler+0x1c4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d036      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a27      	ldr	r2, [pc, #156]	@ (80047f8 <HAL_DMA_IRQHandler+0x1c8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d031      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a25      	ldr	r2, [pc, #148]	@ (80047fc <HAL_DMA_IRQHandler+0x1cc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d02c      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a24      	ldr	r2, [pc, #144]	@ (8004800 <HAL_DMA_IRQHandler+0x1d0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d027      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a22      	ldr	r2, [pc, #136]	@ (8004804 <HAL_DMA_IRQHandler+0x1d4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a21      	ldr	r2, [pc, #132]	@ (8004808 <HAL_DMA_IRQHandler+0x1d8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d01d      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <HAL_DMA_IRQHandler+0x1dc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1e      	ldr	r2, [pc, #120]	@ (8004810 <HAL_DMA_IRQHandler+0x1e0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <HAL_DMA_IRQHandler+0x1e4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <HAL_DMA_IRQHandler+0x1e8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a19      	ldr	r2, [pc, #100]	@ (800481c <HAL_DMA_IRQHandler+0x1ec>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x194>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a18      	ldr	r2, [pc, #96]	@ (8004820 <HAL_DMA_IRQHandler+0x1f0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d12f      	bne.n	8004824 <HAL_DMA_IRQHandler+0x1f4>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	e02e      	b.n	8004838 <HAL_DMA_IRQHandler+0x208>
 80047da:	bf00      	nop
 80047dc:	24000004 	.word	0x24000004
 80047e0:	1b4e81b5 	.word	0x1b4e81b5
 80047e4:	40020010 	.word	0x40020010
 80047e8:	40020028 	.word	0x40020028
 80047ec:	40020040 	.word	0x40020040
 80047f0:	40020058 	.word	0x40020058
 80047f4:	40020070 	.word	0x40020070
 80047f8:	40020088 	.word	0x40020088
 80047fc:	400200a0 	.word	0x400200a0
 8004800:	400200b8 	.word	0x400200b8
 8004804:	40020410 	.word	0x40020410
 8004808:	40020428 	.word	0x40020428
 800480c:	40020440 	.word	0x40020440
 8004810:	40020458 	.word	0x40020458
 8004814:	40020470 	.word	0x40020470
 8004818:	40020488 	.word	0x40020488
 800481c:	400204a0 	.word	0x400204a0
 8004820:	400204b8 	.word	0x400204b8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d015      	beq.n	8004868 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0204 	bic.w	r2, r2, #4
 800484a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	2208      	movs	r2, #8
 8004856:	409a      	lsls	r2, r3
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d06e      	beq.n	800495c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a69      	ldr	r2, [pc, #420]	@ (8004a28 <HAL_DMA_IRQHandler+0x3f8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d04a      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a67      	ldr	r2, [pc, #412]	@ (8004a2c <HAL_DMA_IRQHandler+0x3fc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d045      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a66      	ldr	r2, [pc, #408]	@ (8004a30 <HAL_DMA_IRQHandler+0x400>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d040      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a64      	ldr	r2, [pc, #400]	@ (8004a34 <HAL_DMA_IRQHandler+0x404>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d03b      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a63      	ldr	r2, [pc, #396]	@ (8004a38 <HAL_DMA_IRQHandler+0x408>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d036      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a61      	ldr	r2, [pc, #388]	@ (8004a3c <HAL_DMA_IRQHandler+0x40c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d031      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a60      	ldr	r2, [pc, #384]	@ (8004a40 <HAL_DMA_IRQHandler+0x410>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d02c      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004a44 <HAL_DMA_IRQHandler+0x414>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d027      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004a48 <HAL_DMA_IRQHandler+0x418>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d022      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a5b      	ldr	r2, [pc, #364]	@ (8004a4c <HAL_DMA_IRQHandler+0x41c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01d      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a5a      	ldr	r2, [pc, #360]	@ (8004a50 <HAL_DMA_IRQHandler+0x420>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d018      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a58      	ldr	r2, [pc, #352]	@ (8004a54 <HAL_DMA_IRQHandler+0x424>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a57      	ldr	r2, [pc, #348]	@ (8004a58 <HAL_DMA_IRQHandler+0x428>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a55      	ldr	r2, [pc, #340]	@ (8004a5c <HAL_DMA_IRQHandler+0x42c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a54      	ldr	r2, [pc, #336]	@ (8004a60 <HAL_DMA_IRQHandler+0x430>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_DMA_IRQHandler+0x2ee>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a52      	ldr	r2, [pc, #328]	@ (8004a64 <HAL_DMA_IRQHandler+0x434>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10a      	bne.n	8004934 <HAL_DMA_IRQHandler+0x304>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e003      	b.n	800493c <HAL_DMA_IRQHandler+0x30c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	2201      	movs	r2, #1
 800494a:	409a      	lsls	r2, r3
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	f043 0202 	orr.w	r2, r3, #2
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2204      	movs	r2, #4
 8004966:	409a      	lsls	r2, r3
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 808f 	beq.w	8004a90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2c      	ldr	r2, [pc, #176]	@ (8004a28 <HAL_DMA_IRQHandler+0x3f8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d04a      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2a      	ldr	r2, [pc, #168]	@ (8004a2c <HAL_DMA_IRQHandler+0x3fc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d045      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a29      	ldr	r2, [pc, #164]	@ (8004a30 <HAL_DMA_IRQHandler+0x400>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d040      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a27      	ldr	r2, [pc, #156]	@ (8004a34 <HAL_DMA_IRQHandler+0x404>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d03b      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a26      	ldr	r2, [pc, #152]	@ (8004a38 <HAL_DMA_IRQHandler+0x408>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d036      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a24      	ldr	r2, [pc, #144]	@ (8004a3c <HAL_DMA_IRQHandler+0x40c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d031      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a23      	ldr	r2, [pc, #140]	@ (8004a40 <HAL_DMA_IRQHandler+0x410>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d02c      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a21      	ldr	r2, [pc, #132]	@ (8004a44 <HAL_DMA_IRQHandler+0x414>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d027      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a20      	ldr	r2, [pc, #128]	@ (8004a48 <HAL_DMA_IRQHandler+0x418>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d022      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a4c <HAL_DMA_IRQHandler+0x41c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01d      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1d      	ldr	r2, [pc, #116]	@ (8004a50 <HAL_DMA_IRQHandler+0x420>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d018      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a54 <HAL_DMA_IRQHandler+0x424>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004a58 <HAL_DMA_IRQHandler+0x428>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a18      	ldr	r2, [pc, #96]	@ (8004a5c <HAL_DMA_IRQHandler+0x42c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a17      	ldr	r2, [pc, #92]	@ (8004a60 <HAL_DMA_IRQHandler+0x430>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x3e2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a15      	ldr	r2, [pc, #84]	@ (8004a64 <HAL_DMA_IRQHandler+0x434>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d12a      	bne.n	8004a68 <HAL_DMA_IRQHandler+0x438>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e023      	b.n	8004a70 <HAL_DMA_IRQHandler+0x440>
 8004a28:	40020010 	.word	0x40020010
 8004a2c:	40020028 	.word	0x40020028
 8004a30:	40020040 	.word	0x40020040
 8004a34:	40020058 	.word	0x40020058
 8004a38:	40020070 	.word	0x40020070
 8004a3c:	40020088 	.word	0x40020088
 8004a40:	400200a0 	.word	0x400200a0
 8004a44:	400200b8 	.word	0x400200b8
 8004a48:	40020410 	.word	0x40020410
 8004a4c:	40020428 	.word	0x40020428
 8004a50:	40020440 	.word	0x40020440
 8004a54:	40020458 	.word	0x40020458
 8004a58:	40020470 	.word	0x40020470
 8004a5c:	40020488 	.word	0x40020488
 8004a60:	400204a0 	.word	0x400204a0
 8004a64:	400204b8 	.word	0x400204b8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a88:	f043 0204 	orr.w	r2, r3, #4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2210      	movs	r2, #16
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80a6 	beq.w	8004bf2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a85      	ldr	r2, [pc, #532]	@ (8004cc0 <HAL_DMA_IRQHandler+0x690>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d04a      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a83      	ldr	r2, [pc, #524]	@ (8004cc4 <HAL_DMA_IRQHandler+0x694>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d045      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a82      	ldr	r2, [pc, #520]	@ (8004cc8 <HAL_DMA_IRQHandler+0x698>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d040      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a80      	ldr	r2, [pc, #512]	@ (8004ccc <HAL_DMA_IRQHandler+0x69c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d03b      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a7f      	ldr	r2, [pc, #508]	@ (8004cd0 <HAL_DMA_IRQHandler+0x6a0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d036      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a7d      	ldr	r2, [pc, #500]	@ (8004cd4 <HAL_DMA_IRQHandler+0x6a4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d031      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8004cd8 <HAL_DMA_IRQHandler+0x6a8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d02c      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a7a      	ldr	r2, [pc, #488]	@ (8004cdc <HAL_DMA_IRQHandler+0x6ac>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d027      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a79      	ldr	r2, [pc, #484]	@ (8004ce0 <HAL_DMA_IRQHandler+0x6b0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d022      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a77      	ldr	r2, [pc, #476]	@ (8004ce4 <HAL_DMA_IRQHandler+0x6b4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01d      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a76      	ldr	r2, [pc, #472]	@ (8004ce8 <HAL_DMA_IRQHandler+0x6b8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d018      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a74      	ldr	r2, [pc, #464]	@ (8004cec <HAL_DMA_IRQHandler+0x6bc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a73      	ldr	r2, [pc, #460]	@ (8004cf0 <HAL_DMA_IRQHandler+0x6c0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00e      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a71      	ldr	r2, [pc, #452]	@ (8004cf4 <HAL_DMA_IRQHandler+0x6c4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d009      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a70      	ldr	r2, [pc, #448]	@ (8004cf8 <HAL_DMA_IRQHandler+0x6c8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x516>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a6e      	ldr	r2, [pc, #440]	@ (8004cfc <HAL_DMA_IRQHandler+0x6cc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10a      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x52c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e009      	b.n	8004b70 <HAL_DMA_IRQHandler+0x540>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d03e      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d108      	bne.n	8004bb2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d024      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
 8004bb0:	e01f      	b.n	8004bf2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01b      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
 8004bc2:	e016      	b.n	8004bf2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d107      	bne.n	8004be2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0208 	bic.w	r2, r2, #8
 8004be0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8110 	beq.w	8004e28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc0 <HAL_DMA_IRQHandler+0x690>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d04a      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc4 <HAL_DMA_IRQHandler+0x694>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d045      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a29      	ldr	r2, [pc, #164]	@ (8004cc8 <HAL_DMA_IRQHandler+0x698>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d040      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a28      	ldr	r2, [pc, #160]	@ (8004ccc <HAL_DMA_IRQHandler+0x69c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d03b      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a26      	ldr	r2, [pc, #152]	@ (8004cd0 <HAL_DMA_IRQHandler+0x6a0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d036      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a25      	ldr	r2, [pc, #148]	@ (8004cd4 <HAL_DMA_IRQHandler+0x6a4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d031      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a23      	ldr	r2, [pc, #140]	@ (8004cd8 <HAL_DMA_IRQHandler+0x6a8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d02c      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a22      	ldr	r2, [pc, #136]	@ (8004cdc <HAL_DMA_IRQHandler+0x6ac>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d027      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a20      	ldr	r2, [pc, #128]	@ (8004ce0 <HAL_DMA_IRQHandler+0x6b0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <HAL_DMA_IRQHandler+0x6b4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce8 <HAL_DMA_IRQHandler+0x6b8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cec <HAL_DMA_IRQHandler+0x6bc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf0 <HAL_DMA_IRQHandler+0x6c0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a19      	ldr	r2, [pc, #100]	@ (8004cf4 <HAL_DMA_IRQHandler+0x6c4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a17      	ldr	r2, [pc, #92]	@ (8004cf8 <HAL_DMA_IRQHandler+0x6c8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x678>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a16      	ldr	r2, [pc, #88]	@ (8004cfc <HAL_DMA_IRQHandler+0x6cc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d12b      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x6d0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf14      	ite	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	2300      	moveq	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	e02a      	b.n	8004d14 <HAL_DMA_IRQHandler+0x6e4>
 8004cbe:	bf00      	nop
 8004cc0:	40020010 	.word	0x40020010
 8004cc4:	40020028 	.word	0x40020028
 8004cc8:	40020040 	.word	0x40020040
 8004ccc:	40020058 	.word	0x40020058
 8004cd0:	40020070 	.word	0x40020070
 8004cd4:	40020088 	.word	0x40020088
 8004cd8:	400200a0 	.word	0x400200a0
 8004cdc:	400200b8 	.word	0x400200b8
 8004ce0:	40020410 	.word	0x40020410
 8004ce4:	40020428 	.word	0x40020428
 8004ce8:	40020440 	.word	0x40020440
 8004cec:	40020458 	.word	0x40020458
 8004cf0:	40020470 	.word	0x40020470
 8004cf4:	40020488 	.word	0x40020488
 8004cf8:	400204a0 	.word	0x400204a0
 8004cfc:	400204b8 	.word	0x400204b8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8087 	beq.w	8004e28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2220      	movs	r2, #32
 8004d24:	409a      	lsls	r2, r3
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d139      	bne.n	8004daa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0216 	bic.w	r2, r2, #22
 8004d44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <HAL_DMA_IRQHandler+0x736>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0208 	bic.w	r2, r2, #8
 8004d74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	223f      	movs	r2, #63	@ 0x3f
 8004d80:	409a      	lsls	r2, r3
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 834a 	beq.w	8005434 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
          }
          return;
 8004da8:	e344      	b.n	8005434 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d018      	beq.n	8004dea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d108      	bne.n	8004dd8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02c      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	4798      	blx	r3
 8004dd6:	e027      	b.n	8004e28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d023      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	4798      	blx	r3
 8004de8:	e01e      	b.n	8004e28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10f      	bne.n	8004e18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0210 	bic.w	r2, r2, #16
 8004e06:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8306 	beq.w	800543e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8088 	beq.w	8004f50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2204      	movs	r2, #4
 8004e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a7a      	ldr	r2, [pc, #488]	@ (8005038 <HAL_DMA_IRQHandler+0xa08>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d04a      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a79      	ldr	r2, [pc, #484]	@ (800503c <HAL_DMA_IRQHandler+0xa0c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d045      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a77      	ldr	r2, [pc, #476]	@ (8005040 <HAL_DMA_IRQHandler+0xa10>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d040      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a76      	ldr	r2, [pc, #472]	@ (8005044 <HAL_DMA_IRQHandler+0xa14>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d03b      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a74      	ldr	r2, [pc, #464]	@ (8005048 <HAL_DMA_IRQHandler+0xa18>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d036      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a73      	ldr	r2, [pc, #460]	@ (800504c <HAL_DMA_IRQHandler+0xa1c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d031      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a71      	ldr	r2, [pc, #452]	@ (8005050 <HAL_DMA_IRQHandler+0xa20>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02c      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a70      	ldr	r2, [pc, #448]	@ (8005054 <HAL_DMA_IRQHandler+0xa24>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d027      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8005058 <HAL_DMA_IRQHandler+0xa28>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d022      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a6d      	ldr	r2, [pc, #436]	@ (800505c <HAL_DMA_IRQHandler+0xa2c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6b      	ldr	r2, [pc, #428]	@ (8005060 <HAL_DMA_IRQHandler+0xa30>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6a      	ldr	r2, [pc, #424]	@ (8005064 <HAL_DMA_IRQHandler+0xa34>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a68      	ldr	r2, [pc, #416]	@ (8005068 <HAL_DMA_IRQHandler+0xa38>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a67      	ldr	r2, [pc, #412]	@ (800506c <HAL_DMA_IRQHandler+0xa3c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a65      	ldr	r2, [pc, #404]	@ (8005070 <HAL_DMA_IRQHandler+0xa40>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x8b8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a64      	ldr	r2, [pc, #400]	@ (8005074 <HAL_DMA_IRQHandler+0xa44>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <HAL_DMA_IRQHandler+0x8ca>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e007      	b.n	8004f0a <HAL_DMA_IRQHandler+0x8da>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d307      	bcc.n	8004f26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f2      	bne.n	8004f0a <HAL_DMA_IRQHandler+0x8da>
 8004f24:	e000      	b.n	8004f28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004f26:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004f3e:	e003      	b.n	8004f48 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8272 	beq.w	800543e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3
 8004f62:	e26c      	b.n	800543e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a43      	ldr	r2, [pc, #268]	@ (8005078 <HAL_DMA_IRQHandler+0xa48>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d022      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x984>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a42      	ldr	r2, [pc, #264]	@ (800507c <HAL_DMA_IRQHandler+0xa4c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d01d      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x984>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a40      	ldr	r2, [pc, #256]	@ (8005080 <HAL_DMA_IRQHandler+0xa50>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d018      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x984>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a3f      	ldr	r2, [pc, #252]	@ (8005084 <HAL_DMA_IRQHandler+0xa54>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x984>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a3d      	ldr	r2, [pc, #244]	@ (8005088 <HAL_DMA_IRQHandler+0xa58>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x984>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3c      	ldr	r2, [pc, #240]	@ (800508c <HAL_DMA_IRQHandler+0xa5c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x984>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a3a      	ldr	r2, [pc, #232]	@ (8005090 <HAL_DMA_IRQHandler+0xa60>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x984>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a39      	ldr	r2, [pc, #228]	@ (8005094 <HAL_DMA_IRQHandler+0xa64>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <HAL_DMA_IRQHandler+0x988>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <HAL_DMA_IRQHandler+0x98a>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 823f 	beq.w	800543e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80cd 	beq.w	8005178 <HAL_DMA_IRQHandler+0xb48>
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80c7 	beq.w	8005178 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d049      	beq.n	8005098 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8210 	beq.w	8005438 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005020:	e20a      	b.n	8005438 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 8206 	beq.w	8005438 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005034:	e200      	b.n	8005438 <HAL_DMA_IRQHandler+0xe08>
 8005036:	bf00      	nop
 8005038:	40020010 	.word	0x40020010
 800503c:	40020028 	.word	0x40020028
 8005040:	40020040 	.word	0x40020040
 8005044:	40020058 	.word	0x40020058
 8005048:	40020070 	.word	0x40020070
 800504c:	40020088 	.word	0x40020088
 8005050:	400200a0 	.word	0x400200a0
 8005054:	400200b8 	.word	0x400200b8
 8005058:	40020410 	.word	0x40020410
 800505c:	40020428 	.word	0x40020428
 8005060:	40020440 	.word	0x40020440
 8005064:	40020458 	.word	0x40020458
 8005068:	40020470 	.word	0x40020470
 800506c:	40020488 	.word	0x40020488
 8005070:	400204a0 	.word	0x400204a0
 8005074:	400204b8 	.word	0x400204b8
 8005078:	58025408 	.word	0x58025408
 800507c:	5802541c 	.word	0x5802541c
 8005080:	58025430 	.word	0x58025430
 8005084:	58025444 	.word	0x58025444
 8005088:	58025458 	.word	0x58025458
 800508c:	5802546c 	.word	0x5802546c
 8005090:	58025480 	.word	0x58025480
 8005094:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d160      	bne.n	8005164 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a7f      	ldr	r2, [pc, #508]	@ (80052a4 <HAL_DMA_IRQHandler+0xc74>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d04a      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a7d      	ldr	r2, [pc, #500]	@ (80052a8 <HAL_DMA_IRQHandler+0xc78>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d045      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a7c      	ldr	r2, [pc, #496]	@ (80052ac <HAL_DMA_IRQHandler+0xc7c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d040      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a7a      	ldr	r2, [pc, #488]	@ (80052b0 <HAL_DMA_IRQHandler+0xc80>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d03b      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a79      	ldr	r2, [pc, #484]	@ (80052b4 <HAL_DMA_IRQHandler+0xc84>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d036      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a77      	ldr	r2, [pc, #476]	@ (80052b8 <HAL_DMA_IRQHandler+0xc88>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d031      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a76      	ldr	r2, [pc, #472]	@ (80052bc <HAL_DMA_IRQHandler+0xc8c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d02c      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a74      	ldr	r2, [pc, #464]	@ (80052c0 <HAL_DMA_IRQHandler+0xc90>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d027      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a73      	ldr	r2, [pc, #460]	@ (80052c4 <HAL_DMA_IRQHandler+0xc94>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a71      	ldr	r2, [pc, #452]	@ (80052c8 <HAL_DMA_IRQHandler+0xc98>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01d      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a70      	ldr	r2, [pc, #448]	@ (80052cc <HAL_DMA_IRQHandler+0xc9c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a6e      	ldr	r2, [pc, #440]	@ (80052d0 <HAL_DMA_IRQHandler+0xca0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6d      	ldr	r2, [pc, #436]	@ (80052d4 <HAL_DMA_IRQHandler+0xca4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a6b      	ldr	r2, [pc, #428]	@ (80052d8 <HAL_DMA_IRQHandler+0xca8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a6a      	ldr	r2, [pc, #424]	@ (80052dc <HAL_DMA_IRQHandler+0xcac>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_DMA_IRQHandler+0xb12>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a68      	ldr	r2, [pc, #416]	@ (80052e0 <HAL_DMA_IRQHandler+0xcb0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d108      	bne.n	8005154 <HAL_DMA_IRQHandler+0xb24>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0208 	bic.w	r2, r2, #8
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e007      	b.n	8005164 <HAL_DMA_IRQHandler+0xb34>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0204 	bic.w	r2, r2, #4
 8005162:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8165 	beq.w	8005438 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005176:	e15f      	b.n	8005438 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2202      	movs	r2, #2
 8005182:	409a      	lsls	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80c5 	beq.w	8005318 <HAL_DMA_IRQHandler+0xce8>
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80bf 	beq.w	8005318 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	2202      	movs	r2, #2
 80051a4:	409a      	lsls	r2, r3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d018      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 813a 	beq.w	800543c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d0:	e134      	b.n	800543c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8130 	beq.w	800543c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051e4:	e12a      	b.n	800543c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f040 8089 	bne.w	8005304 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a2b      	ldr	r2, [pc, #172]	@ (80052a4 <HAL_DMA_IRQHandler+0xc74>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d04a      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a29      	ldr	r2, [pc, #164]	@ (80052a8 <HAL_DMA_IRQHandler+0xc78>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d045      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a28      	ldr	r2, [pc, #160]	@ (80052ac <HAL_DMA_IRQHandler+0xc7c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d040      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a26      	ldr	r2, [pc, #152]	@ (80052b0 <HAL_DMA_IRQHandler+0xc80>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d03b      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a25      	ldr	r2, [pc, #148]	@ (80052b4 <HAL_DMA_IRQHandler+0xc84>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d036      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a23      	ldr	r2, [pc, #140]	@ (80052b8 <HAL_DMA_IRQHandler+0xc88>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d031      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a22      	ldr	r2, [pc, #136]	@ (80052bc <HAL_DMA_IRQHandler+0xc8c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d02c      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a20      	ldr	r2, [pc, #128]	@ (80052c0 <HAL_DMA_IRQHandler+0xc90>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d027      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <HAL_DMA_IRQHandler+0xc94>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d022      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1d      	ldr	r2, [pc, #116]	@ (80052c8 <HAL_DMA_IRQHandler+0xc98>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01d      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1c      	ldr	r2, [pc, #112]	@ (80052cc <HAL_DMA_IRQHandler+0xc9c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d018      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1a      	ldr	r2, [pc, #104]	@ (80052d0 <HAL_DMA_IRQHandler+0xca0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a19      	ldr	r2, [pc, #100]	@ (80052d4 <HAL_DMA_IRQHandler+0xca4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a17      	ldr	r2, [pc, #92]	@ (80052d8 <HAL_DMA_IRQHandler+0xca8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a16      	ldr	r2, [pc, #88]	@ (80052dc <HAL_DMA_IRQHandler+0xcac>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_DMA_IRQHandler+0xc62>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a14      	ldr	r2, [pc, #80]	@ (80052e0 <HAL_DMA_IRQHandler+0xcb0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d128      	bne.n	80052e4 <HAL_DMA_IRQHandler+0xcb4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0214 	bic.w	r2, r2, #20
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e027      	b.n	80052f4 <HAL_DMA_IRQHandler+0xcc4>
 80052a4:	40020010 	.word	0x40020010
 80052a8:	40020028 	.word	0x40020028
 80052ac:	40020040 	.word	0x40020040
 80052b0:	40020058 	.word	0x40020058
 80052b4:	40020070 	.word	0x40020070
 80052b8:	40020088 	.word	0x40020088
 80052bc:	400200a0 	.word	0x400200a0
 80052c0:	400200b8 	.word	0x400200b8
 80052c4:	40020410 	.word	0x40020410
 80052c8:	40020428 	.word	0x40020428
 80052cc:	40020440 	.word	0x40020440
 80052d0:	40020458 	.word	0x40020458
 80052d4:	40020470 	.word	0x40020470
 80052d8:	40020488 	.word	0x40020488
 80052dc:	400204a0 	.word	0x400204a0
 80052e0:	400204b8 	.word	0x400204b8
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 020a 	bic.w	r2, r2, #10
 80052f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8097 	beq.w	800543c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005316:	e091      	b.n	800543c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	2208      	movs	r2, #8
 8005322:	409a      	lsls	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8088 	beq.w	800543e <HAL_DMA_IRQHandler+0xe0e>
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8082 	beq.w	800543e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a41      	ldr	r2, [pc, #260]	@ (8005444 <HAL_DMA_IRQHandler+0xe14>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d04a      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a3f      	ldr	r2, [pc, #252]	@ (8005448 <HAL_DMA_IRQHandler+0xe18>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d045      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a3e      	ldr	r2, [pc, #248]	@ (800544c <HAL_DMA_IRQHandler+0xe1c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d040      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a3c      	ldr	r2, [pc, #240]	@ (8005450 <HAL_DMA_IRQHandler+0xe20>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d03b      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a3b      	ldr	r2, [pc, #236]	@ (8005454 <HAL_DMA_IRQHandler+0xe24>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d036      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a39      	ldr	r2, [pc, #228]	@ (8005458 <HAL_DMA_IRQHandler+0xe28>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d031      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a38      	ldr	r2, [pc, #224]	@ (800545c <HAL_DMA_IRQHandler+0xe2c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d02c      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a36      	ldr	r2, [pc, #216]	@ (8005460 <HAL_DMA_IRQHandler+0xe30>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d027      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a35      	ldr	r2, [pc, #212]	@ (8005464 <HAL_DMA_IRQHandler+0xe34>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d022      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a33      	ldr	r2, [pc, #204]	@ (8005468 <HAL_DMA_IRQHandler+0xe38>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01d      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a32      	ldr	r2, [pc, #200]	@ (800546c <HAL_DMA_IRQHandler+0xe3c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d018      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a30      	ldr	r2, [pc, #192]	@ (8005470 <HAL_DMA_IRQHandler+0xe40>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005474 <HAL_DMA_IRQHandler+0xe44>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00e      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005478 <HAL_DMA_IRQHandler+0xe48>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d009      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2c      	ldr	r2, [pc, #176]	@ (800547c <HAL_DMA_IRQHandler+0xe4c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d004      	beq.n	80053da <HAL_DMA_IRQHandler+0xdaa>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005480 <HAL_DMA_IRQHandler+0xe50>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <HAL_DMA_IRQHandler+0xdbc>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 021c 	bic.w	r2, r2, #28
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e007      	b.n	80053fc <HAL_DMA_IRQHandler+0xdcc>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 020e 	bic.w	r2, r2, #14
 80053fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	2201      	movs	r2, #1
 8005406:	409a      	lsls	r2, r3
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
 8005432:	e004      	b.n	800543e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005434:	bf00      	nop
 8005436:	e002      	b.n	800543e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005438:	bf00      	nop
 800543a:	e000      	b.n	800543e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800543c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800543e:	3728      	adds	r7, #40	@ 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40020010 	.word	0x40020010
 8005448:	40020028 	.word	0x40020028
 800544c:	40020040 	.word	0x40020040
 8005450:	40020058 	.word	0x40020058
 8005454:	40020070 	.word	0x40020070
 8005458:	40020088 	.word	0x40020088
 800545c:	400200a0 	.word	0x400200a0
 8005460:	400200b8 	.word	0x400200b8
 8005464:	40020410 	.word	0x40020410
 8005468:	40020428 	.word	0x40020428
 800546c:	40020440 	.word	0x40020440
 8005470:	40020458 	.word	0x40020458
 8005474:	40020470 	.word	0x40020470
 8005478:	40020488 	.word	0x40020488
 800547c:	400204a0 	.word	0x400204a0
 8005480:	400204b8 	.word	0x400204b8

08005484 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a7f      	ldr	r2, [pc, #508]	@ (80056a0 <DMA_SetConfig+0x21c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d072      	beq.n	800558e <DMA_SetConfig+0x10a>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a7d      	ldr	r2, [pc, #500]	@ (80056a4 <DMA_SetConfig+0x220>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d06d      	beq.n	800558e <DMA_SetConfig+0x10a>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a7c      	ldr	r2, [pc, #496]	@ (80056a8 <DMA_SetConfig+0x224>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d068      	beq.n	800558e <DMA_SetConfig+0x10a>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a7a      	ldr	r2, [pc, #488]	@ (80056ac <DMA_SetConfig+0x228>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d063      	beq.n	800558e <DMA_SetConfig+0x10a>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a79      	ldr	r2, [pc, #484]	@ (80056b0 <DMA_SetConfig+0x22c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d05e      	beq.n	800558e <DMA_SetConfig+0x10a>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a77      	ldr	r2, [pc, #476]	@ (80056b4 <DMA_SetConfig+0x230>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d059      	beq.n	800558e <DMA_SetConfig+0x10a>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a76      	ldr	r2, [pc, #472]	@ (80056b8 <DMA_SetConfig+0x234>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d054      	beq.n	800558e <DMA_SetConfig+0x10a>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a74      	ldr	r2, [pc, #464]	@ (80056bc <DMA_SetConfig+0x238>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d04f      	beq.n	800558e <DMA_SetConfig+0x10a>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a73      	ldr	r2, [pc, #460]	@ (80056c0 <DMA_SetConfig+0x23c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d04a      	beq.n	800558e <DMA_SetConfig+0x10a>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a71      	ldr	r2, [pc, #452]	@ (80056c4 <DMA_SetConfig+0x240>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d045      	beq.n	800558e <DMA_SetConfig+0x10a>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a70      	ldr	r2, [pc, #448]	@ (80056c8 <DMA_SetConfig+0x244>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d040      	beq.n	800558e <DMA_SetConfig+0x10a>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6e      	ldr	r2, [pc, #440]	@ (80056cc <DMA_SetConfig+0x248>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d03b      	beq.n	800558e <DMA_SetConfig+0x10a>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6d      	ldr	r2, [pc, #436]	@ (80056d0 <DMA_SetConfig+0x24c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d036      	beq.n	800558e <DMA_SetConfig+0x10a>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a6b      	ldr	r2, [pc, #428]	@ (80056d4 <DMA_SetConfig+0x250>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d031      	beq.n	800558e <DMA_SetConfig+0x10a>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a6a      	ldr	r2, [pc, #424]	@ (80056d8 <DMA_SetConfig+0x254>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d02c      	beq.n	800558e <DMA_SetConfig+0x10a>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a68      	ldr	r2, [pc, #416]	@ (80056dc <DMA_SetConfig+0x258>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d027      	beq.n	800558e <DMA_SetConfig+0x10a>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a67      	ldr	r2, [pc, #412]	@ (80056e0 <DMA_SetConfig+0x25c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d022      	beq.n	800558e <DMA_SetConfig+0x10a>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a65      	ldr	r2, [pc, #404]	@ (80056e4 <DMA_SetConfig+0x260>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01d      	beq.n	800558e <DMA_SetConfig+0x10a>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a64      	ldr	r2, [pc, #400]	@ (80056e8 <DMA_SetConfig+0x264>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d018      	beq.n	800558e <DMA_SetConfig+0x10a>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a62      	ldr	r2, [pc, #392]	@ (80056ec <DMA_SetConfig+0x268>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <DMA_SetConfig+0x10a>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a61      	ldr	r2, [pc, #388]	@ (80056f0 <DMA_SetConfig+0x26c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <DMA_SetConfig+0x10a>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a5f      	ldr	r2, [pc, #380]	@ (80056f4 <DMA_SetConfig+0x270>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <DMA_SetConfig+0x10a>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a5e      	ldr	r2, [pc, #376]	@ (80056f8 <DMA_SetConfig+0x274>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <DMA_SetConfig+0x10a>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a5c      	ldr	r2, [pc, #368]	@ (80056fc <DMA_SetConfig+0x278>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d101      	bne.n	8005592 <DMA_SetConfig+0x10e>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <DMA_SetConfig+0x110>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00d      	beq.n	80055b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80055a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a39      	ldr	r2, [pc, #228]	@ (80056a0 <DMA_SetConfig+0x21c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d04a      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a38      	ldr	r2, [pc, #224]	@ (80056a4 <DMA_SetConfig+0x220>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d045      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a36      	ldr	r2, [pc, #216]	@ (80056a8 <DMA_SetConfig+0x224>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d040      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a35      	ldr	r2, [pc, #212]	@ (80056ac <DMA_SetConfig+0x228>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d03b      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a33      	ldr	r2, [pc, #204]	@ (80056b0 <DMA_SetConfig+0x22c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d036      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a32      	ldr	r2, [pc, #200]	@ (80056b4 <DMA_SetConfig+0x230>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d031      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a30      	ldr	r2, [pc, #192]	@ (80056b8 <DMA_SetConfig+0x234>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d02c      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2f      	ldr	r2, [pc, #188]	@ (80056bc <DMA_SetConfig+0x238>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d027      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a2d      	ldr	r2, [pc, #180]	@ (80056c0 <DMA_SetConfig+0x23c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a2c      	ldr	r2, [pc, #176]	@ (80056c4 <DMA_SetConfig+0x240>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01d      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a2a      	ldr	r2, [pc, #168]	@ (80056c8 <DMA_SetConfig+0x244>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a29      	ldr	r2, [pc, #164]	@ (80056cc <DMA_SetConfig+0x248>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a27      	ldr	r2, [pc, #156]	@ (80056d0 <DMA_SetConfig+0x24c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a26      	ldr	r2, [pc, #152]	@ (80056d4 <DMA_SetConfig+0x250>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a24      	ldr	r2, [pc, #144]	@ (80056d8 <DMA_SetConfig+0x254>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <DMA_SetConfig+0x1d0>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a23      	ldr	r2, [pc, #140]	@ (80056dc <DMA_SetConfig+0x258>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <DMA_SetConfig+0x1d4>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <DMA_SetConfig+0x1d6>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d059      	beq.n	8005712 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	223f      	movs	r2, #63	@ 0x3f
 8005668:	409a      	lsls	r2, r3
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800567c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b40      	cmp	r3, #64	@ 0x40
 800568c:	d138      	bne.n	8005700 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800569e:	e086      	b.n	80057ae <DMA_SetConfig+0x32a>
 80056a0:	40020010 	.word	0x40020010
 80056a4:	40020028 	.word	0x40020028
 80056a8:	40020040 	.word	0x40020040
 80056ac:	40020058 	.word	0x40020058
 80056b0:	40020070 	.word	0x40020070
 80056b4:	40020088 	.word	0x40020088
 80056b8:	400200a0 	.word	0x400200a0
 80056bc:	400200b8 	.word	0x400200b8
 80056c0:	40020410 	.word	0x40020410
 80056c4:	40020428 	.word	0x40020428
 80056c8:	40020440 	.word	0x40020440
 80056cc:	40020458 	.word	0x40020458
 80056d0:	40020470 	.word	0x40020470
 80056d4:	40020488 	.word	0x40020488
 80056d8:	400204a0 	.word	0x400204a0
 80056dc:	400204b8 	.word	0x400204b8
 80056e0:	58025408 	.word	0x58025408
 80056e4:	5802541c 	.word	0x5802541c
 80056e8:	58025430 	.word	0x58025430
 80056ec:	58025444 	.word	0x58025444
 80056f0:	58025458 	.word	0x58025458
 80056f4:	5802546c 	.word	0x5802546c
 80056f8:	58025480 	.word	0x58025480
 80056fc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	60da      	str	r2, [r3, #12]
}
 8005710:	e04d      	b.n	80057ae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a29      	ldr	r2, [pc, #164]	@ (80057bc <DMA_SetConfig+0x338>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d022      	beq.n	8005762 <DMA_SetConfig+0x2de>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a27      	ldr	r2, [pc, #156]	@ (80057c0 <DMA_SetConfig+0x33c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01d      	beq.n	8005762 <DMA_SetConfig+0x2de>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a26      	ldr	r2, [pc, #152]	@ (80057c4 <DMA_SetConfig+0x340>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d018      	beq.n	8005762 <DMA_SetConfig+0x2de>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a24      	ldr	r2, [pc, #144]	@ (80057c8 <DMA_SetConfig+0x344>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <DMA_SetConfig+0x2de>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a23      	ldr	r2, [pc, #140]	@ (80057cc <DMA_SetConfig+0x348>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <DMA_SetConfig+0x2de>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a21      	ldr	r2, [pc, #132]	@ (80057d0 <DMA_SetConfig+0x34c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <DMA_SetConfig+0x2de>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a20      	ldr	r2, [pc, #128]	@ (80057d4 <DMA_SetConfig+0x350>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <DMA_SetConfig+0x2de>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1e      	ldr	r2, [pc, #120]	@ (80057d8 <DMA_SetConfig+0x354>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d101      	bne.n	8005766 <DMA_SetConfig+0x2e2>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <DMA_SetConfig+0x2e4>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d020      	beq.n	80057ae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	2201      	movs	r2, #1
 8005776:	409a      	lsls	r2, r3
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b40      	cmp	r3, #64	@ 0x40
 800578a:	d108      	bne.n	800579e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	60da      	str	r2, [r3, #12]
}
 800579c:	e007      	b.n	80057ae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	60da      	str	r2, [r3, #12]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	58025408 	.word	0x58025408
 80057c0:	5802541c 	.word	0x5802541c
 80057c4:	58025430 	.word	0x58025430
 80057c8:	58025444 	.word	0x58025444
 80057cc:	58025458 	.word	0x58025458
 80057d0:	5802546c 	.word	0x5802546c
 80057d4:	58025480 	.word	0x58025480
 80057d8:	58025494 	.word	0x58025494

080057dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a42      	ldr	r2, [pc, #264]	@ (80058f4 <DMA_CalcBaseAndBitshift+0x118>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d04a      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a41      	ldr	r2, [pc, #260]	@ (80058f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d045      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a3f      	ldr	r2, [pc, #252]	@ (80058fc <DMA_CalcBaseAndBitshift+0x120>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d040      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a3e      	ldr	r2, [pc, #248]	@ (8005900 <DMA_CalcBaseAndBitshift+0x124>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d03b      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3c      	ldr	r2, [pc, #240]	@ (8005904 <DMA_CalcBaseAndBitshift+0x128>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d036      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a3b      	ldr	r2, [pc, #236]	@ (8005908 <DMA_CalcBaseAndBitshift+0x12c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d031      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a39      	ldr	r2, [pc, #228]	@ (800590c <DMA_CalcBaseAndBitshift+0x130>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d02c      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a38      	ldr	r2, [pc, #224]	@ (8005910 <DMA_CalcBaseAndBitshift+0x134>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d027      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a36      	ldr	r2, [pc, #216]	@ (8005914 <DMA_CalcBaseAndBitshift+0x138>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d022      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a35      	ldr	r2, [pc, #212]	@ (8005918 <DMA_CalcBaseAndBitshift+0x13c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d01d      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a33      	ldr	r2, [pc, #204]	@ (800591c <DMA_CalcBaseAndBitshift+0x140>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d018      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a32      	ldr	r2, [pc, #200]	@ (8005920 <DMA_CalcBaseAndBitshift+0x144>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a30      	ldr	r2, [pc, #192]	@ (8005924 <DMA_CalcBaseAndBitshift+0x148>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00e      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a2f      	ldr	r2, [pc, #188]	@ (8005928 <DMA_CalcBaseAndBitshift+0x14c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d009      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2d      	ldr	r2, [pc, #180]	@ (800592c <DMA_CalcBaseAndBitshift+0x150>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <DMA_CalcBaseAndBitshift+0xa8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2c      	ldr	r2, [pc, #176]	@ (8005930 <DMA_CalcBaseAndBitshift+0x154>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d101      	bne.n	8005888 <DMA_CalcBaseAndBitshift+0xac>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <DMA_CalcBaseAndBitshift+0xae>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d024      	beq.n	80058d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	3b10      	subs	r3, #16
 8005896:	4a27      	ldr	r2, [pc, #156]	@ (8005934 <DMA_CalcBaseAndBitshift+0x158>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	4a24      	ldr	r2, [pc, #144]	@ (8005938 <DMA_CalcBaseAndBitshift+0x15c>)
 80058a8:	5cd3      	ldrb	r3, [r2, r3]
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d908      	bls.n	80058c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	4b1f      	ldr	r3, [pc, #124]	@ (800593c <DMA_CalcBaseAndBitshift+0x160>)
 80058be:	4013      	ands	r3, r2
 80058c0:	1d1a      	adds	r2, r3, #4
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80058c6:	e00d      	b.n	80058e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	4b1b      	ldr	r3, [pc, #108]	@ (800593c <DMA_CalcBaseAndBitshift+0x160>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80058d6:	e005      	b.n	80058e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40020010 	.word	0x40020010
 80058f8:	40020028 	.word	0x40020028
 80058fc:	40020040 	.word	0x40020040
 8005900:	40020058 	.word	0x40020058
 8005904:	40020070 	.word	0x40020070
 8005908:	40020088 	.word	0x40020088
 800590c:	400200a0 	.word	0x400200a0
 8005910:	400200b8 	.word	0x400200b8
 8005914:	40020410 	.word	0x40020410
 8005918:	40020428 	.word	0x40020428
 800591c:	40020440 	.word	0x40020440
 8005920:	40020458 	.word	0x40020458
 8005924:	40020470 	.word	0x40020470
 8005928:	40020488 	.word	0x40020488
 800592c:	400204a0 	.word	0x400204a0
 8005930:	400204b8 	.word	0x400204b8
 8005934:	aaaaaaab 	.word	0xaaaaaaab
 8005938:	080150dc 	.word	0x080150dc
 800593c:	fffffc00 	.word	0xfffffc00

08005940 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d120      	bne.n	8005996 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	2b03      	cmp	r3, #3
 800595a:	d858      	bhi.n	8005a0e <DMA_CheckFifoParam+0xce>
 800595c:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <DMA_CheckFifoParam+0x24>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005975 	.word	0x08005975
 8005968:	08005987 	.word	0x08005987
 800596c:	08005975 	.word	0x08005975
 8005970:	08005a0f 	.word	0x08005a0f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d048      	beq.n	8005a12 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005984:	e045      	b.n	8005a12 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800598e:	d142      	bne.n	8005a16 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005994:	e03f      	b.n	8005a16 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800599e:	d123      	bne.n	80059e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d838      	bhi.n	8005a1a <DMA_CheckFifoParam+0xda>
 80059a8:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <DMA_CheckFifoParam+0x70>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059c7 	.word	0x080059c7
 80059b8:	080059c1 	.word	0x080059c1
 80059bc:	080059d9 	.word	0x080059d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
        break;
 80059c4:	e030      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d025      	beq.n	8005a1e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059d6:	e022      	b.n	8005a1e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059e0:	d11f      	bne.n	8005a22 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059e6:	e01c      	b.n	8005a22 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d902      	bls.n	80059f6 <DMA_CheckFifoParam+0xb6>
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d003      	beq.n	80059fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80059f4:	e018      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
        break;
 80059fa:	e015      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00e      	beq.n	8005a26 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8005a0c:	e00b      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
        break;
 8005a0e:	bf00      	nop
 8005a10:	e00a      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
        break;
 8005a12:	bf00      	nop
 8005a14:	e008      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
        break;
 8005a16:	bf00      	nop
 8005a18:	e006      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
        break;
 8005a1a:	bf00      	nop
 8005a1c:	e004      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
        break;
 8005a1e:	bf00      	nop
 8005a20:	e002      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
        break;
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
    break;
 8005a26:	bf00      	nop
    }
  }

  return status;
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop

08005a38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a38      	ldr	r2, [pc, #224]	@ (8005b2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d022      	beq.n	8005a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a36      	ldr	r2, [pc, #216]	@ (8005b30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01d      	beq.n	8005a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a35      	ldr	r2, [pc, #212]	@ (8005b34 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d018      	beq.n	8005a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a33      	ldr	r2, [pc, #204]	@ (8005b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a32      	ldr	r2, [pc, #200]	@ (8005b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00e      	beq.n	8005a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a30      	ldr	r2, [pc, #192]	@ (8005b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2f      	ldr	r2, [pc, #188]	@ (8005b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01a      	beq.n	8005ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	3b08      	subs	r3, #8
 8005aa8:	4a28      	ldr	r2, [pc, #160]	@ (8005b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4b26      	ldr	r3, [pc, #152]	@ (8005b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a24      	ldr	r2, [pc, #144]	@ (8005b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ac4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	2201      	movs	r2, #1
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ad4:	e024      	b.n	8005b20 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	3b10      	subs	r3, #16
 8005ade:	4a1e      	ldr	r2, [pc, #120]	@ (8005b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae4:	091b      	lsrs	r3, r3, #4
 8005ae6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4a1c      	ldr	r2, [pc, #112]	@ (8005b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d806      	bhi.n	8005afe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d902      	bls.n	8005afe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3308      	adds	r3, #8
 8005afc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4b18      	ldr	r3, [pc, #96]	@ (8005b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a16      	ldr	r2, [pc, #88]	@ (8005b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005b10:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	2201      	movs	r2, #1
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b20:	bf00      	nop
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	58025408 	.word	0x58025408
 8005b30:	5802541c 	.word	0x5802541c
 8005b34:	58025430 	.word	0x58025430
 8005b38:	58025444 	.word	0x58025444
 8005b3c:	58025458 	.word	0x58025458
 8005b40:	5802546c 	.word	0x5802546c
 8005b44:	58025480 	.word	0x58025480
 8005b48:	58025494 	.word	0x58025494
 8005b4c:	cccccccd 	.word	0xcccccccd
 8005b50:	16009600 	.word	0x16009600
 8005b54:	58025880 	.word	0x58025880
 8005b58:	aaaaaaab 	.word	0xaaaaaaab
 8005b5c:	400204b8 	.word	0x400204b8
 8005b60:	4002040f 	.word	0x4002040f
 8005b64:	10008200 	.word	0x10008200
 8005b68:	40020880 	.word	0x40020880

08005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d04a      	beq.n	8005c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d847      	bhi.n	8005c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a25      	ldr	r2, [pc, #148]	@ (8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d022      	beq.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a24      	ldr	r2, [pc, #144]	@ (8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d01d      	beq.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a22      	ldr	r2, [pc, #136]	@ (8005c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d018      	beq.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a21      	ldr	r2, [pc, #132]	@ (8005c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d013      	beq.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00e      	beq.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8005c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d009      	beq.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d101      	bne.n	8005bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4b17      	ldr	r3, [pc, #92]	@ (8005c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	461a      	mov	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005bf4:	671a      	str	r2, [r3, #112]	@ 0x70
 8005bf6:	e009      	b.n	8005c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4b14      	ldr	r3, [pc, #80]	@ (8005c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a11      	ldr	r2, [pc, #68]	@ (8005c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005c0a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	2201      	movs	r2, #1
 8005c12:	409a      	lsls	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	58025408 	.word	0x58025408
 8005c28:	5802541c 	.word	0x5802541c
 8005c2c:	58025430 	.word	0x58025430
 8005c30:	58025444 	.word	0x58025444
 8005c34:	58025458 	.word	0x58025458
 8005c38:	5802546c 	.word	0x5802546c
 8005c3c:	58025480 	.word	0x58025480
 8005c40:	58025494 	.word	0x58025494
 8005c44:	1600963f 	.word	0x1600963f
 8005c48:	58025940 	.word	0x58025940
 8005c4c:	1000823f 	.word	0x1000823f
 8005c50:	40020940 	.word	0x40020940

08005c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	@ 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c62:	4b89      	ldr	r3, [pc, #548]	@ (8005e88 <HAL_GPIO_Init+0x234>)
 8005c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c66:	e194      	b.n	8005f92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	4013      	ands	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8186 	beq.w	8005f8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d005      	beq.n	8005c98 <HAL_GPIO_Init+0x44>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d130      	bne.n	8005cfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4013      	ands	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cce:	2201      	movs	r2, #1
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	f003 0201 	and.w	r2, r3, #1
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d017      	beq.n	8005d36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	2203      	movs	r2, #3
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43db      	mvns	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d123      	bne.n	8005d8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	08da      	lsrs	r2, r3, #3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3208      	adds	r2, #8
 8005d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	220f      	movs	r2, #15
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	08da      	lsrs	r2, r3, #3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3208      	adds	r2, #8
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	2203      	movs	r2, #3
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f003 0203 	and.w	r2, r3, #3
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 80e0 	beq.w	8005f8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8005e8c <HAL_GPIO_Init+0x238>)
 8005dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8005e8c <HAL_GPIO_Init+0x238>)
 8005dd4:	f043 0302 	orr.w	r3, r3, #2
 8005dd8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8005e8c <HAL_GPIO_Init+0x238>)
 8005dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dea:	4a29      	ldr	r2, [pc, #164]	@ (8005e90 <HAL_GPIO_Init+0x23c>)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	3302      	adds	r3, #2
 8005df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	220f      	movs	r2, #15
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a20      	ldr	r2, [pc, #128]	@ (8005e94 <HAL_GPIO_Init+0x240>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d052      	beq.n	8005ebc <HAL_GPIO_Init+0x268>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1f      	ldr	r2, [pc, #124]	@ (8005e98 <HAL_GPIO_Init+0x244>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d031      	beq.n	8005e82 <HAL_GPIO_Init+0x22e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1e      	ldr	r2, [pc, #120]	@ (8005e9c <HAL_GPIO_Init+0x248>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02b      	beq.n	8005e7e <HAL_GPIO_Init+0x22a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea0 <HAL_GPIO_Init+0x24c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d025      	beq.n	8005e7a <HAL_GPIO_Init+0x226>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea4 <HAL_GPIO_Init+0x250>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01f      	beq.n	8005e76 <HAL_GPIO_Init+0x222>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea8 <HAL_GPIO_Init+0x254>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d019      	beq.n	8005e72 <HAL_GPIO_Init+0x21e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a1a      	ldr	r2, [pc, #104]	@ (8005eac <HAL_GPIO_Init+0x258>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_GPIO_Init+0x21a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a19      	ldr	r2, [pc, #100]	@ (8005eb0 <HAL_GPIO_Init+0x25c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00d      	beq.n	8005e6a <HAL_GPIO_Init+0x216>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a18      	ldr	r2, [pc, #96]	@ (8005eb4 <HAL_GPIO_Init+0x260>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <HAL_GPIO_Init+0x212>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a17      	ldr	r2, [pc, #92]	@ (8005eb8 <HAL_GPIO_Init+0x264>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_GPIO_Init+0x20e>
 8005e5e:	2309      	movs	r3, #9
 8005e60:	e02d      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e62:	230a      	movs	r3, #10
 8005e64:	e02b      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e66:	2308      	movs	r3, #8
 8005e68:	e029      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e6a:	2307      	movs	r3, #7
 8005e6c:	e027      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e6e:	2306      	movs	r3, #6
 8005e70:	e025      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e72:	2305      	movs	r3, #5
 8005e74:	e023      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e76:	2304      	movs	r3, #4
 8005e78:	e021      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e01f      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e01d      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e01b      	b.n	8005ebe <HAL_GPIO_Init+0x26a>
 8005e86:	bf00      	nop
 8005e88:	58000080 	.word	0x58000080
 8005e8c:	58024400 	.word	0x58024400
 8005e90:	58000400 	.word	0x58000400
 8005e94:	58020000 	.word	0x58020000
 8005e98:	58020400 	.word	0x58020400
 8005e9c:	58020800 	.word	0x58020800
 8005ea0:	58020c00 	.word	0x58020c00
 8005ea4:	58021000 	.word	0x58021000
 8005ea8:	58021400 	.word	0x58021400
 8005eac:	58021800 	.word	0x58021800
 8005eb0:	58021c00 	.word	0x58021c00
 8005eb4:	58022000 	.word	0x58022000
 8005eb8:	58022400 	.word	0x58022400
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	f002 0203 	and.w	r2, r2, #3
 8005ec4:	0092      	lsls	r2, r2, #2
 8005ec6:	4093      	lsls	r3, r2
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ece:	4938      	ldr	r1, [pc, #224]	@ (8005fb0 <HAL_GPIO_Init+0x35c>)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4013      	ands	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	43db      	mvns	r3, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f47f ae63 	bne.w	8005c68 <HAL_GPIO_Init+0x14>
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	3724      	adds	r7, #36	@ 0x24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	58000400 	.word	0x58000400

08005fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	807b      	strh	r3, [r7, #2]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fc4:	787b      	ldrb	r3, [r7, #1]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fca:	887a      	ldrh	r2, [r7, #2]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005fd0:	e003      	b.n	8005fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fd2:	887b      	ldrh	r3, [r7, #2]
 8005fd4:	041a      	lsls	r2, r3, #16
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	619a      	str	r2, [r3, #24]
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ff8:	887a      	ldrh	r2, [r7, #2]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	041a      	lsls	r2, r3, #16
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	43d9      	mvns	r1, r3
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	400b      	ands	r3, r1
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	619a      	str	r2, [r3, #24]
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e07f      	b.n	800612e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fa fca2 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2224      	movs	r2, #36	@ 0x24
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800606c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800607c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d107      	bne.n	8006096 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006092:	609a      	str	r2, [r3, #8]
 8006094:	e006      	b.n	80060a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80060a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d104      	bne.n	80060b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006138 <HAL_I2C_Init+0x11c>)
 80060c2:	430b      	orrs	r3, r1
 80060c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69d9      	ldr	r1, [r3, #28]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1a      	ldr	r2, [r3, #32]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	02008000 	.word	0x02008000

0800613c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	4608      	mov	r0, r1
 8006146:	4611      	mov	r1, r2
 8006148:	461a      	mov	r2, r3
 800614a:	4603      	mov	r3, r0
 800614c:	817b      	strh	r3, [r7, #10]
 800614e:	460b      	mov	r3, r1
 8006150:	813b      	strh	r3, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b20      	cmp	r3, #32
 8006160:	f040 80f9 	bne.w	8006356 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_I2C_Mem_Write+0x34>
 800616a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	d105      	bne.n	800617c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006176:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0ed      	b.n	8006358 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_I2C_Mem_Write+0x4e>
 8006186:	2302      	movs	r3, #2
 8006188:	e0e6      	b.n	8006358 <HAL_I2C_Mem_Write+0x21c>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006192:	f7fb fca1 	bl	8001ad8 <HAL_GetTick>
 8006196:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	2319      	movs	r3, #25
 800619e:	2201      	movs	r2, #1
 80061a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f955 	bl	8006454 <I2C_WaitOnFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0d1      	b.n	8006358 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2221      	movs	r2, #33	@ 0x21
 80061b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2240      	movs	r2, #64	@ 0x40
 80061c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80061d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061dc:	88f8      	ldrh	r0, [r7, #6]
 80061de:	893a      	ldrh	r2, [r7, #8]
 80061e0:	8979      	ldrh	r1, [r7, #10]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4603      	mov	r3, r0
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f8b9 	bl	8006364 <I2C_RequestMemoryWrite>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0a9      	b.n	8006358 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2bff      	cmp	r3, #255	@ 0xff
 800620c:	d90e      	bls.n	800622c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	@ 0xff
 8006212:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006218:	b2da      	uxtb	r2, r3
 800621a:	8979      	ldrh	r1, [r7, #10]
 800621c:	2300      	movs	r3, #0
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 facf 	bl	80067c8 <I2C_TransferConfig>
 800622a:	e00f      	b.n	800624c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623a:	b2da      	uxtb	r2, r3
 800623c:	8979      	ldrh	r1, [r7, #10]
 800623e:	2300      	movs	r3, #0
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fabe 	bl	80067c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f94e 	bl	80064f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e07b      	b.n	8006358 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d034      	beq.n	8006304 <HAL_I2C_Mem_Write+0x1c8>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d130      	bne.n	8006304 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	2200      	movs	r2, #0
 80062aa:	2180      	movs	r1, #128	@ 0x80
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f8d1 	bl	8006454 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e04d      	b.n	8006358 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2bff      	cmp	r3, #255	@ 0xff
 80062c4:	d90e      	bls.n	80062e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	22ff      	movs	r2, #255	@ 0xff
 80062ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	8979      	ldrh	r1, [r7, #10]
 80062d4:	2300      	movs	r3, #0
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fa73 	bl	80067c8 <I2C_TransferConfig>
 80062e2:	e00f      	b.n	8006304 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	8979      	ldrh	r1, [r7, #10]
 80062f6:	2300      	movs	r3, #0
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fa62 	bl	80067c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d19e      	bne.n	800624c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f934 	bl	8006580 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e01a      	b.n	8006358 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2220      	movs	r2, #32
 8006328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6859      	ldr	r1, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b0a      	ldr	r3, [pc, #40]	@ (8006360 <HAL_I2C_Mem_Write+0x224>)
 8006336:	400b      	ands	r3, r1
 8006338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e000      	b.n	8006358 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006356:	2302      	movs	r3, #2
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	fe00e800 	.word	0xfe00e800

08006364 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af02      	add	r7, sp, #8
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	4608      	mov	r0, r1
 800636e:	4611      	mov	r1, r2
 8006370:	461a      	mov	r2, r3
 8006372:	4603      	mov	r3, r0
 8006374:	817b      	strh	r3, [r7, #10]
 8006376:	460b      	mov	r3, r1
 8006378:	813b      	strh	r3, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	8979      	ldrh	r1, [r7, #10]
 8006384:	4b20      	ldr	r3, [pc, #128]	@ (8006408 <I2C_RequestMemoryWrite+0xa4>)
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 fa1b 	bl	80067c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	69b9      	ldr	r1, [r7, #24]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 f8ab 	bl	80064f2 <I2C_WaitOnTXISFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e02c      	b.n	8006400 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d105      	bne.n	80063b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063ac:	893b      	ldrh	r3, [r7, #8]
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80063b6:	e015      	b.n	80063e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063b8:	893b      	ldrh	r3, [r7, #8]
 80063ba:	0a1b      	lsrs	r3, r3, #8
 80063bc:	b29b      	uxth	r3, r3
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	69b9      	ldr	r1, [r7, #24]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 f891 	bl	80064f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e012      	b.n	8006400 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063da:	893b      	ldrh	r3, [r7, #8]
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	2200      	movs	r2, #0
 80063ec:	2180      	movs	r1, #128	@ 0x80
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f830 	bl	8006454 <I2C_WaitOnFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	80002000 	.word	0x80002000

0800640c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b02      	cmp	r3, #2
 8006420:	d103      	bne.n	800642a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2200      	movs	r2, #0
 8006428:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	d007      	beq.n	8006448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	619a      	str	r2, [r3, #24]
  }
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006464:	e031      	b.n	80064ca <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d02d      	beq.n	80064ca <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646e:	f7fb fb33 	bl	8001ad8 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d302      	bcc.n	8006484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d122      	bne.n	80064ca <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	4013      	ands	r3, r2
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	429a      	cmp	r2, r3
 8006492:	bf0c      	ite	eq
 8006494:	2301      	moveq	r3, #1
 8006496:	2300      	movne	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d113      	bne.n	80064ca <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a6:	f043 0220 	orr.w	r2, r3, #32
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e00f      	b.n	80064ea <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4013      	ands	r3, r2
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	bf0c      	ite	eq
 80064da:	2301      	moveq	r3, #1
 80064dc:	2300      	movne	r3, #0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d0be      	beq.n	8006466 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064fe:	e033      	b.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f87f 	bl	8006608 <I2C_IsErrorOccurred>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e031      	b.n	8006578 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d025      	beq.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651c:	f7fb fadc 	bl	8001ad8 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	d302      	bcc.n	8006532 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d11a      	bne.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b02      	cmp	r3, #2
 800653e:	d013      	beq.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006544:	f043 0220 	orr.w	r2, r3, #32
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e007      	b.n	8006578 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b02      	cmp	r3, #2
 8006574:	d1c4      	bne.n	8006500 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800658c:	e02f      	b.n	80065ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f838 	bl	8006608 <I2C_IsErrorOccurred>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e02d      	b.n	80065fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a2:	f7fb fa99 	bl	8001ad8 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d302      	bcc.n	80065b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d11a      	bne.n	80065ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d013      	beq.n	80065ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ca:	f043 0220 	orr.w	r2, r3, #32
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e007      	b.n	80065fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d1c8      	bne.n	800658e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	@ 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	d068      	beq.n	8006706 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2210      	movs	r2, #16
 800663a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800663c:	e049      	b.n	80066d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d045      	beq.n	80066d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006646:	f7fb fa47 	bl	8001ad8 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	429a      	cmp	r2, r3
 8006654:	d302      	bcc.n	800665c <I2C_IsErrorOccurred+0x54>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d13a      	bne.n	80066d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006666:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800666e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800667a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800667e:	d121      	bne.n	80066c4 <I2C_IsErrorOccurred+0xbc>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006686:	d01d      	beq.n	80066c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006688:	7cfb      	ldrb	r3, [r7, #19]
 800668a:	2b20      	cmp	r3, #32
 800668c:	d01a      	beq.n	80066c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800669c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800669e:	f7fb fa1b 	bl	8001ad8 <HAL_GetTick>
 80066a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066a4:	e00e      	b.n	80066c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80066a6:	f7fb fa17 	bl	8001ad8 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b19      	cmp	r3, #25
 80066b2:	d907      	bls.n	80066c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	f043 0320 	orr.w	r3, r3, #32
 80066ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80066c2:	e006      	b.n	80066d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d1e9      	bne.n	80066a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d003      	beq.n	80066e8 <I2C_IsErrorOccurred+0xe0>
 80066e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0aa      	beq.n	800663e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d103      	bne.n	80066f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2220      	movs	r2, #32
 80066f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	f043 0304 	orr.w	r3, r3, #4
 80066fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	f043 0308 	orr.w	r3, r3, #8
 8006740:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800674a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	f043 0302 	orr.w	r3, r3, #2
 8006762:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800676c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006778:	2b00      	cmp	r3, #0
 800677a:	d01c      	beq.n	80067b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff fe45 	bl	800640c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6859      	ldr	r1, [r3, #4]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <I2C_IsErrorOccurred+0x1bc>)
 800678e:	400b      	ands	r3, r1
 8006790:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	431a      	orrs	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80067b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3728      	adds	r7, #40	@ 0x28
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	fe00e800 	.word	0xfe00e800

080067c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	817b      	strh	r3, [r7, #10]
 80067d6:	4613      	mov	r3, r2
 80067d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067da:	897b      	ldrh	r3, [r7, #10]
 80067dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067e0:	7a7b      	ldrb	r3, [r7, #9]
 80067e2:	041b      	lsls	r3, r3, #16
 80067e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	0d5b      	lsrs	r3, r3, #21
 8006802:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006806:	4b08      	ldr	r3, [pc, #32]	@ (8006828 <I2C_TransferConfig+0x60>)
 8006808:	430b      	orrs	r3, r1
 800680a:	43db      	mvns	r3, r3
 800680c:	ea02 0103 	and.w	r1, r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	430a      	orrs	r2, r1
 8006818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	03ff63ff 	.word	0x03ff63ff

0800682c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b20      	cmp	r3, #32
 8006840:	d138      	bne.n	80068b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800684c:	2302      	movs	r3, #2
 800684e:	e032      	b.n	80068b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2224      	movs	r2, #36	@ 0x24
 800685c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800687e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6819      	ldr	r1, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	e000      	b.n	80068b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068b4:	2302      	movs	r3, #2
  }
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d139      	bne.n	800694c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e033      	b.n	800694e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2224      	movs	r2, #36	@ 0x24
 80068f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	021b      	lsls	r3, r3, #8
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	e000      	b.n	800694e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800694c:	2302      	movs	r3, #2
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800695a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800695c:	b08f      	sub	sp, #60	@ 0x3c
 800695e:	af0a      	add	r7, sp, #40	@ 0x28
 8006960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e116      	b.n	8006b9a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f00b f8b4 	bl	8011af4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2203      	movs	r2, #3
 8006990:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800699c:	2b00      	cmp	r3, #0
 800699e:	d102      	bne.n	80069a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f007 f803 	bl	800d9b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	687e      	ldr	r6, [r7, #4]
 80069b8:	466d      	mov	r5, sp
 80069ba:	f106 0410 	add.w	r4, r6, #16
 80069be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80069ce:	1d33      	adds	r3, r6, #4
 80069d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069d2:	6838      	ldr	r0, [r7, #0]
 80069d4:	f006 fece 	bl	800d774 <USB_CoreInit>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e0d7      	b.n	8006b9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f006 fff1 	bl	800d9d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
 80069fa:	e04a      	b.n	8006a92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80069fc:	7bfa      	ldrb	r2, [r7, #15]
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	4613      	mov	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	4413      	add	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	333d      	adds	r3, #61	@ 0x3d
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006a10:	7bfa      	ldrb	r2, [r7, #15]
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	333c      	adds	r3, #60	@ 0x3c
 8006a20:	7bfa      	ldrb	r2, [r7, #15]
 8006a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006a24:	7bfa      	ldrb	r2, [r7, #15]
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	b298      	uxth	r0, r3
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	440b      	add	r3, r1
 8006a36:	3356      	adds	r3, #86	@ 0x56
 8006a38:	4602      	mov	r2, r0
 8006a3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006a3c:	7bfa      	ldrb	r2, [r7, #15]
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4613      	mov	r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	3340      	adds	r3, #64	@ 0x40
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a50:	7bfa      	ldrb	r2, [r7, #15]
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3344      	adds	r3, #68	@ 0x44
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a64:	7bfa      	ldrb	r2, [r7, #15]
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	3348      	adds	r3, #72	@ 0x48
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a78:	7bfa      	ldrb	r2, [r7, #15]
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	334c      	adds	r3, #76	@ 0x4c
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]
 8006a92:	7bfa      	ldrb	r2, [r7, #15]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d3af      	bcc.n	80069fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
 8006aa0:	e044      	b.n	8006b2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006aa2:	7bfa      	ldrb	r2, [r7, #15]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ab8:	7bfa      	ldrb	r2, [r7, #15]
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8006aca:	7bfa      	ldrb	r2, [r7, #15]
 8006acc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ace:	7bfa      	ldrb	r2, [r7, #15]
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ae4:	7bfa      	ldrb	r2, [r7, #15]
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006afa:	7bfa      	ldrb	r2, [r7, #15]
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	4613      	mov	r3, r2
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	440b      	add	r3, r1
 8006b08:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006b10:	7bfa      	ldrb	r2, [r7, #15]
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	4613      	mov	r3, r2
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	7bfa      	ldrb	r2, [r7, #15]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d3b5      	bcc.n	8006aa2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	687e      	ldr	r6, [r7, #4]
 8006b3e:	466d      	mov	r5, sp
 8006b40:	f106 0410 	add.w	r4, r6, #16
 8006b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b50:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b54:	1d33      	adds	r3, r6, #4
 8006b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b58:	6838      	ldr	r0, [r7, #0]
 8006b5a:	f006 ff89 	bl	800da70 <USB_DevInit>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e014      	b.n	8006b9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d102      	bne.n	8006b8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 f96f 	bl	8007e6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f007 ffcb 	bl	800eb2e <USB_DevDisconnect>

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ba2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_PCD_Start+0x1c>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e022      	b.n	8006c04 <HAL_PCD_Start+0x62>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d105      	bne.n	8006be6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f006 fed2 	bl	800d994 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f007 ff79 	bl	800eaec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006c0c:	b590      	push	{r4, r7, lr}
 8006c0e:	b08d      	sub	sp, #52	@ 0x34
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f008 f837 	bl	800ec96 <USB_GetMode>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f040 84b7 	bne.w	800759e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f007 ff9b 	bl	800eb70 <USB_ReadInterrupts>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 84ad 	beq.w	800759c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f007 ff88 	bl	800eb70 <USB_ReadInterrupts>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d107      	bne.n	8006c7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695a      	ldr	r2, [r3, #20]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f002 0202 	and.w	r2, r2, #2
 8006c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f007 ff76 	bl	800eb70 <USB_ReadInterrupts>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d161      	bne.n	8006d52 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0210 	bic.w	r2, r2, #16
 8006c9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f003 020f 	and.w	r2, r3, #15
 8006caa:	4613      	mov	r3, r2
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	4413      	add	r3, r2
 8006cba:	3304      	adds	r3, #4
 8006cbc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	0c5b      	lsrs	r3, r3, #17
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d124      	bne.n	8006d14 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d035      	beq.n	8006d42 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	091b      	lsrs	r3, r3, #4
 8006cde:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ce0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	6a38      	ldr	r0, [r7, #32]
 8006cea:	f007 fdad 	bl	800e848 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	091b      	lsrs	r3, r3, #4
 8006cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cfa:	441a      	add	r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	695a      	ldr	r2, [r3, #20]
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	091b      	lsrs	r3, r3, #4
 8006d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d0c:	441a      	add	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	615a      	str	r2, [r3, #20]
 8006d12:	e016      	b.n	8006d42 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	0c5b      	lsrs	r3, r3, #17
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	2b06      	cmp	r3, #6
 8006d1e:	d110      	bne.n	8006d42 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006d26:	2208      	movs	r2, #8
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6a38      	ldr	r0, [r7, #32]
 8006d2c:	f007 fd8c 	bl	800e848 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	091b      	lsrs	r3, r3, #4
 8006d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d3c:	441a      	add	r2, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0210 	orr.w	r2, r2, #16
 8006d50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f007 ff0a 	bl	800eb70 <USB_ReadInterrupts>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d62:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006d66:	f040 80a7 	bne.w	8006eb8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f007 ff0f 	bl	800eb96 <USB_ReadDevAllOutEpInterrupt>
 8006d78:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006d7a:	e099      	b.n	8006eb0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 808e 	beq.w	8006ea4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	4611      	mov	r1, r2
 8006d92:	4618      	mov	r0, r3
 8006d94:	f007 ff33 	bl	800ebfe <USB_ReadDevOutEPInterrupt>
 8006d98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00c      	beq.n	8006dbe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db0:	461a      	mov	r2, r3
 8006db2:	2301      	movs	r3, #1
 8006db4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006db6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fed1 	bl	8007b60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f003 0308 	and.w	r3, r3, #8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00c      	beq.n	8006de2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006dda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 ffa7 	bl	8007d30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2310      	movs	r3, #16
 8006dfc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d030      	beq.n	8006e6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e10:	2b80      	cmp	r3, #128	@ 0x80
 8006e12:	d109      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	4413      	add	r3, r2
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	78db      	ldrb	r3, [r3, #3]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d108      	bne.n	8006e58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f00a ff74 	bl	8011d40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e64:	461a      	mov	r2, r3
 8006e66:	2302      	movs	r3, #2
 8006e68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e80:	461a      	mov	r2, r3
 8006e82:	2320      	movs	r3, #32
 8006e84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d009      	beq.n	8006ea4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006ea2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f47f af62 	bne.w	8006d7c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f007 fe57 	bl	800eb70 <USB_ReadInterrupts>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ec8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ecc:	f040 80db 	bne.w	8007086 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f007 fe78 	bl	800ebca <USB_ReadDevAllInEpInterrupt>
 8006eda:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006ee0:	e0cd      	b.n	800707e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 80c2 	beq.w	8007072 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f007 fe9e 	bl	800ec3a <USB_ReadDevInEPInterrupt>
 8006efe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d057      	beq.n	8006fba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	2201      	movs	r2, #1
 8006f12:	fa02 f303 	lsl.w	r3, r2, r3
 8006f16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	43db      	mvns	r3, r3
 8006f24:	69f9      	ldr	r1, [r7, #28]
 8006f26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d132      	bne.n	8006fae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	3348      	adds	r3, #72	@ 0x48
 8006f58:	6819      	ldr	r1, [r3, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f5e:	4613      	mov	r3, r2
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4403      	add	r3, r0
 8006f68:	3344      	adds	r3, #68	@ 0x44
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4419      	add	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f72:	4613      	mov	r3, r2
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4403      	add	r3, r0
 8006f7c:	3348      	adds	r3, #72	@ 0x48
 8006f7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d113      	bne.n	8006fae <HAL_PCD_IRQHandler+0x3a2>
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	334c      	adds	r3, #76	@ 0x4c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d108      	bne.n	8006fae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2101      	movs	r1, #1
 8006faa:	f007 fea7 	bl	800ecfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f00a fe3e 	bl	8011c36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	2308      	movs	r3, #8
 8006fd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f003 0310 	and.w	r3, r3, #16
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fec:	461a      	mov	r2, r3
 8006fee:	2310      	movs	r3, #16
 8006ff0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d008      	beq.n	800700e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007008:	461a      	mov	r2, r3
 800700a:	2340      	movs	r3, #64	@ 0x40
 800700c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d023      	beq.n	8007060 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800701a:	6a38      	ldr	r0, [r7, #32]
 800701c:	f006 fe86 	bl	800dd2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007022:	4613      	mov	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	3338      	adds	r3, #56	@ 0x38
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	4413      	add	r3, r2
 8007030:	3304      	adds	r3, #4
 8007032:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	78db      	ldrb	r3, [r3, #3]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d108      	bne.n	800704e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2200      	movs	r2, #0
 8007040:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	b2db      	uxtb	r3, r3
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f00a fe8b 	bl	8011d64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800705a:	461a      	mov	r2, r3
 800705c:	2302      	movs	r3, #2
 800705e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800706a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fcea 	bl	8007a46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	3301      	adds	r3, #1
 8007076:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707a:	085b      	lsrs	r3, r3, #1
 800707c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800707e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	f47f af2e 	bne.w	8006ee2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f007 fd70 	bl	800eb70 <USB_ReadInterrupts>
 8007090:	4603      	mov	r3, r0
 8007092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800709a:	d122      	bne.n	80070e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	69fa      	ldr	r2, [r7, #28]
 80070a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d108      	bne.n	80070cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80070c2:	2100      	movs	r1, #0
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fef5 	bl	8007eb4 <HAL_PCDEx_LPM_Callback>
 80070ca:	e002      	b.n	80070d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f00a fe29 	bl	8011d24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80070e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f007 fd42 	bl	800eb70 <USB_ReadInterrupts>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070f6:	d112      	bne.n	800711e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b01      	cmp	r3, #1
 8007106:	d102      	bne.n	800710e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f00a fde5 	bl	8011cd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695a      	ldr	r2, [r3, #20]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800711c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f007 fd24 	bl	800eb70 <USB_ReadInterrupts>
 8007128:	4603      	mov	r3, r0
 800712a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800712e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007132:	d121      	bne.n	8007178 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007142:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d111      	bne.n	8007172 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715c:	089b      	lsrs	r3, r3, #2
 800715e:	f003 020f 	and.w	r2, r3, #15
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007168:	2101      	movs	r1, #1
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fea2 	bl	8007eb4 <HAL_PCDEx_LPM_Callback>
 8007170:	e002      	b.n	8007178 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f00a fdb0 	bl	8011cd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f007 fcf7 	bl	800eb70 <USB_ReadInterrupts>
 8007182:	4603      	mov	r3, r0
 8007184:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800718c:	f040 80b7 	bne.w	80072fe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800719e:	f023 0301 	bic.w	r3, r3, #1
 80071a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2110      	movs	r1, #16
 80071aa:	4618      	mov	r0, r3
 80071ac:	f006 fdbe 	bl	800dd2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071b0:	2300      	movs	r3, #0
 80071b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071b4:	e046      	b.n	8007244 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80071b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c2:	461a      	mov	r2, r3
 80071c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071da:	0151      	lsls	r1, r2, #5
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	440a      	add	r2, r1
 80071e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80071ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f6:	461a      	mov	r2, r3
 80071f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	4413      	add	r3, r2
 8007206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800720e:	0151      	lsls	r1, r2, #5
 8007210:	69fa      	ldr	r2, [r7, #28]
 8007212:	440a      	add	r2, r1
 8007214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007218:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800721c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800721e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007238:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800723c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	3301      	adds	r3, #1
 8007242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800724a:	429a      	cmp	r2, r3
 800724c:	d3b3      	bcc.n	80071b6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800725c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007260:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007266:	2b00      	cmp	r3, #0
 8007268:	d016      	beq.n	8007298 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800727a:	f043 030b 	orr.w	r3, r3, #11
 800727e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007290:	f043 030b 	orr.w	r3, r3, #11
 8007294:	6453      	str	r3, [r2, #68]	@ 0x44
 8007296:	e015      	b.n	80072c4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800729e:	695a      	ldr	r2, [r3, #20]
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a6:	4619      	mov	r1, r3
 80072a8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80072ac:	4313      	orrs	r3, r2
 80072ae:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072be:	f043 030b 	orr.w	r3, r3, #11
 80072c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80072d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6818      	ldr	r0, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80072e8:	461a      	mov	r2, r3
 80072ea:	f007 fd07 	bl	800ecfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695a      	ldr	r2, [r3, #20]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80072fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f007 fc34 	bl	800eb70 <USB_ReadInterrupts>
 8007308:	4603      	mov	r3, r0
 800730a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800730e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007312:	d124      	bne.n	800735e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f007 fccb 	bl	800ecb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f006 fd7f 	bl	800de26 <USB_GetDevSpeed>
 8007328:	4603      	mov	r3, r0
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681c      	ldr	r4, [r3, #0]
 8007334:	f001 fd9e 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 8007338:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800733e:	b2db      	uxtb	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	4620      	mov	r0, r4
 8007344:	f006 fa84 	bl	800d850 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f00a fc9c 	bl	8011c86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695a      	ldr	r2, [r3, #20]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800735c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f007 fc04 	bl	800eb70 <USB_ReadInterrupts>
 8007368:	4603      	mov	r3, r0
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b08      	cmp	r3, #8
 8007370:	d10a      	bne.n	8007388 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f00a fc79 	bl	8011c6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695a      	ldr	r2, [r3, #20]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f002 0208 	and.w	r2, r2, #8
 8007386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f007 fbef 	bl	800eb70 <USB_ReadInterrupts>
 8007392:	4603      	mov	r3, r0
 8007394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007398:	2b80      	cmp	r3, #128	@ 0x80
 800739a:	d122      	bne.n	80073e2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80073a8:	2301      	movs	r3, #1
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ac:	e014      	b.n	80073d8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b2:	4613      	mov	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d105      	bne.n	80073d2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fb09 	bl	80079e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	3301      	adds	r3, #1
 80073d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073de:	429a      	cmp	r2, r3
 80073e0:	d3e5      	bcc.n	80073ae <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f007 fbc2 	bl	800eb70 <USB_ReadInterrupts>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073f6:	d13b      	bne.n	8007470 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80073f8:	2301      	movs	r3, #1
 80073fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80073fc:	e02b      	b.n	8007456 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007412:	4613      	mov	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	440b      	add	r3, r1
 800741c:	3340      	adds	r3, #64	@ 0x40
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d115      	bne.n	8007450 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007424:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007426:	2b00      	cmp	r3, #0
 8007428:	da12      	bge.n	8007450 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800742e:	4613      	mov	r3, r2
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	333f      	adds	r3, #63	@ 0x3f
 800743a:	2201      	movs	r2, #1
 800743c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	b2db      	uxtb	r3, r3
 8007442:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007446:	b2db      	uxtb	r3, r3
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 faca 	bl	80079e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	3301      	adds	r3, #1
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800745c:	429a      	cmp	r2, r3
 800745e:	d3ce      	bcc.n	80073fe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695a      	ldr	r2, [r3, #20]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800746e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4618      	mov	r0, r3
 8007476:	f007 fb7b 	bl	800eb70 <USB_ReadInterrupts>
 800747a:	4603      	mov	r3, r0
 800747c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007480:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007484:	d155      	bne.n	8007532 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007486:	2301      	movs	r3, #1
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
 800748a:	e045      	b.n	8007518 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a0:	4613      	mov	r3, r2
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d12e      	bne.n	8007512 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80074b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da2b      	bge.n	8007512 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80074c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d121      	bne.n	8007512 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d2:	4613      	mov	r3, r2
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	440b      	add	r3, r1
 80074dc:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80074e0:	2201      	movs	r2, #1
 80074e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800750a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800750e:	6053      	str	r3, [r2, #4]
            break;
 8007510:	e007      	b.n	8007522 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	3301      	adds	r3, #1
 8007516:	627b      	str	r3, [r7, #36]	@ 0x24
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800751e:	429a      	cmp	r2, r3
 8007520:	d3b4      	bcc.n	800748c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f007 fb1a 	bl	800eb70 <USB_ReadInterrupts>
 800753c:	4603      	mov	r3, r0
 800753e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007546:	d10a      	bne.n	800755e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f00a fc1d 	bl	8011d88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695a      	ldr	r2, [r3, #20]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800755c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f007 fb04 	bl	800eb70 <USB_ReadInterrupts>
 8007568:	4603      	mov	r3, r0
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b04      	cmp	r3, #4
 8007570:	d115      	bne.n	800759e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f00a fc0d 	bl	8011da4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6859      	ldr	r1, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	e000      	b.n	800759e <HAL_PCD_IRQHandler+0x992>
      return;
 800759c:	bf00      	nop
    }
  }
}
 800759e:	3734      	adds	r7, #52	@ 0x34
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd90      	pop	{r4, r7, pc}

080075a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_PCD_SetAddress+0x1a>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e013      	b.n	80075e6 <HAL_PCD_SetAddress+0x42>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	78fa      	ldrb	r2, [r7, #3]
 80075ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	78fa      	ldrb	r2, [r7, #3]
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f007 fa62 	bl	800eaa0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	4608      	mov	r0, r1
 80075f8:	4611      	mov	r1, r2
 80075fa:	461a      	mov	r2, r3
 80075fc:	4603      	mov	r3, r0
 80075fe:	70fb      	strb	r3, [r7, #3]
 8007600:	460b      	mov	r3, r1
 8007602:	803b      	strh	r3, [r7, #0]
 8007604:	4613      	mov	r3, r2
 8007606:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800760c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007610:	2b00      	cmp	r3, #0
 8007612:	da0f      	bge.n	8007634 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	f003 020f 	and.w	r2, r3, #15
 800761a:	4613      	mov	r3, r2
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	3338      	adds	r3, #56	@ 0x38
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	4413      	add	r3, r2
 8007628:	3304      	adds	r3, #4
 800762a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	705a      	strb	r2, [r3, #1]
 8007632:	e00f      	b.n	8007654 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	f003 020f 	and.w	r2, r3, #15
 800763a:	4613      	mov	r3, r2
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	4413      	add	r3, r2
 800764a:	3304      	adds	r3, #4
 800764c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	b2da      	uxtb	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007660:	883a      	ldrh	r2, [r7, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	78ba      	ldrb	r2, [r7, #2]
 800766a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800767e:	78bb      	ldrb	r3, [r7, #2]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d102      	bne.n	800768a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_PCD_EP_Open+0xaa>
 8007694:	2302      	movs	r3, #2
 8007696:	e00e      	b.n	80076b6 <HAL_PCD_EP_Open+0xc8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68f9      	ldr	r1, [r7, #12]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f006 fbe2 	bl	800de70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80076b4:	7afb      	ldrb	r3, [r7, #11]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80076ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	da0f      	bge.n	80076f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	f003 020f 	and.w	r2, r3, #15
 80076d8:	4613      	mov	r3, r2
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	3338      	adds	r3, #56	@ 0x38
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	4413      	add	r3, r2
 80076e6:	3304      	adds	r3, #4
 80076e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	705a      	strb	r2, [r3, #1]
 80076f0:	e00f      	b.n	8007712 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	f003 020f 	and.w	r2, r3, #15
 80076f8:	4613      	mov	r3, r2
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	4413      	add	r3, r2
 8007708:	3304      	adds	r3, #4
 800770a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	f003 030f 	and.w	r3, r3, #15
 8007718:	b2da      	uxtb	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_PCD_EP_Close+0x6e>
 8007728:	2302      	movs	r3, #2
 800772a:	e00e      	b.n	800774a <HAL_PCD_EP_Close+0x8c>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68f9      	ldr	r1, [r7, #12]
 800773a:	4618      	mov	r0, r3
 800773c:	f006 fc20 	bl	800df80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b086      	sub	sp, #24
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
 800775e:	460b      	mov	r3, r1
 8007760:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	f003 020f 	and.w	r2, r3, #15
 8007768:	4613      	mov	r3, r2
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	3304      	adds	r3, #4
 800777a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2200      	movs	r2, #0
 800778c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2200      	movs	r2, #0
 8007792:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	b2da      	uxtb	r2, r3
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d102      	bne.n	80077ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	6979      	ldr	r1, [r7, #20]
 80077bc:	f006 fcbc 	bl	800e138 <USB_EPStartXfer>

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	460b      	mov	r3, r1
 80077d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	f003 020f 	and.w	r2, r3, #15
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80077ec:	681b      	ldr	r3, [r3, #0]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
 8007806:	460b      	mov	r3, r1
 8007808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	f003 020f 	and.w	r2, r3, #15
 8007810:	4613      	mov	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	3338      	adds	r3, #56	@ 0x38
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	3304      	adds	r3, #4
 8007820:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2200      	movs	r2, #0
 8007832:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2201      	movs	r2, #1
 8007838:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800783a:	7afb      	ldrb	r3, [r7, #11]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	b2da      	uxtb	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d102      	bne.n	8007854 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	6979      	ldr	r1, [r7, #20]
 8007862:	f006 fc69 	bl	800e138 <USB_EPStartXfer>

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	f003 020f 	and.w	r2, r3, #15
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	429a      	cmp	r2, r3
 8007888:	d901      	bls.n	800788e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e050      	b.n	8007930 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800788e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007892:	2b00      	cmp	r3, #0
 8007894:	da0f      	bge.n	80078b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	f003 020f 	and.w	r2, r3, #15
 800789c:	4613      	mov	r3, r2
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	3338      	adds	r3, #56	@ 0x38
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	4413      	add	r3, r2
 80078aa:	3304      	adds	r3, #4
 80078ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	705a      	strb	r2, [r3, #1]
 80078b4:	e00d      	b.n	80078d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	4613      	mov	r3, r2
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	4413      	add	r3, r2
 80078c8:	3304      	adds	r3, #4
 80078ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d101      	bne.n	80078f2 <HAL_PCD_EP_SetStall+0x82>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e01e      	b.n	8007930 <HAL_PCD_EP_SetStall+0xc0>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	4618      	mov	r0, r3
 8007902:	f006 fff9 	bl	800e8f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	b2d9      	uxtb	r1, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007920:	461a      	mov	r2, r3
 8007922:	f007 f9eb 	bl	800ecfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	f003 020f 	and.w	r2, r3, #15
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	429a      	cmp	r2, r3
 8007950:	d901      	bls.n	8007956 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e042      	b.n	80079dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800795a:	2b00      	cmp	r3, #0
 800795c:	da0f      	bge.n	800797e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	f003 020f 	and.w	r2, r3, #15
 8007964:	4613      	mov	r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	3338      	adds	r3, #56	@ 0x38
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	4413      	add	r3, r2
 8007972:	3304      	adds	r3, #4
 8007974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	705a      	strb	r2, [r3, #1]
 800797c:	e00f      	b.n	800799e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800797e:	78fb      	ldrb	r3, [r7, #3]
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	3304      	adds	r3, #4
 8007996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d101      	bne.n	80079be <HAL_PCD_EP_ClrStall+0x86>
 80079ba:	2302      	movs	r3, #2
 80079bc:	e00e      	b.n	80079dc <HAL_PCD_EP_ClrStall+0xa4>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68f9      	ldr	r1, [r7, #12]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f007 f801 	bl	800e9d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80079f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da0c      	bge.n	8007a12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	f003 020f 	and.w	r2, r3, #15
 80079fe:	4613      	mov	r3, r2
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	3338      	adds	r3, #56	@ 0x38
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e00c      	b.n	8007a2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a12:	78fb      	ldrb	r3, [r7, #3]
 8007a14:	f003 020f 	and.w	r2, r3, #15
 8007a18:	4613      	mov	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	4413      	add	r3, r2
 8007a28:	3304      	adds	r3, #4
 8007a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68f9      	ldr	r1, [r7, #12]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f006 fe20 	bl	800e678 <USB_EPStopXfer>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b08a      	sub	sp, #40	@ 0x28
 8007a4a:	af02      	add	r7, sp, #8
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	3338      	adds	r3, #56	@ 0x38
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	695a      	ldr	r2, [r3, #20]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d901      	bls.n	8007a7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e06c      	b.n	8007b58 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	691a      	ldr	r2, [r3, #16]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d902      	bls.n	8007a9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	3303      	adds	r3, #3
 8007a9e:	089b      	lsrs	r3, r3, #2
 8007aa0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007aa2:	e02b      	b.n	8007afc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d902      	bls.n	8007ac0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	3303      	adds	r3, #3
 8007ac4:	089b      	lsrs	r3, r3, #2
 8007ac6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68d9      	ldr	r1, [r3, #12]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	4603      	mov	r3, r0
 8007ade:	6978      	ldr	r0, [r7, #20]
 8007ae0:	f006 fe74 	bl	800e7cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	441a      	add	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	695a      	ldr	r2, [r3, #20]
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	441a      	add	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d809      	bhi.n	8007b26 <PCD_WriteEmptyTxFifo+0xe0>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	695a      	ldr	r2, [r3, #20]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d203      	bcs.n	8007b26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1be      	bne.n	8007aa4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d811      	bhi.n	8007b56 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	f003 030f 	and.w	r3, r3, #15
 8007b38:	2201      	movs	r2, #1
 8007b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	43db      	mvns	r3, r3
 8007b4c:	6939      	ldr	r1, [r7, #16]
 8007b4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b52:	4013      	ands	r3, r2
 8007b54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3720      	adds	r7, #32
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	333c      	adds	r3, #60	@ 0x3c
 8007b78:	3304      	adds	r3, #4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d17b      	bne.n	8007c8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d015      	beq.n	8007bcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	4a61      	ldr	r2, [pc, #388]	@ (8007d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	f240 80b9 	bls.w	8007d1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 80b3 	beq.w	8007d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bc8:	6093      	str	r3, [r2, #8]
 8007bca:	e0a7      	b.n	8007d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d009      	beq.n	8007bea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be2:	461a      	mov	r2, r3
 8007be4:	2320      	movs	r3, #32
 8007be6:	6093      	str	r3, [r2, #8]
 8007be8:	e098      	b.n	8007d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f040 8093 	bne.w	8007d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8007d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d90f      	bls.n	8007c1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c14:	461a      	mov	r2, r3
 8007c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c1a:	6093      	str	r3, [r2, #8]
 8007c1c:	e07e      	b.n	8007d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4413      	add	r3, r2
 8007c30:	3304      	adds	r3, #4
 8007c32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a1a      	ldr	r2, [r3, #32]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	0159      	lsls	r1, r3, #5
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	440b      	add	r3, r1
 8007c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c4a:	1ad2      	subs	r2, r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d114      	bne.n	8007c80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007c68:	461a      	mov	r2, r3
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	f007 f846 	bl	800ecfc <USB_EP0_OutStart>
 8007c70:	e006      	b.n	8007c80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f009 ffba 	bl	8011c00 <HAL_PCD_DataOutStageCallback>
 8007c8c:	e046      	b.n	8007d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	4a26      	ldr	r2, [pc, #152]	@ (8007d2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d124      	bne.n	8007ce0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cac:	461a      	mov	r2, r3
 8007cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb2:	6093      	str	r3, [r2, #8]
 8007cb4:	e032      	b.n	8007d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f003 0320 	and.w	r3, r3, #32
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ccc:	461a      	mov	r2, r3
 8007cce:	2320      	movs	r3, #32
 8007cd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f009 ff91 	bl	8011c00 <HAL_PCD_DataOutStageCallback>
 8007cde:	e01d      	b.n	8007d1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d114      	bne.n	8007d10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	440b      	add	r3, r1
 8007cf4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d108      	bne.n	8007d10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	f006 fff6 	bl	800ecfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f009 ff72 	bl	8011c00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3720      	adds	r7, #32
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	4f54300a 	.word	0x4f54300a
 8007d2c:	4f54310a 	.word	0x4f54310a

08007d30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	333c      	adds	r3, #60	@ 0x3c
 8007d48:	3304      	adds	r3, #4
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4a15      	ldr	r2, [pc, #84]	@ (8007db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d90e      	bls.n	8007d84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d009      	beq.n	8007d84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f009 ff29 	bl	8011bdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8007db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d90c      	bls.n	8007dac <PCD_EP_OutSetupPacket_int+0x7c>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d108      	bne.n	8007dac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007da4:	461a      	mov	r2, r3
 8007da6:	2101      	movs	r1, #1
 8007da8:	f006 ffa8 	bl	800ecfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	4f54300a 	.word	0x4f54300a

08007dbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d107      	bne.n	8007dea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007dda:	883b      	ldrh	r3, [r7, #0]
 8007ddc:	0419      	lsls	r1, r3, #16
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	629a      	str	r2, [r3, #40]	@ 0x28
 8007de8:	e028      	b.n	8007e3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df0:	0c1b      	lsrs	r3, r3, #16
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	4413      	add	r3, r2
 8007df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
 8007dfc:	e00d      	b.n	8007e1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	3340      	adds	r3, #64	@ 0x40
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	0c1b      	lsrs	r3, r3, #16
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	4413      	add	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	3301      	adds	r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]
 8007e1a:	7bfa      	ldrb	r2, [r7, #15]
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d3ec      	bcc.n	8007dfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007e24:	883b      	ldrh	r3, [r7, #0]
 8007e26:	0418      	lsls	r0, r3, #16
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6819      	ldr	r1, [r3, #0]
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	4302      	orrs	r2, r0
 8007e34:	3340      	adds	r3, #64	@ 0x40
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	887a      	ldrh	r2, [r7, #2]
 8007e5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e9a:	4b05      	ldr	r3, [pc, #20]	@ (8007eb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	10000003 	.word	0x10000003

08007eb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ed4:	4b19      	ldr	r3, [pc, #100]	@ (8007f3c <HAL_PWREx_ConfigSupply+0x70>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	d00a      	beq.n	8007ef6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ee0:	4b16      	ldr	r3, [pc, #88]	@ (8007f3c <HAL_PWREx_ConfigSupply+0x70>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d001      	beq.n	8007ef2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e01f      	b.n	8007f32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e01d      	b.n	8007f32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ef6:	4b11      	ldr	r3, [pc, #68]	@ (8007f3c <HAL_PWREx_ConfigSupply+0x70>)
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f023 0207 	bic.w	r2, r3, #7
 8007efe:	490f      	ldr	r1, [pc, #60]	@ (8007f3c <HAL_PWREx_ConfigSupply+0x70>)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007f06:	f7f9 fde7 	bl	8001ad8 <HAL_GetTick>
 8007f0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f0c:	e009      	b.n	8007f22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f0e:	f7f9 fde3 	bl	8001ad8 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f1c:	d901      	bls.n	8007f22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e007      	b.n	8007f32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f22:	4b06      	ldr	r3, [pc, #24]	@ (8007f3c <HAL_PWREx_ConfigSupply+0x70>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f2e:	d1ee      	bne.n	8007f0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	58024800 	.word	0x58024800

08007f40 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007f44:	4b05      	ldr	r3, [pc, #20]	@ (8007f5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	4a04      	ldr	r2, [pc, #16]	@ (8007f5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f4e:	60d3      	str	r3, [r2, #12]
}
 8007f50:	bf00      	nop
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	58024800 	.word	0x58024800

08007f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08c      	sub	sp, #48	@ 0x30
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f000 bc48 	b.w	8008804 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8088 	beq.w	8008092 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f82:	4b99      	ldr	r3, [pc, #612]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f8c:	4b96      	ldr	r3, [pc, #600]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d007      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x48>
 8007f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9a:	2b18      	cmp	r3, #24
 8007f9c:	d111      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x62>
 8007f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d10c      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fa8:	4b8f      	ldr	r3, [pc, #572]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d06d      	beq.n	8008090 <HAL_RCC_OscConfig+0x130>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d169      	bne.n	8008090 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f000 bc21 	b.w	8008804 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fca:	d106      	bne.n	8007fda <HAL_RCC_OscConfig+0x7a>
 8007fcc:	4b86      	ldr	r3, [pc, #536]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a85      	ldr	r2, [pc, #532]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8007fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	e02e      	b.n	8008038 <HAL_RCC_OscConfig+0xd8>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10c      	bne.n	8007ffc <HAL_RCC_OscConfig+0x9c>
 8007fe2:	4b81      	ldr	r3, [pc, #516]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a80      	ldr	r2, [pc, #512]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8007fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	4b7e      	ldr	r3, [pc, #504]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a7d      	ldr	r2, [pc, #500]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8007ff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e01d      	b.n	8008038 <HAL_RCC_OscConfig+0xd8>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008004:	d10c      	bne.n	8008020 <HAL_RCC_OscConfig+0xc0>
 8008006:	4b78      	ldr	r3, [pc, #480]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a77      	ldr	r2, [pc, #476]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 800800c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	4b75      	ldr	r3, [pc, #468]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a74      	ldr	r2, [pc, #464]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	e00b      	b.n	8008038 <HAL_RCC_OscConfig+0xd8>
 8008020:	4b71      	ldr	r3, [pc, #452]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a70      	ldr	r2, [pc, #448]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	4b6e      	ldr	r3, [pc, #440]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a6d      	ldr	r2, [pc, #436]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d013      	beq.n	8008068 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008040:	f7f9 fd4a 	bl	8001ad8 <HAL_GetTick>
 8008044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008046:	e008      	b.n	800805a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008048:	f7f9 fd46 	bl	8001ad8 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b64      	cmp	r3, #100	@ 0x64
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e3d4      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800805a:	4b63      	ldr	r3, [pc, #396]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0f0      	beq.n	8008048 <HAL_RCC_OscConfig+0xe8>
 8008066:	e014      	b.n	8008092 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008068:	f7f9 fd36 	bl	8001ad8 <HAL_GetTick>
 800806c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008070:	f7f9 fd32 	bl	8001ad8 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b64      	cmp	r3, #100	@ 0x64
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e3c0      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008082:	4b59      	ldr	r3, [pc, #356]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0x110>
 800808e:	e000      	b.n	8008092 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 80ca 	beq.w	8008234 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080a0:	4b51      	ldr	r3, [pc, #324]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080aa:	4b4f      	ldr	r3, [pc, #316]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80080ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <HAL_RCC_OscConfig+0x166>
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	2b18      	cmp	r3, #24
 80080ba:	d156      	bne.n	800816a <HAL_RCC_OscConfig+0x20a>
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d151      	bne.n	800816a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080c6:	4b48      	ldr	r3, [pc, #288]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <HAL_RCC_OscConfig+0x17e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e392      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080de:	4b42      	ldr	r3, [pc, #264]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f023 0219 	bic.w	r2, r3, #25
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	493f      	ldr	r1, [pc, #252]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f0:	f7f9 fcf2 	bl	8001ad8 <HAL_GetTick>
 80080f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080f8:	f7f9 fcee 	bl	8001ad8 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e37c      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800810a:	4b37      	ldr	r3, [pc, #220]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0304 	and.w	r3, r3, #4
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008116:	f7f9 fd0f 	bl	8001b38 <HAL_GetREVID>
 800811a:	4603      	mov	r3, r0
 800811c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008120:	4293      	cmp	r3, r2
 8008122:	d817      	bhi.n	8008154 <HAL_RCC_OscConfig+0x1f4>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b40      	cmp	r3, #64	@ 0x40
 800812a:	d108      	bne.n	800813e <HAL_RCC_OscConfig+0x1de>
 800812c:	4b2e      	ldr	r3, [pc, #184]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008134:	4a2c      	ldr	r2, [pc, #176]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800813a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800813c:	e07a      	b.n	8008234 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800813e:	4b2a      	ldr	r3, [pc, #168]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	031b      	lsls	r3, r3, #12
 800814c:	4926      	ldr	r1, [pc, #152]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 800814e:	4313      	orrs	r3, r2
 8008150:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008152:	e06f      	b.n	8008234 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008154:	4b24      	ldr	r3, [pc, #144]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	061b      	lsls	r3, r3, #24
 8008162:	4921      	ldr	r1, [pc, #132]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008164:	4313      	orrs	r3, r2
 8008166:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008168:	e064      	b.n	8008234 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d047      	beq.n	8008202 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008172:	4b1d      	ldr	r3, [pc, #116]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f023 0219 	bic.w	r2, r3, #25
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	491a      	ldr	r1, [pc, #104]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 8008180:	4313      	orrs	r3, r2
 8008182:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008184:	f7f9 fca8 	bl	8001ad8 <HAL_GetTick>
 8008188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800818c:	f7f9 fca4 	bl	8001ad8 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e332      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800819e:	4b12      	ldr	r3, [pc, #72]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f0      	beq.n	800818c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081aa:	f7f9 fcc5 	bl	8001b38 <HAL_GetREVID>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d819      	bhi.n	80081ec <HAL_RCC_OscConfig+0x28c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b40      	cmp	r3, #64	@ 0x40
 80081be:	d108      	bne.n	80081d2 <HAL_RCC_OscConfig+0x272>
 80081c0:	4b09      	ldr	r3, [pc, #36]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80081c8:	4a07      	ldr	r2, [pc, #28]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80081ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081ce:	6053      	str	r3, [r2, #4]
 80081d0:	e030      	b.n	8008234 <HAL_RCC_OscConfig+0x2d4>
 80081d2:	4b05      	ldr	r3, [pc, #20]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	031b      	lsls	r3, r3, #12
 80081e0:	4901      	ldr	r1, [pc, #4]	@ (80081e8 <HAL_RCC_OscConfig+0x288>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	604b      	str	r3, [r1, #4]
 80081e6:	e025      	b.n	8008234 <HAL_RCC_OscConfig+0x2d4>
 80081e8:	58024400 	.word	0x58024400
 80081ec:	4b9a      	ldr	r3, [pc, #616]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	061b      	lsls	r3, r3, #24
 80081fa:	4997      	ldr	r1, [pc, #604]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	604b      	str	r3, [r1, #4]
 8008200:	e018      	b.n	8008234 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008202:	4b95      	ldr	r3, [pc, #596]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a94      	ldr	r2, [pc, #592]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008208:	f023 0301 	bic.w	r3, r3, #1
 800820c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820e:	f7f9 fc63 	bl	8001ad8 <HAL_GetTick>
 8008212:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008214:	e008      	b.n	8008228 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008216:	f7f9 fc5f 	bl	8001ad8 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d901      	bls.n	8008228 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e2ed      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008228:	4b8b      	ldr	r3, [pc, #556]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f0      	bne.n	8008216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80a9 	beq.w	8008394 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008242:	4b85      	ldr	r3, [pc, #532]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800824a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800824c:	4b82      	ldr	r3, [pc, #520]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b08      	cmp	r3, #8
 8008256:	d007      	beq.n	8008268 <HAL_RCC_OscConfig+0x308>
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2b18      	cmp	r3, #24
 800825c:	d13a      	bne.n	80082d4 <HAL_RCC_OscConfig+0x374>
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	2b01      	cmp	r3, #1
 8008266:	d135      	bne.n	80082d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008268:	4b7b      	ldr	r3, [pc, #492]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_RCC_OscConfig+0x320>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	2b80      	cmp	r3, #128	@ 0x80
 800827a:	d001      	beq.n	8008280 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e2c1      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008280:	f7f9 fc5a 	bl	8001b38 <HAL_GetREVID>
 8008284:	4603      	mov	r3, r0
 8008286:	f241 0203 	movw	r2, #4099	@ 0x1003
 800828a:	4293      	cmp	r3, r2
 800828c:	d817      	bhi.n	80082be <HAL_RCC_OscConfig+0x35e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	2b20      	cmp	r3, #32
 8008294:	d108      	bne.n	80082a8 <HAL_RCC_OscConfig+0x348>
 8008296:	4b70      	ldr	r3, [pc, #448]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800829e:	4a6e      	ldr	r2, [pc, #440]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80082a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082a6:	e075      	b.n	8008394 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082a8:	4b6b      	ldr	r3, [pc, #428]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	069b      	lsls	r3, r3, #26
 80082b6:	4968      	ldr	r1, [pc, #416]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082bc:	e06a      	b.n	8008394 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082be:	4b66      	ldr	r3, [pc, #408]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	061b      	lsls	r3, r3, #24
 80082cc:	4962      	ldr	r1, [pc, #392]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082d2:	e05f      	b.n	8008394 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d042      	beq.n	8008362 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80082dc:	4b5e      	ldr	r3, [pc, #376]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a5d      	ldr	r2, [pc, #372]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80082e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e8:	f7f9 fbf6 	bl	8001ad8 <HAL_GetTick>
 80082ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082ee:	e008      	b.n	8008302 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082f0:	f7f9 fbf2 	bl	8001ad8 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e280      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008302:	4b55      	ldr	r3, [pc, #340]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0f0      	beq.n	80082f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800830e:	f7f9 fc13 	bl	8001b38 <HAL_GetREVID>
 8008312:	4603      	mov	r3, r0
 8008314:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008318:	4293      	cmp	r3, r2
 800831a:	d817      	bhi.n	800834c <HAL_RCC_OscConfig+0x3ec>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	2b20      	cmp	r3, #32
 8008322:	d108      	bne.n	8008336 <HAL_RCC_OscConfig+0x3d6>
 8008324:	4b4c      	ldr	r3, [pc, #304]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800832c:	4a4a      	ldr	r2, [pc, #296]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 800832e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008332:	6053      	str	r3, [r2, #4]
 8008334:	e02e      	b.n	8008394 <HAL_RCC_OscConfig+0x434>
 8008336:	4b48      	ldr	r3, [pc, #288]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	069b      	lsls	r3, r3, #26
 8008344:	4944      	ldr	r1, [pc, #272]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008346:	4313      	orrs	r3, r2
 8008348:	604b      	str	r3, [r1, #4]
 800834a:	e023      	b.n	8008394 <HAL_RCC_OscConfig+0x434>
 800834c:	4b42      	ldr	r3, [pc, #264]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	061b      	lsls	r3, r3, #24
 800835a:	493f      	ldr	r1, [pc, #252]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 800835c:	4313      	orrs	r3, r2
 800835e:	60cb      	str	r3, [r1, #12]
 8008360:	e018      	b.n	8008394 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008362:	4b3d      	ldr	r3, [pc, #244]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a3c      	ldr	r2, [pc, #240]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800836c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836e:	f7f9 fbb3 	bl	8001ad8 <HAL_GetTick>
 8008372:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008374:	e008      	b.n	8008388 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008376:	f7f9 fbaf 	bl	8001ad8 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d901      	bls.n	8008388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e23d      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008388:	4b33      	ldr	r3, [pc, #204]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f0      	bne.n	8008376 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b00      	cmp	r3, #0
 800839e:	d036      	beq.n	800840e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d019      	beq.n	80083dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80083aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80083ae:	f043 0301 	orr.w	r3, r3, #1
 80083b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b4:	f7f9 fb90 	bl	8001ad8 <HAL_GetTick>
 80083b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083ba:	e008      	b.n	80083ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083bc:	f7f9 fb8c 	bl	8001ad8 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e21a      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083ce:	4b22      	ldr	r3, [pc, #136]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80083d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0f0      	beq.n	80083bc <HAL_RCC_OscConfig+0x45c>
 80083da:	e018      	b.n	800840e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083dc:	4b1e      	ldr	r3, [pc, #120]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80083de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 80083e2:	f023 0301 	bic.w	r3, r3, #1
 80083e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083e8:	f7f9 fb76 	bl	8001ad8 <HAL_GetTick>
 80083ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083ee:	e008      	b.n	8008402 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083f0:	f7f9 fb72 	bl	8001ad8 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d901      	bls.n	8008402 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e200      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008402:	4b15      	ldr	r3, [pc, #84]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1f0      	bne.n	80083f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d039      	beq.n	800848e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01c      	beq.n	800845c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008422:	4b0d      	ldr	r3, [pc, #52]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a0c      	ldr	r2, [pc, #48]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 8008428:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800842c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800842e:	f7f9 fb53 	bl	8001ad8 <HAL_GetTick>
 8008432:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008434:	e008      	b.n	8008448 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008436:	f7f9 fb4f 	bl	8001ad8 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e1dd      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008448:	4b03      	ldr	r3, [pc, #12]	@ (8008458 <HAL_RCC_OscConfig+0x4f8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <HAL_RCC_OscConfig+0x4d6>
 8008454:	e01b      	b.n	800848e <HAL_RCC_OscConfig+0x52e>
 8008456:	bf00      	nop
 8008458:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800845c:	4b9b      	ldr	r3, [pc, #620]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a9a      	ldr	r2, [pc, #616]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008462:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008466:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008468:	f7f9 fb36 	bl	8001ad8 <HAL_GetTick>
 800846c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800846e:	e008      	b.n	8008482 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008470:	f7f9 fb32 	bl	8001ad8 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b02      	cmp	r3, #2
 800847c:	d901      	bls.n	8008482 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e1c0      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008482:	4b92      	ldr	r3, [pc, #584]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f0      	bne.n	8008470 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0304 	and.w	r3, r3, #4
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 8081 	beq.w	800859e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800849c:	4b8c      	ldr	r3, [pc, #560]	@ (80086d0 <HAL_RCC_OscConfig+0x770>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a8b      	ldr	r2, [pc, #556]	@ (80086d0 <HAL_RCC_OscConfig+0x770>)
 80084a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084a8:	f7f9 fb16 	bl	8001ad8 <HAL_GetTick>
 80084ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084b0:	f7f9 fb12 	bl	8001ad8 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b64      	cmp	r3, #100	@ 0x64
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e1a0      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084c2:	4b83      	ldr	r3, [pc, #524]	@ (80086d0 <HAL_RCC_OscConfig+0x770>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0f0      	beq.n	80084b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d106      	bne.n	80084e4 <HAL_RCC_OscConfig+0x584>
 80084d6:	4b7d      	ldr	r3, [pc, #500]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80084d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084da:	4a7c      	ldr	r2, [pc, #496]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80084dc:	f043 0301 	orr.w	r3, r3, #1
 80084e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80084e2:	e02d      	b.n	8008540 <HAL_RCC_OscConfig+0x5e0>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10c      	bne.n	8008506 <HAL_RCC_OscConfig+0x5a6>
 80084ec:	4b77      	ldr	r3, [pc, #476]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80084ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084f0:	4a76      	ldr	r2, [pc, #472]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80084f2:	f023 0301 	bic.w	r3, r3, #1
 80084f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80084f8:	4b74      	ldr	r3, [pc, #464]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80084fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084fc:	4a73      	ldr	r2, [pc, #460]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80084fe:	f023 0304 	bic.w	r3, r3, #4
 8008502:	6713      	str	r3, [r2, #112]	@ 0x70
 8008504:	e01c      	b.n	8008540 <HAL_RCC_OscConfig+0x5e0>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	2b05      	cmp	r3, #5
 800850c:	d10c      	bne.n	8008528 <HAL_RCC_OscConfig+0x5c8>
 800850e:	4b6f      	ldr	r3, [pc, #444]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008512:	4a6e      	ldr	r2, [pc, #440]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008514:	f043 0304 	orr.w	r3, r3, #4
 8008518:	6713      	str	r3, [r2, #112]	@ 0x70
 800851a:	4b6c      	ldr	r3, [pc, #432]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 800851c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800851e:	4a6b      	ldr	r2, [pc, #428]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	6713      	str	r3, [r2, #112]	@ 0x70
 8008526:	e00b      	b.n	8008540 <HAL_RCC_OscConfig+0x5e0>
 8008528:	4b68      	ldr	r3, [pc, #416]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 800852a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800852c:	4a67      	ldr	r2, [pc, #412]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 800852e:	f023 0301 	bic.w	r3, r3, #1
 8008532:	6713      	str	r3, [r2, #112]	@ 0x70
 8008534:	4b65      	ldr	r3, [pc, #404]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008538:	4a64      	ldr	r2, [pc, #400]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 800853a:	f023 0304 	bic.w	r3, r3, #4
 800853e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d015      	beq.n	8008574 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008548:	f7f9 fac6 	bl	8001ad8 <HAL_GetTick>
 800854c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800854e:	e00a      	b.n	8008566 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008550:	f7f9 fac2 	bl	8001ad8 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800855e:	4293      	cmp	r3, r2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e14e      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008566:	4b59      	ldr	r3, [pc, #356]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0ee      	beq.n	8008550 <HAL_RCC_OscConfig+0x5f0>
 8008572:	e014      	b.n	800859e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008574:	f7f9 fab0 	bl	8001ad8 <HAL_GetTick>
 8008578:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800857a:	e00a      	b.n	8008592 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800857c:	f7f9 faac 	bl	8001ad8 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800858a:	4293      	cmp	r3, r2
 800858c:	d901      	bls.n	8008592 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e138      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008592:	4b4e      	ldr	r3, [pc, #312]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1ee      	bne.n	800857c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 812d 	beq.w	8008802 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80085a8:	4b48      	ldr	r3, [pc, #288]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085b0:	2b18      	cmp	r3, #24
 80085b2:	f000 80bd 	beq.w	8008730 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	f040 809e 	bne.w	80086fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085c0:	4b42      	ldr	r3, [pc, #264]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a41      	ldr	r2, [pc, #260]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80085c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085cc:	f7f9 fa84 	bl	8001ad8 <HAL_GetTick>
 80085d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085d4:	f7f9 fa80 	bl	8001ad8 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e10e      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085e6:	4b39      	ldr	r3, [pc, #228]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1f0      	bne.n	80085d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085f2:	4b36      	ldr	r3, [pc, #216]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80085f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085f6:	4b37      	ldr	r3, [pc, #220]	@ (80086d4 <HAL_RCC_OscConfig+0x774>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008602:	0112      	lsls	r2, r2, #4
 8008604:	430a      	orrs	r2, r1
 8008606:	4931      	ldr	r1, [pc, #196]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008608:	4313      	orrs	r3, r2
 800860a:	628b      	str	r3, [r1, #40]	@ 0x28
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008610:	3b01      	subs	r3, #1
 8008612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800861a:	3b01      	subs	r3, #1
 800861c:	025b      	lsls	r3, r3, #9
 800861e:	b29b      	uxth	r3, r3
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008626:	3b01      	subs	r3, #1
 8008628:	041b      	lsls	r3, r3, #16
 800862a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008634:	3b01      	subs	r3, #1
 8008636:	061b      	lsls	r3, r3, #24
 8008638:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800863c:	4923      	ldr	r1, [pc, #140]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 800863e:	4313      	orrs	r3, r2
 8008640:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008642:	4b22      	ldr	r3, [pc, #136]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008646:	4a21      	ldr	r2, [pc, #132]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800864e:	4b1f      	ldr	r3, [pc, #124]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008652:	4b21      	ldr	r3, [pc, #132]	@ (80086d8 <HAL_RCC_OscConfig+0x778>)
 8008654:	4013      	ands	r3, r2
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800865a:	00d2      	lsls	r2, r2, #3
 800865c:	491b      	ldr	r1, [pc, #108]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 800865e:	4313      	orrs	r3, r2
 8008660:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008662:	4b1a      	ldr	r3, [pc, #104]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008666:	f023 020c 	bic.w	r2, r3, #12
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866e:	4917      	ldr	r1, [pc, #92]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008670:	4313      	orrs	r3, r2
 8008672:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008674:	4b15      	ldr	r3, [pc, #84]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008678:	f023 0202 	bic.w	r2, r3, #2
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008680:	4912      	ldr	r1, [pc, #72]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008682:	4313      	orrs	r3, r2
 8008684:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008686:	4b11      	ldr	r3, [pc, #68]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	4a10      	ldr	r2, [pc, #64]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 800868c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008690:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008692:	4b0e      	ldr	r3, [pc, #56]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008696:	4a0d      	ldr	r2, [pc, #52]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 8008698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800869c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800869e:	4b0b      	ldr	r3, [pc, #44]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80086a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a2:	4a0a      	ldr	r2, [pc, #40]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80086a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80086aa:	4b08      	ldr	r3, [pc, #32]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80086ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ae:	4a07      	ldr	r2, [pc, #28]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80086b0:	f043 0301 	orr.w	r3, r3, #1
 80086b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086b6:	4b05      	ldr	r3, [pc, #20]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a04      	ldr	r2, [pc, #16]	@ (80086cc <HAL_RCC_OscConfig+0x76c>)
 80086bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80086c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c2:	f7f9 fa09 	bl	8001ad8 <HAL_GetTick>
 80086c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086c8:	e011      	b.n	80086ee <HAL_RCC_OscConfig+0x78e>
 80086ca:	bf00      	nop
 80086cc:	58024400 	.word	0x58024400
 80086d0:	58024800 	.word	0x58024800
 80086d4:	fffffc0c 	.word	0xfffffc0c
 80086d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086dc:	f7f9 f9fc 	bl	8001ad8 <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d901      	bls.n	80086ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e08a      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086ee:	4b47      	ldr	r3, [pc, #284]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0f0      	beq.n	80086dc <HAL_RCC_OscConfig+0x77c>
 80086fa:	e082      	b.n	8008802 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086fc:	4b43      	ldr	r3, [pc, #268]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a42      	ldr	r2, [pc, #264]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 8008702:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008708:	f7f9 f9e6 	bl	8001ad8 <HAL_GetTick>
 800870c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008710:	f7f9 f9e2 	bl	8001ad8 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e070      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008722:	4b3a      	ldr	r3, [pc, #232]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1f0      	bne.n	8008710 <HAL_RCC_OscConfig+0x7b0>
 800872e:	e068      	b.n	8008802 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008730:	4b36      	ldr	r3, [pc, #216]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 8008732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008734:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008736:	4b35      	ldr	r3, [pc, #212]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800873a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008740:	2b01      	cmp	r3, #1
 8008742:	d031      	beq.n	80087a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f003 0203 	and.w	r2, r3, #3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800874e:	429a      	cmp	r2, r3
 8008750:	d12a      	bne.n	80087a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	091b      	lsrs	r3, r3, #4
 8008756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800875e:	429a      	cmp	r2, r3
 8008760:	d122      	bne.n	80087a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800876e:	429a      	cmp	r2, r3
 8008770:	d11a      	bne.n	80087a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	0a5b      	lsrs	r3, r3, #9
 8008776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800877e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008780:	429a      	cmp	r2, r3
 8008782:	d111      	bne.n	80087a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	0c1b      	lsrs	r3, r3, #16
 8008788:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008790:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008792:	429a      	cmp	r2, r3
 8008794:	d108      	bne.n	80087a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	0e1b      	lsrs	r3, r3, #24
 800879a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d001      	beq.n	80087ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e02b      	b.n	8008804 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80087ac:	4b17      	ldr	r3, [pc, #92]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 80087ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087b0:	08db      	lsrs	r3, r3, #3
 80087b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d01f      	beq.n	8008802 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80087c2:	4b12      	ldr	r3, [pc, #72]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c6:	4a11      	ldr	r2, [pc, #68]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 80087c8:	f023 0301 	bic.w	r3, r3, #1
 80087cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087ce:	f7f9 f983 	bl	8001ad8 <HAL_GetTick>
 80087d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80087d4:	bf00      	nop
 80087d6:	f7f9 f97f 	bl	8001ad8 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	4293      	cmp	r3, r2
 80087e0:	d0f9      	beq.n	80087d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80087e2:	4b0a      	ldr	r3, [pc, #40]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 80087e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008810 <HAL_RCC_OscConfig+0x8b0>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80087ee:	00d2      	lsls	r2, r2, #3
 80087f0:	4906      	ldr	r1, [pc, #24]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80087f6:	4b05      	ldr	r3, [pc, #20]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 80087f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fa:	4a04      	ldr	r2, [pc, #16]	@ (800880c <HAL_RCC_OscConfig+0x8ac>)
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3730      	adds	r7, #48	@ 0x30
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	58024400 	.word	0x58024400
 8008810:	ffff0007 	.word	0xffff0007

08008814 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e19c      	b.n	8008b62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008828:	4b8a      	ldr	r3, [pc, #552]	@ (8008a54 <HAL_RCC_ClockConfig+0x240>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 030f 	and.w	r3, r3, #15
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d910      	bls.n	8008858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008836:	4b87      	ldr	r3, [pc, #540]	@ (8008a54 <HAL_RCC_ClockConfig+0x240>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f023 020f 	bic.w	r2, r3, #15
 800883e:	4985      	ldr	r1, [pc, #532]	@ (8008a54 <HAL_RCC_ClockConfig+0x240>)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	4313      	orrs	r3, r2
 8008844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008846:	4b83      	ldr	r3, [pc, #524]	@ (8008a54 <HAL_RCC_ClockConfig+0x240>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	429a      	cmp	r2, r3
 8008852:	d001      	beq.n	8008858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e184      	b.n	8008b62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d010      	beq.n	8008886 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	4b7b      	ldr	r3, [pc, #492]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008870:	429a      	cmp	r2, r3
 8008872:	d908      	bls.n	8008886 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008874:	4b78      	ldr	r3, [pc, #480]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	4975      	ldr	r1, [pc, #468]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008882:	4313      	orrs	r3, r2
 8008884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d010      	beq.n	80088b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	695a      	ldr	r2, [r3, #20]
 8008896:	4b70      	ldr	r3, [pc, #448]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800889e:	429a      	cmp	r2, r3
 80088a0:	d908      	bls.n	80088b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088a2:	4b6d      	ldr	r3, [pc, #436]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	496a      	ldr	r1, [pc, #424]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d010      	beq.n	80088e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699a      	ldr	r2, [r3, #24]
 80088c4:	4b64      	ldr	r3, [pc, #400]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d908      	bls.n	80088e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088d0:	4b61      	ldr	r3, [pc, #388]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	495e      	ldr	r1, [pc, #376]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0320 	and.w	r3, r3, #32
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d010      	beq.n	8008910 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	69da      	ldr	r2, [r3, #28]
 80088f2:	4b59      	ldr	r3, [pc, #356]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d908      	bls.n	8008910 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80088fe:	4b56      	ldr	r3, [pc, #344]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	4953      	ldr	r1, [pc, #332]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 800890c:	4313      	orrs	r3, r2
 800890e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d010      	beq.n	800893e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	4b4d      	ldr	r3, [pc, #308]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	f003 030f 	and.w	r3, r3, #15
 8008928:	429a      	cmp	r2, r3
 800892a:	d908      	bls.n	800893e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800892c:	4b4a      	ldr	r3, [pc, #296]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f023 020f 	bic.w	r2, r3, #15
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	4947      	ldr	r1, [pc, #284]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 800893a:	4313      	orrs	r3, r2
 800893c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d055      	beq.n	80089f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800894a:	4b43      	ldr	r3, [pc, #268]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	4940      	ldr	r1, [pc, #256]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008958:	4313      	orrs	r3, r2
 800895a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	2b02      	cmp	r3, #2
 8008962:	d107      	bne.n	8008974 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008964:	4b3c      	ldr	r3, [pc, #240]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d121      	bne.n	80089b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e0f6      	b.n	8008b62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2b03      	cmp	r3, #3
 800897a:	d107      	bne.n	800898c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800897c:	4b36      	ldr	r3, [pc, #216]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d115      	bne.n	80089b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e0ea      	b.n	8008b62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d107      	bne.n	80089a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008994:	4b30      	ldr	r3, [pc, #192]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800899c:	2b00      	cmp	r3, #0
 800899e:	d109      	bne.n	80089b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0de      	b.n	8008b62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089a4:	4b2c      	ldr	r3, [pc, #176]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0d6      	b.n	8008b62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089b4:	4b28      	ldr	r3, [pc, #160]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	f023 0207 	bic.w	r2, r3, #7
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4925      	ldr	r1, [pc, #148]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089c6:	f7f9 f887 	bl	8001ad8 <HAL_GetTick>
 80089ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089cc:	e00a      	b.n	80089e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089ce:	f7f9 f883 	bl	8001ad8 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089dc:	4293      	cmp	r3, r2
 80089de:	d901      	bls.n	80089e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e0be      	b.n	8008b62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d1eb      	bne.n	80089ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d010      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	4b14      	ldr	r3, [pc, #80]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f003 030f 	and.w	r3, r3, #15
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d208      	bcs.n	8008a24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a12:	4b11      	ldr	r3, [pc, #68]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	f023 020f 	bic.w	r2, r3, #15
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	490e      	ldr	r1, [pc, #56]	@ (8008a58 <HAL_RCC_ClockConfig+0x244>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a24:	4b0b      	ldr	r3, [pc, #44]	@ (8008a54 <HAL_RCC_ClockConfig+0x240>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 030f 	and.w	r3, r3, #15
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d214      	bcs.n	8008a5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a32:	4b08      	ldr	r3, [pc, #32]	@ (8008a54 <HAL_RCC_ClockConfig+0x240>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f023 020f 	bic.w	r2, r3, #15
 8008a3a:	4906      	ldr	r1, [pc, #24]	@ (8008a54 <HAL_RCC_ClockConfig+0x240>)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a42:	4b04      	ldr	r3, [pc, #16]	@ (8008a54 <HAL_RCC_ClockConfig+0x240>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d005      	beq.n	8008a5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e086      	b.n	8008b62 <HAL_RCC_ClockConfig+0x34e>
 8008a54:	52002000 	.word	0x52002000
 8008a58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d010      	beq.n	8008a8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	4b3f      	ldr	r3, [pc, #252]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d208      	bcs.n	8008a8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a78:	4b3c      	ldr	r3, [pc, #240]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	4939      	ldr	r1, [pc, #228]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0308 	and.w	r3, r3, #8
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d010      	beq.n	8008ab8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695a      	ldr	r2, [r3, #20]
 8008a9a:	4b34      	ldr	r3, [pc, #208]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d208      	bcs.n	8008ab8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008aa6:	4b31      	ldr	r3, [pc, #196]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	492e      	ldr	r1, [pc, #184]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0310 	and.w	r3, r3, #16
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d010      	beq.n	8008ae6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	699a      	ldr	r2, [r3, #24]
 8008ac8:	4b28      	ldr	r3, [pc, #160]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d208      	bcs.n	8008ae6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ad4:	4b25      	ldr	r3, [pc, #148]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	4922      	ldr	r1, [pc, #136]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0320 	and.w	r3, r3, #32
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d010      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	69da      	ldr	r2, [r3, #28]
 8008af6:	4b1d      	ldr	r3, [pc, #116]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d208      	bcs.n	8008b14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b02:	4b1a      	ldr	r3, [pc, #104]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	4917      	ldr	r1, [pc, #92]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b14:	f000 f834 	bl	8008b80 <HAL_RCC_GetSysClockFreq>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	4b14      	ldr	r3, [pc, #80]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	0a1b      	lsrs	r3, r3, #8
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	4912      	ldr	r1, [pc, #72]	@ (8008b70 <HAL_RCC_ClockConfig+0x35c>)
 8008b26:	5ccb      	ldrb	r3, [r1, r3]
 8008b28:	f003 031f 	and.w	r3, r3, #31
 8008b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b32:	4b0e      	ldr	r3, [pc, #56]	@ (8008b6c <HAL_RCC_ClockConfig+0x358>)
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8008b70 <HAL_RCC_ClockConfig+0x35c>)
 8008b3c:	5cd3      	ldrb	r3, [r2, r3]
 8008b3e:	f003 031f 	and.w	r3, r3, #31
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	fa22 f303 	lsr.w	r3, r2, r3
 8008b48:	4a0a      	ldr	r2, [pc, #40]	@ (8008b74 <HAL_RCC_ClockConfig+0x360>)
 8008b4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b78 <HAL_RCC_ClockConfig+0x364>)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008b52:	4b0a      	ldr	r3, [pc, #40]	@ (8008b7c <HAL_RCC_ClockConfig+0x368>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f8 fba8 	bl	80012ac <HAL_InitTick>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3718      	adds	r7, #24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	58024400 	.word	0x58024400
 8008b70:	080150cc 	.word	0x080150cc
 8008b74:	24000008 	.word	0x24000008
 8008b78:	24000004 	.word	0x24000004
 8008b7c:	2400000c 	.word	0x2400000c

08008b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b089      	sub	sp, #36	@ 0x24
 8008b84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b86:	4bb3      	ldr	r3, [pc, #716]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b8e:	2b18      	cmp	r3, #24
 8008b90:	f200 8155 	bhi.w	8008e3e <HAL_RCC_GetSysClockFreq+0x2be>
 8008b94:	a201      	add	r2, pc, #4	@ (adr r2, 8008b9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9a:	bf00      	nop
 8008b9c:	08008c01 	.word	0x08008c01
 8008ba0:	08008e3f 	.word	0x08008e3f
 8008ba4:	08008e3f 	.word	0x08008e3f
 8008ba8:	08008e3f 	.word	0x08008e3f
 8008bac:	08008e3f 	.word	0x08008e3f
 8008bb0:	08008e3f 	.word	0x08008e3f
 8008bb4:	08008e3f 	.word	0x08008e3f
 8008bb8:	08008e3f 	.word	0x08008e3f
 8008bbc:	08008c27 	.word	0x08008c27
 8008bc0:	08008e3f 	.word	0x08008e3f
 8008bc4:	08008e3f 	.word	0x08008e3f
 8008bc8:	08008e3f 	.word	0x08008e3f
 8008bcc:	08008e3f 	.word	0x08008e3f
 8008bd0:	08008e3f 	.word	0x08008e3f
 8008bd4:	08008e3f 	.word	0x08008e3f
 8008bd8:	08008e3f 	.word	0x08008e3f
 8008bdc:	08008c2d 	.word	0x08008c2d
 8008be0:	08008e3f 	.word	0x08008e3f
 8008be4:	08008e3f 	.word	0x08008e3f
 8008be8:	08008e3f 	.word	0x08008e3f
 8008bec:	08008e3f 	.word	0x08008e3f
 8008bf0:	08008e3f 	.word	0x08008e3f
 8008bf4:	08008e3f 	.word	0x08008e3f
 8008bf8:	08008e3f 	.word	0x08008e3f
 8008bfc:	08008c33 	.word	0x08008c33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c00:	4b94      	ldr	r3, [pc, #592]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d009      	beq.n	8008c20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c0c:	4b91      	ldr	r3, [pc, #580]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	08db      	lsrs	r3, r3, #3
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	4a90      	ldr	r2, [pc, #576]	@ (8008e58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c18:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008c1e:	e111      	b.n	8008e44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c20:	4b8d      	ldr	r3, [pc, #564]	@ (8008e58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c22:	61bb      	str	r3, [r7, #24]
      break;
 8008c24:	e10e      	b.n	8008e44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008c26:	4b8d      	ldr	r3, [pc, #564]	@ (8008e5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c28:	61bb      	str	r3, [r7, #24]
      break;
 8008c2a:	e10b      	b.n	8008e44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008c2c:	4b8c      	ldr	r3, [pc, #560]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c2e:	61bb      	str	r3, [r7, #24]
      break;
 8008c30:	e108      	b.n	8008e44 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c32:	4b88      	ldr	r3, [pc, #544]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c36:	f003 0303 	and.w	r3, r3, #3
 8008c3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008c3c:	4b85      	ldr	r3, [pc, #532]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c40:	091b      	lsrs	r3, r3, #4
 8008c42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c48:	4b82      	ldr	r3, [pc, #520]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c52:	4b80      	ldr	r3, [pc, #512]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c56:	08db      	lsrs	r3, r3, #3
 8008c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	fb02 f303 	mul.w	r3, r2, r3
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 80e1 	beq.w	8008e38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	f000 8083 	beq.w	8008d84 <HAL_RCC_GetSysClockFreq+0x204>
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	f200 80a1 	bhi.w	8008dc8 <HAL_RCC_GetSysClockFreq+0x248>
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <HAL_RCC_GetSysClockFreq+0x114>
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d056      	beq.n	8008d40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c92:	e099      	b.n	8008dc8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c94:	4b6f      	ldr	r3, [pc, #444]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d02d      	beq.n	8008cfc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	08db      	lsrs	r3, r3, #3
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	4a6b      	ldr	r2, [pc, #428]	@ (8008e58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cac:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	ee07 3a90 	vmov	s15, r3
 8008cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cca:	4b62      	ldr	r3, [pc, #392]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cde:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008cfa:	e087      	b.n	8008e0c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008e68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0e:	4b51      	ldr	r3, [pc, #324]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d22:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d3e:	e065      	b.n	8008e0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008e6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d52:	4b40      	ldr	r3, [pc, #256]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d66:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d82:	e043      	b.n	8008e0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008e70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d96:	4b2f      	ldr	r3, [pc, #188]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008daa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008dc6:	e021      	b.n	8008e0c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008e6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dda:	4b1e      	ldr	r3, [pc, #120]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e0a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008e0c:	4b11      	ldr	r3, [pc, #68]	@ (8008e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e10:	0a5b      	lsrs	r3, r3, #9
 8008e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e16:	3301      	adds	r3, #1
 8008e18:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	ee07 3a90 	vmov	s15, r3
 8008e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e30:	ee17 3a90 	vmov	r3, s15
 8008e34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008e36:	e005      	b.n	8008e44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61bb      	str	r3, [r7, #24]
      break;
 8008e3c:	e002      	b.n	8008e44 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008e3e:	4b07      	ldr	r3, [pc, #28]	@ (8008e5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e40:	61bb      	str	r3, [r7, #24]
      break;
 8008e42:	bf00      	nop
  }

  return sysclockfreq;
 8008e44:	69bb      	ldr	r3, [r7, #24]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3724      	adds	r7, #36	@ 0x24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	58024400 	.word	0x58024400
 8008e58:	03d09000 	.word	0x03d09000
 8008e5c:	003d0900 	.word	0x003d0900
 8008e60:	017d7840 	.word	0x017d7840
 8008e64:	46000000 	.word	0x46000000
 8008e68:	4c742400 	.word	0x4c742400
 8008e6c:	4a742400 	.word	0x4a742400
 8008e70:	4bbebc20 	.word	0x4bbebc20

08008e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e7a:	f7ff fe81 	bl	8008b80 <HAL_RCC_GetSysClockFreq>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	4b10      	ldr	r3, [pc, #64]	@ (8008ec4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	0a1b      	lsrs	r3, r3, #8
 8008e86:	f003 030f 	and.w	r3, r3, #15
 8008e8a:	490f      	ldr	r1, [pc, #60]	@ (8008ec8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e8c:	5ccb      	ldrb	r3, [r1, r3]
 8008e8e:	f003 031f 	and.w	r3, r3, #31
 8008e92:	fa22 f303 	lsr.w	r3, r2, r3
 8008e96:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e98:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	f003 030f 	and.w	r3, r3, #15
 8008ea0:	4a09      	ldr	r2, [pc, #36]	@ (8008ec8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ea2:	5cd3      	ldrb	r3, [r2, r3]
 8008ea4:	f003 031f 	and.w	r3, r3, #31
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008eae:	4a07      	ldr	r2, [pc, #28]	@ (8008ecc <HAL_RCC_GetHCLKFreq+0x58>)
 8008eb0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008eb2:	4a07      	ldr	r2, [pc, #28]	@ (8008ed0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008eb8:	4b04      	ldr	r3, [pc, #16]	@ (8008ecc <HAL_RCC_GetHCLKFreq+0x58>)
 8008eba:	681b      	ldr	r3, [r3, #0]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	080150cc 	.word	0x080150cc
 8008ecc:	24000008 	.word	0x24000008
 8008ed0:	24000004 	.word	0x24000004

08008ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ed8:	f7ff ffcc 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 8008edc:	4602      	mov	r2, r0
 8008ede:	4b06      	ldr	r3, [pc, #24]	@ (8008ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	091b      	lsrs	r3, r3, #4
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	4904      	ldr	r1, [pc, #16]	@ (8008efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008eea:	5ccb      	ldrb	r3, [r1, r3]
 8008eec:	f003 031f 	and.w	r3, r3, #31
 8008ef0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	58024400 	.word	0x58024400
 8008efc:	080150cc 	.word	0x080150cc

08008f00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	223f      	movs	r2, #63	@ 0x3f
 8008f0e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f10:	4b1a      	ldr	r3, [pc, #104]	@ (8008f7c <HAL_RCC_GetClockConfig+0x7c>)
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	f003 0207 	and.w	r2, r3, #7
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008f1c:	4b17      	ldr	r3, [pc, #92]	@ (8008f7c <HAL_RCC_GetClockConfig+0x7c>)
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008f28:	4b14      	ldr	r3, [pc, #80]	@ (8008f7c <HAL_RCC_GetClockConfig+0x7c>)
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	f003 020f 	and.w	r2, r3, #15
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008f34:	4b11      	ldr	r3, [pc, #68]	@ (8008f7c <HAL_RCC_GetClockConfig+0x7c>)
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008f40:	4b0e      	ldr	r3, [pc, #56]	@ (8008f7c <HAL_RCC_GetClockConfig+0x7c>)
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <HAL_RCC_GetClockConfig+0x7c>)
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008f58:	4b08      	ldr	r3, [pc, #32]	@ (8008f7c <HAL_RCC_GetClockConfig+0x7c>)
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f64:	4b06      	ldr	r3, [pc, #24]	@ (8008f80 <HAL_RCC_GetClockConfig+0x80>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 020f 	and.w	r2, r3, #15
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	601a      	str	r2, [r3, #0]
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	52002000 	.word	0x52002000

08008f84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f88:	b0ca      	sub	sp, #296	@ 0x128
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f90:	2300      	movs	r3, #0
 8008f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f96:	2300      	movs	r3, #0
 8008f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008fa8:	2500      	movs	r5, #0
 8008faa:	ea54 0305 	orrs.w	r3, r4, r5
 8008fae:	d049      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fba:	d02f      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008fbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fc0:	d828      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fc6:	d01a      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fcc:	d822      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fd6:	d007      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008fd8:	e01c      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fda:	4bb8      	ldr	r3, [pc, #736]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fde:	4ab7      	ldr	r2, [pc, #732]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008fe6:	e01a      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fec:	3308      	adds	r3, #8
 8008fee:	2102      	movs	r1, #2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f002 fb61 	bl	800b6b8 <RCCEx_PLL2_Config>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ffc:	e00f      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009002:	3328      	adds	r3, #40	@ 0x28
 8009004:	2102      	movs	r1, #2
 8009006:	4618      	mov	r0, r3
 8009008:	f002 fc08 	bl	800b81c <RCCEx_PLL3_Config>
 800900c:	4603      	mov	r3, r0
 800900e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009012:	e004      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800901a:	e000      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800901c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10a      	bne.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009026:	4ba5      	ldr	r3, [pc, #660]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800902a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800902e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009034:	4aa1      	ldr	r2, [pc, #644]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009036:	430b      	orrs	r3, r1
 8009038:	6513      	str	r3, [r2, #80]	@ 0x50
 800903a:	e003      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009050:	f04f 0900 	mov.w	r9, #0
 8009054:	ea58 0309 	orrs.w	r3, r8, r9
 8009058:	d047      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800905a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009060:	2b04      	cmp	r3, #4
 8009062:	d82a      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009064:	a201      	add	r2, pc, #4	@ (adr r2, 800906c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906a:	bf00      	nop
 800906c:	08009081 	.word	0x08009081
 8009070:	0800908f 	.word	0x0800908f
 8009074:	080090a5 	.word	0x080090a5
 8009078:	080090c3 	.word	0x080090c3
 800907c:	080090c3 	.word	0x080090c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009080:	4b8e      	ldr	r3, [pc, #568]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009084:	4a8d      	ldr	r2, [pc, #564]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800908a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800908c:	e01a      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800908e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009092:	3308      	adds	r3, #8
 8009094:	2100      	movs	r1, #0
 8009096:	4618      	mov	r0, r3
 8009098:	f002 fb0e 	bl	800b6b8 <RCCEx_PLL2_Config>
 800909c:	4603      	mov	r3, r0
 800909e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090a2:	e00f      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a8:	3328      	adds	r3, #40	@ 0x28
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f002 fbb5 	bl	800b81c <RCCEx_PLL3_Config>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090b8:	e004      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090c0:	e000      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80090c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10a      	bne.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090cc:	4b7b      	ldr	r3, [pc, #492]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d0:	f023 0107 	bic.w	r1, r3, #7
 80090d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090da:	4a78      	ldr	r2, [pc, #480]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090dc:	430b      	orrs	r3, r1
 80090de:	6513      	str	r3, [r2, #80]	@ 0x50
 80090e0:	e003      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80090f6:	f04f 0b00 	mov.w	fp, #0
 80090fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80090fe:	d04c      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800910a:	d030      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800910c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009110:	d829      	bhi.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009112:	2bc0      	cmp	r3, #192	@ 0xc0
 8009114:	d02d      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009116:	2bc0      	cmp	r3, #192	@ 0xc0
 8009118:	d825      	bhi.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800911a:	2b80      	cmp	r3, #128	@ 0x80
 800911c:	d018      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800911e:	2b80      	cmp	r3, #128	@ 0x80
 8009120:	d821      	bhi.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009126:	2b40      	cmp	r3, #64	@ 0x40
 8009128:	d007      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800912a:	e01c      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800912c:	4b63      	ldr	r3, [pc, #396]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800912e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009130:	4a62      	ldr	r2, [pc, #392]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009138:	e01c      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913e:	3308      	adds	r3, #8
 8009140:	2100      	movs	r1, #0
 8009142:	4618      	mov	r0, r3
 8009144:	f002 fab8 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800914e:	e011      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009154:	3328      	adds	r3, #40	@ 0x28
 8009156:	2100      	movs	r1, #0
 8009158:	4618      	mov	r0, r3
 800915a:	f002 fb5f 	bl	800b81c <RCCEx_PLL3_Config>
 800915e:	4603      	mov	r3, r0
 8009160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009164:	e006      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800916c:	e002      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800916e:	bf00      	nop
 8009170:	e000      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800917c:	4b4f      	ldr	r3, [pc, #316]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800917e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009180:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800918a:	4a4c      	ldr	r2, [pc, #304]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800918c:	430b      	orrs	r3, r1
 800918e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009190:	e003      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80091a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80091aa:	2300      	movs	r3, #0
 80091ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80091b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80091b4:	460b      	mov	r3, r1
 80091b6:	4313      	orrs	r3, r2
 80091b8:	d053      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80091ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091c6:	d035      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80091c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091cc:	d82e      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80091d2:	d031      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80091d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80091d8:	d828      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091de:	d01a      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80091e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091e4:	d822      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80091ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091ee:	d007      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80091f0:	e01c      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f2:	4b32      	ldr	r3, [pc, #200]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f6:	4a31      	ldr	r2, [pc, #196]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091fe:	e01c      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009204:	3308      	adds	r3, #8
 8009206:	2100      	movs	r1, #0
 8009208:	4618      	mov	r0, r3
 800920a:	f002 fa55 	bl	800b6b8 <RCCEx_PLL2_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009214:	e011      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921a:	3328      	adds	r3, #40	@ 0x28
 800921c:	2100      	movs	r1, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f002 fafc 	bl	800b81c <RCCEx_PLL3_Config>
 8009224:	4603      	mov	r3, r0
 8009226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800922a:	e006      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009232:	e002      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009234:	bf00      	nop
 8009236:	e000      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800923a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10b      	bne.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009242:	4b1e      	ldr	r3, [pc, #120]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009246:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009252:	4a1a      	ldr	r2, [pc, #104]	@ (80092bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009254:	430b      	orrs	r3, r1
 8009256:	6593      	str	r3, [r2, #88]	@ 0x58
 8009258:	e003      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800925e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800926e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009272:	2300      	movs	r3, #0
 8009274:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009278:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800927c:	460b      	mov	r3, r1
 800927e:	4313      	orrs	r3, r2
 8009280:	d056      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009286:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800928a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800928e:	d038      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009290:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009294:	d831      	bhi.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009296:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800929a:	d034      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800929c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092a0:	d82b      	bhi.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092a6:	d01d      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80092a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092ac:	d825      	bhi.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d006      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80092b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092b6:	d00a      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80092b8:	e01f      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092ba:	bf00      	nop
 80092bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c0:	4ba2      	ldr	r3, [pc, #648]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c4:	4aa1      	ldr	r2, [pc, #644]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092cc:	e01c      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d2:	3308      	adds	r3, #8
 80092d4:	2100      	movs	r1, #0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f002 f9ee 	bl	800b6b8 <RCCEx_PLL2_Config>
 80092dc:	4603      	mov	r3, r0
 80092de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80092e2:	e011      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e8:	3328      	adds	r3, #40	@ 0x28
 80092ea:	2100      	movs	r1, #0
 80092ec:	4618      	mov	r0, r3
 80092ee:	f002 fa95 	bl	800b81c <RCCEx_PLL3_Config>
 80092f2:	4603      	mov	r3, r0
 80092f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092f8:	e006      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009300:	e002      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009302:	bf00      	nop
 8009304:	e000      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10b      	bne.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009310:	4b8e      	ldr	r3, [pc, #568]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009314:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009320:	4a8a      	ldr	r2, [pc, #552]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009322:	430b      	orrs	r3, r1
 8009324:	6593      	str	r3, [r2, #88]	@ 0x58
 8009326:	e003      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800932c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800933c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009340:	2300      	movs	r3, #0
 8009342:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009346:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800934a:	460b      	mov	r3, r1
 800934c:	4313      	orrs	r3, r2
 800934e:	d03a      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009356:	2b30      	cmp	r3, #48	@ 0x30
 8009358:	d01f      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800935a:	2b30      	cmp	r3, #48	@ 0x30
 800935c:	d819      	bhi.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800935e:	2b20      	cmp	r3, #32
 8009360:	d00c      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009362:	2b20      	cmp	r3, #32
 8009364:	d815      	bhi.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009366:	2b00      	cmp	r3, #0
 8009368:	d019      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800936a:	2b10      	cmp	r3, #16
 800936c:	d111      	bne.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800936e:	4b77      	ldr	r3, [pc, #476]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009372:	4a76      	ldr	r2, [pc, #472]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800937a:	e011      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800937c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009380:	3308      	adds	r3, #8
 8009382:	2102      	movs	r1, #2
 8009384:	4618      	mov	r0, r3
 8009386:	f002 f997 	bl	800b6b8 <RCCEx_PLL2_Config>
 800938a:	4603      	mov	r3, r0
 800938c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009390:	e006      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009398:	e002      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800939a:	bf00      	nop
 800939c:	e000      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800939e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80093a8:	4b68      	ldr	r3, [pc, #416]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80093b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093b6:	4a65      	ldr	r2, [pc, #404]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093b8:	430b      	orrs	r3, r1
 80093ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093bc:	e003      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80093c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80093d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80093d6:	2300      	movs	r3, #0
 80093d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80093dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4313      	orrs	r3, r2
 80093e4:	d051      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80093e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093f0:	d035      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80093f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093f6:	d82e      	bhi.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80093f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093fc:	d031      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80093fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009402:	d828      	bhi.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009408:	d01a      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800940a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800940e:	d822      	bhi.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009418:	d007      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800941a:	e01c      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800941c:	4b4b      	ldr	r3, [pc, #300]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800941e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009420:	4a4a      	ldr	r2, [pc, #296]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009428:	e01c      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800942a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942e:	3308      	adds	r3, #8
 8009430:	2100      	movs	r1, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f002 f940 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009438:	4603      	mov	r3, r0
 800943a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800943e:	e011      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009444:	3328      	adds	r3, #40	@ 0x28
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f002 f9e7 	bl	800b81c <RCCEx_PLL3_Config>
 800944e:	4603      	mov	r3, r0
 8009450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009454:	e006      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800945c:	e002      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800945e:	bf00      	nop
 8009460:	e000      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800946c:	4b37      	ldr	r3, [pc, #220]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800946e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009470:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800947a:	4a34      	ldr	r2, [pc, #208]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800947c:	430b      	orrs	r3, r1
 800947e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009480:	e003      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800948a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009492:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800949a:	2300      	movs	r3, #0
 800949c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80094a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80094a4:	460b      	mov	r3, r1
 80094a6:	4313      	orrs	r3, r2
 80094a8:	d056      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80094aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094b4:	d033      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80094b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094ba:	d82c      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094c0:	d02f      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80094c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094c6:	d826      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094cc:	d02b      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80094ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094d2:	d820      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094d8:	d012      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80094da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094de:	d81a      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d022      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80094e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094e8:	d115      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ee:	3308      	adds	r3, #8
 80094f0:	2101      	movs	r1, #1
 80094f2:	4618      	mov	r0, r3
 80094f4:	f002 f8e0 	bl	800b6b8 <RCCEx_PLL2_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80094fe:	e015      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009504:	3328      	adds	r3, #40	@ 0x28
 8009506:	2101      	movs	r1, #1
 8009508:	4618      	mov	r0, r3
 800950a:	f002 f987 	bl	800b81c <RCCEx_PLL3_Config>
 800950e:	4603      	mov	r3, r0
 8009510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009514:	e00a      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800951c:	e006      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800951e:	bf00      	nop
 8009520:	e004      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009522:	bf00      	nop
 8009524:	e002      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800952a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800952c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10d      	bne.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009534:	4b05      	ldr	r3, [pc, #20]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009538:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800953c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009542:	4a02      	ldr	r2, [pc, #8]	@ (800954c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009544:	430b      	orrs	r3, r1
 8009546:	6513      	str	r3, [r2, #80]	@ 0x50
 8009548:	e006      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800954a:	bf00      	nop
 800954c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009568:	2300      	movs	r3, #0
 800956a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800956e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009572:	460b      	mov	r3, r1
 8009574:	4313      	orrs	r3, r2
 8009576:	d055      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009584:	d033      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800958a:	d82c      	bhi.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800958c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009590:	d02f      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009596:	d826      	bhi.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009598:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800959c:	d02b      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800959e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095a2:	d820      	bhi.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095a8:	d012      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80095aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ae:	d81a      	bhi.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d022      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80095b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095b8:	d115      	bne.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095be:	3308      	adds	r3, #8
 80095c0:	2101      	movs	r1, #1
 80095c2:	4618      	mov	r0, r3
 80095c4:	f002 f878 	bl	800b6b8 <RCCEx_PLL2_Config>
 80095c8:	4603      	mov	r3, r0
 80095ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80095ce:	e015      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d4:	3328      	adds	r3, #40	@ 0x28
 80095d6:	2101      	movs	r1, #1
 80095d8:	4618      	mov	r0, r3
 80095da:	f002 f91f 	bl	800b81c <RCCEx_PLL3_Config>
 80095de:	4603      	mov	r3, r0
 80095e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80095e4:	e00a      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ec:	e006      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80095ee:	bf00      	nop
 80095f0:	e004      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80095f2:	bf00      	nop
 80095f4:	e002      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80095f6:	bf00      	nop
 80095f8:	e000      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80095fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009604:	4ba3      	ldr	r3, [pc, #652]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009608:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800960c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009610:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009614:	4a9f      	ldr	r2, [pc, #636]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009616:	430b      	orrs	r3, r1
 8009618:	6593      	str	r3, [r2, #88]	@ 0x58
 800961a:	e003      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800961c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009630:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009634:	2300      	movs	r3, #0
 8009636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800963a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800963e:	460b      	mov	r3, r1
 8009640:	4313      	orrs	r3, r2
 8009642:	d037      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800964e:	d00e      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009654:	d816      	bhi.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d018      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800965a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800965e:	d111      	bne.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009660:	4b8c      	ldr	r3, [pc, #560]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009664:	4a8b      	ldr	r2, [pc, #556]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800966a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800966c:	e00f      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800966e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009672:	3308      	adds	r3, #8
 8009674:	2101      	movs	r1, #1
 8009676:	4618      	mov	r0, r3
 8009678:	f002 f81e 	bl	800b6b8 <RCCEx_PLL2_Config>
 800967c:	4603      	mov	r3, r0
 800967e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009682:	e004      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800968a:	e000      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800968c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800968e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10a      	bne.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009696:	4b7f      	ldr	r3, [pc, #508]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800969a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800969e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096a4:	4a7b      	ldr	r2, [pc, #492]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a6:	430b      	orrs	r3, r1
 80096a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80096aa:	e003      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80096b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80096c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096c4:	2300      	movs	r3, #0
 80096c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80096ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4313      	orrs	r3, r2
 80096d2:	d039      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d81c      	bhi.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80096de:	a201      	add	r2, pc, #4	@ (adr r2, 80096e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	08009721 	.word	0x08009721
 80096e8:	080096f5 	.word	0x080096f5
 80096ec:	08009703 	.word	0x08009703
 80096f0:	08009721 	.word	0x08009721
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f4:	4b67      	ldr	r3, [pc, #412]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f8:	4a66      	ldr	r2, [pc, #408]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009700:	e00f      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009706:	3308      	adds	r3, #8
 8009708:	2102      	movs	r1, #2
 800970a:	4618      	mov	r0, r3
 800970c:	f001 ffd4 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009716:	e004      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800971e:	e000      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800972a:	4b5a      	ldr	r3, [pc, #360]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800972c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800972e:	f023 0103 	bic.w	r1, r3, #3
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009738:	4a56      	ldr	r2, [pc, #344]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800973a:	430b      	orrs	r3, r1
 800973c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800973e:	e003      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009758:	2300      	movs	r3, #0
 800975a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800975e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009762:	460b      	mov	r3, r1
 8009764:	4313      	orrs	r3, r2
 8009766:	f000 809f 	beq.w	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800976a:	4b4b      	ldr	r3, [pc, #300]	@ (8009898 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a4a      	ldr	r2, [pc, #296]	@ (8009898 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009776:	f7f8 f9af 	bl	8001ad8 <HAL_GetTick>
 800977a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800977e:	e00b      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009780:	f7f8 f9aa 	bl	8001ad8 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	2b64      	cmp	r3, #100	@ 0x64
 800978e:	d903      	bls.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009796:	e005      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009798:	4b3f      	ldr	r3, [pc, #252]	@ (8009898 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0ed      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80097a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d179      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80097ac:	4b39      	ldr	r3, [pc, #228]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80097b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097b8:	4053      	eors	r3, r2
 80097ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d015      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097c2:	4b34      	ldr	r3, [pc, #208]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097ce:	4b31      	ldr	r3, [pc, #196]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097d2:	4a30      	ldr	r2, [pc, #192]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097da:	4b2e      	ldr	r3, [pc, #184]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097de:	4a2d      	ldr	r2, [pc, #180]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80097e6:	4a2b      	ldr	r2, [pc, #172]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80097ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80097ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097fa:	d118      	bne.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097fc:	f7f8 f96c 	bl	8001ad8 <HAL_GetTick>
 8009800:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009804:	e00d      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009806:	f7f8 f967 	bl	8001ad8 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009810:	1ad2      	subs	r2, r2, r3
 8009812:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009816:	429a      	cmp	r2, r3
 8009818:	d903      	bls.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009820:	e005      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009822:	4b1c      	ldr	r3, [pc, #112]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0eb      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800982e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009832:	2b00      	cmp	r3, #0
 8009834:	d129      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800983a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800983e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009846:	d10e      	bne.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009848:	4b12      	ldr	r3, [pc, #72]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009854:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009858:	091a      	lsrs	r2, r3, #4
 800985a:	4b10      	ldr	r3, [pc, #64]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800985c:	4013      	ands	r3, r2
 800985e:	4a0d      	ldr	r2, [pc, #52]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009860:	430b      	orrs	r3, r1
 8009862:	6113      	str	r3, [r2, #16]
 8009864:	e005      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009866:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	4a0a      	ldr	r2, [pc, #40]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800986c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009870:	6113      	str	r3, [r2, #16]
 8009872:	4b08      	ldr	r3, [pc, #32]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009874:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800987a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800987e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009882:	4a04      	ldr	r2, [pc, #16]	@ (8009894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009884:	430b      	orrs	r3, r1
 8009886:	6713      	str	r3, [r2, #112]	@ 0x70
 8009888:	e00e      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800988a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800988e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009892:	e009      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009894:	58024400 	.word	0x58024400
 8009898:	58024800 	.word	0x58024800
 800989c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80098a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f002 0301 	and.w	r3, r2, #1
 80098b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098b8:	2300      	movs	r3, #0
 80098ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80098be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4313      	orrs	r3, r2
 80098c6:	f000 8089 	beq.w	80099dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80098ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098d0:	2b28      	cmp	r3, #40	@ 0x28
 80098d2:	d86b      	bhi.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80098d4:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098da:	bf00      	nop
 80098dc:	080099b5 	.word	0x080099b5
 80098e0:	080099ad 	.word	0x080099ad
 80098e4:	080099ad 	.word	0x080099ad
 80098e8:	080099ad 	.word	0x080099ad
 80098ec:	080099ad 	.word	0x080099ad
 80098f0:	080099ad 	.word	0x080099ad
 80098f4:	080099ad 	.word	0x080099ad
 80098f8:	080099ad 	.word	0x080099ad
 80098fc:	08009981 	.word	0x08009981
 8009900:	080099ad 	.word	0x080099ad
 8009904:	080099ad 	.word	0x080099ad
 8009908:	080099ad 	.word	0x080099ad
 800990c:	080099ad 	.word	0x080099ad
 8009910:	080099ad 	.word	0x080099ad
 8009914:	080099ad 	.word	0x080099ad
 8009918:	080099ad 	.word	0x080099ad
 800991c:	08009997 	.word	0x08009997
 8009920:	080099ad 	.word	0x080099ad
 8009924:	080099ad 	.word	0x080099ad
 8009928:	080099ad 	.word	0x080099ad
 800992c:	080099ad 	.word	0x080099ad
 8009930:	080099ad 	.word	0x080099ad
 8009934:	080099ad 	.word	0x080099ad
 8009938:	080099ad 	.word	0x080099ad
 800993c:	080099b5 	.word	0x080099b5
 8009940:	080099ad 	.word	0x080099ad
 8009944:	080099ad 	.word	0x080099ad
 8009948:	080099ad 	.word	0x080099ad
 800994c:	080099ad 	.word	0x080099ad
 8009950:	080099ad 	.word	0x080099ad
 8009954:	080099ad 	.word	0x080099ad
 8009958:	080099ad 	.word	0x080099ad
 800995c:	080099b5 	.word	0x080099b5
 8009960:	080099ad 	.word	0x080099ad
 8009964:	080099ad 	.word	0x080099ad
 8009968:	080099ad 	.word	0x080099ad
 800996c:	080099ad 	.word	0x080099ad
 8009970:	080099ad 	.word	0x080099ad
 8009974:	080099ad 	.word	0x080099ad
 8009978:	080099ad 	.word	0x080099ad
 800997c:	080099b5 	.word	0x080099b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009984:	3308      	adds	r3, #8
 8009986:	2101      	movs	r1, #1
 8009988:	4618      	mov	r0, r3
 800998a:	f001 fe95 	bl	800b6b8 <RCCEx_PLL2_Config>
 800998e:	4603      	mov	r3, r0
 8009990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009994:	e00f      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800999a:	3328      	adds	r3, #40	@ 0x28
 800999c:	2101      	movs	r1, #1
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 ff3c 	bl	800b81c <RCCEx_PLL3_Config>
 80099a4:	4603      	mov	r3, r0
 80099a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80099aa:	e004      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099b2:	e000      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80099b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80099be:	4bbf      	ldr	r3, [pc, #764]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80099c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099cc:	4abb      	ldr	r2, [pc, #748]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099ce:	430b      	orrs	r3, r1
 80099d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80099d2:	e003      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e4:	f002 0302 	and.w	r3, r2, #2
 80099e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099ec:	2300      	movs	r3, #0
 80099ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80099f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80099f6:	460b      	mov	r3, r1
 80099f8:	4313      	orrs	r3, r2
 80099fa:	d041      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80099fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a02:	2b05      	cmp	r3, #5
 8009a04:	d824      	bhi.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009a06:	a201      	add	r2, pc, #4	@ (adr r2, 8009a0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009a59 	.word	0x08009a59
 8009a10:	08009a25 	.word	0x08009a25
 8009a14:	08009a3b 	.word	0x08009a3b
 8009a18:	08009a59 	.word	0x08009a59
 8009a1c:	08009a59 	.word	0x08009a59
 8009a20:	08009a59 	.word	0x08009a59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a28:	3308      	adds	r3, #8
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f001 fe43 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009a32:	4603      	mov	r3, r0
 8009a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009a38:	e00f      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3e:	3328      	adds	r3, #40	@ 0x28
 8009a40:	2101      	movs	r1, #1
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 feea 	bl	800b81c <RCCEx_PLL3_Config>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009a4e:	e004      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a56:	e000      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10a      	bne.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a62:	4b96      	ldr	r3, [pc, #600]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a66:	f023 0107 	bic.w	r1, r3, #7
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a70:	4a92      	ldr	r2, [pc, #584]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a72:	430b      	orrs	r3, r1
 8009a74:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a76:	e003      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f002 0304 	and.w	r3, r2, #4
 8009a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a90:	2300      	movs	r3, #0
 8009a92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	d044      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aa8:	2b05      	cmp	r3, #5
 8009aaa:	d825      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009aac:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009b01 	.word	0x08009b01
 8009ab8:	08009acd 	.word	0x08009acd
 8009abc:	08009ae3 	.word	0x08009ae3
 8009ac0:	08009b01 	.word	0x08009b01
 8009ac4:	08009b01 	.word	0x08009b01
 8009ac8:	08009b01 	.word	0x08009b01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f001 fdef 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ae0:	e00f      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae6:	3328      	adds	r3, #40	@ 0x28
 8009ae8:	2101      	movs	r1, #1
 8009aea:	4618      	mov	r0, r3
 8009aec:	f001 fe96 	bl	800b81c <RCCEx_PLL3_Config>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009af6:	e004      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009afe:	e000      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10b      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b0e:	f023 0107 	bic.w	r1, r3, #7
 8009b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b1a:	4a68      	ldr	r2, [pc, #416]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b20:	e003      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f002 0320 	and.w	r3, r2, #32
 8009b36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b44:	460b      	mov	r3, r1
 8009b46:	4313      	orrs	r3, r2
 8009b48:	d055      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b56:	d033      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b5c:	d82c      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b62:	d02f      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b68:	d826      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b6e:	d02b      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009b70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b74:	d820      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b7a:	d012      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009b7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b80:	d81a      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d022      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009b86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b8a:	d115      	bne.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b90:	3308      	adds	r3, #8
 8009b92:	2100      	movs	r1, #0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 fd8f 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ba0:	e015      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba6:	3328      	adds	r3, #40	@ 0x28
 8009ba8:	2102      	movs	r1, #2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f001 fe36 	bl	800b81c <RCCEx_PLL3_Config>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009bb6:	e00a      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bbe:	e006      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bc0:	bf00      	nop
 8009bc2:	e004      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bc4:	bf00      	nop
 8009bc6:	e002      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bc8:	bf00      	nop
 8009bca:	e000      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10b      	bne.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bd6:	4b39      	ldr	r3, [pc, #228]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be6:	4a35      	ldr	r2, [pc, #212]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009be8:	430b      	orrs	r3, r1
 8009bea:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bec:	e003      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c06:	2300      	movs	r3, #0
 8009c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009c0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4313      	orrs	r3, r2
 8009c14:	d058      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009c22:	d033      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009c28:	d82c      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c2e:	d02f      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c34:	d826      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c3a:	d02b      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009c3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c40:	d820      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c46:	d012      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c4c:	d81a      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d022      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c56:	d115      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c5c:	3308      	adds	r3, #8
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f001 fd29 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009c66:	4603      	mov	r3, r0
 8009c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009c6c:	e015      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c72:	3328      	adds	r3, #40	@ 0x28
 8009c74:	2102      	movs	r1, #2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 fdd0 	bl	800b81c <RCCEx_PLL3_Config>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009c82:	e00a      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c8a:	e006      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c8c:	bf00      	nop
 8009c8e:	e004      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c90:	bf00      	nop
 8009c92:	e002      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c94:	bf00      	nop
 8009c96:	e000      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10e      	bne.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ca2:	4b06      	ldr	r3, [pc, #24]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ca6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009cb2:	4a02      	ldr	r2, [pc, #8]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cb4:	430b      	orrs	r3, r1
 8009cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cb8:	e006      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009cba:	bf00      	nop
 8009cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	d055      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009cf0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009cf4:	d033      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009cf6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009cfa:	d82c      	bhi.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d00:	d02f      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d06:	d826      	bhi.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d08:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009d0c:	d02b      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009d0e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009d12:	d820      	bhi.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d18:	d012      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009d1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d1e:	d81a      	bhi.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d022      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d28:	d115      	bne.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2e:	3308      	adds	r3, #8
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fcc0 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009d3e:	e015      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d44:	3328      	adds	r3, #40	@ 0x28
 8009d46:	2102      	movs	r1, #2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 fd67 	bl	800b81c <RCCEx_PLL3_Config>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009d54:	e00a      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d5c:	e006      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d5e:	bf00      	nop
 8009d60:	e004      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d62:	bf00      	nop
 8009d64:	e002      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d66:	bf00      	nop
 8009d68:	e000      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10b      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009d74:	4ba1      	ldr	r3, [pc, #644]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d78:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d84:	4a9d      	ldr	r2, [pc, #628]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d86:	430b      	orrs	r3, r1
 8009d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d8a:	e003      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f002 0308 	and.w	r3, r2, #8
 8009da0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009da4:	2300      	movs	r3, #0
 8009da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009daa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009dae:	460b      	mov	r3, r1
 8009db0:	4313      	orrs	r3, r2
 8009db2:	d01e      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dc0:	d10c      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc6:	3328      	adds	r3, #40	@ 0x28
 8009dc8:	2102      	movs	r1, #2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 fd26 	bl	800b81c <RCCEx_PLL3_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ddc:	4b87      	ldr	r3, [pc, #540]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dec:	4a83      	ldr	r2, [pc, #524]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dee:	430b      	orrs	r3, r1
 8009df0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	f002 0310 	and.w	r3, r2, #16
 8009dfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e02:	2300      	movs	r3, #0
 8009e04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009e08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	d01e      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e1e:	d10c      	bne.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e24:	3328      	adds	r3, #40	@ 0x28
 8009e26:	2102      	movs	r1, #2
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f001 fcf7 	bl	800b81c <RCCEx_PLL3_Config>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e3a:	4b70      	ldr	r3, [pc, #448]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e4a:	4a6c      	ldr	r2, [pc, #432]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e60:	2300      	movs	r3, #0
 8009e62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	d03e      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e7c:	d022      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009e7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e82:	d81b      	bhi.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d003      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e8c:	d00b      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009e8e:	e015      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e94:	3308      	adds	r3, #8
 8009e96:	2100      	movs	r1, #0
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f001 fc0d 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ea4:	e00f      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eaa:	3328      	adds	r3, #40	@ 0x28
 8009eac:	2102      	movs	r1, #2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f001 fcb4 	bl	800b81c <RCCEx_PLL3_Config>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009eba:	e004      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ec2:	e000      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10b      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ece:	4b4b      	ldr	r3, [pc, #300]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ed2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ede:	4a47      	ldr	r2, [pc, #284]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee0:	430b      	orrs	r3, r1
 8009ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ee4:	e003      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009efa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009efc:	2300      	movs	r3, #0
 8009efe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009f04:	460b      	mov	r3, r1
 8009f06:	4313      	orrs	r3, r2
 8009f08:	d03b      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f16:	d01f      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009f18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f1c:	d818      	bhi.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f22:	d003      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009f24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f28:	d007      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009f2a:	e011      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f2c:	4b33      	ldr	r3, [pc, #204]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f30:	4a32      	ldr	r2, [pc, #200]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009f38:	e00f      	b.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3e:	3328      	adds	r3, #40	@ 0x28
 8009f40:	2101      	movs	r1, #1
 8009f42:	4618      	mov	r0, r3
 8009f44:	f001 fc6a 	bl	800b81c <RCCEx_PLL3_Config>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009f4e:	e004      	b.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f56:	e000      	b.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10b      	bne.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f62:	4b26      	ldr	r3, [pc, #152]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f72:	4a22      	ldr	r2, [pc, #136]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f74:	430b      	orrs	r3, r1
 8009f76:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f78:	e003      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009f8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f90:	2300      	movs	r3, #0
 8009f92:	677b      	str	r3, [r7, #116]	@ 0x74
 8009f94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	d034      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fac:	d007      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009fae:	e011      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb0:	4b12      	ldr	r3, [pc, #72]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb4:	4a11      	ldr	r2, [pc, #68]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009fbc:	e00e      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	2102      	movs	r1, #2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f001 fb76 	bl	800b6b8 <RCCEx_PLL2_Config>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009fd2:	e003      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10d      	bne.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fe4:	4b05      	ldr	r3, [pc, #20]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fe8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ff2:	4a02      	ldr	r2, [pc, #8]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ff8:	e006      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009ffa:	bf00      	nop
 8009ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a014:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a016:	2300      	movs	r3, #0
 800a018:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a01a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a01e:	460b      	mov	r3, r1
 800a020:	4313      	orrs	r3, r2
 800a022:	d00c      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a028:	3328      	adds	r3, #40	@ 0x28
 800a02a:	2102      	movs	r1, #2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 fbf5 	bl	800b81c <RCCEx_PLL3_Config>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a04a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a04c:	2300      	movs	r3, #0
 800a04e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a050:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a054:	460b      	mov	r3, r1
 800a056:	4313      	orrs	r3, r2
 800a058:	d038      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a066:	d018      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a068:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a06c:	d811      	bhi.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a06e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a072:	d014      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a078:	d80b      	bhi.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d011      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a082:	d106      	bne.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a084:	4bc3      	ldr	r3, [pc, #780]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a088:	4ac2      	ldr	r2, [pc, #776]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a08a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a08e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a090:	e008      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a098:	e004      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a09a:	bf00      	nop
 800a09c:	e002      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a09e:	bf00      	nop
 800a0a0:	e000      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10b      	bne.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0ac:	4bb9      	ldr	r3, [pc, #740]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0bc:	4ab5      	ldr	r2, [pc, #724]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a0c2:	e003      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a0d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0da:	2300      	movs	r3, #0
 800a0dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	d009      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0e8:	4baa      	ldr	r3, [pc, #680]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0f6:	4aa7      	ldr	r2, [pc, #668]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0f8:	430b      	orrs	r3, r1
 800a0fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a108:	653b      	str	r3, [r7, #80]	@ 0x50
 800a10a:	2300      	movs	r3, #0
 800a10c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a10e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a112:	460b      	mov	r3, r1
 800a114:	4313      	orrs	r3, r2
 800a116:	d00a      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a118:	4b9e      	ldr	r3, [pc, #632]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a124:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a128:	4a9a      	ldr	r2, [pc, #616]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a12a:	430b      	orrs	r3, r1
 800a12c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a13a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a13c:	2300      	movs	r3, #0
 800a13e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a140:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a144:	460b      	mov	r3, r1
 800a146:	4313      	orrs	r3, r2
 800a148:	d009      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a14a:	4b92      	ldr	r3, [pc, #584]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a14c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a14e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a158:	4a8e      	ldr	r2, [pc, #568]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a15a:	430b      	orrs	r3, r1
 800a15c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a16a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a16c:	2300      	movs	r3, #0
 800a16e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a170:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a174:	460b      	mov	r3, r1
 800a176:	4313      	orrs	r3, r2
 800a178:	d00e      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a17a:	4b86      	ldr	r3, [pc, #536]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	4a85      	ldr	r2, [pc, #532]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a180:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a184:	6113      	str	r3, [r2, #16]
 800a186:	4b83      	ldr	r3, [pc, #524]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a188:	6919      	ldr	r1, [r3, #16]
 800a18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a18e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a192:	4a80      	ldr	r2, [pc, #512]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a194:	430b      	orrs	r3, r1
 800a196:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a1a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	d009      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a1b4:	4b77      	ldr	r3, [pc, #476]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c2:	4a74      	ldr	r2, [pc, #464]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1c4:	430b      	orrs	r3, r1
 800a1c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a1d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	d00a      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a1e4:	4b6b      	ldr	r3, [pc, #428]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1f4:	4a67      	ldr	r2, [pc, #412]	@ (800a394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1f6:	430b      	orrs	r3, r1
 800a1f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	2100      	movs	r1, #0
 800a204:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a20c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a210:	460b      	mov	r3, r1
 800a212:	4313      	orrs	r3, r2
 800a214:	d011      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a21a:	3308      	adds	r3, #8
 800a21c:	2100      	movs	r1, #0
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 fa4a 	bl	800b6b8 <RCCEx_PLL2_Config>
 800a224:	4603      	mov	r3, r0
 800a226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a22a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	2100      	movs	r1, #0
 800a244:	6239      	str	r1, [r7, #32]
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a24c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a250:	460b      	mov	r3, r1
 800a252:	4313      	orrs	r3, r2
 800a254:	d011      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25a:	3308      	adds	r3, #8
 800a25c:	2101      	movs	r1, #1
 800a25e:	4618      	mov	r0, r3
 800a260:	f001 fa2a 	bl	800b6b8 <RCCEx_PLL2_Config>
 800a264:	4603      	mov	r3, r0
 800a266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a26a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	2100      	movs	r1, #0
 800a284:	61b9      	str	r1, [r7, #24]
 800a286:	f003 0304 	and.w	r3, r3, #4
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a290:	460b      	mov	r3, r1
 800a292:	4313      	orrs	r3, r2
 800a294:	d011      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a29a:	3308      	adds	r3, #8
 800a29c:	2102      	movs	r1, #2
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f001 fa0a 	bl	800b6b8 <RCCEx_PLL2_Config>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a2aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	6139      	str	r1, [r7, #16]
 800a2c6:	f003 0308 	and.w	r3, r3, #8
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	d011      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2da:	3328      	adds	r3, #40	@ 0x28
 800a2dc:	2100      	movs	r1, #0
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f001 fa9c 	bl	800b81c <RCCEx_PLL3_Config>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a2ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	2100      	movs	r1, #0
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	f003 0310 	and.w	r3, r3, #16
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a310:	460b      	mov	r3, r1
 800a312:	4313      	orrs	r3, r2
 800a314:	d011      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31a:	3328      	adds	r3, #40	@ 0x28
 800a31c:	2101      	movs	r1, #1
 800a31e:	4618      	mov	r0, r3
 800a320:	f001 fa7c 	bl	800b81c <RCCEx_PLL3_Config>
 800a324:	4603      	mov	r3, r0
 800a326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a32a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	2100      	movs	r1, #0
 800a344:	6039      	str	r1, [r7, #0]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	607b      	str	r3, [r7, #4]
 800a34c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a350:	460b      	mov	r3, r1
 800a352:	4313      	orrs	r3, r2
 800a354:	d011      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a35a:	3328      	adds	r3, #40	@ 0x28
 800a35c:	2102      	movs	r1, #2
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 fa5c 	bl	800b81c <RCCEx_PLL3_Config>
 800a364:	4603      	mov	r3, r0
 800a366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a36a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a37a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	e000      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
}
 800a388:	4618      	mov	r0, r3
 800a38a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a38e:	46bd      	mov	sp, r7
 800a390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a394:	58024400 	.word	0x58024400

0800a398 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b090      	sub	sp, #64	@ 0x40
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a3a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a3aa:	430b      	orrs	r3, r1
 800a3ac:	f040 8094 	bne.w	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a3b0:	4b9e      	ldr	r3, [pc, #632]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3b4:	f003 0307 	and.w	r3, r3, #7
 800a3b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	2b04      	cmp	r3, #4
 800a3be:	f200 8087 	bhi.w	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a3dd 	.word	0x0800a3dd
 800a3cc:	0800a405 	.word	0x0800a405
 800a3d0:	0800a42d 	.word	0x0800a42d
 800a3d4:	0800a4c9 	.word	0x0800a4c9
 800a3d8:	0800a455 	.word	0x0800a455
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3dc:	4b93      	ldr	r3, [pc, #588]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3e8:	d108      	bne.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f001 f810 	bl	800b414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f8:	f000 bd45 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a400:	f000 bd41 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a404:	4b89      	ldr	r3, [pc, #548]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a40c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a410:	d108      	bne.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a412:	f107 0318 	add.w	r3, r7, #24
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fd54 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a420:	f000 bd31 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a428:	f000 bd2d 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a42c:	4b7f      	ldr	r3, [pc, #508]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a438:	d108      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a43a:	f107 030c 	add.w	r3, r7, #12
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fe94 	bl	800b16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a448:	f000 bd1d 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a450:	f000 bd19 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a454:	4b75      	ldr	r3, [pc, #468]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a45c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a45e:	4b73      	ldr	r3, [pc, #460]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0304 	and.w	r3, r3, #4
 800a466:	2b04      	cmp	r3, #4
 800a468:	d10c      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d109      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a470:	4b6e      	ldr	r3, [pc, #440]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	08db      	lsrs	r3, r3, #3
 800a476:	f003 0303 	and.w	r3, r3, #3
 800a47a:	4a6d      	ldr	r2, [pc, #436]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a47c:	fa22 f303 	lsr.w	r3, r2, r3
 800a480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a482:	e01f      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a484:	4b69      	ldr	r3, [pc, #420]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a48c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a490:	d106      	bne.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a498:	d102      	bne.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a49a:	4b66      	ldr	r3, [pc, #408]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a49e:	e011      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4a0:	4b62      	ldr	r3, [pc, #392]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ac:	d106      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4b4:	d102      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4b6:	4b60      	ldr	r3, [pc, #384]	@ (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4ba:	e003      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4c0:	f000 bce1 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4c4:	f000 bcdf 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4c8:	4b5c      	ldr	r3, [pc, #368]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4cc:	f000 bcdb 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d4:	f000 bcd7 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a4d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4dc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	f040 80ad 	bne.w	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a4e6:	4b51      	ldr	r3, [pc, #324]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a4ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4f6:	d056      	beq.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4fe:	f200 8090 	bhi.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	2bc0      	cmp	r3, #192	@ 0xc0
 800a506:	f000 8088 	beq.w	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a50e:	f200 8088 	bhi.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a514:	2b80      	cmp	r3, #128	@ 0x80
 800a516:	d032      	beq.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51a:	2b80      	cmp	r3, #128	@ 0x80
 800a51c:	f200 8081 	bhi.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a528:	2b40      	cmp	r3, #64	@ 0x40
 800a52a:	d014      	beq.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a52c:	e079      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a52e:	4b3f      	ldr	r3, [pc, #252]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a536:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a53a:	d108      	bne.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a53c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a540:	4618      	mov	r0, r3
 800a542:	f000 ff67 	bl	800b414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a54a:	f000 bc9c 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a552:	f000 bc98 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a556:	4b35      	ldr	r3, [pc, #212]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a55e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a562:	d108      	bne.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a564:	f107 0318 	add.w	r3, r7, #24
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 fcab 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a572:	f000 bc88 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57a:	f000 bc84 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a57e:	4b2b      	ldr	r3, [pc, #172]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a58a:	d108      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a58c:	f107 030c 	add.w	r3, r7, #12
 800a590:	4618      	mov	r0, r3
 800a592:	f000 fdeb 	bl	800b16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a59a:	f000 bc74 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a2:	f000 bc70 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5a6:	4b21      	ldr	r3, [pc, #132]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5b0:	4b1e      	ldr	r3, [pc, #120]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	d10c      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d109      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5c2:	4b1a      	ldr	r3, [pc, #104]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	08db      	lsrs	r3, r3, #3
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	4a18      	ldr	r2, [pc, #96]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5d4:	e01f      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5d6:	4b15      	ldr	r3, [pc, #84]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5e2:	d106      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5ea:	d102      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5ec:	4b11      	ldr	r3, [pc, #68]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f0:	e011      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5fe:	d106      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a606:	d102      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a608:	4b0b      	ldr	r3, [pc, #44]	@ (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a60c:	e003      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a612:	f000 bc38 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a616:	f000 bc36 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a61a:	4b08      	ldr	r3, [pc, #32]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a61e:	f000 bc32 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a626:	f000 bc2e 	b.w	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a62a:	bf00      	nop
 800a62c:	58024400 	.word	0x58024400
 800a630:	03d09000 	.word	0x03d09000
 800a634:	003d0900 	.word	0x003d0900
 800a638:	017d7840 	.word	0x017d7840
 800a63c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a644:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a648:	430b      	orrs	r3, r1
 800a64a:	f040 809c 	bne.w	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a64e:	4b9e      	ldr	r3, [pc, #632]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a652:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a656:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a65e:	d054      	beq.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a662:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a666:	f200 808b 	bhi.w	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a670:	f000 8083 	beq.w	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a676:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a67a:	f200 8081 	bhi.w	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a684:	d02f      	beq.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a68c:	d878      	bhi.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	2b00      	cmp	r3, #0
 800a692:	d004      	beq.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a69a:	d012      	beq.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a69c:	e070      	b.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a69e:	4b8a      	ldr	r3, [pc, #552]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6aa:	d107      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 feaf 	bl	800b414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ba:	e3e4      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c0:	e3e1      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6c2:	4b81      	ldr	r3, [pc, #516]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6ce:	d107      	bne.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6d0:	f107 0318 	add.w	r3, r7, #24
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fbf5 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6de:	e3d2      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e4:	e3cf      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6e6:	4b78      	ldr	r3, [pc, #480]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6f2:	d107      	bne.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6f4:	f107 030c 	add.w	r3, r7, #12
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fd37 	bl	800b16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a702:	e3c0      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a704:	2300      	movs	r3, #0
 800a706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a708:	e3bd      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a70a:	4b6f      	ldr	r3, [pc, #444]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a70c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a70e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a712:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a714:	4b6c      	ldr	r3, [pc, #432]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d10c      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a722:	2b00      	cmp	r3, #0
 800a724:	d109      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a726:	4b68      	ldr	r3, [pc, #416]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	08db      	lsrs	r3, r3, #3
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	4a66      	ldr	r2, [pc, #408]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a732:	fa22 f303 	lsr.w	r3, r2, r3
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a738:	e01e      	b.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a73a:	4b63      	ldr	r3, [pc, #396]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a746:	d106      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a74a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a74e:	d102      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a750:	4b5f      	ldr	r3, [pc, #380]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a754:	e010      	b.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a756:	4b5c      	ldr	r3, [pc, #368]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a75e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a762:	d106      	bne.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a76a:	d102      	bne.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a76c:	4b59      	ldr	r3, [pc, #356]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a770:	e002      	b.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a776:	e386      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a778:	e385      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a77a:	4b57      	ldr	r3, [pc, #348]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77e:	e382      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a784:	e37f      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a78a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a78e:	430b      	orrs	r3, r1
 800a790:	f040 80a7 	bne.w	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a794:	4b4c      	ldr	r3, [pc, #304]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a798:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a79c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7a4:	d055      	beq.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7ac:	f200 8096 	bhi.w	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7b6:	f000 8084 	beq.w	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7c0:	f200 808c 	bhi.w	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7ca:	d030      	beq.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7d2:	f200 8083 	bhi.w	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d004      	beq.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7e2:	d012      	beq.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a7e4:	e07a      	b.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7e6:	4b38      	ldr	r3, [pc, #224]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7f2:	d107      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fe0b 	bl	800b414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a802:	e340      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a808:	e33d      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a80a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a816:	d107      	bne.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a818:	f107 0318 	add.w	r3, r7, #24
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 fb51 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a826:	e32e      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82c:	e32b      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a82e:	4b26      	ldr	r3, [pc, #152]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a83a:	d107      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a83c:	f107 030c 	add.w	r3, r7, #12
 800a840:	4618      	mov	r0, r3
 800a842:	f000 fc93 	bl	800b16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a84a:	e31c      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a850:	e319      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a852:	4b1d      	ldr	r3, [pc, #116]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a856:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a85a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a85c:	4b1a      	ldr	r3, [pc, #104]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0304 	and.w	r3, r3, #4
 800a864:	2b04      	cmp	r3, #4
 800a866:	d10c      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d109      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a86e:	4b16      	ldr	r3, [pc, #88]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	08db      	lsrs	r3, r3, #3
 800a874:	f003 0303 	and.w	r3, r3, #3
 800a878:	4a14      	ldr	r2, [pc, #80]	@ (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a87a:	fa22 f303 	lsr.w	r3, r2, r3
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a880:	e01e      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a882:	4b11      	ldr	r3, [pc, #68]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a88a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a88e:	d106      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a896:	d102      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a898:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a89c:	e010      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a89e:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8aa:	d106      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8b2:	d102      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8b4:	4b07      	ldr	r3, [pc, #28]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8b8:	e002      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a8be:	e2e2      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8c0:	e2e1      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8c2:	4b05      	ldr	r3, [pc, #20]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c6:	e2de      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8c8:	58024400 	.word	0x58024400
 800a8cc:	03d09000 	.word	0x03d09000
 800a8d0:	003d0900 	.word	0x003d0900
 800a8d4:	017d7840 	.word	0x017d7840
 800a8d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e0:	e2d1      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a8e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8e6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	f040 809c 	bne.w	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a8f0:	4b93      	ldr	r3, [pc, #588]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a8f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a900:	d054      	beq.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a908:	f200 808b 	bhi.w	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a912:	f000 8083 	beq.w	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a91c:	f200 8081 	bhi.w	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a926:	d02f      	beq.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a92e:	d878      	bhi.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	2b00      	cmp	r3, #0
 800a934:	d004      	beq.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a93c:	d012      	beq.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a93e:	e070      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a940:	4b7f      	ldr	r3, [pc, #508]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a94c:	d107      	bne.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a94e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fd5e 	bl	800b414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a95c:	e293      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a962:	e290      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a964:	4b76      	ldr	r3, [pc, #472]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a96c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a970:	d107      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a972:	f107 0318 	add.w	r3, r7, #24
 800a976:	4618      	mov	r0, r3
 800a978:	f000 faa4 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a980:	e281      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a986:	e27e      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a988:	4b6d      	ldr	r3, [pc, #436]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a994:	d107      	bne.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a996:	f107 030c 	add.w	r3, r7, #12
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 fbe6 	bl	800b16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a4:	e26f      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9aa:	e26c      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9ac:	4b64      	ldr	r3, [pc, #400]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9b6:	4b62      	ldr	r3, [pc, #392]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d10c      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a9c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d109      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9c8:	4b5d      	ldr	r3, [pc, #372]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	08db      	lsrs	r3, r3, #3
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	4a5c      	ldr	r2, [pc, #368]	@ (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a9d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9da:	e01e      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9dc:	4b58      	ldr	r3, [pc, #352]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9e8:	d106      	bne.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9f0:	d102      	bne.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9f2:	4b55      	ldr	r3, [pc, #340]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9f6:	e010      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9f8:	4b51      	ldr	r3, [pc, #324]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa04:	d106      	bne.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aa06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa0c:	d102      	bne.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa0e:	4b4f      	ldr	r3, [pc, #316]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa12:	e002      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa18:	e235      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa1a:	e234      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa1c:	4b4c      	ldr	r3, [pc, #304]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aa1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa20:	e231      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa26:	e22e      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aa28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa2c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800aa30:	430b      	orrs	r3, r1
 800aa32:	f040 808f 	bne.w	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aa36:	4b42      	ldr	r3, [pc, #264]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa3a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aa3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aa40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa46:	d06b      	beq.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa4e:	d874      	bhi.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa56:	d056      	beq.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800aa58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa5e:	d86c      	bhi.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa66:	d03b      	beq.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa6e:	d864      	bhi.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa76:	d021      	beq.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa7e:	d85c      	bhi.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d004      	beq.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800aa86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa8c:	d004      	beq.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800aa8e:	e054      	b.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aa90:	f7fe fa20 	bl	8008ed4 <HAL_RCC_GetPCLK1Freq>
 800aa94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa96:	e1f6      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa98:	4b29      	ldr	r3, [pc, #164]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaa4:	d107      	bne.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa6:	f107 0318 	add.w	r3, r7, #24
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 fa0a 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab4:	e1e7      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaba:	e1e4      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aabc:	4b20      	ldr	r3, [pc, #128]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aac8:	d107      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaca:	f107 030c 	add.w	r3, r7, #12
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fb4c 	bl	800b16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad8:	e1d5      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aade:	e1d2      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aae0:	4b17      	ldr	r3, [pc, #92]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d109      	bne.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaec:	4b14      	ldr	r3, [pc, #80]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	08db      	lsrs	r3, r3, #3
 800aaf2:	f003 0303 	and.w	r3, r3, #3
 800aaf6:	4a13      	ldr	r2, [pc, #76]	@ (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aaf8:	fa22 f303 	lsr.w	r3, r2, r3
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aafe:	e1c2      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab04:	e1bf      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab06:	4b0e      	ldr	r3, [pc, #56]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab12:	d102      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ab14:	4b0c      	ldr	r3, [pc, #48]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab18:	e1b5      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab1e:	e1b2      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab20:	4b07      	ldr	r3, [pc, #28]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab2c:	d102      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ab2e:	4b07      	ldr	r3, [pc, #28]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ab30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab32:	e1a8      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab38:	e1a5      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab3e:	e1a2      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab40:	58024400 	.word	0x58024400
 800ab44:	03d09000 	.word	0x03d09000
 800ab48:	003d0900 	.word	0x003d0900
 800ab4c:	017d7840 	.word	0x017d7840
 800ab50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab58:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ab5c:	430b      	orrs	r3, r1
 800ab5e:	d173      	bne.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ab60:	4b9c      	ldr	r3, [pc, #624]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ab68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab70:	d02f      	beq.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ab72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab78:	d863      	bhi.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d004      	beq.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ab80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab86:	d012      	beq.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ab88:	e05b      	b.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab8a:	4b92      	ldr	r3, [pc, #584]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab96:	d107      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab98:	f107 0318 	add.w	r3, r7, #24
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 f991 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba6:	e16e      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abac:	e16b      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abae:	4b89      	ldr	r3, [pc, #548]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abba:	d107      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abbc:	f107 030c 	add.w	r3, r7, #12
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fad3 	bl	800b16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abca:	e15c      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd0:	e159      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abd2:	4b80      	ldr	r3, [pc, #512]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abdc:	4b7d      	ldr	r3, [pc, #500]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	d10c      	bne.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800abe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abea:	2b00      	cmp	r3, #0
 800abec:	d109      	bne.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abee:	4b79      	ldr	r3, [pc, #484]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	08db      	lsrs	r3, r3, #3
 800abf4:	f003 0303 	and.w	r3, r3, #3
 800abf8:	4a77      	ldr	r2, [pc, #476]	@ (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800abfa:	fa22 f303 	lsr.w	r3, r2, r3
 800abfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac00:	e01e      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac02:	4b74      	ldr	r3, [pc, #464]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac0e:	d106      	bne.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ac10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac16:	d102      	bne.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac18:	4b70      	ldr	r3, [pc, #448]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ac1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac1c:	e010      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac1e:	4b6d      	ldr	r3, [pc, #436]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac2a:	d106      	bne.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ac2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac32:	d102      	bne.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac34:	4b6a      	ldr	r3, [pc, #424]	@ (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac38:	e002      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac3e:	e122      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac40:	e121      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac46:	e11e      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac4c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ac50:	430b      	orrs	r3, r1
 800ac52:	d133      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ac54:	4b5f      	ldr	r3, [pc, #380]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d004      	beq.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac6a:	d012      	beq.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ac6c:	e023      	b.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac6e:	4b59      	ldr	r3, [pc, #356]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac7a:	d107      	bne.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 fbc7 	bl	800b414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac8a:	e0fc      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac90:	e0f9      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac92:	4b50      	ldr	r3, [pc, #320]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac9e:	d107      	bne.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aca0:	f107 0318 	add.w	r3, r7, #24
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 f90d 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800acaa:	6a3b      	ldr	r3, [r7, #32]
 800acac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acae:	e0ea      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb4:	e0e7      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acba:	e0e4      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800acbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800acc4:	430b      	orrs	r3, r1
 800acc6:	f040 808d 	bne.w	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800acca:	4b42      	ldr	r3, [pc, #264]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800accc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800acd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acda:	d06b      	beq.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ace2:	d874      	bhi.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ace4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acea:	d056      	beq.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800acec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acf2:	d86c      	bhi.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800acf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800acfa:	d03b      	beq.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800acfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad02:	d864      	bhi.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad0a:	d021      	beq.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad12:	d85c      	bhi.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d004      	beq.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad20:	d004      	beq.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ad22:	e054      	b.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad24:	f000 f8b8 	bl	800ae98 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad2a:	e0ac      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad2c:	4b29      	ldr	r3, [pc, #164]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad38:	d107      	bne.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad3a:	f107 0318 	add.w	r3, r7, #24
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 f8c0 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad48:	e09d      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad4e:	e09a      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad50:	4b20      	ldr	r3, [pc, #128]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad5c:	d107      	bne.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad5e:	f107 030c 	add.w	r3, r7, #12
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fa02 	bl	800b16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad6c:	e08b      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad72:	e088      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad74:	4b17      	ldr	r3, [pc, #92]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d109      	bne.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad80:	4b14      	ldr	r3, [pc, #80]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	08db      	lsrs	r3, r3, #3
 800ad86:	f003 0303 	and.w	r3, r3, #3
 800ad8a:	4a13      	ldr	r2, [pc, #76]	@ (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ad8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad92:	e078      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad98:	e075      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad9a:	4b0e      	ldr	r3, [pc, #56]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ada2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ada6:	d102      	bne.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ada8:	4b0c      	ldr	r3, [pc, #48]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adac:	e06b      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb2:	e068      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800adb4:	4b07      	ldr	r3, [pc, #28]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adc0:	d102      	bne.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800adc2:	4b07      	ldr	r3, [pc, #28]	@ (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800adc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adc6:	e05e      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adcc:	e05b      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add2:	e058      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800add4:	58024400 	.word	0x58024400
 800add8:	03d09000 	.word	0x03d09000
 800addc:	003d0900 	.word	0x003d0900
 800ade0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ade4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ade8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800adec:	430b      	orrs	r3, r1
 800adee:	d148      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800adf0:	4b27      	ldr	r3, [pc, #156]	@ (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800adf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800adf8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800adfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae00:	d02a      	beq.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ae02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae08:	d838      	bhi.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d004      	beq.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ae10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae16:	d00d      	beq.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ae18:	e030      	b.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae1a:	4b1d      	ldr	r3, [pc, #116]	@ (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae26:	d102      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ae28:	4b1a      	ldr	r3, [pc, #104]	@ (800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ae2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae2c:	e02b      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae32:	e028      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae34:	4b16      	ldr	r3, [pc, #88]	@ (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae40:	d107      	bne.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fae4 	bl	800b414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae50:	e019      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae52:	2300      	movs	r3, #0
 800ae54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae56:	e016      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae58:	4b0d      	ldr	r3, [pc, #52]	@ (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae64:	d107      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae66:	f107 0318 	add.w	r3, r7, #24
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 f82a 	bl	800aec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae74:	e007      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae7a:	e004      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae80:	e001      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ae86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3740      	adds	r7, #64	@ 0x40
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	58024400 	.word	0x58024400
 800ae94:	017d7840 	.word	0x017d7840

0800ae98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ae9c:	f7fd ffea 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 800aea0:	4602      	mov	r2, r0
 800aea2:	4b06      	ldr	r3, [pc, #24]	@ (800aebc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	091b      	lsrs	r3, r3, #4
 800aea8:	f003 0307 	and.w	r3, r3, #7
 800aeac:	4904      	ldr	r1, [pc, #16]	@ (800aec0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aeae:	5ccb      	ldrb	r3, [r1, r3]
 800aeb0:	f003 031f 	and.w	r3, r3, #31
 800aeb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	58024400 	.word	0x58024400
 800aec0:	080150cc 	.word	0x080150cc

0800aec4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b089      	sub	sp, #36	@ 0x24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aecc:	4ba1      	ldr	r3, [pc, #644]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed0:	f003 0303 	and.w	r3, r3, #3
 800aed4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aed6:	4b9f      	ldr	r3, [pc, #636]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeda:	0b1b      	lsrs	r3, r3, #12
 800aedc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aee0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aee2:	4b9c      	ldr	r3, [pc, #624]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee6:	091b      	lsrs	r3, r3, #4
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aeee:	4b99      	ldr	r3, [pc, #612]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aef2:	08db      	lsrs	r3, r3, #3
 800aef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	fb02 f303 	mul.w	r3, r2, r3
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 8111 	beq.w	800b134 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	2b02      	cmp	r3, #2
 800af16:	f000 8083 	beq.w	800b020 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	f200 80a1 	bhi.w	800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d003      	beq.n	800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d056      	beq.n	800afdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af2e:	e099      	b.n	800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af30:	4b88      	ldr	r3, [pc, #544]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0320 	and.w	r3, r3, #32
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d02d      	beq.n	800af98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af3c:	4b85      	ldr	r3, [pc, #532]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	08db      	lsrs	r3, r3, #3
 800af42:	f003 0303 	and.w	r3, r3, #3
 800af46:	4a84      	ldr	r2, [pc, #528]	@ (800b158 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af48:	fa22 f303 	lsr.w	r3, r2, r3
 800af4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	ee07 3a90 	vmov	s15, r3
 800af54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af66:	4b7b      	ldr	r3, [pc, #492]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af76:	ed97 6a03 	vldr	s12, [r7, #12]
 800af7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af96:	e087      	b.n	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b160 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afaa:	4b6a      	ldr	r3, [pc, #424]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb2:	ee07 3a90 	vmov	s15, r3
 800afb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afba:	ed97 6a03 	vldr	s12, [r7, #12]
 800afbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afda:	e065      	b.n	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800afea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afee:	4b59      	ldr	r3, [pc, #356]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b002:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b01e:	e043      	b.n	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b032:	4b48      	ldr	r3, [pc, #288]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b042:	ed97 6a03 	vldr	s12, [r7, #12]
 800b046:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b062:	e021      	b.n	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b076:	4b37      	ldr	r3, [pc, #220]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b086:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b0a8:	4b2a      	ldr	r3, [pc, #168]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ac:	0a5b      	lsrs	r3, r3, #9
 800b0ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ce:	ee17 2a90 	vmov	r2, s15
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b0d6:	4b1f      	ldr	r3, [pc, #124]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0da:	0c1b      	lsrs	r3, r3, #16
 800b0dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0e0:	ee07 3a90 	vmov	s15, r3
 800b0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0fc:	ee17 2a90 	vmov	r2, s15
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b104:	4b13      	ldr	r3, [pc, #76]	@ (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b108:	0e1b      	lsrs	r3, r3, #24
 800b10a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b12a:	ee17 2a90 	vmov	r2, s15
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b132:	e008      	b.n	800b146 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	609a      	str	r2, [r3, #8]
}
 800b146:	bf00      	nop
 800b148:	3724      	adds	r7, #36	@ 0x24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	58024400 	.word	0x58024400
 800b158:	03d09000 	.word	0x03d09000
 800b15c:	46000000 	.word	0x46000000
 800b160:	4c742400 	.word	0x4c742400
 800b164:	4a742400 	.word	0x4a742400
 800b168:	4bbebc20 	.word	0x4bbebc20

0800b16c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b089      	sub	sp, #36	@ 0x24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b174:	4ba1      	ldr	r3, [pc, #644]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b178:	f003 0303 	and.w	r3, r3, #3
 800b17c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b17e:	4b9f      	ldr	r3, [pc, #636]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b182:	0d1b      	lsrs	r3, r3, #20
 800b184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b188:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b18a:	4b9c      	ldr	r3, [pc, #624]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b18e:	0a1b      	lsrs	r3, r3, #8
 800b190:	f003 0301 	and.w	r3, r3, #1
 800b194:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b196:	4b99      	ldr	r3, [pc, #612]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b19a:	08db      	lsrs	r3, r3, #3
 800b19c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	fb02 f303 	mul.w	r3, r2, r3
 800b1a6:	ee07 3a90 	vmov	s15, r3
 800b1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 8111 	beq.w	800b3dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	f000 8083 	beq.w	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	f200 80a1 	bhi.w	800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d056      	beq.n	800b284 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b1d6:	e099      	b.n	800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1d8:	4b88      	ldr	r3, [pc, #544]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0320 	and.w	r3, r3, #32
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d02d      	beq.n	800b240 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1e4:	4b85      	ldr	r3, [pc, #532]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	08db      	lsrs	r3, r3, #3
 800b1ea:	f003 0303 	and.w	r3, r3, #3
 800b1ee:	4a84      	ldr	r2, [pc, #528]	@ (800b400 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	ee07 3a90 	vmov	s15, r3
 800b1fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	ee07 3a90 	vmov	s15, r3
 800b206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b20e:	4b7b      	ldr	r3, [pc, #492]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b216:	ee07 3a90 	vmov	s15, r3
 800b21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b222:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b23a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b23e:	e087      	b.n	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b408 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b252:	4b6a      	ldr	r3, [pc, #424]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b25a:	ee07 3a90 	vmov	s15, r3
 800b25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b262:	ed97 6a03 	vldr	s12, [r7, #12]
 800b266:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b282:	e065      	b.n	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b296:	4b59      	ldr	r3, [pc, #356]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2c6:	e043      	b.n	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	ee07 3a90 	vmov	s15, r3
 800b2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2da:	4b48      	ldr	r3, [pc, #288]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b30a:	e021      	b.n	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b316:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31e:	4b37      	ldr	r3, [pc, #220]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b332:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b34e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b350:	4b2a      	ldr	r3, [pc, #168]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b354:	0a5b      	lsrs	r3, r3, #9
 800b356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b36a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b36e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b376:	ee17 2a90 	vmov	r2, s15
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b37e:	4b1f      	ldr	r3, [pc, #124]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b382:	0c1b      	lsrs	r3, r3, #16
 800b384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b388:	ee07 3a90 	vmov	s15, r3
 800b38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b394:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b398:	edd7 6a07 	vldr	s13, [r7, #28]
 800b39c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a4:	ee17 2a90 	vmov	r2, s15
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b3ac:	4b13      	ldr	r3, [pc, #76]	@ (800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3b0:	0e1b      	lsrs	r3, r3, #24
 800b3b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3d2:	ee17 2a90 	vmov	r2, s15
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b3da:	e008      	b.n	800b3ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	609a      	str	r2, [r3, #8]
}
 800b3ee:	bf00      	nop
 800b3f0:	3724      	adds	r7, #36	@ 0x24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	58024400 	.word	0x58024400
 800b400:	03d09000 	.word	0x03d09000
 800b404:	46000000 	.word	0x46000000
 800b408:	4c742400 	.word	0x4c742400
 800b40c:	4a742400 	.word	0x4a742400
 800b410:	4bbebc20 	.word	0x4bbebc20

0800b414 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b414:	b480      	push	{r7}
 800b416:	b089      	sub	sp, #36	@ 0x24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b41c:	4ba0      	ldr	r3, [pc, #640]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b420:	f003 0303 	and.w	r3, r3, #3
 800b424:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b426:	4b9e      	ldr	r3, [pc, #632]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42a:	091b      	lsrs	r3, r3, #4
 800b42c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b430:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b432:	4b9b      	ldr	r3, [pc, #620]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b43c:	4b98      	ldr	r3, [pc, #608]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b43e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b440:	08db      	lsrs	r3, r3, #3
 800b442:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	fb02 f303 	mul.w	r3, r2, r3
 800b44c:	ee07 3a90 	vmov	s15, r3
 800b450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b454:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 8111 	beq.w	800b682 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	2b02      	cmp	r3, #2
 800b464:	f000 8083 	beq.w	800b56e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	f200 80a1 	bhi.w	800b5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d003      	beq.n	800b47e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d056      	beq.n	800b52a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b47c:	e099      	b.n	800b5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b47e:	4b88      	ldr	r3, [pc, #544]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 0320 	and.w	r3, r3, #32
 800b486:	2b00      	cmp	r3, #0
 800b488:	d02d      	beq.n	800b4e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b48a:	4b85      	ldr	r3, [pc, #532]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	08db      	lsrs	r3, r3, #3
 800b490:	f003 0303 	and.w	r3, r3, #3
 800b494:	4a83      	ldr	r2, [pc, #524]	@ (800b6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b496:	fa22 f303 	lsr.w	r3, r2, r3
 800b49a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	ee07 3a90 	vmov	s15, r3
 800b4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4b4:	4b7a      	ldr	r3, [pc, #488]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4bc:	ee07 3a90 	vmov	s15, r3
 800b4c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b4e4:	e087      	b.n	800b5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	ee07 3a90 	vmov	s15, r3
 800b4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b6ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f8:	4b69      	ldr	r3, [pc, #420]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b500:	ee07 3a90 	vmov	s15, r3
 800b504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b508:	ed97 6a03 	vldr	s12, [r7, #12]
 800b50c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b51c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b520:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b528:	e065      	b.n	800b5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	ee07 3a90 	vmov	s15, r3
 800b530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b534:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53c:	4b58      	ldr	r3, [pc, #352]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b544:	ee07 3a90 	vmov	s15, r3
 800b548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b550:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b564:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b56c:	e043      	b.n	800b5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	ee07 3a90 	vmov	s15, r3
 800b574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b578:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b580:	4b47      	ldr	r3, [pc, #284]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b588:	ee07 3a90 	vmov	s15, r3
 800b58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b590:	ed97 6a03 	vldr	s12, [r7, #12]
 800b594:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5b0:	e021      	b.n	800b5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	ee07 3a90 	vmov	s15, r3
 800b5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b6ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c4:	4b36      	ldr	r3, [pc, #216]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b5f6:	4b2a      	ldr	r3, [pc, #168]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5fa:	0a5b      	lsrs	r3, r3, #9
 800b5fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b600:	ee07 3a90 	vmov	s15, r3
 800b604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b608:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b60c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b610:	edd7 6a07 	vldr	s13, [r7, #28]
 800b614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b61c:	ee17 2a90 	vmov	r2, s15
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b624:	4b1e      	ldr	r3, [pc, #120]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b628:	0c1b      	lsrs	r3, r3, #16
 800b62a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b62e:	ee07 3a90 	vmov	s15, r3
 800b632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b63a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b63e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b64a:	ee17 2a90 	vmov	r2, s15
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b652:	4b13      	ldr	r3, [pc, #76]	@ (800b6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b656:	0e1b      	lsrs	r3, r3, #24
 800b658:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b65c:	ee07 3a90 	vmov	s15, r3
 800b660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b664:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b66c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b678:	ee17 2a90 	vmov	r2, s15
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b680:	e008      	b.n	800b694 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	609a      	str	r2, [r3, #8]
}
 800b694:	bf00      	nop
 800b696:	3724      	adds	r7, #36	@ 0x24
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	58024400 	.word	0x58024400
 800b6a4:	03d09000 	.word	0x03d09000
 800b6a8:	46000000 	.word	0x46000000
 800b6ac:	4c742400 	.word	0x4c742400
 800b6b0:	4a742400 	.word	0x4a742400
 800b6b4:	4bbebc20 	.word	0x4bbebc20

0800b6b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6c6:	4b53      	ldr	r3, [pc, #332]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ca:	f003 0303 	and.w	r3, r3, #3
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	d101      	bne.n	800b6d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e099      	b.n	800b80a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b6d6:	4b4f      	ldr	r3, [pc, #316]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a4e      	ldr	r2, [pc, #312]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b6dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b6e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6e2:	f7f6 f9f9 	bl	8001ad8 <HAL_GetTick>
 800b6e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6e8:	e008      	b.n	800b6fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6ea:	f7f6 f9f5 	bl	8001ad8 <HAL_GetTick>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d901      	bls.n	800b6fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e086      	b.n	800b80a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6fc:	4b45      	ldr	r3, [pc, #276]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1f0      	bne.n	800b6ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b708:	4b42      	ldr	r3, [pc, #264]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	031b      	lsls	r3, r3, #12
 800b716:	493f      	ldr	r1, [pc, #252]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	3b01      	subs	r3, #1
 800b722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	3b01      	subs	r3, #1
 800b72c:	025b      	lsls	r3, r3, #9
 800b72e:	b29b      	uxth	r3, r3
 800b730:	431a      	orrs	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	3b01      	subs	r3, #1
 800b738:	041b      	lsls	r3, r3, #16
 800b73a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b73e:	431a      	orrs	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	3b01      	subs	r3, #1
 800b746:	061b      	lsls	r3, r3, #24
 800b748:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b74c:	4931      	ldr	r1, [pc, #196]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b74e:	4313      	orrs	r3, r2
 800b750:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b752:	4b30      	ldr	r3, [pc, #192]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b756:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	695b      	ldr	r3, [r3, #20]
 800b75e:	492d      	ldr	r1, [pc, #180]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b760:	4313      	orrs	r3, r2
 800b762:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b764:	4b2b      	ldr	r3, [pc, #172]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b768:	f023 0220 	bic.w	r2, r3, #32
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	4928      	ldr	r1, [pc, #160]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b772:	4313      	orrs	r3, r2
 800b774:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b776:	4b27      	ldr	r3, [pc, #156]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77a:	4a26      	ldr	r2, [pc, #152]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b77c:	f023 0310 	bic.w	r3, r3, #16
 800b780:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b782:	4b24      	ldr	r3, [pc, #144]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b784:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b786:	4b24      	ldr	r3, [pc, #144]	@ (800b818 <RCCEx_PLL2_Config+0x160>)
 800b788:	4013      	ands	r3, r2
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	69d2      	ldr	r2, [r2, #28]
 800b78e:	00d2      	lsls	r2, r2, #3
 800b790:	4920      	ldr	r1, [pc, #128]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b792:	4313      	orrs	r3, r2
 800b794:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b796:	4b1f      	ldr	r3, [pc, #124]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79a:	4a1e      	ldr	r2, [pc, #120]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b79c:	f043 0310 	orr.w	r3, r3, #16
 800b7a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d106      	bne.n	800b7b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7a8:	4b1a      	ldr	r3, [pc, #104]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ac:	4a19      	ldr	r2, [pc, #100]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b7ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b7b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7b4:	e00f      	b.n	800b7d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d106      	bne.n	800b7ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7bc:	4b15      	ldr	r3, [pc, #84]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c0:	4a14      	ldr	r2, [pc, #80]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b7c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7c8:	e005      	b.n	800b7d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7ca:	4b12      	ldr	r3, [pc, #72]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ce:	4a11      	ldr	r2, [pc, #68]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b7d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b7d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a0e      	ldr	r2, [pc, #56]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b7dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b7e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7e2:	f7f6 f979 	bl	8001ad8 <HAL_GetTick>
 800b7e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7e8:	e008      	b.n	800b7fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7ea:	f7f6 f975 	bl	8001ad8 <HAL_GetTick>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d901      	bls.n	800b7fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	e006      	b.n	800b80a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7fc:	4b05      	ldr	r3, [pc, #20]	@ (800b814 <RCCEx_PLL2_Config+0x15c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b804:	2b00      	cmp	r3, #0
 800b806:	d0f0      	beq.n	800b7ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	58024400 	.word	0x58024400
 800b818:	ffff0007 	.word	0xffff0007

0800b81c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b82a:	4b53      	ldr	r3, [pc, #332]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82e:	f003 0303 	and.w	r3, r3, #3
 800b832:	2b03      	cmp	r3, #3
 800b834:	d101      	bne.n	800b83a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e099      	b.n	800b96e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b83a:	4b4f      	ldr	r3, [pc, #316]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a4e      	ldr	r2, [pc, #312]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b846:	f7f6 f947 	bl	8001ad8 <HAL_GetTick>
 800b84a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b84c:	e008      	b.n	800b860 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b84e:	f7f6 f943 	bl	8001ad8 <HAL_GetTick>
 800b852:	4602      	mov	r2, r0
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	2b02      	cmp	r3, #2
 800b85a:	d901      	bls.n	800b860 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b85c:	2303      	movs	r3, #3
 800b85e:	e086      	b.n	800b96e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b860:	4b45      	ldr	r3, [pc, #276]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1f0      	bne.n	800b84e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b86c:	4b42      	ldr	r3, [pc, #264]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b870:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	051b      	lsls	r3, r3, #20
 800b87a:	493f      	ldr	r1, [pc, #252]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b87c:	4313      	orrs	r3, r2
 800b87e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	3b01      	subs	r3, #1
 800b886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	3b01      	subs	r3, #1
 800b890:	025b      	lsls	r3, r3, #9
 800b892:	b29b      	uxth	r3, r3
 800b894:	431a      	orrs	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	041b      	lsls	r3, r3, #16
 800b89e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b8a2:	431a      	orrs	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	061b      	lsls	r3, r3, #24
 800b8ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b8b0:	4931      	ldr	r1, [pc, #196]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8b6:	4b30      	ldr	r3, [pc, #192]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	492d      	ldr	r1, [pc, #180]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8c8:	4b2b      	ldr	r3, [pc, #172]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	4928      	ldr	r1, [pc, #160]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b8da:	4b27      	ldr	r3, [pc, #156]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8de:	4a26      	ldr	r2, [pc, #152]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b8e6:	4b24      	ldr	r3, [pc, #144]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8ea:	4b24      	ldr	r3, [pc, #144]	@ (800b97c <RCCEx_PLL3_Config+0x160>)
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	69d2      	ldr	r2, [r2, #28]
 800b8f2:	00d2      	lsls	r2, r2, #3
 800b8f4:	4920      	ldr	r1, [pc, #128]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b8fa:	4b1f      	ldr	r3, [pc, #124]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fe:	4a1e      	ldr	r2, [pc, #120]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b904:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b90c:	4b1a      	ldr	r3, [pc, #104]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b910:	4a19      	ldr	r2, [pc, #100]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b912:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b916:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b918:	e00f      	b.n	800b93a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d106      	bne.n	800b92e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b920:	4b15      	ldr	r3, [pc, #84]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b924:	4a14      	ldr	r2, [pc, #80]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b926:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b92a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b92c:	e005      	b.n	800b93a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b92e:	4b12      	ldr	r3, [pc, #72]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b932:	4a11      	ldr	r2, [pc, #68]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b934:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b938:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b93a:	4b0f      	ldr	r3, [pc, #60]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a0e      	ldr	r2, [pc, #56]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b946:	f7f6 f8c7 	bl	8001ad8 <HAL_GetTick>
 800b94a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b94c:	e008      	b.n	800b960 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b94e:	f7f6 f8c3 	bl	8001ad8 <HAL_GetTick>
 800b952:	4602      	mov	r2, r0
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d901      	bls.n	800b960 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e006      	b.n	800b96e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b960:	4b05      	ldr	r3, [pc, #20]	@ (800b978 <RCCEx_PLL3_Config+0x15c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d0f0      	beq.n	800b94e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	58024400 	.word	0x58024400
 800b97c:	ffff0007 	.word	0xffff0007

0800b980 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e10f      	b.n	800bbb2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a87      	ldr	r2, [pc, #540]	@ (800bbbc <HAL_SPI_Init+0x23c>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d00f      	beq.n	800b9c2 <HAL_SPI_Init+0x42>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a86      	ldr	r2, [pc, #536]	@ (800bbc0 <HAL_SPI_Init+0x240>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d00a      	beq.n	800b9c2 <HAL_SPI_Init+0x42>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a84      	ldr	r2, [pc, #528]	@ (800bbc4 <HAL_SPI_Init+0x244>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d005      	beq.n	800b9c2 <HAL_SPI_Init+0x42>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	2b0f      	cmp	r3, #15
 800b9bc:	d901      	bls.n	800b9c2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e0f7      	b.n	800bbb2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fbca 	bl	800c15c <SPI_GetPacketSize>
 800b9c8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a7b      	ldr	r2, [pc, #492]	@ (800bbbc <HAL_SPI_Init+0x23c>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d00c      	beq.n	800b9ee <HAL_SPI_Init+0x6e>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a79      	ldr	r2, [pc, #484]	@ (800bbc0 <HAL_SPI_Init+0x240>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d007      	beq.n	800b9ee <HAL_SPI_Init+0x6e>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a78      	ldr	r2, [pc, #480]	@ (800bbc4 <HAL_SPI_Init+0x244>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d002      	beq.n	800b9ee <HAL_SPI_Init+0x6e>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2b08      	cmp	r3, #8
 800b9ec:	d811      	bhi.n	800ba12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9f2:	4a72      	ldr	r2, [pc, #456]	@ (800bbbc <HAL_SPI_Init+0x23c>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d009      	beq.n	800ba0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a70      	ldr	r2, [pc, #448]	@ (800bbc0 <HAL_SPI_Init+0x240>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d004      	beq.n	800ba0c <HAL_SPI_Init+0x8c>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a6f      	ldr	r2, [pc, #444]	@ (800bbc4 <HAL_SPI_Init+0x244>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d104      	bne.n	800ba16 <HAL_SPI_Init+0x96>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b10      	cmp	r3, #16
 800ba10:	d901      	bls.n	800ba16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e0cd      	b.n	800bbb2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d106      	bne.n	800ba30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7f5 fb96 	bl	800115c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2202      	movs	r2, #2
 800ba34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f022 0201 	bic.w	r2, r2, #1
 800ba46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ba52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba5c:	d119      	bne.n	800ba92 <HAL_SPI_Init+0x112>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba66:	d103      	bne.n	800ba70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d008      	beq.n	800ba82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10c      	bne.n	800ba92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba80:	d107      	bne.n	800ba92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ba90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00f      	beq.n	800babe <HAL_SPI_Init+0x13e>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	2b06      	cmp	r3, #6
 800baa4:	d90b      	bls.n	800babe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	430a      	orrs	r2, r1
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	e007      	b.n	800bace <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bacc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	69da      	ldr	r2, [r3, #28]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad6:	431a      	orrs	r2, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	431a      	orrs	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bae0:	ea42 0103 	orr.w	r1, r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68da      	ldr	r2, [r3, #12]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	430a      	orrs	r2, r1
 800baee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf8:	431a      	orrs	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bafe:	431a      	orrs	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	431a      	orrs	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	431a      	orrs	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a1b      	ldr	r3, [r3, #32]
 800bb16:	431a      	orrs	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	431a      	orrs	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb22:	431a      	orrs	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	431a      	orrs	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb2e:	ea42 0103 	orr.w	r1, r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d113      	bne.n	800bb6e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bb6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0201 	bic.w	r2, r2, #1
 800bb7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00a      	beq.n	800bba0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	430a      	orrs	r2, r1
 800bb9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	40013000 	.word	0x40013000
 800bbc0:	40003800 	.word	0x40003800
 800bbc4:	40003c00 	.word	0x40003c00

0800bbc8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b08a      	sub	sp, #40	@ 0x28
 800bbcc:	af02      	add	r7, sp, #8
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	603b      	str	r3, [r7, #0]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3320      	adds	r3, #32
 800bbde:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d101      	bne.n	800bbf2 <HAL_SPI_Transmit+0x2a>
 800bbee:	2302      	movs	r3, #2
 800bbf0:	e1e1      	b.n	800bfb6 <HAL_SPI_Transmit+0x3ee>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbfa:	f7f5 ff6d 	bl	8001ad8 <HAL_GetTick>
 800bbfe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d007      	beq.n	800bc1c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800bc18:	7efb      	ldrb	r3, [r7, #27]
 800bc1a:	e1cc      	b.n	800bfb6 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d002      	beq.n	800bc28 <HAL_SPI_Transmit+0x60>
 800bc22:	88fb      	ldrh	r3, [r7, #6]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d107      	bne.n	800bc38 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800bc34:	7efb      	ldrb	r3, [r7, #27]
 800bc36:	e1be      	b.n	800bfb6 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2203      	movs	r2, #3
 800bc3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	88fa      	ldrh	r2, [r7, #6]
 800bc52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	88fa      	ldrh	r2, [r7, #6]
 800bc5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bc88:	d108      	bne.n	800bc9c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	e009      	b.n	800bcb0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bcae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	4b96      	ldr	r3, [pc, #600]	@ (800bf10 <HAL_SPI_Transmit+0x348>)
 800bcb8:	4013      	ands	r3, r2
 800bcba:	88f9      	ldrh	r1, [r7, #6]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	6812      	ldr	r2, [r2, #0]
 800bcc0:	430b      	orrs	r3, r1
 800bcc2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f042 0201 	orr.w	r2, r2, #1
 800bcd2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bcdc:	d107      	bne.n	800bcee <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bcec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	2b0f      	cmp	r3, #15
 800bcf4:	d947      	bls.n	800bd86 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bcf6:	e03f      	b.n	800bd78 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	f003 0302 	and.w	r3, r3, #2
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d114      	bne.n	800bd30 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6812      	ldr	r2, [r2, #0]
 800bd10:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd16:	1d1a      	adds	r2, r3, #4
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	3b01      	subs	r3, #1
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bd2e:	e023      	b.n	800bd78 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd30:	f7f5 fed2 	bl	8001ad8 <HAL_GetTick>
 800bd34:	4602      	mov	r2, r0
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d803      	bhi.n	800bd48 <HAL_SPI_Transmit+0x180>
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd46:	d102      	bne.n	800bd4e <HAL_SPI_Transmit+0x186>
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d114      	bne.n	800bd78 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 f936 	bl	800bfc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800bd74:	2303      	movs	r3, #3
 800bd76:	e11e      	b.n	800bfb6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1b9      	bne.n	800bcf8 <HAL_SPI_Transmit+0x130>
 800bd84:	e0f1      	b.n	800bf6a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	2b07      	cmp	r3, #7
 800bd8c:	f240 80e6 	bls.w	800bf5c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bd90:	e05d      	b.n	800be4e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	695b      	ldr	r3, [r3, #20]
 800bd98:	f003 0302 	and.w	r3, r3, #2
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d132      	bne.n	800be06 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d918      	bls.n	800bdde <HAL_SPI_Transmit+0x216>
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d014      	beq.n	800bdde <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	6812      	ldr	r2, [r2, #0]
 800bdbe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdc4:	1d1a      	adds	r2, r3, #4
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	3b02      	subs	r3, #2
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bddc:	e037      	b.n	800be4e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bde2:	881a      	ldrh	r2, [r3, #0]
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdec:	1c9a      	adds	r2, r3, #2
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800be04:	e023      	b.n	800be4e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be06:	f7f5 fe67 	bl	8001ad8 <HAL_GetTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	429a      	cmp	r2, r3
 800be14:	d803      	bhi.n	800be1e <HAL_SPI_Transmit+0x256>
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1c:	d102      	bne.n	800be24 <HAL_SPI_Transmit+0x25c>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d114      	bne.n	800be4e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f000 f8cb 	bl	800bfc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800be4a:	2303      	movs	r3, #3
 800be4c:	e0b3      	b.n	800bfb6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be54:	b29b      	uxth	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d19b      	bne.n	800bd92 <HAL_SPI_Transmit+0x1ca>
 800be5a:	e086      	b.n	800bf6a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	f003 0302 	and.w	r3, r3, #2
 800be66:	2b02      	cmp	r3, #2
 800be68:	d154      	bne.n	800bf14 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be70:	b29b      	uxth	r3, r3
 800be72:	2b03      	cmp	r3, #3
 800be74:	d918      	bls.n	800bea8 <HAL_SPI_Transmit+0x2e0>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be7a:	2b40      	cmp	r3, #64	@ 0x40
 800be7c:	d914      	bls.n	800bea8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	6812      	ldr	r2, [r2, #0]
 800be88:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be8e:	1d1a      	adds	r2, r3, #4
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	3b04      	subs	r3, #4
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bea6:	e059      	b.n	800bf5c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800beae:	b29b      	uxth	r3, r3
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d917      	bls.n	800bee4 <HAL_SPI_Transmit+0x31c>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d013      	beq.n	800bee4 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bec0:	881a      	ldrh	r2, [r3, #0]
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beca:	1c9a      	adds	r2, r3, #2
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	3b02      	subs	r3, #2
 800beda:	b29a      	uxth	r2, r3
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bee2:	e03b      	b.n	800bf5c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3320      	adds	r3, #32
 800beee:	7812      	ldrb	r2, [r2, #0]
 800bef0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	3b01      	subs	r3, #1
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf0e:	e025      	b.n	800bf5c <HAL_SPI_Transmit+0x394>
 800bf10:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf14:	f7f5 fde0 	bl	8001ad8 <HAL_GetTick>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d803      	bhi.n	800bf2c <HAL_SPI_Transmit+0x364>
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2a:	d102      	bne.n	800bf32 <HAL_SPI_Transmit+0x36a>
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d114      	bne.n	800bf5c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 f844 	bl	800bfc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e02c      	b.n	800bfb6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f47f af79 	bne.w	800be5c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2200      	movs	r2, #0
 800bf72:	2108      	movs	r1, #8
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f000 f8c3 	bl	800c100 <SPI_WaitOnFlagUntilTimeout>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d007      	beq.n	800bf90 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf86:	f043 0220 	orr.w	r2, r3, #32
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f000 f815 	bl	800bfc0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d001      	beq.n	800bfb4 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e000      	b.n	800bfb6 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800bfb4:	7efb      	ldrb	r3, [r7, #27]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3720      	adds	r7, #32
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop

0800bfc0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	699a      	ldr	r2, [r3, #24]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f042 0208 	orr.w	r2, r2, #8
 800bfde:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	699a      	ldr	r2, [r3, #24]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f042 0210 	orr.w	r2, r2, #16
 800bfee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f022 0201 	bic.w	r2, r2, #1
 800bffe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6919      	ldr	r1, [r3, #16]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	4b3c      	ldr	r3, [pc, #240]	@ (800c0fc <SPI_CloseTransfer+0x13c>)
 800c00c:	400b      	ands	r3, r1
 800c00e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	689a      	ldr	r2, [r3, #8]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c01e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b04      	cmp	r3, #4
 800c02a:	d014      	beq.n	800c056 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f003 0320 	and.w	r3, r3, #32
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00f      	beq.n	800c056 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c03c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	699a      	ldr	r2, [r3, #24]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f042 0220 	orr.w	r2, r2, #32
 800c054:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b03      	cmp	r3, #3
 800c060:	d014      	beq.n	800c08c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00f      	beq.n	800c08c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c072:	f043 0204 	orr.w	r2, r3, #4
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	699a      	ldr	r2, [r3, #24]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c08a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00f      	beq.n	800c0b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c09c:	f043 0201 	orr.w	r2, r3, #1
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	699a      	ldr	r2, [r3, #24]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00f      	beq.n	800c0e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0c6:	f043 0208 	orr.w	r2, r3, #8
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c0de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c0f0:	bf00      	nop
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	fffffc90 	.word	0xfffffc90

0800c100 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	603b      	str	r3, [r7, #0]
 800c10c:	4613      	mov	r3, r2
 800c10e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c110:	e010      	b.n	800c134 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c112:	f7f5 fce1 	bl	8001ad8 <HAL_GetTick>
 800c116:	4602      	mov	r2, r0
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	1ad3      	subs	r3, r2, r3
 800c11c:	683a      	ldr	r2, [r7, #0]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d803      	bhi.n	800c12a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c128:	d102      	bne.n	800c130 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c130:	2303      	movs	r3, #3
 800c132:	e00f      	b.n	800c154 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	695a      	ldr	r2, [r3, #20]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	4013      	ands	r3, r2
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	429a      	cmp	r2, r3
 800c142:	bf0c      	ite	eq
 800c144:	2301      	moveq	r3, #1
 800c146:	2300      	movne	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	461a      	mov	r2, r3
 800c14c:	79fb      	ldrb	r3, [r7, #7]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d0df      	beq.n	800c112 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c168:	095b      	lsrs	r3, r3, #5
 800c16a:	3301      	adds	r3, #1
 800c16c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	3301      	adds	r3, #1
 800c174:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	3307      	adds	r3, #7
 800c17a:	08db      	lsrs	r3, r3, #3
 800c17c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	fb02 f303 	mul.w	r3, r2, r3
}
 800c186:	4618      	mov	r0, r3
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d101      	bne.n	800c1a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e049      	b.n	800c238 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d106      	bne.n	800c1be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7f5 fb9b 	bl	80018f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	f000 fd71 	bl	800ccb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b01      	cmp	r3, #1
 800c252:	d001      	beq.n	800c258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e054      	b.n	800c302 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68da      	ldr	r2, [r3, #12]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f042 0201 	orr.w	r2, r2, #1
 800c26e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a26      	ldr	r2, [pc, #152]	@ (800c310 <HAL_TIM_Base_Start_IT+0xd0>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d022      	beq.n	800c2c0 <HAL_TIM_Base_Start_IT+0x80>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c282:	d01d      	beq.n	800c2c0 <HAL_TIM_Base_Start_IT+0x80>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a22      	ldr	r2, [pc, #136]	@ (800c314 <HAL_TIM_Base_Start_IT+0xd4>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d018      	beq.n	800c2c0 <HAL_TIM_Base_Start_IT+0x80>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a21      	ldr	r2, [pc, #132]	@ (800c318 <HAL_TIM_Base_Start_IT+0xd8>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d013      	beq.n	800c2c0 <HAL_TIM_Base_Start_IT+0x80>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a1f      	ldr	r2, [pc, #124]	@ (800c31c <HAL_TIM_Base_Start_IT+0xdc>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00e      	beq.n	800c2c0 <HAL_TIM_Base_Start_IT+0x80>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a1e      	ldr	r2, [pc, #120]	@ (800c320 <HAL_TIM_Base_Start_IT+0xe0>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d009      	beq.n	800c2c0 <HAL_TIM_Base_Start_IT+0x80>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c324 <HAL_TIM_Base_Start_IT+0xe4>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d004      	beq.n	800c2c0 <HAL_TIM_Base_Start_IT+0x80>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c328 <HAL_TIM_Base_Start_IT+0xe8>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d115      	bne.n	800c2ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	689a      	ldr	r2, [r3, #8]
 800c2c6:	4b19      	ldr	r3, [pc, #100]	@ (800c32c <HAL_TIM_Base_Start_IT+0xec>)
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2b06      	cmp	r3, #6
 800c2d0:	d015      	beq.n	800c2fe <HAL_TIM_Base_Start_IT+0xbe>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2d8:	d011      	beq.n	800c2fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f042 0201 	orr.w	r2, r2, #1
 800c2e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2ea:	e008      	b.n	800c2fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f042 0201 	orr.w	r2, r2, #1
 800c2fa:	601a      	str	r2, [r3, #0]
 800c2fc:	e000      	b.n	800c300 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	40010000 	.word	0x40010000
 800c314:	40000400 	.word	0x40000400
 800c318:	40000800 	.word	0x40000800
 800c31c:	40000c00 	.word	0x40000c00
 800c320:	40010400 	.word	0x40010400
 800c324:	40001800 	.word	0x40001800
 800c328:	40014000 	.word	0x40014000
 800c32c:	00010007 	.word	0x00010007

0800c330 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e049      	b.n	800c3d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d106      	bne.n	800c35c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f841 	bl	800c3de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2202      	movs	r2, #2
 800c360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	3304      	adds	r3, #4
 800c36c:	4619      	mov	r1, r3
 800c36e:	4610      	mov	r0, r2
 800c370:	f000 fca2 	bl	800ccb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c3e6:	bf00      	nop
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
	...

0800c3f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d109      	bne.n	800c418 <HAL_TIM_PWM_Start+0x24>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	bf14      	ite	ne
 800c410:	2301      	movne	r3, #1
 800c412:	2300      	moveq	r3, #0
 800c414:	b2db      	uxtb	r3, r3
 800c416:	e03c      	b.n	800c492 <HAL_TIM_PWM_Start+0x9e>
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2b04      	cmp	r3, #4
 800c41c:	d109      	bne.n	800c432 <HAL_TIM_PWM_Start+0x3e>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b01      	cmp	r3, #1
 800c428:	bf14      	ite	ne
 800c42a:	2301      	movne	r3, #1
 800c42c:	2300      	moveq	r3, #0
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	e02f      	b.n	800c492 <HAL_TIM_PWM_Start+0x9e>
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	2b08      	cmp	r3, #8
 800c436:	d109      	bne.n	800c44c <HAL_TIM_PWM_Start+0x58>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b01      	cmp	r3, #1
 800c442:	bf14      	ite	ne
 800c444:	2301      	movne	r3, #1
 800c446:	2300      	moveq	r3, #0
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	e022      	b.n	800c492 <HAL_TIM_PWM_Start+0x9e>
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	2b0c      	cmp	r3, #12
 800c450:	d109      	bne.n	800c466 <HAL_TIM_PWM_Start+0x72>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	bf14      	ite	ne
 800c45e:	2301      	movne	r3, #1
 800c460:	2300      	moveq	r3, #0
 800c462:	b2db      	uxtb	r3, r3
 800c464:	e015      	b.n	800c492 <HAL_TIM_PWM_Start+0x9e>
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	2b10      	cmp	r3, #16
 800c46a:	d109      	bne.n	800c480 <HAL_TIM_PWM_Start+0x8c>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b01      	cmp	r3, #1
 800c476:	bf14      	ite	ne
 800c478:	2301      	movne	r3, #1
 800c47a:	2300      	moveq	r3, #0
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	e008      	b.n	800c492 <HAL_TIM_PWM_Start+0x9e>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b01      	cmp	r3, #1
 800c48a:	bf14      	ite	ne
 800c48c:	2301      	movne	r3, #1
 800c48e:	2300      	moveq	r3, #0
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b00      	cmp	r3, #0
 800c494:	d001      	beq.n	800c49a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c496:	2301      	movs	r3, #1
 800c498:	e0a1      	b.n	800c5de <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d104      	bne.n	800c4aa <HAL_TIM_PWM_Start+0xb6>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c4a8:	e023      	b.n	800c4f2 <HAL_TIM_PWM_Start+0xfe>
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2b04      	cmp	r3, #4
 800c4ae:	d104      	bne.n	800c4ba <HAL_TIM_PWM_Start+0xc6>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c4b8:	e01b      	b.n	800c4f2 <HAL_TIM_PWM_Start+0xfe>
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b08      	cmp	r3, #8
 800c4be:	d104      	bne.n	800c4ca <HAL_TIM_PWM_Start+0xd6>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2202      	movs	r2, #2
 800c4c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4c8:	e013      	b.n	800c4f2 <HAL_TIM_PWM_Start+0xfe>
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b0c      	cmp	r3, #12
 800c4ce:	d104      	bne.n	800c4da <HAL_TIM_PWM_Start+0xe6>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c4d8:	e00b      	b.n	800c4f2 <HAL_TIM_PWM_Start+0xfe>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b10      	cmp	r3, #16
 800c4de:	d104      	bne.n	800c4ea <HAL_TIM_PWM_Start+0xf6>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c4e8:	e003      	b.n	800c4f2 <HAL_TIM_PWM_Start+0xfe>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 ffea 	bl	800d4d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a38      	ldr	r2, [pc, #224]	@ (800c5e8 <HAL_TIM_PWM_Start+0x1f4>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d013      	beq.n	800c532 <HAL_TIM_PWM_Start+0x13e>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a37      	ldr	r2, [pc, #220]	@ (800c5ec <HAL_TIM_PWM_Start+0x1f8>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d00e      	beq.n	800c532 <HAL_TIM_PWM_Start+0x13e>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a35      	ldr	r2, [pc, #212]	@ (800c5f0 <HAL_TIM_PWM_Start+0x1fc>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d009      	beq.n	800c532 <HAL_TIM_PWM_Start+0x13e>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a34      	ldr	r2, [pc, #208]	@ (800c5f4 <HAL_TIM_PWM_Start+0x200>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d004      	beq.n	800c532 <HAL_TIM_PWM_Start+0x13e>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a32      	ldr	r2, [pc, #200]	@ (800c5f8 <HAL_TIM_PWM_Start+0x204>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d101      	bne.n	800c536 <HAL_TIM_PWM_Start+0x142>
 800c532:	2301      	movs	r3, #1
 800c534:	e000      	b.n	800c538 <HAL_TIM_PWM_Start+0x144>
 800c536:	2300      	movs	r3, #0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d007      	beq.n	800c54c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c54a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a25      	ldr	r2, [pc, #148]	@ (800c5e8 <HAL_TIM_PWM_Start+0x1f4>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d022      	beq.n	800c59c <HAL_TIM_PWM_Start+0x1a8>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c55e:	d01d      	beq.n	800c59c <HAL_TIM_PWM_Start+0x1a8>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a25      	ldr	r2, [pc, #148]	@ (800c5fc <HAL_TIM_PWM_Start+0x208>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d018      	beq.n	800c59c <HAL_TIM_PWM_Start+0x1a8>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a24      	ldr	r2, [pc, #144]	@ (800c600 <HAL_TIM_PWM_Start+0x20c>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d013      	beq.n	800c59c <HAL_TIM_PWM_Start+0x1a8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a22      	ldr	r2, [pc, #136]	@ (800c604 <HAL_TIM_PWM_Start+0x210>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d00e      	beq.n	800c59c <HAL_TIM_PWM_Start+0x1a8>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a1a      	ldr	r2, [pc, #104]	@ (800c5ec <HAL_TIM_PWM_Start+0x1f8>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d009      	beq.n	800c59c <HAL_TIM_PWM_Start+0x1a8>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a1e      	ldr	r2, [pc, #120]	@ (800c608 <HAL_TIM_PWM_Start+0x214>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d004      	beq.n	800c59c <HAL_TIM_PWM_Start+0x1a8>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a16      	ldr	r2, [pc, #88]	@ (800c5f0 <HAL_TIM_PWM_Start+0x1fc>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d115      	bne.n	800c5c8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	689a      	ldr	r2, [r3, #8]
 800c5a2:	4b1a      	ldr	r3, [pc, #104]	@ (800c60c <HAL_TIM_PWM_Start+0x218>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b06      	cmp	r3, #6
 800c5ac:	d015      	beq.n	800c5da <HAL_TIM_PWM_Start+0x1e6>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5b4:	d011      	beq.n	800c5da <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f042 0201 	orr.w	r2, r2, #1
 800c5c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5c6:	e008      	b.n	800c5da <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f042 0201 	orr.w	r2, r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	e000      	b.n	800c5dc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	40010000 	.word	0x40010000
 800c5ec:	40010400 	.word	0x40010400
 800c5f0:	40014000 	.word	0x40014000
 800c5f4:	40014400 	.word	0x40014400
 800c5f8:	40014800 	.word	0x40014800
 800c5fc:	40000400 	.word	0x40000400
 800c600:	40000800 	.word	0x40000800
 800c604:	40000c00 	.word	0x40000c00
 800c608:	40001800 	.word	0x40001800
 800c60c:	00010007 	.word	0x00010007

0800c610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	f003 0302 	and.w	r3, r3, #2
 800c622:	2b02      	cmp	r3, #2
 800c624:	d122      	bne.n	800c66c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	f003 0302 	and.w	r3, r3, #2
 800c630:	2b02      	cmp	r3, #2
 800c632:	d11b      	bne.n	800c66c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f06f 0202 	mvn.w	r2, #2
 800c63c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2201      	movs	r2, #1
 800c642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	f003 0303 	and.w	r3, r3, #3
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d003      	beq.n	800c65a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fb12 	bl	800cc7c <HAL_TIM_IC_CaptureCallback>
 800c658:	e005      	b.n	800c666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fb04 	bl	800cc68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fb15 	bl	800cc90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	f003 0304 	and.w	r3, r3, #4
 800c676:	2b04      	cmp	r3, #4
 800c678:	d122      	bne.n	800c6c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	f003 0304 	and.w	r3, r3, #4
 800c684:	2b04      	cmp	r3, #4
 800c686:	d11b      	bne.n	800c6c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f06f 0204 	mvn.w	r2, #4
 800c690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2202      	movs	r2, #2
 800c696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d003      	beq.n	800c6ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fae8 	bl	800cc7c <HAL_TIM_IC_CaptureCallback>
 800c6ac:	e005      	b.n	800c6ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fada 	bl	800cc68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 faeb 	bl	800cc90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	f003 0308 	and.w	r3, r3, #8
 800c6ca:	2b08      	cmp	r3, #8
 800c6cc:	d122      	bne.n	800c714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	f003 0308 	and.w	r3, r3, #8
 800c6d8:	2b08      	cmp	r3, #8
 800c6da:	d11b      	bne.n	800c714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f06f 0208 	mvn.w	r2, #8
 800c6e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2204      	movs	r2, #4
 800c6ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	f003 0303 	and.w	r3, r3, #3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d003      	beq.n	800c702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fabe 	bl	800cc7c <HAL_TIM_IC_CaptureCallback>
 800c700:	e005      	b.n	800c70e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fab0 	bl	800cc68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 fac1 	bl	800cc90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	f003 0310 	and.w	r3, r3, #16
 800c71e:	2b10      	cmp	r3, #16
 800c720:	d122      	bne.n	800c768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	f003 0310 	and.w	r3, r3, #16
 800c72c:	2b10      	cmp	r3, #16
 800c72e:	d11b      	bne.n	800c768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f06f 0210 	mvn.w	r2, #16
 800c738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2208      	movs	r2, #8
 800c73e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	69db      	ldr	r3, [r3, #28]
 800c746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d003      	beq.n	800c756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 fa94 	bl	800cc7c <HAL_TIM_IC_CaptureCallback>
 800c754:	e005      	b.n	800c762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fa86 	bl	800cc68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fa97 	bl	800cc90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b01      	cmp	r3, #1
 800c774:	d10e      	bne.n	800c794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	f003 0301 	and.w	r3, r3, #1
 800c780:	2b01      	cmp	r3, #1
 800c782:	d107      	bne.n	800c794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f06f 0201 	mvn.w	r2, #1
 800c78c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7f4 fb92 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	691b      	ldr	r3, [r3, #16]
 800c79a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c79e:	2b80      	cmp	r3, #128	@ 0x80
 800c7a0:	d10e      	bne.n	800c7c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7ac:	2b80      	cmp	r3, #128	@ 0x80
 800c7ae:	d107      	bne.n	800c7c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 ffc6 	bl	800d74c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7ce:	d10e      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7da:	2b80      	cmp	r3, #128	@ 0x80
 800c7dc:	d107      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c7e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 ffb9 	bl	800d760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f8:	2b40      	cmp	r3, #64	@ 0x40
 800c7fa:	d10e      	bne.n	800c81a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c806:	2b40      	cmp	r3, #64	@ 0x40
 800c808:	d107      	bne.n	800c81a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fa45 	bl	800cca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	2b20      	cmp	r3, #32
 800c826:	d10e      	bne.n	800c846 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b20      	cmp	r3, #32
 800c834:	d107      	bne.n	800c846 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f06f 0220 	mvn.w	r2, #32
 800c83e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 ff79 	bl	800d738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c846:	bf00      	nop
 800c848:	3708      	adds	r7, #8
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
	...

0800c850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c85c:	2300      	movs	r3, #0
 800c85e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c866:	2b01      	cmp	r3, #1
 800c868:	d101      	bne.n	800c86e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c86a:	2302      	movs	r3, #2
 800c86c:	e0ff      	b.n	800ca6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b14      	cmp	r3, #20
 800c87a:	f200 80f0 	bhi.w	800ca5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c87e:	a201      	add	r2, pc, #4	@ (adr r2, 800c884 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c884:	0800c8d9 	.word	0x0800c8d9
 800c888:	0800ca5f 	.word	0x0800ca5f
 800c88c:	0800ca5f 	.word	0x0800ca5f
 800c890:	0800ca5f 	.word	0x0800ca5f
 800c894:	0800c919 	.word	0x0800c919
 800c898:	0800ca5f 	.word	0x0800ca5f
 800c89c:	0800ca5f 	.word	0x0800ca5f
 800c8a0:	0800ca5f 	.word	0x0800ca5f
 800c8a4:	0800c95b 	.word	0x0800c95b
 800c8a8:	0800ca5f 	.word	0x0800ca5f
 800c8ac:	0800ca5f 	.word	0x0800ca5f
 800c8b0:	0800ca5f 	.word	0x0800ca5f
 800c8b4:	0800c99b 	.word	0x0800c99b
 800c8b8:	0800ca5f 	.word	0x0800ca5f
 800c8bc:	0800ca5f 	.word	0x0800ca5f
 800c8c0:	0800ca5f 	.word	0x0800ca5f
 800c8c4:	0800c9dd 	.word	0x0800c9dd
 800c8c8:	0800ca5f 	.word	0x0800ca5f
 800c8cc:	0800ca5f 	.word	0x0800ca5f
 800c8d0:	0800ca5f 	.word	0x0800ca5f
 800c8d4:	0800ca1d 	.word	0x0800ca1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f000 fa84 	bl	800cdec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	699a      	ldr	r2, [r3, #24]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f042 0208 	orr.w	r2, r2, #8
 800c8f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	699a      	ldr	r2, [r3, #24]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f022 0204 	bic.w	r2, r2, #4
 800c902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6999      	ldr	r1, [r3, #24]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	691a      	ldr	r2, [r3, #16]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	430a      	orrs	r2, r1
 800c914:	619a      	str	r2, [r3, #24]
      break;
 800c916:	e0a5      	b.n	800ca64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68b9      	ldr	r1, [r7, #8]
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 faf4 	bl	800cf0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	699a      	ldr	r2, [r3, #24]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	699a      	ldr	r2, [r3, #24]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	6999      	ldr	r1, [r3, #24]
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	021a      	lsls	r2, r3, #8
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	430a      	orrs	r2, r1
 800c956:	619a      	str	r2, [r3, #24]
      break;
 800c958:	e084      	b.n	800ca64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68b9      	ldr	r1, [r7, #8]
 800c960:	4618      	mov	r0, r3
 800c962:	f000 fb5d 	bl	800d020 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	69da      	ldr	r2, [r3, #28]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f042 0208 	orr.w	r2, r2, #8
 800c974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	69da      	ldr	r2, [r3, #28]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f022 0204 	bic.w	r2, r2, #4
 800c984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	69d9      	ldr	r1, [r3, #28]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	691a      	ldr	r2, [r3, #16]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	430a      	orrs	r2, r1
 800c996:	61da      	str	r2, [r3, #28]
      break;
 800c998:	e064      	b.n	800ca64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	68b9      	ldr	r1, [r7, #8]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 fbc5 	bl	800d130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	69da      	ldr	r2, [r3, #28]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	69da      	ldr	r2, [r3, #28]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c9c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	69d9      	ldr	r1, [r3, #28]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	021a      	lsls	r2, r3, #8
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	430a      	orrs	r2, r1
 800c9d8:	61da      	str	r2, [r3, #28]
      break;
 800c9da:	e043      	b.n	800ca64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68b9      	ldr	r1, [r7, #8]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f000 fc0e 	bl	800d204 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f042 0208 	orr.w	r2, r2, #8
 800c9f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f022 0204 	bic.w	r2, r2, #4
 800ca06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	691a      	ldr	r2, [r3, #16]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ca1a:	e023      	b.n	800ca64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68b9      	ldr	r1, [r7, #8]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 fc52 	bl	800d2cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	021a      	lsls	r2, r3, #8
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	430a      	orrs	r2, r1
 800ca5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ca5c:	e002      	b.n	800ca64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	75fb      	strb	r3, [r7, #23]
      break;
 800ca62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3718      	adds	r7, #24
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop

0800ca78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d101      	bne.n	800ca94 <HAL_TIM_ConfigClockSource+0x1c>
 800ca90:	2302      	movs	r3, #2
 800ca92:	e0dc      	b.n	800cc4e <HAL_TIM_ConfigClockSource+0x1d6>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2202      	movs	r2, #2
 800caa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	4b6a      	ldr	r3, [pc, #424]	@ (800cc58 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cab0:	4013      	ands	r3, r2
 800cab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800caba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a64      	ldr	r2, [pc, #400]	@ (800cc5c <HAL_TIM_ConfigClockSource+0x1e4>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	f000 80a9 	beq.w	800cc22 <HAL_TIM_ConfigClockSource+0x1aa>
 800cad0:	4a62      	ldr	r2, [pc, #392]	@ (800cc5c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	f200 80ae 	bhi.w	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cad8:	4a61      	ldr	r2, [pc, #388]	@ (800cc60 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	f000 80a1 	beq.w	800cc22 <HAL_TIM_ConfigClockSource+0x1aa>
 800cae0:	4a5f      	ldr	r2, [pc, #380]	@ (800cc60 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	f200 80a6 	bhi.w	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cae8:	4a5e      	ldr	r2, [pc, #376]	@ (800cc64 <HAL_TIM_ConfigClockSource+0x1ec>)
 800caea:	4293      	cmp	r3, r2
 800caec:	f000 8099 	beq.w	800cc22 <HAL_TIM_ConfigClockSource+0x1aa>
 800caf0:	4a5c      	ldr	r2, [pc, #368]	@ (800cc64 <HAL_TIM_ConfigClockSource+0x1ec>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	f200 809e 	bhi.w	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800caf8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cafc:	f000 8091 	beq.w	800cc22 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cb04:	f200 8096 	bhi.w	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb0c:	f000 8089 	beq.w	800cc22 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb14:	f200 808e 	bhi.w	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb1c:	d03e      	beq.n	800cb9c <HAL_TIM_ConfigClockSource+0x124>
 800cb1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb22:	f200 8087 	bhi.w	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb2a:	f000 8086 	beq.w	800cc3a <HAL_TIM_ConfigClockSource+0x1c2>
 800cb2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb32:	d87f      	bhi.n	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb34:	2b70      	cmp	r3, #112	@ 0x70
 800cb36:	d01a      	beq.n	800cb6e <HAL_TIM_ConfigClockSource+0xf6>
 800cb38:	2b70      	cmp	r3, #112	@ 0x70
 800cb3a:	d87b      	bhi.n	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb3c:	2b60      	cmp	r3, #96	@ 0x60
 800cb3e:	d050      	beq.n	800cbe2 <HAL_TIM_ConfigClockSource+0x16a>
 800cb40:	2b60      	cmp	r3, #96	@ 0x60
 800cb42:	d877      	bhi.n	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb44:	2b50      	cmp	r3, #80	@ 0x50
 800cb46:	d03c      	beq.n	800cbc2 <HAL_TIM_ConfigClockSource+0x14a>
 800cb48:	2b50      	cmp	r3, #80	@ 0x50
 800cb4a:	d873      	bhi.n	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb4c:	2b40      	cmp	r3, #64	@ 0x40
 800cb4e:	d058      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x18a>
 800cb50:	2b40      	cmp	r3, #64	@ 0x40
 800cb52:	d86f      	bhi.n	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb54:	2b30      	cmp	r3, #48	@ 0x30
 800cb56:	d064      	beq.n	800cc22 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb58:	2b30      	cmp	r3, #48	@ 0x30
 800cb5a:	d86b      	bhi.n	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb5c:	2b20      	cmp	r3, #32
 800cb5e:	d060      	beq.n	800cc22 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb60:	2b20      	cmp	r3, #32
 800cb62:	d867      	bhi.n	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d05c      	beq.n	800cc22 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb68:	2b10      	cmp	r3, #16
 800cb6a:	d05a      	beq.n	800cc22 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb6c:	e062      	b.n	800cc34 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cb7e:	f000 fc89 	bl	800d494 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cb90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68ba      	ldr	r2, [r7, #8]
 800cb98:	609a      	str	r2, [r3, #8]
      break;
 800cb9a:	e04f      	b.n	800cc3c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cbac:	f000 fc72 	bl	800d494 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	689a      	ldr	r2, [r3, #8]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cbbe:	609a      	str	r2, [r3, #8]
      break;
 800cbc0:	e03c      	b.n	800cc3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbce:	461a      	mov	r2, r3
 800cbd0:	f000 fbe2 	bl	800d398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2150      	movs	r1, #80	@ 0x50
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 fc3c 	bl	800d458 <TIM_ITRx_SetConfig>
      break;
 800cbe0:	e02c      	b.n	800cc3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cbee:	461a      	mov	r2, r3
 800cbf0:	f000 fc01 	bl	800d3f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2160      	movs	r1, #96	@ 0x60
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 fc2c 	bl	800d458 <TIM_ITRx_SetConfig>
      break;
 800cc00:	e01c      	b.n	800cc3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc0e:	461a      	mov	r2, r3
 800cc10:	f000 fbc2 	bl	800d398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2140      	movs	r1, #64	@ 0x40
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fc1c 	bl	800d458 <TIM_ITRx_SetConfig>
      break;
 800cc20:	e00c      	b.n	800cc3c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	f000 fc13 	bl	800d458 <TIM_ITRx_SetConfig>
      break;
 800cc32:	e003      	b.n	800cc3c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	73fb      	strb	r3, [r7, #15]
      break;
 800cc38:	e000      	b.n	800cc3c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cc3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	ffceff88 	.word	0xffceff88
 800cc5c:	00100040 	.word	0x00100040
 800cc60:	00100030 	.word	0x00100030
 800cc64:	00100020 	.word	0x00100020

0800cc68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc70:	bf00      	nop
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc84:	bf00      	nop
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4a40      	ldr	r2, [pc, #256]	@ (800cdcc <TIM_Base_SetConfig+0x114>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d013      	beq.n	800ccf8 <TIM_Base_SetConfig+0x40>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccd6:	d00f      	beq.n	800ccf8 <TIM_Base_SetConfig+0x40>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a3d      	ldr	r2, [pc, #244]	@ (800cdd0 <TIM_Base_SetConfig+0x118>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d00b      	beq.n	800ccf8 <TIM_Base_SetConfig+0x40>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a3c      	ldr	r2, [pc, #240]	@ (800cdd4 <TIM_Base_SetConfig+0x11c>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d007      	beq.n	800ccf8 <TIM_Base_SetConfig+0x40>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4a3b      	ldr	r2, [pc, #236]	@ (800cdd8 <TIM_Base_SetConfig+0x120>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d003      	beq.n	800ccf8 <TIM_Base_SetConfig+0x40>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4a3a      	ldr	r2, [pc, #232]	@ (800cddc <TIM_Base_SetConfig+0x124>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d108      	bne.n	800cd0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a2f      	ldr	r2, [pc, #188]	@ (800cdcc <TIM_Base_SetConfig+0x114>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d01f      	beq.n	800cd52 <TIM_Base_SetConfig+0x9a>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd18:	d01b      	beq.n	800cd52 <TIM_Base_SetConfig+0x9a>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a2c      	ldr	r2, [pc, #176]	@ (800cdd0 <TIM_Base_SetConfig+0x118>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d017      	beq.n	800cd52 <TIM_Base_SetConfig+0x9a>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a2b      	ldr	r2, [pc, #172]	@ (800cdd4 <TIM_Base_SetConfig+0x11c>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d013      	beq.n	800cd52 <TIM_Base_SetConfig+0x9a>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a2a      	ldr	r2, [pc, #168]	@ (800cdd8 <TIM_Base_SetConfig+0x120>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d00f      	beq.n	800cd52 <TIM_Base_SetConfig+0x9a>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a29      	ldr	r2, [pc, #164]	@ (800cddc <TIM_Base_SetConfig+0x124>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d00b      	beq.n	800cd52 <TIM_Base_SetConfig+0x9a>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4a28      	ldr	r2, [pc, #160]	@ (800cde0 <TIM_Base_SetConfig+0x128>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d007      	beq.n	800cd52 <TIM_Base_SetConfig+0x9a>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	4a27      	ldr	r2, [pc, #156]	@ (800cde4 <TIM_Base_SetConfig+0x12c>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d003      	beq.n	800cd52 <TIM_Base_SetConfig+0x9a>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a26      	ldr	r2, [pc, #152]	@ (800cde8 <TIM_Base_SetConfig+0x130>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d108      	bne.n	800cd64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	4313      	orrs	r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	695b      	ldr	r3, [r3, #20]
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	689a      	ldr	r2, [r3, #8]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a10      	ldr	r2, [pc, #64]	@ (800cdcc <TIM_Base_SetConfig+0x114>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d00f      	beq.n	800cdb0 <TIM_Base_SetConfig+0xf8>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a12      	ldr	r2, [pc, #72]	@ (800cddc <TIM_Base_SetConfig+0x124>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d00b      	beq.n	800cdb0 <TIM_Base_SetConfig+0xf8>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a11      	ldr	r2, [pc, #68]	@ (800cde0 <TIM_Base_SetConfig+0x128>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d007      	beq.n	800cdb0 <TIM_Base_SetConfig+0xf8>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a10      	ldr	r2, [pc, #64]	@ (800cde4 <TIM_Base_SetConfig+0x12c>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d003      	beq.n	800cdb0 <TIM_Base_SetConfig+0xf8>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a0f      	ldr	r2, [pc, #60]	@ (800cde8 <TIM_Base_SetConfig+0x130>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d103      	bne.n	800cdb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	691a      	ldr	r2, [r3, #16]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	615a      	str	r2, [r3, #20]
}
 800cdbe:	bf00      	nop
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	40010000 	.word	0x40010000
 800cdd0:	40000400 	.word	0x40000400
 800cdd4:	40000800 	.word	0x40000800
 800cdd8:	40000c00 	.word	0x40000c00
 800cddc:	40010400 	.word	0x40010400
 800cde0:	40014000 	.word	0x40014000
 800cde4:	40014400 	.word	0x40014400
 800cde8:	40014800 	.word	0x40014800

0800cdec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	f023 0201 	bic.w	r2, r3, #1
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a1b      	ldr	r3, [r3, #32]
 800ce06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	699b      	ldr	r3, [r3, #24]
 800ce12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	4b37      	ldr	r3, [pc, #220]	@ (800cef4 <TIM_OC1_SetConfig+0x108>)
 800ce18:	4013      	ands	r3, r2
 800ce1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f023 0303 	bic.w	r3, r3, #3
 800ce22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f023 0302 	bic.w	r3, r3, #2
 800ce34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a2d      	ldr	r2, [pc, #180]	@ (800cef8 <TIM_OC1_SetConfig+0x10c>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d00f      	beq.n	800ce68 <TIM_OC1_SetConfig+0x7c>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a2c      	ldr	r2, [pc, #176]	@ (800cefc <TIM_OC1_SetConfig+0x110>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d00b      	beq.n	800ce68 <TIM_OC1_SetConfig+0x7c>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a2b      	ldr	r2, [pc, #172]	@ (800cf00 <TIM_OC1_SetConfig+0x114>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d007      	beq.n	800ce68 <TIM_OC1_SetConfig+0x7c>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a2a      	ldr	r2, [pc, #168]	@ (800cf04 <TIM_OC1_SetConfig+0x118>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d003      	beq.n	800ce68 <TIM_OC1_SetConfig+0x7c>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a29      	ldr	r2, [pc, #164]	@ (800cf08 <TIM_OC1_SetConfig+0x11c>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d10c      	bne.n	800ce82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	f023 0308 	bic.w	r3, r3, #8
 800ce6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	697a      	ldr	r2, [r7, #20]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	f023 0304 	bic.w	r3, r3, #4
 800ce80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a1c      	ldr	r2, [pc, #112]	@ (800cef8 <TIM_OC1_SetConfig+0x10c>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d00f      	beq.n	800ceaa <TIM_OC1_SetConfig+0xbe>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4a1b      	ldr	r2, [pc, #108]	@ (800cefc <TIM_OC1_SetConfig+0x110>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d00b      	beq.n	800ceaa <TIM_OC1_SetConfig+0xbe>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a1a      	ldr	r2, [pc, #104]	@ (800cf00 <TIM_OC1_SetConfig+0x114>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d007      	beq.n	800ceaa <TIM_OC1_SetConfig+0xbe>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a19      	ldr	r2, [pc, #100]	@ (800cf04 <TIM_OC1_SetConfig+0x118>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d003      	beq.n	800ceaa <TIM_OC1_SetConfig+0xbe>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a18      	ldr	r2, [pc, #96]	@ (800cf08 <TIM_OC1_SetConfig+0x11c>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d111      	bne.n	800cece <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ceb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ceb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	693a      	ldr	r2, [r7, #16]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	699b      	ldr	r3, [r3, #24]
 800cec8:	693a      	ldr	r2, [r7, #16]
 800ceca:	4313      	orrs	r3, r2
 800cecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	685a      	ldr	r2, [r3, #4]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	621a      	str	r2, [r3, #32]
}
 800cee8:	bf00      	nop
 800ceea:	371c      	adds	r7, #28
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	fffeff8f 	.word	0xfffeff8f
 800cef8:	40010000 	.word	0x40010000
 800cefc:	40010400 	.word	0x40010400
 800cf00:	40014000 	.word	0x40014000
 800cf04:	40014400 	.word	0x40014400
 800cf08:	40014800 	.word	0x40014800

0800cf0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b087      	sub	sp, #28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	f023 0210 	bic.w	r2, r3, #16
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a1b      	ldr	r3, [r3, #32]
 800cf26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	4b34      	ldr	r3, [pc, #208]	@ (800d008 <TIM_OC2_SetConfig+0xfc>)
 800cf38:	4013      	ands	r3, r2
 800cf3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	021b      	lsls	r3, r3, #8
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	f023 0320 	bic.w	r3, r3, #32
 800cf56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	011b      	lsls	r3, r3, #4
 800cf5e:	697a      	ldr	r2, [r7, #20]
 800cf60:	4313      	orrs	r3, r2
 800cf62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a29      	ldr	r2, [pc, #164]	@ (800d00c <TIM_OC2_SetConfig+0x100>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d003      	beq.n	800cf74 <TIM_OC2_SetConfig+0x68>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4a28      	ldr	r2, [pc, #160]	@ (800d010 <TIM_OC2_SetConfig+0x104>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d10d      	bne.n	800cf90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	011b      	lsls	r3, r3, #4
 800cf82:	697a      	ldr	r2, [r7, #20]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4a1e      	ldr	r2, [pc, #120]	@ (800d00c <TIM_OC2_SetConfig+0x100>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d00f      	beq.n	800cfb8 <TIM_OC2_SetConfig+0xac>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4a1d      	ldr	r2, [pc, #116]	@ (800d010 <TIM_OC2_SetConfig+0x104>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d00b      	beq.n	800cfb8 <TIM_OC2_SetConfig+0xac>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4a1c      	ldr	r2, [pc, #112]	@ (800d014 <TIM_OC2_SetConfig+0x108>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d007      	beq.n	800cfb8 <TIM_OC2_SetConfig+0xac>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4a1b      	ldr	r2, [pc, #108]	@ (800d018 <TIM_OC2_SetConfig+0x10c>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d003      	beq.n	800cfb8 <TIM_OC2_SetConfig+0xac>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a1a      	ldr	r2, [pc, #104]	@ (800d01c <TIM_OC2_SetConfig+0x110>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d113      	bne.n	800cfe0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cfbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cfc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	695b      	ldr	r3, [r3, #20]
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	699b      	ldr	r3, [r3, #24]
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	693a      	ldr	r2, [r7, #16]
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	693a      	ldr	r2, [r7, #16]
 800cfe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	697a      	ldr	r2, [r7, #20]
 800cff8:	621a      	str	r2, [r3, #32]
}
 800cffa:	bf00      	nop
 800cffc:	371c      	adds	r7, #28
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	feff8fff 	.word	0xfeff8fff
 800d00c:	40010000 	.word	0x40010000
 800d010:	40010400 	.word	0x40010400
 800d014:	40014000 	.word	0x40014000
 800d018:	40014400 	.word	0x40014400
 800d01c:	40014800 	.word	0x40014800

0800d020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d020:	b480      	push	{r7}
 800d022:	b087      	sub	sp, #28
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6a1b      	ldr	r3, [r3, #32]
 800d02e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	4b33      	ldr	r3, [pc, #204]	@ (800d118 <TIM_OC3_SetConfig+0xf8>)
 800d04c:	4013      	ands	r3, r2
 800d04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f023 0303 	bic.w	r3, r3, #3
 800d056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	4313      	orrs	r3, r2
 800d060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	021b      	lsls	r3, r3, #8
 800d070:	697a      	ldr	r2, [r7, #20]
 800d072:	4313      	orrs	r3, r2
 800d074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a28      	ldr	r2, [pc, #160]	@ (800d11c <TIM_OC3_SetConfig+0xfc>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d003      	beq.n	800d086 <TIM_OC3_SetConfig+0x66>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a27      	ldr	r2, [pc, #156]	@ (800d120 <TIM_OC3_SetConfig+0x100>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d10d      	bne.n	800d0a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d08c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	021b      	lsls	r3, r3, #8
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	4313      	orrs	r3, r2
 800d098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d11c <TIM_OC3_SetConfig+0xfc>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00f      	beq.n	800d0ca <TIM_OC3_SetConfig+0xaa>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a1c      	ldr	r2, [pc, #112]	@ (800d120 <TIM_OC3_SetConfig+0x100>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d00b      	beq.n	800d0ca <TIM_OC3_SetConfig+0xaa>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d124 <TIM_OC3_SetConfig+0x104>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d007      	beq.n	800d0ca <TIM_OC3_SetConfig+0xaa>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a1a      	ldr	r2, [pc, #104]	@ (800d128 <TIM_OC3_SetConfig+0x108>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d003      	beq.n	800d0ca <TIM_OC3_SetConfig+0xaa>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a19      	ldr	r2, [pc, #100]	@ (800d12c <TIM_OC3_SetConfig+0x10c>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d113      	bne.n	800d0f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	011b      	lsls	r3, r3, #4
 800d0e0:	693a      	ldr	r2, [r7, #16]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	011b      	lsls	r3, r3, #4
 800d0ec:	693a      	ldr	r2, [r7, #16]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	685a      	ldr	r2, [r3, #4]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	697a      	ldr	r2, [r7, #20]
 800d10a:	621a      	str	r2, [r3, #32]
}
 800d10c:	bf00      	nop
 800d10e:	371c      	adds	r7, #28
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	fffeff8f 	.word	0xfffeff8f
 800d11c:	40010000 	.word	0x40010000
 800d120:	40010400 	.word	0x40010400
 800d124:	40014000 	.word	0x40014000
 800d128:	40014400 	.word	0x40014400
 800d12c:	40014800 	.word	0x40014800

0800d130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d130:	b480      	push	{r7}
 800d132:	b087      	sub	sp, #28
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a1b      	ldr	r3, [r3, #32]
 800d13e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	69db      	ldr	r3, [r3, #28]
 800d156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d158:	68fa      	ldr	r2, [r7, #12]
 800d15a:	4b24      	ldr	r3, [pc, #144]	@ (800d1ec <TIM_OC4_SetConfig+0xbc>)
 800d15c:	4013      	ands	r3, r2
 800d15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	021b      	lsls	r3, r3, #8
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	4313      	orrs	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d17a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	031b      	lsls	r3, r3, #12
 800d182:	693a      	ldr	r2, [r7, #16]
 800d184:	4313      	orrs	r3, r2
 800d186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a19      	ldr	r2, [pc, #100]	@ (800d1f0 <TIM_OC4_SetConfig+0xc0>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d00f      	beq.n	800d1b0 <TIM_OC4_SetConfig+0x80>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a18      	ldr	r2, [pc, #96]	@ (800d1f4 <TIM_OC4_SetConfig+0xc4>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d00b      	beq.n	800d1b0 <TIM_OC4_SetConfig+0x80>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a17      	ldr	r2, [pc, #92]	@ (800d1f8 <TIM_OC4_SetConfig+0xc8>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d007      	beq.n	800d1b0 <TIM_OC4_SetConfig+0x80>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4a16      	ldr	r2, [pc, #88]	@ (800d1fc <TIM_OC4_SetConfig+0xcc>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d003      	beq.n	800d1b0 <TIM_OC4_SetConfig+0x80>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a15      	ldr	r2, [pc, #84]	@ (800d200 <TIM_OC4_SetConfig+0xd0>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d109      	bne.n	800d1c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	019b      	lsls	r3, r3, #6
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	621a      	str	r2, [r3, #32]
}
 800d1de:	bf00      	nop
 800d1e0:	371c      	adds	r7, #28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	feff8fff 	.word	0xfeff8fff
 800d1f0:	40010000 	.word	0x40010000
 800d1f4:	40010400 	.word	0x40010400
 800d1f8:	40014000 	.word	0x40014000
 800d1fc:	40014400 	.word	0x40014400
 800d200:	40014800 	.word	0x40014800

0800d204 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d204:	b480      	push	{r7}
 800d206:	b087      	sub	sp, #28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a1b      	ldr	r3, [r3, #32]
 800d212:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6a1b      	ldr	r3, [r3, #32]
 800d21e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	4b21      	ldr	r3, [pc, #132]	@ (800d2b4 <TIM_OC5_SetConfig+0xb0>)
 800d230:	4013      	ands	r3, r2
 800d232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	4313      	orrs	r3, r2
 800d23c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d244:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	041b      	lsls	r3, r3, #16
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	4313      	orrs	r3, r2
 800d250:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a18      	ldr	r2, [pc, #96]	@ (800d2b8 <TIM_OC5_SetConfig+0xb4>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d00f      	beq.n	800d27a <TIM_OC5_SetConfig+0x76>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a17      	ldr	r2, [pc, #92]	@ (800d2bc <TIM_OC5_SetConfig+0xb8>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d00b      	beq.n	800d27a <TIM_OC5_SetConfig+0x76>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a16      	ldr	r2, [pc, #88]	@ (800d2c0 <TIM_OC5_SetConfig+0xbc>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d007      	beq.n	800d27a <TIM_OC5_SetConfig+0x76>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a15      	ldr	r2, [pc, #84]	@ (800d2c4 <TIM_OC5_SetConfig+0xc0>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d003      	beq.n	800d27a <TIM_OC5_SetConfig+0x76>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a14      	ldr	r2, [pc, #80]	@ (800d2c8 <TIM_OC5_SetConfig+0xc4>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d109      	bne.n	800d28e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d280:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	695b      	ldr	r3, [r3, #20]
 800d286:	021b      	lsls	r3, r3, #8
 800d288:	697a      	ldr	r2, [r7, #20]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	685a      	ldr	r2, [r3, #4]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	621a      	str	r2, [r3, #32]
}
 800d2a8:	bf00      	nop
 800d2aa:	371c      	adds	r7, #28
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr
 800d2b4:	fffeff8f 	.word	0xfffeff8f
 800d2b8:	40010000 	.word	0x40010000
 800d2bc:	40010400 	.word	0x40010400
 800d2c0:	40014000 	.word	0x40014000
 800d2c4:	40014400 	.word	0x40014400
 800d2c8:	40014800 	.word	0x40014800

0800d2cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b087      	sub	sp, #28
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	4b22      	ldr	r3, [pc, #136]	@ (800d380 <TIM_OC6_SetConfig+0xb4>)
 800d2f8:	4013      	ands	r3, r2
 800d2fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	021b      	lsls	r3, r3, #8
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	4313      	orrs	r3, r2
 800d306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d30e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	051b      	lsls	r3, r3, #20
 800d316:	693a      	ldr	r2, [r7, #16]
 800d318:	4313      	orrs	r3, r2
 800d31a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4a19      	ldr	r2, [pc, #100]	@ (800d384 <TIM_OC6_SetConfig+0xb8>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d00f      	beq.n	800d344 <TIM_OC6_SetConfig+0x78>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a18      	ldr	r2, [pc, #96]	@ (800d388 <TIM_OC6_SetConfig+0xbc>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d00b      	beq.n	800d344 <TIM_OC6_SetConfig+0x78>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a17      	ldr	r2, [pc, #92]	@ (800d38c <TIM_OC6_SetConfig+0xc0>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d007      	beq.n	800d344 <TIM_OC6_SetConfig+0x78>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a16      	ldr	r2, [pc, #88]	@ (800d390 <TIM_OC6_SetConfig+0xc4>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d003      	beq.n	800d344 <TIM_OC6_SetConfig+0x78>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4a15      	ldr	r2, [pc, #84]	@ (800d394 <TIM_OC6_SetConfig+0xc8>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d109      	bne.n	800d358 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d34a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	695b      	ldr	r3, [r3, #20]
 800d350:	029b      	lsls	r3, r3, #10
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	4313      	orrs	r3, r2
 800d356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	697a      	ldr	r2, [r7, #20]
 800d35c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	685a      	ldr	r2, [r3, #4]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	693a      	ldr	r2, [r7, #16]
 800d370:	621a      	str	r2, [r3, #32]
}
 800d372:	bf00      	nop
 800d374:	371c      	adds	r7, #28
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	feff8fff 	.word	0xfeff8fff
 800d384:	40010000 	.word	0x40010000
 800d388:	40010400 	.word	0x40010400
 800d38c:	40014000 	.word	0x40014000
 800d390:	40014400 	.word	0x40014400
 800d394:	40014800 	.word	0x40014800

0800d398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d398:	b480      	push	{r7}
 800d39a:	b087      	sub	sp, #28
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6a1b      	ldr	r3, [r3, #32]
 800d3a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6a1b      	ldr	r3, [r3, #32]
 800d3ae:	f023 0201 	bic.w	r2, r3, #1
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d3c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	f023 030a 	bic.w	r3, r3, #10
 800d3d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	621a      	str	r2, [r3, #32]
}
 800d3ea:	bf00      	nop
 800d3ec:	371c      	adds	r7, #28
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr

0800d3f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3f6:	b480      	push	{r7}
 800d3f8:	b087      	sub	sp, #28
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	60f8      	str	r0, [r7, #12]
 800d3fe:	60b9      	str	r1, [r7, #8]
 800d400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	f023 0210 	bic.w	r2, r3, #16
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	699b      	ldr	r3, [r3, #24]
 800d412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6a1b      	ldr	r3, [r3, #32]
 800d418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	031b      	lsls	r3, r3, #12
 800d426:	697a      	ldr	r2, [r7, #20]
 800d428:	4313      	orrs	r3, r2
 800d42a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d432:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	011b      	lsls	r3, r3, #4
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	697a      	ldr	r2, [r7, #20]
 800d442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	621a      	str	r2, [r3, #32]
}
 800d44a:	bf00      	nop
 800d44c:	371c      	adds	r7, #28
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr
	...

0800d458 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	4b09      	ldr	r3, [pc, #36]	@ (800d490 <TIM_ITRx_SetConfig+0x38>)
 800d46c:	4013      	ands	r3, r2
 800d46e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d470:	683a      	ldr	r2, [r7, #0]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	4313      	orrs	r3, r2
 800d476:	f043 0307 	orr.w	r3, r3, #7
 800d47a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	609a      	str	r2, [r3, #8]
}
 800d482:	bf00      	nop
 800d484:	3714      	adds	r7, #20
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	ffcfff8f 	.word	0xffcfff8f

0800d494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d494:	b480      	push	{r7}
 800d496:	b087      	sub	sp, #28
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d4ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	021a      	lsls	r2, r3, #8
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	431a      	orrs	r2, r3
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	697a      	ldr	r2, [r7, #20]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	697a      	ldr	r2, [r7, #20]
 800d4c6:	609a      	str	r2, [r3, #8]
}
 800d4c8:	bf00      	nop
 800d4ca:	371c      	adds	r7, #28
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b087      	sub	sp, #28
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	f003 031f 	and.w	r3, r3, #31
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6a1a      	ldr	r2, [r3, #32]
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	43db      	mvns	r3, r3
 800d4f6:	401a      	ands	r2, r3
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6a1a      	ldr	r2, [r3, #32]
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	f003 031f 	and.w	r3, r3, #31
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	fa01 f303 	lsl.w	r3, r1, r3
 800d50c:	431a      	orrs	r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	621a      	str	r2, [r3, #32]
}
 800d512:	bf00      	nop
 800d514:	371c      	adds	r7, #28
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
	...

0800d520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d530:	2b01      	cmp	r3, #1
 800d532:	d101      	bne.n	800d538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d534:	2302      	movs	r3, #2
 800d536:	e06d      	b.n	800d614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2202      	movs	r2, #2
 800d544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a30      	ldr	r2, [pc, #192]	@ (800d620 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d004      	beq.n	800d56c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4a2f      	ldr	r2, [pc, #188]	@ (800d624 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d108      	bne.n	800d57e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d572:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d584:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a20      	ldr	r2, [pc, #128]	@ (800d620 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d022      	beq.n	800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5aa:	d01d      	beq.n	800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d628 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d018      	beq.n	800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d62c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d013      	beq.n	800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a1a      	ldr	r2, [pc, #104]	@ (800d630 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d00e      	beq.n	800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a15      	ldr	r2, [pc, #84]	@ (800d624 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d009      	beq.n	800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a16      	ldr	r2, [pc, #88]	@ (800d634 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d004      	beq.n	800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a15      	ldr	r2, [pc, #84]	@ (800d638 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d10c      	bne.n	800d602 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d5ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3714      	adds	r7, #20
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr
 800d620:	40010000 	.word	0x40010000
 800d624:	40010400 	.word	0x40010400
 800d628:	40000400 	.word	0x40000400
 800d62c:	40000800 	.word	0x40000800
 800d630:	40000c00 	.word	0x40000c00
 800d634:	40001800 	.word	0x40001800
 800d638:	40014000 	.word	0x40014000

0800d63c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d646:	2300      	movs	r3, #0
 800d648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d650:	2b01      	cmp	r3, #1
 800d652:	d101      	bne.n	800d658 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d654:	2302      	movs	r3, #2
 800d656:	e065      	b.n	800d724 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	4313      	orrs	r3, r2
 800d67a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	4313      	orrs	r3, r2
 800d688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4313      	orrs	r3, r2
 800d696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	695b      	ldr	r3, [r3, #20]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	041b      	lsls	r3, r3, #16
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a16      	ldr	r2, [pc, #88]	@ (800d730 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d004      	beq.n	800d6e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a14      	ldr	r2, [pc, #80]	@ (800d734 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d115      	bne.n	800d712 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6f0:	051b      	lsls	r3, r3, #20
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	69db      	ldr	r3, [r3, #28]
 800d700:	4313      	orrs	r3, r2
 800d702:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	6a1b      	ldr	r3, [r3, #32]
 800d70e:	4313      	orrs	r3, r2
 800d710:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr
 800d730:	40010000 	.word	0x40010000
 800d734:	40010400 	.word	0x40010400

0800d738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d754:	bf00      	nop
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d768:	bf00      	nop
 800d76a:	370c      	adds	r7, #12
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d774:	b084      	sub	sp, #16
 800d776:	b580      	push	{r7, lr}
 800d778:	b084      	sub	sp, #16
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	f107 001c 	add.w	r0, r7, #28
 800d782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d120      	bne.n	800d7ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d790:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68da      	ldr	r2, [r3, #12]
 800d79c:	4b2a      	ldr	r3, [pc, #168]	@ (800d848 <USB_CoreInit+0xd4>)
 800d79e:	4013      	ands	r3, r2
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d7b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d105      	bne.n	800d7c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f001 faf8 	bl	800edb8 <USB_CoreReset>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	73fb      	strb	r3, [r7, #15]
 800d7cc:	e01a      	b.n	800d804 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f001 faec 	bl	800edb8 <USB_CoreReset>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d7e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d106      	bne.n	800d7f8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	639a      	str	r2, [r3, #56]	@ 0x38
 800d7f6:	e005      	b.n	800d804 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d806:	2b01      	cmp	r3, #1
 800d808:	d116      	bne.n	800d838 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d80e:	b29a      	uxth	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d818:	4b0c      	ldr	r3, [pc, #48]	@ (800d84c <USB_CoreInit+0xd8>)
 800d81a:	4313      	orrs	r3, r2
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	f043 0206 	orr.w	r2, r3, #6
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	f043 0220 	orr.w	r2, r3, #32
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d838:	7bfb      	ldrb	r3, [r7, #15]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d844:	b004      	add	sp, #16
 800d846:	4770      	bx	lr
 800d848:	ffbdffbf 	.word	0xffbdffbf
 800d84c:	03ee0000 	.word	0x03ee0000

0800d850 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d850:	b480      	push	{r7}
 800d852:	b087      	sub	sp, #28
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	4613      	mov	r3, r2
 800d85c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d85e:	79fb      	ldrb	r3, [r7, #7]
 800d860:	2b02      	cmp	r3, #2
 800d862:	d165      	bne.n	800d930 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4a41      	ldr	r2, [pc, #260]	@ (800d96c <USB_SetTurnaroundTime+0x11c>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d906      	bls.n	800d87a <USB_SetTurnaroundTime+0x2a>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	4a40      	ldr	r2, [pc, #256]	@ (800d970 <USB_SetTurnaroundTime+0x120>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d202      	bcs.n	800d87a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d874:	230f      	movs	r3, #15
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e062      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	4a3c      	ldr	r2, [pc, #240]	@ (800d970 <USB_SetTurnaroundTime+0x120>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d306      	bcc.n	800d890 <USB_SetTurnaroundTime+0x40>
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	4a3b      	ldr	r2, [pc, #236]	@ (800d974 <USB_SetTurnaroundTime+0x124>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d202      	bcs.n	800d890 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d88a:	230e      	movs	r3, #14
 800d88c:	617b      	str	r3, [r7, #20]
 800d88e:	e057      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	4a38      	ldr	r2, [pc, #224]	@ (800d974 <USB_SetTurnaroundTime+0x124>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d306      	bcc.n	800d8a6 <USB_SetTurnaroundTime+0x56>
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	4a37      	ldr	r2, [pc, #220]	@ (800d978 <USB_SetTurnaroundTime+0x128>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d202      	bcs.n	800d8a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d8a0:	230d      	movs	r3, #13
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	e04c      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	4a33      	ldr	r2, [pc, #204]	@ (800d978 <USB_SetTurnaroundTime+0x128>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d306      	bcc.n	800d8bc <USB_SetTurnaroundTime+0x6c>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	4a32      	ldr	r2, [pc, #200]	@ (800d97c <USB_SetTurnaroundTime+0x12c>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d802      	bhi.n	800d8bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d8b6:	230c      	movs	r3, #12
 800d8b8:	617b      	str	r3, [r7, #20]
 800d8ba:	e041      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	4a2f      	ldr	r2, [pc, #188]	@ (800d97c <USB_SetTurnaroundTime+0x12c>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d906      	bls.n	800d8d2 <USB_SetTurnaroundTime+0x82>
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	4a2e      	ldr	r2, [pc, #184]	@ (800d980 <USB_SetTurnaroundTime+0x130>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d802      	bhi.n	800d8d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d8cc:	230b      	movs	r3, #11
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	e036      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	4a2a      	ldr	r2, [pc, #168]	@ (800d980 <USB_SetTurnaroundTime+0x130>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d906      	bls.n	800d8e8 <USB_SetTurnaroundTime+0x98>
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	4a29      	ldr	r2, [pc, #164]	@ (800d984 <USB_SetTurnaroundTime+0x134>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d802      	bhi.n	800d8e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d8e2:	230a      	movs	r3, #10
 800d8e4:	617b      	str	r3, [r7, #20]
 800d8e6:	e02b      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	4a26      	ldr	r2, [pc, #152]	@ (800d984 <USB_SetTurnaroundTime+0x134>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d906      	bls.n	800d8fe <USB_SetTurnaroundTime+0xae>
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	4a25      	ldr	r2, [pc, #148]	@ (800d988 <USB_SetTurnaroundTime+0x138>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d202      	bcs.n	800d8fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d8f8:	2309      	movs	r3, #9
 800d8fa:	617b      	str	r3, [r7, #20]
 800d8fc:	e020      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	4a21      	ldr	r2, [pc, #132]	@ (800d988 <USB_SetTurnaroundTime+0x138>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d306      	bcc.n	800d914 <USB_SetTurnaroundTime+0xc4>
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	4a20      	ldr	r2, [pc, #128]	@ (800d98c <USB_SetTurnaroundTime+0x13c>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d802      	bhi.n	800d914 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d90e:	2308      	movs	r3, #8
 800d910:	617b      	str	r3, [r7, #20]
 800d912:	e015      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	4a1d      	ldr	r2, [pc, #116]	@ (800d98c <USB_SetTurnaroundTime+0x13c>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d906      	bls.n	800d92a <USB_SetTurnaroundTime+0xda>
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	4a1c      	ldr	r2, [pc, #112]	@ (800d990 <USB_SetTurnaroundTime+0x140>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d202      	bcs.n	800d92a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d924:	2307      	movs	r3, #7
 800d926:	617b      	str	r3, [r7, #20]
 800d928:	e00a      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d92a:	2306      	movs	r3, #6
 800d92c:	617b      	str	r3, [r7, #20]
 800d92e:	e007      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d102      	bne.n	800d93c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d936:	2309      	movs	r3, #9
 800d938:	617b      	str	r3, [r7, #20]
 800d93a:	e001      	b.n	800d940 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d93c:	2309      	movs	r3, #9
 800d93e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	68da      	ldr	r2, [r3, #12]
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	029b      	lsls	r3, r3, #10
 800d954:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d958:	431a      	orrs	r2, r3
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	371c      	adds	r7, #28
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr
 800d96c:	00d8acbf 	.word	0x00d8acbf
 800d970:	00e4e1c0 	.word	0x00e4e1c0
 800d974:	00f42400 	.word	0x00f42400
 800d978:	01067380 	.word	0x01067380
 800d97c:	011a499f 	.word	0x011a499f
 800d980:	01312cff 	.word	0x01312cff
 800d984:	014ca43f 	.word	0x014ca43f
 800d988:	016e3600 	.word	0x016e3600
 800d98c:	01a6ab1f 	.word	0x01a6ab1f
 800d990:	01e84800 	.word	0x01e84800

0800d994 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	f043 0201 	orr.w	r2, r3, #1
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d9b6:	b480      	push	{r7}
 800d9b8:	b083      	sub	sp, #12
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f023 0201 	bic.w	r2, r3, #1
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d9f4:	78fb      	ldrb	r3, [r7, #3]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d115      	bne.n	800da26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800da06:	2001      	movs	r0, #1
 800da08:	f7f4 f872 	bl	8001af0 <HAL_Delay>
      ms++;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	3301      	adds	r3, #1
 800da10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f001 f93f 	bl	800ec96 <USB_GetMode>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d01e      	beq.n	800da5c <USB_SetCurrentMode+0x84>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b31      	cmp	r3, #49	@ 0x31
 800da22:	d9f0      	bls.n	800da06 <USB_SetCurrentMode+0x2e>
 800da24:	e01a      	b.n	800da5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800da26:	78fb      	ldrb	r3, [r7, #3]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d115      	bne.n	800da58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800da38:	2001      	movs	r0, #1
 800da3a:	f7f4 f859 	bl	8001af0 <HAL_Delay>
      ms++;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	3301      	adds	r3, #1
 800da42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f001 f926 	bl	800ec96 <USB_GetMode>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d005      	beq.n	800da5c <USB_SetCurrentMode+0x84>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2b31      	cmp	r3, #49	@ 0x31
 800da54:	d9f0      	bls.n	800da38 <USB_SetCurrentMode+0x60>
 800da56:	e001      	b.n	800da5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800da58:	2301      	movs	r3, #1
 800da5a:	e005      	b.n	800da68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b32      	cmp	r3, #50	@ 0x32
 800da60:	d101      	bne.n	800da66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800da62:	2301      	movs	r3, #1
 800da64:	e000      	b.n	800da68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da70:	b084      	sub	sp, #16
 800da72:	b580      	push	{r7, lr}
 800da74:	b086      	sub	sp, #24
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800da7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800da8a:	2300      	movs	r3, #0
 800da8c:	613b      	str	r3, [r7, #16]
 800da8e:	e009      	b.n	800daa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	3340      	adds	r3, #64	@ 0x40
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	4413      	add	r3, r2
 800da9a:	2200      	movs	r2, #0
 800da9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	3301      	adds	r3, #1
 800daa2:	613b      	str	r3, [r7, #16]
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	2b0e      	cmp	r3, #14
 800daa8:	d9f2      	bls.n	800da90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800daaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daac:	2b00      	cmp	r3, #0
 800daae:	d11c      	bne.n	800daea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dabe:	f043 0302 	orr.w	r3, r3, #2
 800dac2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dac8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	e005      	b.n	800daf6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dafc:	461a      	mov	r2, r3
 800dafe:	2300      	movs	r3, #0
 800db00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db08:	4619      	mov	r1, r3
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db10:	461a      	mov	r2, r3
 800db12:	680b      	ldr	r3, [r1, #0]
 800db14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d10c      	bne.n	800db36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800db1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d104      	bne.n	800db2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800db22:	2100      	movs	r1, #0
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 f965 	bl	800ddf4 <USB_SetDevSpeed>
 800db2a:	e008      	b.n	800db3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800db2c:	2101      	movs	r1, #1
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f960 	bl	800ddf4 <USB_SetDevSpeed>
 800db34:	e003      	b.n	800db3e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800db36:	2103      	movs	r1, #3
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f95b 	bl	800ddf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800db3e:	2110      	movs	r1, #16
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 f8f3 	bl	800dd2c <USB_FlushTxFifo>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d001      	beq.n	800db50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 f91f 	bl	800dd94 <USB_FlushRxFifo>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db66:	461a      	mov	r2, r3
 800db68:	2300      	movs	r3, #0
 800db6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db72:	461a      	mov	r2, r3
 800db74:	2300      	movs	r3, #0
 800db76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db7e:	461a      	mov	r2, r3
 800db80:	2300      	movs	r3, #0
 800db82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db84:	2300      	movs	r3, #0
 800db86:	613b      	str	r3, [r7, #16]
 800db88:	e043      	b.n	800dc12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	015a      	lsls	r2, r3, #5
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	4413      	add	r3, r2
 800db92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dba0:	d118      	bne.n	800dbd4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d10a      	bne.n	800dbbe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	015a      	lsls	r2, r3, #5
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	4413      	add	r3, r2
 800dbb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dbba:	6013      	str	r3, [r2, #0]
 800dbbc:	e013      	b.n	800dbe6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	015a      	lsls	r2, r3, #5
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dbd0:	6013      	str	r3, [r2, #0]
 800dbd2:	e008      	b.n	800dbe6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	015a      	lsls	r2, r3, #5
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	4413      	add	r3, r2
 800dbdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	015a      	lsls	r2, r3, #5
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	4413      	add	r3, r2
 800dbee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc04:	461a      	mov	r2, r3
 800dc06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dc0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	613b      	str	r3, [r7, #16]
 800dc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc14:	693a      	ldr	r2, [r7, #16]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d3b7      	bcc.n	800db8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	613b      	str	r3, [r7, #16]
 800dc1e:	e043      	b.n	800dca8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	015a      	lsls	r2, r3, #5
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	4413      	add	r3, r2
 800dc28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc36:	d118      	bne.n	800dc6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d10a      	bne.n	800dc54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	015a      	lsls	r2, r3, #5
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	4413      	add	r3, r2
 800dc46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dc50:	6013      	str	r3, [r2, #0]
 800dc52:	e013      	b.n	800dc7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	015a      	lsls	r2, r3, #5
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc60:	461a      	mov	r2, r3
 800dc62:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	e008      	b.n	800dc7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	015a      	lsls	r2, r3, #5
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	4413      	add	r3, r2
 800dc72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc76:	461a      	mov	r2, r3
 800dc78:	2300      	movs	r3, #0
 800dc7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	015a      	lsls	r2, r3, #5
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	4413      	add	r3, r2
 800dc84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc88:	461a      	mov	r2, r3
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	015a      	lsls	r2, r3, #5
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	4413      	add	r3, r2
 800dc96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dca0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	3301      	adds	r3, #1
 800dca6:	613b      	str	r3, [r7, #16]
 800dca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcaa:	693a      	ldr	r2, [r7, #16]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d3b7      	bcc.n	800dc20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dcbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dcc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dcd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dcd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d105      	bne.n	800dce4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	699b      	ldr	r3, [r3, #24]
 800dcdc:	f043 0210 	orr.w	r2, r3, #16
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	699a      	ldr	r2, [r3, #24]
 800dce8:	4b0e      	ldr	r3, [pc, #56]	@ (800dd24 <USB_DevInit+0x2b4>)
 800dcea:	4313      	orrs	r3, r2
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dcf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d005      	beq.n	800dd02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	699b      	ldr	r3, [r3, #24]
 800dcfa:	f043 0208 	orr.w	r2, r3, #8
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dd02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d105      	bne.n	800dd14 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	699a      	ldr	r2, [r3, #24]
 800dd0c:	4b06      	ldr	r3, [pc, #24]	@ (800dd28 <USB_DevInit+0x2b8>)
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dd14:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd20:	b004      	add	sp, #16
 800dd22:	4770      	bx	lr
 800dd24:	803c3800 	.word	0x803c3800
 800dd28:	40000004 	.word	0x40000004

0800dd2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b085      	sub	sp, #20
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dd36:	2300      	movs	r3, #0
 800dd38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	4a13      	ldr	r2, [pc, #76]	@ (800dd90 <USB_FlushTxFifo+0x64>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d901      	bls.n	800dd4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dd48:	2303      	movs	r3, #3
 800dd4a:	e01b      	b.n	800dd84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	daf2      	bge.n	800dd3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dd54:	2300      	movs	r3, #0
 800dd56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	019b      	lsls	r3, r3, #6
 800dd5c:	f043 0220 	orr.w	r2, r3, #32
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	3301      	adds	r3, #1
 800dd68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	4a08      	ldr	r2, [pc, #32]	@ (800dd90 <USB_FlushTxFifo+0x64>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d901      	bls.n	800dd76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dd72:	2303      	movs	r3, #3
 800dd74:	e006      	b.n	800dd84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	f003 0320 	and.w	r3, r3, #32
 800dd7e:	2b20      	cmp	r3, #32
 800dd80:	d0f0      	beq.n	800dd64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3714      	adds	r7, #20
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	00030d40 	.word	0x00030d40

0800dd94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	3301      	adds	r3, #1
 800dda4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	4a11      	ldr	r2, [pc, #68]	@ (800ddf0 <USB_FlushRxFifo+0x5c>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d901      	bls.n	800ddb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ddae:	2303      	movs	r3, #3
 800ddb0:	e018      	b.n	800dde4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	daf2      	bge.n	800dda0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2210      	movs	r2, #16
 800ddc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	4a08      	ldr	r2, [pc, #32]	@ (800ddf0 <USB_FlushRxFifo+0x5c>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d901      	bls.n	800ddd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ddd2:	2303      	movs	r3, #3
 800ddd4:	e006      	b.n	800dde4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	f003 0310 	and.w	r3, r3, #16
 800ddde:	2b10      	cmp	r3, #16
 800dde0:	d0f0      	beq.n	800ddc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dde2:	2300      	movs	r3, #0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3714      	adds	r7, #20
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	00030d40 	.word	0x00030d40

0800ddf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	78fb      	ldrb	r3, [r7, #3]
 800de0e:	68f9      	ldr	r1, [r7, #12]
 800de10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800de14:	4313      	orrs	r3, r2
 800de16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3714      	adds	r7, #20
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800de26:	b480      	push	{r7}
 800de28:	b087      	sub	sp, #28
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	f003 0306 	and.w	r3, r3, #6
 800de3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d102      	bne.n	800de4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800de46:	2300      	movs	r3, #0
 800de48:	75fb      	strb	r3, [r7, #23]
 800de4a:	e00a      	b.n	800de62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b02      	cmp	r3, #2
 800de50:	d002      	beq.n	800de58 <USB_GetDevSpeed+0x32>
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2b06      	cmp	r3, #6
 800de56:	d102      	bne.n	800de5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800de58:	2302      	movs	r3, #2
 800de5a:	75fb      	strb	r3, [r7, #23]
 800de5c:	e001      	b.n	800de62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800de5e:	230f      	movs	r3, #15
 800de60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800de62:	7dfb      	ldrb	r3, [r7, #23]
}
 800de64:	4618      	mov	r0, r3
 800de66:	371c      	adds	r7, #28
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	785b      	ldrb	r3, [r3, #1]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d139      	bne.n	800df00 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de92:	69da      	ldr	r2, [r3, #28]
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	f003 030f 	and.w	r3, r3, #15
 800de9c:	2101      	movs	r1, #1
 800de9e:	fa01 f303 	lsl.w	r3, r1, r3
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	68f9      	ldr	r1, [r7, #12]
 800dea6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800deaa:	4313      	orrs	r3, r2
 800deac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	015a      	lsls	r2, r3, #5
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	4413      	add	r3, r2
 800deb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d153      	bne.n	800df6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	015a      	lsls	r2, r3, #5
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	4413      	add	r3, r2
 800decc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	791b      	ldrb	r3, [r3, #4]
 800dede:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dee0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	059b      	lsls	r3, r3, #22
 800dee6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dee8:	431a      	orrs	r2, r3
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	0159      	lsls	r1, r3, #5
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	440b      	add	r3, r1
 800def2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800def6:	4619      	mov	r1, r3
 800def8:	4b20      	ldr	r3, [pc, #128]	@ (800df7c <USB_ActivateEndpoint+0x10c>)
 800defa:	4313      	orrs	r3, r2
 800defc:	600b      	str	r3, [r1, #0]
 800defe:	e035      	b.n	800df6c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df06:	69da      	ldr	r2, [r3, #28]
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	f003 030f 	and.w	r3, r3, #15
 800df10:	2101      	movs	r1, #1
 800df12:	fa01 f303 	lsl.w	r3, r1, r3
 800df16:	041b      	lsls	r3, r3, #16
 800df18:	68f9      	ldr	r1, [r7, #12]
 800df1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df1e:	4313      	orrs	r3, r2
 800df20:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	015a      	lsls	r2, r3, #5
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	4413      	add	r3, r2
 800df2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800df34:	2b00      	cmp	r3, #0
 800df36:	d119      	bne.n	800df6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	015a      	lsls	r2, r3, #5
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	4413      	add	r3, r2
 800df40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	791b      	ldrb	r3, [r3, #4]
 800df52:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800df54:	430b      	orrs	r3, r1
 800df56:	431a      	orrs	r2, r3
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	0159      	lsls	r1, r3, #5
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	440b      	add	r3, r1
 800df60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df64:	4619      	mov	r1, r3
 800df66:	4b05      	ldr	r3, [pc, #20]	@ (800df7c <USB_ActivateEndpoint+0x10c>)
 800df68:	4313      	orrs	r3, r2
 800df6a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3714      	adds	r7, #20
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop
 800df7c:	10008000 	.word	0x10008000

0800df80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	785b      	ldrb	r3, [r3, #1]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d161      	bne.n	800e060 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	015a      	lsls	r2, r3, #5
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dfae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dfb2:	d11f      	bne.n	800dff4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	015a      	lsls	r2, r3, #5
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	4413      	add	r3, r2
 800dfbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	68ba      	ldr	r2, [r7, #8]
 800dfc4:	0151      	lsls	r1, r2, #5
 800dfc6:	68fa      	ldr	r2, [r7, #12]
 800dfc8:	440a      	add	r2, r1
 800dfca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dfd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	015a      	lsls	r2, r3, #5
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	4413      	add	r3, r2
 800dfdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68ba      	ldr	r2, [r7, #8]
 800dfe4:	0151      	lsls	r1, r2, #5
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	440a      	add	r2, r1
 800dfea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dff2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	f003 030f 	and.w	r3, r3, #15
 800e004:	2101      	movs	r1, #1
 800e006:	fa01 f303 	lsl.w	r3, r1, r3
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	43db      	mvns	r3, r3
 800e00e:	68f9      	ldr	r1, [r7, #12]
 800e010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e014:	4013      	ands	r3, r2
 800e016:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e01e:	69da      	ldr	r2, [r3, #28]
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	f003 030f 	and.w	r3, r3, #15
 800e028:	2101      	movs	r1, #1
 800e02a:	fa01 f303 	lsl.w	r3, r1, r3
 800e02e:	b29b      	uxth	r3, r3
 800e030:	43db      	mvns	r3, r3
 800e032:	68f9      	ldr	r1, [r7, #12]
 800e034:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e038:	4013      	ands	r3, r2
 800e03a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	015a      	lsls	r2, r3, #5
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	4413      	add	r3, r2
 800e044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	0159      	lsls	r1, r3, #5
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	440b      	add	r3, r1
 800e052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e056:	4619      	mov	r1, r3
 800e058:	4b35      	ldr	r3, [pc, #212]	@ (800e130 <USB_DeactivateEndpoint+0x1b0>)
 800e05a:	4013      	ands	r3, r2
 800e05c:	600b      	str	r3, [r1, #0]
 800e05e:	e060      	b.n	800e122 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	015a      	lsls	r2, r3, #5
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	4413      	add	r3, r2
 800e068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e072:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e076:	d11f      	bne.n	800e0b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	015a      	lsls	r2, r3, #5
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	4413      	add	r3, r2
 800e080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68ba      	ldr	r2, [r7, #8]
 800e088:	0151      	lsls	r1, r2, #5
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	440a      	add	r2, r1
 800e08e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e092:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e096:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	015a      	lsls	r2, r3, #5
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	4413      	add	r3, r2
 800e0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	0151      	lsls	r1, r2, #5
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	440a      	add	r2, r1
 800e0ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e0b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e0b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	f003 030f 	and.w	r3, r3, #15
 800e0c8:	2101      	movs	r1, #1
 800e0ca:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ce:	041b      	lsls	r3, r3, #16
 800e0d0:	43db      	mvns	r3, r3
 800e0d2:	68f9      	ldr	r1, [r7, #12]
 800e0d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0d8:	4013      	ands	r3, r2
 800e0da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0e2:	69da      	ldr	r2, [r3, #28]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	f003 030f 	and.w	r3, r3, #15
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e0f2:	041b      	lsls	r3, r3, #16
 800e0f4:	43db      	mvns	r3, r3
 800e0f6:	68f9      	ldr	r1, [r7, #12]
 800e0f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	015a      	lsls	r2, r3, #5
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	4413      	add	r3, r2
 800e108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	0159      	lsls	r1, r3, #5
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	440b      	add	r3, r1
 800e116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e11a:	4619      	mov	r1, r3
 800e11c:	4b05      	ldr	r3, [pc, #20]	@ (800e134 <USB_DeactivateEndpoint+0x1b4>)
 800e11e:	4013      	ands	r3, r2
 800e120:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	ec337800 	.word	0xec337800
 800e134:	eff37800 	.word	0xeff37800

0800e138 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b08a      	sub	sp, #40	@ 0x28
 800e13c:	af02      	add	r7, sp, #8
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	4613      	mov	r3, r2
 800e144:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	785b      	ldrb	r3, [r3, #1]
 800e154:	2b01      	cmp	r3, #1
 800e156:	f040 8181 	bne.w	800e45c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	691b      	ldr	r3, [r3, #16]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d132      	bne.n	800e1c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	015a      	lsls	r2, r3, #5
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	4413      	add	r3, r2
 800e16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e16e:	691a      	ldr	r2, [r3, #16]
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	0159      	lsls	r1, r3, #5
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	440b      	add	r3, r1
 800e178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e17c:	4619      	mov	r1, r3
 800e17e:	4ba5      	ldr	r3, [pc, #660]	@ (800e414 <USB_EPStartXfer+0x2dc>)
 800e180:	4013      	ands	r3, r2
 800e182:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	015a      	lsls	r2, r3, #5
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	4413      	add	r3, r2
 800e18c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e190:	691b      	ldr	r3, [r3, #16]
 800e192:	69ba      	ldr	r2, [r7, #24]
 800e194:	0151      	lsls	r1, r2, #5
 800e196:	69fa      	ldr	r2, [r7, #28]
 800e198:	440a      	add	r2, r1
 800e19a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e19e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e1a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	015a      	lsls	r2, r3, #5
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1b0:	691a      	ldr	r2, [r3, #16]
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	0159      	lsls	r1, r3, #5
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	440b      	add	r3, r1
 800e1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1be:	4619      	mov	r1, r3
 800e1c0:	4b95      	ldr	r3, [pc, #596]	@ (800e418 <USB_EPStartXfer+0x2e0>)
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	610b      	str	r3, [r1, #16]
 800e1c6:	e092      	b.n	800e2ee <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	015a      	lsls	r2, r3, #5
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1d4:	691a      	ldr	r2, [r3, #16]
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	0159      	lsls	r1, r3, #5
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	440b      	add	r3, r1
 800e1de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	4b8c      	ldr	r3, [pc, #560]	@ (800e418 <USB_EPStartXfer+0x2e0>)
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	015a      	lsls	r2, r3, #5
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1f6:	691a      	ldr	r2, [r3, #16]
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	0159      	lsls	r1, r3, #5
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	440b      	add	r3, r1
 800e200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e204:	4619      	mov	r1, r3
 800e206:	4b83      	ldr	r3, [pc, #524]	@ (800e414 <USB_EPStartXfer+0x2dc>)
 800e208:	4013      	ands	r3, r2
 800e20a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d11a      	bne.n	800e248 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	691a      	ldr	r2, [r3, #16]
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d903      	bls.n	800e226 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	689a      	ldr	r2, [r3, #8]
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	015a      	lsls	r2, r3, #5
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	4413      	add	r3, r2
 800e22e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e232:	691b      	ldr	r3, [r3, #16]
 800e234:	69ba      	ldr	r2, [r7, #24]
 800e236:	0151      	lsls	r1, r2, #5
 800e238:	69fa      	ldr	r2, [r7, #28]
 800e23a:	440a      	add	r2, r1
 800e23c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e240:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e244:	6113      	str	r3, [r2, #16]
 800e246:	e01b      	b.n	800e280 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	4413      	add	r3, r2
 800e250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e254:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	6919      	ldr	r1, [r3, #16]
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	440b      	add	r3, r1
 800e260:	1e59      	subs	r1, r3, #1
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	fbb1 f3f3 	udiv	r3, r1, r3
 800e26a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e26c:	4b6b      	ldr	r3, [pc, #428]	@ (800e41c <USB_EPStartXfer+0x2e4>)
 800e26e:	400b      	ands	r3, r1
 800e270:	69b9      	ldr	r1, [r7, #24]
 800e272:	0148      	lsls	r0, r1, #5
 800e274:	69f9      	ldr	r1, [r7, #28]
 800e276:	4401      	add	r1, r0
 800e278:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e27c:	4313      	orrs	r3, r2
 800e27e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	015a      	lsls	r2, r3, #5
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	4413      	add	r3, r2
 800e288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e28c:	691a      	ldr	r2, [r3, #16]
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e296:	69b9      	ldr	r1, [r7, #24]
 800e298:	0148      	lsls	r0, r1, #5
 800e29a:	69f9      	ldr	r1, [r7, #28]
 800e29c:	4401      	add	r1, r0
 800e29e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	791b      	ldrb	r3, [r3, #4]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d11f      	bne.n	800e2ee <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	015a      	lsls	r2, r3, #5
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	69ba      	ldr	r2, [r7, #24]
 800e2be:	0151      	lsls	r1, r2, #5
 800e2c0:	69fa      	ldr	r2, [r7, #28]
 800e2c2:	440a      	add	r2, r1
 800e2c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2c8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e2cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	015a      	lsls	r2, r3, #5
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2da:	691b      	ldr	r3, [r3, #16]
 800e2dc:	69ba      	ldr	r2, [r7, #24]
 800e2de:	0151      	lsls	r1, r2, #5
 800e2e0:	69fa      	ldr	r2, [r7, #28]
 800e2e2:	440a      	add	r2, r1
 800e2e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e2ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d14b      	bne.n	800e38c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	69db      	ldr	r3, [r3, #28]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d009      	beq.n	800e310 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	015a      	lsls	r2, r3, #5
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	4413      	add	r3, r2
 800e304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e308:	461a      	mov	r2, r3
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	69db      	ldr	r3, [r3, #28]
 800e30e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	791b      	ldrb	r3, [r3, #4]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d128      	bne.n	800e36a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e324:	2b00      	cmp	r3, #0
 800e326:	d110      	bne.n	800e34a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	015a      	lsls	r2, r3, #5
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	4413      	add	r3, r2
 800e330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	69ba      	ldr	r2, [r7, #24]
 800e338:	0151      	lsls	r1, r2, #5
 800e33a:	69fa      	ldr	r2, [r7, #28]
 800e33c:	440a      	add	r2, r1
 800e33e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e342:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e346:	6013      	str	r3, [r2, #0]
 800e348:	e00f      	b.n	800e36a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	015a      	lsls	r2, r3, #5
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	4413      	add	r3, r2
 800e352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	69ba      	ldr	r2, [r7, #24]
 800e35a:	0151      	lsls	r1, r2, #5
 800e35c:	69fa      	ldr	r2, [r7, #28]
 800e35e:	440a      	add	r2, r1
 800e360:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e368:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	015a      	lsls	r2, r3, #5
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	4413      	add	r3, r2
 800e372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	69ba      	ldr	r2, [r7, #24]
 800e37a:	0151      	lsls	r1, r2, #5
 800e37c:	69fa      	ldr	r2, [r7, #28]
 800e37e:	440a      	add	r2, r1
 800e380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e384:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e388:	6013      	str	r3, [r2, #0]
 800e38a:	e16a      	b.n	800e662 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	015a      	lsls	r2, r3, #5
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	4413      	add	r3, r2
 800e394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	69ba      	ldr	r2, [r7, #24]
 800e39c:	0151      	lsls	r1, r2, #5
 800e39e:	69fa      	ldr	r2, [r7, #28]
 800e3a0:	440a      	add	r2, r1
 800e3a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e3aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	791b      	ldrb	r3, [r3, #4]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d015      	beq.n	800e3e0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 8152 	beq.w	800e662 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	781b      	ldrb	r3, [r3, #0]
 800e3ca:	f003 030f 	and.w	r3, r3, #15
 800e3ce:	2101      	movs	r1, #1
 800e3d0:	fa01 f303 	lsl.w	r3, r1, r3
 800e3d4:	69f9      	ldr	r1, [r7, #28]
 800e3d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	634b      	str	r3, [r1, #52]	@ 0x34
 800e3de:	e140      	b.n	800e662 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d117      	bne.n	800e420 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	015a      	lsls	r2, r3, #5
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	69ba      	ldr	r2, [r7, #24]
 800e400:	0151      	lsls	r1, r2, #5
 800e402:	69fa      	ldr	r2, [r7, #28]
 800e404:	440a      	add	r2, r1
 800e406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e40a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e40e:	6013      	str	r3, [r2, #0]
 800e410:	e016      	b.n	800e440 <USB_EPStartXfer+0x308>
 800e412:	bf00      	nop
 800e414:	e007ffff 	.word	0xe007ffff
 800e418:	fff80000 	.word	0xfff80000
 800e41c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	015a      	lsls	r2, r3, #5
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	4413      	add	r3, r2
 800e428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	69ba      	ldr	r2, [r7, #24]
 800e430:	0151      	lsls	r1, r2, #5
 800e432:	69fa      	ldr	r2, [r7, #28]
 800e434:	440a      	add	r2, r1
 800e436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e43a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e43e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	68d9      	ldr	r1, [r3, #12]
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	781a      	ldrb	r2, [r3, #0]
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	691b      	ldr	r3, [r3, #16]
 800e44c:	b298      	uxth	r0, r3
 800e44e:	79fb      	ldrb	r3, [r7, #7]
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	4603      	mov	r3, r0
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f000 f9b9 	bl	800e7cc <USB_WritePacket>
 800e45a:	e102      	b.n	800e662 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	015a      	lsls	r2, r3, #5
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	4413      	add	r3, r2
 800e464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e468:	691a      	ldr	r2, [r3, #16]
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	0159      	lsls	r1, r3, #5
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	440b      	add	r3, r1
 800e472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e476:	4619      	mov	r1, r3
 800e478:	4b7c      	ldr	r3, [pc, #496]	@ (800e66c <USB_EPStartXfer+0x534>)
 800e47a:	4013      	ands	r3, r2
 800e47c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	015a      	lsls	r2, r3, #5
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	4413      	add	r3, r2
 800e486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e48a:	691a      	ldr	r2, [r3, #16]
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	0159      	lsls	r1, r3, #5
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	440b      	add	r3, r1
 800e494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e498:	4619      	mov	r1, r3
 800e49a:	4b75      	ldr	r3, [pc, #468]	@ (800e670 <USB_EPStartXfer+0x538>)
 800e49c:	4013      	ands	r3, r2
 800e49e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d12f      	bne.n	800e506 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d003      	beq.n	800e4b6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	689a      	ldr	r2, [r3, #8]
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	689a      	ldr	r2, [r3, #8]
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	015a      	lsls	r2, r3, #5
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	4413      	add	r3, r2
 800e4c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4ca:	691a      	ldr	r2, [r3, #16]
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	6a1b      	ldr	r3, [r3, #32]
 800e4d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4d4:	69b9      	ldr	r1, [r7, #24]
 800e4d6:	0148      	lsls	r0, r1, #5
 800e4d8:	69f9      	ldr	r1, [r7, #28]
 800e4da:	4401      	add	r1, r0
 800e4dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	015a      	lsls	r2, r3, #5
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4f0:	691b      	ldr	r3, [r3, #16]
 800e4f2:	69ba      	ldr	r2, [r7, #24]
 800e4f4:	0151      	lsls	r1, r2, #5
 800e4f6:	69fa      	ldr	r2, [r7, #28]
 800e4f8:	440a      	add	r2, r1
 800e4fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e4fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e502:	6113      	str	r3, [r2, #16]
 800e504:	e05f      	b.n	800e5c6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	691b      	ldr	r3, [r3, #16]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d123      	bne.n	800e556 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	015a      	lsls	r2, r3, #5
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	4413      	add	r3, r2
 800e516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e51a:	691a      	ldr	r2, [r3, #16]
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e524:	69b9      	ldr	r1, [r7, #24]
 800e526:	0148      	lsls	r0, r1, #5
 800e528:	69f9      	ldr	r1, [r7, #28]
 800e52a:	4401      	add	r1, r0
 800e52c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e530:	4313      	orrs	r3, r2
 800e532:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	015a      	lsls	r2, r3, #5
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	4413      	add	r3, r2
 800e53c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e540:	691b      	ldr	r3, [r3, #16]
 800e542:	69ba      	ldr	r2, [r7, #24]
 800e544:	0151      	lsls	r1, r2, #5
 800e546:	69fa      	ldr	r2, [r7, #28]
 800e548:	440a      	add	r2, r1
 800e54a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e54e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e552:	6113      	str	r3, [r2, #16]
 800e554:	e037      	b.n	800e5c6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	691a      	ldr	r2, [r3, #16]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	4413      	add	r3, r2
 800e560:	1e5a      	subs	r2, r3, #1
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	fbb2 f3f3 	udiv	r3, r2, r3
 800e56a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	689b      	ldr	r3, [r3, #8]
 800e570:	8afa      	ldrh	r2, [r7, #22]
 800e572:	fb03 f202 	mul.w	r2, r3, r2
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	015a      	lsls	r2, r3, #5
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	4413      	add	r3, r2
 800e582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e586:	691a      	ldr	r2, [r3, #16]
 800e588:	8afb      	ldrh	r3, [r7, #22]
 800e58a:	04d9      	lsls	r1, r3, #19
 800e58c:	4b39      	ldr	r3, [pc, #228]	@ (800e674 <USB_EPStartXfer+0x53c>)
 800e58e:	400b      	ands	r3, r1
 800e590:	69b9      	ldr	r1, [r7, #24]
 800e592:	0148      	lsls	r0, r1, #5
 800e594:	69f9      	ldr	r1, [r7, #28]
 800e596:	4401      	add	r1, r0
 800e598:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e59c:	4313      	orrs	r3, r2
 800e59e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	015a      	lsls	r2, r3, #5
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5ac:	691a      	ldr	r2, [r3, #16]
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	6a1b      	ldr	r3, [r3, #32]
 800e5b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5b6:	69b9      	ldr	r1, [r7, #24]
 800e5b8:	0148      	lsls	r0, r1, #5
 800e5ba:	69f9      	ldr	r1, [r7, #28]
 800e5bc:	4401      	add	r1, r0
 800e5be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e5c6:	79fb      	ldrb	r3, [r7, #7]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d10d      	bne.n	800e5e8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d009      	beq.n	800e5e8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	68d9      	ldr	r1, [r3, #12]
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	015a      	lsls	r2, r3, #5
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	4413      	add	r3, r2
 800e5e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5e4:	460a      	mov	r2, r1
 800e5e6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	791b      	ldrb	r3, [r3, #4]
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d128      	bne.n	800e642 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d110      	bne.n	800e622 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	4413      	add	r3, r2
 800e608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	69ba      	ldr	r2, [r7, #24]
 800e610:	0151      	lsls	r1, r2, #5
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	440a      	add	r2, r1
 800e616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e61a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e61e:	6013      	str	r3, [r2, #0]
 800e620:	e00f      	b.n	800e642 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	015a      	lsls	r2, r3, #5
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	4413      	add	r3, r2
 800e62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	69ba      	ldr	r2, [r7, #24]
 800e632:	0151      	lsls	r1, r2, #5
 800e634:	69fa      	ldr	r2, [r7, #28]
 800e636:	440a      	add	r2, r1
 800e638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e63c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e640:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	015a      	lsls	r2, r3, #5
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	4413      	add	r3, r2
 800e64a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	69ba      	ldr	r2, [r7, #24]
 800e652:	0151      	lsls	r1, r2, #5
 800e654:	69fa      	ldr	r2, [r7, #28]
 800e656:	440a      	add	r2, r1
 800e658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e65c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e660:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e662:	2300      	movs	r3, #0
}
 800e664:	4618      	mov	r0, r3
 800e666:	3720      	adds	r7, #32
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	fff80000 	.word	0xfff80000
 800e670:	e007ffff 	.word	0xe007ffff
 800e674:	1ff80000 	.word	0x1ff80000

0800e678 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e678:	b480      	push	{r7}
 800e67a:	b087      	sub	sp, #28
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e682:	2300      	movs	r3, #0
 800e684:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e686:	2300      	movs	r3, #0
 800e688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	785b      	ldrb	r3, [r3, #1]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d14a      	bne.n	800e72c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	015a      	lsls	r2, r3, #5
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	4413      	add	r3, r2
 800e6a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6ae:	f040 8086 	bne.w	800e7be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	015a      	lsls	r2, r3, #5
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	7812      	ldrb	r2, [r2, #0]
 800e6c6:	0151      	lsls	r1, r2, #5
 800e6c8:	693a      	ldr	r2, [r7, #16]
 800e6ca:	440a      	add	r2, r1
 800e6cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e6d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	015a      	lsls	r2, r3, #5
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	4413      	add	r3, r2
 800e6e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	683a      	ldr	r2, [r7, #0]
 800e6e8:	7812      	ldrb	r2, [r2, #0]
 800e6ea:	0151      	lsls	r1, r2, #5
 800e6ec:	693a      	ldr	r2, [r7, #16]
 800e6ee:	440a      	add	r2, r1
 800e6f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e6f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e706:	4293      	cmp	r3, r2
 800e708:	d902      	bls.n	800e710 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	75fb      	strb	r3, [r7, #23]
          break;
 800e70e:	e056      	b.n	800e7be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	015a      	lsls	r2, r3, #5
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	4413      	add	r3, r2
 800e71a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e728:	d0e7      	beq.n	800e6fa <USB_EPStopXfer+0x82>
 800e72a:	e048      	b.n	800e7be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	015a      	lsls	r2, r3, #5
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	4413      	add	r3, r2
 800e736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e740:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e744:	d13b      	bne.n	800e7be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	015a      	lsls	r2, r3, #5
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	4413      	add	r3, r2
 800e750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	7812      	ldrb	r2, [r2, #0]
 800e75a:	0151      	lsls	r1, r2, #5
 800e75c:	693a      	ldr	r2, [r7, #16]
 800e75e:	440a      	add	r2, r1
 800e760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e764:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e768:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	015a      	lsls	r2, r3, #5
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	4413      	add	r3, r2
 800e774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	7812      	ldrb	r2, [r2, #0]
 800e77e:	0151      	lsls	r1, r2, #5
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	440a      	add	r2, r1
 800e784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e788:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e78c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	3301      	adds	r3, #1
 800e792:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d902      	bls.n	800e7a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	75fb      	strb	r3, [r7, #23]
          break;
 800e7a2:	e00c      	b.n	800e7be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	015a      	lsls	r2, r3, #5
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	4413      	add	r3, r2
 800e7ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e7bc:	d0e7      	beq.n	800e78e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	371c      	adds	r7, #28
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b089      	sub	sp, #36	@ 0x24
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	461a      	mov	r2, r3
 800e7da:	460b      	mov	r3, r1
 800e7dc:	71fb      	strb	r3, [r7, #7]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e7ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d123      	bne.n	800e83a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e7f2:	88bb      	ldrh	r3, [r7, #4]
 800e7f4:	3303      	adds	r3, #3
 800e7f6:	089b      	lsrs	r3, r3, #2
 800e7f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	61bb      	str	r3, [r7, #24]
 800e7fe:	e018      	b.n	800e832 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e800:	79fb      	ldrb	r3, [r7, #7]
 800e802:	031a      	lsls	r2, r3, #12
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	4413      	add	r3, r2
 800e808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e80c:	461a      	mov	r2, r3
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	3301      	adds	r3, #1
 800e818:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	3301      	adds	r3, #1
 800e81e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	3301      	adds	r3, #1
 800e824:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	3301      	adds	r3, #1
 800e82a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	3301      	adds	r3, #1
 800e830:	61bb      	str	r3, [r7, #24]
 800e832:	69ba      	ldr	r2, [r7, #24]
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	429a      	cmp	r2, r3
 800e838:	d3e2      	bcc.n	800e800 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3724      	adds	r7, #36	@ 0x24
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e848:	b480      	push	{r7}
 800e84a:	b08b      	sub	sp, #44	@ 0x2c
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	4613      	mov	r3, r2
 800e854:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e85e:	88fb      	ldrh	r3, [r7, #6]
 800e860:	089b      	lsrs	r3, r3, #2
 800e862:	b29b      	uxth	r3, r3
 800e864:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e866:	88fb      	ldrh	r3, [r7, #6]
 800e868:	f003 0303 	and.w	r3, r3, #3
 800e86c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e86e:	2300      	movs	r3, #0
 800e870:	623b      	str	r3, [r7, #32]
 800e872:	e014      	b.n	800e89e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e87e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e882:	3301      	adds	r3, #1
 800e884:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e888:	3301      	adds	r3, #1
 800e88a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88e:	3301      	adds	r3, #1
 800e890:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e894:	3301      	adds	r3, #1
 800e896:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e898:	6a3b      	ldr	r3, [r7, #32]
 800e89a:	3301      	adds	r3, #1
 800e89c:	623b      	str	r3, [r7, #32]
 800e89e:	6a3a      	ldr	r2, [r7, #32]
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d3e6      	bcc.n	800e874 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e8a6:	8bfb      	ldrh	r3, [r7, #30]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d01e      	beq.n	800e8ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	f107 0310 	add.w	r3, r7, #16
 800e8bc:	6812      	ldr	r2, [r2, #0]
 800e8be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e8c0:	693a      	ldr	r2, [r7, #16]
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	00db      	lsls	r3, r3, #3
 800e8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8d0:	701a      	strb	r2, [r3, #0]
      i++;
 800e8d2:	6a3b      	ldr	r3, [r7, #32]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	623b      	str	r3, [r7, #32]
      pDest++;
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8da:	3301      	adds	r3, #1
 800e8dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e8de:	8bfb      	ldrh	r3, [r7, #30]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e8e4:	8bfb      	ldrh	r3, [r7, #30]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d1ea      	bne.n	800e8c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	372c      	adds	r7, #44	@ 0x2c
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	785b      	ldrb	r3, [r3, #1]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d12c      	bne.n	800e96e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	015a      	lsls	r2, r3, #5
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	4413      	add	r3, r2
 800e91c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	db12      	blt.n	800e94c <USB_EPSetStall+0x54>
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00f      	beq.n	800e94c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	015a      	lsls	r2, r3, #5
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	4413      	add	r3, r2
 800e934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	0151      	lsls	r1, r2, #5
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	440a      	add	r2, r1
 800e942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e946:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e94a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	015a      	lsls	r2, r3, #5
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	4413      	add	r3, r2
 800e954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	0151      	lsls	r1, r2, #5
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	440a      	add	r2, r1
 800e962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e966:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e96a:	6013      	str	r3, [r2, #0]
 800e96c:	e02b      	b.n	800e9c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	015a      	lsls	r2, r3, #5
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	4413      	add	r3, r2
 800e976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	db12      	blt.n	800e9a6 <USB_EPSetStall+0xae>
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00f      	beq.n	800e9a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	015a      	lsls	r2, r3, #5
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	4413      	add	r3, r2
 800e98e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	0151      	lsls	r1, r2, #5
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	440a      	add	r2, r1
 800e99c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e9a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	015a      	lsls	r2, r3, #5
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	0151      	lsls	r1, r2, #5
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	440a      	add	r2, r1
 800e9bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e9c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3714      	adds	r7, #20
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b085      	sub	sp, #20
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	785b      	ldrb	r3, [r3, #1]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d128      	bne.n	800ea42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	015a      	lsls	r2, r3, #5
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	68ba      	ldr	r2, [r7, #8]
 800ea00:	0151      	lsls	r1, r2, #5
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	440a      	add	r2, r1
 800ea06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ea0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	791b      	ldrb	r3, [r3, #4]
 800ea14:	2b03      	cmp	r3, #3
 800ea16:	d003      	beq.n	800ea20 <USB_EPClearStall+0x4c>
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	791b      	ldrb	r3, [r3, #4]
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d138      	bne.n	800ea92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	015a      	lsls	r2, r3, #5
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	4413      	add	r3, r2
 800ea28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	0151      	lsls	r1, r2, #5
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	440a      	add	r2, r1
 800ea36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea3e:	6013      	str	r3, [r2, #0]
 800ea40:	e027      	b.n	800ea92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	68ba      	ldr	r2, [r7, #8]
 800ea52:	0151      	lsls	r1, r2, #5
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	440a      	add	r2, r1
 800ea58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ea60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	791b      	ldrb	r3, [r3, #4]
 800ea66:	2b03      	cmp	r3, #3
 800ea68:	d003      	beq.n	800ea72 <USB_EPClearStall+0x9e>
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	791b      	ldrb	r3, [r3, #4]
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d10f      	bne.n	800ea92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	015a      	lsls	r2, r3, #5
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	4413      	add	r3, r2
 800ea7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	0151      	lsls	r1, r2, #5
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	440a      	add	r2, r1
 800ea88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	68fa      	ldr	r2, [r7, #12]
 800eaba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eabe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800eac2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	78fb      	ldrb	r3, [r7, #3]
 800eace:	011b      	lsls	r3, r3, #4
 800ead0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ead4:	68f9      	ldr	r1, [r7, #12]
 800ead6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eada:	4313      	orrs	r3, r2
 800eadc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800eade:	2300      	movs	r3, #0
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3714      	adds	r7, #20
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b085      	sub	sp, #20
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eb06:	f023 0303 	bic.w	r3, r3, #3
 800eb0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eb1a:	f023 0302 	bic.w	r3, r3, #2
 800eb1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb20:	2300      	movs	r3, #0
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3714      	adds	r7, #20
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr

0800eb2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb2e:	b480      	push	{r7}
 800eb30:	b085      	sub	sp, #20
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eb48:	f023 0303 	bic.w	r3, r3, #3
 800eb4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eb5c:	f043 0302 	orr.w	r3, r3, #2
 800eb60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb62:	2300      	movs	r3, #0
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3714      	adds	r7, #20
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	695b      	ldr	r3, [r3, #20]
 800eb7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	4013      	ands	r3, r2
 800eb86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eb88:	68fb      	ldr	r3, [r7, #12]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr

0800eb96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb96:	b480      	push	{r7}
 800eb98:	b085      	sub	sp, #20
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eba8:	699b      	ldr	r3, [r3, #24]
 800ebaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebb2:	69db      	ldr	r3, [r3, #28]
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	0c1b      	lsrs	r3, r3, #16
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebca:	b480      	push	{r7}
 800ebcc:	b085      	sub	sp, #20
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebdc:	699b      	ldr	r3, [r3, #24]
 800ebde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	68ba      	ldr	r2, [r7, #8]
 800ebea:	4013      	ands	r3, r2
 800ebec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	b29b      	uxth	r3, r3
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3714      	adds	r7, #20
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ebfe:	b480      	push	{r7}
 800ec00:	b085      	sub	sp, #20
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
 800ec06:	460b      	mov	r3, r1
 800ec08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ec0e:	78fb      	ldrb	r3, [r7, #3]
 800ec10:	015a      	lsls	r2, r3, #5
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	4413      	add	r3, r2
 800ec16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec24:	695b      	ldr	r3, [r3, #20]
 800ec26:	68ba      	ldr	r2, [r7, #8]
 800ec28:	4013      	ands	r3, r2
 800ec2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec2c:	68bb      	ldr	r3, [r7, #8]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr

0800ec3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec3a:	b480      	push	{r7}
 800ec3c:	b087      	sub	sp, #28
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
 800ec42:	460b      	mov	r3, r1
 800ec44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ec5e:	78fb      	ldrb	r3, [r7, #3]
 800ec60:	f003 030f 	and.w	r3, r3, #15
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	fa22 f303 	lsr.w	r3, r2, r3
 800ec6a:	01db      	lsls	r3, r3, #7
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	4313      	orrs	r3, r2
 800ec72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ec74:	78fb      	ldrb	r3, [r7, #3]
 800ec76:	015a      	lsls	r2, r3, #5
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	4013      	ands	r3, r2
 800ec86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec88:	68bb      	ldr	r3, [r7, #8]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	371c      	adds	r7, #28
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ec96:	b480      	push	{r7}
 800ec98:	b083      	sub	sp, #12
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	695b      	ldr	r3, [r3, #20]
 800eca2:	f003 0301 	and.w	r3, r3, #1
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	370c      	adds	r7, #12
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
	...

0800ecb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4b09      	ldr	r3, [pc, #36]	@ (800ecf8 <USB_ActivateSetup+0x44>)
 800ecd2:	4013      	ands	r3, r2
 800ecd4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ece4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ece8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3714      	adds	r7, #20
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	fffff800 	.word	0xfffff800

0800ecfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b087      	sub	sp, #28
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	460b      	mov	r3, r1
 800ed06:	607a      	str	r2, [r7, #4]
 800ed08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	333c      	adds	r3, #60	@ 0x3c
 800ed12:	3304      	adds	r3, #4
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	4a26      	ldr	r2, [pc, #152]	@ (800edb4 <USB_EP0_OutStart+0xb8>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d90a      	bls.n	800ed36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed30:	d101      	bne.n	800ed36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ed32:	2300      	movs	r3, #0
 800ed34:	e037      	b.n	800eda6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	697a      	ldr	r2, [r7, #20]
 800ed4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ed54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	697a      	ldr	r2, [r7, #20]
 800ed60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed64:	f043 0318 	orr.w	r3, r3, #24
 800ed68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed78:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ed7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ed7e:	7afb      	ldrb	r3, [r7, #11]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d10f      	bne.n	800eda4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	697a      	ldr	r2, [r7, #20]
 800ed9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed9e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800eda2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	371c      	adds	r7, #28
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	4f54300a 	.word	0x4f54300a

0800edb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800edc0:	2300      	movs	r3, #0
 800edc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	3301      	adds	r3, #1
 800edc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	4a13      	ldr	r2, [pc, #76]	@ (800ee1c <USB_CoreReset+0x64>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d901      	bls.n	800edd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800edd2:	2303      	movs	r3, #3
 800edd4:	e01b      	b.n	800ee0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	691b      	ldr	r3, [r3, #16]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	daf2      	bge.n	800edc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800edde:	2300      	movs	r3, #0
 800ede0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	691b      	ldr	r3, [r3, #16]
 800ede6:	f043 0201 	orr.w	r2, r3, #1
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	3301      	adds	r3, #1
 800edf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	4a09      	ldr	r2, [pc, #36]	@ (800ee1c <USB_CoreReset+0x64>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d901      	bls.n	800ee00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800edfc:	2303      	movs	r3, #3
 800edfe:	e006      	b.n	800ee0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	691b      	ldr	r3, [r3, #16]
 800ee04:	f003 0301 	and.w	r3, r3, #1
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d0f0      	beq.n	800edee <USB_CoreReset+0x36>

  return HAL_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3714      	adds	r7, #20
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	00030d40 	.word	0x00030d40

0800ee20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	460b      	mov	r3, r1
 800ee2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ee2c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ee30:	f003 f954 	bl	80120dc <USBD_static_malloc>
 800ee34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d109      	bne.n	800ee50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	32b0      	adds	r2, #176	@ 0xb0
 800ee46:	2100      	movs	r1, #0
 800ee48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	e0d4      	b.n	800effa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ee50:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ee54:	2100      	movs	r1, #0
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f004 f827 	bl	8012eaa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	32b0      	adds	r2, #176	@ 0xb0
 800ee66:	68f9      	ldr	r1, [r7, #12]
 800ee68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	32b0      	adds	r2, #176	@ 0xb0
 800ee76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	7c1b      	ldrb	r3, [r3, #16]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d138      	bne.n	800eefa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ee88:	4b5e      	ldr	r3, [pc, #376]	@ (800f004 <USBD_CDC_Init+0x1e4>)
 800ee8a:	7819      	ldrb	r1, [r3, #0]
 800ee8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ee90:	2202      	movs	r2, #2
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f002 ffff 	bl	8011e96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ee98:	4b5a      	ldr	r3, [pc, #360]	@ (800f004 <USBD_CDC_Init+0x1e4>)
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	f003 020f 	and.w	r2, r3, #15
 800eea0:	6879      	ldr	r1, [r7, #4]
 800eea2:	4613      	mov	r3, r2
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	4413      	add	r3, r2
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	440b      	add	r3, r1
 800eeac:	3324      	adds	r3, #36	@ 0x24
 800eeae:	2201      	movs	r2, #1
 800eeb0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800eeb2:	4b55      	ldr	r3, [pc, #340]	@ (800f008 <USBD_CDC_Init+0x1e8>)
 800eeb4:	7819      	ldrb	r1, [r3, #0]
 800eeb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eeba:	2202      	movs	r2, #2
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f002 ffea 	bl	8011e96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800eec2:	4b51      	ldr	r3, [pc, #324]	@ (800f008 <USBD_CDC_Init+0x1e8>)
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	f003 020f 	and.w	r2, r3, #15
 800eeca:	6879      	ldr	r1, [r7, #4]
 800eecc:	4613      	mov	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	440b      	add	r3, r1
 800eed6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eeda:	2201      	movs	r2, #1
 800eedc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800eede:	4b4b      	ldr	r3, [pc, #300]	@ (800f00c <USBD_CDC_Init+0x1ec>)
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	f003 020f 	and.w	r2, r3, #15
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	4613      	mov	r3, r2
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	4413      	add	r3, r2
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	440b      	add	r3, r1
 800eef2:	3326      	adds	r3, #38	@ 0x26
 800eef4:	2210      	movs	r2, #16
 800eef6:	801a      	strh	r2, [r3, #0]
 800eef8:	e035      	b.n	800ef66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800eefa:	4b42      	ldr	r3, [pc, #264]	@ (800f004 <USBD_CDC_Init+0x1e4>)
 800eefc:	7819      	ldrb	r1, [r3, #0]
 800eefe:	2340      	movs	r3, #64	@ 0x40
 800ef00:	2202      	movs	r2, #2
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f002 ffc7 	bl	8011e96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ef08:	4b3e      	ldr	r3, [pc, #248]	@ (800f004 <USBD_CDC_Init+0x1e4>)
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	f003 020f 	and.w	r2, r3, #15
 800ef10:	6879      	ldr	r1, [r7, #4]
 800ef12:	4613      	mov	r3, r2
 800ef14:	009b      	lsls	r3, r3, #2
 800ef16:	4413      	add	r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	440b      	add	r3, r1
 800ef1c:	3324      	adds	r3, #36	@ 0x24
 800ef1e:	2201      	movs	r2, #1
 800ef20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ef22:	4b39      	ldr	r3, [pc, #228]	@ (800f008 <USBD_CDC_Init+0x1e8>)
 800ef24:	7819      	ldrb	r1, [r3, #0]
 800ef26:	2340      	movs	r3, #64	@ 0x40
 800ef28:	2202      	movs	r2, #2
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f002 ffb3 	bl	8011e96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ef30:	4b35      	ldr	r3, [pc, #212]	@ (800f008 <USBD_CDC_Init+0x1e8>)
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	f003 020f 	and.w	r2, r3, #15
 800ef38:	6879      	ldr	r1, [r7, #4]
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	4413      	add	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	440b      	add	r3, r1
 800ef44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ef48:	2201      	movs	r2, #1
 800ef4a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ef4c:	4b2f      	ldr	r3, [pc, #188]	@ (800f00c <USBD_CDC_Init+0x1ec>)
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	f003 020f 	and.w	r2, r3, #15
 800ef54:	6879      	ldr	r1, [r7, #4]
 800ef56:	4613      	mov	r3, r2
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	4413      	add	r3, r2
 800ef5c:	009b      	lsls	r3, r3, #2
 800ef5e:	440b      	add	r3, r1
 800ef60:	3326      	adds	r3, #38	@ 0x26
 800ef62:	2210      	movs	r2, #16
 800ef64:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ef66:	4b29      	ldr	r3, [pc, #164]	@ (800f00c <USBD_CDC_Init+0x1ec>)
 800ef68:	7819      	ldrb	r1, [r3, #0]
 800ef6a:	2308      	movs	r3, #8
 800ef6c:	2203      	movs	r2, #3
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f002 ff91 	bl	8011e96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ef74:	4b25      	ldr	r3, [pc, #148]	@ (800f00c <USBD_CDC_Init+0x1ec>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	f003 020f 	and.w	r2, r3, #15
 800ef7c:	6879      	ldr	r1, [r7, #4]
 800ef7e:	4613      	mov	r3, r2
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	4413      	add	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	440b      	add	r3, r1
 800ef88:	3324      	adds	r3, #36	@ 0x24
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	33b0      	adds	r3, #176	@ 0xb0
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	4413      	add	r3, r2
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2200      	movs	r2, #0
 800efae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d101      	bne.n	800efc8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800efc4:	2302      	movs	r3, #2
 800efc6:	e018      	b.n	800effa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	7c1b      	ldrb	r3, [r3, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10a      	bne.n	800efe6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800efd0:	4b0d      	ldr	r3, [pc, #52]	@ (800f008 <USBD_CDC_Init+0x1e8>)
 800efd2:	7819      	ldrb	r1, [r3, #0]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800efda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f003 f848 	bl	8012074 <USBD_LL_PrepareReceive>
 800efe4:	e008      	b.n	800eff8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800efe6:	4b08      	ldr	r3, [pc, #32]	@ (800f008 <USBD_CDC_Init+0x1e8>)
 800efe8:	7819      	ldrb	r1, [r3, #0]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eff0:	2340      	movs	r3, #64	@ 0x40
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f003 f83e 	bl	8012074 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eff8:	2300      	movs	r3, #0
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	2400009b 	.word	0x2400009b
 800f008:	2400009c 	.word	0x2400009c
 800f00c:	2400009d 	.word	0x2400009d

0800f010 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	460b      	mov	r3, r1
 800f01a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f01c:	4b3a      	ldr	r3, [pc, #232]	@ (800f108 <USBD_CDC_DeInit+0xf8>)
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	4619      	mov	r1, r3
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f002 ff5d 	bl	8011ee2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f028:	4b37      	ldr	r3, [pc, #220]	@ (800f108 <USBD_CDC_DeInit+0xf8>)
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	f003 020f 	and.w	r2, r3, #15
 800f030:	6879      	ldr	r1, [r7, #4]
 800f032:	4613      	mov	r3, r2
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	4413      	add	r3, r2
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	440b      	add	r3, r1
 800f03c:	3324      	adds	r3, #36	@ 0x24
 800f03e:	2200      	movs	r2, #0
 800f040:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f042:	4b32      	ldr	r3, [pc, #200]	@ (800f10c <USBD_CDC_DeInit+0xfc>)
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	4619      	mov	r1, r3
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f002 ff4a 	bl	8011ee2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f04e:	4b2f      	ldr	r3, [pc, #188]	@ (800f10c <USBD_CDC_DeInit+0xfc>)
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	f003 020f 	and.w	r2, r3, #15
 800f056:	6879      	ldr	r1, [r7, #4]
 800f058:	4613      	mov	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	440b      	add	r3, r1
 800f062:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f066:	2200      	movs	r2, #0
 800f068:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f06a:	4b29      	ldr	r3, [pc, #164]	@ (800f110 <USBD_CDC_DeInit+0x100>)
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	4619      	mov	r1, r3
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f002 ff36 	bl	8011ee2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f076:	4b26      	ldr	r3, [pc, #152]	@ (800f110 <USBD_CDC_DeInit+0x100>)
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	f003 020f 	and.w	r2, r3, #15
 800f07e:	6879      	ldr	r1, [r7, #4]
 800f080:	4613      	mov	r3, r2
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	4413      	add	r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	440b      	add	r3, r1
 800f08a:	3324      	adds	r3, #36	@ 0x24
 800f08c:	2200      	movs	r2, #0
 800f08e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f090:	4b1f      	ldr	r3, [pc, #124]	@ (800f110 <USBD_CDC_DeInit+0x100>)
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	f003 020f 	and.w	r2, r3, #15
 800f098:	6879      	ldr	r1, [r7, #4]
 800f09a:	4613      	mov	r3, r2
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	4413      	add	r3, r2
 800f0a0:	009b      	lsls	r3, r3, #2
 800f0a2:	440b      	add	r3, r1
 800f0a4:	3326      	adds	r3, #38	@ 0x26
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	32b0      	adds	r2, #176	@ 0xb0
 800f0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d01f      	beq.n	800f0fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	33b0      	adds	r3, #176	@ 0xb0
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	4413      	add	r3, r2
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	32b0      	adds	r2, #176	@ 0xb0
 800f0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f003 f80a 	bl	80120f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	32b0      	adds	r2, #176	@ 0xb0
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	2400009b 	.word	0x2400009b
 800f10c:	2400009c 	.word	0x2400009c
 800f110:	2400009d 	.word	0x2400009d

0800f114 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b086      	sub	sp, #24
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	32b0      	adds	r2, #176	@ 0xb0
 800f128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f12c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f12e:	2300      	movs	r3, #0
 800f130:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f132:	2300      	movs	r3, #0
 800f134:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f136:	2300      	movs	r3, #0
 800f138:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d101      	bne.n	800f144 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f140:	2303      	movs	r3, #3
 800f142:	e0bf      	b.n	800f2c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d050      	beq.n	800f1f2 <USBD_CDC_Setup+0xde>
 800f150:	2b20      	cmp	r3, #32
 800f152:	f040 80af 	bne.w	800f2b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	88db      	ldrh	r3, [r3, #6]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d03a      	beq.n	800f1d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	b25b      	sxtb	r3, r3
 800f164:	2b00      	cmp	r3, #0
 800f166:	da1b      	bge.n	800f1a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	33b0      	adds	r3, #176	@ 0xb0
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	4413      	add	r3, r2
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f17e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f180:	683a      	ldr	r2, [r7, #0]
 800f182:	88d2      	ldrh	r2, [r2, #6]
 800f184:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	88db      	ldrh	r3, [r3, #6]
 800f18a:	2b07      	cmp	r3, #7
 800f18c:	bf28      	it	cs
 800f18e:	2307      	movcs	r3, #7
 800f190:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	89fa      	ldrh	r2, [r7, #14]
 800f196:	4619      	mov	r1, r3
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f001 fdb1 	bl	8010d00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f19e:	e090      	b.n	800f2c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	785a      	ldrb	r2, [r3, #1]
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	88db      	ldrh	r3, [r3, #6]
 800f1ae:	2b3f      	cmp	r3, #63	@ 0x3f
 800f1b0:	d803      	bhi.n	800f1ba <USBD_CDC_Setup+0xa6>
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	88db      	ldrh	r3, [r3, #6]
 800f1b6:	b2da      	uxtb	r2, r3
 800f1b8:	e000      	b.n	800f1bc <USBD_CDC_Setup+0xa8>
 800f1ba:	2240      	movs	r2, #64	@ 0x40
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f1c2:	6939      	ldr	r1, [r7, #16]
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f001 fdc3 	bl	8010d58 <USBD_CtlPrepareRx>
      break;
 800f1d2:	e076      	b.n	800f2c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	33b0      	adds	r3, #176	@ 0xb0
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	4413      	add	r3, r2
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	683a      	ldr	r2, [r7, #0]
 800f1e8:	7850      	ldrb	r0, [r2, #1]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	6839      	ldr	r1, [r7, #0]
 800f1ee:	4798      	blx	r3
      break;
 800f1f0:	e067      	b.n	800f2c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	785b      	ldrb	r3, [r3, #1]
 800f1f6:	2b0b      	cmp	r3, #11
 800f1f8:	d851      	bhi.n	800f29e <USBD_CDC_Setup+0x18a>
 800f1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f200 <USBD_CDC_Setup+0xec>)
 800f1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f200:	0800f231 	.word	0x0800f231
 800f204:	0800f2ad 	.word	0x0800f2ad
 800f208:	0800f29f 	.word	0x0800f29f
 800f20c:	0800f29f 	.word	0x0800f29f
 800f210:	0800f29f 	.word	0x0800f29f
 800f214:	0800f29f 	.word	0x0800f29f
 800f218:	0800f29f 	.word	0x0800f29f
 800f21c:	0800f29f 	.word	0x0800f29f
 800f220:	0800f29f 	.word	0x0800f29f
 800f224:	0800f29f 	.word	0x0800f29f
 800f228:	0800f25b 	.word	0x0800f25b
 800f22c:	0800f285 	.word	0x0800f285
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f236:	b2db      	uxtb	r3, r3
 800f238:	2b03      	cmp	r3, #3
 800f23a:	d107      	bne.n	800f24c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f23c:	f107 030a 	add.w	r3, r7, #10
 800f240:	2202      	movs	r2, #2
 800f242:	4619      	mov	r1, r3
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f001 fd5b 	bl	8010d00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f24a:	e032      	b.n	800f2b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f24c:	6839      	ldr	r1, [r7, #0]
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f001 fce5 	bl	8010c1e <USBD_CtlError>
            ret = USBD_FAIL;
 800f254:	2303      	movs	r3, #3
 800f256:	75fb      	strb	r3, [r7, #23]
          break;
 800f258:	e02b      	b.n	800f2b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f260:	b2db      	uxtb	r3, r3
 800f262:	2b03      	cmp	r3, #3
 800f264:	d107      	bne.n	800f276 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f266:	f107 030d 	add.w	r3, r7, #13
 800f26a:	2201      	movs	r2, #1
 800f26c:	4619      	mov	r1, r3
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f001 fd46 	bl	8010d00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f274:	e01d      	b.n	800f2b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f276:	6839      	ldr	r1, [r7, #0]
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f001 fcd0 	bl	8010c1e <USBD_CtlError>
            ret = USBD_FAIL;
 800f27e:	2303      	movs	r3, #3
 800f280:	75fb      	strb	r3, [r7, #23]
          break;
 800f282:	e016      	b.n	800f2b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	2b03      	cmp	r3, #3
 800f28e:	d00f      	beq.n	800f2b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f001 fcc3 	bl	8010c1e <USBD_CtlError>
            ret = USBD_FAIL;
 800f298:	2303      	movs	r3, #3
 800f29a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f29c:	e008      	b.n	800f2b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f29e:	6839      	ldr	r1, [r7, #0]
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f001 fcbc 	bl	8010c1e <USBD_CtlError>
          ret = USBD_FAIL;
 800f2a6:	2303      	movs	r3, #3
 800f2a8:	75fb      	strb	r3, [r7, #23]
          break;
 800f2aa:	e002      	b.n	800f2b2 <USBD_CDC_Setup+0x19e>
          break;
 800f2ac:	bf00      	nop
 800f2ae:	e008      	b.n	800f2c2 <USBD_CDC_Setup+0x1ae>
          break;
 800f2b0:	bf00      	nop
      }
      break;
 800f2b2:	e006      	b.n	800f2c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f2b4:	6839      	ldr	r1, [r7, #0]
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f001 fcb1 	bl	8010c1e <USBD_CtlError>
      ret = USBD_FAIL;
 800f2bc:	2303      	movs	r3, #3
 800f2be:	75fb      	strb	r3, [r7, #23]
      break;
 800f2c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800f2c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3718      	adds	r7, #24
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f2de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	32b0      	adds	r2, #176	@ 0xb0
 800f2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f2f2:	2303      	movs	r3, #3
 800f2f4:	e065      	b.n	800f3c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	32b0      	adds	r2, #176	@ 0xb0
 800f300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f304:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f306:	78fb      	ldrb	r3, [r7, #3]
 800f308:	f003 020f 	and.w	r2, r3, #15
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	4613      	mov	r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4413      	add	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	440b      	add	r3, r1
 800f318:	3318      	adds	r3, #24
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d02f      	beq.n	800f380 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f320:	78fb      	ldrb	r3, [r7, #3]
 800f322:	f003 020f 	and.w	r2, r3, #15
 800f326:	6879      	ldr	r1, [r7, #4]
 800f328:	4613      	mov	r3, r2
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4413      	add	r3, r2
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	440b      	add	r3, r1
 800f332:	3318      	adds	r3, #24
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	78fb      	ldrb	r3, [r7, #3]
 800f338:	f003 010f 	and.w	r1, r3, #15
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	460b      	mov	r3, r1
 800f340:	00db      	lsls	r3, r3, #3
 800f342:	440b      	add	r3, r1
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	4403      	add	r3, r0
 800f348:	3344      	adds	r3, #68	@ 0x44
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f350:	fb01 f303 	mul.w	r3, r1, r3
 800f354:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f356:	2b00      	cmp	r3, #0
 800f358:	d112      	bne.n	800f380 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f35a:	78fb      	ldrb	r3, [r7, #3]
 800f35c:	f003 020f 	and.w	r2, r3, #15
 800f360:	6879      	ldr	r1, [r7, #4]
 800f362:	4613      	mov	r3, r2
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4413      	add	r3, r2
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	440b      	add	r3, r1
 800f36c:	3318      	adds	r3, #24
 800f36e:	2200      	movs	r2, #0
 800f370:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f372:	78f9      	ldrb	r1, [r7, #3]
 800f374:	2300      	movs	r3, #0
 800f376:	2200      	movs	r2, #0
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f002 fe5a 	bl	8012032 <USBD_LL_Transmit>
 800f37e:	e01f      	b.n	800f3c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	2200      	movs	r2, #0
 800f384:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	33b0      	adds	r3, #176	@ 0xb0
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	4413      	add	r3, r2
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d010      	beq.n	800f3c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	33b0      	adds	r3, #176	@ 0xb0
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	4413      	add	r3, r2
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	691b      	ldr	r3, [r3, #16]
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f3b6:	68ba      	ldr	r2, [r7, #8]
 800f3b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f3bc:	78fa      	ldrb	r2, [r7, #3]
 800f3be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b084      	sub	sp, #16
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	32b0      	adds	r2, #176	@ 0xb0
 800f3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	32b0      	adds	r2, #176	@ 0xb0
 800f3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d101      	bne.n	800f3fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	e01a      	b.n	800f432 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f3fc:	78fb      	ldrb	r3, [r7, #3]
 800f3fe:	4619      	mov	r1, r3
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f002 fe58 	bl	80120b6 <USBD_LL_GetRxDataSize>
 800f406:	4602      	mov	r2, r0
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	33b0      	adds	r3, #176	@ 0xb0
 800f418:	009b      	lsls	r3, r3, #2
 800f41a:	4413      	add	r3, r2
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f426:	68fa      	ldr	r2, [r7, #12]
 800f428:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f42c:	4611      	mov	r1, r2
 800f42e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f430:	2300      	movs	r3, #0
}
 800f432:	4618      	mov	r0, r3
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b084      	sub	sp, #16
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	32b0      	adds	r2, #176	@ 0xb0
 800f44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f450:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d101      	bne.n	800f45c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f458:	2303      	movs	r3, #3
 800f45a:	e024      	b.n	800f4a6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	33b0      	adds	r3, #176	@ 0xb0
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d019      	beq.n	800f4a4 <USBD_CDC_EP0_RxReady+0x6a>
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f476:	2bff      	cmp	r3, #255	@ 0xff
 800f478:	d014      	beq.n	800f4a4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	33b0      	adds	r3, #176	@ 0xb0
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	4413      	add	r3, r2
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f492:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f494:	68fa      	ldr	r2, [r7, #12]
 800f496:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f49a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	22ff      	movs	r2, #255	@ 0xff
 800f4a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f4a4:	2300      	movs	r3, #0
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
	...

0800f4b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b086      	sub	sp, #24
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f4b8:	2182      	movs	r1, #130	@ 0x82
 800f4ba:	4818      	ldr	r0, [pc, #96]	@ (800f51c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f4bc:	f000 fd4f 	bl	800ff5e <USBD_GetEpDesc>
 800f4c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f4c2:	2101      	movs	r1, #1
 800f4c4:	4815      	ldr	r0, [pc, #84]	@ (800f51c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f4c6:	f000 fd4a 	bl	800ff5e <USBD_GetEpDesc>
 800f4ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f4cc:	2181      	movs	r1, #129	@ 0x81
 800f4ce:	4813      	ldr	r0, [pc, #76]	@ (800f51c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f4d0:	f000 fd45 	bl	800ff5e <USBD_GetEpDesc>
 800f4d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d002      	beq.n	800f4e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	2210      	movs	r2, #16
 800f4e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d006      	beq.n	800f4f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f4f0:	711a      	strb	r2, [r3, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d006      	beq.n	800f50a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f504:	711a      	strb	r2, [r3, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2243      	movs	r2, #67	@ 0x43
 800f50e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f510:	4b02      	ldr	r3, [pc, #8]	@ (800f51c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f512:	4618      	mov	r0, r3
 800f514:	3718      	adds	r7, #24
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	24000058 	.word	0x24000058

0800f520 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b086      	sub	sp, #24
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f528:	2182      	movs	r1, #130	@ 0x82
 800f52a:	4818      	ldr	r0, [pc, #96]	@ (800f58c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f52c:	f000 fd17 	bl	800ff5e <USBD_GetEpDesc>
 800f530:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f532:	2101      	movs	r1, #1
 800f534:	4815      	ldr	r0, [pc, #84]	@ (800f58c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f536:	f000 fd12 	bl	800ff5e <USBD_GetEpDesc>
 800f53a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f53c:	2181      	movs	r1, #129	@ 0x81
 800f53e:	4813      	ldr	r0, [pc, #76]	@ (800f58c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f540:	f000 fd0d 	bl	800ff5e <USBD_GetEpDesc>
 800f544:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d002      	beq.n	800f552 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	2210      	movs	r2, #16
 800f550:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d006      	beq.n	800f566 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	2200      	movs	r2, #0
 800f55c:	711a      	strb	r2, [r3, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	f042 0202 	orr.w	r2, r2, #2
 800f564:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d006      	beq.n	800f57a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2200      	movs	r2, #0
 800f570:	711a      	strb	r2, [r3, #4]
 800f572:	2200      	movs	r2, #0
 800f574:	f042 0202 	orr.w	r2, r2, #2
 800f578:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2243      	movs	r2, #67	@ 0x43
 800f57e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f580:	4b02      	ldr	r3, [pc, #8]	@ (800f58c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f582:	4618      	mov	r0, r3
 800f584:	3718      	adds	r7, #24
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	24000058 	.word	0x24000058

0800f590 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f598:	2182      	movs	r1, #130	@ 0x82
 800f59a:	4818      	ldr	r0, [pc, #96]	@ (800f5fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f59c:	f000 fcdf 	bl	800ff5e <USBD_GetEpDesc>
 800f5a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f5a2:	2101      	movs	r1, #1
 800f5a4:	4815      	ldr	r0, [pc, #84]	@ (800f5fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f5a6:	f000 fcda 	bl	800ff5e <USBD_GetEpDesc>
 800f5aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f5ac:	2181      	movs	r1, #129	@ 0x81
 800f5ae:	4813      	ldr	r0, [pc, #76]	@ (800f5fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f5b0:	f000 fcd5 	bl	800ff5e <USBD_GetEpDesc>
 800f5b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d002      	beq.n	800f5c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	2210      	movs	r2, #16
 800f5c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d006      	beq.n	800f5d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f5d0:	711a      	strb	r2, [r3, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d006      	beq.n	800f5ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f5e4:	711a      	strb	r2, [r3, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2243      	movs	r2, #67	@ 0x43
 800f5ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f5f0:	4b02      	ldr	r3, [pc, #8]	@ (800f5fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	24000058 	.word	0x24000058

0800f600 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	220a      	movs	r2, #10
 800f60c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f60e:	4b03      	ldr	r3, [pc, #12]	@ (800f61c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f610:	4618      	mov	r0, r3
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	24000014 	.word	0x24000014

0800f620 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d101      	bne.n	800f634 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f630:	2303      	movs	r3, #3
 800f632:	e009      	b.n	800f648 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f63a:	687a      	ldr	r2, [r7, #4]
 800f63c:	33b0      	adds	r3, #176	@ 0xb0
 800f63e:	009b      	lsls	r3, r3, #2
 800f640:	4413      	add	r3, r2
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f646:	2300      	movs	r3, #0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f654:	b480      	push	{r7}
 800f656:	b087      	sub	sp, #28
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	32b0      	adds	r2, #176	@ 0xb0
 800f66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f66e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d101      	bne.n	800f67a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f676:	2303      	movs	r3, #3
 800f678:	e008      	b.n	800f68c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	68ba      	ldr	r2, [r7, #8]
 800f67e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	371c      	adds	r7, #28
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	32b0      	adds	r2, #176	@ 0xb0
 800f6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d101      	bne.n	800f6bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	e004      	b.n	800f6c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	683a      	ldr	r2, [r7, #0]
 800f6c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f6c4:	2300      	movs	r3, #0
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3714      	adds	r7, #20
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
	...

0800f6d4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	32b0      	adds	r2, #176	@ 0xb0
 800f6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d101      	bne.n	800f6fa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	e025      	b.n	800f746 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f700:	2b00      	cmp	r3, #0
 800f702:	d11f      	bne.n	800f744 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	2201      	movs	r2, #1
 800f708:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f70c:	4b10      	ldr	r3, [pc, #64]	@ (800f750 <USBD_CDC_TransmitPacket+0x7c>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	f003 020f 	and.w	r2, r3, #15
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	4613      	mov	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	4413      	add	r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	4403      	add	r3, r0
 800f726:	3318      	adds	r3, #24
 800f728:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f72a:	4b09      	ldr	r3, [pc, #36]	@ (800f750 <USBD_CDC_TransmitPacket+0x7c>)
 800f72c:	7819      	ldrb	r1, [r3, #0]
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f002 fc79 	bl	8012032 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f740:	2300      	movs	r3, #0
 800f742:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f744:	7bfb      	ldrb	r3, [r7, #15]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3710      	adds	r7, #16
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	2400009b 	.word	0x2400009b

0800f754 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	32b0      	adds	r2, #176	@ 0xb0
 800f766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f76a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	32b0      	adds	r2, #176	@ 0xb0
 800f776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d101      	bne.n	800f782 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f77e:	2303      	movs	r3, #3
 800f780:	e018      	b.n	800f7b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	7c1b      	ldrb	r3, [r3, #16]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10a      	bne.n	800f7a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f78a:	4b0c      	ldr	r3, [pc, #48]	@ (800f7bc <USBD_CDC_ReceivePacket+0x68>)
 800f78c:	7819      	ldrb	r1, [r3, #0]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f002 fc6b 	bl	8012074 <USBD_LL_PrepareReceive>
 800f79e:	e008      	b.n	800f7b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f7a0:	4b06      	ldr	r3, [pc, #24]	@ (800f7bc <USBD_CDC_ReceivePacket+0x68>)
 800f7a2:	7819      	ldrb	r1, [r3, #0]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f7aa:	2340      	movs	r3, #64	@ 0x40
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f002 fc61 	bl	8012074 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	2400009c 	.word	0x2400009c

0800f7c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	4613      	mov	r3, r2
 800f7cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d101      	bne.n	800f7d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f7d4:	2303      	movs	r3, #3
 800f7d6:	e01f      	b.n	800f818 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d003      	beq.n	800f7fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2201      	movs	r2, #1
 800f802:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	79fa      	ldrb	r2, [r7, #7]
 800f80a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f002 fad7 	bl	8011dc0 <USBD_LL_Init>
 800f812:	4603      	mov	r3, r0
 800f814:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f816:	7dfb      	ldrb	r3, [r7, #23]
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f82a:	2300      	movs	r3, #0
 800f82c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d101      	bne.n	800f838 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f834:	2303      	movs	r3, #3
 800f836:	e025      	b.n	800f884 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	683a      	ldr	r2, [r7, #0]
 800f83c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	32ae      	adds	r2, #174	@ 0xae
 800f84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00f      	beq.n	800f874 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	32ae      	adds	r2, #174	@ 0xae
 800f85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f864:	f107 020e 	add.w	r2, r7, #14
 800f868:	4610      	mov	r0, r2
 800f86a:	4798      	blx	r3
 800f86c:	4602      	mov	r2, r0
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f002 fae3 	bl	8011e60 <USBD_LL_Start>
 800f89a:	4603      	mov	r3, r0
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f8ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	370c      	adds	r7, #12
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr

0800f8ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b084      	sub	sp, #16
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d009      	beq.n	800f8e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	78fa      	ldrb	r2, [r7, #3]
 800f8de:	4611      	mov	r1, r2
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	4798      	blx	r3
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3710      	adds	r7, #16
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}

0800f8f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f8f2:	b580      	push	{r7, lr}
 800f8f4:	b084      	sub	sp, #16
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8fe:	2300      	movs	r3, #0
 800f900:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	78fa      	ldrb	r2, [r7, #3]
 800f90c:	4611      	mov	r1, r2
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	4798      	blx	r3
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f918:	2303      	movs	r3, #3
 800f91a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3710      	adds	r7, #16
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b084      	sub	sp, #16
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
 800f92e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f936:	6839      	ldr	r1, [r7, #0]
 800f938:	4618      	mov	r0, r3
 800f93a:	f001 f936 	bl	8010baa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2201      	movs	r2, #1
 800f942:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f94c:	461a      	mov	r2, r3
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f95a:	f003 031f 	and.w	r3, r3, #31
 800f95e:	2b02      	cmp	r3, #2
 800f960:	d01a      	beq.n	800f998 <USBD_LL_SetupStage+0x72>
 800f962:	2b02      	cmp	r3, #2
 800f964:	d822      	bhi.n	800f9ac <USBD_LL_SetupStage+0x86>
 800f966:	2b00      	cmp	r3, #0
 800f968:	d002      	beq.n	800f970 <USBD_LL_SetupStage+0x4a>
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d00a      	beq.n	800f984 <USBD_LL_SetupStage+0x5e>
 800f96e:	e01d      	b.n	800f9ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f976:	4619      	mov	r1, r3
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 fb63 	bl	8010044 <USBD_StdDevReq>
 800f97e:	4603      	mov	r3, r0
 800f980:	73fb      	strb	r3, [r7, #15]
      break;
 800f982:	e020      	b.n	800f9c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f98a:	4619      	mov	r1, r3
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f000 fbcb 	bl	8010128 <USBD_StdItfReq>
 800f992:	4603      	mov	r3, r0
 800f994:	73fb      	strb	r3, [r7, #15]
      break;
 800f996:	e016      	b.n	800f9c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f99e:	4619      	mov	r1, r3
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 fc2d 	bl	8010200 <USBD_StdEPReq>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	73fb      	strb	r3, [r7, #15]
      break;
 800f9aa:	e00c      	b.n	800f9c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f9b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f002 fab0 	bl	8011f20 <USBD_LL_StallEP>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	73fb      	strb	r3, [r7, #15]
      break;
 800f9c4:	bf00      	nop
  }

  return ret;
 800f9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3710      	adds	r7, #16
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	607a      	str	r2, [r7, #4]
 800f9dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f9e2:	7afb      	ldrb	r3, [r7, #11]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d16e      	bne.n	800fac6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f9ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f9f6:	2b03      	cmp	r3, #3
 800f9f8:	f040 8098 	bne.w	800fb2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	689a      	ldr	r2, [r3, #8]
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d913      	bls.n	800fa30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	689a      	ldr	r2, [r3, #8]
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	1ad2      	subs	r2, r2, r3
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	68da      	ldr	r2, [r3, #12]
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	689b      	ldr	r3, [r3, #8]
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	bf28      	it	cs
 800fa22:	4613      	movcs	r3, r2
 800fa24:	461a      	mov	r2, r3
 800fa26:	6879      	ldr	r1, [r7, #4]
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f001 f9b2 	bl	8010d92 <USBD_CtlContinueRx>
 800fa2e:	e07d      	b.n	800fb2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fa36:	f003 031f 	and.w	r3, r3, #31
 800fa3a:	2b02      	cmp	r3, #2
 800fa3c:	d014      	beq.n	800fa68 <USBD_LL_DataOutStage+0x98>
 800fa3e:	2b02      	cmp	r3, #2
 800fa40:	d81d      	bhi.n	800fa7e <USBD_LL_DataOutStage+0xae>
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d002      	beq.n	800fa4c <USBD_LL_DataOutStage+0x7c>
 800fa46:	2b01      	cmp	r3, #1
 800fa48:	d003      	beq.n	800fa52 <USBD_LL_DataOutStage+0x82>
 800fa4a:	e018      	b.n	800fa7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	75bb      	strb	r3, [r7, #22]
            break;
 800fa50:	e018      	b.n	800fa84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f000 fa64 	bl	800ff2a <USBD_CoreFindIF>
 800fa62:	4603      	mov	r3, r0
 800fa64:	75bb      	strb	r3, [r7, #22]
            break;
 800fa66:	e00d      	b.n	800fa84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	4619      	mov	r1, r3
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f000 fa66 	bl	800ff44 <USBD_CoreFindEP>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	75bb      	strb	r3, [r7, #22]
            break;
 800fa7c:	e002      	b.n	800fa84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	75bb      	strb	r3, [r7, #22]
            break;
 800fa82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fa84:	7dbb      	ldrb	r3, [r7, #22]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d119      	bne.n	800fabe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	2b03      	cmp	r3, #3
 800fa94:	d113      	bne.n	800fabe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fa96:	7dba      	ldrb	r2, [r7, #22]
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	32ae      	adds	r2, #174	@ 0xae
 800fa9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faa0:	691b      	ldr	r3, [r3, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00b      	beq.n	800fabe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800faa6:	7dba      	ldrb	r2, [r7, #22]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800faae:	7dba      	ldrb	r2, [r7, #22]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	32ae      	adds	r2, #174	@ 0xae
 800fab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fab8:	691b      	ldr	r3, [r3, #16]
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fabe:	68f8      	ldr	r0, [r7, #12]
 800fac0:	f001 f978 	bl	8010db4 <USBD_CtlSendStatus>
 800fac4:	e032      	b.n	800fb2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fac6:	7afb      	ldrb	r3, [r7, #11]
 800fac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800facc:	b2db      	uxtb	r3, r3
 800face:	4619      	mov	r1, r3
 800fad0:	68f8      	ldr	r0, [r7, #12]
 800fad2:	f000 fa37 	bl	800ff44 <USBD_CoreFindEP>
 800fad6:	4603      	mov	r3, r0
 800fad8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fada:	7dbb      	ldrb	r3, [r7, #22]
 800fadc:	2bff      	cmp	r3, #255	@ 0xff
 800fade:	d025      	beq.n	800fb2c <USBD_LL_DataOutStage+0x15c>
 800fae0:	7dbb      	ldrb	r3, [r7, #22]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d122      	bne.n	800fb2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faec:	b2db      	uxtb	r3, r3
 800faee:	2b03      	cmp	r3, #3
 800faf0:	d117      	bne.n	800fb22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800faf2:	7dba      	ldrb	r2, [r7, #22]
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	32ae      	adds	r2, #174	@ 0xae
 800faf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fafc:	699b      	ldr	r3, [r3, #24]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d00f      	beq.n	800fb22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fb02:	7dba      	ldrb	r2, [r7, #22]
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fb0a:	7dba      	ldrb	r2, [r7, #22]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	32ae      	adds	r2, #174	@ 0xae
 800fb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb14:	699b      	ldr	r3, [r3, #24]
 800fb16:	7afa      	ldrb	r2, [r7, #11]
 800fb18:	4611      	mov	r1, r2
 800fb1a:	68f8      	ldr	r0, [r7, #12]
 800fb1c:	4798      	blx	r3
 800fb1e:	4603      	mov	r3, r0
 800fb20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d001      	beq.n	800fb2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fb28:	7dfb      	ldrb	r3, [r7, #23]
 800fb2a:	e000      	b.n	800fb2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fb2c:	2300      	movs	r3, #0
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3718      	adds	r7, #24
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b086      	sub	sp, #24
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	60f8      	str	r0, [r7, #12]
 800fb3e:	460b      	mov	r3, r1
 800fb40:	607a      	str	r2, [r7, #4]
 800fb42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fb44:	7afb      	ldrb	r3, [r7, #11]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d16f      	bne.n	800fc2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	3314      	adds	r3, #20
 800fb4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fb56:	2b02      	cmp	r3, #2
 800fb58:	d15a      	bne.n	800fc10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	689a      	ldr	r2, [r3, #8]
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	68db      	ldr	r3, [r3, #12]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d914      	bls.n	800fb90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	689a      	ldr	r2, [r3, #8]
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	1ad2      	subs	r2, r2, r3
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	6879      	ldr	r1, [r7, #4]
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f001 f8da 	bl	8010d36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb82:	2300      	movs	r3, #0
 800fb84:	2200      	movs	r2, #0
 800fb86:	2100      	movs	r1, #0
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f002 fa73 	bl	8012074 <USBD_LL_PrepareReceive>
 800fb8e:	e03f      	b.n	800fc10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	68da      	ldr	r2, [r3, #12]
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d11c      	bne.n	800fbd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	685a      	ldr	r2, [r3, #4]
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d316      	bcc.n	800fbd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	685a      	ldr	r2, [r3, #4]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d20f      	bcs.n	800fbd6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	2100      	movs	r1, #0
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f001 f8bb 	bl	8010d36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fbc8:	2300      	movs	r3, #0
 800fbca:	2200      	movs	r2, #0
 800fbcc:	2100      	movs	r1, #0
 800fbce:	68f8      	ldr	r0, [r7, #12]
 800fbd0:	f002 fa50 	bl	8012074 <USBD_LL_PrepareReceive>
 800fbd4:	e01c      	b.n	800fc10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	2b03      	cmp	r3, #3
 800fbe0:	d10f      	bne.n	800fc02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbe8:	68db      	ldr	r3, [r3, #12]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d009      	beq.n	800fc02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbfc:	68db      	ldr	r3, [r3, #12]
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc02:	2180      	movs	r1, #128	@ 0x80
 800fc04:	68f8      	ldr	r0, [r7, #12]
 800fc06:	f002 f98b 	bl	8011f20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	f001 f8e5 	bl	8010dda <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d03a      	beq.n	800fc90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	f7ff fe42 	bl	800f8a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fc28:	e032      	b.n	800fc90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fc2a:	7afb      	ldrb	r3, [r7, #11]
 800fc2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	4619      	mov	r1, r3
 800fc34:	68f8      	ldr	r0, [r7, #12]
 800fc36:	f000 f985 	bl	800ff44 <USBD_CoreFindEP>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fc3e:	7dfb      	ldrb	r3, [r7, #23]
 800fc40:	2bff      	cmp	r3, #255	@ 0xff
 800fc42:	d025      	beq.n	800fc90 <USBD_LL_DataInStage+0x15a>
 800fc44:	7dfb      	ldrb	r3, [r7, #23]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d122      	bne.n	800fc90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	2b03      	cmp	r3, #3
 800fc54:	d11c      	bne.n	800fc90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fc56:	7dfa      	ldrb	r2, [r7, #23]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	32ae      	adds	r2, #174	@ 0xae
 800fc5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc60:	695b      	ldr	r3, [r3, #20]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d014      	beq.n	800fc90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fc66:	7dfa      	ldrb	r2, [r7, #23]
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fc6e:	7dfa      	ldrb	r2, [r7, #23]
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	32ae      	adds	r2, #174	@ 0xae
 800fc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc78:	695b      	ldr	r3, [r3, #20]
 800fc7a:	7afa      	ldrb	r2, [r7, #11]
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	4798      	blx	r3
 800fc82:	4603      	mov	r3, r0
 800fc84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fc86:	7dbb      	ldrb	r3, [r7, #22]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d001      	beq.n	800fc90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fc8c:	7dbb      	ldrb	r3, [r7, #22]
 800fc8e:	e000      	b.n	800fc92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fc90:	2300      	movs	r3, #0
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3718      	adds	r7, #24
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b084      	sub	sp, #16
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2201      	movs	r2, #1
 800fcaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d014      	beq.n	800fd00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d00e      	beq.n	800fd00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	6852      	ldr	r2, [r2, #4]
 800fcee:	b2d2      	uxtb	r2, r2
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	4798      	blx	r3
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d001      	beq.n	800fd00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fcfc:	2303      	movs	r3, #3
 800fcfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fd00:	2340      	movs	r3, #64	@ 0x40
 800fd02:	2200      	movs	r2, #0
 800fd04:	2100      	movs	r1, #0
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f002 f8c5 	bl	8011e96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2240      	movs	r2, #64	@ 0x40
 800fd18:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fd1c:	2340      	movs	r3, #64	@ 0x40
 800fd1e:	2200      	movs	r2, #0
 800fd20:	2180      	movs	r1, #128	@ 0x80
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f002 f8b7 	bl	8011e96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2240      	movs	r2, #64	@ 0x40
 800fd32:	621a      	str	r2, [r3, #32]

  return ret;
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fd3e:	b480      	push	{r7}
 800fd40:	b083      	sub	sp, #12
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	460b      	mov	r3, r1
 800fd48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	78fa      	ldrb	r2, [r7, #3]
 800fd4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fd50:	2300      	movs	r3, #0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	370c      	adds	r7, #12
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr

0800fd5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fd5e:	b480      	push	{r7}
 800fd60:	b083      	sub	sp, #12
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b04      	cmp	r3, #4
 800fd70:	d006      	beq.n	800fd80 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd78:	b2da      	uxtb	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2204      	movs	r2, #4
 800fd84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	370c      	adds	r7, #12
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr

0800fd96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fd96:	b480      	push	{r7}
 800fd98:	b083      	sub	sp, #12
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	2b04      	cmp	r3, #4
 800fda8:	d106      	bne.n	800fdb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fdb0:	b2da      	uxtb	r2, r3
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	370c      	adds	r7, #12
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr

0800fdc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b082      	sub	sp, #8
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d110      	bne.n	800fdfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d00b      	beq.n	800fdfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdea:	69db      	ldr	r3, [r3, #28]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d005      	beq.n	800fdfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdf6:	69db      	ldr	r3, [r3, #28]
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b082      	sub	sp, #8
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	460b      	mov	r3, r1
 800fe10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	32ae      	adds	r2, #174	@ 0xae
 800fe1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d101      	bne.n	800fe28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fe24:	2303      	movs	r3, #3
 800fe26:	e01c      	b.n	800fe62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	2b03      	cmp	r3, #3
 800fe32:	d115      	bne.n	800fe60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	32ae      	adds	r2, #174	@ 0xae
 800fe3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe42:	6a1b      	ldr	r3, [r3, #32]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d00b      	beq.n	800fe60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	32ae      	adds	r2, #174	@ 0xae
 800fe52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe56:	6a1b      	ldr	r3, [r3, #32]
 800fe58:	78fa      	ldrb	r2, [r7, #3]
 800fe5a:	4611      	mov	r1, r2
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fe60:	2300      	movs	r3, #0
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b082      	sub	sp, #8
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
 800fe72:	460b      	mov	r3, r1
 800fe74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	32ae      	adds	r2, #174	@ 0xae
 800fe80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d101      	bne.n	800fe8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fe88:	2303      	movs	r3, #3
 800fe8a:	e01c      	b.n	800fec6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	2b03      	cmp	r3, #3
 800fe96:	d115      	bne.n	800fec4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	32ae      	adds	r2, #174	@ 0xae
 800fea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00b      	beq.n	800fec4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	32ae      	adds	r2, #174	@ 0xae
 800feb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800febc:	78fa      	ldrb	r2, [r7, #3]
 800febe:	4611      	mov	r1, r2
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fec4:	2300      	movs	r3, #0
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3708      	adds	r7, #8
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}

0800fece <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fece:	b480      	push	{r7}
 800fed0:	b083      	sub	sp, #12
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fed6:	2300      	movs	r3, #0
}
 800fed8:	4618      	mov	r0, r3
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800feec:	2300      	movs	r3, #0
 800feee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2201      	movs	r2, #1
 800fef4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00e      	beq.n	800ff20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	6852      	ldr	r2, [r2, #4]
 800ff0e:	b2d2      	uxtb	r2, r2
 800ff10:	4611      	mov	r1, r2
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	4798      	blx	r3
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d001      	beq.n	800ff20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ff20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ff2a:	b480      	push	{r7}
 800ff2c:	b083      	sub	sp, #12
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	460b      	mov	r3, r1
 800ff34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ff36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ff50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr

0800ff5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b086      	sub	sp, #24
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
 800ff66:	460b      	mov	r3, r1
 800ff68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ff72:	2300      	movs	r3, #0
 800ff74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	885b      	ldrh	r3, [r3, #2]
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	7812      	ldrb	r2, [r2, #0]
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d91f      	bls.n	800ffc4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ff8a:	e013      	b.n	800ffb4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ff8c:	f107 030a 	add.w	r3, r7, #10
 800ff90:	4619      	mov	r1, r3
 800ff92:	6978      	ldr	r0, [r7, #20]
 800ff94:	f000 f81b 	bl	800ffce <USBD_GetNextDesc>
 800ff98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	785b      	ldrb	r3, [r3, #1]
 800ff9e:	2b05      	cmp	r3, #5
 800ffa0:	d108      	bne.n	800ffb4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	789b      	ldrb	r3, [r3, #2]
 800ffaa:	78fa      	ldrb	r2, [r7, #3]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d008      	beq.n	800ffc2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	885b      	ldrh	r3, [r3, #2]
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	897b      	ldrh	r3, [r7, #10]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d8e5      	bhi.n	800ff8c <USBD_GetEpDesc+0x2e>
 800ffc0:	e000      	b.n	800ffc4 <USBD_GetEpDesc+0x66>
          break;
 800ffc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ffc4:	693b      	ldr	r3, [r7, #16]
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3718      	adds	r7, #24
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ffce:	b480      	push	{r7}
 800ffd0:	b085      	sub	sp, #20
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	6078      	str	r0, [r7, #4]
 800ffd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	881b      	ldrh	r3, [r3, #0]
 800ffe0:	68fa      	ldr	r2, [r7, #12]
 800ffe2:	7812      	ldrb	r2, [r2, #0]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	461a      	mov	r2, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4413      	add	r3, r2
 800fff6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fff8:	68fb      	ldr	r3, [r7, #12]
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3714      	adds	r7, #20
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010006:	b480      	push	{r7}
 8010008:	b087      	sub	sp, #28
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	3301      	adds	r3, #1
 801001c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010024:	8a3b      	ldrh	r3, [r7, #16]
 8010026:	021b      	lsls	r3, r3, #8
 8010028:	b21a      	sxth	r2, r3
 801002a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801002e:	4313      	orrs	r3, r2
 8010030:	b21b      	sxth	r3, r3
 8010032:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010034:	89fb      	ldrh	r3, [r7, #14]
}
 8010036:	4618      	mov	r0, r3
 8010038:	371c      	adds	r7, #28
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
	...

08010044 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801004e:	2300      	movs	r3, #0
 8010050:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801005a:	2b40      	cmp	r3, #64	@ 0x40
 801005c:	d005      	beq.n	801006a <USBD_StdDevReq+0x26>
 801005e:	2b40      	cmp	r3, #64	@ 0x40
 8010060:	d857      	bhi.n	8010112 <USBD_StdDevReq+0xce>
 8010062:	2b00      	cmp	r3, #0
 8010064:	d00f      	beq.n	8010086 <USBD_StdDevReq+0x42>
 8010066:	2b20      	cmp	r3, #32
 8010068:	d153      	bne.n	8010112 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	32ae      	adds	r2, #174	@ 0xae
 8010074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010078:	689b      	ldr	r3, [r3, #8]
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	4798      	blx	r3
 8010080:	4603      	mov	r3, r0
 8010082:	73fb      	strb	r3, [r7, #15]
      break;
 8010084:	e04a      	b.n	801011c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	785b      	ldrb	r3, [r3, #1]
 801008a:	2b09      	cmp	r3, #9
 801008c:	d83b      	bhi.n	8010106 <USBD_StdDevReq+0xc2>
 801008e:	a201      	add	r2, pc, #4	@ (adr r2, 8010094 <USBD_StdDevReq+0x50>)
 8010090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010094:	080100e9 	.word	0x080100e9
 8010098:	080100fd 	.word	0x080100fd
 801009c:	08010107 	.word	0x08010107
 80100a0:	080100f3 	.word	0x080100f3
 80100a4:	08010107 	.word	0x08010107
 80100a8:	080100c7 	.word	0x080100c7
 80100ac:	080100bd 	.word	0x080100bd
 80100b0:	08010107 	.word	0x08010107
 80100b4:	080100df 	.word	0x080100df
 80100b8:	080100d1 	.word	0x080100d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 fa3c 	bl	801053c <USBD_GetDescriptor>
          break;
 80100c4:	e024      	b.n	8010110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80100c6:	6839      	ldr	r1, [r7, #0]
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 fbcb 	bl	8010864 <USBD_SetAddress>
          break;
 80100ce:	e01f      	b.n	8010110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80100d0:	6839      	ldr	r1, [r7, #0]
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f000 fc0a 	bl	80108ec <USBD_SetConfig>
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]
          break;
 80100dc:	e018      	b.n	8010110 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80100de:	6839      	ldr	r1, [r7, #0]
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 fcad 	bl	8010a40 <USBD_GetConfig>
          break;
 80100e6:	e013      	b.n	8010110 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 fcde 	bl	8010aac <USBD_GetStatus>
          break;
 80100f0:	e00e      	b.n	8010110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80100f2:	6839      	ldr	r1, [r7, #0]
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 fd0d 	bl	8010b14 <USBD_SetFeature>
          break;
 80100fa:	e009      	b.n	8010110 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80100fc:	6839      	ldr	r1, [r7, #0]
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f000 fd31 	bl	8010b66 <USBD_ClrFeature>
          break;
 8010104:	e004      	b.n	8010110 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010106:	6839      	ldr	r1, [r7, #0]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 fd88 	bl	8010c1e <USBD_CtlError>
          break;
 801010e:	bf00      	nop
      }
      break;
 8010110:	e004      	b.n	801011c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010112:	6839      	ldr	r1, [r7, #0]
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 fd82 	bl	8010c1e <USBD_CtlError>
      break;
 801011a:	bf00      	nop
  }

  return ret;
 801011c:	7bfb      	ldrb	r3, [r7, #15]
}
 801011e:	4618      	mov	r0, r3
 8010120:	3710      	adds	r7, #16
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop

08010128 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010132:	2300      	movs	r3, #0
 8010134:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801013e:	2b40      	cmp	r3, #64	@ 0x40
 8010140:	d005      	beq.n	801014e <USBD_StdItfReq+0x26>
 8010142:	2b40      	cmp	r3, #64	@ 0x40
 8010144:	d852      	bhi.n	80101ec <USBD_StdItfReq+0xc4>
 8010146:	2b00      	cmp	r3, #0
 8010148:	d001      	beq.n	801014e <USBD_StdItfReq+0x26>
 801014a:	2b20      	cmp	r3, #32
 801014c:	d14e      	bne.n	80101ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010154:	b2db      	uxtb	r3, r3
 8010156:	3b01      	subs	r3, #1
 8010158:	2b02      	cmp	r3, #2
 801015a:	d840      	bhi.n	80101de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	889b      	ldrh	r3, [r3, #4]
 8010160:	b2db      	uxtb	r3, r3
 8010162:	2b01      	cmp	r3, #1
 8010164:	d836      	bhi.n	80101d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	889b      	ldrh	r3, [r3, #4]
 801016a:	b2db      	uxtb	r3, r3
 801016c:	4619      	mov	r1, r3
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7ff fedb 	bl	800ff2a <USBD_CoreFindIF>
 8010174:	4603      	mov	r3, r0
 8010176:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010178:	7bbb      	ldrb	r3, [r7, #14]
 801017a:	2bff      	cmp	r3, #255	@ 0xff
 801017c:	d01d      	beq.n	80101ba <USBD_StdItfReq+0x92>
 801017e:	7bbb      	ldrb	r3, [r7, #14]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d11a      	bne.n	80101ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010184:	7bba      	ldrb	r2, [r7, #14]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	32ae      	adds	r2, #174	@ 0xae
 801018a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801018e:	689b      	ldr	r3, [r3, #8]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d00f      	beq.n	80101b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010194:	7bba      	ldrb	r2, [r7, #14]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801019c:	7bba      	ldrb	r2, [r7, #14]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	32ae      	adds	r2, #174	@ 0xae
 80101a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	6839      	ldr	r1, [r7, #0]
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	4798      	blx	r3
 80101ae:	4603      	mov	r3, r0
 80101b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80101b2:	e004      	b.n	80101be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80101b4:	2303      	movs	r3, #3
 80101b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80101b8:	e001      	b.n	80101be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80101ba:	2303      	movs	r3, #3
 80101bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	88db      	ldrh	r3, [r3, #6]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d110      	bne.n	80101e8 <USBD_StdItfReq+0xc0>
 80101c6:	7bfb      	ldrb	r3, [r7, #15]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d10d      	bne.n	80101e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f000 fdf1 	bl	8010db4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80101d2:	e009      	b.n	80101e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80101d4:	6839      	ldr	r1, [r7, #0]
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 fd21 	bl	8010c1e <USBD_CtlError>
          break;
 80101dc:	e004      	b.n	80101e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80101de:	6839      	ldr	r1, [r7, #0]
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 fd1c 	bl	8010c1e <USBD_CtlError>
          break;
 80101e6:	e000      	b.n	80101ea <USBD_StdItfReq+0xc2>
          break;
 80101e8:	bf00      	nop
      }
      break;
 80101ea:	e004      	b.n	80101f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80101ec:	6839      	ldr	r1, [r7, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 fd15 	bl	8010c1e <USBD_CtlError>
      break;
 80101f4:	bf00      	nop
  }

  return ret;
 80101f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3710      	adds	r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801020a:	2300      	movs	r3, #0
 801020c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	889b      	ldrh	r3, [r3, #4]
 8010212:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801021c:	2b40      	cmp	r3, #64	@ 0x40
 801021e:	d007      	beq.n	8010230 <USBD_StdEPReq+0x30>
 8010220:	2b40      	cmp	r3, #64	@ 0x40
 8010222:	f200 817f 	bhi.w	8010524 <USBD_StdEPReq+0x324>
 8010226:	2b00      	cmp	r3, #0
 8010228:	d02a      	beq.n	8010280 <USBD_StdEPReq+0x80>
 801022a:	2b20      	cmp	r3, #32
 801022c:	f040 817a 	bne.w	8010524 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010230:	7bbb      	ldrb	r3, [r7, #14]
 8010232:	4619      	mov	r1, r3
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7ff fe85 	bl	800ff44 <USBD_CoreFindEP>
 801023a:	4603      	mov	r3, r0
 801023c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801023e:	7b7b      	ldrb	r3, [r7, #13]
 8010240:	2bff      	cmp	r3, #255	@ 0xff
 8010242:	f000 8174 	beq.w	801052e <USBD_StdEPReq+0x32e>
 8010246:	7b7b      	ldrb	r3, [r7, #13]
 8010248:	2b00      	cmp	r3, #0
 801024a:	f040 8170 	bne.w	801052e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801024e:	7b7a      	ldrb	r2, [r7, #13]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010256:	7b7a      	ldrb	r2, [r7, #13]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	32ae      	adds	r2, #174	@ 0xae
 801025c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010260:	689b      	ldr	r3, [r3, #8]
 8010262:	2b00      	cmp	r3, #0
 8010264:	f000 8163 	beq.w	801052e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010268:	7b7a      	ldrb	r2, [r7, #13]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	32ae      	adds	r2, #174	@ 0xae
 801026e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	6839      	ldr	r1, [r7, #0]
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	4798      	blx	r3
 801027a:	4603      	mov	r3, r0
 801027c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801027e:	e156      	b.n	801052e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	785b      	ldrb	r3, [r3, #1]
 8010284:	2b03      	cmp	r3, #3
 8010286:	d008      	beq.n	801029a <USBD_StdEPReq+0x9a>
 8010288:	2b03      	cmp	r3, #3
 801028a:	f300 8145 	bgt.w	8010518 <USBD_StdEPReq+0x318>
 801028e:	2b00      	cmp	r3, #0
 8010290:	f000 809b 	beq.w	80103ca <USBD_StdEPReq+0x1ca>
 8010294:	2b01      	cmp	r3, #1
 8010296:	d03c      	beq.n	8010312 <USBD_StdEPReq+0x112>
 8010298:	e13e      	b.n	8010518 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	d002      	beq.n	80102ac <USBD_StdEPReq+0xac>
 80102a6:	2b03      	cmp	r3, #3
 80102a8:	d016      	beq.n	80102d8 <USBD_StdEPReq+0xd8>
 80102aa:	e02c      	b.n	8010306 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102ac:	7bbb      	ldrb	r3, [r7, #14]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d00d      	beq.n	80102ce <USBD_StdEPReq+0xce>
 80102b2:	7bbb      	ldrb	r3, [r7, #14]
 80102b4:	2b80      	cmp	r3, #128	@ 0x80
 80102b6:	d00a      	beq.n	80102ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80102b8:	7bbb      	ldrb	r3, [r7, #14]
 80102ba:	4619      	mov	r1, r3
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f001 fe2f 	bl	8011f20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80102c2:	2180      	movs	r1, #128	@ 0x80
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f001 fe2b 	bl	8011f20 <USBD_LL_StallEP>
 80102ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80102cc:	e020      	b.n	8010310 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80102ce:	6839      	ldr	r1, [r7, #0]
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f000 fca4 	bl	8010c1e <USBD_CtlError>
              break;
 80102d6:	e01b      	b.n	8010310 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	885b      	ldrh	r3, [r3, #2]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d10e      	bne.n	80102fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80102e0:	7bbb      	ldrb	r3, [r7, #14]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00b      	beq.n	80102fe <USBD_StdEPReq+0xfe>
 80102e6:	7bbb      	ldrb	r3, [r7, #14]
 80102e8:	2b80      	cmp	r3, #128	@ 0x80
 80102ea:	d008      	beq.n	80102fe <USBD_StdEPReq+0xfe>
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	88db      	ldrh	r3, [r3, #6]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d104      	bne.n	80102fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80102f4:	7bbb      	ldrb	r3, [r7, #14]
 80102f6:	4619      	mov	r1, r3
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f001 fe11 	bl	8011f20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f000 fd58 	bl	8010db4 <USBD_CtlSendStatus>

              break;
 8010304:	e004      	b.n	8010310 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010306:	6839      	ldr	r1, [r7, #0]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f000 fc88 	bl	8010c1e <USBD_CtlError>
              break;
 801030e:	bf00      	nop
          }
          break;
 8010310:	e107      	b.n	8010522 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010318:	b2db      	uxtb	r3, r3
 801031a:	2b02      	cmp	r3, #2
 801031c:	d002      	beq.n	8010324 <USBD_StdEPReq+0x124>
 801031e:	2b03      	cmp	r3, #3
 8010320:	d016      	beq.n	8010350 <USBD_StdEPReq+0x150>
 8010322:	e04b      	b.n	80103bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010324:	7bbb      	ldrb	r3, [r7, #14]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00d      	beq.n	8010346 <USBD_StdEPReq+0x146>
 801032a:	7bbb      	ldrb	r3, [r7, #14]
 801032c:	2b80      	cmp	r3, #128	@ 0x80
 801032e:	d00a      	beq.n	8010346 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010330:	7bbb      	ldrb	r3, [r7, #14]
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f001 fdf3 	bl	8011f20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801033a:	2180      	movs	r1, #128	@ 0x80
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f001 fdef 	bl	8011f20 <USBD_LL_StallEP>
 8010342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010344:	e040      	b.n	80103c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010346:	6839      	ldr	r1, [r7, #0]
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 fc68 	bl	8010c1e <USBD_CtlError>
              break;
 801034e:	e03b      	b.n	80103c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	885b      	ldrh	r3, [r3, #2]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d136      	bne.n	80103c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010358:	7bbb      	ldrb	r3, [r7, #14]
 801035a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801035e:	2b00      	cmp	r3, #0
 8010360:	d004      	beq.n	801036c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010362:	7bbb      	ldrb	r3, [r7, #14]
 8010364:	4619      	mov	r1, r3
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f001 fdf9 	bl	8011f5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 fd21 	bl	8010db4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010372:	7bbb      	ldrb	r3, [r7, #14]
 8010374:	4619      	mov	r1, r3
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f7ff fde4 	bl	800ff44 <USBD_CoreFindEP>
 801037c:	4603      	mov	r3, r0
 801037e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010380:	7b7b      	ldrb	r3, [r7, #13]
 8010382:	2bff      	cmp	r3, #255	@ 0xff
 8010384:	d01f      	beq.n	80103c6 <USBD_StdEPReq+0x1c6>
 8010386:	7b7b      	ldrb	r3, [r7, #13]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d11c      	bne.n	80103c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801038c:	7b7a      	ldrb	r2, [r7, #13]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010394:	7b7a      	ldrb	r2, [r7, #13]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	32ae      	adds	r2, #174	@ 0xae
 801039a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d010      	beq.n	80103c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80103a4:	7b7a      	ldrb	r2, [r7, #13]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	32ae      	adds	r2, #174	@ 0xae
 80103aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ae:	689b      	ldr	r3, [r3, #8]
 80103b0:	6839      	ldr	r1, [r7, #0]
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	4798      	blx	r3
 80103b6:	4603      	mov	r3, r0
 80103b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80103ba:	e004      	b.n	80103c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80103bc:	6839      	ldr	r1, [r7, #0]
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f000 fc2d 	bl	8010c1e <USBD_CtlError>
              break;
 80103c4:	e000      	b.n	80103c8 <USBD_StdEPReq+0x1c8>
              break;
 80103c6:	bf00      	nop
          }
          break;
 80103c8:	e0ab      	b.n	8010522 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b02      	cmp	r3, #2
 80103d4:	d002      	beq.n	80103dc <USBD_StdEPReq+0x1dc>
 80103d6:	2b03      	cmp	r3, #3
 80103d8:	d032      	beq.n	8010440 <USBD_StdEPReq+0x240>
 80103da:	e097      	b.n	801050c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80103dc:	7bbb      	ldrb	r3, [r7, #14]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d007      	beq.n	80103f2 <USBD_StdEPReq+0x1f2>
 80103e2:	7bbb      	ldrb	r3, [r7, #14]
 80103e4:	2b80      	cmp	r3, #128	@ 0x80
 80103e6:	d004      	beq.n	80103f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80103e8:	6839      	ldr	r1, [r7, #0]
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 fc17 	bl	8010c1e <USBD_CtlError>
                break;
 80103f0:	e091      	b.n	8010516 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	da0b      	bge.n	8010412 <USBD_StdEPReq+0x212>
 80103fa:	7bbb      	ldrb	r3, [r7, #14]
 80103fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010400:	4613      	mov	r3, r2
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	4413      	add	r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	3310      	adds	r3, #16
 801040a:	687a      	ldr	r2, [r7, #4]
 801040c:	4413      	add	r3, r2
 801040e:	3304      	adds	r3, #4
 8010410:	e00b      	b.n	801042a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010412:	7bbb      	ldrb	r3, [r7, #14]
 8010414:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010418:	4613      	mov	r3, r2
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	4413      	add	r3, r2
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	4413      	add	r3, r2
 8010428:	3304      	adds	r3, #4
 801042a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	2200      	movs	r2, #0
 8010430:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	2202      	movs	r2, #2
 8010436:	4619      	mov	r1, r3
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 fc61 	bl	8010d00 <USBD_CtlSendData>
              break;
 801043e:	e06a      	b.n	8010516 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010444:	2b00      	cmp	r3, #0
 8010446:	da11      	bge.n	801046c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010448:	7bbb      	ldrb	r3, [r7, #14]
 801044a:	f003 020f 	and.w	r2, r3, #15
 801044e:	6879      	ldr	r1, [r7, #4]
 8010450:	4613      	mov	r3, r2
 8010452:	009b      	lsls	r3, r3, #2
 8010454:	4413      	add	r3, r2
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	440b      	add	r3, r1
 801045a:	3324      	adds	r3, #36	@ 0x24
 801045c:	881b      	ldrh	r3, [r3, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d117      	bne.n	8010492 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010462:	6839      	ldr	r1, [r7, #0]
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 fbda 	bl	8010c1e <USBD_CtlError>
                  break;
 801046a:	e054      	b.n	8010516 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801046c:	7bbb      	ldrb	r3, [r7, #14]
 801046e:	f003 020f 	and.w	r2, r3, #15
 8010472:	6879      	ldr	r1, [r7, #4]
 8010474:	4613      	mov	r3, r2
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	4413      	add	r3, r2
 801047a:	009b      	lsls	r3, r3, #2
 801047c:	440b      	add	r3, r1
 801047e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010482:	881b      	ldrh	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d104      	bne.n	8010492 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010488:	6839      	ldr	r1, [r7, #0]
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f000 fbc7 	bl	8010c1e <USBD_CtlError>
                  break;
 8010490:	e041      	b.n	8010516 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010496:	2b00      	cmp	r3, #0
 8010498:	da0b      	bge.n	80104b2 <USBD_StdEPReq+0x2b2>
 801049a:	7bbb      	ldrb	r3, [r7, #14]
 801049c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104a0:	4613      	mov	r3, r2
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	4413      	add	r3, r2
 80104a6:	009b      	lsls	r3, r3, #2
 80104a8:	3310      	adds	r3, #16
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	4413      	add	r3, r2
 80104ae:	3304      	adds	r3, #4
 80104b0:	e00b      	b.n	80104ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80104b2:	7bbb      	ldrb	r3, [r7, #14]
 80104b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104b8:	4613      	mov	r3, r2
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	4413      	add	r3, r2
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	4413      	add	r3, r2
 80104c8:	3304      	adds	r3, #4
 80104ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80104cc:	7bbb      	ldrb	r3, [r7, #14]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d002      	beq.n	80104d8 <USBD_StdEPReq+0x2d8>
 80104d2:	7bbb      	ldrb	r3, [r7, #14]
 80104d4:	2b80      	cmp	r3, #128	@ 0x80
 80104d6:	d103      	bne.n	80104e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	2200      	movs	r2, #0
 80104dc:	601a      	str	r2, [r3, #0]
 80104de:	e00e      	b.n	80104fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80104e0:	7bbb      	ldrb	r3, [r7, #14]
 80104e2:	4619      	mov	r1, r3
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f001 fd59 	bl	8011f9c <USBD_LL_IsStallEP>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d003      	beq.n	80104f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	2201      	movs	r2, #1
 80104f4:	601a      	str	r2, [r3, #0]
 80104f6:	e002      	b.n	80104fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	2200      	movs	r2, #0
 80104fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	2202      	movs	r2, #2
 8010502:	4619      	mov	r1, r3
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 fbfb 	bl	8010d00 <USBD_CtlSendData>
              break;
 801050a:	e004      	b.n	8010516 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801050c:	6839      	ldr	r1, [r7, #0]
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 fb85 	bl	8010c1e <USBD_CtlError>
              break;
 8010514:	bf00      	nop
          }
          break;
 8010516:	e004      	b.n	8010522 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010518:	6839      	ldr	r1, [r7, #0]
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 fb7f 	bl	8010c1e <USBD_CtlError>
          break;
 8010520:	bf00      	nop
      }
      break;
 8010522:	e005      	b.n	8010530 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010524:	6839      	ldr	r1, [r7, #0]
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 fb79 	bl	8010c1e <USBD_CtlError>
      break;
 801052c:	e000      	b.n	8010530 <USBD_StdEPReq+0x330>
      break;
 801052e:	bf00      	nop
  }

  return ret;
 8010530:	7bfb      	ldrb	r3, [r7, #15]
}
 8010532:	4618      	mov	r0, r3
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
	...

0801053c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010546:	2300      	movs	r3, #0
 8010548:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801054a:	2300      	movs	r3, #0
 801054c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801054e:	2300      	movs	r3, #0
 8010550:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	885b      	ldrh	r3, [r3, #2]
 8010556:	0a1b      	lsrs	r3, r3, #8
 8010558:	b29b      	uxth	r3, r3
 801055a:	3b01      	subs	r3, #1
 801055c:	2b0e      	cmp	r3, #14
 801055e:	f200 8152 	bhi.w	8010806 <USBD_GetDescriptor+0x2ca>
 8010562:	a201      	add	r2, pc, #4	@ (adr r2, 8010568 <USBD_GetDescriptor+0x2c>)
 8010564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010568:	080105d9 	.word	0x080105d9
 801056c:	080105f1 	.word	0x080105f1
 8010570:	08010631 	.word	0x08010631
 8010574:	08010807 	.word	0x08010807
 8010578:	08010807 	.word	0x08010807
 801057c:	080107a7 	.word	0x080107a7
 8010580:	080107d3 	.word	0x080107d3
 8010584:	08010807 	.word	0x08010807
 8010588:	08010807 	.word	0x08010807
 801058c:	08010807 	.word	0x08010807
 8010590:	08010807 	.word	0x08010807
 8010594:	08010807 	.word	0x08010807
 8010598:	08010807 	.word	0x08010807
 801059c:	08010807 	.word	0x08010807
 80105a0:	080105a5 	.word	0x080105a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80105aa:	69db      	ldr	r3, [r3, #28]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00b      	beq.n	80105c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80105b6:	69db      	ldr	r3, [r3, #28]
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	7c12      	ldrb	r2, [r2, #16]
 80105bc:	f107 0108 	add.w	r1, r7, #8
 80105c0:	4610      	mov	r0, r2
 80105c2:	4798      	blx	r3
 80105c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80105c6:	e126      	b.n	8010816 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80105c8:	6839      	ldr	r1, [r7, #0]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 fb27 	bl	8010c1e <USBD_CtlError>
        err++;
 80105d0:	7afb      	ldrb	r3, [r7, #11]
 80105d2:	3301      	adds	r3, #1
 80105d4:	72fb      	strb	r3, [r7, #11]
      break;
 80105d6:	e11e      	b.n	8010816 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	7c12      	ldrb	r2, [r2, #16]
 80105e4:	f107 0108 	add.w	r1, r7, #8
 80105e8:	4610      	mov	r0, r2
 80105ea:	4798      	blx	r3
 80105ec:	60f8      	str	r0, [r7, #12]
      break;
 80105ee:	e112      	b.n	8010816 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	7c1b      	ldrb	r3, [r3, #16]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d10d      	bne.n	8010614 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010600:	f107 0208 	add.w	r2, r7, #8
 8010604:	4610      	mov	r0, r2
 8010606:	4798      	blx	r3
 8010608:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	3301      	adds	r3, #1
 801060e:	2202      	movs	r2, #2
 8010610:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010612:	e100      	b.n	8010816 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801061a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801061c:	f107 0208 	add.w	r2, r7, #8
 8010620:	4610      	mov	r0, r2
 8010622:	4798      	blx	r3
 8010624:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	3301      	adds	r3, #1
 801062a:	2202      	movs	r2, #2
 801062c:	701a      	strb	r2, [r3, #0]
      break;
 801062e:	e0f2      	b.n	8010816 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	885b      	ldrh	r3, [r3, #2]
 8010634:	b2db      	uxtb	r3, r3
 8010636:	2b05      	cmp	r3, #5
 8010638:	f200 80ac 	bhi.w	8010794 <USBD_GetDescriptor+0x258>
 801063c:	a201      	add	r2, pc, #4	@ (adr r2, 8010644 <USBD_GetDescriptor+0x108>)
 801063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010642:	bf00      	nop
 8010644:	0801065d 	.word	0x0801065d
 8010648:	08010691 	.word	0x08010691
 801064c:	080106c5 	.word	0x080106c5
 8010650:	080106f9 	.word	0x080106f9
 8010654:	0801072d 	.word	0x0801072d
 8010658:	08010761 	.word	0x08010761
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00b      	beq.n	8010680 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	7c12      	ldrb	r2, [r2, #16]
 8010674:	f107 0108 	add.w	r1, r7, #8
 8010678:	4610      	mov	r0, r2
 801067a:	4798      	blx	r3
 801067c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801067e:	e091      	b.n	80107a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010680:	6839      	ldr	r1, [r7, #0]
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 facb 	bl	8010c1e <USBD_CtlError>
            err++;
 8010688:	7afb      	ldrb	r3, [r7, #11]
 801068a:	3301      	adds	r3, #1
 801068c:	72fb      	strb	r3, [r7, #11]
          break;
 801068e:	e089      	b.n	80107a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010696:	689b      	ldr	r3, [r3, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00b      	beq.n	80106b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	7c12      	ldrb	r2, [r2, #16]
 80106a8:	f107 0108 	add.w	r1, r7, #8
 80106ac:	4610      	mov	r0, r2
 80106ae:	4798      	blx	r3
 80106b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80106b2:	e077      	b.n	80107a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80106b4:	6839      	ldr	r1, [r7, #0]
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 fab1 	bl	8010c1e <USBD_CtlError>
            err++;
 80106bc:	7afb      	ldrb	r3, [r7, #11]
 80106be:	3301      	adds	r3, #1
 80106c0:	72fb      	strb	r3, [r7, #11]
          break;
 80106c2:	e06f      	b.n	80107a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106ca:	68db      	ldr	r3, [r3, #12]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d00b      	beq.n	80106e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	7c12      	ldrb	r2, [r2, #16]
 80106dc:	f107 0108 	add.w	r1, r7, #8
 80106e0:	4610      	mov	r0, r2
 80106e2:	4798      	blx	r3
 80106e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80106e6:	e05d      	b.n	80107a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80106e8:	6839      	ldr	r1, [r7, #0]
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f000 fa97 	bl	8010c1e <USBD_CtlError>
            err++;
 80106f0:	7afb      	ldrb	r3, [r7, #11]
 80106f2:	3301      	adds	r3, #1
 80106f4:	72fb      	strb	r3, [r7, #11]
          break;
 80106f6:	e055      	b.n	80107a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106fe:	691b      	ldr	r3, [r3, #16]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d00b      	beq.n	801071c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801070a:	691b      	ldr	r3, [r3, #16]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	7c12      	ldrb	r2, [r2, #16]
 8010710:	f107 0108 	add.w	r1, r7, #8
 8010714:	4610      	mov	r0, r2
 8010716:	4798      	blx	r3
 8010718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801071a:	e043      	b.n	80107a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801071c:	6839      	ldr	r1, [r7, #0]
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 fa7d 	bl	8010c1e <USBD_CtlError>
            err++;
 8010724:	7afb      	ldrb	r3, [r7, #11]
 8010726:	3301      	adds	r3, #1
 8010728:	72fb      	strb	r3, [r7, #11]
          break;
 801072a:	e03b      	b.n	80107a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010732:	695b      	ldr	r3, [r3, #20]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d00b      	beq.n	8010750 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801073e:	695b      	ldr	r3, [r3, #20]
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	7c12      	ldrb	r2, [r2, #16]
 8010744:	f107 0108 	add.w	r1, r7, #8
 8010748:	4610      	mov	r0, r2
 801074a:	4798      	blx	r3
 801074c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801074e:	e029      	b.n	80107a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010750:	6839      	ldr	r1, [r7, #0]
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 fa63 	bl	8010c1e <USBD_CtlError>
            err++;
 8010758:	7afb      	ldrb	r3, [r7, #11]
 801075a:	3301      	adds	r3, #1
 801075c:	72fb      	strb	r3, [r7, #11]
          break;
 801075e:	e021      	b.n	80107a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010766:	699b      	ldr	r3, [r3, #24]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d00b      	beq.n	8010784 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010772:	699b      	ldr	r3, [r3, #24]
 8010774:	687a      	ldr	r2, [r7, #4]
 8010776:	7c12      	ldrb	r2, [r2, #16]
 8010778:	f107 0108 	add.w	r1, r7, #8
 801077c:	4610      	mov	r0, r2
 801077e:	4798      	blx	r3
 8010780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010782:	e00f      	b.n	80107a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010784:	6839      	ldr	r1, [r7, #0]
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 fa49 	bl	8010c1e <USBD_CtlError>
            err++;
 801078c:	7afb      	ldrb	r3, [r7, #11]
 801078e:	3301      	adds	r3, #1
 8010790:	72fb      	strb	r3, [r7, #11]
          break;
 8010792:	e007      	b.n	80107a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010794:	6839      	ldr	r1, [r7, #0]
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f000 fa41 	bl	8010c1e <USBD_CtlError>
          err++;
 801079c:	7afb      	ldrb	r3, [r7, #11]
 801079e:	3301      	adds	r3, #1
 80107a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80107a2:	bf00      	nop
      }
      break;
 80107a4:	e037      	b.n	8010816 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	7c1b      	ldrb	r3, [r3, #16]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d109      	bne.n	80107c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107b6:	f107 0208 	add.w	r2, r7, #8
 80107ba:	4610      	mov	r0, r2
 80107bc:	4798      	blx	r3
 80107be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80107c0:	e029      	b.n	8010816 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80107c2:	6839      	ldr	r1, [r7, #0]
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 fa2a 	bl	8010c1e <USBD_CtlError>
        err++;
 80107ca:	7afb      	ldrb	r3, [r7, #11]
 80107cc:	3301      	adds	r3, #1
 80107ce:	72fb      	strb	r3, [r7, #11]
      break;
 80107d0:	e021      	b.n	8010816 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	7c1b      	ldrb	r3, [r3, #16]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d10d      	bne.n	80107f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107e2:	f107 0208 	add.w	r2, r7, #8
 80107e6:	4610      	mov	r0, r2
 80107e8:	4798      	blx	r3
 80107ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	3301      	adds	r3, #1
 80107f0:	2207      	movs	r2, #7
 80107f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80107f4:	e00f      	b.n	8010816 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80107f6:	6839      	ldr	r1, [r7, #0]
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 fa10 	bl	8010c1e <USBD_CtlError>
        err++;
 80107fe:	7afb      	ldrb	r3, [r7, #11]
 8010800:	3301      	adds	r3, #1
 8010802:	72fb      	strb	r3, [r7, #11]
      break;
 8010804:	e007      	b.n	8010816 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 fa08 	bl	8010c1e <USBD_CtlError>
      err++;
 801080e:	7afb      	ldrb	r3, [r7, #11]
 8010810:	3301      	adds	r3, #1
 8010812:	72fb      	strb	r3, [r7, #11]
      break;
 8010814:	bf00      	nop
  }

  if (err != 0U)
 8010816:	7afb      	ldrb	r3, [r7, #11]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d11e      	bne.n	801085a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	88db      	ldrh	r3, [r3, #6]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d016      	beq.n	8010852 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010824:	893b      	ldrh	r3, [r7, #8]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00e      	beq.n	8010848 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	88da      	ldrh	r2, [r3, #6]
 801082e:	893b      	ldrh	r3, [r7, #8]
 8010830:	4293      	cmp	r3, r2
 8010832:	bf28      	it	cs
 8010834:	4613      	movcs	r3, r2
 8010836:	b29b      	uxth	r3, r3
 8010838:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801083a:	893b      	ldrh	r3, [r7, #8]
 801083c:	461a      	mov	r2, r3
 801083e:	68f9      	ldr	r1, [r7, #12]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 fa5d 	bl	8010d00 <USBD_CtlSendData>
 8010846:	e009      	b.n	801085c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010848:	6839      	ldr	r1, [r7, #0]
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 f9e7 	bl	8010c1e <USBD_CtlError>
 8010850:	e004      	b.n	801085c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 faae 	bl	8010db4 <USBD_CtlSendStatus>
 8010858:	e000      	b.n	801085c <USBD_GetDescriptor+0x320>
    return;
 801085a:	bf00      	nop
  }
}
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop

08010864 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	889b      	ldrh	r3, [r3, #4]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d131      	bne.n	80108da <USBD_SetAddress+0x76>
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	88db      	ldrh	r3, [r3, #6]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d12d      	bne.n	80108da <USBD_SetAddress+0x76>
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	885b      	ldrh	r3, [r3, #2]
 8010882:	2b7f      	cmp	r3, #127	@ 0x7f
 8010884:	d829      	bhi.n	80108da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	885b      	ldrh	r3, [r3, #2]
 801088a:	b2db      	uxtb	r3, r3
 801088c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010890:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010898:	b2db      	uxtb	r3, r3
 801089a:	2b03      	cmp	r3, #3
 801089c:	d104      	bne.n	80108a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801089e:	6839      	ldr	r1, [r7, #0]
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 f9bc 	bl	8010c1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108a6:	e01d      	b.n	80108e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	7bfa      	ldrb	r2, [r7, #15]
 80108ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80108b0:	7bfb      	ldrb	r3, [r7, #15]
 80108b2:	4619      	mov	r1, r3
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f001 fb9d 	bl	8011ff4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 fa7a 	bl	8010db4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80108c0:	7bfb      	ldrb	r3, [r7, #15]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d004      	beq.n	80108d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2202      	movs	r2, #2
 80108ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108ce:	e009      	b.n	80108e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2201      	movs	r2, #1
 80108d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108d8:	e004      	b.n	80108e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80108da:	6839      	ldr	r1, [r7, #0]
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f000 f99e 	bl	8010c1e <USBD_CtlError>
  }
}
 80108e2:	bf00      	nop
 80108e4:	bf00      	nop
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80108f6:	2300      	movs	r3, #0
 80108f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	885b      	ldrh	r3, [r3, #2]
 80108fe:	b2da      	uxtb	r2, r3
 8010900:	4b4e      	ldr	r3, [pc, #312]	@ (8010a3c <USBD_SetConfig+0x150>)
 8010902:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010904:	4b4d      	ldr	r3, [pc, #308]	@ (8010a3c <USBD_SetConfig+0x150>)
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	2b01      	cmp	r3, #1
 801090a:	d905      	bls.n	8010918 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801090c:	6839      	ldr	r1, [r7, #0]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f985 	bl	8010c1e <USBD_CtlError>
    return USBD_FAIL;
 8010914:	2303      	movs	r3, #3
 8010916:	e08c      	b.n	8010a32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801091e:	b2db      	uxtb	r3, r3
 8010920:	2b02      	cmp	r3, #2
 8010922:	d002      	beq.n	801092a <USBD_SetConfig+0x3e>
 8010924:	2b03      	cmp	r3, #3
 8010926:	d029      	beq.n	801097c <USBD_SetConfig+0x90>
 8010928:	e075      	b.n	8010a16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801092a:	4b44      	ldr	r3, [pc, #272]	@ (8010a3c <USBD_SetConfig+0x150>)
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d020      	beq.n	8010974 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010932:	4b42      	ldr	r3, [pc, #264]	@ (8010a3c <USBD_SetConfig+0x150>)
 8010934:	781b      	ldrb	r3, [r3, #0]
 8010936:	461a      	mov	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801093c:	4b3f      	ldr	r3, [pc, #252]	@ (8010a3c <USBD_SetConfig+0x150>)
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	4619      	mov	r1, r3
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f7fe ffb9 	bl	800f8ba <USBD_SetClassConfig>
 8010948:	4603      	mov	r3, r0
 801094a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801094c:	7bfb      	ldrb	r3, [r7, #15]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d008      	beq.n	8010964 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010952:	6839      	ldr	r1, [r7, #0]
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 f962 	bl	8010c1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2202      	movs	r2, #2
 801095e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010962:	e065      	b.n	8010a30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f000 fa25 	bl	8010db4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2203      	movs	r2, #3
 801096e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010972:	e05d      	b.n	8010a30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f000 fa1d 	bl	8010db4 <USBD_CtlSendStatus>
      break;
 801097a:	e059      	b.n	8010a30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801097c:	4b2f      	ldr	r3, [pc, #188]	@ (8010a3c <USBD_SetConfig+0x150>)
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d112      	bne.n	80109aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2202      	movs	r2, #2
 8010988:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801098c:	4b2b      	ldr	r3, [pc, #172]	@ (8010a3c <USBD_SetConfig+0x150>)
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	461a      	mov	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010996:	4b29      	ldr	r3, [pc, #164]	@ (8010a3c <USBD_SetConfig+0x150>)
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	4619      	mov	r1, r3
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7fe ffa8 	bl	800f8f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 fa06 	bl	8010db4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80109a8:	e042      	b.n	8010a30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80109aa:	4b24      	ldr	r3, [pc, #144]	@ (8010a3c <USBD_SetConfig+0x150>)
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	461a      	mov	r2, r3
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d02a      	beq.n	8010a0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	4619      	mov	r1, r3
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f7fe ff96 	bl	800f8f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80109c6:	4b1d      	ldr	r3, [pc, #116]	@ (8010a3c <USBD_SetConfig+0x150>)
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	461a      	mov	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80109d0:	4b1a      	ldr	r3, [pc, #104]	@ (8010a3c <USBD_SetConfig+0x150>)
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	4619      	mov	r1, r3
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f7fe ff6f 	bl	800f8ba <USBD_SetClassConfig>
 80109dc:	4603      	mov	r3, r0
 80109de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80109e0:	7bfb      	ldrb	r3, [r7, #15]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d00f      	beq.n	8010a06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80109e6:	6839      	ldr	r1, [r7, #0]
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f000 f918 	bl	8010c1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	4619      	mov	r1, r3
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7fe ff7b 	bl	800f8f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2202      	movs	r2, #2
 8010a00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010a04:	e014      	b.n	8010a30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 f9d4 	bl	8010db4 <USBD_CtlSendStatus>
      break;
 8010a0c:	e010      	b.n	8010a30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 f9d0 	bl	8010db4 <USBD_CtlSendStatus>
      break;
 8010a14:	e00c      	b.n	8010a30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010a16:	6839      	ldr	r1, [r7, #0]
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 f900 	bl	8010c1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010a1e:	4b07      	ldr	r3, [pc, #28]	@ (8010a3c <USBD_SetConfig+0x150>)
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	4619      	mov	r1, r3
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7fe ff64 	bl	800f8f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010a2a:	2303      	movs	r3, #3
 8010a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8010a2e:	bf00      	nop
  }

  return ret;
 8010a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3710      	adds	r7, #16
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	24000624 	.word	0x24000624

08010a40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	88db      	ldrh	r3, [r3, #6]
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d004      	beq.n	8010a5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 f8e2 	bl	8010c1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010a5a:	e023      	b.n	8010aa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	dc02      	bgt.n	8010a6e <USBD_GetConfig+0x2e>
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	dc03      	bgt.n	8010a74 <USBD_GetConfig+0x34>
 8010a6c:	e015      	b.n	8010a9a <USBD_GetConfig+0x5a>
 8010a6e:	2b03      	cmp	r3, #3
 8010a70:	d00b      	beq.n	8010a8a <USBD_GetConfig+0x4a>
 8010a72:	e012      	b.n	8010a9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2200      	movs	r2, #0
 8010a78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	3308      	adds	r3, #8
 8010a7e:	2201      	movs	r2, #1
 8010a80:	4619      	mov	r1, r3
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f000 f93c 	bl	8010d00 <USBD_CtlSendData>
        break;
 8010a88:	e00c      	b.n	8010aa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	3304      	adds	r3, #4
 8010a8e:	2201      	movs	r2, #1
 8010a90:	4619      	mov	r1, r3
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f000 f934 	bl	8010d00 <USBD_CtlSendData>
        break;
 8010a98:	e004      	b.n	8010aa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010a9a:	6839      	ldr	r1, [r7, #0]
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 f8be 	bl	8010c1e <USBD_CtlError>
        break;
 8010aa2:	bf00      	nop
}
 8010aa4:	bf00      	nop
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	3b01      	subs	r3, #1
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	d81e      	bhi.n	8010b02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	88db      	ldrh	r3, [r3, #6]
 8010ac8:	2b02      	cmp	r3, #2
 8010aca:	d004      	beq.n	8010ad6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010acc:	6839      	ldr	r1, [r7, #0]
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 f8a5 	bl	8010c1e <USBD_CtlError>
        break;
 8010ad4:	e01a      	b.n	8010b0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2201      	movs	r2, #1
 8010ada:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d005      	beq.n	8010af2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	f043 0202 	orr.w	r2, r3, #2
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	330c      	adds	r3, #12
 8010af6:	2202      	movs	r2, #2
 8010af8:	4619      	mov	r1, r3
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f900 	bl	8010d00 <USBD_CtlSendData>
      break;
 8010b00:	e004      	b.n	8010b0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f000 f88a 	bl	8010c1e <USBD_CtlError>
      break;
 8010b0a:	bf00      	nop
  }
}
 8010b0c:	bf00      	nop
 8010b0e:	3708      	adds	r7, #8
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	885b      	ldrh	r3, [r3, #2]
 8010b22:	2b01      	cmp	r3, #1
 8010b24:	d107      	bne.n	8010b36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2201      	movs	r2, #1
 8010b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 f940 	bl	8010db4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010b34:	e013      	b.n	8010b5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	885b      	ldrh	r3, [r3, #2]
 8010b3a:	2b02      	cmp	r3, #2
 8010b3c:	d10b      	bne.n	8010b56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	889b      	ldrh	r3, [r3, #4]
 8010b42:	0a1b      	lsrs	r3, r3, #8
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	b2da      	uxtb	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 f930 	bl	8010db4 <USBD_CtlSendStatus>
}
 8010b54:	e003      	b.n	8010b5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010b56:	6839      	ldr	r1, [r7, #0]
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 f860 	bl	8010c1e <USBD_CtlError>
}
 8010b5e:	bf00      	nop
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b082      	sub	sp, #8
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
 8010b6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	2b02      	cmp	r3, #2
 8010b7c:	d80b      	bhi.n	8010b96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	885b      	ldrh	r3, [r3, #2]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d10c      	bne.n	8010ba0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 f910 	bl	8010db4 <USBD_CtlSendStatus>
      }
      break;
 8010b94:	e004      	b.n	8010ba0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010b96:	6839      	ldr	r1, [r7, #0]
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 f840 	bl	8010c1e <USBD_CtlError>
      break;
 8010b9e:	e000      	b.n	8010ba2 <USBD_ClrFeature+0x3c>
      break;
 8010ba0:	bf00      	nop
  }
}
 8010ba2:	bf00      	nop
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b084      	sub	sp, #16
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	781a      	ldrb	r2, [r3, #0]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	781a      	ldrb	r2, [r3, #0]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f7ff fa16 	bl	8010006 <SWAPBYTE>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	461a      	mov	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	3301      	adds	r3, #1
 8010be6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	3301      	adds	r3, #1
 8010bec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	f7ff fa09 	bl	8010006 <SWAPBYTE>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	3301      	adds	r3, #1
 8010c00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	3301      	adds	r3, #1
 8010c06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010c08:	68f8      	ldr	r0, [r7, #12]
 8010c0a:	f7ff f9fc 	bl	8010006 <SWAPBYTE>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	461a      	mov	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	80da      	strh	r2, [r3, #6]
}
 8010c16:	bf00      	nop
 8010c18:	3710      	adds	r7, #16
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b082      	sub	sp, #8
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
 8010c26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c28:	2180      	movs	r1, #128	@ 0x80
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f001 f978 	bl	8011f20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010c30:	2100      	movs	r1, #0
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f001 f974 	bl	8011f20 <USBD_LL_StallEP>
}
 8010c38:	bf00      	nop
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d036      	beq.n	8010cc4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010c5a:	6938      	ldr	r0, [r7, #16]
 8010c5c:	f000 f836 	bl	8010ccc <USBD_GetLen>
 8010c60:	4603      	mov	r3, r0
 8010c62:	3301      	adds	r3, #1
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	005b      	lsls	r3, r3, #1
 8010c68:	b29a      	uxth	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010c6e:	7dfb      	ldrb	r3, [r7, #23]
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	4413      	add	r3, r2
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	7812      	ldrb	r2, [r2, #0]
 8010c78:	701a      	strb	r2, [r3, #0]
  idx++;
 8010c7a:	7dfb      	ldrb	r3, [r7, #23]
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010c80:	7dfb      	ldrb	r3, [r7, #23]
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	4413      	add	r3, r2
 8010c86:	2203      	movs	r2, #3
 8010c88:	701a      	strb	r2, [r3, #0]
  idx++;
 8010c8a:	7dfb      	ldrb	r3, [r7, #23]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010c90:	e013      	b.n	8010cba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010c92:	7dfb      	ldrb	r3, [r7, #23]
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	4413      	add	r3, r2
 8010c98:	693a      	ldr	r2, [r7, #16]
 8010c9a:	7812      	ldrb	r2, [r2, #0]
 8010c9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	613b      	str	r3, [r7, #16]
    idx++;
 8010ca4:	7dfb      	ldrb	r3, [r7, #23]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010caa:	7dfb      	ldrb	r3, [r7, #23]
 8010cac:	68ba      	ldr	r2, [r7, #8]
 8010cae:	4413      	add	r3, r2
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	701a      	strb	r2, [r3, #0]
    idx++;
 8010cb4:	7dfb      	ldrb	r3, [r7, #23]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d1e7      	bne.n	8010c92 <USBD_GetString+0x52>
 8010cc2:	e000      	b.n	8010cc6 <USBD_GetString+0x86>
    return;
 8010cc4:	bf00      	nop
  }
}
 8010cc6:	3718      	adds	r7, #24
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b085      	sub	sp, #20
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010cdc:	e005      	b.n	8010cea <USBD_GetLen+0x1e>
  {
    len++;
 8010cde:	7bfb      	ldrb	r3, [r7, #15]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d1f5      	bne.n	8010cde <USBD_GetLen+0x12>
  }

  return len;
 8010cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3714      	adds	r7, #20
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2202      	movs	r2, #2
 8010d10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	68ba      	ldr	r2, [r7, #8]
 8010d24:	2100      	movs	r1, #0
 8010d26:	68f8      	ldr	r0, [r7, #12]
 8010d28:	f001 f983 	bl	8012032 <USBD_LL_Transmit>

  return USBD_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b084      	sub	sp, #16
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	60f8      	str	r0, [r7, #12]
 8010d3e:	60b9      	str	r1, [r7, #8]
 8010d40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	68ba      	ldr	r2, [r7, #8]
 8010d46:	2100      	movs	r1, #0
 8010d48:	68f8      	ldr	r0, [r7, #12]
 8010d4a:	f001 f972 	bl	8012032 <USBD_LL_Transmit>

  return USBD_OK;
 8010d4e:	2300      	movs	r3, #0
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	3710      	adds	r7, #16
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	60f8      	str	r0, [r7, #12]
 8010d60:	60b9      	str	r1, [r7, #8]
 8010d62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2203      	movs	r2, #3
 8010d68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	687a      	ldr	r2, [r7, #4]
 8010d70:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	68ba      	ldr	r2, [r7, #8]
 8010d80:	2100      	movs	r1, #0
 8010d82:	68f8      	ldr	r0, [r7, #12]
 8010d84:	f001 f976 	bl	8012074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010d88:	2300      	movs	r3, #0
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3710      	adds	r7, #16
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b084      	sub	sp, #16
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	60f8      	str	r0, [r7, #12]
 8010d9a:	60b9      	str	r1, [r7, #8]
 8010d9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	2100      	movs	r1, #0
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f001 f965 	bl	8012074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010daa:	2300      	movs	r3, #0
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3710      	adds	r7, #16
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}

08010db4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2204      	movs	r2, #4
 8010dc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	2100      	movs	r1, #0
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f001 f931 	bl	8012032 <USBD_LL_Transmit>

  return USBD_OK;
 8010dd0:	2300      	movs	r3, #0
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3708      	adds	r7, #8
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b082      	sub	sp, #8
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2205      	movs	r2, #5
 8010de6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010dea:	2300      	movs	r3, #0
 8010dec:	2200      	movs	r2, #0
 8010dee:	2100      	movs	r1, #0
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f001 f93f 	bl	8012074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010df6:	2300      	movs	r3, #0
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c: I2C句柄
 * @param  error: 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b088      	sub	sp, #32
 8010e04:	af04      	add	r7, sp, #16
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	460b      	mov	r3, r1
 8010e0a:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 8010e10:	2300      	movs	r3, #0
 8010e12:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 8010e14:	2364      	movs	r3, #100	@ 0x64
 8010e16:	9302      	str	r3, [sp, #8]
 8010e18:	2302      	movs	r3, #2
 8010e1a:	9301      	str	r3, [sp, #4]
 8010e1c:	f107 030c 	add.w	r3, r7, #12
 8010e20:	9300      	str	r3, [sp, #0]
 8010e22:	2301      	movs	r3, #1
 8010e24:	2200      	movs	r2, #0
 8010e26:	2181      	movs	r1, #129	@ 0x81
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7f5 f987 	bl	800613c <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 8010e2e:	23f4      	movs	r3, #244	@ 0xf4
 8010e30:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 8010e32:	2393      	movs	r3, #147	@ 0x93
 8010e34:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 8010e36:	2364      	movs	r3, #100	@ 0x64
 8010e38:	9302      	str	r3, [sp, #8]
 8010e3a:	2302      	movs	r3, #2
 8010e3c:	9301      	str	r3, [sp, #4]
 8010e3e:	f107 030c 	add.w	r3, r7, #12
 8010e42:	9300      	str	r3, [sp, #0]
 8010e44:	2301      	movs	r3, #1
 8010e46:	2201      	movs	r2, #1
 8010e48:	2181      	movs	r1, #129	@ 0x81
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f7f5 f976 	bl	800613c <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 8010e50:	230f      	movs	r3, #15
 8010e52:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 8010e54:	78fb      	ldrb	r3, [r7, #3]
 8010e56:	3b60      	subs	r3, #96	@ 0x60
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 8010e5c:	2364      	movs	r3, #100	@ 0x64
 8010e5e:	9302      	str	r3, [sp, #8]
 8010e60:	2302      	movs	r3, #2
 8010e62:	9301      	str	r3, [sp, #4]
 8010e64:	f107 030c 	add.w	r3, r7, #12
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	2202      	movs	r2, #2
 8010e6e:	2181      	movs	r1, #129	@ 0x81
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f7f5 f963 	bl	800613c <HAL_I2C_Mem_Write>
}
 8010e76:	bf00      	nop
 8010e78:	3710      	adds	r7, #16
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
	...

08010e80 <OLED_WR_Byte>:
//[7]0 1 2 3 ... 127
// 向SSD1306写入一个字节
// dat:要写入的数据/命令
// cmd:数据/命令标志 0，表示命令；1，表示数据
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	4603      	mov	r3, r0
 8010e88:	460a      	mov	r2, r1
 8010e8a:	71fb      	strb	r3, [r7, #7]
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	71bb      	strb	r3, [r7, #6]
	if (cmd)
 8010e90:	79bb      	ldrb	r3, [r7, #6]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d005      	beq.n	8010ea2 <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set(); // 命令/数据标志位置为1，则表示传送的是命令字节
 8010e96:	2201      	movs	r2, #1
 8010e98:	2140      	movs	r1, #64	@ 0x40
 8010e9a:	4811      	ldr	r0, [pc, #68]	@ (8010ee0 <OLED_WR_Byte+0x60>)
 8010e9c:	f7f5 f88a 	bl	8005fb4 <HAL_GPIO_WritePin>
 8010ea0:	e004      	b.n	8010eac <OLED_WR_Byte+0x2c>
	}
	else
		OLED_DC_Clr();						 // 命令/数据标志位置为0，则表示传送的是数据字节
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	2140      	movs	r1, #64	@ 0x40
 8010ea6:	480e      	ldr	r0, [pc, #56]	@ (8010ee0 <OLED_WR_Byte+0x60>)
 8010ea8:	f7f5 f884 	bl	8005fb4 <HAL_GPIO_WritePin>
	OLED_CS_Clr();							 // 片选信号为低，表示选中OLED
 8010eac:	2200      	movs	r2, #0
 8010eae:	2102      	movs	r1, #2
 8010eb0:	480c      	ldr	r0, [pc, #48]	@ (8010ee4 <OLED_WR_Byte+0x64>)
 8010eb2:	f7f5 f87f 	bl	8005fb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000); // oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 8010eb6:	1df9      	adds	r1, r7, #7
 8010eb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	480a      	ldr	r0, [pc, #40]	@ (8010ee8 <OLED_WR_Byte+0x68>)
 8010ec0:	f7fa fe82 	bl	800bbc8 <HAL_SPI_Transmit>
	OLED_CS_Set();
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	2102      	movs	r1, #2
 8010ec8:	4806      	ldr	r0, [pc, #24]	@ (8010ee4 <OLED_WR_Byte+0x64>)
 8010eca:	f7f5 f873 	bl	8005fb4 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 8010ece:	2201      	movs	r2, #1
 8010ed0:	2140      	movs	r1, #64	@ 0x40
 8010ed2:	4803      	ldr	r0, [pc, #12]	@ (8010ee0 <OLED_WR_Byte+0x60>)
 8010ed4:	f7f5 f86e 	bl	8005fb4 <HAL_GPIO_WritePin>
}
 8010ed8:	bf00      	nop
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	58022000 	.word	0x58022000
 8010ee4:	58020400 	.word	0x58020400
 8010ee8:	240004b0 	.word	0x240004b0

08010eec <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	460a      	mov	r2, r1
 8010ef6:	71fb      	strb	r3, [r7, #7]
 8010ef8:	4613      	mov	r3, r2
 8010efa:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0 + y, OLED_CMD);
 8010efc:	79bb      	ldrb	r3, [r7, #6]
 8010efe:	3b50      	subs	r3, #80	@ 0x50
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	2100      	movs	r1, #0
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7ff ffbb 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte((((x + 2) & 0xf0) >> 4) | 0x10, OLED_CMD);
 8010f0a:	79fb      	ldrb	r3, [r7, #7]
 8010f0c:	3302      	adds	r3, #2
 8010f0e:	111b      	asrs	r3, r3, #4
 8010f10:	b25b      	sxtb	r3, r3
 8010f12:	f003 030f 	and.w	r3, r3, #15
 8010f16:	b25b      	sxtb	r3, r3
 8010f18:	f043 0310 	orr.w	r3, r3, #16
 8010f1c:	b25b      	sxtb	r3, r3
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	2100      	movs	r1, #0
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7ff ffac 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(((x + 2) & 0x0f), OLED_CMD);
 8010f28:	79fb      	ldrb	r3, [r7, #7]
 8010f2a:	3302      	adds	r3, #2
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	f003 030f 	and.w	r3, r3, #15
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	2100      	movs	r1, #0
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7ff ffa2 	bl	8010e80 <OLED_WR_Byte>
}
 8010f3c:	bf00      	nop
 8010f3e:	3708      	adds	r7, #8
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}

08010f44 <OLED_Clear>:
	OLED_WR_Byte(0X10, OLED_CMD); // 关闭电荷泵
	OLED_WR_Byte(0XAE, OLED_CMD); // DISPLAY OFF
}
// 清屏函数，清完后整个屏幕都是黑色的，没有一点光亮
void OLED_Clear(void)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	71fb      	strb	r3, [r7, #7]
 8010f4e:	e01f      	b.n	8010f90 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置页地址
 8010f50:	79fb      	ldrb	r3, [r7, #7]
 8010f52:	3b50      	subs	r3, #80	@ 0x50
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	2100      	movs	r1, #0
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7ff ff91 	bl	8010e80 <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);	  // 设置起始列低地址
 8010f5e:	2100      	movs	r1, #0
 8010f60:	2002      	movs	r0, #2
 8010f62:	f7ff ff8d 	bl	8010e80 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置起始列高地址
 8010f66:	2100      	movs	r1, #0
 8010f68:	2010      	movs	r0, #16
 8010f6a:	f7ff ff89 	bl	8010e80 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010f6e:	2300      	movs	r3, #0
 8010f70:	71bb      	strb	r3, [r7, #6]
 8010f72:	e006      	b.n	8010f82 <OLED_Clear+0x3e>
			OLED_WR_Byte(0, OLED_DATA);
 8010f74:	2101      	movs	r1, #1
 8010f76:	2000      	movs	r0, #0
 8010f78:	f7ff ff82 	bl	8010e80 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010f7c:	79bb      	ldrb	r3, [r7, #6]
 8010f7e:	3301      	adds	r3, #1
 8010f80:	71bb      	strb	r3, [r7, #6]
 8010f82:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	daf4      	bge.n	8010f74 <OLED_Clear+0x30>
	for (i = 0; i < 8; i++)
 8010f8a:	79fb      	ldrb	r3, [r7, #7]
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	71fb      	strb	r3, [r7, #7]
 8010f90:	79fb      	ldrb	r3, [r7, #7]
 8010f92:	2b07      	cmp	r3, #7
 8010f94:	d9dc      	bls.n	8010f50 <OLED_Clear+0xc>
	} // 更新显示
}
 8010f96:	bf00      	nop
 8010f98:	bf00      	nop
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <OLED_ShowChar>:
// x:0~127
// y:0~6
// mode:0,反白显示；1，正常显示
// size:选择字体大小 16/12
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	71fb      	strb	r3, [r7, #7]
 8010faa:	460b      	mov	r3, r1
 8010fac:	71bb      	strb	r3, [r7, #6]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0, i = 0;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	73bb      	strb	r3, [r7, #14]
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; // 得到偏移后的值
 8010fba:	797b      	ldrb	r3, [r7, #5]
 8010fbc:	3b20      	subs	r3, #32
 8010fbe:	73bb      	strb	r3, [r7, #14]
	if (x > Max_Column - 1)
 8010fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	da04      	bge.n	8010fd2 <OLED_ShowChar+0x32>
	{
		x = 0;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 8010fcc:	79bb      	ldrb	r3, [r7, #6]
 8010fce:	3302      	adds	r3, #2
 8010fd0:	71bb      	strb	r3, [r7, #6]
	}
	if (SIZE == 16)
	{
		OLED_Set_Pos(x, y);
 8010fd2:	79ba      	ldrb	r2, [r7, #6]
 8010fd4:	79fb      	ldrb	r3, [r7, #7]
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7ff ff87 	bl	8010eec <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 8010fde:	2300      	movs	r3, #0
 8010fe0:	73fb      	strb	r3, [r7, #15]
 8010fe2:	e00c      	b.n	8010ffe <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 8010fe4:	7bbb      	ldrb	r3, [r7, #14]
 8010fe6:	011a      	lsls	r2, r3, #4
 8010fe8:	7bfb      	ldrb	r3, [r7, #15]
 8010fea:	4413      	add	r3, r2
 8010fec:	4a16      	ldr	r2, [pc, #88]	@ (8011048 <OLED_ShowChar+0xa8>)
 8010fee:	5cd3      	ldrb	r3, [r2, r3]
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7ff ff44 	bl	8010e80 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 8010ff8:	7bfb      	ldrb	r3, [r7, #15]
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	73fb      	strb	r3, [r7, #15]
 8010ffe:	7bfb      	ldrb	r3, [r7, #15]
 8011000:	2b07      	cmp	r3, #7
 8011002:	d9ef      	bls.n	8010fe4 <OLED_ShowChar+0x44>
		OLED_Set_Pos(x, y + 1);
 8011004:	79bb      	ldrb	r3, [r7, #6]
 8011006:	3301      	adds	r3, #1
 8011008:	b2da      	uxtb	r2, r3
 801100a:	79fb      	ldrb	r3, [r7, #7]
 801100c:	4611      	mov	r1, r2
 801100e:	4618      	mov	r0, r3
 8011010:	f7ff ff6c 	bl	8010eec <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 8011014:	2300      	movs	r3, #0
 8011016:	73fb      	strb	r3, [r7, #15]
 8011018:	e00d      	b.n	8011036 <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 801101a:	7bbb      	ldrb	r3, [r7, #14]
 801101c:	011a      	lsls	r2, r3, #4
 801101e:	7bfb      	ldrb	r3, [r7, #15]
 8011020:	4413      	add	r3, r2
 8011022:	3308      	adds	r3, #8
 8011024:	4a08      	ldr	r2, [pc, #32]	@ (8011048 <OLED_ShowChar+0xa8>)
 8011026:	5cd3      	ldrb	r3, [r2, r3]
 8011028:	2101      	movs	r1, #1
 801102a:	4618      	mov	r0, r3
 801102c:	f7ff ff28 	bl	8010e80 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 8011030:	7bfb      	ldrb	r3, [r7, #15]
 8011032:	3301      	adds	r3, #1
 8011034:	73fb      	strb	r3, [r7, #15]
 8011036:	7bfb      	ldrb	r3, [r7, #15]
 8011038:	2b07      	cmp	r3, #7
 801103a:	d9ee      	bls.n	801101a <OLED_ShowChar+0x7a>
	{
		OLED_Set_Pos(x, y + 1);
		for (i = 0; i < 6; i++)
			OLED_WR_Byte(F6x8[c][i], OLED_DATA);
	}
}
 801103c:	bf00      	nop
 801103e:	bf00      	nop
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
 8011046:	bf00      	nop
 8011048:	080150e4 	.word	0x080150e4

0801104c <OLED_ShowString>:
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0');
	}
}
// 显示一个字符串
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	4603      	mov	r3, r0
 8011054:	603a      	str	r2, [r7, #0]
 8011056:	71fb      	strb	r3, [r7, #7]
 8011058:	460b      	mov	r3, r1
 801105a:	71bb      	strb	r3, [r7, #6]
	unsigned char j = 0;
 801105c:	2300      	movs	r3, #0
 801105e:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 8011060:	e016      	b.n	8011090 <OLED_ShowString+0x44>
	{
		OLED_ShowChar(x, y, chr[j]);
 8011062:	7bfb      	ldrb	r3, [r7, #15]
 8011064:	683a      	ldr	r2, [r7, #0]
 8011066:	4413      	add	r3, r2
 8011068:	781a      	ldrb	r2, [r3, #0]
 801106a:	79b9      	ldrb	r1, [r7, #6]
 801106c:	79fb      	ldrb	r3, [r7, #7]
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff ff96 	bl	8010fa0 <OLED_ShowChar>
		x += 8;
 8011074:	79fb      	ldrb	r3, [r7, #7]
 8011076:	3308      	adds	r3, #8
 8011078:	71fb      	strb	r3, [r7, #7]
		if (x > 120)
 801107a:	79fb      	ldrb	r3, [r7, #7]
 801107c:	2b78      	cmp	r3, #120	@ 0x78
 801107e:	d904      	bls.n	801108a <OLED_ShowString+0x3e>
		{
			x = 0;
 8011080:	2300      	movs	r3, #0
 8011082:	71fb      	strb	r3, [r7, #7]
			y += 2;
 8011084:	79bb      	ldrb	r3, [r7, #6]
 8011086:	3302      	adds	r3, #2
 8011088:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 801108a:	7bfb      	ldrb	r3, [r7, #15]
 801108c:	3301      	adds	r3, #1
 801108e:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 8011090:	7bfb      	ldrb	r3, [r7, #15]
 8011092:	683a      	ldr	r2, [r7, #0]
 8011094:	4413      	add	r3, r2
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1e2      	bne.n	8011062 <OLED_ShowString+0x16>
	}
}
 801109c:	bf00      	nop
 801109e:	bf00      	nop
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
	...

080110a8 <OLED_Init>:
	}
}

// 初始化SSD1306
void OLED_Init(void)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	af00      	add	r7, sp, #0
	// 复位OLED
	OLED_RST_Clr(); // 拉低复位引脚
 80110ac:	2200      	movs	r2, #0
 80110ae:	2120      	movs	r1, #32
 80110b0:	4841      	ldr	r0, [pc, #260]	@ (80111b8 <OLED_Init+0x110>)
 80110b2:	f7f4 ff7f 	bl	8005fb4 <HAL_GPIO_WritePin>
	HAL_Delay(200); // 延时200毫秒
 80110b6:	20c8      	movs	r0, #200	@ 0xc8
 80110b8:	f7f0 fd1a 	bl	8001af0 <HAL_Delay>
	OLED_RST_Set(); // 拉高复位引脚
 80110bc:	2201      	movs	r2, #1
 80110be:	2120      	movs	r1, #32
 80110c0:	483d      	ldr	r0, [pc, #244]	@ (80111b8 <OLED_Init+0x110>)
 80110c2:	f7f4 ff77 	bl	8005fb4 <HAL_GPIO_WritePin>

	// 关闭OLED面板
	OLED_WR_Byte(0xAE, OLED_CMD); // 关闭面板指令
 80110c6:	2100      	movs	r1, #0
 80110c8:	20ae      	movs	r0, #174	@ 0xae
 80110ca:	f7ff fed9 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // 设置低列地址
 80110ce:	2100      	movs	r1, #0
 80110d0:	2002      	movs	r0, #2
 80110d2:	f7ff fed5 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址
 80110d6:	2100      	movs	r1, #0
 80110d8:	2010      	movs	r0, #16
 80110da:	f7ff fed1 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置起始行地址，映射RAM显示起始行（0x00~0x3F）
 80110de:	2100      	movs	r1, #0
 80110e0:	2040      	movs	r0, #64	@ 0x40
 80110e2:	f7ff fecd 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); // 设置对比度控制寄存器
 80110e6:	2100      	movs	r1, #0
 80110e8:	2081      	movs	r0, #129	@ 0x81
 80110ea:	f7ff fec9 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // 设置SEG输出电流亮度
 80110ee:	2100      	movs	r1, #0
 80110f0:	20cf      	movs	r0, #207	@ 0xcf
 80110f2:	f7ff fec5 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // 设置SEG/列映射，0Xa0左右反置，0Xa1正常
 80110f6:	2100      	movs	r1, #0
 80110f8:	20a1      	movs	r0, #161	@ 0xa1
 80110fa:	f7ff fec1 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // 设置COM/行扫描方向，0Xc0上下反置，0Xc8正常
 80110fe:	2100      	movs	r1, #0
 8011100:	20c8      	movs	r0, #200	@ 0xc8
 8011102:	f7ff febd 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 设置正常显示
 8011106:	2100      	movs	r1, #0
 8011108:	20a6      	movs	r0, #166	@ 0xa6
 801110a:	f7ff feb9 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // 设置多路复用比（1到64）
 801110e:	2100      	movs	r1, #0
 8011110:	20a8      	movs	r0, #168	@ 0xa8
 8011112:	f7ff feb5 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); // 1/64 duty
 8011116:	2100      	movs	r1, #0
 8011118:	203f      	movs	r0, #63	@ 0x3f
 801111a:	f7ff feb1 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // 设置显示偏移，移动映射RAM计数器（0x00~0x3F）
 801111e:	2100      	movs	r1, #0
 8011120:	20d3      	movs	r0, #211	@ 0xd3
 8011122:	f7ff fead 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); // 不偏移
 8011126:	2100      	movs	r1, #0
 8011128:	2000      	movs	r0, #0
 801112a:	f7ff fea9 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); // 设置显示时钟分频比/振荡器频率
 801112e:	2100      	movs	r1, #0
 8011130:	20d5      	movs	r0, #213	@ 0xd5
 8011132:	f7ff fea5 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); // 设置分频比，设置时钟为100帧/秒
 8011136:	2100      	movs	r1, #0
 8011138:	2080      	movs	r0, #128	@ 0x80
 801113a:	f7ff fea1 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // 设置预充电周期
 801113e:	2100      	movs	r1, #0
 8011140:	20d9      	movs	r0, #217	@ 0xd9
 8011142:	f7ff fe9d 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // 设置预充电为15个时钟，放电为1个时钟
 8011146:	2100      	movs	r1, #0
 8011148:	20f1      	movs	r0, #241	@ 0xf1
 801114a:	f7ff fe99 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // 设置COM引脚硬件配置
 801114e:	2100      	movs	r1, #0
 8011150:	20da      	movs	r0, #218	@ 0xda
 8011152:	f7ff fe95 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8011156:	2100      	movs	r1, #0
 8011158:	2012      	movs	r0, #18
 801115a:	f7ff fe91 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // 设置vcomh
 801115e:	2100      	movs	r1, #0
 8011160:	20db      	movs	r0, #219	@ 0xdb
 8011162:	f7ff fe8d 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置VCOM取消电平
 8011166:	2100      	movs	r1, #0
 8011168:	2040      	movs	r0, #64	@ 0x40
 801116a:	f7ff fe89 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // 设置页面寻址模式（0x00/0x01/0x02）
 801116e:	2100      	movs	r1, #0
 8011170:	2020      	movs	r0, #32
 8011172:	f7ff fe85 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);
 8011176:	2100      	movs	r1, #0
 8011178:	2002      	movs	r0, #2
 801117a:	f7ff fe81 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); // 设置充电泵使能/禁用
 801117e:	2100      	movs	r1, #0
 8011180:	208d      	movs	r0, #141	@ 0x8d
 8011182:	f7ff fe7d 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // 设置（0x10）禁用
 8011186:	2100      	movs	r1, #0
 8011188:	2014      	movs	r0, #20
 801118a:	f7ff fe79 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // 禁用整个显示（0xa4/0xa5）
 801118e:	2100      	movs	r1, #0
 8011190:	20a4      	movs	r0, #164	@ 0xa4
 8011192:	f7ff fe75 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 禁用反相显示（0xa6/a7）
 8011196:	2100      	movs	r1, #0
 8011198:	20a6      	movs	r0, #166	@ 0xa6
 801119a:	f7ff fe71 	bl	8010e80 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // 打开OLED面板
 801119e:	2100      	movs	r1, #0
 80111a0:	20af      	movs	r0, #175	@ 0xaf
 80111a2:	f7ff fe6d 	bl	8010e80 <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*显示开*/
 80111a6:	2100      	movs	r1, #0
 80111a8:	20af      	movs	r0, #175	@ 0xaf
 80111aa:	f7ff fe69 	bl	8010e80 <OLED_WR_Byte>
	OLED_Clear();				  // 清除显示
 80111ae:	f7ff fec9 	bl	8010f44 <OLED_Clear>
}
 80111b2:	bf00      	nop
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	58020800 	.word	0x58020800

080111bc <pll_Init>:
 * @param config: 配置指针
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 80111bc:	b480      	push	{r7}
 80111be:	b085      	sub	sp, #20
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80111ca:	4613      	mov	r3, r2
 80111cc:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f04f 0200 	mov.w	r2, #0
 80111d4:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f04f 0200 	mov.w	r2, #0
 80111dc:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f04f 0200 	mov.w	r2, #0
 80111e4:	609a      	str	r2, [r3, #8]

    signal->sogi_a_1 = 0.f;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f04f 0200 	mov.w	r2, #0
 80111ec:	611a      	str	r2, [r3, #16]
    signal->sogi_a_2 = 0.f;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	f04f 0200 	mov.w	r2, #0
 80111f4:	615a      	str	r2, [r3, #20]
    signal->sogi_b_1 = 0.f;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f04f 0200 	mov.w	r2, #0
 80111fc:	61da      	str	r2, [r3, #28]
    signal->sogi_b_2 = 0.f;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f04f 0200 	mov.w	r2, #0
 8011204:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f04f 0200 	mov.w	r2, #0
 801120c:	635a      	str	r2, [r3, #52]	@ 0x34

    config->omiga = 2 * PI * f; // f典型值50
 801120e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011212:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011378 <pll_Init+0x1bc>
 8011216:	ee67 7a87 	vmul.f32	s15, s15, s14
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 8011220:	887b      	ldrh	r3, [r7, #2]
 8011222:	ee07 3a90 	vmov	s15, r3
 8011226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801122a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801122e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	4a50      	ldr	r2, [pc, #320]	@ (801137c <pll_Init+0x1c0>)
 801123c:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	f04f 0200 	mov.w	r2, #0
 8011244:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	edd3 7a00 	vldr	s15, [r3]
 801124c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011250:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	edd3 7a01 	vldr	s15, [r3, #4]
 801125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	edd3 7a02 	vldr	s15, [r3, #8]
 801126a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	edd3 7a00 	vldr	s15, [r3]
 8011274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	edd3 7a01 	vldr	s15, [r3, #4]
 801127e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	ed93 7a00 	vldr	s14, [r3]
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	edd3 7a01 	vldr	s15, [r3, #4]
 8011294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	edd3 7a00 	vldr	s15, [r3]
 801129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80112a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80112c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112c8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80112cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80112e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80112e4:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80112e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80112f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112fc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8011300:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801131a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801131e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8011322:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011336:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801133a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801133e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	4a0d      	ldr	r2, [pc, #52]	@ (8011380 <pll_Init+0x1c4>)
 801134c:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	4a0c      	ldr	r2, [pc, #48]	@ (8011384 <pll_Init+0x1c8>)
 8011352:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	f04f 0200 	mov.w	r2, #0
 801135a:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f04f 0200 	mov.w	r2, #0
 8011362:	641a      	str	r2, [r3, #64]	@ 0x40
    signal->pid_out = 0.f;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f04f 0200 	mov.w	r2, #0
 801136a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801136c:	bf00      	nop
 801136e:	3714      	adds	r7, #20
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr
 8011378:	40c90fdb 	.word	0x40c90fdb
 801137c:	3fb4fdf4 	.word	0x3fb4fdf4
 8011380:	428d78c3 	.word	0x428d78c3
 8011384:	46758fb9 	.word	0x46758fb9

08011388 <pll_Control>:
 * @param signal_In: 信号指针
 * @param config: 配置指针
 * @param signal_Target: 目标信号指针
 */
void pll_Control(pll_Signal *signal_In, pll_Config *config, pll_Signal *signal_Target)
{
 8011388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801138c:	ed2d 8b02 	vpush	{d8}
 8011390:	b090      	sub	sp, #64	@ 0x40
 8011392:	af00      	add	r7, sp, #0
 8011394:	60f8      	str	r0, [r7, #12]
 8011396:	60b9      	str	r1, [r7, #8]
 8011398:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_In);
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f000 f932 	bl	8011604 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_In->sogi_a_0, signal_In->sogi_b_0 / 382 * 3, &signal_In->park_d, &signal_In->park_q, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	68de      	ldr	r6, [r3, #12]
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80113aa:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8011548 <pll_Control+0x1c0>
 80113ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80113b2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80113b6:	ee27 8a87 	vmul.f32	s16, s15, s14
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80113cc:	eeb0 0a67 	vmov.f32	s0, s15
 80113d0:	f000 fec8 	bl	8012164 <arm_sin_f32>
 80113d4:	eef0 8a40 	vmov.f32	s17, s0
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80113de:	eeb0 0a67 	vmov.f32	s0, s15
 80113e2:	f000 ff05 	bl	80121f0 <arm_cos_f32>
 80113e6:	eef0 7a40 	vmov.f32	s15, s0
 80113ea:	627e      	str	r6, [r7, #36]	@ 0x24
 80113ec:	ed87 8a08 	vstr	s16, [r7, #32]
 80113f0:	61fd      	str	r5, [r7, #28]
 80113f2:	61bc      	str	r4, [r7, #24]
 80113f4:	edc7 8a05 	vstr	s17, [r7, #20]
 80113f8:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80113fc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011400:	edd7 7a04 	vldr	s15, [r7, #16]
 8011404:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011408:	edd7 6a08 	vldr	s13, [r7, #32]
 801140c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 801141e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011422:	eeb1 7a67 	vneg.f32	s14, s15
 8011426:	edd7 7a05 	vldr	s15, [r7, #20]
 801142a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801142e:	edd7 6a08 	vldr	s13, [r7, #32]
 8011432:	edd7 7a04 	vldr	s15, [r7, #16]
 8011436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801143a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801143e:	69bb      	ldr	r3, [r7, #24]
 8011440:	edc3 7a00 	vstr	s15, [r3]
  }
 8011444:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_In, config);
 8011446:	68b9      	ldr	r1, [r7, #8]
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f000 f87f 	bl	801154c <pll_Pid>
    // 更新theta
    signal_In->theta += (signal_In->pid_out + config->omiga) * config->Ts;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	edd3 7a00 	vldr	s15, [r3]
 8011460:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	edd3 7a01 	vldr	s15, [r3, #4]
 801146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_In->theta = (float)fmod(signal_In->theta, 2 * PI);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801147e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011482:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 8011540 <pll_Control+0x1b8>
 8011486:	eeb0 0b47 	vmov.f64	d0, d7
 801148a:	f003 fcb5 	bl	8014df8 <fmod>
 801148e:	eeb0 7b40 	vmov.f64	d7, d0
 8011492:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 反park变换
    arm_inv_park_f32(signal_In->park_d, signal_In->park_q, &signal_In->park_inv_a, &signal_In->park_inv_b, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f103 052c 	add.w	r5, r3, #44	@ 0x2c
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80114b8:	eeb0 0a67 	vmov.f32	s0, s15
 80114bc:	f000 fe52 	bl	8012164 <arm_sin_f32>
 80114c0:	eeb0 8a40 	vmov.f32	s16, s0
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80114ca:	eeb0 0a67 	vmov.f32	s0, s15
 80114ce:	f000 fe8f 	bl	80121f0 <arm_cos_f32>
 80114d2:	eef0 7a40 	vmov.f32	s15, s0
 80114d6:	f8c7 803c 	str.w	r8, [r7, #60]	@ 0x3c
 80114da:	63be      	str	r6, [r7, #56]	@ 0x38
 80114dc:	637d      	str	r5, [r7, #52]	@ 0x34
 80114de:	633c      	str	r4, [r7, #48]	@ 0x30
 80114e0:	ed87 8a0b 	vstr	s16, [r7, #44]	@ 0x2c
 80114e4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 80114e8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80114ec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80114f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114f4:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80114f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80114fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011506:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 801150a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801150e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011516:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 801151a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801151e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011528:	edc3 7a00 	vstr	s15, [r3]
  }
 801152c:	bf00      	nop
}
 801152e:	bf00      	nop
 8011530:	3740      	adds	r7, #64	@ 0x40
 8011532:	46bd      	mov	sp, r7
 8011534:	ecbd 8b02 	vpop	{d8}
 8011538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801153c:	f3af 8000 	nop.w
 8011540:	60000000 	.word	0x60000000
 8011544:	401921fb 	.word	0x401921fb
 8011548:	43bf0000 	.word	0x43bf0000

0801154c <pll_Pid>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	edd3 7a03 	vldr	s15, [r3, #12]
 8011562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	edd3 6a04 	vldr	s13, [r3, #16]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8011584:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801158c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	edd3 6a05 	vldr	s13, [r3, #20]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801159c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80115b0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80115f4 <pll_Pid+0xa8>
 80115b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115bc:	dd03      	ble.n	80115c6 <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	4a0d      	ldr	r2, [pc, #52]	@ (80115f8 <pll_Pid+0xac>)
 80115c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80115c4:	e00c      	b.n	80115e0 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80115cc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80115fc <pll_Pid+0xb0>
 80115d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d8:	d502      	bpl.n	80115e0 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4a08      	ldr	r2, [pc, #32]	@ (8011600 <pll_Pid+0xb4>)
 80115de:	639a      	str	r2, [r3, #56]	@ 0x38

    signal->pid_err[1] = signal->pid_err[0];
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80115e8:	bf00      	nop
 80115ea:	370c      	adds	r7, #12
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr
 80115f4:	431d1463 	.word	0x431d1463
 80115f8:	431d1463 	.word	0x431d1463
 80115fc:	c27b53d2 	.word	0xc27b53d2
 8011600:	c27b53d2 	.word	0xc27b53d2

08011604 <pll_Sogi>:
 * @brief Sogi变换
 *
 * @param signal: 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
    signal->sogi_a_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_a_1 + signal->a2 * signal->sogi_a_2;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	edd3 7a00 	vldr	s15, [r3]
 8011618:	ee27 7a27 	vmul.f32	s14, s14, s15
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	edd3 7a02 	vldr	s15, [r3, #8]
 8011628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801162c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	edd3 7a04 	vldr	s15, [r3, #16]
 801163c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	edd3 7a05 	vldr	s15, [r3, #20]
 8011650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_b_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_b_1 + signal->a2 * signal->sogi_b_2;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	edd3 7a00 	vldr	s15, [r3]
 801166a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8011674:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	edd3 7a01 	vldr	s15, [r3, #4]
 801167e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011682:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011696:	ee37 7a27 	vadd.f32	s14, s14, s15
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80116a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80116ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	685a      	ldr	r2, [r3, #4]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	605a      	str	r2, [r3, #4]
    signal->sogi_a_2 = signal->sogi_a_1;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	691a      	ldr	r2, [r3, #16]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	615a      	str	r2, [r3, #20]
    signal->sogi_a_1 = signal->sogi_a_0;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	68da      	ldr	r2, [r3, #12]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	611a      	str	r2, [r3, #16]
    signal->sogi_b_2 = signal->sogi_b_1;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	69da      	ldr	r2, [r3, #28]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	621a      	str	r2, [r3, #32]
    signal->sogi_b_1 = signal->sogi_b_0;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	699a      	ldr	r2, [r3, #24]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	61da      	str	r2, [r3, #28]
}
 80116f8:	bf00      	nop
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr

08011704 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011708:	2200      	movs	r2, #0
 801170a:	4913      	ldr	r1, [pc, #76]	@ (8011758 <MX_USB_DEVICE_Init+0x54>)
 801170c:	4813      	ldr	r0, [pc, #76]	@ (801175c <MX_USB_DEVICE_Init+0x58>)
 801170e:	f7fe f857 	bl	800f7c0 <USBD_Init>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d001      	beq.n	801171c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011718:	f7ef fcc4 	bl	80010a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801171c:	4910      	ldr	r1, [pc, #64]	@ (8011760 <MX_USB_DEVICE_Init+0x5c>)
 801171e:	480f      	ldr	r0, [pc, #60]	@ (801175c <MX_USB_DEVICE_Init+0x58>)
 8011720:	f7fe f87e 	bl	800f820 <USBD_RegisterClass>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801172a:	f7ef fcbb 	bl	80010a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801172e:	490d      	ldr	r1, [pc, #52]	@ (8011764 <MX_USB_DEVICE_Init+0x60>)
 8011730:	480a      	ldr	r0, [pc, #40]	@ (801175c <MX_USB_DEVICE_Init+0x58>)
 8011732:	f7fd ff75 	bl	800f620 <USBD_CDC_RegisterInterface>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	d001      	beq.n	8011740 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801173c:	f7ef fcb2 	bl	80010a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011740:	4806      	ldr	r0, [pc, #24]	@ (801175c <MX_USB_DEVICE_Init+0x58>)
 8011742:	f7fe f8a3 	bl	800f88c <USBD_Start>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d001      	beq.n	8011750 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801174c:	f7ef fcaa 	bl	80010a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011750:	f7f6 fbf6 	bl	8007f40 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011754:	bf00      	nop
 8011756:	bd80      	pop	{r7, pc}
 8011758:	240000b4 	.word	0x240000b4
 801175c:	24000628 	.word	0x24000628
 8011760:	24000020 	.word	0x24000020
 8011764:	240000a0 	.word	0x240000a0

08011768 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801176c:	2200      	movs	r2, #0
 801176e:	4905      	ldr	r1, [pc, #20]	@ (8011784 <CDC_Init_FS+0x1c>)
 8011770:	4805      	ldr	r0, [pc, #20]	@ (8011788 <CDC_Init_FS+0x20>)
 8011772:	f7fd ff6f 	bl	800f654 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011776:	4905      	ldr	r1, [pc, #20]	@ (801178c <CDC_Init_FS+0x24>)
 8011778:	4803      	ldr	r0, [pc, #12]	@ (8011788 <CDC_Init_FS+0x20>)
 801177a:	f7fd ff8d 	bl	800f698 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801177e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011780:	4618      	mov	r0, r3
 8011782:	bd80      	pop	{r7, pc}
 8011784:	24001104 	.word	0x24001104
 8011788:	24000628 	.word	0x24000628
 801178c:	24000904 	.word	0x24000904

08011790 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011790:	b480      	push	{r7}
 8011792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011794:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011796:	4618      	mov	r0, r3
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr

080117a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b083      	sub	sp, #12
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	4603      	mov	r3, r0
 80117a8:	6039      	str	r1, [r7, #0]
 80117aa:	71fb      	strb	r3, [r7, #7]
 80117ac:	4613      	mov	r3, r2
 80117ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80117b0:	79fb      	ldrb	r3, [r7, #7]
 80117b2:	2b23      	cmp	r3, #35	@ 0x23
 80117b4:	d84a      	bhi.n	801184c <CDC_Control_FS+0xac>
 80117b6:	a201      	add	r2, pc, #4	@ (adr r2, 80117bc <CDC_Control_FS+0x1c>)
 80117b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117bc:	0801184d 	.word	0x0801184d
 80117c0:	0801184d 	.word	0x0801184d
 80117c4:	0801184d 	.word	0x0801184d
 80117c8:	0801184d 	.word	0x0801184d
 80117cc:	0801184d 	.word	0x0801184d
 80117d0:	0801184d 	.word	0x0801184d
 80117d4:	0801184d 	.word	0x0801184d
 80117d8:	0801184d 	.word	0x0801184d
 80117dc:	0801184d 	.word	0x0801184d
 80117e0:	0801184d 	.word	0x0801184d
 80117e4:	0801184d 	.word	0x0801184d
 80117e8:	0801184d 	.word	0x0801184d
 80117ec:	0801184d 	.word	0x0801184d
 80117f0:	0801184d 	.word	0x0801184d
 80117f4:	0801184d 	.word	0x0801184d
 80117f8:	0801184d 	.word	0x0801184d
 80117fc:	0801184d 	.word	0x0801184d
 8011800:	0801184d 	.word	0x0801184d
 8011804:	0801184d 	.word	0x0801184d
 8011808:	0801184d 	.word	0x0801184d
 801180c:	0801184d 	.word	0x0801184d
 8011810:	0801184d 	.word	0x0801184d
 8011814:	0801184d 	.word	0x0801184d
 8011818:	0801184d 	.word	0x0801184d
 801181c:	0801184d 	.word	0x0801184d
 8011820:	0801184d 	.word	0x0801184d
 8011824:	0801184d 	.word	0x0801184d
 8011828:	0801184d 	.word	0x0801184d
 801182c:	0801184d 	.word	0x0801184d
 8011830:	0801184d 	.word	0x0801184d
 8011834:	0801184d 	.word	0x0801184d
 8011838:	0801184d 	.word	0x0801184d
 801183c:	0801184d 	.word	0x0801184d
 8011840:	0801184d 	.word	0x0801184d
 8011844:	0801184d 	.word	0x0801184d
 8011848:	0801184d 	.word	0x0801184d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801184c:	bf00      	nop
  }

  return (USBD_OK);
 801184e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011850:	4618      	mov	r0, r3
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011866:	6879      	ldr	r1, [r7, #4]
 8011868:	4805      	ldr	r0, [pc, #20]	@ (8011880 <CDC_Receive_FS+0x24>)
 801186a:	f7fd ff15 	bl	800f698 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801186e:	4804      	ldr	r0, [pc, #16]	@ (8011880 <CDC_Receive_FS+0x24>)
 8011870:	f7fd ff70 	bl	800f754 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011874:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011876:	4618      	mov	r0, r3
 8011878:	3708      	adds	r7, #8
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	24000628 	.word	0x24000628

08011884 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	460b      	mov	r3, r1
 801188e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011890:	2300      	movs	r3, #0
 8011892:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011894:	4b0d      	ldr	r3, [pc, #52]	@ (80118cc <CDC_Transmit_FS+0x48>)
 8011896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801189a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d001      	beq.n	80118aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80118a6:	2301      	movs	r3, #1
 80118a8:	e00b      	b.n	80118c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80118aa:	887b      	ldrh	r3, [r7, #2]
 80118ac:	461a      	mov	r2, r3
 80118ae:	6879      	ldr	r1, [r7, #4]
 80118b0:	4806      	ldr	r0, [pc, #24]	@ (80118cc <CDC_Transmit_FS+0x48>)
 80118b2:	f7fd fecf 	bl	800f654 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80118b6:	4805      	ldr	r0, [pc, #20]	@ (80118cc <CDC_Transmit_FS+0x48>)
 80118b8:	f7fd ff0c 	bl	800f6d4 <USBD_CDC_TransmitPacket>
 80118bc:	4603      	mov	r3, r0
 80118be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	24000628 	.word	0x24000628

080118d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b087      	sub	sp, #28
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	4613      	mov	r3, r2
 80118dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80118de:	2300      	movs	r3, #0
 80118e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80118e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	371c      	adds	r7, #28
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr
	...

080118f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	4603      	mov	r3, r0
 80118fc:	6039      	str	r1, [r7, #0]
 80118fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	2212      	movs	r2, #18
 8011904:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011906:	4b03      	ldr	r3, [pc, #12]	@ (8011914 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011908:	4618      	mov	r0, r3
 801190a:	370c      	adds	r7, #12
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr
 8011914:	240000d4 	.word	0x240000d4

08011918 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	6039      	str	r1, [r7, #0]
 8011922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	2204      	movs	r2, #4
 8011928:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801192a:	4b03      	ldr	r3, [pc, #12]	@ (8011938 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801192c:	4618      	mov	r0, r3
 801192e:	370c      	adds	r7, #12
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr
 8011938:	240000e8 	.word	0x240000e8

0801193c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	4603      	mov	r3, r0
 8011944:	6039      	str	r1, [r7, #0]
 8011946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011948:	79fb      	ldrb	r3, [r7, #7]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d105      	bne.n	801195a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801194e:	683a      	ldr	r2, [r7, #0]
 8011950:	4907      	ldr	r1, [pc, #28]	@ (8011970 <USBD_FS_ProductStrDescriptor+0x34>)
 8011952:	4808      	ldr	r0, [pc, #32]	@ (8011974 <USBD_FS_ProductStrDescriptor+0x38>)
 8011954:	f7ff f974 	bl	8010c40 <USBD_GetString>
 8011958:	e004      	b.n	8011964 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801195a:	683a      	ldr	r2, [r7, #0]
 801195c:	4904      	ldr	r1, [pc, #16]	@ (8011970 <USBD_FS_ProductStrDescriptor+0x34>)
 801195e:	4805      	ldr	r0, [pc, #20]	@ (8011974 <USBD_FS_ProductStrDescriptor+0x38>)
 8011960:	f7ff f96e 	bl	8010c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011964:	4b02      	ldr	r3, [pc, #8]	@ (8011970 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011966:	4618      	mov	r0, r3
 8011968:	3708      	adds	r7, #8
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}
 801196e:	bf00      	nop
 8011970:	24001904 	.word	0x24001904
 8011974:	08015084 	.word	0x08015084

08011978 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	4603      	mov	r3, r0
 8011980:	6039      	str	r1, [r7, #0]
 8011982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011984:	683a      	ldr	r2, [r7, #0]
 8011986:	4904      	ldr	r1, [pc, #16]	@ (8011998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011988:	4804      	ldr	r0, [pc, #16]	@ (801199c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801198a:	f7ff f959 	bl	8010c40 <USBD_GetString>
  return USBD_StrDesc;
 801198e:	4b02      	ldr	r3, [pc, #8]	@ (8011998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011990:	4618      	mov	r0, r3
 8011992:	3708      	adds	r7, #8
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	24001904 	.word	0x24001904
 801199c:	0801509c 	.word	0x0801509c

080119a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	4603      	mov	r3, r0
 80119a8:	6039      	str	r1, [r7, #0]
 80119aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	221a      	movs	r2, #26
 80119b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80119b2:	f000 f843 	bl	8011a3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80119b6:	4b02      	ldr	r3, [pc, #8]	@ (80119c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3708      	adds	r7, #8
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	240000ec 	.word	0x240000ec

080119c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	4603      	mov	r3, r0
 80119cc:	6039      	str	r1, [r7, #0]
 80119ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80119d0:	79fb      	ldrb	r3, [r7, #7]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d105      	bne.n	80119e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80119d6:	683a      	ldr	r2, [r7, #0]
 80119d8:	4907      	ldr	r1, [pc, #28]	@ (80119f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80119da:	4808      	ldr	r0, [pc, #32]	@ (80119fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80119dc:	f7ff f930 	bl	8010c40 <USBD_GetString>
 80119e0:	e004      	b.n	80119ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80119e2:	683a      	ldr	r2, [r7, #0]
 80119e4:	4904      	ldr	r1, [pc, #16]	@ (80119f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80119e6:	4805      	ldr	r0, [pc, #20]	@ (80119fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80119e8:	f7ff f92a 	bl	8010c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 80119ec:	4b02      	ldr	r3, [pc, #8]	@ (80119f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3708      	adds	r7, #8
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	24001904 	.word	0x24001904
 80119fc:	080150b0 	.word	0x080150b0

08011a00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	4603      	mov	r3, r0
 8011a08:	6039      	str	r1, [r7, #0]
 8011a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a0c:	79fb      	ldrb	r3, [r7, #7]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d105      	bne.n	8011a1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011a12:	683a      	ldr	r2, [r7, #0]
 8011a14:	4907      	ldr	r1, [pc, #28]	@ (8011a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011a16:	4808      	ldr	r0, [pc, #32]	@ (8011a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011a18:	f7ff f912 	bl	8010c40 <USBD_GetString>
 8011a1c:	e004      	b.n	8011a28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011a1e:	683a      	ldr	r2, [r7, #0]
 8011a20:	4904      	ldr	r1, [pc, #16]	@ (8011a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011a22:	4805      	ldr	r0, [pc, #20]	@ (8011a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011a24:	f7ff f90c 	bl	8010c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a28:	4b02      	ldr	r3, [pc, #8]	@ (8011a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	24001904 	.word	0x24001904
 8011a38:	080150bc 	.word	0x080150bc

08011a3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8011a42:	68fa      	ldr	r2, [r7, #12]
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	4413      	add	r3, r2
 8011a48:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d009      	beq.n	8011a64 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011a50:	2208      	movs	r2, #8
 8011a52:	4906      	ldr	r1, [pc, #24]	@ (8011a6c <Get_SerialNum+0x30>)
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f000 f80d 	bl	8011a74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011a5a:	2204      	movs	r2, #4
 8011a5c:	4904      	ldr	r1, [pc, #16]	@ (8011a70 <Get_SerialNum+0x34>)
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 f808 	bl	8011a74 <IntToUnicode>
  }
}
 8011a64:	bf00      	nop
 8011a66:	3710      	adds	r7, #16
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}
 8011a6c:	240000ee 	.word	0x240000ee
 8011a70:	240000fe 	.word	0x240000fe

08011a74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b087      	sub	sp, #28
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	4613      	mov	r3, r2
 8011a80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011a82:	2300      	movs	r3, #0
 8011a84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011a86:	2300      	movs	r3, #0
 8011a88:	75fb      	strb	r3, [r7, #23]
 8011a8a:	e027      	b.n	8011adc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	0f1b      	lsrs	r3, r3, #28
 8011a90:	2b09      	cmp	r3, #9
 8011a92:	d80b      	bhi.n	8011aac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	0f1b      	lsrs	r3, r3, #28
 8011a98:	b2da      	uxtb	r2, r3
 8011a9a:	7dfb      	ldrb	r3, [r7, #23]
 8011a9c:	005b      	lsls	r3, r3, #1
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	440b      	add	r3, r1
 8011aa4:	3230      	adds	r2, #48	@ 0x30
 8011aa6:	b2d2      	uxtb	r2, r2
 8011aa8:	701a      	strb	r2, [r3, #0]
 8011aaa:	e00a      	b.n	8011ac2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	0f1b      	lsrs	r3, r3, #28
 8011ab0:	b2da      	uxtb	r2, r3
 8011ab2:	7dfb      	ldrb	r3, [r7, #23]
 8011ab4:	005b      	lsls	r3, r3, #1
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	440b      	add	r3, r1
 8011abc:	3237      	adds	r2, #55	@ 0x37
 8011abe:	b2d2      	uxtb	r2, r2
 8011ac0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	011b      	lsls	r3, r3, #4
 8011ac6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011ac8:	7dfb      	ldrb	r3, [r7, #23]
 8011aca:	005b      	lsls	r3, r3, #1
 8011acc:	3301      	adds	r3, #1
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	4413      	add	r3, r2
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011ad6:	7dfb      	ldrb	r3, [r7, #23]
 8011ad8:	3301      	adds	r3, #1
 8011ada:	75fb      	strb	r3, [r7, #23]
 8011adc:	7dfa      	ldrb	r2, [r7, #23]
 8011ade:	79fb      	ldrb	r3, [r7, #7]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d3d3      	bcc.n	8011a8c <IntToUnicode+0x18>
  }
}
 8011ae4:	bf00      	nop
 8011ae6:	bf00      	nop
 8011ae8:	371c      	adds	r7, #28
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr
	...

08011af4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b0ba      	sub	sp, #232	@ 0xe8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011afc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011b00:	2200      	movs	r2, #0
 8011b02:	601a      	str	r2, [r3, #0]
 8011b04:	605a      	str	r2, [r3, #4]
 8011b06:	609a      	str	r2, [r3, #8]
 8011b08:	60da      	str	r2, [r3, #12]
 8011b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011b0c:	f107 0310 	add.w	r3, r7, #16
 8011b10:	22c0      	movs	r2, #192	@ 0xc0
 8011b12:	2100      	movs	r1, #0
 8011b14:	4618      	mov	r0, r3
 8011b16:	f001 f9c8 	bl	8012eaa <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8011bd0 <HAL_PCD_MspInit+0xdc>)
 8011b20:	4293      	cmp	r3, r2
 8011b22:	d151      	bne.n	8011bc8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011b24:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011b28:	f04f 0300 	mov.w	r3, #0
 8011b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011b30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011b38:	f107 0310 	add.w	r3, r7, #16
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7f7 fa21 	bl	8008f84 <HAL_RCCEx_PeriphCLKConfig>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011b48:	f7ef faac 	bl	80010a4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011b4c:	f7f6 f9f8 	bl	8007f40 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b50:	4b20      	ldr	r3, [pc, #128]	@ (8011bd4 <HAL_PCD_MspInit+0xe0>)
 8011b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011b56:	4a1f      	ldr	r2, [pc, #124]	@ (8011bd4 <HAL_PCD_MspInit+0xe0>)
 8011b58:	f043 0301 	orr.w	r3, r3, #1
 8011b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011b60:	4b1c      	ldr	r3, [pc, #112]	@ (8011bd4 <HAL_PCD_MspInit+0xe0>)
 8011b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011b66:	f003 0301 	and.w	r3, r3, #1
 8011b6a:	60fb      	str	r3, [r7, #12]
 8011b6c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011b6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b76:	2302      	movs	r3, #2
 8011b78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b82:	2300      	movs	r3, #0
 8011b84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011b88:	230a      	movs	r3, #10
 8011b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011b92:	4619      	mov	r1, r3
 8011b94:	4810      	ldr	r0, [pc, #64]	@ (8011bd8 <HAL_PCD_MspInit+0xe4>)
 8011b96:	f7f4 f85d 	bl	8005c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8011bd4 <HAL_PCD_MspInit+0xe0>)
 8011b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8011bd4 <HAL_PCD_MspInit+0xe0>)
 8011ba2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011ba6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011baa:	4b0a      	ldr	r3, [pc, #40]	@ (8011bd4 <HAL_PCD_MspInit+0xe0>)
 8011bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011bb4:	60bb      	str	r3, [r7, #8]
 8011bb6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011bb8:	2200      	movs	r2, #0
 8011bba:	2100      	movs	r1, #0
 8011bbc:	2065      	movs	r0, #101	@ 0x65
 8011bbe:	f7f1 fc87 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011bc2:	2065      	movs	r0, #101	@ 0x65
 8011bc4:	f7f1 fc9e 	bl	8003504 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011bc8:	bf00      	nop
 8011bca:	37e8      	adds	r7, #232	@ 0xe8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	40080000 	.word	0x40080000
 8011bd4:	58024400 	.word	0x58024400
 8011bd8:	58020000 	.word	0x58020000

08011bdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	f7fd fe97 	bl	800f926 <USBD_LL_SetupStage>
}
 8011bf8:	bf00      	nop
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011c12:	78fa      	ldrb	r2, [r7, #3]
 8011c14:	6879      	ldr	r1, [r7, #4]
 8011c16:	4613      	mov	r3, r2
 8011c18:	00db      	lsls	r3, r3, #3
 8011c1a:	4413      	add	r3, r2
 8011c1c:	009b      	lsls	r3, r3, #2
 8011c1e:	440b      	add	r3, r1
 8011c20:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8011c24:	681a      	ldr	r2, [r3, #0]
 8011c26:	78fb      	ldrb	r3, [r7, #3]
 8011c28:	4619      	mov	r1, r3
 8011c2a:	f7fd fed1 	bl	800f9d0 <USBD_LL_DataOutStage>
}
 8011c2e:	bf00      	nop
 8011c30:	3708      	adds	r7, #8
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}

08011c36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c36:	b580      	push	{r7, lr}
 8011c38:	b082      	sub	sp, #8
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
 8011c3e:	460b      	mov	r3, r1
 8011c40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011c48:	78fa      	ldrb	r2, [r7, #3]
 8011c4a:	6879      	ldr	r1, [r7, #4]
 8011c4c:	4613      	mov	r3, r2
 8011c4e:	00db      	lsls	r3, r3, #3
 8011c50:	4413      	add	r3, r2
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	440b      	add	r3, r1
 8011c56:	3348      	adds	r3, #72	@ 0x48
 8011c58:	681a      	ldr	r2, [r3, #0]
 8011c5a:	78fb      	ldrb	r3, [r7, #3]
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	f7fd ff6a 	bl	800fb36 <USBD_LL_DataInStage>
}
 8011c62:	bf00      	nop
 8011c64:	3708      	adds	r7, #8
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}

08011c6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b082      	sub	sp, #8
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fe f8a4 	bl	800fdc6 <USBD_LL_SOF>
}
 8011c7e:	bf00      	nop
 8011c80:	3708      	adds	r7, #8
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b084      	sub	sp, #16
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011c8e:	2301      	movs	r3, #1
 8011c90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	691b      	ldr	r3, [r3, #16]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d102      	bne.n	8011ca0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	73fb      	strb	r3, [r7, #15]
 8011c9e:	e008      	b.n	8011cb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	691b      	ldr	r3, [r3, #16]
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	d102      	bne.n	8011cae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	73fb      	strb	r3, [r7, #15]
 8011cac:	e001      	b.n	8011cb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011cae:	f7ef f9f9 	bl	80010a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011cb8:	7bfa      	ldrb	r2, [r7, #15]
 8011cba:	4611      	mov	r1, r2
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fe f83e 	bl	800fd3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7fd ffe6 	bl	800fc9a <USBD_LL_Reset>
}
 8011cce:	bf00      	nop
 8011cd0:	3710      	adds	r7, #16
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
	...

08011cd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fe f839 	bl	800fd5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	6812      	ldr	r2, [r2, #0]
 8011cfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011cfe:	f043 0301 	orr.w	r3, r3, #1
 8011d02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6a1b      	ldr	r3, [r3, #32]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d005      	beq.n	8011d18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d0c:	4b04      	ldr	r3, [pc, #16]	@ (8011d20 <HAL_PCD_SuspendCallback+0x48>)
 8011d0e:	691b      	ldr	r3, [r3, #16]
 8011d10:	4a03      	ldr	r2, [pc, #12]	@ (8011d20 <HAL_PCD_SuspendCallback+0x48>)
 8011d12:	f043 0306 	orr.w	r3, r3, #6
 8011d16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011d18:	bf00      	nop
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	e000ed00 	.word	0xe000ed00

08011d24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b082      	sub	sp, #8
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7fe f82f 	bl	800fd96 <USBD_LL_Resume>
}
 8011d38:	bf00      	nop
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	460b      	mov	r3, r1
 8011d4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d52:	78fa      	ldrb	r2, [r7, #3]
 8011d54:	4611      	mov	r1, r2
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fe f887 	bl	800fe6a <USBD_LL_IsoOUTIncomplete>
}
 8011d5c:	bf00      	nop
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d76:	78fa      	ldrb	r2, [r7, #3]
 8011d78:	4611      	mov	r1, r2
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fe f843 	bl	800fe06 <USBD_LL_IsoINIncomplete>
}
 8011d80:	bf00      	nop
 8011d82:	3708      	adds	r7, #8
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fe f899 	bl	800fece <USBD_LL_DevConnected>
}
 8011d9c:	bf00      	nop
 8011d9e:	3708      	adds	r7, #8
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fe f896 	bl	800fee4 <USBD_LL_DevDisconnected>
}
 8011db8:	bf00      	nop
 8011dba:	3708      	adds	r7, #8
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d13e      	bne.n	8011e4e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011dd0:	4a21      	ldr	r2, [pc, #132]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	4a1f      	ldr	r2, [pc, #124]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011ddc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011de0:	4b1d      	ldr	r3, [pc, #116]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011de2:	4a1e      	ldr	r2, [pc, #120]	@ (8011e5c <USBD_LL_Init+0x9c>)
 8011de4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011de6:	4b1c      	ldr	r3, [pc, #112]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011de8:	2209      	movs	r2, #9
 8011dea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011dec:	4b1a      	ldr	r3, [pc, #104]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011dee:	2202      	movs	r2, #2
 8011df0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011df2:	4b19      	ldr	r3, [pc, #100]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011df4:	2200      	movs	r2, #0
 8011df6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011df8:	4b17      	ldr	r3, [pc, #92]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011dfa:	2202      	movs	r2, #2
 8011dfc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011dfe:	4b16      	ldr	r3, [pc, #88]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e00:	2200      	movs	r2, #0
 8011e02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011e04:	4b14      	ldr	r3, [pc, #80]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e06:	2200      	movs	r2, #0
 8011e08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011e0a:	4b13      	ldr	r3, [pc, #76]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011e10:	4b11      	ldr	r3, [pc, #68]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011e16:	4b10      	ldr	r3, [pc, #64]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e18:	2200      	movs	r2, #0
 8011e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e1e:	2200      	movs	r2, #0
 8011e20:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011e22:	480d      	ldr	r0, [pc, #52]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e24:	f7f4 fd99 	bl	800695a <HAL_PCD_Init>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d001      	beq.n	8011e32 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011e2e:	f7ef f939 	bl	80010a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011e32:	2180      	movs	r1, #128	@ 0x80
 8011e34:	4808      	ldr	r0, [pc, #32]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e36:	f7f6 f808 	bl	8007e4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011e3a:	2240      	movs	r2, #64	@ 0x40
 8011e3c:	2100      	movs	r1, #0
 8011e3e:	4806      	ldr	r0, [pc, #24]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e40:	f7f5 ffbc 	bl	8007dbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011e44:	2280      	movs	r2, #128	@ 0x80
 8011e46:	2101      	movs	r1, #1
 8011e48:	4803      	ldr	r0, [pc, #12]	@ (8011e58 <USBD_LL_Init+0x98>)
 8011e4a:	f7f5 ffb7 	bl	8007dbc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011e4e:	2300      	movs	r3, #0
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	24001b04 	.word	0x24001b04
 8011e5c:	40080000 	.word	0x40080000

08011e60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7f4 fe93 	bl	8006ba2 <HAL_PCD_Start>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e80:	7bfb      	ldrb	r3, [r7, #15]
 8011e82:	4618      	mov	r0, r3
 8011e84:	f000 f942 	bl	801210c <USBD_Get_USB_Status>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3710      	adds	r7, #16
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}

08011e96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011e96:	b580      	push	{r7, lr}
 8011e98:	b084      	sub	sp, #16
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
 8011e9e:	4608      	mov	r0, r1
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	70fb      	strb	r3, [r7, #3]
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	70bb      	strb	r3, [r7, #2]
 8011eac:	4613      	mov	r3, r2
 8011eae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011ebe:	78bb      	ldrb	r3, [r7, #2]
 8011ec0:	883a      	ldrh	r2, [r7, #0]
 8011ec2:	78f9      	ldrb	r1, [r7, #3]
 8011ec4:	f7f5 fb93 	bl	80075ee <HAL_PCD_EP_Open>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ecc:	7bfb      	ldrb	r3, [r7, #15]
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f000 f91c 	bl	801210c <USBD_Get_USB_Status>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3710      	adds	r7, #16
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ee2:	b580      	push	{r7, lr}
 8011ee4:	b084      	sub	sp, #16
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	6078      	str	r0, [r7, #4]
 8011eea:	460b      	mov	r3, r1
 8011eec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011efc:	78fa      	ldrb	r2, [r7, #3]
 8011efe:	4611      	mov	r1, r2
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7f5 fbdc 	bl	80076be <HAL_PCD_EP_Close>
 8011f06:	4603      	mov	r3, r0
 8011f08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f0a:	7bfb      	ldrb	r3, [r7, #15]
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f000 f8fd 	bl	801210c <USBD_Get_USB_Status>
 8011f12:	4603      	mov	r3, r0
 8011f14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3710      	adds	r7, #16
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}

08011f20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f3a:	78fa      	ldrb	r2, [r7, #3]
 8011f3c:	4611      	mov	r1, r2
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7f5 fc96 	bl	8007870 <HAL_PCD_EP_SetStall>
 8011f44:	4603      	mov	r3, r0
 8011f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f48:	7bfb      	ldrb	r3, [r7, #15]
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f000 f8de 	bl	801210c <USBD_Get_USB_Status>
 8011f50:	4603      	mov	r3, r0
 8011f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3710      	adds	r7, #16
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}

08011f5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f5e:	b580      	push	{r7, lr}
 8011f60:	b084      	sub	sp, #16
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
 8011f66:	460b      	mov	r3, r1
 8011f68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f78:	78fa      	ldrb	r2, [r7, #3]
 8011f7a:	4611      	mov	r1, r2
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7f5 fcdb 	bl	8007938 <HAL_PCD_EP_ClrStall>
 8011f82:	4603      	mov	r3, r0
 8011f84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f86:	7bfb      	ldrb	r3, [r7, #15]
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f000 f8bf 	bl	801210c <USBD_Get_USB_Status>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f92:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b085      	sub	sp, #20
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011fae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	da0b      	bge.n	8011fd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011fb8:	78fb      	ldrb	r3, [r7, #3]
 8011fba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011fbe:	68f9      	ldr	r1, [r7, #12]
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	4413      	add	r3, r2
 8011fc6:	009b      	lsls	r3, r3, #2
 8011fc8:	440b      	add	r3, r1
 8011fca:	333e      	adds	r3, #62	@ 0x3e
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	e00b      	b.n	8011fe8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011fd0:	78fb      	ldrb	r3, [r7, #3]
 8011fd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011fd6:	68f9      	ldr	r1, [r7, #12]
 8011fd8:	4613      	mov	r3, r2
 8011fda:	00db      	lsls	r3, r3, #3
 8011fdc:	4413      	add	r3, r2
 8011fde:	009b      	lsls	r3, r3, #2
 8011fe0:	440b      	add	r3, r1
 8011fe2:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8011fe6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3714      	adds	r7, #20
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr

08011ff4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	460b      	mov	r3, r1
 8011ffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012000:	2300      	movs	r3, #0
 8012002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012004:	2300      	movs	r3, #0
 8012006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801200e:	78fa      	ldrb	r2, [r7, #3]
 8012010:	4611      	mov	r1, r2
 8012012:	4618      	mov	r0, r3
 8012014:	f7f5 fac6 	bl	80075a4 <HAL_PCD_SetAddress>
 8012018:	4603      	mov	r3, r0
 801201a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801201c:	7bfb      	ldrb	r3, [r7, #15]
 801201e:	4618      	mov	r0, r3
 8012020:	f000 f874 	bl	801210c <USBD_Get_USB_Status>
 8012024:	4603      	mov	r3, r0
 8012026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012028:	7bbb      	ldrb	r3, [r7, #14]
}
 801202a:	4618      	mov	r0, r3
 801202c:	3710      	adds	r7, #16
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}

08012032 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b086      	sub	sp, #24
 8012036:	af00      	add	r7, sp, #0
 8012038:	60f8      	str	r0, [r7, #12]
 801203a:	607a      	str	r2, [r7, #4]
 801203c:	603b      	str	r3, [r7, #0]
 801203e:	460b      	mov	r3, r1
 8012040:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012042:	2300      	movs	r3, #0
 8012044:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012046:	2300      	movs	r3, #0
 8012048:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012050:	7af9      	ldrb	r1, [r7, #11]
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	687a      	ldr	r2, [r7, #4]
 8012056:	f7f5 fbd0 	bl	80077fa <HAL_PCD_EP_Transmit>
 801205a:	4603      	mov	r3, r0
 801205c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801205e:	7dfb      	ldrb	r3, [r7, #23]
 8012060:	4618      	mov	r0, r3
 8012062:	f000 f853 	bl	801210c <USBD_Get_USB_Status>
 8012066:	4603      	mov	r3, r0
 8012068:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801206a:	7dbb      	ldrb	r3, [r7, #22]
}
 801206c:	4618      	mov	r0, r3
 801206e:	3718      	adds	r7, #24
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b086      	sub	sp, #24
 8012078:	af00      	add	r7, sp, #0
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	607a      	str	r2, [r7, #4]
 801207e:	603b      	str	r3, [r7, #0]
 8012080:	460b      	mov	r3, r1
 8012082:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012084:	2300      	movs	r3, #0
 8012086:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012088:	2300      	movs	r3, #0
 801208a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012092:	7af9      	ldrb	r1, [r7, #11]
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	f7f5 fb5b 	bl	8007752 <HAL_PCD_EP_Receive>
 801209c:	4603      	mov	r3, r0
 801209e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120a0:	7dfb      	ldrb	r3, [r7, #23]
 80120a2:	4618      	mov	r0, r3
 80120a4:	f000 f832 	bl	801210c <USBD_Get_USB_Status>
 80120a8:	4603      	mov	r3, r0
 80120aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80120ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3718      	adds	r7, #24
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}

080120b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120b6:	b580      	push	{r7, lr}
 80120b8:	b082      	sub	sp, #8
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
 80120be:	460b      	mov	r3, r1
 80120c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80120c8:	78fa      	ldrb	r2, [r7, #3]
 80120ca:	4611      	mov	r1, r2
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7f5 fb7c 	bl	80077ca <HAL_PCD_EP_GetRxCount>
 80120d2:	4603      	mov	r3, r0
}
 80120d4:	4618      	mov	r0, r3
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80120dc:	b480      	push	{r7}
 80120de:	b083      	sub	sp, #12
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80120e4:	4b03      	ldr	r3, [pc, #12]	@ (80120f4 <USBD_static_malloc+0x18>)
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	370c      	adds	r7, #12
 80120ea:	46bd      	mov	sp, r7
 80120ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f0:	4770      	bx	lr
 80120f2:	bf00      	nop
 80120f4:	24002010 	.word	0x24002010

080120f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012100:	bf00      	nop
 8012102:	370c      	adds	r7, #12
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801210c:	b480      	push	{r7}
 801210e:	b085      	sub	sp, #20
 8012110:	af00      	add	r7, sp, #0
 8012112:	4603      	mov	r3, r0
 8012114:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012116:	2300      	movs	r3, #0
 8012118:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801211a:	79fb      	ldrb	r3, [r7, #7]
 801211c:	2b03      	cmp	r3, #3
 801211e:	d817      	bhi.n	8012150 <USBD_Get_USB_Status+0x44>
 8012120:	a201      	add	r2, pc, #4	@ (adr r2, 8012128 <USBD_Get_USB_Status+0x1c>)
 8012122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012126:	bf00      	nop
 8012128:	08012139 	.word	0x08012139
 801212c:	0801213f 	.word	0x0801213f
 8012130:	08012145 	.word	0x08012145
 8012134:	0801214b 	.word	0x0801214b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012138:	2300      	movs	r3, #0
 801213a:	73fb      	strb	r3, [r7, #15]
    break;
 801213c:	e00b      	b.n	8012156 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801213e:	2303      	movs	r3, #3
 8012140:	73fb      	strb	r3, [r7, #15]
    break;
 8012142:	e008      	b.n	8012156 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012144:	2301      	movs	r3, #1
 8012146:	73fb      	strb	r3, [r7, #15]
    break;
 8012148:	e005      	b.n	8012156 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801214a:	2303      	movs	r3, #3
 801214c:	73fb      	strb	r3, [r7, #15]
    break;
 801214e:	e002      	b.n	8012156 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012150:	2303      	movs	r3, #3
 8012152:	73fb      	strb	r3, [r7, #15]
    break;
 8012154:	bf00      	nop
  }
  return usb_status;
 8012156:	7bfb      	ldrb	r3, [r7, #15]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3714      	adds	r7, #20
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <arm_sin_f32>:
 8012164:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80121e4 <arm_sin_f32+0x80>
 8012168:	ee20 0a27 	vmul.f32	s0, s0, s15
 801216c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012170:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012178:	d504      	bpl.n	8012184 <arm_sin_f32+0x20>
 801217a:	ee17 3a90 	vmov	r3, s15
 801217e:	3b01      	subs	r3, #1
 8012180:	ee07 3a90 	vmov	s15, r3
 8012184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012188:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80121e8 <arm_sin_f32+0x84>
 801218c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012190:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012194:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012198:	ee17 3a10 	vmov	r3, s14
 801219c:	b29b      	uxth	r3, r3
 801219e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121a2:	d21a      	bcs.n	80121da <arm_sin_f32+0x76>
 80121a4:	ee07 3a10 	vmov	s14, r3
 80121a8:	1c59      	adds	r1, r3, #1
 80121aa:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80121ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80121b2:	4a0e      	ldr	r2, [pc, #56]	@ (80121ec <arm_sin_f32+0x88>)
 80121b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80121b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80121c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80121c4:	edd3 6a00 	vldr	s13, [r3]
 80121c8:	ed92 7a00 	vldr	s14, [r2]
 80121cc:	ee20 0a26 	vmul.f32	s0, s0, s13
 80121d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80121d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80121d8:	4770      	bx	lr
 80121da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80121de:	2101      	movs	r1, #1
 80121e0:	2300      	movs	r3, #0
 80121e2:	e7e6      	b.n	80121b2 <arm_sin_f32+0x4e>
 80121e4:	3e22f983 	.word	0x3e22f983
 80121e8:	44000000 	.word	0x44000000
 80121ec:	080156d4 	.word	0x080156d4

080121f0 <arm_cos_f32>:
 80121f0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8012278 <arm_cos_f32+0x88>
 80121f4:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80121f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80121fc:	ee30 0a07 	vadd.f32	s0, s0, s14
 8012200:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012204:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220c:	d504      	bpl.n	8012218 <arm_cos_f32+0x28>
 801220e:	ee17 3a90 	vmov	r3, s15
 8012212:	3b01      	subs	r3, #1
 8012214:	ee07 3a90 	vmov	s15, r3
 8012218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801221c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 801227c <arm_cos_f32+0x8c>
 8012220:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012224:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012228:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801222c:	ee17 3a10 	vmov	r3, s14
 8012230:	b29b      	uxth	r3, r3
 8012232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012236:	d21a      	bcs.n	801226e <arm_cos_f32+0x7e>
 8012238:	ee07 3a10 	vmov	s14, r3
 801223c:	1c59      	adds	r1, r3, #1
 801223e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8012242:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012246:	4a0e      	ldr	r2, [pc, #56]	@ (8012280 <arm_cos_f32+0x90>)
 8012248:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801224c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012250:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012254:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012258:	edd3 6a00 	vldr	s13, [r3]
 801225c:	ed92 7a00 	vldr	s14, [r2]
 8012260:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012268:	ee30 0a27 	vadd.f32	s0, s0, s15
 801226c:	4770      	bx	lr
 801226e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012272:	2101      	movs	r1, #1
 8012274:	2300      	movs	r3, #0
 8012276:	e7e6      	b.n	8012246 <arm_cos_f32+0x56>
 8012278:	3e22f983 	.word	0x3e22f983
 801227c:	44000000 	.word	0x44000000
 8012280:	080156d4 	.word	0x080156d4

08012284 <malloc>:
 8012284:	4b02      	ldr	r3, [pc, #8]	@ (8012290 <malloc+0xc>)
 8012286:	4601      	mov	r1, r0
 8012288:	6818      	ldr	r0, [r3, #0]
 801228a:	f000 b825 	b.w	80122d8 <_malloc_r>
 801228e:	bf00      	nop
 8012290:	24000114 	.word	0x24000114

08012294 <sbrk_aligned>:
 8012294:	b570      	push	{r4, r5, r6, lr}
 8012296:	4e0f      	ldr	r6, [pc, #60]	@ (80122d4 <sbrk_aligned+0x40>)
 8012298:	460c      	mov	r4, r1
 801229a:	6831      	ldr	r1, [r6, #0]
 801229c:	4605      	mov	r5, r0
 801229e:	b911      	cbnz	r1, 80122a6 <sbrk_aligned+0x12>
 80122a0:	f000 fe44 	bl	8012f2c <_sbrk_r>
 80122a4:	6030      	str	r0, [r6, #0]
 80122a6:	4621      	mov	r1, r4
 80122a8:	4628      	mov	r0, r5
 80122aa:	f000 fe3f 	bl	8012f2c <_sbrk_r>
 80122ae:	1c43      	adds	r3, r0, #1
 80122b0:	d103      	bne.n	80122ba <sbrk_aligned+0x26>
 80122b2:	f04f 34ff 	mov.w	r4, #4294967295
 80122b6:	4620      	mov	r0, r4
 80122b8:	bd70      	pop	{r4, r5, r6, pc}
 80122ba:	1cc4      	adds	r4, r0, #3
 80122bc:	f024 0403 	bic.w	r4, r4, #3
 80122c0:	42a0      	cmp	r0, r4
 80122c2:	d0f8      	beq.n	80122b6 <sbrk_aligned+0x22>
 80122c4:	1a21      	subs	r1, r4, r0
 80122c6:	4628      	mov	r0, r5
 80122c8:	f000 fe30 	bl	8012f2c <_sbrk_r>
 80122cc:	3001      	adds	r0, #1
 80122ce:	d1f2      	bne.n	80122b6 <sbrk_aligned+0x22>
 80122d0:	e7ef      	b.n	80122b2 <sbrk_aligned+0x1e>
 80122d2:	bf00      	nop
 80122d4:	24002230 	.word	0x24002230

080122d8 <_malloc_r>:
 80122d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122dc:	1ccd      	adds	r5, r1, #3
 80122de:	f025 0503 	bic.w	r5, r5, #3
 80122e2:	3508      	adds	r5, #8
 80122e4:	2d0c      	cmp	r5, #12
 80122e6:	bf38      	it	cc
 80122e8:	250c      	movcc	r5, #12
 80122ea:	2d00      	cmp	r5, #0
 80122ec:	4606      	mov	r6, r0
 80122ee:	db01      	blt.n	80122f4 <_malloc_r+0x1c>
 80122f0:	42a9      	cmp	r1, r5
 80122f2:	d904      	bls.n	80122fe <_malloc_r+0x26>
 80122f4:	230c      	movs	r3, #12
 80122f6:	6033      	str	r3, [r6, #0]
 80122f8:	2000      	movs	r0, #0
 80122fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80123d4 <_malloc_r+0xfc>
 8012302:	f000 f869 	bl	80123d8 <__malloc_lock>
 8012306:	f8d8 3000 	ldr.w	r3, [r8]
 801230a:	461c      	mov	r4, r3
 801230c:	bb44      	cbnz	r4, 8012360 <_malloc_r+0x88>
 801230e:	4629      	mov	r1, r5
 8012310:	4630      	mov	r0, r6
 8012312:	f7ff ffbf 	bl	8012294 <sbrk_aligned>
 8012316:	1c43      	adds	r3, r0, #1
 8012318:	4604      	mov	r4, r0
 801231a:	d158      	bne.n	80123ce <_malloc_r+0xf6>
 801231c:	f8d8 4000 	ldr.w	r4, [r8]
 8012320:	4627      	mov	r7, r4
 8012322:	2f00      	cmp	r7, #0
 8012324:	d143      	bne.n	80123ae <_malloc_r+0xd6>
 8012326:	2c00      	cmp	r4, #0
 8012328:	d04b      	beq.n	80123c2 <_malloc_r+0xea>
 801232a:	6823      	ldr	r3, [r4, #0]
 801232c:	4639      	mov	r1, r7
 801232e:	4630      	mov	r0, r6
 8012330:	eb04 0903 	add.w	r9, r4, r3
 8012334:	f000 fdfa 	bl	8012f2c <_sbrk_r>
 8012338:	4581      	cmp	r9, r0
 801233a:	d142      	bne.n	80123c2 <_malloc_r+0xea>
 801233c:	6821      	ldr	r1, [r4, #0]
 801233e:	1a6d      	subs	r5, r5, r1
 8012340:	4629      	mov	r1, r5
 8012342:	4630      	mov	r0, r6
 8012344:	f7ff ffa6 	bl	8012294 <sbrk_aligned>
 8012348:	3001      	adds	r0, #1
 801234a:	d03a      	beq.n	80123c2 <_malloc_r+0xea>
 801234c:	6823      	ldr	r3, [r4, #0]
 801234e:	442b      	add	r3, r5
 8012350:	6023      	str	r3, [r4, #0]
 8012352:	f8d8 3000 	ldr.w	r3, [r8]
 8012356:	685a      	ldr	r2, [r3, #4]
 8012358:	bb62      	cbnz	r2, 80123b4 <_malloc_r+0xdc>
 801235a:	f8c8 7000 	str.w	r7, [r8]
 801235e:	e00f      	b.n	8012380 <_malloc_r+0xa8>
 8012360:	6822      	ldr	r2, [r4, #0]
 8012362:	1b52      	subs	r2, r2, r5
 8012364:	d420      	bmi.n	80123a8 <_malloc_r+0xd0>
 8012366:	2a0b      	cmp	r2, #11
 8012368:	d917      	bls.n	801239a <_malloc_r+0xc2>
 801236a:	1961      	adds	r1, r4, r5
 801236c:	42a3      	cmp	r3, r4
 801236e:	6025      	str	r5, [r4, #0]
 8012370:	bf18      	it	ne
 8012372:	6059      	strne	r1, [r3, #4]
 8012374:	6863      	ldr	r3, [r4, #4]
 8012376:	bf08      	it	eq
 8012378:	f8c8 1000 	streq.w	r1, [r8]
 801237c:	5162      	str	r2, [r4, r5]
 801237e:	604b      	str	r3, [r1, #4]
 8012380:	4630      	mov	r0, r6
 8012382:	f000 f82f 	bl	80123e4 <__malloc_unlock>
 8012386:	f104 000b 	add.w	r0, r4, #11
 801238a:	1d23      	adds	r3, r4, #4
 801238c:	f020 0007 	bic.w	r0, r0, #7
 8012390:	1ac2      	subs	r2, r0, r3
 8012392:	bf1c      	itt	ne
 8012394:	1a1b      	subne	r3, r3, r0
 8012396:	50a3      	strne	r3, [r4, r2]
 8012398:	e7af      	b.n	80122fa <_malloc_r+0x22>
 801239a:	6862      	ldr	r2, [r4, #4]
 801239c:	42a3      	cmp	r3, r4
 801239e:	bf0c      	ite	eq
 80123a0:	f8c8 2000 	streq.w	r2, [r8]
 80123a4:	605a      	strne	r2, [r3, #4]
 80123a6:	e7eb      	b.n	8012380 <_malloc_r+0xa8>
 80123a8:	4623      	mov	r3, r4
 80123aa:	6864      	ldr	r4, [r4, #4]
 80123ac:	e7ae      	b.n	801230c <_malloc_r+0x34>
 80123ae:	463c      	mov	r4, r7
 80123b0:	687f      	ldr	r7, [r7, #4]
 80123b2:	e7b6      	b.n	8012322 <_malloc_r+0x4a>
 80123b4:	461a      	mov	r2, r3
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	42a3      	cmp	r3, r4
 80123ba:	d1fb      	bne.n	80123b4 <_malloc_r+0xdc>
 80123bc:	2300      	movs	r3, #0
 80123be:	6053      	str	r3, [r2, #4]
 80123c0:	e7de      	b.n	8012380 <_malloc_r+0xa8>
 80123c2:	230c      	movs	r3, #12
 80123c4:	6033      	str	r3, [r6, #0]
 80123c6:	4630      	mov	r0, r6
 80123c8:	f000 f80c 	bl	80123e4 <__malloc_unlock>
 80123cc:	e794      	b.n	80122f8 <_malloc_r+0x20>
 80123ce:	6005      	str	r5, [r0, #0]
 80123d0:	e7d6      	b.n	8012380 <_malloc_r+0xa8>
 80123d2:	bf00      	nop
 80123d4:	24002234 	.word	0x24002234

080123d8 <__malloc_lock>:
 80123d8:	4801      	ldr	r0, [pc, #4]	@ (80123e0 <__malloc_lock+0x8>)
 80123da:	f000 bdf4 	b.w	8012fc6 <__retarget_lock_acquire_recursive>
 80123de:	bf00      	nop
 80123e0:	24002378 	.word	0x24002378

080123e4 <__malloc_unlock>:
 80123e4:	4801      	ldr	r0, [pc, #4]	@ (80123ec <__malloc_unlock+0x8>)
 80123e6:	f000 bdef 	b.w	8012fc8 <__retarget_lock_release_recursive>
 80123ea:	bf00      	nop
 80123ec:	24002378 	.word	0x24002378

080123f0 <__cvt>:
 80123f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123f2:	ed2d 8b02 	vpush	{d8}
 80123f6:	eeb0 8b40 	vmov.f64	d8, d0
 80123fa:	b085      	sub	sp, #20
 80123fc:	4617      	mov	r7, r2
 80123fe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012400:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012402:	ee18 2a90 	vmov	r2, s17
 8012406:	f025 0520 	bic.w	r5, r5, #32
 801240a:	2a00      	cmp	r2, #0
 801240c:	bfb6      	itet	lt
 801240e:	222d      	movlt	r2, #45	@ 0x2d
 8012410:	2200      	movge	r2, #0
 8012412:	eeb1 8b40 	vneglt.f64	d8, d0
 8012416:	2d46      	cmp	r5, #70	@ 0x46
 8012418:	460c      	mov	r4, r1
 801241a:	701a      	strb	r2, [r3, #0]
 801241c:	d004      	beq.n	8012428 <__cvt+0x38>
 801241e:	2d45      	cmp	r5, #69	@ 0x45
 8012420:	d100      	bne.n	8012424 <__cvt+0x34>
 8012422:	3401      	adds	r4, #1
 8012424:	2102      	movs	r1, #2
 8012426:	e000      	b.n	801242a <__cvt+0x3a>
 8012428:	2103      	movs	r1, #3
 801242a:	ab03      	add	r3, sp, #12
 801242c:	9301      	str	r3, [sp, #4]
 801242e:	ab02      	add	r3, sp, #8
 8012430:	9300      	str	r3, [sp, #0]
 8012432:	4622      	mov	r2, r4
 8012434:	4633      	mov	r3, r6
 8012436:	eeb0 0b48 	vmov.f64	d0, d8
 801243a:	f000 fe51 	bl	80130e0 <_dtoa_r>
 801243e:	2d47      	cmp	r5, #71	@ 0x47
 8012440:	d114      	bne.n	801246c <__cvt+0x7c>
 8012442:	07fb      	lsls	r3, r7, #31
 8012444:	d50a      	bpl.n	801245c <__cvt+0x6c>
 8012446:	1902      	adds	r2, r0, r4
 8012448:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012450:	bf08      	it	eq
 8012452:	9203      	streq	r2, [sp, #12]
 8012454:	2130      	movs	r1, #48	@ 0x30
 8012456:	9b03      	ldr	r3, [sp, #12]
 8012458:	4293      	cmp	r3, r2
 801245a:	d319      	bcc.n	8012490 <__cvt+0xa0>
 801245c:	9b03      	ldr	r3, [sp, #12]
 801245e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012460:	1a1b      	subs	r3, r3, r0
 8012462:	6013      	str	r3, [r2, #0]
 8012464:	b005      	add	sp, #20
 8012466:	ecbd 8b02 	vpop	{d8}
 801246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801246c:	2d46      	cmp	r5, #70	@ 0x46
 801246e:	eb00 0204 	add.w	r2, r0, r4
 8012472:	d1e9      	bne.n	8012448 <__cvt+0x58>
 8012474:	7803      	ldrb	r3, [r0, #0]
 8012476:	2b30      	cmp	r3, #48	@ 0x30
 8012478:	d107      	bne.n	801248a <__cvt+0x9a>
 801247a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012482:	bf1c      	itt	ne
 8012484:	f1c4 0401 	rsbne	r4, r4, #1
 8012488:	6034      	strne	r4, [r6, #0]
 801248a:	6833      	ldr	r3, [r6, #0]
 801248c:	441a      	add	r2, r3
 801248e:	e7db      	b.n	8012448 <__cvt+0x58>
 8012490:	1c5c      	adds	r4, r3, #1
 8012492:	9403      	str	r4, [sp, #12]
 8012494:	7019      	strb	r1, [r3, #0]
 8012496:	e7de      	b.n	8012456 <__cvt+0x66>

08012498 <__exponent>:
 8012498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801249a:	2900      	cmp	r1, #0
 801249c:	bfba      	itte	lt
 801249e:	4249      	neglt	r1, r1
 80124a0:	232d      	movlt	r3, #45	@ 0x2d
 80124a2:	232b      	movge	r3, #43	@ 0x2b
 80124a4:	2909      	cmp	r1, #9
 80124a6:	7002      	strb	r2, [r0, #0]
 80124a8:	7043      	strb	r3, [r0, #1]
 80124aa:	dd29      	ble.n	8012500 <__exponent+0x68>
 80124ac:	f10d 0307 	add.w	r3, sp, #7
 80124b0:	461d      	mov	r5, r3
 80124b2:	270a      	movs	r7, #10
 80124b4:	461a      	mov	r2, r3
 80124b6:	fbb1 f6f7 	udiv	r6, r1, r7
 80124ba:	fb07 1416 	mls	r4, r7, r6, r1
 80124be:	3430      	adds	r4, #48	@ 0x30
 80124c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80124c4:	460c      	mov	r4, r1
 80124c6:	2c63      	cmp	r4, #99	@ 0x63
 80124c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80124cc:	4631      	mov	r1, r6
 80124ce:	dcf1      	bgt.n	80124b4 <__exponent+0x1c>
 80124d0:	3130      	adds	r1, #48	@ 0x30
 80124d2:	1e94      	subs	r4, r2, #2
 80124d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80124d8:	1c41      	adds	r1, r0, #1
 80124da:	4623      	mov	r3, r4
 80124dc:	42ab      	cmp	r3, r5
 80124de:	d30a      	bcc.n	80124f6 <__exponent+0x5e>
 80124e0:	f10d 0309 	add.w	r3, sp, #9
 80124e4:	1a9b      	subs	r3, r3, r2
 80124e6:	42ac      	cmp	r4, r5
 80124e8:	bf88      	it	hi
 80124ea:	2300      	movhi	r3, #0
 80124ec:	3302      	adds	r3, #2
 80124ee:	4403      	add	r3, r0
 80124f0:	1a18      	subs	r0, r3, r0
 80124f2:	b003      	add	sp, #12
 80124f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80124fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80124fe:	e7ed      	b.n	80124dc <__exponent+0x44>
 8012500:	2330      	movs	r3, #48	@ 0x30
 8012502:	3130      	adds	r1, #48	@ 0x30
 8012504:	7083      	strb	r3, [r0, #2]
 8012506:	70c1      	strb	r1, [r0, #3]
 8012508:	1d03      	adds	r3, r0, #4
 801250a:	e7f1      	b.n	80124f0 <__exponent+0x58>
 801250c:	0000      	movs	r0, r0
	...

08012510 <_printf_float>:
 8012510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012514:	b08d      	sub	sp, #52	@ 0x34
 8012516:	460c      	mov	r4, r1
 8012518:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801251c:	4616      	mov	r6, r2
 801251e:	461f      	mov	r7, r3
 8012520:	4605      	mov	r5, r0
 8012522:	f000 fccb 	bl	8012ebc <_localeconv_r>
 8012526:	f8d0 b000 	ldr.w	fp, [r0]
 801252a:	4658      	mov	r0, fp
 801252c:	f7ed ff28 	bl	8000380 <strlen>
 8012530:	2300      	movs	r3, #0
 8012532:	930a      	str	r3, [sp, #40]	@ 0x28
 8012534:	f8d8 3000 	ldr.w	r3, [r8]
 8012538:	f894 9018 	ldrb.w	r9, [r4, #24]
 801253c:	6822      	ldr	r2, [r4, #0]
 801253e:	9005      	str	r0, [sp, #20]
 8012540:	3307      	adds	r3, #7
 8012542:	f023 0307 	bic.w	r3, r3, #7
 8012546:	f103 0108 	add.w	r1, r3, #8
 801254a:	f8c8 1000 	str.w	r1, [r8]
 801254e:	ed93 0b00 	vldr	d0, [r3]
 8012552:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80127b0 <_printf_float+0x2a0>
 8012556:	eeb0 7bc0 	vabs.f64	d7, d0
 801255a:	eeb4 7b46 	vcmp.f64	d7, d6
 801255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012562:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8012566:	dd24      	ble.n	80125b2 <_printf_float+0xa2>
 8012568:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801256c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012570:	d502      	bpl.n	8012578 <_printf_float+0x68>
 8012572:	232d      	movs	r3, #45	@ 0x2d
 8012574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012578:	498f      	ldr	r1, [pc, #572]	@ (80127b8 <_printf_float+0x2a8>)
 801257a:	4b90      	ldr	r3, [pc, #576]	@ (80127bc <_printf_float+0x2ac>)
 801257c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012580:	bf94      	ite	ls
 8012582:	4688      	movls	r8, r1
 8012584:	4698      	movhi	r8, r3
 8012586:	f022 0204 	bic.w	r2, r2, #4
 801258a:	2303      	movs	r3, #3
 801258c:	6123      	str	r3, [r4, #16]
 801258e:	6022      	str	r2, [r4, #0]
 8012590:	f04f 0a00 	mov.w	sl, #0
 8012594:	9700      	str	r7, [sp, #0]
 8012596:	4633      	mov	r3, r6
 8012598:	aa0b      	add	r2, sp, #44	@ 0x2c
 801259a:	4621      	mov	r1, r4
 801259c:	4628      	mov	r0, r5
 801259e:	f000 f9d1 	bl	8012944 <_printf_common>
 80125a2:	3001      	adds	r0, #1
 80125a4:	f040 8089 	bne.w	80126ba <_printf_float+0x1aa>
 80125a8:	f04f 30ff 	mov.w	r0, #4294967295
 80125ac:	b00d      	add	sp, #52	@ 0x34
 80125ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80125b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ba:	d709      	bvc.n	80125d0 <_printf_float+0xc0>
 80125bc:	ee10 3a90 	vmov	r3, s1
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	bfbc      	itt	lt
 80125c4:	232d      	movlt	r3, #45	@ 0x2d
 80125c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80125ca:	497d      	ldr	r1, [pc, #500]	@ (80127c0 <_printf_float+0x2b0>)
 80125cc:	4b7d      	ldr	r3, [pc, #500]	@ (80127c4 <_printf_float+0x2b4>)
 80125ce:	e7d5      	b.n	801257c <_printf_float+0x6c>
 80125d0:	6863      	ldr	r3, [r4, #4]
 80125d2:	1c59      	adds	r1, r3, #1
 80125d4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80125d8:	d139      	bne.n	801264e <_printf_float+0x13e>
 80125da:	2306      	movs	r3, #6
 80125dc:	6063      	str	r3, [r4, #4]
 80125de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80125e2:	2300      	movs	r3, #0
 80125e4:	6022      	str	r2, [r4, #0]
 80125e6:	9303      	str	r3, [sp, #12]
 80125e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80125ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80125ee:	ab09      	add	r3, sp, #36	@ 0x24
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	6861      	ldr	r1, [r4, #4]
 80125f4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80125f8:	4628      	mov	r0, r5
 80125fa:	f7ff fef9 	bl	80123f0 <__cvt>
 80125fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012602:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012604:	4680      	mov	r8, r0
 8012606:	d129      	bne.n	801265c <_printf_float+0x14c>
 8012608:	1cc8      	adds	r0, r1, #3
 801260a:	db02      	blt.n	8012612 <_printf_float+0x102>
 801260c:	6863      	ldr	r3, [r4, #4]
 801260e:	4299      	cmp	r1, r3
 8012610:	dd41      	ble.n	8012696 <_printf_float+0x186>
 8012612:	f1a9 0902 	sub.w	r9, r9, #2
 8012616:	fa5f f989 	uxtb.w	r9, r9
 801261a:	3901      	subs	r1, #1
 801261c:	464a      	mov	r2, r9
 801261e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012622:	9109      	str	r1, [sp, #36]	@ 0x24
 8012624:	f7ff ff38 	bl	8012498 <__exponent>
 8012628:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801262a:	1813      	adds	r3, r2, r0
 801262c:	2a01      	cmp	r2, #1
 801262e:	4682      	mov	sl, r0
 8012630:	6123      	str	r3, [r4, #16]
 8012632:	dc02      	bgt.n	801263a <_printf_float+0x12a>
 8012634:	6822      	ldr	r2, [r4, #0]
 8012636:	07d2      	lsls	r2, r2, #31
 8012638:	d501      	bpl.n	801263e <_printf_float+0x12e>
 801263a:	3301      	adds	r3, #1
 801263c:	6123      	str	r3, [r4, #16]
 801263e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012642:	2b00      	cmp	r3, #0
 8012644:	d0a6      	beq.n	8012594 <_printf_float+0x84>
 8012646:	232d      	movs	r3, #45	@ 0x2d
 8012648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801264c:	e7a2      	b.n	8012594 <_printf_float+0x84>
 801264e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012652:	d1c4      	bne.n	80125de <_printf_float+0xce>
 8012654:	2b00      	cmp	r3, #0
 8012656:	d1c2      	bne.n	80125de <_printf_float+0xce>
 8012658:	2301      	movs	r3, #1
 801265a:	e7bf      	b.n	80125dc <_printf_float+0xcc>
 801265c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012660:	d9db      	bls.n	801261a <_printf_float+0x10a>
 8012662:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012666:	d118      	bne.n	801269a <_printf_float+0x18a>
 8012668:	2900      	cmp	r1, #0
 801266a:	6863      	ldr	r3, [r4, #4]
 801266c:	dd0b      	ble.n	8012686 <_printf_float+0x176>
 801266e:	6121      	str	r1, [r4, #16]
 8012670:	b913      	cbnz	r3, 8012678 <_printf_float+0x168>
 8012672:	6822      	ldr	r2, [r4, #0]
 8012674:	07d0      	lsls	r0, r2, #31
 8012676:	d502      	bpl.n	801267e <_printf_float+0x16e>
 8012678:	3301      	adds	r3, #1
 801267a:	440b      	add	r3, r1
 801267c:	6123      	str	r3, [r4, #16]
 801267e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012680:	f04f 0a00 	mov.w	sl, #0
 8012684:	e7db      	b.n	801263e <_printf_float+0x12e>
 8012686:	b913      	cbnz	r3, 801268e <_printf_float+0x17e>
 8012688:	6822      	ldr	r2, [r4, #0]
 801268a:	07d2      	lsls	r2, r2, #31
 801268c:	d501      	bpl.n	8012692 <_printf_float+0x182>
 801268e:	3302      	adds	r3, #2
 8012690:	e7f4      	b.n	801267c <_printf_float+0x16c>
 8012692:	2301      	movs	r3, #1
 8012694:	e7f2      	b.n	801267c <_printf_float+0x16c>
 8012696:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801269a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801269c:	4299      	cmp	r1, r3
 801269e:	db05      	blt.n	80126ac <_printf_float+0x19c>
 80126a0:	6823      	ldr	r3, [r4, #0]
 80126a2:	6121      	str	r1, [r4, #16]
 80126a4:	07d8      	lsls	r0, r3, #31
 80126a6:	d5ea      	bpl.n	801267e <_printf_float+0x16e>
 80126a8:	1c4b      	adds	r3, r1, #1
 80126aa:	e7e7      	b.n	801267c <_printf_float+0x16c>
 80126ac:	2900      	cmp	r1, #0
 80126ae:	bfd4      	ite	le
 80126b0:	f1c1 0202 	rsble	r2, r1, #2
 80126b4:	2201      	movgt	r2, #1
 80126b6:	4413      	add	r3, r2
 80126b8:	e7e0      	b.n	801267c <_printf_float+0x16c>
 80126ba:	6823      	ldr	r3, [r4, #0]
 80126bc:	055a      	lsls	r2, r3, #21
 80126be:	d407      	bmi.n	80126d0 <_printf_float+0x1c0>
 80126c0:	6923      	ldr	r3, [r4, #16]
 80126c2:	4642      	mov	r2, r8
 80126c4:	4631      	mov	r1, r6
 80126c6:	4628      	mov	r0, r5
 80126c8:	47b8      	blx	r7
 80126ca:	3001      	adds	r0, #1
 80126cc:	d12a      	bne.n	8012724 <_printf_float+0x214>
 80126ce:	e76b      	b.n	80125a8 <_printf_float+0x98>
 80126d0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80126d4:	f240 80e0 	bls.w	8012898 <_printf_float+0x388>
 80126d8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80126dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80126e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e4:	d133      	bne.n	801274e <_printf_float+0x23e>
 80126e6:	4a38      	ldr	r2, [pc, #224]	@ (80127c8 <_printf_float+0x2b8>)
 80126e8:	2301      	movs	r3, #1
 80126ea:	4631      	mov	r1, r6
 80126ec:	4628      	mov	r0, r5
 80126ee:	47b8      	blx	r7
 80126f0:	3001      	adds	r0, #1
 80126f2:	f43f af59 	beq.w	80125a8 <_printf_float+0x98>
 80126f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80126fa:	4543      	cmp	r3, r8
 80126fc:	db02      	blt.n	8012704 <_printf_float+0x1f4>
 80126fe:	6823      	ldr	r3, [r4, #0]
 8012700:	07d8      	lsls	r0, r3, #31
 8012702:	d50f      	bpl.n	8012724 <_printf_float+0x214>
 8012704:	9b05      	ldr	r3, [sp, #20]
 8012706:	465a      	mov	r2, fp
 8012708:	4631      	mov	r1, r6
 801270a:	4628      	mov	r0, r5
 801270c:	47b8      	blx	r7
 801270e:	3001      	adds	r0, #1
 8012710:	f43f af4a 	beq.w	80125a8 <_printf_float+0x98>
 8012714:	f04f 0900 	mov.w	r9, #0
 8012718:	f108 38ff 	add.w	r8, r8, #4294967295
 801271c:	f104 0a1a 	add.w	sl, r4, #26
 8012720:	45c8      	cmp	r8, r9
 8012722:	dc09      	bgt.n	8012738 <_printf_float+0x228>
 8012724:	6823      	ldr	r3, [r4, #0]
 8012726:	079b      	lsls	r3, r3, #30
 8012728:	f100 8107 	bmi.w	801293a <_printf_float+0x42a>
 801272c:	68e0      	ldr	r0, [r4, #12]
 801272e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012730:	4298      	cmp	r0, r3
 8012732:	bfb8      	it	lt
 8012734:	4618      	movlt	r0, r3
 8012736:	e739      	b.n	80125ac <_printf_float+0x9c>
 8012738:	2301      	movs	r3, #1
 801273a:	4652      	mov	r2, sl
 801273c:	4631      	mov	r1, r6
 801273e:	4628      	mov	r0, r5
 8012740:	47b8      	blx	r7
 8012742:	3001      	adds	r0, #1
 8012744:	f43f af30 	beq.w	80125a8 <_printf_float+0x98>
 8012748:	f109 0901 	add.w	r9, r9, #1
 801274c:	e7e8      	b.n	8012720 <_printf_float+0x210>
 801274e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012750:	2b00      	cmp	r3, #0
 8012752:	dc3b      	bgt.n	80127cc <_printf_float+0x2bc>
 8012754:	4a1c      	ldr	r2, [pc, #112]	@ (80127c8 <_printf_float+0x2b8>)
 8012756:	2301      	movs	r3, #1
 8012758:	4631      	mov	r1, r6
 801275a:	4628      	mov	r0, r5
 801275c:	47b8      	blx	r7
 801275e:	3001      	adds	r0, #1
 8012760:	f43f af22 	beq.w	80125a8 <_printf_float+0x98>
 8012764:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012768:	ea59 0303 	orrs.w	r3, r9, r3
 801276c:	d102      	bne.n	8012774 <_printf_float+0x264>
 801276e:	6823      	ldr	r3, [r4, #0]
 8012770:	07d9      	lsls	r1, r3, #31
 8012772:	d5d7      	bpl.n	8012724 <_printf_float+0x214>
 8012774:	9b05      	ldr	r3, [sp, #20]
 8012776:	465a      	mov	r2, fp
 8012778:	4631      	mov	r1, r6
 801277a:	4628      	mov	r0, r5
 801277c:	47b8      	blx	r7
 801277e:	3001      	adds	r0, #1
 8012780:	f43f af12 	beq.w	80125a8 <_printf_float+0x98>
 8012784:	f04f 0a00 	mov.w	sl, #0
 8012788:	f104 0b1a 	add.w	fp, r4, #26
 801278c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801278e:	425b      	negs	r3, r3
 8012790:	4553      	cmp	r3, sl
 8012792:	dc01      	bgt.n	8012798 <_printf_float+0x288>
 8012794:	464b      	mov	r3, r9
 8012796:	e794      	b.n	80126c2 <_printf_float+0x1b2>
 8012798:	2301      	movs	r3, #1
 801279a:	465a      	mov	r2, fp
 801279c:	4631      	mov	r1, r6
 801279e:	4628      	mov	r0, r5
 80127a0:	47b8      	blx	r7
 80127a2:	3001      	adds	r0, #1
 80127a4:	f43f af00 	beq.w	80125a8 <_printf_float+0x98>
 80127a8:	f10a 0a01 	add.w	sl, sl, #1
 80127ac:	e7ee      	b.n	801278c <_printf_float+0x27c>
 80127ae:	bf00      	nop
 80127b0:	ffffffff 	.word	0xffffffff
 80127b4:	7fefffff 	.word	0x7fefffff
 80127b8:	08015ed8 	.word	0x08015ed8
 80127bc:	08015edc 	.word	0x08015edc
 80127c0:	08015ee0 	.word	0x08015ee0
 80127c4:	08015ee4 	.word	0x08015ee4
 80127c8:	08015ee8 	.word	0x08015ee8
 80127cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80127ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80127d2:	4553      	cmp	r3, sl
 80127d4:	bfa8      	it	ge
 80127d6:	4653      	movge	r3, sl
 80127d8:	2b00      	cmp	r3, #0
 80127da:	4699      	mov	r9, r3
 80127dc:	dc37      	bgt.n	801284e <_printf_float+0x33e>
 80127de:	2300      	movs	r3, #0
 80127e0:	9307      	str	r3, [sp, #28]
 80127e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80127e6:	f104 021a 	add.w	r2, r4, #26
 80127ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80127ec:	9907      	ldr	r1, [sp, #28]
 80127ee:	9306      	str	r3, [sp, #24]
 80127f0:	eba3 0309 	sub.w	r3, r3, r9
 80127f4:	428b      	cmp	r3, r1
 80127f6:	dc31      	bgt.n	801285c <_printf_float+0x34c>
 80127f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127fa:	459a      	cmp	sl, r3
 80127fc:	dc3b      	bgt.n	8012876 <_printf_float+0x366>
 80127fe:	6823      	ldr	r3, [r4, #0]
 8012800:	07da      	lsls	r2, r3, #31
 8012802:	d438      	bmi.n	8012876 <_printf_float+0x366>
 8012804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012806:	ebaa 0903 	sub.w	r9, sl, r3
 801280a:	9b06      	ldr	r3, [sp, #24]
 801280c:	ebaa 0303 	sub.w	r3, sl, r3
 8012810:	4599      	cmp	r9, r3
 8012812:	bfa8      	it	ge
 8012814:	4699      	movge	r9, r3
 8012816:	f1b9 0f00 	cmp.w	r9, #0
 801281a:	dc34      	bgt.n	8012886 <_printf_float+0x376>
 801281c:	f04f 0800 	mov.w	r8, #0
 8012820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012824:	f104 0b1a 	add.w	fp, r4, #26
 8012828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801282a:	ebaa 0303 	sub.w	r3, sl, r3
 801282e:	eba3 0309 	sub.w	r3, r3, r9
 8012832:	4543      	cmp	r3, r8
 8012834:	f77f af76 	ble.w	8012724 <_printf_float+0x214>
 8012838:	2301      	movs	r3, #1
 801283a:	465a      	mov	r2, fp
 801283c:	4631      	mov	r1, r6
 801283e:	4628      	mov	r0, r5
 8012840:	47b8      	blx	r7
 8012842:	3001      	adds	r0, #1
 8012844:	f43f aeb0 	beq.w	80125a8 <_printf_float+0x98>
 8012848:	f108 0801 	add.w	r8, r8, #1
 801284c:	e7ec      	b.n	8012828 <_printf_float+0x318>
 801284e:	4642      	mov	r2, r8
 8012850:	4631      	mov	r1, r6
 8012852:	4628      	mov	r0, r5
 8012854:	47b8      	blx	r7
 8012856:	3001      	adds	r0, #1
 8012858:	d1c1      	bne.n	80127de <_printf_float+0x2ce>
 801285a:	e6a5      	b.n	80125a8 <_printf_float+0x98>
 801285c:	2301      	movs	r3, #1
 801285e:	4631      	mov	r1, r6
 8012860:	4628      	mov	r0, r5
 8012862:	9206      	str	r2, [sp, #24]
 8012864:	47b8      	blx	r7
 8012866:	3001      	adds	r0, #1
 8012868:	f43f ae9e 	beq.w	80125a8 <_printf_float+0x98>
 801286c:	9b07      	ldr	r3, [sp, #28]
 801286e:	9a06      	ldr	r2, [sp, #24]
 8012870:	3301      	adds	r3, #1
 8012872:	9307      	str	r3, [sp, #28]
 8012874:	e7b9      	b.n	80127ea <_printf_float+0x2da>
 8012876:	9b05      	ldr	r3, [sp, #20]
 8012878:	465a      	mov	r2, fp
 801287a:	4631      	mov	r1, r6
 801287c:	4628      	mov	r0, r5
 801287e:	47b8      	blx	r7
 8012880:	3001      	adds	r0, #1
 8012882:	d1bf      	bne.n	8012804 <_printf_float+0x2f4>
 8012884:	e690      	b.n	80125a8 <_printf_float+0x98>
 8012886:	9a06      	ldr	r2, [sp, #24]
 8012888:	464b      	mov	r3, r9
 801288a:	4442      	add	r2, r8
 801288c:	4631      	mov	r1, r6
 801288e:	4628      	mov	r0, r5
 8012890:	47b8      	blx	r7
 8012892:	3001      	adds	r0, #1
 8012894:	d1c2      	bne.n	801281c <_printf_float+0x30c>
 8012896:	e687      	b.n	80125a8 <_printf_float+0x98>
 8012898:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801289c:	f1b9 0f01 	cmp.w	r9, #1
 80128a0:	dc01      	bgt.n	80128a6 <_printf_float+0x396>
 80128a2:	07db      	lsls	r3, r3, #31
 80128a4:	d536      	bpl.n	8012914 <_printf_float+0x404>
 80128a6:	2301      	movs	r3, #1
 80128a8:	4642      	mov	r2, r8
 80128aa:	4631      	mov	r1, r6
 80128ac:	4628      	mov	r0, r5
 80128ae:	47b8      	blx	r7
 80128b0:	3001      	adds	r0, #1
 80128b2:	f43f ae79 	beq.w	80125a8 <_printf_float+0x98>
 80128b6:	9b05      	ldr	r3, [sp, #20]
 80128b8:	465a      	mov	r2, fp
 80128ba:	4631      	mov	r1, r6
 80128bc:	4628      	mov	r0, r5
 80128be:	47b8      	blx	r7
 80128c0:	3001      	adds	r0, #1
 80128c2:	f43f ae71 	beq.w	80125a8 <_printf_float+0x98>
 80128c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80128ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80128ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80128d6:	d018      	beq.n	801290a <_printf_float+0x3fa>
 80128d8:	464b      	mov	r3, r9
 80128da:	f108 0201 	add.w	r2, r8, #1
 80128de:	4631      	mov	r1, r6
 80128e0:	4628      	mov	r0, r5
 80128e2:	47b8      	blx	r7
 80128e4:	3001      	adds	r0, #1
 80128e6:	d10c      	bne.n	8012902 <_printf_float+0x3f2>
 80128e8:	e65e      	b.n	80125a8 <_printf_float+0x98>
 80128ea:	2301      	movs	r3, #1
 80128ec:	465a      	mov	r2, fp
 80128ee:	4631      	mov	r1, r6
 80128f0:	4628      	mov	r0, r5
 80128f2:	47b8      	blx	r7
 80128f4:	3001      	adds	r0, #1
 80128f6:	f43f ae57 	beq.w	80125a8 <_printf_float+0x98>
 80128fa:	f108 0801 	add.w	r8, r8, #1
 80128fe:	45c8      	cmp	r8, r9
 8012900:	dbf3      	blt.n	80128ea <_printf_float+0x3da>
 8012902:	4653      	mov	r3, sl
 8012904:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012908:	e6dc      	b.n	80126c4 <_printf_float+0x1b4>
 801290a:	f04f 0800 	mov.w	r8, #0
 801290e:	f104 0b1a 	add.w	fp, r4, #26
 8012912:	e7f4      	b.n	80128fe <_printf_float+0x3ee>
 8012914:	2301      	movs	r3, #1
 8012916:	4642      	mov	r2, r8
 8012918:	e7e1      	b.n	80128de <_printf_float+0x3ce>
 801291a:	2301      	movs	r3, #1
 801291c:	464a      	mov	r2, r9
 801291e:	4631      	mov	r1, r6
 8012920:	4628      	mov	r0, r5
 8012922:	47b8      	blx	r7
 8012924:	3001      	adds	r0, #1
 8012926:	f43f ae3f 	beq.w	80125a8 <_printf_float+0x98>
 801292a:	f108 0801 	add.w	r8, r8, #1
 801292e:	68e3      	ldr	r3, [r4, #12]
 8012930:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012932:	1a5b      	subs	r3, r3, r1
 8012934:	4543      	cmp	r3, r8
 8012936:	dcf0      	bgt.n	801291a <_printf_float+0x40a>
 8012938:	e6f8      	b.n	801272c <_printf_float+0x21c>
 801293a:	f04f 0800 	mov.w	r8, #0
 801293e:	f104 0919 	add.w	r9, r4, #25
 8012942:	e7f4      	b.n	801292e <_printf_float+0x41e>

08012944 <_printf_common>:
 8012944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012948:	4616      	mov	r6, r2
 801294a:	4698      	mov	r8, r3
 801294c:	688a      	ldr	r2, [r1, #8]
 801294e:	690b      	ldr	r3, [r1, #16]
 8012950:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012954:	4293      	cmp	r3, r2
 8012956:	bfb8      	it	lt
 8012958:	4613      	movlt	r3, r2
 801295a:	6033      	str	r3, [r6, #0]
 801295c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012960:	4607      	mov	r7, r0
 8012962:	460c      	mov	r4, r1
 8012964:	b10a      	cbz	r2, 801296a <_printf_common+0x26>
 8012966:	3301      	adds	r3, #1
 8012968:	6033      	str	r3, [r6, #0]
 801296a:	6823      	ldr	r3, [r4, #0]
 801296c:	0699      	lsls	r1, r3, #26
 801296e:	bf42      	ittt	mi
 8012970:	6833      	ldrmi	r3, [r6, #0]
 8012972:	3302      	addmi	r3, #2
 8012974:	6033      	strmi	r3, [r6, #0]
 8012976:	6825      	ldr	r5, [r4, #0]
 8012978:	f015 0506 	ands.w	r5, r5, #6
 801297c:	d106      	bne.n	801298c <_printf_common+0x48>
 801297e:	f104 0a19 	add.w	sl, r4, #25
 8012982:	68e3      	ldr	r3, [r4, #12]
 8012984:	6832      	ldr	r2, [r6, #0]
 8012986:	1a9b      	subs	r3, r3, r2
 8012988:	42ab      	cmp	r3, r5
 801298a:	dc26      	bgt.n	80129da <_printf_common+0x96>
 801298c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012990:	6822      	ldr	r2, [r4, #0]
 8012992:	3b00      	subs	r3, #0
 8012994:	bf18      	it	ne
 8012996:	2301      	movne	r3, #1
 8012998:	0692      	lsls	r2, r2, #26
 801299a:	d42b      	bmi.n	80129f4 <_printf_common+0xb0>
 801299c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80129a0:	4641      	mov	r1, r8
 80129a2:	4638      	mov	r0, r7
 80129a4:	47c8      	blx	r9
 80129a6:	3001      	adds	r0, #1
 80129a8:	d01e      	beq.n	80129e8 <_printf_common+0xa4>
 80129aa:	6823      	ldr	r3, [r4, #0]
 80129ac:	6922      	ldr	r2, [r4, #16]
 80129ae:	f003 0306 	and.w	r3, r3, #6
 80129b2:	2b04      	cmp	r3, #4
 80129b4:	bf02      	ittt	eq
 80129b6:	68e5      	ldreq	r5, [r4, #12]
 80129b8:	6833      	ldreq	r3, [r6, #0]
 80129ba:	1aed      	subeq	r5, r5, r3
 80129bc:	68a3      	ldr	r3, [r4, #8]
 80129be:	bf0c      	ite	eq
 80129c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129c4:	2500      	movne	r5, #0
 80129c6:	4293      	cmp	r3, r2
 80129c8:	bfc4      	itt	gt
 80129ca:	1a9b      	subgt	r3, r3, r2
 80129cc:	18ed      	addgt	r5, r5, r3
 80129ce:	2600      	movs	r6, #0
 80129d0:	341a      	adds	r4, #26
 80129d2:	42b5      	cmp	r5, r6
 80129d4:	d11a      	bne.n	8012a0c <_printf_common+0xc8>
 80129d6:	2000      	movs	r0, #0
 80129d8:	e008      	b.n	80129ec <_printf_common+0xa8>
 80129da:	2301      	movs	r3, #1
 80129dc:	4652      	mov	r2, sl
 80129de:	4641      	mov	r1, r8
 80129e0:	4638      	mov	r0, r7
 80129e2:	47c8      	blx	r9
 80129e4:	3001      	adds	r0, #1
 80129e6:	d103      	bne.n	80129f0 <_printf_common+0xac>
 80129e8:	f04f 30ff 	mov.w	r0, #4294967295
 80129ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129f0:	3501      	adds	r5, #1
 80129f2:	e7c6      	b.n	8012982 <_printf_common+0x3e>
 80129f4:	18e1      	adds	r1, r4, r3
 80129f6:	1c5a      	adds	r2, r3, #1
 80129f8:	2030      	movs	r0, #48	@ 0x30
 80129fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80129fe:	4422      	add	r2, r4
 8012a00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012a04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012a08:	3302      	adds	r3, #2
 8012a0a:	e7c7      	b.n	801299c <_printf_common+0x58>
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	4622      	mov	r2, r4
 8012a10:	4641      	mov	r1, r8
 8012a12:	4638      	mov	r0, r7
 8012a14:	47c8      	blx	r9
 8012a16:	3001      	adds	r0, #1
 8012a18:	d0e6      	beq.n	80129e8 <_printf_common+0xa4>
 8012a1a:	3601      	adds	r6, #1
 8012a1c:	e7d9      	b.n	80129d2 <_printf_common+0x8e>
	...

08012a20 <_printf_i>:
 8012a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a24:	7e0f      	ldrb	r7, [r1, #24]
 8012a26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a28:	2f78      	cmp	r7, #120	@ 0x78
 8012a2a:	4691      	mov	r9, r2
 8012a2c:	4680      	mov	r8, r0
 8012a2e:	460c      	mov	r4, r1
 8012a30:	469a      	mov	sl, r3
 8012a32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012a36:	d807      	bhi.n	8012a48 <_printf_i+0x28>
 8012a38:	2f62      	cmp	r7, #98	@ 0x62
 8012a3a:	d80a      	bhi.n	8012a52 <_printf_i+0x32>
 8012a3c:	2f00      	cmp	r7, #0
 8012a3e:	f000 80d2 	beq.w	8012be6 <_printf_i+0x1c6>
 8012a42:	2f58      	cmp	r7, #88	@ 0x58
 8012a44:	f000 80b9 	beq.w	8012bba <_printf_i+0x19a>
 8012a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012a50:	e03a      	b.n	8012ac8 <_printf_i+0xa8>
 8012a52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012a56:	2b15      	cmp	r3, #21
 8012a58:	d8f6      	bhi.n	8012a48 <_printf_i+0x28>
 8012a5a:	a101      	add	r1, pc, #4	@ (adr r1, 8012a60 <_printf_i+0x40>)
 8012a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a60:	08012ab9 	.word	0x08012ab9
 8012a64:	08012acd 	.word	0x08012acd
 8012a68:	08012a49 	.word	0x08012a49
 8012a6c:	08012a49 	.word	0x08012a49
 8012a70:	08012a49 	.word	0x08012a49
 8012a74:	08012a49 	.word	0x08012a49
 8012a78:	08012acd 	.word	0x08012acd
 8012a7c:	08012a49 	.word	0x08012a49
 8012a80:	08012a49 	.word	0x08012a49
 8012a84:	08012a49 	.word	0x08012a49
 8012a88:	08012a49 	.word	0x08012a49
 8012a8c:	08012bcd 	.word	0x08012bcd
 8012a90:	08012af7 	.word	0x08012af7
 8012a94:	08012b87 	.word	0x08012b87
 8012a98:	08012a49 	.word	0x08012a49
 8012a9c:	08012a49 	.word	0x08012a49
 8012aa0:	08012bef 	.word	0x08012bef
 8012aa4:	08012a49 	.word	0x08012a49
 8012aa8:	08012af7 	.word	0x08012af7
 8012aac:	08012a49 	.word	0x08012a49
 8012ab0:	08012a49 	.word	0x08012a49
 8012ab4:	08012b8f 	.word	0x08012b8f
 8012ab8:	6833      	ldr	r3, [r6, #0]
 8012aba:	1d1a      	adds	r2, r3, #4
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	6032      	str	r2, [r6, #0]
 8012ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012ac8:	2301      	movs	r3, #1
 8012aca:	e09d      	b.n	8012c08 <_printf_i+0x1e8>
 8012acc:	6833      	ldr	r3, [r6, #0]
 8012ace:	6820      	ldr	r0, [r4, #0]
 8012ad0:	1d19      	adds	r1, r3, #4
 8012ad2:	6031      	str	r1, [r6, #0]
 8012ad4:	0606      	lsls	r6, r0, #24
 8012ad6:	d501      	bpl.n	8012adc <_printf_i+0xbc>
 8012ad8:	681d      	ldr	r5, [r3, #0]
 8012ada:	e003      	b.n	8012ae4 <_printf_i+0xc4>
 8012adc:	0645      	lsls	r5, r0, #25
 8012ade:	d5fb      	bpl.n	8012ad8 <_printf_i+0xb8>
 8012ae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ae4:	2d00      	cmp	r5, #0
 8012ae6:	da03      	bge.n	8012af0 <_printf_i+0xd0>
 8012ae8:	232d      	movs	r3, #45	@ 0x2d
 8012aea:	426d      	negs	r5, r5
 8012aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012af0:	4859      	ldr	r0, [pc, #356]	@ (8012c58 <_printf_i+0x238>)
 8012af2:	230a      	movs	r3, #10
 8012af4:	e011      	b.n	8012b1a <_printf_i+0xfa>
 8012af6:	6821      	ldr	r1, [r4, #0]
 8012af8:	6833      	ldr	r3, [r6, #0]
 8012afa:	0608      	lsls	r0, r1, #24
 8012afc:	f853 5b04 	ldr.w	r5, [r3], #4
 8012b00:	d402      	bmi.n	8012b08 <_printf_i+0xe8>
 8012b02:	0649      	lsls	r1, r1, #25
 8012b04:	bf48      	it	mi
 8012b06:	b2ad      	uxthmi	r5, r5
 8012b08:	2f6f      	cmp	r7, #111	@ 0x6f
 8012b0a:	4853      	ldr	r0, [pc, #332]	@ (8012c58 <_printf_i+0x238>)
 8012b0c:	6033      	str	r3, [r6, #0]
 8012b0e:	bf14      	ite	ne
 8012b10:	230a      	movne	r3, #10
 8012b12:	2308      	moveq	r3, #8
 8012b14:	2100      	movs	r1, #0
 8012b16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012b1a:	6866      	ldr	r6, [r4, #4]
 8012b1c:	60a6      	str	r6, [r4, #8]
 8012b1e:	2e00      	cmp	r6, #0
 8012b20:	bfa2      	ittt	ge
 8012b22:	6821      	ldrge	r1, [r4, #0]
 8012b24:	f021 0104 	bicge.w	r1, r1, #4
 8012b28:	6021      	strge	r1, [r4, #0]
 8012b2a:	b90d      	cbnz	r5, 8012b30 <_printf_i+0x110>
 8012b2c:	2e00      	cmp	r6, #0
 8012b2e:	d04b      	beq.n	8012bc8 <_printf_i+0x1a8>
 8012b30:	4616      	mov	r6, r2
 8012b32:	fbb5 f1f3 	udiv	r1, r5, r3
 8012b36:	fb03 5711 	mls	r7, r3, r1, r5
 8012b3a:	5dc7      	ldrb	r7, [r0, r7]
 8012b3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012b40:	462f      	mov	r7, r5
 8012b42:	42bb      	cmp	r3, r7
 8012b44:	460d      	mov	r5, r1
 8012b46:	d9f4      	bls.n	8012b32 <_printf_i+0x112>
 8012b48:	2b08      	cmp	r3, #8
 8012b4a:	d10b      	bne.n	8012b64 <_printf_i+0x144>
 8012b4c:	6823      	ldr	r3, [r4, #0]
 8012b4e:	07df      	lsls	r7, r3, #31
 8012b50:	d508      	bpl.n	8012b64 <_printf_i+0x144>
 8012b52:	6923      	ldr	r3, [r4, #16]
 8012b54:	6861      	ldr	r1, [r4, #4]
 8012b56:	4299      	cmp	r1, r3
 8012b58:	bfde      	ittt	le
 8012b5a:	2330      	movle	r3, #48	@ 0x30
 8012b5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012b60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012b64:	1b92      	subs	r2, r2, r6
 8012b66:	6122      	str	r2, [r4, #16]
 8012b68:	f8cd a000 	str.w	sl, [sp]
 8012b6c:	464b      	mov	r3, r9
 8012b6e:	aa03      	add	r2, sp, #12
 8012b70:	4621      	mov	r1, r4
 8012b72:	4640      	mov	r0, r8
 8012b74:	f7ff fee6 	bl	8012944 <_printf_common>
 8012b78:	3001      	adds	r0, #1
 8012b7a:	d14a      	bne.n	8012c12 <_printf_i+0x1f2>
 8012b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b80:	b004      	add	sp, #16
 8012b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b86:	6823      	ldr	r3, [r4, #0]
 8012b88:	f043 0320 	orr.w	r3, r3, #32
 8012b8c:	6023      	str	r3, [r4, #0]
 8012b8e:	4833      	ldr	r0, [pc, #204]	@ (8012c5c <_printf_i+0x23c>)
 8012b90:	2778      	movs	r7, #120	@ 0x78
 8012b92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012b96:	6823      	ldr	r3, [r4, #0]
 8012b98:	6831      	ldr	r1, [r6, #0]
 8012b9a:	061f      	lsls	r7, r3, #24
 8012b9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012ba0:	d402      	bmi.n	8012ba8 <_printf_i+0x188>
 8012ba2:	065f      	lsls	r7, r3, #25
 8012ba4:	bf48      	it	mi
 8012ba6:	b2ad      	uxthmi	r5, r5
 8012ba8:	6031      	str	r1, [r6, #0]
 8012baa:	07d9      	lsls	r1, r3, #31
 8012bac:	bf44      	itt	mi
 8012bae:	f043 0320 	orrmi.w	r3, r3, #32
 8012bb2:	6023      	strmi	r3, [r4, #0]
 8012bb4:	b11d      	cbz	r5, 8012bbe <_printf_i+0x19e>
 8012bb6:	2310      	movs	r3, #16
 8012bb8:	e7ac      	b.n	8012b14 <_printf_i+0xf4>
 8012bba:	4827      	ldr	r0, [pc, #156]	@ (8012c58 <_printf_i+0x238>)
 8012bbc:	e7e9      	b.n	8012b92 <_printf_i+0x172>
 8012bbe:	6823      	ldr	r3, [r4, #0]
 8012bc0:	f023 0320 	bic.w	r3, r3, #32
 8012bc4:	6023      	str	r3, [r4, #0]
 8012bc6:	e7f6      	b.n	8012bb6 <_printf_i+0x196>
 8012bc8:	4616      	mov	r6, r2
 8012bca:	e7bd      	b.n	8012b48 <_printf_i+0x128>
 8012bcc:	6833      	ldr	r3, [r6, #0]
 8012bce:	6825      	ldr	r5, [r4, #0]
 8012bd0:	6961      	ldr	r1, [r4, #20]
 8012bd2:	1d18      	adds	r0, r3, #4
 8012bd4:	6030      	str	r0, [r6, #0]
 8012bd6:	062e      	lsls	r6, r5, #24
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	d501      	bpl.n	8012be0 <_printf_i+0x1c0>
 8012bdc:	6019      	str	r1, [r3, #0]
 8012bde:	e002      	b.n	8012be6 <_printf_i+0x1c6>
 8012be0:	0668      	lsls	r0, r5, #25
 8012be2:	d5fb      	bpl.n	8012bdc <_printf_i+0x1bc>
 8012be4:	8019      	strh	r1, [r3, #0]
 8012be6:	2300      	movs	r3, #0
 8012be8:	6123      	str	r3, [r4, #16]
 8012bea:	4616      	mov	r6, r2
 8012bec:	e7bc      	b.n	8012b68 <_printf_i+0x148>
 8012bee:	6833      	ldr	r3, [r6, #0]
 8012bf0:	1d1a      	adds	r2, r3, #4
 8012bf2:	6032      	str	r2, [r6, #0]
 8012bf4:	681e      	ldr	r6, [r3, #0]
 8012bf6:	6862      	ldr	r2, [r4, #4]
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	f7ed fb70 	bl	80002e0 <memchr>
 8012c00:	b108      	cbz	r0, 8012c06 <_printf_i+0x1e6>
 8012c02:	1b80      	subs	r0, r0, r6
 8012c04:	6060      	str	r0, [r4, #4]
 8012c06:	6863      	ldr	r3, [r4, #4]
 8012c08:	6123      	str	r3, [r4, #16]
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c10:	e7aa      	b.n	8012b68 <_printf_i+0x148>
 8012c12:	6923      	ldr	r3, [r4, #16]
 8012c14:	4632      	mov	r2, r6
 8012c16:	4649      	mov	r1, r9
 8012c18:	4640      	mov	r0, r8
 8012c1a:	47d0      	blx	sl
 8012c1c:	3001      	adds	r0, #1
 8012c1e:	d0ad      	beq.n	8012b7c <_printf_i+0x15c>
 8012c20:	6823      	ldr	r3, [r4, #0]
 8012c22:	079b      	lsls	r3, r3, #30
 8012c24:	d413      	bmi.n	8012c4e <_printf_i+0x22e>
 8012c26:	68e0      	ldr	r0, [r4, #12]
 8012c28:	9b03      	ldr	r3, [sp, #12]
 8012c2a:	4298      	cmp	r0, r3
 8012c2c:	bfb8      	it	lt
 8012c2e:	4618      	movlt	r0, r3
 8012c30:	e7a6      	b.n	8012b80 <_printf_i+0x160>
 8012c32:	2301      	movs	r3, #1
 8012c34:	4632      	mov	r2, r6
 8012c36:	4649      	mov	r1, r9
 8012c38:	4640      	mov	r0, r8
 8012c3a:	47d0      	blx	sl
 8012c3c:	3001      	adds	r0, #1
 8012c3e:	d09d      	beq.n	8012b7c <_printf_i+0x15c>
 8012c40:	3501      	adds	r5, #1
 8012c42:	68e3      	ldr	r3, [r4, #12]
 8012c44:	9903      	ldr	r1, [sp, #12]
 8012c46:	1a5b      	subs	r3, r3, r1
 8012c48:	42ab      	cmp	r3, r5
 8012c4a:	dcf2      	bgt.n	8012c32 <_printf_i+0x212>
 8012c4c:	e7eb      	b.n	8012c26 <_printf_i+0x206>
 8012c4e:	2500      	movs	r5, #0
 8012c50:	f104 0619 	add.w	r6, r4, #25
 8012c54:	e7f5      	b.n	8012c42 <_printf_i+0x222>
 8012c56:	bf00      	nop
 8012c58:	08015eea 	.word	0x08015eea
 8012c5c:	08015efb 	.word	0x08015efb

08012c60 <std>:
 8012c60:	2300      	movs	r3, #0
 8012c62:	b510      	push	{r4, lr}
 8012c64:	4604      	mov	r4, r0
 8012c66:	e9c0 3300 	strd	r3, r3, [r0]
 8012c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c6e:	6083      	str	r3, [r0, #8]
 8012c70:	8181      	strh	r1, [r0, #12]
 8012c72:	6643      	str	r3, [r0, #100]	@ 0x64
 8012c74:	81c2      	strh	r2, [r0, #14]
 8012c76:	6183      	str	r3, [r0, #24]
 8012c78:	4619      	mov	r1, r3
 8012c7a:	2208      	movs	r2, #8
 8012c7c:	305c      	adds	r0, #92	@ 0x5c
 8012c7e:	f000 f914 	bl	8012eaa <memset>
 8012c82:	4b0d      	ldr	r3, [pc, #52]	@ (8012cb8 <std+0x58>)
 8012c84:	6263      	str	r3, [r4, #36]	@ 0x24
 8012c86:	4b0d      	ldr	r3, [pc, #52]	@ (8012cbc <std+0x5c>)
 8012c88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8012cc0 <std+0x60>)
 8012c8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8012cc4 <std+0x64>)
 8012c90:	6323      	str	r3, [r4, #48]	@ 0x30
 8012c92:	4b0d      	ldr	r3, [pc, #52]	@ (8012cc8 <std+0x68>)
 8012c94:	6224      	str	r4, [r4, #32]
 8012c96:	429c      	cmp	r4, r3
 8012c98:	d006      	beq.n	8012ca8 <std+0x48>
 8012c9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012c9e:	4294      	cmp	r4, r2
 8012ca0:	d002      	beq.n	8012ca8 <std+0x48>
 8012ca2:	33d0      	adds	r3, #208	@ 0xd0
 8012ca4:	429c      	cmp	r4, r3
 8012ca6:	d105      	bne.n	8012cb4 <std+0x54>
 8012ca8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cb0:	f000 b988 	b.w	8012fc4 <__retarget_lock_init_recursive>
 8012cb4:	bd10      	pop	{r4, pc}
 8012cb6:	bf00      	nop
 8012cb8:	08012e25 	.word	0x08012e25
 8012cbc:	08012e47 	.word	0x08012e47
 8012cc0:	08012e7f 	.word	0x08012e7f
 8012cc4:	08012ea3 	.word	0x08012ea3
 8012cc8:	24002238 	.word	0x24002238

08012ccc <stdio_exit_handler>:
 8012ccc:	4a02      	ldr	r2, [pc, #8]	@ (8012cd8 <stdio_exit_handler+0xc>)
 8012cce:	4903      	ldr	r1, [pc, #12]	@ (8012cdc <stdio_exit_handler+0x10>)
 8012cd0:	4803      	ldr	r0, [pc, #12]	@ (8012ce0 <stdio_exit_handler+0x14>)
 8012cd2:	f000 b869 	b.w	8012da8 <_fwalk_sglue>
 8012cd6:	bf00      	nop
 8012cd8:	24000108 	.word	0x24000108
 8012cdc:	080146dd 	.word	0x080146dd
 8012ce0:	24000118 	.word	0x24000118

08012ce4 <cleanup_stdio>:
 8012ce4:	6841      	ldr	r1, [r0, #4]
 8012ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8012d18 <cleanup_stdio+0x34>)
 8012ce8:	4299      	cmp	r1, r3
 8012cea:	b510      	push	{r4, lr}
 8012cec:	4604      	mov	r4, r0
 8012cee:	d001      	beq.n	8012cf4 <cleanup_stdio+0x10>
 8012cf0:	f001 fcf4 	bl	80146dc <_fflush_r>
 8012cf4:	68a1      	ldr	r1, [r4, #8]
 8012cf6:	4b09      	ldr	r3, [pc, #36]	@ (8012d1c <cleanup_stdio+0x38>)
 8012cf8:	4299      	cmp	r1, r3
 8012cfa:	d002      	beq.n	8012d02 <cleanup_stdio+0x1e>
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f001 fced 	bl	80146dc <_fflush_r>
 8012d02:	68e1      	ldr	r1, [r4, #12]
 8012d04:	4b06      	ldr	r3, [pc, #24]	@ (8012d20 <cleanup_stdio+0x3c>)
 8012d06:	4299      	cmp	r1, r3
 8012d08:	d004      	beq.n	8012d14 <cleanup_stdio+0x30>
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d10:	f001 bce4 	b.w	80146dc <_fflush_r>
 8012d14:	bd10      	pop	{r4, pc}
 8012d16:	bf00      	nop
 8012d18:	24002238 	.word	0x24002238
 8012d1c:	240022a0 	.word	0x240022a0
 8012d20:	24002308 	.word	0x24002308

08012d24 <global_stdio_init.part.0>:
 8012d24:	b510      	push	{r4, lr}
 8012d26:	4b0b      	ldr	r3, [pc, #44]	@ (8012d54 <global_stdio_init.part.0+0x30>)
 8012d28:	4c0b      	ldr	r4, [pc, #44]	@ (8012d58 <global_stdio_init.part.0+0x34>)
 8012d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8012d5c <global_stdio_init.part.0+0x38>)
 8012d2c:	601a      	str	r2, [r3, #0]
 8012d2e:	4620      	mov	r0, r4
 8012d30:	2200      	movs	r2, #0
 8012d32:	2104      	movs	r1, #4
 8012d34:	f7ff ff94 	bl	8012c60 <std>
 8012d38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	2109      	movs	r1, #9
 8012d40:	f7ff ff8e 	bl	8012c60 <std>
 8012d44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012d48:	2202      	movs	r2, #2
 8012d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d4e:	2112      	movs	r1, #18
 8012d50:	f7ff bf86 	b.w	8012c60 <std>
 8012d54:	24002370 	.word	0x24002370
 8012d58:	24002238 	.word	0x24002238
 8012d5c:	08012ccd 	.word	0x08012ccd

08012d60 <__sfp_lock_acquire>:
 8012d60:	4801      	ldr	r0, [pc, #4]	@ (8012d68 <__sfp_lock_acquire+0x8>)
 8012d62:	f000 b930 	b.w	8012fc6 <__retarget_lock_acquire_recursive>
 8012d66:	bf00      	nop
 8012d68:	24002379 	.word	0x24002379

08012d6c <__sfp_lock_release>:
 8012d6c:	4801      	ldr	r0, [pc, #4]	@ (8012d74 <__sfp_lock_release+0x8>)
 8012d6e:	f000 b92b 	b.w	8012fc8 <__retarget_lock_release_recursive>
 8012d72:	bf00      	nop
 8012d74:	24002379 	.word	0x24002379

08012d78 <__sinit>:
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	f7ff fff0 	bl	8012d60 <__sfp_lock_acquire>
 8012d80:	6a23      	ldr	r3, [r4, #32]
 8012d82:	b11b      	cbz	r3, 8012d8c <__sinit+0x14>
 8012d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d88:	f7ff bff0 	b.w	8012d6c <__sfp_lock_release>
 8012d8c:	4b04      	ldr	r3, [pc, #16]	@ (8012da0 <__sinit+0x28>)
 8012d8e:	6223      	str	r3, [r4, #32]
 8012d90:	4b04      	ldr	r3, [pc, #16]	@ (8012da4 <__sinit+0x2c>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d1f5      	bne.n	8012d84 <__sinit+0xc>
 8012d98:	f7ff ffc4 	bl	8012d24 <global_stdio_init.part.0>
 8012d9c:	e7f2      	b.n	8012d84 <__sinit+0xc>
 8012d9e:	bf00      	nop
 8012da0:	08012ce5 	.word	0x08012ce5
 8012da4:	24002370 	.word	0x24002370

08012da8 <_fwalk_sglue>:
 8012da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dac:	4607      	mov	r7, r0
 8012dae:	4688      	mov	r8, r1
 8012db0:	4614      	mov	r4, r2
 8012db2:	2600      	movs	r6, #0
 8012db4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012db8:	f1b9 0901 	subs.w	r9, r9, #1
 8012dbc:	d505      	bpl.n	8012dca <_fwalk_sglue+0x22>
 8012dbe:	6824      	ldr	r4, [r4, #0]
 8012dc0:	2c00      	cmp	r4, #0
 8012dc2:	d1f7      	bne.n	8012db4 <_fwalk_sglue+0xc>
 8012dc4:	4630      	mov	r0, r6
 8012dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dca:	89ab      	ldrh	r3, [r5, #12]
 8012dcc:	2b01      	cmp	r3, #1
 8012dce:	d907      	bls.n	8012de0 <_fwalk_sglue+0x38>
 8012dd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	d003      	beq.n	8012de0 <_fwalk_sglue+0x38>
 8012dd8:	4629      	mov	r1, r5
 8012dda:	4638      	mov	r0, r7
 8012ddc:	47c0      	blx	r8
 8012dde:	4306      	orrs	r6, r0
 8012de0:	3568      	adds	r5, #104	@ 0x68
 8012de2:	e7e9      	b.n	8012db8 <_fwalk_sglue+0x10>

08012de4 <siprintf>:
 8012de4:	b40e      	push	{r1, r2, r3}
 8012de6:	b500      	push	{lr}
 8012de8:	b09c      	sub	sp, #112	@ 0x70
 8012dea:	ab1d      	add	r3, sp, #116	@ 0x74
 8012dec:	9002      	str	r0, [sp, #8]
 8012dee:	9006      	str	r0, [sp, #24]
 8012df0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012df4:	4809      	ldr	r0, [pc, #36]	@ (8012e1c <siprintf+0x38>)
 8012df6:	9107      	str	r1, [sp, #28]
 8012df8:	9104      	str	r1, [sp, #16]
 8012dfa:	4909      	ldr	r1, [pc, #36]	@ (8012e20 <siprintf+0x3c>)
 8012dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e00:	9105      	str	r1, [sp, #20]
 8012e02:	6800      	ldr	r0, [r0, #0]
 8012e04:	9301      	str	r3, [sp, #4]
 8012e06:	a902      	add	r1, sp, #8
 8012e08:	f001 fae8 	bl	80143dc <_svfiprintf_r>
 8012e0c:	9b02      	ldr	r3, [sp, #8]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	701a      	strb	r2, [r3, #0]
 8012e12:	b01c      	add	sp, #112	@ 0x70
 8012e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e18:	b003      	add	sp, #12
 8012e1a:	4770      	bx	lr
 8012e1c:	24000114 	.word	0x24000114
 8012e20:	ffff0208 	.word	0xffff0208

08012e24 <__sread>:
 8012e24:	b510      	push	{r4, lr}
 8012e26:	460c      	mov	r4, r1
 8012e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e2c:	f000 f86c 	bl	8012f08 <_read_r>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	bfab      	itete	ge
 8012e34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012e36:	89a3      	ldrhlt	r3, [r4, #12]
 8012e38:	181b      	addge	r3, r3, r0
 8012e3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012e3e:	bfac      	ite	ge
 8012e40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012e42:	81a3      	strhlt	r3, [r4, #12]
 8012e44:	bd10      	pop	{r4, pc}

08012e46 <__swrite>:
 8012e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e4a:	461f      	mov	r7, r3
 8012e4c:	898b      	ldrh	r3, [r1, #12]
 8012e4e:	05db      	lsls	r3, r3, #23
 8012e50:	4605      	mov	r5, r0
 8012e52:	460c      	mov	r4, r1
 8012e54:	4616      	mov	r6, r2
 8012e56:	d505      	bpl.n	8012e64 <__swrite+0x1e>
 8012e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e5c:	2302      	movs	r3, #2
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f000 f840 	bl	8012ee4 <_lseek_r>
 8012e64:	89a3      	ldrh	r3, [r4, #12]
 8012e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012e6e:	81a3      	strh	r3, [r4, #12]
 8012e70:	4632      	mov	r2, r6
 8012e72:	463b      	mov	r3, r7
 8012e74:	4628      	mov	r0, r5
 8012e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e7a:	f000 b867 	b.w	8012f4c <_write_r>

08012e7e <__sseek>:
 8012e7e:	b510      	push	{r4, lr}
 8012e80:	460c      	mov	r4, r1
 8012e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e86:	f000 f82d 	bl	8012ee4 <_lseek_r>
 8012e8a:	1c43      	adds	r3, r0, #1
 8012e8c:	89a3      	ldrh	r3, [r4, #12]
 8012e8e:	bf15      	itete	ne
 8012e90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012e92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012e96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012e9a:	81a3      	strheq	r3, [r4, #12]
 8012e9c:	bf18      	it	ne
 8012e9e:	81a3      	strhne	r3, [r4, #12]
 8012ea0:	bd10      	pop	{r4, pc}

08012ea2 <__sclose>:
 8012ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ea6:	f000 b80d 	b.w	8012ec4 <_close_r>

08012eaa <memset>:
 8012eaa:	4402      	add	r2, r0
 8012eac:	4603      	mov	r3, r0
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	d100      	bne.n	8012eb4 <memset+0xa>
 8012eb2:	4770      	bx	lr
 8012eb4:	f803 1b01 	strb.w	r1, [r3], #1
 8012eb8:	e7f9      	b.n	8012eae <memset+0x4>
	...

08012ebc <_localeconv_r>:
 8012ebc:	4800      	ldr	r0, [pc, #0]	@ (8012ec0 <_localeconv_r+0x4>)
 8012ebe:	4770      	bx	lr
 8012ec0:	24000254 	.word	0x24000254

08012ec4 <_close_r>:
 8012ec4:	b538      	push	{r3, r4, r5, lr}
 8012ec6:	4d06      	ldr	r5, [pc, #24]	@ (8012ee0 <_close_r+0x1c>)
 8012ec8:	2300      	movs	r3, #0
 8012eca:	4604      	mov	r4, r0
 8012ecc:	4608      	mov	r0, r1
 8012ece:	602b      	str	r3, [r5, #0]
 8012ed0:	f7ee fb16 	bl	8001500 <_close>
 8012ed4:	1c43      	adds	r3, r0, #1
 8012ed6:	d102      	bne.n	8012ede <_close_r+0x1a>
 8012ed8:	682b      	ldr	r3, [r5, #0]
 8012eda:	b103      	cbz	r3, 8012ede <_close_r+0x1a>
 8012edc:	6023      	str	r3, [r4, #0]
 8012ede:	bd38      	pop	{r3, r4, r5, pc}
 8012ee0:	24002374 	.word	0x24002374

08012ee4 <_lseek_r>:
 8012ee4:	b538      	push	{r3, r4, r5, lr}
 8012ee6:	4d07      	ldr	r5, [pc, #28]	@ (8012f04 <_lseek_r+0x20>)
 8012ee8:	4604      	mov	r4, r0
 8012eea:	4608      	mov	r0, r1
 8012eec:	4611      	mov	r1, r2
 8012eee:	2200      	movs	r2, #0
 8012ef0:	602a      	str	r2, [r5, #0]
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	f7ee fb2b 	bl	800154e <_lseek>
 8012ef8:	1c43      	adds	r3, r0, #1
 8012efa:	d102      	bne.n	8012f02 <_lseek_r+0x1e>
 8012efc:	682b      	ldr	r3, [r5, #0]
 8012efe:	b103      	cbz	r3, 8012f02 <_lseek_r+0x1e>
 8012f00:	6023      	str	r3, [r4, #0]
 8012f02:	bd38      	pop	{r3, r4, r5, pc}
 8012f04:	24002374 	.word	0x24002374

08012f08 <_read_r>:
 8012f08:	b538      	push	{r3, r4, r5, lr}
 8012f0a:	4d07      	ldr	r5, [pc, #28]	@ (8012f28 <_read_r+0x20>)
 8012f0c:	4604      	mov	r4, r0
 8012f0e:	4608      	mov	r0, r1
 8012f10:	4611      	mov	r1, r2
 8012f12:	2200      	movs	r2, #0
 8012f14:	602a      	str	r2, [r5, #0]
 8012f16:	461a      	mov	r2, r3
 8012f18:	f7ee fab9 	bl	800148e <_read>
 8012f1c:	1c43      	adds	r3, r0, #1
 8012f1e:	d102      	bne.n	8012f26 <_read_r+0x1e>
 8012f20:	682b      	ldr	r3, [r5, #0]
 8012f22:	b103      	cbz	r3, 8012f26 <_read_r+0x1e>
 8012f24:	6023      	str	r3, [r4, #0]
 8012f26:	bd38      	pop	{r3, r4, r5, pc}
 8012f28:	24002374 	.word	0x24002374

08012f2c <_sbrk_r>:
 8012f2c:	b538      	push	{r3, r4, r5, lr}
 8012f2e:	4d06      	ldr	r5, [pc, #24]	@ (8012f48 <_sbrk_r+0x1c>)
 8012f30:	2300      	movs	r3, #0
 8012f32:	4604      	mov	r4, r0
 8012f34:	4608      	mov	r0, r1
 8012f36:	602b      	str	r3, [r5, #0]
 8012f38:	f7ee fb16 	bl	8001568 <_sbrk>
 8012f3c:	1c43      	adds	r3, r0, #1
 8012f3e:	d102      	bne.n	8012f46 <_sbrk_r+0x1a>
 8012f40:	682b      	ldr	r3, [r5, #0]
 8012f42:	b103      	cbz	r3, 8012f46 <_sbrk_r+0x1a>
 8012f44:	6023      	str	r3, [r4, #0]
 8012f46:	bd38      	pop	{r3, r4, r5, pc}
 8012f48:	24002374 	.word	0x24002374

08012f4c <_write_r>:
 8012f4c:	b538      	push	{r3, r4, r5, lr}
 8012f4e:	4d07      	ldr	r5, [pc, #28]	@ (8012f6c <_write_r+0x20>)
 8012f50:	4604      	mov	r4, r0
 8012f52:	4608      	mov	r0, r1
 8012f54:	4611      	mov	r1, r2
 8012f56:	2200      	movs	r2, #0
 8012f58:	602a      	str	r2, [r5, #0]
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	f7ee fab4 	bl	80014c8 <_write>
 8012f60:	1c43      	adds	r3, r0, #1
 8012f62:	d102      	bne.n	8012f6a <_write_r+0x1e>
 8012f64:	682b      	ldr	r3, [r5, #0]
 8012f66:	b103      	cbz	r3, 8012f6a <_write_r+0x1e>
 8012f68:	6023      	str	r3, [r4, #0]
 8012f6a:	bd38      	pop	{r3, r4, r5, pc}
 8012f6c:	24002374 	.word	0x24002374

08012f70 <__errno>:
 8012f70:	4b01      	ldr	r3, [pc, #4]	@ (8012f78 <__errno+0x8>)
 8012f72:	6818      	ldr	r0, [r3, #0]
 8012f74:	4770      	bx	lr
 8012f76:	bf00      	nop
 8012f78:	24000114 	.word	0x24000114

08012f7c <__libc_init_array>:
 8012f7c:	b570      	push	{r4, r5, r6, lr}
 8012f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8012fb4 <__libc_init_array+0x38>)
 8012f80:	4c0d      	ldr	r4, [pc, #52]	@ (8012fb8 <__libc_init_array+0x3c>)
 8012f82:	1b64      	subs	r4, r4, r5
 8012f84:	10a4      	asrs	r4, r4, #2
 8012f86:	2600      	movs	r6, #0
 8012f88:	42a6      	cmp	r6, r4
 8012f8a:	d109      	bne.n	8012fa0 <__libc_init_array+0x24>
 8012f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8012fbc <__libc_init_array+0x40>)
 8012f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8012fc0 <__libc_init_array+0x44>)
 8012f90:	f002 f862 	bl	8015058 <_init>
 8012f94:	1b64      	subs	r4, r4, r5
 8012f96:	10a4      	asrs	r4, r4, #2
 8012f98:	2600      	movs	r6, #0
 8012f9a:	42a6      	cmp	r6, r4
 8012f9c:	d105      	bne.n	8012faa <__libc_init_array+0x2e>
 8012f9e:	bd70      	pop	{r4, r5, r6, pc}
 8012fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fa4:	4798      	blx	r3
 8012fa6:	3601      	adds	r6, #1
 8012fa8:	e7ee      	b.n	8012f88 <__libc_init_array+0xc>
 8012faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fae:	4798      	blx	r3
 8012fb0:	3601      	adds	r6, #1
 8012fb2:	e7f2      	b.n	8012f9a <__libc_init_array+0x1e>
 8012fb4:	08016260 	.word	0x08016260
 8012fb8:	08016260 	.word	0x08016260
 8012fbc:	08016260 	.word	0x08016260
 8012fc0:	08016264 	.word	0x08016264

08012fc4 <__retarget_lock_init_recursive>:
 8012fc4:	4770      	bx	lr

08012fc6 <__retarget_lock_acquire_recursive>:
 8012fc6:	4770      	bx	lr

08012fc8 <__retarget_lock_release_recursive>:
 8012fc8:	4770      	bx	lr

08012fca <quorem>:
 8012fca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fce:	6903      	ldr	r3, [r0, #16]
 8012fd0:	690c      	ldr	r4, [r1, #16]
 8012fd2:	42a3      	cmp	r3, r4
 8012fd4:	4607      	mov	r7, r0
 8012fd6:	db7e      	blt.n	80130d6 <quorem+0x10c>
 8012fd8:	3c01      	subs	r4, #1
 8012fda:	f101 0814 	add.w	r8, r1, #20
 8012fde:	00a3      	lsls	r3, r4, #2
 8012fe0:	f100 0514 	add.w	r5, r0, #20
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012fea:	9301      	str	r3, [sp, #4]
 8012fec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012ff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012ffc:	fbb2 f6f3 	udiv	r6, r2, r3
 8013000:	d32e      	bcc.n	8013060 <quorem+0x96>
 8013002:	f04f 0a00 	mov.w	sl, #0
 8013006:	46c4      	mov	ip, r8
 8013008:	46ae      	mov	lr, r5
 801300a:	46d3      	mov	fp, sl
 801300c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013010:	b298      	uxth	r0, r3
 8013012:	fb06 a000 	mla	r0, r6, r0, sl
 8013016:	0c02      	lsrs	r2, r0, #16
 8013018:	0c1b      	lsrs	r3, r3, #16
 801301a:	fb06 2303 	mla	r3, r6, r3, r2
 801301e:	f8de 2000 	ldr.w	r2, [lr]
 8013022:	b280      	uxth	r0, r0
 8013024:	b292      	uxth	r2, r2
 8013026:	1a12      	subs	r2, r2, r0
 8013028:	445a      	add	r2, fp
 801302a:	f8de 0000 	ldr.w	r0, [lr]
 801302e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013032:	b29b      	uxth	r3, r3
 8013034:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013038:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801303c:	b292      	uxth	r2, r2
 801303e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013042:	45e1      	cmp	r9, ip
 8013044:	f84e 2b04 	str.w	r2, [lr], #4
 8013048:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801304c:	d2de      	bcs.n	801300c <quorem+0x42>
 801304e:	9b00      	ldr	r3, [sp, #0]
 8013050:	58eb      	ldr	r3, [r5, r3]
 8013052:	b92b      	cbnz	r3, 8013060 <quorem+0x96>
 8013054:	9b01      	ldr	r3, [sp, #4]
 8013056:	3b04      	subs	r3, #4
 8013058:	429d      	cmp	r5, r3
 801305a:	461a      	mov	r2, r3
 801305c:	d32f      	bcc.n	80130be <quorem+0xf4>
 801305e:	613c      	str	r4, [r7, #16]
 8013060:	4638      	mov	r0, r7
 8013062:	f001 f857 	bl	8014114 <__mcmp>
 8013066:	2800      	cmp	r0, #0
 8013068:	db25      	blt.n	80130b6 <quorem+0xec>
 801306a:	4629      	mov	r1, r5
 801306c:	2000      	movs	r0, #0
 801306e:	f858 2b04 	ldr.w	r2, [r8], #4
 8013072:	f8d1 c000 	ldr.w	ip, [r1]
 8013076:	fa1f fe82 	uxth.w	lr, r2
 801307a:	fa1f f38c 	uxth.w	r3, ip
 801307e:	eba3 030e 	sub.w	r3, r3, lr
 8013082:	4403      	add	r3, r0
 8013084:	0c12      	lsrs	r2, r2, #16
 8013086:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801308a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801308e:	b29b      	uxth	r3, r3
 8013090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013094:	45c1      	cmp	r9, r8
 8013096:	f841 3b04 	str.w	r3, [r1], #4
 801309a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801309e:	d2e6      	bcs.n	801306e <quorem+0xa4>
 80130a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80130a8:	b922      	cbnz	r2, 80130b4 <quorem+0xea>
 80130aa:	3b04      	subs	r3, #4
 80130ac:	429d      	cmp	r5, r3
 80130ae:	461a      	mov	r2, r3
 80130b0:	d30b      	bcc.n	80130ca <quorem+0x100>
 80130b2:	613c      	str	r4, [r7, #16]
 80130b4:	3601      	adds	r6, #1
 80130b6:	4630      	mov	r0, r6
 80130b8:	b003      	add	sp, #12
 80130ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130be:	6812      	ldr	r2, [r2, #0]
 80130c0:	3b04      	subs	r3, #4
 80130c2:	2a00      	cmp	r2, #0
 80130c4:	d1cb      	bne.n	801305e <quorem+0x94>
 80130c6:	3c01      	subs	r4, #1
 80130c8:	e7c6      	b.n	8013058 <quorem+0x8e>
 80130ca:	6812      	ldr	r2, [r2, #0]
 80130cc:	3b04      	subs	r3, #4
 80130ce:	2a00      	cmp	r2, #0
 80130d0:	d1ef      	bne.n	80130b2 <quorem+0xe8>
 80130d2:	3c01      	subs	r4, #1
 80130d4:	e7ea      	b.n	80130ac <quorem+0xe2>
 80130d6:	2000      	movs	r0, #0
 80130d8:	e7ee      	b.n	80130b8 <quorem+0xee>
 80130da:	0000      	movs	r0, r0
 80130dc:	0000      	movs	r0, r0
	...

080130e0 <_dtoa_r>:
 80130e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e4:	ed2d 8b02 	vpush	{d8}
 80130e8:	69c7      	ldr	r7, [r0, #28]
 80130ea:	b091      	sub	sp, #68	@ 0x44
 80130ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80130f0:	ec55 4b10 	vmov	r4, r5, d0
 80130f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80130f6:	9107      	str	r1, [sp, #28]
 80130f8:	4681      	mov	r9, r0
 80130fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80130fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80130fe:	b97f      	cbnz	r7, 8013120 <_dtoa_r+0x40>
 8013100:	2010      	movs	r0, #16
 8013102:	f7ff f8bf 	bl	8012284 <malloc>
 8013106:	4602      	mov	r2, r0
 8013108:	f8c9 001c 	str.w	r0, [r9, #28]
 801310c:	b920      	cbnz	r0, 8013118 <_dtoa_r+0x38>
 801310e:	4ba0      	ldr	r3, [pc, #640]	@ (8013390 <_dtoa_r+0x2b0>)
 8013110:	21ef      	movs	r1, #239	@ 0xef
 8013112:	48a0      	ldr	r0, [pc, #640]	@ (8013394 <_dtoa_r+0x2b4>)
 8013114:	f001 fb32 	bl	801477c <__assert_func>
 8013118:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801311c:	6007      	str	r7, [r0, #0]
 801311e:	60c7      	str	r7, [r0, #12]
 8013120:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013124:	6819      	ldr	r1, [r3, #0]
 8013126:	b159      	cbz	r1, 8013140 <_dtoa_r+0x60>
 8013128:	685a      	ldr	r2, [r3, #4]
 801312a:	604a      	str	r2, [r1, #4]
 801312c:	2301      	movs	r3, #1
 801312e:	4093      	lsls	r3, r2
 8013130:	608b      	str	r3, [r1, #8]
 8013132:	4648      	mov	r0, r9
 8013134:	f000 fdb4 	bl	8013ca0 <_Bfree>
 8013138:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801313c:	2200      	movs	r2, #0
 801313e:	601a      	str	r2, [r3, #0]
 8013140:	1e2b      	subs	r3, r5, #0
 8013142:	bfbb      	ittet	lt
 8013144:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013148:	9303      	strlt	r3, [sp, #12]
 801314a:	2300      	movge	r3, #0
 801314c:	2201      	movlt	r2, #1
 801314e:	bfac      	ite	ge
 8013150:	6033      	strge	r3, [r6, #0]
 8013152:	6032      	strlt	r2, [r6, #0]
 8013154:	4b90      	ldr	r3, [pc, #576]	@ (8013398 <_dtoa_r+0x2b8>)
 8013156:	9e03      	ldr	r6, [sp, #12]
 8013158:	43b3      	bics	r3, r6
 801315a:	d110      	bne.n	801317e <_dtoa_r+0x9e>
 801315c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801315e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013162:	6013      	str	r3, [r2, #0]
 8013164:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013168:	4323      	orrs	r3, r4
 801316a:	f000 84de 	beq.w	8013b2a <_dtoa_r+0xa4a>
 801316e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013170:	4f8a      	ldr	r7, [pc, #552]	@ (801339c <_dtoa_r+0x2bc>)
 8013172:	2b00      	cmp	r3, #0
 8013174:	f000 84e0 	beq.w	8013b38 <_dtoa_r+0xa58>
 8013178:	1cfb      	adds	r3, r7, #3
 801317a:	f000 bcdb 	b.w	8013b34 <_dtoa_r+0xa54>
 801317e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013182:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801318a:	d10a      	bne.n	80131a2 <_dtoa_r+0xc2>
 801318c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801318e:	2301      	movs	r3, #1
 8013190:	6013      	str	r3, [r2, #0]
 8013192:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013194:	b113      	cbz	r3, 801319c <_dtoa_r+0xbc>
 8013196:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013198:	4b81      	ldr	r3, [pc, #516]	@ (80133a0 <_dtoa_r+0x2c0>)
 801319a:	6013      	str	r3, [r2, #0]
 801319c:	4f81      	ldr	r7, [pc, #516]	@ (80133a4 <_dtoa_r+0x2c4>)
 801319e:	f000 bccb 	b.w	8013b38 <_dtoa_r+0xa58>
 80131a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80131a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80131a6:	4648      	mov	r0, r9
 80131a8:	eeb0 0b48 	vmov.f64	d0, d8
 80131ac:	f001 f862 	bl	8014274 <__d2b>
 80131b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80131b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131b6:	9001      	str	r0, [sp, #4]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d045      	beq.n	8013248 <_dtoa_r+0x168>
 80131bc:	eeb0 7b48 	vmov.f64	d7, d8
 80131c0:	ee18 1a90 	vmov	r1, s17
 80131c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80131c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80131cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80131d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80131d4:	2500      	movs	r5, #0
 80131d6:	ee07 1a90 	vmov	s15, r1
 80131da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80131de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013378 <_dtoa_r+0x298>
 80131e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80131e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013380 <_dtoa_r+0x2a0>
 80131ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80131ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013388 <_dtoa_r+0x2a8>
 80131f2:	ee07 3a90 	vmov	s15, r3
 80131f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80131fa:	eeb0 7b46 	vmov.f64	d7, d6
 80131fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013202:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013206:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801320a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801320e:	ee16 8a90 	vmov	r8, s13
 8013212:	d508      	bpl.n	8013226 <_dtoa_r+0x146>
 8013214:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013218:	eeb4 6b47 	vcmp.f64	d6, d7
 801321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013220:	bf18      	it	ne
 8013222:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013226:	f1b8 0f16 	cmp.w	r8, #22
 801322a:	d82b      	bhi.n	8013284 <_dtoa_r+0x1a4>
 801322c:	495e      	ldr	r1, [pc, #376]	@ (80133a8 <_dtoa_r+0x2c8>)
 801322e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013232:	ed91 7b00 	vldr	d7, [r1]
 8013236:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801323e:	d501      	bpl.n	8013244 <_dtoa_r+0x164>
 8013240:	f108 38ff 	add.w	r8, r8, #4294967295
 8013244:	2100      	movs	r1, #0
 8013246:	e01e      	b.n	8013286 <_dtoa_r+0x1a6>
 8013248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801324a:	4413      	add	r3, r2
 801324c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013250:	2920      	cmp	r1, #32
 8013252:	bfc1      	itttt	gt
 8013254:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013258:	408e      	lslgt	r6, r1
 801325a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801325e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013262:	bfd6      	itet	le
 8013264:	f1c1 0120 	rsble	r1, r1, #32
 8013268:	4331      	orrgt	r1, r6
 801326a:	fa04 f101 	lslle.w	r1, r4, r1
 801326e:	ee07 1a90 	vmov	s15, r1
 8013272:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013276:	3b01      	subs	r3, #1
 8013278:	ee17 1a90 	vmov	r1, s15
 801327c:	2501      	movs	r5, #1
 801327e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013282:	e7a8      	b.n	80131d6 <_dtoa_r+0xf6>
 8013284:	2101      	movs	r1, #1
 8013286:	1ad2      	subs	r2, r2, r3
 8013288:	1e53      	subs	r3, r2, #1
 801328a:	9306      	str	r3, [sp, #24]
 801328c:	bf45      	ittet	mi
 801328e:	f1c2 0301 	rsbmi	r3, r2, #1
 8013292:	9305      	strmi	r3, [sp, #20]
 8013294:	2300      	movpl	r3, #0
 8013296:	2300      	movmi	r3, #0
 8013298:	bf4c      	ite	mi
 801329a:	9306      	strmi	r3, [sp, #24]
 801329c:	9305      	strpl	r3, [sp, #20]
 801329e:	f1b8 0f00 	cmp.w	r8, #0
 80132a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80132a4:	db18      	blt.n	80132d8 <_dtoa_r+0x1f8>
 80132a6:	9b06      	ldr	r3, [sp, #24]
 80132a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80132ac:	4443      	add	r3, r8
 80132ae:	9306      	str	r3, [sp, #24]
 80132b0:	2300      	movs	r3, #0
 80132b2:	9a07      	ldr	r2, [sp, #28]
 80132b4:	2a09      	cmp	r2, #9
 80132b6:	d849      	bhi.n	801334c <_dtoa_r+0x26c>
 80132b8:	2a05      	cmp	r2, #5
 80132ba:	bfc4      	itt	gt
 80132bc:	3a04      	subgt	r2, #4
 80132be:	9207      	strgt	r2, [sp, #28]
 80132c0:	9a07      	ldr	r2, [sp, #28]
 80132c2:	f1a2 0202 	sub.w	r2, r2, #2
 80132c6:	bfcc      	ite	gt
 80132c8:	2400      	movgt	r4, #0
 80132ca:	2401      	movle	r4, #1
 80132cc:	2a03      	cmp	r2, #3
 80132ce:	d848      	bhi.n	8013362 <_dtoa_r+0x282>
 80132d0:	e8df f002 	tbb	[pc, r2]
 80132d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80132d8:	9b05      	ldr	r3, [sp, #20]
 80132da:	2200      	movs	r2, #0
 80132dc:	eba3 0308 	sub.w	r3, r3, r8
 80132e0:	9305      	str	r3, [sp, #20]
 80132e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80132e4:	f1c8 0300 	rsb	r3, r8, #0
 80132e8:	e7e3      	b.n	80132b2 <_dtoa_r+0x1d2>
 80132ea:	2200      	movs	r2, #0
 80132ec:	9208      	str	r2, [sp, #32]
 80132ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132f0:	2a00      	cmp	r2, #0
 80132f2:	dc39      	bgt.n	8013368 <_dtoa_r+0x288>
 80132f4:	f04f 0b01 	mov.w	fp, #1
 80132f8:	46da      	mov	sl, fp
 80132fa:	465a      	mov	r2, fp
 80132fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013300:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013304:	2100      	movs	r1, #0
 8013306:	2004      	movs	r0, #4
 8013308:	f100 0614 	add.w	r6, r0, #20
 801330c:	4296      	cmp	r6, r2
 801330e:	d930      	bls.n	8013372 <_dtoa_r+0x292>
 8013310:	6079      	str	r1, [r7, #4]
 8013312:	4648      	mov	r0, r9
 8013314:	9304      	str	r3, [sp, #16]
 8013316:	f000 fc83 	bl	8013c20 <_Balloc>
 801331a:	9b04      	ldr	r3, [sp, #16]
 801331c:	4607      	mov	r7, r0
 801331e:	2800      	cmp	r0, #0
 8013320:	d146      	bne.n	80133b0 <_dtoa_r+0x2d0>
 8013322:	4b22      	ldr	r3, [pc, #136]	@ (80133ac <_dtoa_r+0x2cc>)
 8013324:	4602      	mov	r2, r0
 8013326:	f240 11af 	movw	r1, #431	@ 0x1af
 801332a:	e6f2      	b.n	8013112 <_dtoa_r+0x32>
 801332c:	2201      	movs	r2, #1
 801332e:	e7dd      	b.n	80132ec <_dtoa_r+0x20c>
 8013330:	2200      	movs	r2, #0
 8013332:	9208      	str	r2, [sp, #32]
 8013334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013336:	eb08 0b02 	add.w	fp, r8, r2
 801333a:	f10b 0a01 	add.w	sl, fp, #1
 801333e:	4652      	mov	r2, sl
 8013340:	2a01      	cmp	r2, #1
 8013342:	bfb8      	it	lt
 8013344:	2201      	movlt	r2, #1
 8013346:	e7db      	b.n	8013300 <_dtoa_r+0x220>
 8013348:	2201      	movs	r2, #1
 801334a:	e7f2      	b.n	8013332 <_dtoa_r+0x252>
 801334c:	2401      	movs	r4, #1
 801334e:	2200      	movs	r2, #0
 8013350:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013354:	f04f 3bff 	mov.w	fp, #4294967295
 8013358:	2100      	movs	r1, #0
 801335a:	46da      	mov	sl, fp
 801335c:	2212      	movs	r2, #18
 801335e:	9109      	str	r1, [sp, #36]	@ 0x24
 8013360:	e7ce      	b.n	8013300 <_dtoa_r+0x220>
 8013362:	2201      	movs	r2, #1
 8013364:	9208      	str	r2, [sp, #32]
 8013366:	e7f5      	b.n	8013354 <_dtoa_r+0x274>
 8013368:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801336c:	46da      	mov	sl, fp
 801336e:	465a      	mov	r2, fp
 8013370:	e7c6      	b.n	8013300 <_dtoa_r+0x220>
 8013372:	3101      	adds	r1, #1
 8013374:	0040      	lsls	r0, r0, #1
 8013376:	e7c7      	b.n	8013308 <_dtoa_r+0x228>
 8013378:	636f4361 	.word	0x636f4361
 801337c:	3fd287a7 	.word	0x3fd287a7
 8013380:	8b60c8b3 	.word	0x8b60c8b3
 8013384:	3fc68a28 	.word	0x3fc68a28
 8013388:	509f79fb 	.word	0x509f79fb
 801338c:	3fd34413 	.word	0x3fd34413
 8013390:	08015f19 	.word	0x08015f19
 8013394:	08015f30 	.word	0x08015f30
 8013398:	7ff00000 	.word	0x7ff00000
 801339c:	08015f15 	.word	0x08015f15
 80133a0:	08015ee9 	.word	0x08015ee9
 80133a4:	08015ee8 	.word	0x08015ee8
 80133a8:	08016028 	.word	0x08016028
 80133ac:	08015f88 	.word	0x08015f88
 80133b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80133b4:	f1ba 0f0e 	cmp.w	sl, #14
 80133b8:	6010      	str	r0, [r2, #0]
 80133ba:	d86f      	bhi.n	801349c <_dtoa_r+0x3bc>
 80133bc:	2c00      	cmp	r4, #0
 80133be:	d06d      	beq.n	801349c <_dtoa_r+0x3bc>
 80133c0:	f1b8 0f00 	cmp.w	r8, #0
 80133c4:	f340 80c2 	ble.w	801354c <_dtoa_r+0x46c>
 80133c8:	4aca      	ldr	r2, [pc, #808]	@ (80136f4 <_dtoa_r+0x614>)
 80133ca:	f008 010f 	and.w	r1, r8, #15
 80133ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80133d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80133d6:	ed92 7b00 	vldr	d7, [r2]
 80133da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80133de:	f000 80a9 	beq.w	8013534 <_dtoa_r+0x454>
 80133e2:	4ac5      	ldr	r2, [pc, #788]	@ (80136f8 <_dtoa_r+0x618>)
 80133e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80133e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80133ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80133f0:	f001 010f 	and.w	r1, r1, #15
 80133f4:	2203      	movs	r2, #3
 80133f6:	48c0      	ldr	r0, [pc, #768]	@ (80136f8 <_dtoa_r+0x618>)
 80133f8:	2900      	cmp	r1, #0
 80133fa:	f040 809d 	bne.w	8013538 <_dtoa_r+0x458>
 80133fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013402:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013406:	ed8d 7b02 	vstr	d7, [sp, #8]
 801340a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801340c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013410:	2900      	cmp	r1, #0
 8013412:	f000 80c1 	beq.w	8013598 <_dtoa_r+0x4b8>
 8013416:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801341a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013422:	f140 80b9 	bpl.w	8013598 <_dtoa_r+0x4b8>
 8013426:	f1ba 0f00 	cmp.w	sl, #0
 801342a:	f000 80b5 	beq.w	8013598 <_dtoa_r+0x4b8>
 801342e:	f1bb 0f00 	cmp.w	fp, #0
 8013432:	dd31      	ble.n	8013498 <_dtoa_r+0x3b8>
 8013434:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013438:	ee27 7b06 	vmul.f64	d7, d7, d6
 801343c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013440:	f108 31ff 	add.w	r1, r8, #4294967295
 8013444:	9104      	str	r1, [sp, #16]
 8013446:	3201      	adds	r2, #1
 8013448:	465c      	mov	r4, fp
 801344a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801344e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013452:	ee07 2a90 	vmov	s15, r2
 8013456:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801345a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801345e:	ee15 2a90 	vmov	r2, s11
 8013462:	ec51 0b15 	vmov	r0, r1, d5
 8013466:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801346a:	2c00      	cmp	r4, #0
 801346c:	f040 8098 	bne.w	80135a0 <_dtoa_r+0x4c0>
 8013470:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013474:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013478:	ec41 0b17 	vmov	d7, r0, r1
 801347c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013484:	f300 8261 	bgt.w	801394a <_dtoa_r+0x86a>
 8013488:	eeb1 7b47 	vneg.f64	d7, d7
 801348c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013494:	f100 80f5 	bmi.w	8013682 <_dtoa_r+0x5a2>
 8013498:	ed8d 8b02 	vstr	d8, [sp, #8]
 801349c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801349e:	2a00      	cmp	r2, #0
 80134a0:	f2c0 812c 	blt.w	80136fc <_dtoa_r+0x61c>
 80134a4:	f1b8 0f0e 	cmp.w	r8, #14
 80134a8:	f300 8128 	bgt.w	80136fc <_dtoa_r+0x61c>
 80134ac:	4b91      	ldr	r3, [pc, #580]	@ (80136f4 <_dtoa_r+0x614>)
 80134ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80134b2:	ed93 6b00 	vldr	d6, [r3]
 80134b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	da03      	bge.n	80134c4 <_dtoa_r+0x3e4>
 80134bc:	f1ba 0f00 	cmp.w	sl, #0
 80134c0:	f340 80d2 	ble.w	8013668 <_dtoa_r+0x588>
 80134c4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80134c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80134cc:	463e      	mov	r6, r7
 80134ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80134d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80134d6:	ee15 3a10 	vmov	r3, s10
 80134da:	3330      	adds	r3, #48	@ 0x30
 80134dc:	f806 3b01 	strb.w	r3, [r6], #1
 80134e0:	1bf3      	subs	r3, r6, r7
 80134e2:	459a      	cmp	sl, r3
 80134e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80134e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80134ec:	f040 80f8 	bne.w	80136e0 <_dtoa_r+0x600>
 80134f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80134f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80134f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134fc:	f300 80dd 	bgt.w	80136ba <_dtoa_r+0x5da>
 8013500:	eeb4 7b46 	vcmp.f64	d7, d6
 8013504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013508:	d104      	bne.n	8013514 <_dtoa_r+0x434>
 801350a:	ee15 3a10 	vmov	r3, s10
 801350e:	07db      	lsls	r3, r3, #31
 8013510:	f100 80d3 	bmi.w	80136ba <_dtoa_r+0x5da>
 8013514:	9901      	ldr	r1, [sp, #4]
 8013516:	4648      	mov	r0, r9
 8013518:	f000 fbc2 	bl	8013ca0 <_Bfree>
 801351c:	2300      	movs	r3, #0
 801351e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013520:	7033      	strb	r3, [r6, #0]
 8013522:	f108 0301 	add.w	r3, r8, #1
 8013526:	6013      	str	r3, [r2, #0]
 8013528:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801352a:	2b00      	cmp	r3, #0
 801352c:	f000 8304 	beq.w	8013b38 <_dtoa_r+0xa58>
 8013530:	601e      	str	r6, [r3, #0]
 8013532:	e301      	b.n	8013b38 <_dtoa_r+0xa58>
 8013534:	2202      	movs	r2, #2
 8013536:	e75e      	b.n	80133f6 <_dtoa_r+0x316>
 8013538:	07cc      	lsls	r4, r1, #31
 801353a:	d504      	bpl.n	8013546 <_dtoa_r+0x466>
 801353c:	ed90 6b00 	vldr	d6, [r0]
 8013540:	3201      	adds	r2, #1
 8013542:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013546:	1049      	asrs	r1, r1, #1
 8013548:	3008      	adds	r0, #8
 801354a:	e755      	b.n	80133f8 <_dtoa_r+0x318>
 801354c:	d022      	beq.n	8013594 <_dtoa_r+0x4b4>
 801354e:	f1c8 0100 	rsb	r1, r8, #0
 8013552:	4a68      	ldr	r2, [pc, #416]	@ (80136f4 <_dtoa_r+0x614>)
 8013554:	f001 000f 	and.w	r0, r1, #15
 8013558:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801355c:	ed92 7b00 	vldr	d7, [r2]
 8013560:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013564:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013568:	4863      	ldr	r0, [pc, #396]	@ (80136f8 <_dtoa_r+0x618>)
 801356a:	1109      	asrs	r1, r1, #4
 801356c:	2400      	movs	r4, #0
 801356e:	2202      	movs	r2, #2
 8013570:	b929      	cbnz	r1, 801357e <_dtoa_r+0x49e>
 8013572:	2c00      	cmp	r4, #0
 8013574:	f43f af49 	beq.w	801340a <_dtoa_r+0x32a>
 8013578:	ed8d 7b02 	vstr	d7, [sp, #8]
 801357c:	e745      	b.n	801340a <_dtoa_r+0x32a>
 801357e:	07ce      	lsls	r6, r1, #31
 8013580:	d505      	bpl.n	801358e <_dtoa_r+0x4ae>
 8013582:	ed90 6b00 	vldr	d6, [r0]
 8013586:	3201      	adds	r2, #1
 8013588:	2401      	movs	r4, #1
 801358a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801358e:	1049      	asrs	r1, r1, #1
 8013590:	3008      	adds	r0, #8
 8013592:	e7ed      	b.n	8013570 <_dtoa_r+0x490>
 8013594:	2202      	movs	r2, #2
 8013596:	e738      	b.n	801340a <_dtoa_r+0x32a>
 8013598:	f8cd 8010 	str.w	r8, [sp, #16]
 801359c:	4654      	mov	r4, sl
 801359e:	e754      	b.n	801344a <_dtoa_r+0x36a>
 80135a0:	4a54      	ldr	r2, [pc, #336]	@ (80136f4 <_dtoa_r+0x614>)
 80135a2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80135a6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80135aa:	9a08      	ldr	r2, [sp, #32]
 80135ac:	ec41 0b17 	vmov	d7, r0, r1
 80135b0:	443c      	add	r4, r7
 80135b2:	b34a      	cbz	r2, 8013608 <_dtoa_r+0x528>
 80135b4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80135b8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80135bc:	463e      	mov	r6, r7
 80135be:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80135c2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80135c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80135ca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80135ce:	ee14 2a90 	vmov	r2, s9
 80135d2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80135d6:	3230      	adds	r2, #48	@ 0x30
 80135d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80135dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80135e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e4:	f806 2b01 	strb.w	r2, [r6], #1
 80135e8:	d438      	bmi.n	801365c <_dtoa_r+0x57c>
 80135ea:	ee32 5b46 	vsub.f64	d5, d2, d6
 80135ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80135f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f6:	d462      	bmi.n	80136be <_dtoa_r+0x5de>
 80135f8:	42a6      	cmp	r6, r4
 80135fa:	f43f af4d 	beq.w	8013498 <_dtoa_r+0x3b8>
 80135fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013602:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013606:	e7e0      	b.n	80135ca <_dtoa_r+0x4ea>
 8013608:	4621      	mov	r1, r4
 801360a:	463e      	mov	r6, r7
 801360c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013610:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013614:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013618:	ee14 2a90 	vmov	r2, s9
 801361c:	3230      	adds	r2, #48	@ 0x30
 801361e:	f806 2b01 	strb.w	r2, [r6], #1
 8013622:	42a6      	cmp	r6, r4
 8013624:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013628:	ee36 6b45 	vsub.f64	d6, d6, d5
 801362c:	d119      	bne.n	8013662 <_dtoa_r+0x582>
 801362e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013632:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013636:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801363a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801363e:	dc3e      	bgt.n	80136be <_dtoa_r+0x5de>
 8013640:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013644:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801364c:	f57f af24 	bpl.w	8013498 <_dtoa_r+0x3b8>
 8013650:	460e      	mov	r6, r1
 8013652:	3901      	subs	r1, #1
 8013654:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013658:	2b30      	cmp	r3, #48	@ 0x30
 801365a:	d0f9      	beq.n	8013650 <_dtoa_r+0x570>
 801365c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013660:	e758      	b.n	8013514 <_dtoa_r+0x434>
 8013662:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013666:	e7d5      	b.n	8013614 <_dtoa_r+0x534>
 8013668:	d10b      	bne.n	8013682 <_dtoa_r+0x5a2>
 801366a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801366e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013672:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013676:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801367e:	f2c0 8161 	blt.w	8013944 <_dtoa_r+0x864>
 8013682:	2400      	movs	r4, #0
 8013684:	4625      	mov	r5, r4
 8013686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013688:	43db      	mvns	r3, r3
 801368a:	9304      	str	r3, [sp, #16]
 801368c:	463e      	mov	r6, r7
 801368e:	f04f 0800 	mov.w	r8, #0
 8013692:	4621      	mov	r1, r4
 8013694:	4648      	mov	r0, r9
 8013696:	f000 fb03 	bl	8013ca0 <_Bfree>
 801369a:	2d00      	cmp	r5, #0
 801369c:	d0de      	beq.n	801365c <_dtoa_r+0x57c>
 801369e:	f1b8 0f00 	cmp.w	r8, #0
 80136a2:	d005      	beq.n	80136b0 <_dtoa_r+0x5d0>
 80136a4:	45a8      	cmp	r8, r5
 80136a6:	d003      	beq.n	80136b0 <_dtoa_r+0x5d0>
 80136a8:	4641      	mov	r1, r8
 80136aa:	4648      	mov	r0, r9
 80136ac:	f000 faf8 	bl	8013ca0 <_Bfree>
 80136b0:	4629      	mov	r1, r5
 80136b2:	4648      	mov	r0, r9
 80136b4:	f000 faf4 	bl	8013ca0 <_Bfree>
 80136b8:	e7d0      	b.n	801365c <_dtoa_r+0x57c>
 80136ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80136be:	4633      	mov	r3, r6
 80136c0:	461e      	mov	r6, r3
 80136c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80136c6:	2a39      	cmp	r2, #57	@ 0x39
 80136c8:	d106      	bne.n	80136d8 <_dtoa_r+0x5f8>
 80136ca:	429f      	cmp	r7, r3
 80136cc:	d1f8      	bne.n	80136c0 <_dtoa_r+0x5e0>
 80136ce:	9a04      	ldr	r2, [sp, #16]
 80136d0:	3201      	adds	r2, #1
 80136d2:	9204      	str	r2, [sp, #16]
 80136d4:	2230      	movs	r2, #48	@ 0x30
 80136d6:	703a      	strb	r2, [r7, #0]
 80136d8:	781a      	ldrb	r2, [r3, #0]
 80136da:	3201      	adds	r2, #1
 80136dc:	701a      	strb	r2, [r3, #0]
 80136de:	e7bd      	b.n	801365c <_dtoa_r+0x57c>
 80136e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80136e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80136e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ec:	f47f aeef 	bne.w	80134ce <_dtoa_r+0x3ee>
 80136f0:	e710      	b.n	8013514 <_dtoa_r+0x434>
 80136f2:	bf00      	nop
 80136f4:	08016028 	.word	0x08016028
 80136f8:	08016000 	.word	0x08016000
 80136fc:	9908      	ldr	r1, [sp, #32]
 80136fe:	2900      	cmp	r1, #0
 8013700:	f000 80e3 	beq.w	80138ca <_dtoa_r+0x7ea>
 8013704:	9907      	ldr	r1, [sp, #28]
 8013706:	2901      	cmp	r1, #1
 8013708:	f300 80c8 	bgt.w	801389c <_dtoa_r+0x7bc>
 801370c:	2d00      	cmp	r5, #0
 801370e:	f000 80c1 	beq.w	8013894 <_dtoa_r+0x7b4>
 8013712:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013716:	9e05      	ldr	r6, [sp, #20]
 8013718:	461c      	mov	r4, r3
 801371a:	9304      	str	r3, [sp, #16]
 801371c:	9b05      	ldr	r3, [sp, #20]
 801371e:	4413      	add	r3, r2
 8013720:	9305      	str	r3, [sp, #20]
 8013722:	9b06      	ldr	r3, [sp, #24]
 8013724:	2101      	movs	r1, #1
 8013726:	4413      	add	r3, r2
 8013728:	4648      	mov	r0, r9
 801372a:	9306      	str	r3, [sp, #24]
 801372c:	f000 fb6c 	bl	8013e08 <__i2b>
 8013730:	9b04      	ldr	r3, [sp, #16]
 8013732:	4605      	mov	r5, r0
 8013734:	b166      	cbz	r6, 8013750 <_dtoa_r+0x670>
 8013736:	9a06      	ldr	r2, [sp, #24]
 8013738:	2a00      	cmp	r2, #0
 801373a:	dd09      	ble.n	8013750 <_dtoa_r+0x670>
 801373c:	42b2      	cmp	r2, r6
 801373e:	9905      	ldr	r1, [sp, #20]
 8013740:	bfa8      	it	ge
 8013742:	4632      	movge	r2, r6
 8013744:	1a89      	subs	r1, r1, r2
 8013746:	9105      	str	r1, [sp, #20]
 8013748:	9906      	ldr	r1, [sp, #24]
 801374a:	1ab6      	subs	r6, r6, r2
 801374c:	1a8a      	subs	r2, r1, r2
 801374e:	9206      	str	r2, [sp, #24]
 8013750:	b1fb      	cbz	r3, 8013792 <_dtoa_r+0x6b2>
 8013752:	9a08      	ldr	r2, [sp, #32]
 8013754:	2a00      	cmp	r2, #0
 8013756:	f000 80bc 	beq.w	80138d2 <_dtoa_r+0x7f2>
 801375a:	b19c      	cbz	r4, 8013784 <_dtoa_r+0x6a4>
 801375c:	4629      	mov	r1, r5
 801375e:	4622      	mov	r2, r4
 8013760:	4648      	mov	r0, r9
 8013762:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013764:	f000 fc10 	bl	8013f88 <__pow5mult>
 8013768:	9a01      	ldr	r2, [sp, #4]
 801376a:	4601      	mov	r1, r0
 801376c:	4605      	mov	r5, r0
 801376e:	4648      	mov	r0, r9
 8013770:	f000 fb60 	bl	8013e34 <__multiply>
 8013774:	9901      	ldr	r1, [sp, #4]
 8013776:	9004      	str	r0, [sp, #16]
 8013778:	4648      	mov	r0, r9
 801377a:	f000 fa91 	bl	8013ca0 <_Bfree>
 801377e:	9a04      	ldr	r2, [sp, #16]
 8013780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013782:	9201      	str	r2, [sp, #4]
 8013784:	1b1a      	subs	r2, r3, r4
 8013786:	d004      	beq.n	8013792 <_dtoa_r+0x6b2>
 8013788:	9901      	ldr	r1, [sp, #4]
 801378a:	4648      	mov	r0, r9
 801378c:	f000 fbfc 	bl	8013f88 <__pow5mult>
 8013790:	9001      	str	r0, [sp, #4]
 8013792:	2101      	movs	r1, #1
 8013794:	4648      	mov	r0, r9
 8013796:	f000 fb37 	bl	8013e08 <__i2b>
 801379a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801379c:	4604      	mov	r4, r0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f000 81d0 	beq.w	8013b44 <_dtoa_r+0xa64>
 80137a4:	461a      	mov	r2, r3
 80137a6:	4601      	mov	r1, r0
 80137a8:	4648      	mov	r0, r9
 80137aa:	f000 fbed 	bl	8013f88 <__pow5mult>
 80137ae:	9b07      	ldr	r3, [sp, #28]
 80137b0:	2b01      	cmp	r3, #1
 80137b2:	4604      	mov	r4, r0
 80137b4:	f300 8095 	bgt.w	80138e2 <_dtoa_r+0x802>
 80137b8:	9b02      	ldr	r3, [sp, #8]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	f040 808b 	bne.w	80138d6 <_dtoa_r+0x7f6>
 80137c0:	9b03      	ldr	r3, [sp, #12]
 80137c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80137c6:	2a00      	cmp	r2, #0
 80137c8:	f040 8087 	bne.w	80138da <_dtoa_r+0x7fa>
 80137cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80137d0:	0d12      	lsrs	r2, r2, #20
 80137d2:	0512      	lsls	r2, r2, #20
 80137d4:	2a00      	cmp	r2, #0
 80137d6:	f000 8082 	beq.w	80138de <_dtoa_r+0x7fe>
 80137da:	9b05      	ldr	r3, [sp, #20]
 80137dc:	3301      	adds	r3, #1
 80137de:	9305      	str	r3, [sp, #20]
 80137e0:	9b06      	ldr	r3, [sp, #24]
 80137e2:	3301      	adds	r3, #1
 80137e4:	9306      	str	r3, [sp, #24]
 80137e6:	2301      	movs	r3, #1
 80137e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	f000 81af 	beq.w	8013b50 <_dtoa_r+0xa70>
 80137f2:	6922      	ldr	r2, [r4, #16]
 80137f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80137f8:	6910      	ldr	r0, [r2, #16]
 80137fa:	f000 fab9 	bl	8013d70 <__hi0bits>
 80137fe:	f1c0 0020 	rsb	r0, r0, #32
 8013802:	9b06      	ldr	r3, [sp, #24]
 8013804:	4418      	add	r0, r3
 8013806:	f010 001f 	ands.w	r0, r0, #31
 801380a:	d076      	beq.n	80138fa <_dtoa_r+0x81a>
 801380c:	f1c0 0220 	rsb	r2, r0, #32
 8013810:	2a04      	cmp	r2, #4
 8013812:	dd69      	ble.n	80138e8 <_dtoa_r+0x808>
 8013814:	9b05      	ldr	r3, [sp, #20]
 8013816:	f1c0 001c 	rsb	r0, r0, #28
 801381a:	4403      	add	r3, r0
 801381c:	9305      	str	r3, [sp, #20]
 801381e:	9b06      	ldr	r3, [sp, #24]
 8013820:	4406      	add	r6, r0
 8013822:	4403      	add	r3, r0
 8013824:	9306      	str	r3, [sp, #24]
 8013826:	9b05      	ldr	r3, [sp, #20]
 8013828:	2b00      	cmp	r3, #0
 801382a:	dd05      	ble.n	8013838 <_dtoa_r+0x758>
 801382c:	9901      	ldr	r1, [sp, #4]
 801382e:	461a      	mov	r2, r3
 8013830:	4648      	mov	r0, r9
 8013832:	f000 fc03 	bl	801403c <__lshift>
 8013836:	9001      	str	r0, [sp, #4]
 8013838:	9b06      	ldr	r3, [sp, #24]
 801383a:	2b00      	cmp	r3, #0
 801383c:	dd05      	ble.n	801384a <_dtoa_r+0x76a>
 801383e:	4621      	mov	r1, r4
 8013840:	461a      	mov	r2, r3
 8013842:	4648      	mov	r0, r9
 8013844:	f000 fbfa 	bl	801403c <__lshift>
 8013848:	4604      	mov	r4, r0
 801384a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801384c:	2b00      	cmp	r3, #0
 801384e:	d056      	beq.n	80138fe <_dtoa_r+0x81e>
 8013850:	9801      	ldr	r0, [sp, #4]
 8013852:	4621      	mov	r1, r4
 8013854:	f000 fc5e 	bl	8014114 <__mcmp>
 8013858:	2800      	cmp	r0, #0
 801385a:	da50      	bge.n	80138fe <_dtoa_r+0x81e>
 801385c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013860:	9304      	str	r3, [sp, #16]
 8013862:	9901      	ldr	r1, [sp, #4]
 8013864:	2300      	movs	r3, #0
 8013866:	220a      	movs	r2, #10
 8013868:	4648      	mov	r0, r9
 801386a:	f000 fa3b 	bl	8013ce4 <__multadd>
 801386e:	9b08      	ldr	r3, [sp, #32]
 8013870:	9001      	str	r0, [sp, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	f000 816e 	beq.w	8013b54 <_dtoa_r+0xa74>
 8013878:	4629      	mov	r1, r5
 801387a:	2300      	movs	r3, #0
 801387c:	220a      	movs	r2, #10
 801387e:	4648      	mov	r0, r9
 8013880:	f000 fa30 	bl	8013ce4 <__multadd>
 8013884:	f1bb 0f00 	cmp.w	fp, #0
 8013888:	4605      	mov	r5, r0
 801388a:	dc64      	bgt.n	8013956 <_dtoa_r+0x876>
 801388c:	9b07      	ldr	r3, [sp, #28]
 801388e:	2b02      	cmp	r3, #2
 8013890:	dc3e      	bgt.n	8013910 <_dtoa_r+0x830>
 8013892:	e060      	b.n	8013956 <_dtoa_r+0x876>
 8013894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013896:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801389a:	e73c      	b.n	8013716 <_dtoa_r+0x636>
 801389c:	f10a 34ff 	add.w	r4, sl, #4294967295
 80138a0:	42a3      	cmp	r3, r4
 80138a2:	bfbf      	itttt	lt
 80138a4:	1ae2      	sublt	r2, r4, r3
 80138a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80138a8:	189b      	addlt	r3, r3, r2
 80138aa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80138ac:	bfae      	itee	ge
 80138ae:	1b1c      	subge	r4, r3, r4
 80138b0:	4623      	movlt	r3, r4
 80138b2:	2400      	movlt	r4, #0
 80138b4:	f1ba 0f00 	cmp.w	sl, #0
 80138b8:	bfb5      	itete	lt
 80138ba:	9a05      	ldrlt	r2, [sp, #20]
 80138bc:	9e05      	ldrge	r6, [sp, #20]
 80138be:	eba2 060a 	sublt.w	r6, r2, sl
 80138c2:	4652      	movge	r2, sl
 80138c4:	bfb8      	it	lt
 80138c6:	2200      	movlt	r2, #0
 80138c8:	e727      	b.n	801371a <_dtoa_r+0x63a>
 80138ca:	9e05      	ldr	r6, [sp, #20]
 80138cc:	9d08      	ldr	r5, [sp, #32]
 80138ce:	461c      	mov	r4, r3
 80138d0:	e730      	b.n	8013734 <_dtoa_r+0x654>
 80138d2:	461a      	mov	r2, r3
 80138d4:	e758      	b.n	8013788 <_dtoa_r+0x6a8>
 80138d6:	2300      	movs	r3, #0
 80138d8:	e786      	b.n	80137e8 <_dtoa_r+0x708>
 80138da:	9b02      	ldr	r3, [sp, #8]
 80138dc:	e784      	b.n	80137e8 <_dtoa_r+0x708>
 80138de:	920b      	str	r2, [sp, #44]	@ 0x2c
 80138e0:	e783      	b.n	80137ea <_dtoa_r+0x70a>
 80138e2:	2300      	movs	r3, #0
 80138e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138e6:	e784      	b.n	80137f2 <_dtoa_r+0x712>
 80138e8:	d09d      	beq.n	8013826 <_dtoa_r+0x746>
 80138ea:	9b05      	ldr	r3, [sp, #20]
 80138ec:	321c      	adds	r2, #28
 80138ee:	4413      	add	r3, r2
 80138f0:	9305      	str	r3, [sp, #20]
 80138f2:	9b06      	ldr	r3, [sp, #24]
 80138f4:	4416      	add	r6, r2
 80138f6:	4413      	add	r3, r2
 80138f8:	e794      	b.n	8013824 <_dtoa_r+0x744>
 80138fa:	4602      	mov	r2, r0
 80138fc:	e7f5      	b.n	80138ea <_dtoa_r+0x80a>
 80138fe:	f1ba 0f00 	cmp.w	sl, #0
 8013902:	f8cd 8010 	str.w	r8, [sp, #16]
 8013906:	46d3      	mov	fp, sl
 8013908:	dc21      	bgt.n	801394e <_dtoa_r+0x86e>
 801390a:	9b07      	ldr	r3, [sp, #28]
 801390c:	2b02      	cmp	r3, #2
 801390e:	dd1e      	ble.n	801394e <_dtoa_r+0x86e>
 8013910:	f1bb 0f00 	cmp.w	fp, #0
 8013914:	f47f aeb7 	bne.w	8013686 <_dtoa_r+0x5a6>
 8013918:	4621      	mov	r1, r4
 801391a:	465b      	mov	r3, fp
 801391c:	2205      	movs	r2, #5
 801391e:	4648      	mov	r0, r9
 8013920:	f000 f9e0 	bl	8013ce4 <__multadd>
 8013924:	4601      	mov	r1, r0
 8013926:	4604      	mov	r4, r0
 8013928:	9801      	ldr	r0, [sp, #4]
 801392a:	f000 fbf3 	bl	8014114 <__mcmp>
 801392e:	2800      	cmp	r0, #0
 8013930:	f77f aea9 	ble.w	8013686 <_dtoa_r+0x5a6>
 8013934:	463e      	mov	r6, r7
 8013936:	2331      	movs	r3, #49	@ 0x31
 8013938:	f806 3b01 	strb.w	r3, [r6], #1
 801393c:	9b04      	ldr	r3, [sp, #16]
 801393e:	3301      	adds	r3, #1
 8013940:	9304      	str	r3, [sp, #16]
 8013942:	e6a4      	b.n	801368e <_dtoa_r+0x5ae>
 8013944:	f8cd 8010 	str.w	r8, [sp, #16]
 8013948:	4654      	mov	r4, sl
 801394a:	4625      	mov	r5, r4
 801394c:	e7f2      	b.n	8013934 <_dtoa_r+0x854>
 801394e:	9b08      	ldr	r3, [sp, #32]
 8013950:	2b00      	cmp	r3, #0
 8013952:	f000 8103 	beq.w	8013b5c <_dtoa_r+0xa7c>
 8013956:	2e00      	cmp	r6, #0
 8013958:	dd05      	ble.n	8013966 <_dtoa_r+0x886>
 801395a:	4629      	mov	r1, r5
 801395c:	4632      	mov	r2, r6
 801395e:	4648      	mov	r0, r9
 8013960:	f000 fb6c 	bl	801403c <__lshift>
 8013964:	4605      	mov	r5, r0
 8013966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013968:	2b00      	cmp	r3, #0
 801396a:	d058      	beq.n	8013a1e <_dtoa_r+0x93e>
 801396c:	6869      	ldr	r1, [r5, #4]
 801396e:	4648      	mov	r0, r9
 8013970:	f000 f956 	bl	8013c20 <_Balloc>
 8013974:	4606      	mov	r6, r0
 8013976:	b928      	cbnz	r0, 8013984 <_dtoa_r+0x8a4>
 8013978:	4b82      	ldr	r3, [pc, #520]	@ (8013b84 <_dtoa_r+0xaa4>)
 801397a:	4602      	mov	r2, r0
 801397c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013980:	f7ff bbc7 	b.w	8013112 <_dtoa_r+0x32>
 8013984:	692a      	ldr	r2, [r5, #16]
 8013986:	3202      	adds	r2, #2
 8013988:	0092      	lsls	r2, r2, #2
 801398a:	f105 010c 	add.w	r1, r5, #12
 801398e:	300c      	adds	r0, #12
 8013990:	f000 fee6 	bl	8014760 <memcpy>
 8013994:	2201      	movs	r2, #1
 8013996:	4631      	mov	r1, r6
 8013998:	4648      	mov	r0, r9
 801399a:	f000 fb4f 	bl	801403c <__lshift>
 801399e:	1c7b      	adds	r3, r7, #1
 80139a0:	9305      	str	r3, [sp, #20]
 80139a2:	eb07 030b 	add.w	r3, r7, fp
 80139a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80139a8:	9b02      	ldr	r3, [sp, #8]
 80139aa:	f003 0301 	and.w	r3, r3, #1
 80139ae:	46a8      	mov	r8, r5
 80139b0:	9308      	str	r3, [sp, #32]
 80139b2:	4605      	mov	r5, r0
 80139b4:	9b05      	ldr	r3, [sp, #20]
 80139b6:	9801      	ldr	r0, [sp, #4]
 80139b8:	4621      	mov	r1, r4
 80139ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80139be:	f7ff fb04 	bl	8012fca <quorem>
 80139c2:	4641      	mov	r1, r8
 80139c4:	9002      	str	r0, [sp, #8]
 80139c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80139ca:	9801      	ldr	r0, [sp, #4]
 80139cc:	f000 fba2 	bl	8014114 <__mcmp>
 80139d0:	462a      	mov	r2, r5
 80139d2:	9006      	str	r0, [sp, #24]
 80139d4:	4621      	mov	r1, r4
 80139d6:	4648      	mov	r0, r9
 80139d8:	f000 fbb8 	bl	801414c <__mdiff>
 80139dc:	68c2      	ldr	r2, [r0, #12]
 80139de:	4606      	mov	r6, r0
 80139e0:	b9fa      	cbnz	r2, 8013a22 <_dtoa_r+0x942>
 80139e2:	4601      	mov	r1, r0
 80139e4:	9801      	ldr	r0, [sp, #4]
 80139e6:	f000 fb95 	bl	8014114 <__mcmp>
 80139ea:	4602      	mov	r2, r0
 80139ec:	4631      	mov	r1, r6
 80139ee:	4648      	mov	r0, r9
 80139f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80139f2:	f000 f955 	bl	8013ca0 <_Bfree>
 80139f6:	9b07      	ldr	r3, [sp, #28]
 80139f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80139fa:	9e05      	ldr	r6, [sp, #20]
 80139fc:	ea43 0102 	orr.w	r1, r3, r2
 8013a00:	9b08      	ldr	r3, [sp, #32]
 8013a02:	4319      	orrs	r1, r3
 8013a04:	d10f      	bne.n	8013a26 <_dtoa_r+0x946>
 8013a06:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013a0a:	d028      	beq.n	8013a5e <_dtoa_r+0x97e>
 8013a0c:	9b06      	ldr	r3, [sp, #24]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	dd02      	ble.n	8013a18 <_dtoa_r+0x938>
 8013a12:	9b02      	ldr	r3, [sp, #8]
 8013a14:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013a18:	f88b a000 	strb.w	sl, [fp]
 8013a1c:	e639      	b.n	8013692 <_dtoa_r+0x5b2>
 8013a1e:	4628      	mov	r0, r5
 8013a20:	e7bd      	b.n	801399e <_dtoa_r+0x8be>
 8013a22:	2201      	movs	r2, #1
 8013a24:	e7e2      	b.n	80139ec <_dtoa_r+0x90c>
 8013a26:	9b06      	ldr	r3, [sp, #24]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	db04      	blt.n	8013a36 <_dtoa_r+0x956>
 8013a2c:	9907      	ldr	r1, [sp, #28]
 8013a2e:	430b      	orrs	r3, r1
 8013a30:	9908      	ldr	r1, [sp, #32]
 8013a32:	430b      	orrs	r3, r1
 8013a34:	d120      	bne.n	8013a78 <_dtoa_r+0x998>
 8013a36:	2a00      	cmp	r2, #0
 8013a38:	ddee      	ble.n	8013a18 <_dtoa_r+0x938>
 8013a3a:	9901      	ldr	r1, [sp, #4]
 8013a3c:	2201      	movs	r2, #1
 8013a3e:	4648      	mov	r0, r9
 8013a40:	f000 fafc 	bl	801403c <__lshift>
 8013a44:	4621      	mov	r1, r4
 8013a46:	9001      	str	r0, [sp, #4]
 8013a48:	f000 fb64 	bl	8014114 <__mcmp>
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	dc03      	bgt.n	8013a58 <_dtoa_r+0x978>
 8013a50:	d1e2      	bne.n	8013a18 <_dtoa_r+0x938>
 8013a52:	f01a 0f01 	tst.w	sl, #1
 8013a56:	d0df      	beq.n	8013a18 <_dtoa_r+0x938>
 8013a58:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013a5c:	d1d9      	bne.n	8013a12 <_dtoa_r+0x932>
 8013a5e:	2339      	movs	r3, #57	@ 0x39
 8013a60:	f88b 3000 	strb.w	r3, [fp]
 8013a64:	4633      	mov	r3, r6
 8013a66:	461e      	mov	r6, r3
 8013a68:	3b01      	subs	r3, #1
 8013a6a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013a6e:	2a39      	cmp	r2, #57	@ 0x39
 8013a70:	d053      	beq.n	8013b1a <_dtoa_r+0xa3a>
 8013a72:	3201      	adds	r2, #1
 8013a74:	701a      	strb	r2, [r3, #0]
 8013a76:	e60c      	b.n	8013692 <_dtoa_r+0x5b2>
 8013a78:	2a00      	cmp	r2, #0
 8013a7a:	dd07      	ble.n	8013a8c <_dtoa_r+0x9ac>
 8013a7c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013a80:	d0ed      	beq.n	8013a5e <_dtoa_r+0x97e>
 8013a82:	f10a 0301 	add.w	r3, sl, #1
 8013a86:	f88b 3000 	strb.w	r3, [fp]
 8013a8a:	e602      	b.n	8013692 <_dtoa_r+0x5b2>
 8013a8c:	9b05      	ldr	r3, [sp, #20]
 8013a8e:	9a05      	ldr	r2, [sp, #20]
 8013a90:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a96:	4293      	cmp	r3, r2
 8013a98:	d029      	beq.n	8013aee <_dtoa_r+0xa0e>
 8013a9a:	9901      	ldr	r1, [sp, #4]
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	220a      	movs	r2, #10
 8013aa0:	4648      	mov	r0, r9
 8013aa2:	f000 f91f 	bl	8013ce4 <__multadd>
 8013aa6:	45a8      	cmp	r8, r5
 8013aa8:	9001      	str	r0, [sp, #4]
 8013aaa:	f04f 0300 	mov.w	r3, #0
 8013aae:	f04f 020a 	mov.w	r2, #10
 8013ab2:	4641      	mov	r1, r8
 8013ab4:	4648      	mov	r0, r9
 8013ab6:	d107      	bne.n	8013ac8 <_dtoa_r+0x9e8>
 8013ab8:	f000 f914 	bl	8013ce4 <__multadd>
 8013abc:	4680      	mov	r8, r0
 8013abe:	4605      	mov	r5, r0
 8013ac0:	9b05      	ldr	r3, [sp, #20]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	9305      	str	r3, [sp, #20]
 8013ac6:	e775      	b.n	80139b4 <_dtoa_r+0x8d4>
 8013ac8:	f000 f90c 	bl	8013ce4 <__multadd>
 8013acc:	4629      	mov	r1, r5
 8013ace:	4680      	mov	r8, r0
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	220a      	movs	r2, #10
 8013ad4:	4648      	mov	r0, r9
 8013ad6:	f000 f905 	bl	8013ce4 <__multadd>
 8013ada:	4605      	mov	r5, r0
 8013adc:	e7f0      	b.n	8013ac0 <_dtoa_r+0x9e0>
 8013ade:	f1bb 0f00 	cmp.w	fp, #0
 8013ae2:	bfcc      	ite	gt
 8013ae4:	465e      	movgt	r6, fp
 8013ae6:	2601      	movle	r6, #1
 8013ae8:	443e      	add	r6, r7
 8013aea:	f04f 0800 	mov.w	r8, #0
 8013aee:	9901      	ldr	r1, [sp, #4]
 8013af0:	2201      	movs	r2, #1
 8013af2:	4648      	mov	r0, r9
 8013af4:	f000 faa2 	bl	801403c <__lshift>
 8013af8:	4621      	mov	r1, r4
 8013afa:	9001      	str	r0, [sp, #4]
 8013afc:	f000 fb0a 	bl	8014114 <__mcmp>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	dcaf      	bgt.n	8013a64 <_dtoa_r+0x984>
 8013b04:	d102      	bne.n	8013b0c <_dtoa_r+0xa2c>
 8013b06:	f01a 0f01 	tst.w	sl, #1
 8013b0a:	d1ab      	bne.n	8013a64 <_dtoa_r+0x984>
 8013b0c:	4633      	mov	r3, r6
 8013b0e:	461e      	mov	r6, r3
 8013b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b14:	2a30      	cmp	r2, #48	@ 0x30
 8013b16:	d0fa      	beq.n	8013b0e <_dtoa_r+0xa2e>
 8013b18:	e5bb      	b.n	8013692 <_dtoa_r+0x5b2>
 8013b1a:	429f      	cmp	r7, r3
 8013b1c:	d1a3      	bne.n	8013a66 <_dtoa_r+0x986>
 8013b1e:	9b04      	ldr	r3, [sp, #16]
 8013b20:	3301      	adds	r3, #1
 8013b22:	9304      	str	r3, [sp, #16]
 8013b24:	2331      	movs	r3, #49	@ 0x31
 8013b26:	703b      	strb	r3, [r7, #0]
 8013b28:	e5b3      	b.n	8013692 <_dtoa_r+0x5b2>
 8013b2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013b2c:	4f16      	ldr	r7, [pc, #88]	@ (8013b88 <_dtoa_r+0xaa8>)
 8013b2e:	b11b      	cbz	r3, 8013b38 <_dtoa_r+0xa58>
 8013b30:	f107 0308 	add.w	r3, r7, #8
 8013b34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013b36:	6013      	str	r3, [r2, #0]
 8013b38:	4638      	mov	r0, r7
 8013b3a:	b011      	add	sp, #68	@ 0x44
 8013b3c:	ecbd 8b02 	vpop	{d8}
 8013b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b44:	9b07      	ldr	r3, [sp, #28]
 8013b46:	2b01      	cmp	r3, #1
 8013b48:	f77f ae36 	ble.w	80137b8 <_dtoa_r+0x6d8>
 8013b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b50:	2001      	movs	r0, #1
 8013b52:	e656      	b.n	8013802 <_dtoa_r+0x722>
 8013b54:	f1bb 0f00 	cmp.w	fp, #0
 8013b58:	f77f aed7 	ble.w	801390a <_dtoa_r+0x82a>
 8013b5c:	463e      	mov	r6, r7
 8013b5e:	9801      	ldr	r0, [sp, #4]
 8013b60:	4621      	mov	r1, r4
 8013b62:	f7ff fa32 	bl	8012fca <quorem>
 8013b66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013b6a:	f806 ab01 	strb.w	sl, [r6], #1
 8013b6e:	1bf2      	subs	r2, r6, r7
 8013b70:	4593      	cmp	fp, r2
 8013b72:	ddb4      	ble.n	8013ade <_dtoa_r+0x9fe>
 8013b74:	9901      	ldr	r1, [sp, #4]
 8013b76:	2300      	movs	r3, #0
 8013b78:	220a      	movs	r2, #10
 8013b7a:	4648      	mov	r0, r9
 8013b7c:	f000 f8b2 	bl	8013ce4 <__multadd>
 8013b80:	9001      	str	r0, [sp, #4]
 8013b82:	e7ec      	b.n	8013b5e <_dtoa_r+0xa7e>
 8013b84:	08015f88 	.word	0x08015f88
 8013b88:	08015f0c 	.word	0x08015f0c

08013b8c <_free_r>:
 8013b8c:	b538      	push	{r3, r4, r5, lr}
 8013b8e:	4605      	mov	r5, r0
 8013b90:	2900      	cmp	r1, #0
 8013b92:	d041      	beq.n	8013c18 <_free_r+0x8c>
 8013b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b98:	1f0c      	subs	r4, r1, #4
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	bfb8      	it	lt
 8013b9e:	18e4      	addlt	r4, r4, r3
 8013ba0:	f7fe fc1a 	bl	80123d8 <__malloc_lock>
 8013ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8013c1c <_free_r+0x90>)
 8013ba6:	6813      	ldr	r3, [r2, #0]
 8013ba8:	b933      	cbnz	r3, 8013bb8 <_free_r+0x2c>
 8013baa:	6063      	str	r3, [r4, #4]
 8013bac:	6014      	str	r4, [r2, #0]
 8013bae:	4628      	mov	r0, r5
 8013bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bb4:	f7fe bc16 	b.w	80123e4 <__malloc_unlock>
 8013bb8:	42a3      	cmp	r3, r4
 8013bba:	d908      	bls.n	8013bce <_free_r+0x42>
 8013bbc:	6820      	ldr	r0, [r4, #0]
 8013bbe:	1821      	adds	r1, r4, r0
 8013bc0:	428b      	cmp	r3, r1
 8013bc2:	bf01      	itttt	eq
 8013bc4:	6819      	ldreq	r1, [r3, #0]
 8013bc6:	685b      	ldreq	r3, [r3, #4]
 8013bc8:	1809      	addeq	r1, r1, r0
 8013bca:	6021      	streq	r1, [r4, #0]
 8013bcc:	e7ed      	b.n	8013baa <_free_r+0x1e>
 8013bce:	461a      	mov	r2, r3
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	b10b      	cbz	r3, 8013bd8 <_free_r+0x4c>
 8013bd4:	42a3      	cmp	r3, r4
 8013bd6:	d9fa      	bls.n	8013bce <_free_r+0x42>
 8013bd8:	6811      	ldr	r1, [r2, #0]
 8013bda:	1850      	adds	r0, r2, r1
 8013bdc:	42a0      	cmp	r0, r4
 8013bde:	d10b      	bne.n	8013bf8 <_free_r+0x6c>
 8013be0:	6820      	ldr	r0, [r4, #0]
 8013be2:	4401      	add	r1, r0
 8013be4:	1850      	adds	r0, r2, r1
 8013be6:	4283      	cmp	r3, r0
 8013be8:	6011      	str	r1, [r2, #0]
 8013bea:	d1e0      	bne.n	8013bae <_free_r+0x22>
 8013bec:	6818      	ldr	r0, [r3, #0]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	6053      	str	r3, [r2, #4]
 8013bf2:	4408      	add	r0, r1
 8013bf4:	6010      	str	r0, [r2, #0]
 8013bf6:	e7da      	b.n	8013bae <_free_r+0x22>
 8013bf8:	d902      	bls.n	8013c00 <_free_r+0x74>
 8013bfa:	230c      	movs	r3, #12
 8013bfc:	602b      	str	r3, [r5, #0]
 8013bfe:	e7d6      	b.n	8013bae <_free_r+0x22>
 8013c00:	6820      	ldr	r0, [r4, #0]
 8013c02:	1821      	adds	r1, r4, r0
 8013c04:	428b      	cmp	r3, r1
 8013c06:	bf04      	itt	eq
 8013c08:	6819      	ldreq	r1, [r3, #0]
 8013c0a:	685b      	ldreq	r3, [r3, #4]
 8013c0c:	6063      	str	r3, [r4, #4]
 8013c0e:	bf04      	itt	eq
 8013c10:	1809      	addeq	r1, r1, r0
 8013c12:	6021      	streq	r1, [r4, #0]
 8013c14:	6054      	str	r4, [r2, #4]
 8013c16:	e7ca      	b.n	8013bae <_free_r+0x22>
 8013c18:	bd38      	pop	{r3, r4, r5, pc}
 8013c1a:	bf00      	nop
 8013c1c:	24002234 	.word	0x24002234

08013c20 <_Balloc>:
 8013c20:	b570      	push	{r4, r5, r6, lr}
 8013c22:	69c6      	ldr	r6, [r0, #28]
 8013c24:	4604      	mov	r4, r0
 8013c26:	460d      	mov	r5, r1
 8013c28:	b976      	cbnz	r6, 8013c48 <_Balloc+0x28>
 8013c2a:	2010      	movs	r0, #16
 8013c2c:	f7fe fb2a 	bl	8012284 <malloc>
 8013c30:	4602      	mov	r2, r0
 8013c32:	61e0      	str	r0, [r4, #28]
 8013c34:	b920      	cbnz	r0, 8013c40 <_Balloc+0x20>
 8013c36:	4b18      	ldr	r3, [pc, #96]	@ (8013c98 <_Balloc+0x78>)
 8013c38:	4818      	ldr	r0, [pc, #96]	@ (8013c9c <_Balloc+0x7c>)
 8013c3a:	216b      	movs	r1, #107	@ 0x6b
 8013c3c:	f000 fd9e 	bl	801477c <__assert_func>
 8013c40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c44:	6006      	str	r6, [r0, #0]
 8013c46:	60c6      	str	r6, [r0, #12]
 8013c48:	69e6      	ldr	r6, [r4, #28]
 8013c4a:	68f3      	ldr	r3, [r6, #12]
 8013c4c:	b183      	cbz	r3, 8013c70 <_Balloc+0x50>
 8013c4e:	69e3      	ldr	r3, [r4, #28]
 8013c50:	68db      	ldr	r3, [r3, #12]
 8013c52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013c56:	b9b8      	cbnz	r0, 8013c88 <_Balloc+0x68>
 8013c58:	2101      	movs	r1, #1
 8013c5a:	fa01 f605 	lsl.w	r6, r1, r5
 8013c5e:	1d72      	adds	r2, r6, #5
 8013c60:	0092      	lsls	r2, r2, #2
 8013c62:	4620      	mov	r0, r4
 8013c64:	f000 fda8 	bl	80147b8 <_calloc_r>
 8013c68:	b160      	cbz	r0, 8013c84 <_Balloc+0x64>
 8013c6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013c6e:	e00e      	b.n	8013c8e <_Balloc+0x6e>
 8013c70:	2221      	movs	r2, #33	@ 0x21
 8013c72:	2104      	movs	r1, #4
 8013c74:	4620      	mov	r0, r4
 8013c76:	f000 fd9f 	bl	80147b8 <_calloc_r>
 8013c7a:	69e3      	ldr	r3, [r4, #28]
 8013c7c:	60f0      	str	r0, [r6, #12]
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d1e4      	bne.n	8013c4e <_Balloc+0x2e>
 8013c84:	2000      	movs	r0, #0
 8013c86:	bd70      	pop	{r4, r5, r6, pc}
 8013c88:	6802      	ldr	r2, [r0, #0]
 8013c8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013c8e:	2300      	movs	r3, #0
 8013c90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013c94:	e7f7      	b.n	8013c86 <_Balloc+0x66>
 8013c96:	bf00      	nop
 8013c98:	08015f19 	.word	0x08015f19
 8013c9c:	08015f99 	.word	0x08015f99

08013ca0 <_Bfree>:
 8013ca0:	b570      	push	{r4, r5, r6, lr}
 8013ca2:	69c6      	ldr	r6, [r0, #28]
 8013ca4:	4605      	mov	r5, r0
 8013ca6:	460c      	mov	r4, r1
 8013ca8:	b976      	cbnz	r6, 8013cc8 <_Bfree+0x28>
 8013caa:	2010      	movs	r0, #16
 8013cac:	f7fe faea 	bl	8012284 <malloc>
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	61e8      	str	r0, [r5, #28]
 8013cb4:	b920      	cbnz	r0, 8013cc0 <_Bfree+0x20>
 8013cb6:	4b09      	ldr	r3, [pc, #36]	@ (8013cdc <_Bfree+0x3c>)
 8013cb8:	4809      	ldr	r0, [pc, #36]	@ (8013ce0 <_Bfree+0x40>)
 8013cba:	218f      	movs	r1, #143	@ 0x8f
 8013cbc:	f000 fd5e 	bl	801477c <__assert_func>
 8013cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013cc4:	6006      	str	r6, [r0, #0]
 8013cc6:	60c6      	str	r6, [r0, #12]
 8013cc8:	b13c      	cbz	r4, 8013cda <_Bfree+0x3a>
 8013cca:	69eb      	ldr	r3, [r5, #28]
 8013ccc:	6862      	ldr	r2, [r4, #4]
 8013cce:	68db      	ldr	r3, [r3, #12]
 8013cd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013cd4:	6021      	str	r1, [r4, #0]
 8013cd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013cda:	bd70      	pop	{r4, r5, r6, pc}
 8013cdc:	08015f19 	.word	0x08015f19
 8013ce0:	08015f99 	.word	0x08015f99

08013ce4 <__multadd>:
 8013ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ce8:	690d      	ldr	r5, [r1, #16]
 8013cea:	4607      	mov	r7, r0
 8013cec:	460c      	mov	r4, r1
 8013cee:	461e      	mov	r6, r3
 8013cf0:	f101 0c14 	add.w	ip, r1, #20
 8013cf4:	2000      	movs	r0, #0
 8013cf6:	f8dc 3000 	ldr.w	r3, [ip]
 8013cfa:	b299      	uxth	r1, r3
 8013cfc:	fb02 6101 	mla	r1, r2, r1, r6
 8013d00:	0c1e      	lsrs	r6, r3, #16
 8013d02:	0c0b      	lsrs	r3, r1, #16
 8013d04:	fb02 3306 	mla	r3, r2, r6, r3
 8013d08:	b289      	uxth	r1, r1
 8013d0a:	3001      	adds	r0, #1
 8013d0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013d10:	4285      	cmp	r5, r0
 8013d12:	f84c 1b04 	str.w	r1, [ip], #4
 8013d16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013d1a:	dcec      	bgt.n	8013cf6 <__multadd+0x12>
 8013d1c:	b30e      	cbz	r6, 8013d62 <__multadd+0x7e>
 8013d1e:	68a3      	ldr	r3, [r4, #8]
 8013d20:	42ab      	cmp	r3, r5
 8013d22:	dc19      	bgt.n	8013d58 <__multadd+0x74>
 8013d24:	6861      	ldr	r1, [r4, #4]
 8013d26:	4638      	mov	r0, r7
 8013d28:	3101      	adds	r1, #1
 8013d2a:	f7ff ff79 	bl	8013c20 <_Balloc>
 8013d2e:	4680      	mov	r8, r0
 8013d30:	b928      	cbnz	r0, 8013d3e <__multadd+0x5a>
 8013d32:	4602      	mov	r2, r0
 8013d34:	4b0c      	ldr	r3, [pc, #48]	@ (8013d68 <__multadd+0x84>)
 8013d36:	480d      	ldr	r0, [pc, #52]	@ (8013d6c <__multadd+0x88>)
 8013d38:	21ba      	movs	r1, #186	@ 0xba
 8013d3a:	f000 fd1f 	bl	801477c <__assert_func>
 8013d3e:	6922      	ldr	r2, [r4, #16]
 8013d40:	3202      	adds	r2, #2
 8013d42:	f104 010c 	add.w	r1, r4, #12
 8013d46:	0092      	lsls	r2, r2, #2
 8013d48:	300c      	adds	r0, #12
 8013d4a:	f000 fd09 	bl	8014760 <memcpy>
 8013d4e:	4621      	mov	r1, r4
 8013d50:	4638      	mov	r0, r7
 8013d52:	f7ff ffa5 	bl	8013ca0 <_Bfree>
 8013d56:	4644      	mov	r4, r8
 8013d58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013d5c:	3501      	adds	r5, #1
 8013d5e:	615e      	str	r6, [r3, #20]
 8013d60:	6125      	str	r5, [r4, #16]
 8013d62:	4620      	mov	r0, r4
 8013d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d68:	08015f88 	.word	0x08015f88
 8013d6c:	08015f99 	.word	0x08015f99

08013d70 <__hi0bits>:
 8013d70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013d74:	4603      	mov	r3, r0
 8013d76:	bf36      	itet	cc
 8013d78:	0403      	lslcc	r3, r0, #16
 8013d7a:	2000      	movcs	r0, #0
 8013d7c:	2010      	movcc	r0, #16
 8013d7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013d82:	bf3c      	itt	cc
 8013d84:	021b      	lslcc	r3, r3, #8
 8013d86:	3008      	addcc	r0, #8
 8013d88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d8c:	bf3c      	itt	cc
 8013d8e:	011b      	lslcc	r3, r3, #4
 8013d90:	3004      	addcc	r0, #4
 8013d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d96:	bf3c      	itt	cc
 8013d98:	009b      	lslcc	r3, r3, #2
 8013d9a:	3002      	addcc	r0, #2
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	db05      	blt.n	8013dac <__hi0bits+0x3c>
 8013da0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013da4:	f100 0001 	add.w	r0, r0, #1
 8013da8:	bf08      	it	eq
 8013daa:	2020      	moveq	r0, #32
 8013dac:	4770      	bx	lr

08013dae <__lo0bits>:
 8013dae:	6803      	ldr	r3, [r0, #0]
 8013db0:	4602      	mov	r2, r0
 8013db2:	f013 0007 	ands.w	r0, r3, #7
 8013db6:	d00b      	beq.n	8013dd0 <__lo0bits+0x22>
 8013db8:	07d9      	lsls	r1, r3, #31
 8013dba:	d421      	bmi.n	8013e00 <__lo0bits+0x52>
 8013dbc:	0798      	lsls	r0, r3, #30
 8013dbe:	bf49      	itett	mi
 8013dc0:	085b      	lsrmi	r3, r3, #1
 8013dc2:	089b      	lsrpl	r3, r3, #2
 8013dc4:	2001      	movmi	r0, #1
 8013dc6:	6013      	strmi	r3, [r2, #0]
 8013dc8:	bf5c      	itt	pl
 8013dca:	6013      	strpl	r3, [r2, #0]
 8013dcc:	2002      	movpl	r0, #2
 8013dce:	4770      	bx	lr
 8013dd0:	b299      	uxth	r1, r3
 8013dd2:	b909      	cbnz	r1, 8013dd8 <__lo0bits+0x2a>
 8013dd4:	0c1b      	lsrs	r3, r3, #16
 8013dd6:	2010      	movs	r0, #16
 8013dd8:	b2d9      	uxtb	r1, r3
 8013dda:	b909      	cbnz	r1, 8013de0 <__lo0bits+0x32>
 8013ddc:	3008      	adds	r0, #8
 8013dde:	0a1b      	lsrs	r3, r3, #8
 8013de0:	0719      	lsls	r1, r3, #28
 8013de2:	bf04      	itt	eq
 8013de4:	091b      	lsreq	r3, r3, #4
 8013de6:	3004      	addeq	r0, #4
 8013de8:	0799      	lsls	r1, r3, #30
 8013dea:	bf04      	itt	eq
 8013dec:	089b      	lsreq	r3, r3, #2
 8013dee:	3002      	addeq	r0, #2
 8013df0:	07d9      	lsls	r1, r3, #31
 8013df2:	d403      	bmi.n	8013dfc <__lo0bits+0x4e>
 8013df4:	085b      	lsrs	r3, r3, #1
 8013df6:	f100 0001 	add.w	r0, r0, #1
 8013dfa:	d003      	beq.n	8013e04 <__lo0bits+0x56>
 8013dfc:	6013      	str	r3, [r2, #0]
 8013dfe:	4770      	bx	lr
 8013e00:	2000      	movs	r0, #0
 8013e02:	4770      	bx	lr
 8013e04:	2020      	movs	r0, #32
 8013e06:	4770      	bx	lr

08013e08 <__i2b>:
 8013e08:	b510      	push	{r4, lr}
 8013e0a:	460c      	mov	r4, r1
 8013e0c:	2101      	movs	r1, #1
 8013e0e:	f7ff ff07 	bl	8013c20 <_Balloc>
 8013e12:	4602      	mov	r2, r0
 8013e14:	b928      	cbnz	r0, 8013e22 <__i2b+0x1a>
 8013e16:	4b05      	ldr	r3, [pc, #20]	@ (8013e2c <__i2b+0x24>)
 8013e18:	4805      	ldr	r0, [pc, #20]	@ (8013e30 <__i2b+0x28>)
 8013e1a:	f240 1145 	movw	r1, #325	@ 0x145
 8013e1e:	f000 fcad 	bl	801477c <__assert_func>
 8013e22:	2301      	movs	r3, #1
 8013e24:	6144      	str	r4, [r0, #20]
 8013e26:	6103      	str	r3, [r0, #16]
 8013e28:	bd10      	pop	{r4, pc}
 8013e2a:	bf00      	nop
 8013e2c:	08015f88 	.word	0x08015f88
 8013e30:	08015f99 	.word	0x08015f99

08013e34 <__multiply>:
 8013e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e38:	4614      	mov	r4, r2
 8013e3a:	690a      	ldr	r2, [r1, #16]
 8013e3c:	6923      	ldr	r3, [r4, #16]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	bfa8      	it	ge
 8013e42:	4623      	movge	r3, r4
 8013e44:	460f      	mov	r7, r1
 8013e46:	bfa4      	itt	ge
 8013e48:	460c      	movge	r4, r1
 8013e4a:	461f      	movge	r7, r3
 8013e4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013e50:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013e54:	68a3      	ldr	r3, [r4, #8]
 8013e56:	6861      	ldr	r1, [r4, #4]
 8013e58:	eb0a 0609 	add.w	r6, sl, r9
 8013e5c:	42b3      	cmp	r3, r6
 8013e5e:	b085      	sub	sp, #20
 8013e60:	bfb8      	it	lt
 8013e62:	3101      	addlt	r1, #1
 8013e64:	f7ff fedc 	bl	8013c20 <_Balloc>
 8013e68:	b930      	cbnz	r0, 8013e78 <__multiply+0x44>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	4b44      	ldr	r3, [pc, #272]	@ (8013f80 <__multiply+0x14c>)
 8013e6e:	4845      	ldr	r0, [pc, #276]	@ (8013f84 <__multiply+0x150>)
 8013e70:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013e74:	f000 fc82 	bl	801477c <__assert_func>
 8013e78:	f100 0514 	add.w	r5, r0, #20
 8013e7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013e80:	462b      	mov	r3, r5
 8013e82:	2200      	movs	r2, #0
 8013e84:	4543      	cmp	r3, r8
 8013e86:	d321      	bcc.n	8013ecc <__multiply+0x98>
 8013e88:	f107 0114 	add.w	r1, r7, #20
 8013e8c:	f104 0214 	add.w	r2, r4, #20
 8013e90:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013e94:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013e98:	9302      	str	r3, [sp, #8]
 8013e9a:	1b13      	subs	r3, r2, r4
 8013e9c:	3b15      	subs	r3, #21
 8013e9e:	f023 0303 	bic.w	r3, r3, #3
 8013ea2:	3304      	adds	r3, #4
 8013ea4:	f104 0715 	add.w	r7, r4, #21
 8013ea8:	42ba      	cmp	r2, r7
 8013eaa:	bf38      	it	cc
 8013eac:	2304      	movcc	r3, #4
 8013eae:	9301      	str	r3, [sp, #4]
 8013eb0:	9b02      	ldr	r3, [sp, #8]
 8013eb2:	9103      	str	r1, [sp, #12]
 8013eb4:	428b      	cmp	r3, r1
 8013eb6:	d80c      	bhi.n	8013ed2 <__multiply+0x9e>
 8013eb8:	2e00      	cmp	r6, #0
 8013eba:	dd03      	ble.n	8013ec4 <__multiply+0x90>
 8013ebc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d05b      	beq.n	8013f7c <__multiply+0x148>
 8013ec4:	6106      	str	r6, [r0, #16]
 8013ec6:	b005      	add	sp, #20
 8013ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ecc:	f843 2b04 	str.w	r2, [r3], #4
 8013ed0:	e7d8      	b.n	8013e84 <__multiply+0x50>
 8013ed2:	f8b1 a000 	ldrh.w	sl, [r1]
 8013ed6:	f1ba 0f00 	cmp.w	sl, #0
 8013eda:	d024      	beq.n	8013f26 <__multiply+0xf2>
 8013edc:	f104 0e14 	add.w	lr, r4, #20
 8013ee0:	46a9      	mov	r9, r5
 8013ee2:	f04f 0c00 	mov.w	ip, #0
 8013ee6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013eea:	f8d9 3000 	ldr.w	r3, [r9]
 8013eee:	fa1f fb87 	uxth.w	fp, r7
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	fb0a 330b 	mla	r3, sl, fp, r3
 8013ef8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013efc:	f8d9 7000 	ldr.w	r7, [r9]
 8013f00:	4463      	add	r3, ip
 8013f02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013f06:	fb0a c70b 	mla	r7, sl, fp, ip
 8013f0a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013f0e:	b29b      	uxth	r3, r3
 8013f10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013f14:	4572      	cmp	r2, lr
 8013f16:	f849 3b04 	str.w	r3, [r9], #4
 8013f1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013f1e:	d8e2      	bhi.n	8013ee6 <__multiply+0xb2>
 8013f20:	9b01      	ldr	r3, [sp, #4]
 8013f22:	f845 c003 	str.w	ip, [r5, r3]
 8013f26:	9b03      	ldr	r3, [sp, #12]
 8013f28:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013f2c:	3104      	adds	r1, #4
 8013f2e:	f1b9 0f00 	cmp.w	r9, #0
 8013f32:	d021      	beq.n	8013f78 <__multiply+0x144>
 8013f34:	682b      	ldr	r3, [r5, #0]
 8013f36:	f104 0c14 	add.w	ip, r4, #20
 8013f3a:	46ae      	mov	lr, r5
 8013f3c:	f04f 0a00 	mov.w	sl, #0
 8013f40:	f8bc b000 	ldrh.w	fp, [ip]
 8013f44:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013f48:	fb09 770b 	mla	r7, r9, fp, r7
 8013f4c:	4457      	add	r7, sl
 8013f4e:	b29b      	uxth	r3, r3
 8013f50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013f54:	f84e 3b04 	str.w	r3, [lr], #4
 8013f58:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013f5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013f60:	f8be 3000 	ldrh.w	r3, [lr]
 8013f64:	fb09 330a 	mla	r3, r9, sl, r3
 8013f68:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013f6c:	4562      	cmp	r2, ip
 8013f6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013f72:	d8e5      	bhi.n	8013f40 <__multiply+0x10c>
 8013f74:	9f01      	ldr	r7, [sp, #4]
 8013f76:	51eb      	str	r3, [r5, r7]
 8013f78:	3504      	adds	r5, #4
 8013f7a:	e799      	b.n	8013eb0 <__multiply+0x7c>
 8013f7c:	3e01      	subs	r6, #1
 8013f7e:	e79b      	b.n	8013eb8 <__multiply+0x84>
 8013f80:	08015f88 	.word	0x08015f88
 8013f84:	08015f99 	.word	0x08015f99

08013f88 <__pow5mult>:
 8013f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f8c:	4615      	mov	r5, r2
 8013f8e:	f012 0203 	ands.w	r2, r2, #3
 8013f92:	4607      	mov	r7, r0
 8013f94:	460e      	mov	r6, r1
 8013f96:	d007      	beq.n	8013fa8 <__pow5mult+0x20>
 8013f98:	4c25      	ldr	r4, [pc, #148]	@ (8014030 <__pow5mult+0xa8>)
 8013f9a:	3a01      	subs	r2, #1
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013fa2:	f7ff fe9f 	bl	8013ce4 <__multadd>
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	10ad      	asrs	r5, r5, #2
 8013faa:	d03d      	beq.n	8014028 <__pow5mult+0xa0>
 8013fac:	69fc      	ldr	r4, [r7, #28]
 8013fae:	b97c      	cbnz	r4, 8013fd0 <__pow5mult+0x48>
 8013fb0:	2010      	movs	r0, #16
 8013fb2:	f7fe f967 	bl	8012284 <malloc>
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	61f8      	str	r0, [r7, #28]
 8013fba:	b928      	cbnz	r0, 8013fc8 <__pow5mult+0x40>
 8013fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8014034 <__pow5mult+0xac>)
 8013fbe:	481e      	ldr	r0, [pc, #120]	@ (8014038 <__pow5mult+0xb0>)
 8013fc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013fc4:	f000 fbda 	bl	801477c <__assert_func>
 8013fc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013fcc:	6004      	str	r4, [r0, #0]
 8013fce:	60c4      	str	r4, [r0, #12]
 8013fd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013fd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013fd8:	b94c      	cbnz	r4, 8013fee <__pow5mult+0x66>
 8013fda:	f240 2171 	movw	r1, #625	@ 0x271
 8013fde:	4638      	mov	r0, r7
 8013fe0:	f7ff ff12 	bl	8013e08 <__i2b>
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	f8c8 0008 	str.w	r0, [r8, #8]
 8013fea:	4604      	mov	r4, r0
 8013fec:	6003      	str	r3, [r0, #0]
 8013fee:	f04f 0900 	mov.w	r9, #0
 8013ff2:	07eb      	lsls	r3, r5, #31
 8013ff4:	d50a      	bpl.n	801400c <__pow5mult+0x84>
 8013ff6:	4631      	mov	r1, r6
 8013ff8:	4622      	mov	r2, r4
 8013ffa:	4638      	mov	r0, r7
 8013ffc:	f7ff ff1a 	bl	8013e34 <__multiply>
 8014000:	4631      	mov	r1, r6
 8014002:	4680      	mov	r8, r0
 8014004:	4638      	mov	r0, r7
 8014006:	f7ff fe4b 	bl	8013ca0 <_Bfree>
 801400a:	4646      	mov	r6, r8
 801400c:	106d      	asrs	r5, r5, #1
 801400e:	d00b      	beq.n	8014028 <__pow5mult+0xa0>
 8014010:	6820      	ldr	r0, [r4, #0]
 8014012:	b938      	cbnz	r0, 8014024 <__pow5mult+0x9c>
 8014014:	4622      	mov	r2, r4
 8014016:	4621      	mov	r1, r4
 8014018:	4638      	mov	r0, r7
 801401a:	f7ff ff0b 	bl	8013e34 <__multiply>
 801401e:	6020      	str	r0, [r4, #0]
 8014020:	f8c0 9000 	str.w	r9, [r0]
 8014024:	4604      	mov	r4, r0
 8014026:	e7e4      	b.n	8013ff2 <__pow5mult+0x6a>
 8014028:	4630      	mov	r0, r6
 801402a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801402e:	bf00      	nop
 8014030:	08015ff4 	.word	0x08015ff4
 8014034:	08015f19 	.word	0x08015f19
 8014038:	08015f99 	.word	0x08015f99

0801403c <__lshift>:
 801403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014040:	460c      	mov	r4, r1
 8014042:	6849      	ldr	r1, [r1, #4]
 8014044:	6923      	ldr	r3, [r4, #16]
 8014046:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801404a:	68a3      	ldr	r3, [r4, #8]
 801404c:	4607      	mov	r7, r0
 801404e:	4691      	mov	r9, r2
 8014050:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014054:	f108 0601 	add.w	r6, r8, #1
 8014058:	42b3      	cmp	r3, r6
 801405a:	db0b      	blt.n	8014074 <__lshift+0x38>
 801405c:	4638      	mov	r0, r7
 801405e:	f7ff fddf 	bl	8013c20 <_Balloc>
 8014062:	4605      	mov	r5, r0
 8014064:	b948      	cbnz	r0, 801407a <__lshift+0x3e>
 8014066:	4602      	mov	r2, r0
 8014068:	4b28      	ldr	r3, [pc, #160]	@ (801410c <__lshift+0xd0>)
 801406a:	4829      	ldr	r0, [pc, #164]	@ (8014110 <__lshift+0xd4>)
 801406c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014070:	f000 fb84 	bl	801477c <__assert_func>
 8014074:	3101      	adds	r1, #1
 8014076:	005b      	lsls	r3, r3, #1
 8014078:	e7ee      	b.n	8014058 <__lshift+0x1c>
 801407a:	2300      	movs	r3, #0
 801407c:	f100 0114 	add.w	r1, r0, #20
 8014080:	f100 0210 	add.w	r2, r0, #16
 8014084:	4618      	mov	r0, r3
 8014086:	4553      	cmp	r3, sl
 8014088:	db33      	blt.n	80140f2 <__lshift+0xb6>
 801408a:	6920      	ldr	r0, [r4, #16]
 801408c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014090:	f104 0314 	add.w	r3, r4, #20
 8014094:	f019 091f 	ands.w	r9, r9, #31
 8014098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801409c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80140a0:	d02b      	beq.n	80140fa <__lshift+0xbe>
 80140a2:	f1c9 0e20 	rsb	lr, r9, #32
 80140a6:	468a      	mov	sl, r1
 80140a8:	2200      	movs	r2, #0
 80140aa:	6818      	ldr	r0, [r3, #0]
 80140ac:	fa00 f009 	lsl.w	r0, r0, r9
 80140b0:	4310      	orrs	r0, r2
 80140b2:	f84a 0b04 	str.w	r0, [sl], #4
 80140b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80140ba:	459c      	cmp	ip, r3
 80140bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80140c0:	d8f3      	bhi.n	80140aa <__lshift+0x6e>
 80140c2:	ebac 0304 	sub.w	r3, ip, r4
 80140c6:	3b15      	subs	r3, #21
 80140c8:	f023 0303 	bic.w	r3, r3, #3
 80140cc:	3304      	adds	r3, #4
 80140ce:	f104 0015 	add.w	r0, r4, #21
 80140d2:	4584      	cmp	ip, r0
 80140d4:	bf38      	it	cc
 80140d6:	2304      	movcc	r3, #4
 80140d8:	50ca      	str	r2, [r1, r3]
 80140da:	b10a      	cbz	r2, 80140e0 <__lshift+0xa4>
 80140dc:	f108 0602 	add.w	r6, r8, #2
 80140e0:	3e01      	subs	r6, #1
 80140e2:	4638      	mov	r0, r7
 80140e4:	612e      	str	r6, [r5, #16]
 80140e6:	4621      	mov	r1, r4
 80140e8:	f7ff fdda 	bl	8013ca0 <_Bfree>
 80140ec:	4628      	mov	r0, r5
 80140ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80140f6:	3301      	adds	r3, #1
 80140f8:	e7c5      	b.n	8014086 <__lshift+0x4a>
 80140fa:	3904      	subs	r1, #4
 80140fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014100:	f841 2f04 	str.w	r2, [r1, #4]!
 8014104:	459c      	cmp	ip, r3
 8014106:	d8f9      	bhi.n	80140fc <__lshift+0xc0>
 8014108:	e7ea      	b.n	80140e0 <__lshift+0xa4>
 801410a:	bf00      	nop
 801410c:	08015f88 	.word	0x08015f88
 8014110:	08015f99 	.word	0x08015f99

08014114 <__mcmp>:
 8014114:	690a      	ldr	r2, [r1, #16]
 8014116:	4603      	mov	r3, r0
 8014118:	6900      	ldr	r0, [r0, #16]
 801411a:	1a80      	subs	r0, r0, r2
 801411c:	b530      	push	{r4, r5, lr}
 801411e:	d10e      	bne.n	801413e <__mcmp+0x2a>
 8014120:	3314      	adds	r3, #20
 8014122:	3114      	adds	r1, #20
 8014124:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014128:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801412c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014130:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014134:	4295      	cmp	r5, r2
 8014136:	d003      	beq.n	8014140 <__mcmp+0x2c>
 8014138:	d205      	bcs.n	8014146 <__mcmp+0x32>
 801413a:	f04f 30ff 	mov.w	r0, #4294967295
 801413e:	bd30      	pop	{r4, r5, pc}
 8014140:	42a3      	cmp	r3, r4
 8014142:	d3f3      	bcc.n	801412c <__mcmp+0x18>
 8014144:	e7fb      	b.n	801413e <__mcmp+0x2a>
 8014146:	2001      	movs	r0, #1
 8014148:	e7f9      	b.n	801413e <__mcmp+0x2a>
	...

0801414c <__mdiff>:
 801414c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014150:	4689      	mov	r9, r1
 8014152:	4606      	mov	r6, r0
 8014154:	4611      	mov	r1, r2
 8014156:	4648      	mov	r0, r9
 8014158:	4614      	mov	r4, r2
 801415a:	f7ff ffdb 	bl	8014114 <__mcmp>
 801415e:	1e05      	subs	r5, r0, #0
 8014160:	d112      	bne.n	8014188 <__mdiff+0x3c>
 8014162:	4629      	mov	r1, r5
 8014164:	4630      	mov	r0, r6
 8014166:	f7ff fd5b 	bl	8013c20 <_Balloc>
 801416a:	4602      	mov	r2, r0
 801416c:	b928      	cbnz	r0, 801417a <__mdiff+0x2e>
 801416e:	4b3f      	ldr	r3, [pc, #252]	@ (801426c <__mdiff+0x120>)
 8014170:	f240 2137 	movw	r1, #567	@ 0x237
 8014174:	483e      	ldr	r0, [pc, #248]	@ (8014270 <__mdiff+0x124>)
 8014176:	f000 fb01 	bl	801477c <__assert_func>
 801417a:	2301      	movs	r3, #1
 801417c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014180:	4610      	mov	r0, r2
 8014182:	b003      	add	sp, #12
 8014184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014188:	bfbc      	itt	lt
 801418a:	464b      	movlt	r3, r9
 801418c:	46a1      	movlt	r9, r4
 801418e:	4630      	mov	r0, r6
 8014190:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014194:	bfba      	itte	lt
 8014196:	461c      	movlt	r4, r3
 8014198:	2501      	movlt	r5, #1
 801419a:	2500      	movge	r5, #0
 801419c:	f7ff fd40 	bl	8013c20 <_Balloc>
 80141a0:	4602      	mov	r2, r0
 80141a2:	b918      	cbnz	r0, 80141ac <__mdiff+0x60>
 80141a4:	4b31      	ldr	r3, [pc, #196]	@ (801426c <__mdiff+0x120>)
 80141a6:	f240 2145 	movw	r1, #581	@ 0x245
 80141aa:	e7e3      	b.n	8014174 <__mdiff+0x28>
 80141ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80141b0:	6926      	ldr	r6, [r4, #16]
 80141b2:	60c5      	str	r5, [r0, #12]
 80141b4:	f109 0310 	add.w	r3, r9, #16
 80141b8:	f109 0514 	add.w	r5, r9, #20
 80141bc:	f104 0e14 	add.w	lr, r4, #20
 80141c0:	f100 0b14 	add.w	fp, r0, #20
 80141c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80141c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80141cc:	9301      	str	r3, [sp, #4]
 80141ce:	46d9      	mov	r9, fp
 80141d0:	f04f 0c00 	mov.w	ip, #0
 80141d4:	9b01      	ldr	r3, [sp, #4]
 80141d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80141da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80141de:	9301      	str	r3, [sp, #4]
 80141e0:	fa1f f38a 	uxth.w	r3, sl
 80141e4:	4619      	mov	r1, r3
 80141e6:	b283      	uxth	r3, r0
 80141e8:	1acb      	subs	r3, r1, r3
 80141ea:	0c00      	lsrs	r0, r0, #16
 80141ec:	4463      	add	r3, ip
 80141ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80141f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80141fc:	4576      	cmp	r6, lr
 80141fe:	f849 3b04 	str.w	r3, [r9], #4
 8014202:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014206:	d8e5      	bhi.n	80141d4 <__mdiff+0x88>
 8014208:	1b33      	subs	r3, r6, r4
 801420a:	3b15      	subs	r3, #21
 801420c:	f023 0303 	bic.w	r3, r3, #3
 8014210:	3415      	adds	r4, #21
 8014212:	3304      	adds	r3, #4
 8014214:	42a6      	cmp	r6, r4
 8014216:	bf38      	it	cc
 8014218:	2304      	movcc	r3, #4
 801421a:	441d      	add	r5, r3
 801421c:	445b      	add	r3, fp
 801421e:	461e      	mov	r6, r3
 8014220:	462c      	mov	r4, r5
 8014222:	4544      	cmp	r4, r8
 8014224:	d30e      	bcc.n	8014244 <__mdiff+0xf8>
 8014226:	f108 0103 	add.w	r1, r8, #3
 801422a:	1b49      	subs	r1, r1, r5
 801422c:	f021 0103 	bic.w	r1, r1, #3
 8014230:	3d03      	subs	r5, #3
 8014232:	45a8      	cmp	r8, r5
 8014234:	bf38      	it	cc
 8014236:	2100      	movcc	r1, #0
 8014238:	440b      	add	r3, r1
 801423a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801423e:	b191      	cbz	r1, 8014266 <__mdiff+0x11a>
 8014240:	6117      	str	r7, [r2, #16]
 8014242:	e79d      	b.n	8014180 <__mdiff+0x34>
 8014244:	f854 1b04 	ldr.w	r1, [r4], #4
 8014248:	46e6      	mov	lr, ip
 801424a:	0c08      	lsrs	r0, r1, #16
 801424c:	fa1c fc81 	uxtah	ip, ip, r1
 8014250:	4471      	add	r1, lr
 8014252:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014256:	b289      	uxth	r1, r1
 8014258:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801425c:	f846 1b04 	str.w	r1, [r6], #4
 8014260:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014264:	e7dd      	b.n	8014222 <__mdiff+0xd6>
 8014266:	3f01      	subs	r7, #1
 8014268:	e7e7      	b.n	801423a <__mdiff+0xee>
 801426a:	bf00      	nop
 801426c:	08015f88 	.word	0x08015f88
 8014270:	08015f99 	.word	0x08015f99

08014274 <__d2b>:
 8014274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014278:	460f      	mov	r7, r1
 801427a:	2101      	movs	r1, #1
 801427c:	ec59 8b10 	vmov	r8, r9, d0
 8014280:	4616      	mov	r6, r2
 8014282:	f7ff fccd 	bl	8013c20 <_Balloc>
 8014286:	4604      	mov	r4, r0
 8014288:	b930      	cbnz	r0, 8014298 <__d2b+0x24>
 801428a:	4602      	mov	r2, r0
 801428c:	4b23      	ldr	r3, [pc, #140]	@ (801431c <__d2b+0xa8>)
 801428e:	4824      	ldr	r0, [pc, #144]	@ (8014320 <__d2b+0xac>)
 8014290:	f240 310f 	movw	r1, #783	@ 0x30f
 8014294:	f000 fa72 	bl	801477c <__assert_func>
 8014298:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801429c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142a0:	b10d      	cbz	r5, 80142a6 <__d2b+0x32>
 80142a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80142a6:	9301      	str	r3, [sp, #4]
 80142a8:	f1b8 0300 	subs.w	r3, r8, #0
 80142ac:	d023      	beq.n	80142f6 <__d2b+0x82>
 80142ae:	4668      	mov	r0, sp
 80142b0:	9300      	str	r3, [sp, #0]
 80142b2:	f7ff fd7c 	bl	8013dae <__lo0bits>
 80142b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80142ba:	b1d0      	cbz	r0, 80142f2 <__d2b+0x7e>
 80142bc:	f1c0 0320 	rsb	r3, r0, #32
 80142c0:	fa02 f303 	lsl.w	r3, r2, r3
 80142c4:	430b      	orrs	r3, r1
 80142c6:	40c2      	lsrs	r2, r0
 80142c8:	6163      	str	r3, [r4, #20]
 80142ca:	9201      	str	r2, [sp, #4]
 80142cc:	9b01      	ldr	r3, [sp, #4]
 80142ce:	61a3      	str	r3, [r4, #24]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	bf0c      	ite	eq
 80142d4:	2201      	moveq	r2, #1
 80142d6:	2202      	movne	r2, #2
 80142d8:	6122      	str	r2, [r4, #16]
 80142da:	b1a5      	cbz	r5, 8014306 <__d2b+0x92>
 80142dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80142e0:	4405      	add	r5, r0
 80142e2:	603d      	str	r5, [r7, #0]
 80142e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80142e8:	6030      	str	r0, [r6, #0]
 80142ea:	4620      	mov	r0, r4
 80142ec:	b003      	add	sp, #12
 80142ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142f2:	6161      	str	r1, [r4, #20]
 80142f4:	e7ea      	b.n	80142cc <__d2b+0x58>
 80142f6:	a801      	add	r0, sp, #4
 80142f8:	f7ff fd59 	bl	8013dae <__lo0bits>
 80142fc:	9b01      	ldr	r3, [sp, #4]
 80142fe:	6163      	str	r3, [r4, #20]
 8014300:	3020      	adds	r0, #32
 8014302:	2201      	movs	r2, #1
 8014304:	e7e8      	b.n	80142d8 <__d2b+0x64>
 8014306:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801430a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801430e:	6038      	str	r0, [r7, #0]
 8014310:	6918      	ldr	r0, [r3, #16]
 8014312:	f7ff fd2d 	bl	8013d70 <__hi0bits>
 8014316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801431a:	e7e5      	b.n	80142e8 <__d2b+0x74>
 801431c:	08015f88 	.word	0x08015f88
 8014320:	08015f99 	.word	0x08015f99

08014324 <__ssputs_r>:
 8014324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014328:	688e      	ldr	r6, [r1, #8]
 801432a:	461f      	mov	r7, r3
 801432c:	42be      	cmp	r6, r7
 801432e:	680b      	ldr	r3, [r1, #0]
 8014330:	4682      	mov	sl, r0
 8014332:	460c      	mov	r4, r1
 8014334:	4690      	mov	r8, r2
 8014336:	d82d      	bhi.n	8014394 <__ssputs_r+0x70>
 8014338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801433c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014340:	d026      	beq.n	8014390 <__ssputs_r+0x6c>
 8014342:	6965      	ldr	r5, [r4, #20]
 8014344:	6909      	ldr	r1, [r1, #16]
 8014346:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801434a:	eba3 0901 	sub.w	r9, r3, r1
 801434e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014352:	1c7b      	adds	r3, r7, #1
 8014354:	444b      	add	r3, r9
 8014356:	106d      	asrs	r5, r5, #1
 8014358:	429d      	cmp	r5, r3
 801435a:	bf38      	it	cc
 801435c:	461d      	movcc	r5, r3
 801435e:	0553      	lsls	r3, r2, #21
 8014360:	d527      	bpl.n	80143b2 <__ssputs_r+0x8e>
 8014362:	4629      	mov	r1, r5
 8014364:	f7fd ffb8 	bl	80122d8 <_malloc_r>
 8014368:	4606      	mov	r6, r0
 801436a:	b360      	cbz	r0, 80143c6 <__ssputs_r+0xa2>
 801436c:	6921      	ldr	r1, [r4, #16]
 801436e:	464a      	mov	r2, r9
 8014370:	f000 f9f6 	bl	8014760 <memcpy>
 8014374:	89a3      	ldrh	r3, [r4, #12]
 8014376:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801437a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801437e:	81a3      	strh	r3, [r4, #12]
 8014380:	6126      	str	r6, [r4, #16]
 8014382:	6165      	str	r5, [r4, #20]
 8014384:	444e      	add	r6, r9
 8014386:	eba5 0509 	sub.w	r5, r5, r9
 801438a:	6026      	str	r6, [r4, #0]
 801438c:	60a5      	str	r5, [r4, #8]
 801438e:	463e      	mov	r6, r7
 8014390:	42be      	cmp	r6, r7
 8014392:	d900      	bls.n	8014396 <__ssputs_r+0x72>
 8014394:	463e      	mov	r6, r7
 8014396:	6820      	ldr	r0, [r4, #0]
 8014398:	4632      	mov	r2, r6
 801439a:	4641      	mov	r1, r8
 801439c:	f000 f9c6 	bl	801472c <memmove>
 80143a0:	68a3      	ldr	r3, [r4, #8]
 80143a2:	1b9b      	subs	r3, r3, r6
 80143a4:	60a3      	str	r3, [r4, #8]
 80143a6:	6823      	ldr	r3, [r4, #0]
 80143a8:	4433      	add	r3, r6
 80143aa:	6023      	str	r3, [r4, #0]
 80143ac:	2000      	movs	r0, #0
 80143ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143b2:	462a      	mov	r2, r5
 80143b4:	f000 fa26 	bl	8014804 <_realloc_r>
 80143b8:	4606      	mov	r6, r0
 80143ba:	2800      	cmp	r0, #0
 80143bc:	d1e0      	bne.n	8014380 <__ssputs_r+0x5c>
 80143be:	6921      	ldr	r1, [r4, #16]
 80143c0:	4650      	mov	r0, sl
 80143c2:	f7ff fbe3 	bl	8013b8c <_free_r>
 80143c6:	230c      	movs	r3, #12
 80143c8:	f8ca 3000 	str.w	r3, [sl]
 80143cc:	89a3      	ldrh	r3, [r4, #12]
 80143ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143d2:	81a3      	strh	r3, [r4, #12]
 80143d4:	f04f 30ff 	mov.w	r0, #4294967295
 80143d8:	e7e9      	b.n	80143ae <__ssputs_r+0x8a>
	...

080143dc <_svfiprintf_r>:
 80143dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e0:	4698      	mov	r8, r3
 80143e2:	898b      	ldrh	r3, [r1, #12]
 80143e4:	061b      	lsls	r3, r3, #24
 80143e6:	b09d      	sub	sp, #116	@ 0x74
 80143e8:	4607      	mov	r7, r0
 80143ea:	460d      	mov	r5, r1
 80143ec:	4614      	mov	r4, r2
 80143ee:	d510      	bpl.n	8014412 <_svfiprintf_r+0x36>
 80143f0:	690b      	ldr	r3, [r1, #16]
 80143f2:	b973      	cbnz	r3, 8014412 <_svfiprintf_r+0x36>
 80143f4:	2140      	movs	r1, #64	@ 0x40
 80143f6:	f7fd ff6f 	bl	80122d8 <_malloc_r>
 80143fa:	6028      	str	r0, [r5, #0]
 80143fc:	6128      	str	r0, [r5, #16]
 80143fe:	b930      	cbnz	r0, 801440e <_svfiprintf_r+0x32>
 8014400:	230c      	movs	r3, #12
 8014402:	603b      	str	r3, [r7, #0]
 8014404:	f04f 30ff 	mov.w	r0, #4294967295
 8014408:	b01d      	add	sp, #116	@ 0x74
 801440a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801440e:	2340      	movs	r3, #64	@ 0x40
 8014410:	616b      	str	r3, [r5, #20]
 8014412:	2300      	movs	r3, #0
 8014414:	9309      	str	r3, [sp, #36]	@ 0x24
 8014416:	2320      	movs	r3, #32
 8014418:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801441c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014420:	2330      	movs	r3, #48	@ 0x30
 8014422:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80145c0 <_svfiprintf_r+0x1e4>
 8014426:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801442a:	f04f 0901 	mov.w	r9, #1
 801442e:	4623      	mov	r3, r4
 8014430:	469a      	mov	sl, r3
 8014432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014436:	b10a      	cbz	r2, 801443c <_svfiprintf_r+0x60>
 8014438:	2a25      	cmp	r2, #37	@ 0x25
 801443a:	d1f9      	bne.n	8014430 <_svfiprintf_r+0x54>
 801443c:	ebba 0b04 	subs.w	fp, sl, r4
 8014440:	d00b      	beq.n	801445a <_svfiprintf_r+0x7e>
 8014442:	465b      	mov	r3, fp
 8014444:	4622      	mov	r2, r4
 8014446:	4629      	mov	r1, r5
 8014448:	4638      	mov	r0, r7
 801444a:	f7ff ff6b 	bl	8014324 <__ssputs_r>
 801444e:	3001      	adds	r0, #1
 8014450:	f000 80a7 	beq.w	80145a2 <_svfiprintf_r+0x1c6>
 8014454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014456:	445a      	add	r2, fp
 8014458:	9209      	str	r2, [sp, #36]	@ 0x24
 801445a:	f89a 3000 	ldrb.w	r3, [sl]
 801445e:	2b00      	cmp	r3, #0
 8014460:	f000 809f 	beq.w	80145a2 <_svfiprintf_r+0x1c6>
 8014464:	2300      	movs	r3, #0
 8014466:	f04f 32ff 	mov.w	r2, #4294967295
 801446a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801446e:	f10a 0a01 	add.w	sl, sl, #1
 8014472:	9304      	str	r3, [sp, #16]
 8014474:	9307      	str	r3, [sp, #28]
 8014476:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801447a:	931a      	str	r3, [sp, #104]	@ 0x68
 801447c:	4654      	mov	r4, sl
 801447e:	2205      	movs	r2, #5
 8014480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014484:	484e      	ldr	r0, [pc, #312]	@ (80145c0 <_svfiprintf_r+0x1e4>)
 8014486:	f7eb ff2b 	bl	80002e0 <memchr>
 801448a:	9a04      	ldr	r2, [sp, #16]
 801448c:	b9d8      	cbnz	r0, 80144c6 <_svfiprintf_r+0xea>
 801448e:	06d0      	lsls	r0, r2, #27
 8014490:	bf44      	itt	mi
 8014492:	2320      	movmi	r3, #32
 8014494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014498:	0711      	lsls	r1, r2, #28
 801449a:	bf44      	itt	mi
 801449c:	232b      	movmi	r3, #43	@ 0x2b
 801449e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144a2:	f89a 3000 	ldrb.w	r3, [sl]
 80144a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80144a8:	d015      	beq.n	80144d6 <_svfiprintf_r+0xfa>
 80144aa:	9a07      	ldr	r2, [sp, #28]
 80144ac:	4654      	mov	r4, sl
 80144ae:	2000      	movs	r0, #0
 80144b0:	f04f 0c0a 	mov.w	ip, #10
 80144b4:	4621      	mov	r1, r4
 80144b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144ba:	3b30      	subs	r3, #48	@ 0x30
 80144bc:	2b09      	cmp	r3, #9
 80144be:	d94b      	bls.n	8014558 <_svfiprintf_r+0x17c>
 80144c0:	b1b0      	cbz	r0, 80144f0 <_svfiprintf_r+0x114>
 80144c2:	9207      	str	r2, [sp, #28]
 80144c4:	e014      	b.n	80144f0 <_svfiprintf_r+0x114>
 80144c6:	eba0 0308 	sub.w	r3, r0, r8
 80144ca:	fa09 f303 	lsl.w	r3, r9, r3
 80144ce:	4313      	orrs	r3, r2
 80144d0:	9304      	str	r3, [sp, #16]
 80144d2:	46a2      	mov	sl, r4
 80144d4:	e7d2      	b.n	801447c <_svfiprintf_r+0xa0>
 80144d6:	9b03      	ldr	r3, [sp, #12]
 80144d8:	1d19      	adds	r1, r3, #4
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	9103      	str	r1, [sp, #12]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	bfbb      	ittet	lt
 80144e2:	425b      	neglt	r3, r3
 80144e4:	f042 0202 	orrlt.w	r2, r2, #2
 80144e8:	9307      	strge	r3, [sp, #28]
 80144ea:	9307      	strlt	r3, [sp, #28]
 80144ec:	bfb8      	it	lt
 80144ee:	9204      	strlt	r2, [sp, #16]
 80144f0:	7823      	ldrb	r3, [r4, #0]
 80144f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80144f4:	d10a      	bne.n	801450c <_svfiprintf_r+0x130>
 80144f6:	7863      	ldrb	r3, [r4, #1]
 80144f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80144fa:	d132      	bne.n	8014562 <_svfiprintf_r+0x186>
 80144fc:	9b03      	ldr	r3, [sp, #12]
 80144fe:	1d1a      	adds	r2, r3, #4
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	9203      	str	r2, [sp, #12]
 8014504:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014508:	3402      	adds	r4, #2
 801450a:	9305      	str	r3, [sp, #20]
 801450c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80145d0 <_svfiprintf_r+0x1f4>
 8014510:	7821      	ldrb	r1, [r4, #0]
 8014512:	2203      	movs	r2, #3
 8014514:	4650      	mov	r0, sl
 8014516:	f7eb fee3 	bl	80002e0 <memchr>
 801451a:	b138      	cbz	r0, 801452c <_svfiprintf_r+0x150>
 801451c:	9b04      	ldr	r3, [sp, #16]
 801451e:	eba0 000a 	sub.w	r0, r0, sl
 8014522:	2240      	movs	r2, #64	@ 0x40
 8014524:	4082      	lsls	r2, r0
 8014526:	4313      	orrs	r3, r2
 8014528:	3401      	adds	r4, #1
 801452a:	9304      	str	r3, [sp, #16]
 801452c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014530:	4824      	ldr	r0, [pc, #144]	@ (80145c4 <_svfiprintf_r+0x1e8>)
 8014532:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014536:	2206      	movs	r2, #6
 8014538:	f7eb fed2 	bl	80002e0 <memchr>
 801453c:	2800      	cmp	r0, #0
 801453e:	d036      	beq.n	80145ae <_svfiprintf_r+0x1d2>
 8014540:	4b21      	ldr	r3, [pc, #132]	@ (80145c8 <_svfiprintf_r+0x1ec>)
 8014542:	bb1b      	cbnz	r3, 801458c <_svfiprintf_r+0x1b0>
 8014544:	9b03      	ldr	r3, [sp, #12]
 8014546:	3307      	adds	r3, #7
 8014548:	f023 0307 	bic.w	r3, r3, #7
 801454c:	3308      	adds	r3, #8
 801454e:	9303      	str	r3, [sp, #12]
 8014550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014552:	4433      	add	r3, r6
 8014554:	9309      	str	r3, [sp, #36]	@ 0x24
 8014556:	e76a      	b.n	801442e <_svfiprintf_r+0x52>
 8014558:	fb0c 3202 	mla	r2, ip, r2, r3
 801455c:	460c      	mov	r4, r1
 801455e:	2001      	movs	r0, #1
 8014560:	e7a8      	b.n	80144b4 <_svfiprintf_r+0xd8>
 8014562:	2300      	movs	r3, #0
 8014564:	3401      	adds	r4, #1
 8014566:	9305      	str	r3, [sp, #20]
 8014568:	4619      	mov	r1, r3
 801456a:	f04f 0c0a 	mov.w	ip, #10
 801456e:	4620      	mov	r0, r4
 8014570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014574:	3a30      	subs	r2, #48	@ 0x30
 8014576:	2a09      	cmp	r2, #9
 8014578:	d903      	bls.n	8014582 <_svfiprintf_r+0x1a6>
 801457a:	2b00      	cmp	r3, #0
 801457c:	d0c6      	beq.n	801450c <_svfiprintf_r+0x130>
 801457e:	9105      	str	r1, [sp, #20]
 8014580:	e7c4      	b.n	801450c <_svfiprintf_r+0x130>
 8014582:	fb0c 2101 	mla	r1, ip, r1, r2
 8014586:	4604      	mov	r4, r0
 8014588:	2301      	movs	r3, #1
 801458a:	e7f0      	b.n	801456e <_svfiprintf_r+0x192>
 801458c:	ab03      	add	r3, sp, #12
 801458e:	9300      	str	r3, [sp, #0]
 8014590:	462a      	mov	r2, r5
 8014592:	4b0e      	ldr	r3, [pc, #56]	@ (80145cc <_svfiprintf_r+0x1f0>)
 8014594:	a904      	add	r1, sp, #16
 8014596:	4638      	mov	r0, r7
 8014598:	f7fd ffba 	bl	8012510 <_printf_float>
 801459c:	1c42      	adds	r2, r0, #1
 801459e:	4606      	mov	r6, r0
 80145a0:	d1d6      	bne.n	8014550 <_svfiprintf_r+0x174>
 80145a2:	89ab      	ldrh	r3, [r5, #12]
 80145a4:	065b      	lsls	r3, r3, #25
 80145a6:	f53f af2d 	bmi.w	8014404 <_svfiprintf_r+0x28>
 80145aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145ac:	e72c      	b.n	8014408 <_svfiprintf_r+0x2c>
 80145ae:	ab03      	add	r3, sp, #12
 80145b0:	9300      	str	r3, [sp, #0]
 80145b2:	462a      	mov	r2, r5
 80145b4:	4b05      	ldr	r3, [pc, #20]	@ (80145cc <_svfiprintf_r+0x1f0>)
 80145b6:	a904      	add	r1, sp, #16
 80145b8:	4638      	mov	r0, r7
 80145ba:	f7fe fa31 	bl	8012a20 <_printf_i>
 80145be:	e7ed      	b.n	801459c <_svfiprintf_r+0x1c0>
 80145c0:	080160f0 	.word	0x080160f0
 80145c4:	080160fa 	.word	0x080160fa
 80145c8:	08012511 	.word	0x08012511
 80145cc:	08014325 	.word	0x08014325
 80145d0:	080160f6 	.word	0x080160f6

080145d4 <__sflush_r>:
 80145d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80145d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145dc:	0716      	lsls	r6, r2, #28
 80145de:	4605      	mov	r5, r0
 80145e0:	460c      	mov	r4, r1
 80145e2:	d454      	bmi.n	801468e <__sflush_r+0xba>
 80145e4:	684b      	ldr	r3, [r1, #4]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	dc02      	bgt.n	80145f0 <__sflush_r+0x1c>
 80145ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	dd48      	ble.n	8014682 <__sflush_r+0xae>
 80145f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80145f2:	2e00      	cmp	r6, #0
 80145f4:	d045      	beq.n	8014682 <__sflush_r+0xae>
 80145f6:	2300      	movs	r3, #0
 80145f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80145fc:	682f      	ldr	r7, [r5, #0]
 80145fe:	6a21      	ldr	r1, [r4, #32]
 8014600:	602b      	str	r3, [r5, #0]
 8014602:	d030      	beq.n	8014666 <__sflush_r+0x92>
 8014604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014606:	89a3      	ldrh	r3, [r4, #12]
 8014608:	0759      	lsls	r1, r3, #29
 801460a:	d505      	bpl.n	8014618 <__sflush_r+0x44>
 801460c:	6863      	ldr	r3, [r4, #4]
 801460e:	1ad2      	subs	r2, r2, r3
 8014610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014612:	b10b      	cbz	r3, 8014618 <__sflush_r+0x44>
 8014614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014616:	1ad2      	subs	r2, r2, r3
 8014618:	2300      	movs	r3, #0
 801461a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801461c:	6a21      	ldr	r1, [r4, #32]
 801461e:	4628      	mov	r0, r5
 8014620:	47b0      	blx	r6
 8014622:	1c43      	adds	r3, r0, #1
 8014624:	89a3      	ldrh	r3, [r4, #12]
 8014626:	d106      	bne.n	8014636 <__sflush_r+0x62>
 8014628:	6829      	ldr	r1, [r5, #0]
 801462a:	291d      	cmp	r1, #29
 801462c:	d82b      	bhi.n	8014686 <__sflush_r+0xb2>
 801462e:	4a2a      	ldr	r2, [pc, #168]	@ (80146d8 <__sflush_r+0x104>)
 8014630:	410a      	asrs	r2, r1
 8014632:	07d6      	lsls	r6, r2, #31
 8014634:	d427      	bmi.n	8014686 <__sflush_r+0xb2>
 8014636:	2200      	movs	r2, #0
 8014638:	6062      	str	r2, [r4, #4]
 801463a:	04d9      	lsls	r1, r3, #19
 801463c:	6922      	ldr	r2, [r4, #16]
 801463e:	6022      	str	r2, [r4, #0]
 8014640:	d504      	bpl.n	801464c <__sflush_r+0x78>
 8014642:	1c42      	adds	r2, r0, #1
 8014644:	d101      	bne.n	801464a <__sflush_r+0x76>
 8014646:	682b      	ldr	r3, [r5, #0]
 8014648:	b903      	cbnz	r3, 801464c <__sflush_r+0x78>
 801464a:	6560      	str	r0, [r4, #84]	@ 0x54
 801464c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801464e:	602f      	str	r7, [r5, #0]
 8014650:	b1b9      	cbz	r1, 8014682 <__sflush_r+0xae>
 8014652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014656:	4299      	cmp	r1, r3
 8014658:	d002      	beq.n	8014660 <__sflush_r+0x8c>
 801465a:	4628      	mov	r0, r5
 801465c:	f7ff fa96 	bl	8013b8c <_free_r>
 8014660:	2300      	movs	r3, #0
 8014662:	6363      	str	r3, [r4, #52]	@ 0x34
 8014664:	e00d      	b.n	8014682 <__sflush_r+0xae>
 8014666:	2301      	movs	r3, #1
 8014668:	4628      	mov	r0, r5
 801466a:	47b0      	blx	r6
 801466c:	4602      	mov	r2, r0
 801466e:	1c50      	adds	r0, r2, #1
 8014670:	d1c9      	bne.n	8014606 <__sflush_r+0x32>
 8014672:	682b      	ldr	r3, [r5, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d0c6      	beq.n	8014606 <__sflush_r+0x32>
 8014678:	2b1d      	cmp	r3, #29
 801467a:	d001      	beq.n	8014680 <__sflush_r+0xac>
 801467c:	2b16      	cmp	r3, #22
 801467e:	d11e      	bne.n	80146be <__sflush_r+0xea>
 8014680:	602f      	str	r7, [r5, #0]
 8014682:	2000      	movs	r0, #0
 8014684:	e022      	b.n	80146cc <__sflush_r+0xf8>
 8014686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801468a:	b21b      	sxth	r3, r3
 801468c:	e01b      	b.n	80146c6 <__sflush_r+0xf2>
 801468e:	690f      	ldr	r7, [r1, #16]
 8014690:	2f00      	cmp	r7, #0
 8014692:	d0f6      	beq.n	8014682 <__sflush_r+0xae>
 8014694:	0793      	lsls	r3, r2, #30
 8014696:	680e      	ldr	r6, [r1, #0]
 8014698:	bf08      	it	eq
 801469a:	694b      	ldreq	r3, [r1, #20]
 801469c:	600f      	str	r7, [r1, #0]
 801469e:	bf18      	it	ne
 80146a0:	2300      	movne	r3, #0
 80146a2:	eba6 0807 	sub.w	r8, r6, r7
 80146a6:	608b      	str	r3, [r1, #8]
 80146a8:	f1b8 0f00 	cmp.w	r8, #0
 80146ac:	dde9      	ble.n	8014682 <__sflush_r+0xae>
 80146ae:	6a21      	ldr	r1, [r4, #32]
 80146b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80146b2:	4643      	mov	r3, r8
 80146b4:	463a      	mov	r2, r7
 80146b6:	4628      	mov	r0, r5
 80146b8:	47b0      	blx	r6
 80146ba:	2800      	cmp	r0, #0
 80146bc:	dc08      	bgt.n	80146d0 <__sflush_r+0xfc>
 80146be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146c6:	81a3      	strh	r3, [r4, #12]
 80146c8:	f04f 30ff 	mov.w	r0, #4294967295
 80146cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d0:	4407      	add	r7, r0
 80146d2:	eba8 0800 	sub.w	r8, r8, r0
 80146d6:	e7e7      	b.n	80146a8 <__sflush_r+0xd4>
 80146d8:	dfbffffe 	.word	0xdfbffffe

080146dc <_fflush_r>:
 80146dc:	b538      	push	{r3, r4, r5, lr}
 80146de:	690b      	ldr	r3, [r1, #16]
 80146e0:	4605      	mov	r5, r0
 80146e2:	460c      	mov	r4, r1
 80146e4:	b913      	cbnz	r3, 80146ec <_fflush_r+0x10>
 80146e6:	2500      	movs	r5, #0
 80146e8:	4628      	mov	r0, r5
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	b118      	cbz	r0, 80146f6 <_fflush_r+0x1a>
 80146ee:	6a03      	ldr	r3, [r0, #32]
 80146f0:	b90b      	cbnz	r3, 80146f6 <_fflush_r+0x1a>
 80146f2:	f7fe fb41 	bl	8012d78 <__sinit>
 80146f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d0f3      	beq.n	80146e6 <_fflush_r+0xa>
 80146fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014700:	07d0      	lsls	r0, r2, #31
 8014702:	d404      	bmi.n	801470e <_fflush_r+0x32>
 8014704:	0599      	lsls	r1, r3, #22
 8014706:	d402      	bmi.n	801470e <_fflush_r+0x32>
 8014708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801470a:	f7fe fc5c 	bl	8012fc6 <__retarget_lock_acquire_recursive>
 801470e:	4628      	mov	r0, r5
 8014710:	4621      	mov	r1, r4
 8014712:	f7ff ff5f 	bl	80145d4 <__sflush_r>
 8014716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014718:	07da      	lsls	r2, r3, #31
 801471a:	4605      	mov	r5, r0
 801471c:	d4e4      	bmi.n	80146e8 <_fflush_r+0xc>
 801471e:	89a3      	ldrh	r3, [r4, #12]
 8014720:	059b      	lsls	r3, r3, #22
 8014722:	d4e1      	bmi.n	80146e8 <_fflush_r+0xc>
 8014724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014726:	f7fe fc4f 	bl	8012fc8 <__retarget_lock_release_recursive>
 801472a:	e7dd      	b.n	80146e8 <_fflush_r+0xc>

0801472c <memmove>:
 801472c:	4288      	cmp	r0, r1
 801472e:	b510      	push	{r4, lr}
 8014730:	eb01 0402 	add.w	r4, r1, r2
 8014734:	d902      	bls.n	801473c <memmove+0x10>
 8014736:	4284      	cmp	r4, r0
 8014738:	4623      	mov	r3, r4
 801473a:	d807      	bhi.n	801474c <memmove+0x20>
 801473c:	1e43      	subs	r3, r0, #1
 801473e:	42a1      	cmp	r1, r4
 8014740:	d008      	beq.n	8014754 <memmove+0x28>
 8014742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014746:	f803 2f01 	strb.w	r2, [r3, #1]!
 801474a:	e7f8      	b.n	801473e <memmove+0x12>
 801474c:	4402      	add	r2, r0
 801474e:	4601      	mov	r1, r0
 8014750:	428a      	cmp	r2, r1
 8014752:	d100      	bne.n	8014756 <memmove+0x2a>
 8014754:	bd10      	pop	{r4, pc}
 8014756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801475a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801475e:	e7f7      	b.n	8014750 <memmove+0x24>

08014760 <memcpy>:
 8014760:	440a      	add	r2, r1
 8014762:	4291      	cmp	r1, r2
 8014764:	f100 33ff 	add.w	r3, r0, #4294967295
 8014768:	d100      	bne.n	801476c <memcpy+0xc>
 801476a:	4770      	bx	lr
 801476c:	b510      	push	{r4, lr}
 801476e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014776:	4291      	cmp	r1, r2
 8014778:	d1f9      	bne.n	801476e <memcpy+0xe>
 801477a:	bd10      	pop	{r4, pc}

0801477c <__assert_func>:
 801477c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801477e:	4614      	mov	r4, r2
 8014780:	461a      	mov	r2, r3
 8014782:	4b09      	ldr	r3, [pc, #36]	@ (80147a8 <__assert_func+0x2c>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	4605      	mov	r5, r0
 8014788:	68d8      	ldr	r0, [r3, #12]
 801478a:	b954      	cbnz	r4, 80147a2 <__assert_func+0x26>
 801478c:	4b07      	ldr	r3, [pc, #28]	@ (80147ac <__assert_func+0x30>)
 801478e:	461c      	mov	r4, r3
 8014790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014794:	9100      	str	r1, [sp, #0]
 8014796:	462b      	mov	r3, r5
 8014798:	4905      	ldr	r1, [pc, #20]	@ (80147b0 <__assert_func+0x34>)
 801479a:	f000 f86f 	bl	801487c <fiprintf>
 801479e:	f000 f87f 	bl	80148a0 <abort>
 80147a2:	4b04      	ldr	r3, [pc, #16]	@ (80147b4 <__assert_func+0x38>)
 80147a4:	e7f4      	b.n	8014790 <__assert_func+0x14>
 80147a6:	bf00      	nop
 80147a8:	24000114 	.word	0x24000114
 80147ac:	08016146 	.word	0x08016146
 80147b0:	08016118 	.word	0x08016118
 80147b4:	0801610b 	.word	0x0801610b

080147b8 <_calloc_r>:
 80147b8:	b570      	push	{r4, r5, r6, lr}
 80147ba:	fba1 5402 	umull	r5, r4, r1, r2
 80147be:	b93c      	cbnz	r4, 80147d0 <_calloc_r+0x18>
 80147c0:	4629      	mov	r1, r5
 80147c2:	f7fd fd89 	bl	80122d8 <_malloc_r>
 80147c6:	4606      	mov	r6, r0
 80147c8:	b928      	cbnz	r0, 80147d6 <_calloc_r+0x1e>
 80147ca:	2600      	movs	r6, #0
 80147cc:	4630      	mov	r0, r6
 80147ce:	bd70      	pop	{r4, r5, r6, pc}
 80147d0:	220c      	movs	r2, #12
 80147d2:	6002      	str	r2, [r0, #0]
 80147d4:	e7f9      	b.n	80147ca <_calloc_r+0x12>
 80147d6:	462a      	mov	r2, r5
 80147d8:	4621      	mov	r1, r4
 80147da:	f7fe fb66 	bl	8012eaa <memset>
 80147de:	e7f5      	b.n	80147cc <_calloc_r+0x14>

080147e0 <__ascii_mbtowc>:
 80147e0:	b082      	sub	sp, #8
 80147e2:	b901      	cbnz	r1, 80147e6 <__ascii_mbtowc+0x6>
 80147e4:	a901      	add	r1, sp, #4
 80147e6:	b142      	cbz	r2, 80147fa <__ascii_mbtowc+0x1a>
 80147e8:	b14b      	cbz	r3, 80147fe <__ascii_mbtowc+0x1e>
 80147ea:	7813      	ldrb	r3, [r2, #0]
 80147ec:	600b      	str	r3, [r1, #0]
 80147ee:	7812      	ldrb	r2, [r2, #0]
 80147f0:	1e10      	subs	r0, r2, #0
 80147f2:	bf18      	it	ne
 80147f4:	2001      	movne	r0, #1
 80147f6:	b002      	add	sp, #8
 80147f8:	4770      	bx	lr
 80147fa:	4610      	mov	r0, r2
 80147fc:	e7fb      	b.n	80147f6 <__ascii_mbtowc+0x16>
 80147fe:	f06f 0001 	mvn.w	r0, #1
 8014802:	e7f8      	b.n	80147f6 <__ascii_mbtowc+0x16>

08014804 <_realloc_r>:
 8014804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014808:	4680      	mov	r8, r0
 801480a:	4615      	mov	r5, r2
 801480c:	460c      	mov	r4, r1
 801480e:	b921      	cbnz	r1, 801481a <_realloc_r+0x16>
 8014810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014814:	4611      	mov	r1, r2
 8014816:	f7fd bd5f 	b.w	80122d8 <_malloc_r>
 801481a:	b92a      	cbnz	r2, 8014828 <_realloc_r+0x24>
 801481c:	f7ff f9b6 	bl	8013b8c <_free_r>
 8014820:	2400      	movs	r4, #0
 8014822:	4620      	mov	r0, r4
 8014824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014828:	f000 f841 	bl	80148ae <_malloc_usable_size_r>
 801482c:	4285      	cmp	r5, r0
 801482e:	4606      	mov	r6, r0
 8014830:	d802      	bhi.n	8014838 <_realloc_r+0x34>
 8014832:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014836:	d8f4      	bhi.n	8014822 <_realloc_r+0x1e>
 8014838:	4629      	mov	r1, r5
 801483a:	4640      	mov	r0, r8
 801483c:	f7fd fd4c 	bl	80122d8 <_malloc_r>
 8014840:	4607      	mov	r7, r0
 8014842:	2800      	cmp	r0, #0
 8014844:	d0ec      	beq.n	8014820 <_realloc_r+0x1c>
 8014846:	42b5      	cmp	r5, r6
 8014848:	462a      	mov	r2, r5
 801484a:	4621      	mov	r1, r4
 801484c:	bf28      	it	cs
 801484e:	4632      	movcs	r2, r6
 8014850:	f7ff ff86 	bl	8014760 <memcpy>
 8014854:	4621      	mov	r1, r4
 8014856:	4640      	mov	r0, r8
 8014858:	f7ff f998 	bl	8013b8c <_free_r>
 801485c:	463c      	mov	r4, r7
 801485e:	e7e0      	b.n	8014822 <_realloc_r+0x1e>

08014860 <__ascii_wctomb>:
 8014860:	4603      	mov	r3, r0
 8014862:	4608      	mov	r0, r1
 8014864:	b141      	cbz	r1, 8014878 <__ascii_wctomb+0x18>
 8014866:	2aff      	cmp	r2, #255	@ 0xff
 8014868:	d904      	bls.n	8014874 <__ascii_wctomb+0x14>
 801486a:	228a      	movs	r2, #138	@ 0x8a
 801486c:	601a      	str	r2, [r3, #0]
 801486e:	f04f 30ff 	mov.w	r0, #4294967295
 8014872:	4770      	bx	lr
 8014874:	700a      	strb	r2, [r1, #0]
 8014876:	2001      	movs	r0, #1
 8014878:	4770      	bx	lr
	...

0801487c <fiprintf>:
 801487c:	b40e      	push	{r1, r2, r3}
 801487e:	b503      	push	{r0, r1, lr}
 8014880:	4601      	mov	r1, r0
 8014882:	ab03      	add	r3, sp, #12
 8014884:	4805      	ldr	r0, [pc, #20]	@ (801489c <fiprintf+0x20>)
 8014886:	f853 2b04 	ldr.w	r2, [r3], #4
 801488a:	6800      	ldr	r0, [r0, #0]
 801488c:	9301      	str	r3, [sp, #4]
 801488e:	f000 f83f 	bl	8014910 <_vfiprintf_r>
 8014892:	b002      	add	sp, #8
 8014894:	f85d eb04 	ldr.w	lr, [sp], #4
 8014898:	b003      	add	sp, #12
 801489a:	4770      	bx	lr
 801489c:	24000114 	.word	0x24000114

080148a0 <abort>:
 80148a0:	b508      	push	{r3, lr}
 80148a2:	2006      	movs	r0, #6
 80148a4:	f000 fa08 	bl	8014cb8 <raise>
 80148a8:	2001      	movs	r0, #1
 80148aa:	f7ec fde5 	bl	8001478 <_exit>

080148ae <_malloc_usable_size_r>:
 80148ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148b2:	1f18      	subs	r0, r3, #4
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	bfbc      	itt	lt
 80148b8:	580b      	ldrlt	r3, [r1, r0]
 80148ba:	18c0      	addlt	r0, r0, r3
 80148bc:	4770      	bx	lr

080148be <__sfputc_r>:
 80148be:	6893      	ldr	r3, [r2, #8]
 80148c0:	3b01      	subs	r3, #1
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	b410      	push	{r4}
 80148c6:	6093      	str	r3, [r2, #8]
 80148c8:	da08      	bge.n	80148dc <__sfputc_r+0x1e>
 80148ca:	6994      	ldr	r4, [r2, #24]
 80148cc:	42a3      	cmp	r3, r4
 80148ce:	db01      	blt.n	80148d4 <__sfputc_r+0x16>
 80148d0:	290a      	cmp	r1, #10
 80148d2:	d103      	bne.n	80148dc <__sfputc_r+0x1e>
 80148d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148d8:	f000 b932 	b.w	8014b40 <__swbuf_r>
 80148dc:	6813      	ldr	r3, [r2, #0]
 80148de:	1c58      	adds	r0, r3, #1
 80148e0:	6010      	str	r0, [r2, #0]
 80148e2:	7019      	strb	r1, [r3, #0]
 80148e4:	4608      	mov	r0, r1
 80148e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148ea:	4770      	bx	lr

080148ec <__sfputs_r>:
 80148ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ee:	4606      	mov	r6, r0
 80148f0:	460f      	mov	r7, r1
 80148f2:	4614      	mov	r4, r2
 80148f4:	18d5      	adds	r5, r2, r3
 80148f6:	42ac      	cmp	r4, r5
 80148f8:	d101      	bne.n	80148fe <__sfputs_r+0x12>
 80148fa:	2000      	movs	r0, #0
 80148fc:	e007      	b.n	801490e <__sfputs_r+0x22>
 80148fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014902:	463a      	mov	r2, r7
 8014904:	4630      	mov	r0, r6
 8014906:	f7ff ffda 	bl	80148be <__sfputc_r>
 801490a:	1c43      	adds	r3, r0, #1
 801490c:	d1f3      	bne.n	80148f6 <__sfputs_r+0xa>
 801490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014910 <_vfiprintf_r>:
 8014910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014914:	460d      	mov	r5, r1
 8014916:	b09d      	sub	sp, #116	@ 0x74
 8014918:	4614      	mov	r4, r2
 801491a:	4698      	mov	r8, r3
 801491c:	4606      	mov	r6, r0
 801491e:	b118      	cbz	r0, 8014928 <_vfiprintf_r+0x18>
 8014920:	6a03      	ldr	r3, [r0, #32]
 8014922:	b90b      	cbnz	r3, 8014928 <_vfiprintf_r+0x18>
 8014924:	f7fe fa28 	bl	8012d78 <__sinit>
 8014928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801492a:	07d9      	lsls	r1, r3, #31
 801492c:	d405      	bmi.n	801493a <_vfiprintf_r+0x2a>
 801492e:	89ab      	ldrh	r3, [r5, #12]
 8014930:	059a      	lsls	r2, r3, #22
 8014932:	d402      	bmi.n	801493a <_vfiprintf_r+0x2a>
 8014934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014936:	f7fe fb46 	bl	8012fc6 <__retarget_lock_acquire_recursive>
 801493a:	89ab      	ldrh	r3, [r5, #12]
 801493c:	071b      	lsls	r3, r3, #28
 801493e:	d501      	bpl.n	8014944 <_vfiprintf_r+0x34>
 8014940:	692b      	ldr	r3, [r5, #16]
 8014942:	b99b      	cbnz	r3, 801496c <_vfiprintf_r+0x5c>
 8014944:	4629      	mov	r1, r5
 8014946:	4630      	mov	r0, r6
 8014948:	f000 f938 	bl	8014bbc <__swsetup_r>
 801494c:	b170      	cbz	r0, 801496c <_vfiprintf_r+0x5c>
 801494e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014950:	07dc      	lsls	r4, r3, #31
 8014952:	d504      	bpl.n	801495e <_vfiprintf_r+0x4e>
 8014954:	f04f 30ff 	mov.w	r0, #4294967295
 8014958:	b01d      	add	sp, #116	@ 0x74
 801495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801495e:	89ab      	ldrh	r3, [r5, #12]
 8014960:	0598      	lsls	r0, r3, #22
 8014962:	d4f7      	bmi.n	8014954 <_vfiprintf_r+0x44>
 8014964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014966:	f7fe fb2f 	bl	8012fc8 <__retarget_lock_release_recursive>
 801496a:	e7f3      	b.n	8014954 <_vfiprintf_r+0x44>
 801496c:	2300      	movs	r3, #0
 801496e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014970:	2320      	movs	r3, #32
 8014972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014976:	f8cd 800c 	str.w	r8, [sp, #12]
 801497a:	2330      	movs	r3, #48	@ 0x30
 801497c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014b2c <_vfiprintf_r+0x21c>
 8014980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014984:	f04f 0901 	mov.w	r9, #1
 8014988:	4623      	mov	r3, r4
 801498a:	469a      	mov	sl, r3
 801498c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014990:	b10a      	cbz	r2, 8014996 <_vfiprintf_r+0x86>
 8014992:	2a25      	cmp	r2, #37	@ 0x25
 8014994:	d1f9      	bne.n	801498a <_vfiprintf_r+0x7a>
 8014996:	ebba 0b04 	subs.w	fp, sl, r4
 801499a:	d00b      	beq.n	80149b4 <_vfiprintf_r+0xa4>
 801499c:	465b      	mov	r3, fp
 801499e:	4622      	mov	r2, r4
 80149a0:	4629      	mov	r1, r5
 80149a2:	4630      	mov	r0, r6
 80149a4:	f7ff ffa2 	bl	80148ec <__sfputs_r>
 80149a8:	3001      	adds	r0, #1
 80149aa:	f000 80a7 	beq.w	8014afc <_vfiprintf_r+0x1ec>
 80149ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80149b0:	445a      	add	r2, fp
 80149b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80149b4:	f89a 3000 	ldrb.w	r3, [sl]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	f000 809f 	beq.w	8014afc <_vfiprintf_r+0x1ec>
 80149be:	2300      	movs	r3, #0
 80149c0:	f04f 32ff 	mov.w	r2, #4294967295
 80149c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149c8:	f10a 0a01 	add.w	sl, sl, #1
 80149cc:	9304      	str	r3, [sp, #16]
 80149ce:	9307      	str	r3, [sp, #28]
 80149d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80149d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80149d6:	4654      	mov	r4, sl
 80149d8:	2205      	movs	r2, #5
 80149da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149de:	4853      	ldr	r0, [pc, #332]	@ (8014b2c <_vfiprintf_r+0x21c>)
 80149e0:	f7eb fc7e 	bl	80002e0 <memchr>
 80149e4:	9a04      	ldr	r2, [sp, #16]
 80149e6:	b9d8      	cbnz	r0, 8014a20 <_vfiprintf_r+0x110>
 80149e8:	06d1      	lsls	r1, r2, #27
 80149ea:	bf44      	itt	mi
 80149ec:	2320      	movmi	r3, #32
 80149ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80149f2:	0713      	lsls	r3, r2, #28
 80149f4:	bf44      	itt	mi
 80149f6:	232b      	movmi	r3, #43	@ 0x2b
 80149f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80149fc:	f89a 3000 	ldrb.w	r3, [sl]
 8014a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8014a02:	d015      	beq.n	8014a30 <_vfiprintf_r+0x120>
 8014a04:	9a07      	ldr	r2, [sp, #28]
 8014a06:	4654      	mov	r4, sl
 8014a08:	2000      	movs	r0, #0
 8014a0a:	f04f 0c0a 	mov.w	ip, #10
 8014a0e:	4621      	mov	r1, r4
 8014a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a14:	3b30      	subs	r3, #48	@ 0x30
 8014a16:	2b09      	cmp	r3, #9
 8014a18:	d94b      	bls.n	8014ab2 <_vfiprintf_r+0x1a2>
 8014a1a:	b1b0      	cbz	r0, 8014a4a <_vfiprintf_r+0x13a>
 8014a1c:	9207      	str	r2, [sp, #28]
 8014a1e:	e014      	b.n	8014a4a <_vfiprintf_r+0x13a>
 8014a20:	eba0 0308 	sub.w	r3, r0, r8
 8014a24:	fa09 f303 	lsl.w	r3, r9, r3
 8014a28:	4313      	orrs	r3, r2
 8014a2a:	9304      	str	r3, [sp, #16]
 8014a2c:	46a2      	mov	sl, r4
 8014a2e:	e7d2      	b.n	80149d6 <_vfiprintf_r+0xc6>
 8014a30:	9b03      	ldr	r3, [sp, #12]
 8014a32:	1d19      	adds	r1, r3, #4
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	9103      	str	r1, [sp, #12]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	bfbb      	ittet	lt
 8014a3c:	425b      	neglt	r3, r3
 8014a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8014a42:	9307      	strge	r3, [sp, #28]
 8014a44:	9307      	strlt	r3, [sp, #28]
 8014a46:	bfb8      	it	lt
 8014a48:	9204      	strlt	r2, [sp, #16]
 8014a4a:	7823      	ldrb	r3, [r4, #0]
 8014a4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8014a4e:	d10a      	bne.n	8014a66 <_vfiprintf_r+0x156>
 8014a50:	7863      	ldrb	r3, [r4, #1]
 8014a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8014a54:	d132      	bne.n	8014abc <_vfiprintf_r+0x1ac>
 8014a56:	9b03      	ldr	r3, [sp, #12]
 8014a58:	1d1a      	adds	r2, r3, #4
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	9203      	str	r2, [sp, #12]
 8014a5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014a62:	3402      	adds	r4, #2
 8014a64:	9305      	str	r3, [sp, #20]
 8014a66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014b3c <_vfiprintf_r+0x22c>
 8014a6a:	7821      	ldrb	r1, [r4, #0]
 8014a6c:	2203      	movs	r2, #3
 8014a6e:	4650      	mov	r0, sl
 8014a70:	f7eb fc36 	bl	80002e0 <memchr>
 8014a74:	b138      	cbz	r0, 8014a86 <_vfiprintf_r+0x176>
 8014a76:	9b04      	ldr	r3, [sp, #16]
 8014a78:	eba0 000a 	sub.w	r0, r0, sl
 8014a7c:	2240      	movs	r2, #64	@ 0x40
 8014a7e:	4082      	lsls	r2, r0
 8014a80:	4313      	orrs	r3, r2
 8014a82:	3401      	adds	r4, #1
 8014a84:	9304      	str	r3, [sp, #16]
 8014a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a8a:	4829      	ldr	r0, [pc, #164]	@ (8014b30 <_vfiprintf_r+0x220>)
 8014a8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014a90:	2206      	movs	r2, #6
 8014a92:	f7eb fc25 	bl	80002e0 <memchr>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	d03f      	beq.n	8014b1a <_vfiprintf_r+0x20a>
 8014a9a:	4b26      	ldr	r3, [pc, #152]	@ (8014b34 <_vfiprintf_r+0x224>)
 8014a9c:	bb1b      	cbnz	r3, 8014ae6 <_vfiprintf_r+0x1d6>
 8014a9e:	9b03      	ldr	r3, [sp, #12]
 8014aa0:	3307      	adds	r3, #7
 8014aa2:	f023 0307 	bic.w	r3, r3, #7
 8014aa6:	3308      	adds	r3, #8
 8014aa8:	9303      	str	r3, [sp, #12]
 8014aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014aac:	443b      	add	r3, r7
 8014aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ab0:	e76a      	b.n	8014988 <_vfiprintf_r+0x78>
 8014ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ab6:	460c      	mov	r4, r1
 8014ab8:	2001      	movs	r0, #1
 8014aba:	e7a8      	b.n	8014a0e <_vfiprintf_r+0xfe>
 8014abc:	2300      	movs	r3, #0
 8014abe:	3401      	adds	r4, #1
 8014ac0:	9305      	str	r3, [sp, #20]
 8014ac2:	4619      	mov	r1, r3
 8014ac4:	f04f 0c0a 	mov.w	ip, #10
 8014ac8:	4620      	mov	r0, r4
 8014aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ace:	3a30      	subs	r2, #48	@ 0x30
 8014ad0:	2a09      	cmp	r2, #9
 8014ad2:	d903      	bls.n	8014adc <_vfiprintf_r+0x1cc>
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d0c6      	beq.n	8014a66 <_vfiprintf_r+0x156>
 8014ad8:	9105      	str	r1, [sp, #20]
 8014ada:	e7c4      	b.n	8014a66 <_vfiprintf_r+0x156>
 8014adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ae0:	4604      	mov	r4, r0
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	e7f0      	b.n	8014ac8 <_vfiprintf_r+0x1b8>
 8014ae6:	ab03      	add	r3, sp, #12
 8014ae8:	9300      	str	r3, [sp, #0]
 8014aea:	462a      	mov	r2, r5
 8014aec:	4b12      	ldr	r3, [pc, #72]	@ (8014b38 <_vfiprintf_r+0x228>)
 8014aee:	a904      	add	r1, sp, #16
 8014af0:	4630      	mov	r0, r6
 8014af2:	f7fd fd0d 	bl	8012510 <_printf_float>
 8014af6:	4607      	mov	r7, r0
 8014af8:	1c78      	adds	r0, r7, #1
 8014afa:	d1d6      	bne.n	8014aaa <_vfiprintf_r+0x19a>
 8014afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014afe:	07d9      	lsls	r1, r3, #31
 8014b00:	d405      	bmi.n	8014b0e <_vfiprintf_r+0x1fe>
 8014b02:	89ab      	ldrh	r3, [r5, #12]
 8014b04:	059a      	lsls	r2, r3, #22
 8014b06:	d402      	bmi.n	8014b0e <_vfiprintf_r+0x1fe>
 8014b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b0a:	f7fe fa5d 	bl	8012fc8 <__retarget_lock_release_recursive>
 8014b0e:	89ab      	ldrh	r3, [r5, #12]
 8014b10:	065b      	lsls	r3, r3, #25
 8014b12:	f53f af1f 	bmi.w	8014954 <_vfiprintf_r+0x44>
 8014b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014b18:	e71e      	b.n	8014958 <_vfiprintf_r+0x48>
 8014b1a:	ab03      	add	r3, sp, #12
 8014b1c:	9300      	str	r3, [sp, #0]
 8014b1e:	462a      	mov	r2, r5
 8014b20:	4b05      	ldr	r3, [pc, #20]	@ (8014b38 <_vfiprintf_r+0x228>)
 8014b22:	a904      	add	r1, sp, #16
 8014b24:	4630      	mov	r0, r6
 8014b26:	f7fd ff7b 	bl	8012a20 <_printf_i>
 8014b2a:	e7e4      	b.n	8014af6 <_vfiprintf_r+0x1e6>
 8014b2c:	080160f0 	.word	0x080160f0
 8014b30:	080160fa 	.word	0x080160fa
 8014b34:	08012511 	.word	0x08012511
 8014b38:	080148ed 	.word	0x080148ed
 8014b3c:	080160f6 	.word	0x080160f6

08014b40 <__swbuf_r>:
 8014b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b42:	460e      	mov	r6, r1
 8014b44:	4614      	mov	r4, r2
 8014b46:	4605      	mov	r5, r0
 8014b48:	b118      	cbz	r0, 8014b52 <__swbuf_r+0x12>
 8014b4a:	6a03      	ldr	r3, [r0, #32]
 8014b4c:	b90b      	cbnz	r3, 8014b52 <__swbuf_r+0x12>
 8014b4e:	f7fe f913 	bl	8012d78 <__sinit>
 8014b52:	69a3      	ldr	r3, [r4, #24]
 8014b54:	60a3      	str	r3, [r4, #8]
 8014b56:	89a3      	ldrh	r3, [r4, #12]
 8014b58:	071a      	lsls	r2, r3, #28
 8014b5a:	d501      	bpl.n	8014b60 <__swbuf_r+0x20>
 8014b5c:	6923      	ldr	r3, [r4, #16]
 8014b5e:	b943      	cbnz	r3, 8014b72 <__swbuf_r+0x32>
 8014b60:	4621      	mov	r1, r4
 8014b62:	4628      	mov	r0, r5
 8014b64:	f000 f82a 	bl	8014bbc <__swsetup_r>
 8014b68:	b118      	cbz	r0, 8014b72 <__swbuf_r+0x32>
 8014b6a:	f04f 37ff 	mov.w	r7, #4294967295
 8014b6e:	4638      	mov	r0, r7
 8014b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b72:	6823      	ldr	r3, [r4, #0]
 8014b74:	6922      	ldr	r2, [r4, #16]
 8014b76:	1a98      	subs	r0, r3, r2
 8014b78:	6963      	ldr	r3, [r4, #20]
 8014b7a:	b2f6      	uxtb	r6, r6
 8014b7c:	4283      	cmp	r3, r0
 8014b7e:	4637      	mov	r7, r6
 8014b80:	dc05      	bgt.n	8014b8e <__swbuf_r+0x4e>
 8014b82:	4621      	mov	r1, r4
 8014b84:	4628      	mov	r0, r5
 8014b86:	f7ff fda9 	bl	80146dc <_fflush_r>
 8014b8a:	2800      	cmp	r0, #0
 8014b8c:	d1ed      	bne.n	8014b6a <__swbuf_r+0x2a>
 8014b8e:	68a3      	ldr	r3, [r4, #8]
 8014b90:	3b01      	subs	r3, #1
 8014b92:	60a3      	str	r3, [r4, #8]
 8014b94:	6823      	ldr	r3, [r4, #0]
 8014b96:	1c5a      	adds	r2, r3, #1
 8014b98:	6022      	str	r2, [r4, #0]
 8014b9a:	701e      	strb	r6, [r3, #0]
 8014b9c:	6962      	ldr	r2, [r4, #20]
 8014b9e:	1c43      	adds	r3, r0, #1
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	d004      	beq.n	8014bae <__swbuf_r+0x6e>
 8014ba4:	89a3      	ldrh	r3, [r4, #12]
 8014ba6:	07db      	lsls	r3, r3, #31
 8014ba8:	d5e1      	bpl.n	8014b6e <__swbuf_r+0x2e>
 8014baa:	2e0a      	cmp	r6, #10
 8014bac:	d1df      	bne.n	8014b6e <__swbuf_r+0x2e>
 8014bae:	4621      	mov	r1, r4
 8014bb0:	4628      	mov	r0, r5
 8014bb2:	f7ff fd93 	bl	80146dc <_fflush_r>
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	d0d9      	beq.n	8014b6e <__swbuf_r+0x2e>
 8014bba:	e7d6      	b.n	8014b6a <__swbuf_r+0x2a>

08014bbc <__swsetup_r>:
 8014bbc:	b538      	push	{r3, r4, r5, lr}
 8014bbe:	4b29      	ldr	r3, [pc, #164]	@ (8014c64 <__swsetup_r+0xa8>)
 8014bc0:	4605      	mov	r5, r0
 8014bc2:	6818      	ldr	r0, [r3, #0]
 8014bc4:	460c      	mov	r4, r1
 8014bc6:	b118      	cbz	r0, 8014bd0 <__swsetup_r+0x14>
 8014bc8:	6a03      	ldr	r3, [r0, #32]
 8014bca:	b90b      	cbnz	r3, 8014bd0 <__swsetup_r+0x14>
 8014bcc:	f7fe f8d4 	bl	8012d78 <__sinit>
 8014bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bd4:	0719      	lsls	r1, r3, #28
 8014bd6:	d422      	bmi.n	8014c1e <__swsetup_r+0x62>
 8014bd8:	06da      	lsls	r2, r3, #27
 8014bda:	d407      	bmi.n	8014bec <__swsetup_r+0x30>
 8014bdc:	2209      	movs	r2, #9
 8014bde:	602a      	str	r2, [r5, #0]
 8014be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014be4:	81a3      	strh	r3, [r4, #12]
 8014be6:	f04f 30ff 	mov.w	r0, #4294967295
 8014bea:	e033      	b.n	8014c54 <__swsetup_r+0x98>
 8014bec:	0758      	lsls	r0, r3, #29
 8014bee:	d512      	bpl.n	8014c16 <__swsetup_r+0x5a>
 8014bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014bf2:	b141      	cbz	r1, 8014c06 <__swsetup_r+0x4a>
 8014bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014bf8:	4299      	cmp	r1, r3
 8014bfa:	d002      	beq.n	8014c02 <__swsetup_r+0x46>
 8014bfc:	4628      	mov	r0, r5
 8014bfe:	f7fe ffc5 	bl	8013b8c <_free_r>
 8014c02:	2300      	movs	r3, #0
 8014c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8014c06:	89a3      	ldrh	r3, [r4, #12]
 8014c08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014c0c:	81a3      	strh	r3, [r4, #12]
 8014c0e:	2300      	movs	r3, #0
 8014c10:	6063      	str	r3, [r4, #4]
 8014c12:	6923      	ldr	r3, [r4, #16]
 8014c14:	6023      	str	r3, [r4, #0]
 8014c16:	89a3      	ldrh	r3, [r4, #12]
 8014c18:	f043 0308 	orr.w	r3, r3, #8
 8014c1c:	81a3      	strh	r3, [r4, #12]
 8014c1e:	6923      	ldr	r3, [r4, #16]
 8014c20:	b94b      	cbnz	r3, 8014c36 <__swsetup_r+0x7a>
 8014c22:	89a3      	ldrh	r3, [r4, #12]
 8014c24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014c2c:	d003      	beq.n	8014c36 <__swsetup_r+0x7a>
 8014c2e:	4621      	mov	r1, r4
 8014c30:	4628      	mov	r0, r5
 8014c32:	f000 f883 	bl	8014d3c <__smakebuf_r>
 8014c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c3a:	f013 0201 	ands.w	r2, r3, #1
 8014c3e:	d00a      	beq.n	8014c56 <__swsetup_r+0x9a>
 8014c40:	2200      	movs	r2, #0
 8014c42:	60a2      	str	r2, [r4, #8]
 8014c44:	6962      	ldr	r2, [r4, #20]
 8014c46:	4252      	negs	r2, r2
 8014c48:	61a2      	str	r2, [r4, #24]
 8014c4a:	6922      	ldr	r2, [r4, #16]
 8014c4c:	b942      	cbnz	r2, 8014c60 <__swsetup_r+0xa4>
 8014c4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014c52:	d1c5      	bne.n	8014be0 <__swsetup_r+0x24>
 8014c54:	bd38      	pop	{r3, r4, r5, pc}
 8014c56:	0799      	lsls	r1, r3, #30
 8014c58:	bf58      	it	pl
 8014c5a:	6962      	ldrpl	r2, [r4, #20]
 8014c5c:	60a2      	str	r2, [r4, #8]
 8014c5e:	e7f4      	b.n	8014c4a <__swsetup_r+0x8e>
 8014c60:	2000      	movs	r0, #0
 8014c62:	e7f7      	b.n	8014c54 <__swsetup_r+0x98>
 8014c64:	24000114 	.word	0x24000114

08014c68 <_raise_r>:
 8014c68:	291f      	cmp	r1, #31
 8014c6a:	b538      	push	{r3, r4, r5, lr}
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	460c      	mov	r4, r1
 8014c70:	d904      	bls.n	8014c7c <_raise_r+0x14>
 8014c72:	2316      	movs	r3, #22
 8014c74:	6003      	str	r3, [r0, #0]
 8014c76:	f04f 30ff 	mov.w	r0, #4294967295
 8014c7a:	bd38      	pop	{r3, r4, r5, pc}
 8014c7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014c7e:	b112      	cbz	r2, 8014c86 <_raise_r+0x1e>
 8014c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c84:	b94b      	cbnz	r3, 8014c9a <_raise_r+0x32>
 8014c86:	4628      	mov	r0, r5
 8014c88:	f000 f830 	bl	8014cec <_getpid_r>
 8014c8c:	4622      	mov	r2, r4
 8014c8e:	4601      	mov	r1, r0
 8014c90:	4628      	mov	r0, r5
 8014c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c96:	f000 b817 	b.w	8014cc8 <_kill_r>
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d00a      	beq.n	8014cb4 <_raise_r+0x4c>
 8014c9e:	1c59      	adds	r1, r3, #1
 8014ca0:	d103      	bne.n	8014caa <_raise_r+0x42>
 8014ca2:	2316      	movs	r3, #22
 8014ca4:	6003      	str	r3, [r0, #0]
 8014ca6:	2001      	movs	r0, #1
 8014ca8:	e7e7      	b.n	8014c7a <_raise_r+0x12>
 8014caa:	2100      	movs	r1, #0
 8014cac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	4798      	blx	r3
 8014cb4:	2000      	movs	r0, #0
 8014cb6:	e7e0      	b.n	8014c7a <_raise_r+0x12>

08014cb8 <raise>:
 8014cb8:	4b02      	ldr	r3, [pc, #8]	@ (8014cc4 <raise+0xc>)
 8014cba:	4601      	mov	r1, r0
 8014cbc:	6818      	ldr	r0, [r3, #0]
 8014cbe:	f7ff bfd3 	b.w	8014c68 <_raise_r>
 8014cc2:	bf00      	nop
 8014cc4:	24000114 	.word	0x24000114

08014cc8 <_kill_r>:
 8014cc8:	b538      	push	{r3, r4, r5, lr}
 8014cca:	4d07      	ldr	r5, [pc, #28]	@ (8014ce8 <_kill_r+0x20>)
 8014ccc:	2300      	movs	r3, #0
 8014cce:	4604      	mov	r4, r0
 8014cd0:	4608      	mov	r0, r1
 8014cd2:	4611      	mov	r1, r2
 8014cd4:	602b      	str	r3, [r5, #0]
 8014cd6:	f7ec fbbf 	bl	8001458 <_kill>
 8014cda:	1c43      	adds	r3, r0, #1
 8014cdc:	d102      	bne.n	8014ce4 <_kill_r+0x1c>
 8014cde:	682b      	ldr	r3, [r5, #0]
 8014ce0:	b103      	cbz	r3, 8014ce4 <_kill_r+0x1c>
 8014ce2:	6023      	str	r3, [r4, #0]
 8014ce4:	bd38      	pop	{r3, r4, r5, pc}
 8014ce6:	bf00      	nop
 8014ce8:	24002374 	.word	0x24002374

08014cec <_getpid_r>:
 8014cec:	f7ec bbac 	b.w	8001448 <_getpid>

08014cf0 <__swhatbuf_r>:
 8014cf0:	b570      	push	{r4, r5, r6, lr}
 8014cf2:	460c      	mov	r4, r1
 8014cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cf8:	2900      	cmp	r1, #0
 8014cfa:	b096      	sub	sp, #88	@ 0x58
 8014cfc:	4615      	mov	r5, r2
 8014cfe:	461e      	mov	r6, r3
 8014d00:	da0d      	bge.n	8014d1e <__swhatbuf_r+0x2e>
 8014d02:	89a3      	ldrh	r3, [r4, #12]
 8014d04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014d08:	f04f 0100 	mov.w	r1, #0
 8014d0c:	bf14      	ite	ne
 8014d0e:	2340      	movne	r3, #64	@ 0x40
 8014d10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014d14:	2000      	movs	r0, #0
 8014d16:	6031      	str	r1, [r6, #0]
 8014d18:	602b      	str	r3, [r5, #0]
 8014d1a:	b016      	add	sp, #88	@ 0x58
 8014d1c:	bd70      	pop	{r4, r5, r6, pc}
 8014d1e:	466a      	mov	r2, sp
 8014d20:	f000 f848 	bl	8014db4 <_fstat_r>
 8014d24:	2800      	cmp	r0, #0
 8014d26:	dbec      	blt.n	8014d02 <__swhatbuf_r+0x12>
 8014d28:	9901      	ldr	r1, [sp, #4]
 8014d2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014d2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014d32:	4259      	negs	r1, r3
 8014d34:	4159      	adcs	r1, r3
 8014d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014d3a:	e7eb      	b.n	8014d14 <__swhatbuf_r+0x24>

08014d3c <__smakebuf_r>:
 8014d3c:	898b      	ldrh	r3, [r1, #12]
 8014d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d40:	079d      	lsls	r5, r3, #30
 8014d42:	4606      	mov	r6, r0
 8014d44:	460c      	mov	r4, r1
 8014d46:	d507      	bpl.n	8014d58 <__smakebuf_r+0x1c>
 8014d48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014d4c:	6023      	str	r3, [r4, #0]
 8014d4e:	6123      	str	r3, [r4, #16]
 8014d50:	2301      	movs	r3, #1
 8014d52:	6163      	str	r3, [r4, #20]
 8014d54:	b003      	add	sp, #12
 8014d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d58:	ab01      	add	r3, sp, #4
 8014d5a:	466a      	mov	r2, sp
 8014d5c:	f7ff ffc8 	bl	8014cf0 <__swhatbuf_r>
 8014d60:	9f00      	ldr	r7, [sp, #0]
 8014d62:	4605      	mov	r5, r0
 8014d64:	4639      	mov	r1, r7
 8014d66:	4630      	mov	r0, r6
 8014d68:	f7fd fab6 	bl	80122d8 <_malloc_r>
 8014d6c:	b948      	cbnz	r0, 8014d82 <__smakebuf_r+0x46>
 8014d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d72:	059a      	lsls	r2, r3, #22
 8014d74:	d4ee      	bmi.n	8014d54 <__smakebuf_r+0x18>
 8014d76:	f023 0303 	bic.w	r3, r3, #3
 8014d7a:	f043 0302 	orr.w	r3, r3, #2
 8014d7e:	81a3      	strh	r3, [r4, #12]
 8014d80:	e7e2      	b.n	8014d48 <__smakebuf_r+0xc>
 8014d82:	89a3      	ldrh	r3, [r4, #12]
 8014d84:	6020      	str	r0, [r4, #0]
 8014d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d8a:	81a3      	strh	r3, [r4, #12]
 8014d8c:	9b01      	ldr	r3, [sp, #4]
 8014d8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014d92:	b15b      	cbz	r3, 8014dac <__smakebuf_r+0x70>
 8014d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d98:	4630      	mov	r0, r6
 8014d9a:	f000 f81d 	bl	8014dd8 <_isatty_r>
 8014d9e:	b128      	cbz	r0, 8014dac <__smakebuf_r+0x70>
 8014da0:	89a3      	ldrh	r3, [r4, #12]
 8014da2:	f023 0303 	bic.w	r3, r3, #3
 8014da6:	f043 0301 	orr.w	r3, r3, #1
 8014daa:	81a3      	strh	r3, [r4, #12]
 8014dac:	89a3      	ldrh	r3, [r4, #12]
 8014dae:	431d      	orrs	r5, r3
 8014db0:	81a5      	strh	r5, [r4, #12]
 8014db2:	e7cf      	b.n	8014d54 <__smakebuf_r+0x18>

08014db4 <_fstat_r>:
 8014db4:	b538      	push	{r3, r4, r5, lr}
 8014db6:	4d07      	ldr	r5, [pc, #28]	@ (8014dd4 <_fstat_r+0x20>)
 8014db8:	2300      	movs	r3, #0
 8014dba:	4604      	mov	r4, r0
 8014dbc:	4608      	mov	r0, r1
 8014dbe:	4611      	mov	r1, r2
 8014dc0:	602b      	str	r3, [r5, #0]
 8014dc2:	f7ec fba9 	bl	8001518 <_fstat>
 8014dc6:	1c43      	adds	r3, r0, #1
 8014dc8:	d102      	bne.n	8014dd0 <_fstat_r+0x1c>
 8014dca:	682b      	ldr	r3, [r5, #0]
 8014dcc:	b103      	cbz	r3, 8014dd0 <_fstat_r+0x1c>
 8014dce:	6023      	str	r3, [r4, #0]
 8014dd0:	bd38      	pop	{r3, r4, r5, pc}
 8014dd2:	bf00      	nop
 8014dd4:	24002374 	.word	0x24002374

08014dd8 <_isatty_r>:
 8014dd8:	b538      	push	{r3, r4, r5, lr}
 8014dda:	4d06      	ldr	r5, [pc, #24]	@ (8014df4 <_isatty_r+0x1c>)
 8014ddc:	2300      	movs	r3, #0
 8014dde:	4604      	mov	r4, r0
 8014de0:	4608      	mov	r0, r1
 8014de2:	602b      	str	r3, [r5, #0]
 8014de4:	f7ec fba8 	bl	8001538 <_isatty>
 8014de8:	1c43      	adds	r3, r0, #1
 8014dea:	d102      	bne.n	8014df2 <_isatty_r+0x1a>
 8014dec:	682b      	ldr	r3, [r5, #0]
 8014dee:	b103      	cbz	r3, 8014df2 <_isatty_r+0x1a>
 8014df0:	6023      	str	r3, [r4, #0]
 8014df2:	bd38      	pop	{r3, r4, r5, pc}
 8014df4:	24002374 	.word	0x24002374

08014df8 <fmod>:
 8014df8:	b508      	push	{r3, lr}
 8014dfa:	ed2d 8b04 	vpush	{d8-d9}
 8014dfe:	eeb0 9b40 	vmov.f64	d9, d0
 8014e02:	eeb0 8b41 	vmov.f64	d8, d1
 8014e06:	f000 f81b 	bl	8014e40 <__ieee754_fmod>
 8014e0a:	eeb4 9b48 	vcmp.f64	d9, d8
 8014e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e12:	d60c      	bvs.n	8014e2e <fmod+0x36>
 8014e14:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014e38 <fmod+0x40>
 8014e18:	eeb4 8b49 	vcmp.f64	d8, d9
 8014e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e20:	d105      	bne.n	8014e2e <fmod+0x36>
 8014e22:	f7fe f8a5 	bl	8012f70 <__errno>
 8014e26:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014e2a:	2321      	movs	r3, #33	@ 0x21
 8014e2c:	6003      	str	r3, [r0, #0]
 8014e2e:	ecbd 8b04 	vpop	{d8-d9}
 8014e32:	bd08      	pop	{r3, pc}
 8014e34:	f3af 8000 	nop.w
	...

08014e40 <__ieee754_fmod>:
 8014e40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014e44:	ed8d 1b00 	vstr	d1, [sp]
 8014e48:	e9dd 6500 	ldrd	r6, r5, [sp]
 8014e4c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8014e50:	ea56 0307 	orrs.w	r3, r6, r7
 8014e54:	46b6      	mov	lr, r6
 8014e56:	d00d      	beq.n	8014e74 <__ieee754_fmod+0x34>
 8014e58:	ee10 ca90 	vmov	ip, s1
 8014e5c:	4b78      	ldr	r3, [pc, #480]	@ (8015040 <__ieee754_fmod+0x200>)
 8014e5e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8014e62:	4598      	cmp	r8, r3
 8014e64:	d806      	bhi.n	8014e74 <__ieee754_fmod+0x34>
 8014e66:	4273      	negs	r3, r6
 8014e68:	4a76      	ldr	r2, [pc, #472]	@ (8015044 <__ieee754_fmod+0x204>)
 8014e6a:	4333      	orrs	r3, r6
 8014e6c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8014e70:	4293      	cmp	r3, r2
 8014e72:	d908      	bls.n	8014e86 <__ieee754_fmod+0x46>
 8014e74:	ed9d 7b00 	vldr	d7, [sp]
 8014e78:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014e7c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014e80:	b003      	add	sp, #12
 8014e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e86:	ee10 9a10 	vmov	r9, s0
 8014e8a:	45b8      	cmp	r8, r7
 8014e8c:	4649      	mov	r1, r9
 8014e8e:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014e92:	dc09      	bgt.n	8014ea8 <__ieee754_fmod+0x68>
 8014e94:	dbf4      	blt.n	8014e80 <__ieee754_fmod+0x40>
 8014e96:	454e      	cmp	r6, r9
 8014e98:	d8f2      	bhi.n	8014e80 <__ieee754_fmod+0x40>
 8014e9a:	d105      	bne.n	8014ea8 <__ieee754_fmod+0x68>
 8014e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8015048 <__ieee754_fmod+0x208>)
 8014e9e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014ea2:	ed93 0b00 	vldr	d0, [r3]
 8014ea6:	e7eb      	b.n	8014e80 <__ieee754_fmod+0x40>
 8014ea8:	4a66      	ldr	r2, [pc, #408]	@ (8015044 <__ieee754_fmod+0x204>)
 8014eaa:	ea1c 0f02 	tst.w	ip, r2
 8014eae:	d14a      	bne.n	8014f46 <__ieee754_fmod+0x106>
 8014eb0:	f1b8 0f00 	cmp.w	r8, #0
 8014eb4:	d13f      	bne.n	8014f36 <__ieee754_fmod+0xf6>
 8014eb6:	4865      	ldr	r0, [pc, #404]	@ (801504c <__ieee754_fmod+0x20c>)
 8014eb8:	464b      	mov	r3, r9
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	dc38      	bgt.n	8014f30 <__ieee754_fmod+0xf0>
 8014ebe:	4215      	tst	r5, r2
 8014ec0:	d150      	bne.n	8014f64 <__ieee754_fmod+0x124>
 8014ec2:	2f00      	cmp	r7, #0
 8014ec4:	d147      	bne.n	8014f56 <__ieee754_fmod+0x116>
 8014ec6:	4a61      	ldr	r2, [pc, #388]	@ (801504c <__ieee754_fmod+0x20c>)
 8014ec8:	4633      	mov	r3, r6
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	dc40      	bgt.n	8014f50 <__ieee754_fmod+0x110>
 8014ece:	4b60      	ldr	r3, [pc, #384]	@ (8015050 <__ieee754_fmod+0x210>)
 8014ed0:	4298      	cmp	r0, r3
 8014ed2:	db4b      	blt.n	8014f6c <__ieee754_fmod+0x12c>
 8014ed4:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8014ed8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014edc:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8015050 <__ieee754_fmod+0x210>
 8014ee0:	4562      	cmp	r2, ip
 8014ee2:	db58      	blt.n	8014f96 <__ieee754_fmod+0x156>
 8014ee4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014ee8:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014eec:	1a80      	subs	r0, r0, r2
 8014eee:	1b5e      	subs	r6, r3, r5
 8014ef0:	eba1 070e 	sub.w	r7, r1, lr
 8014ef4:	2800      	cmp	r0, #0
 8014ef6:	d164      	bne.n	8014fc2 <__ieee754_fmod+0x182>
 8014ef8:	4571      	cmp	r1, lr
 8014efa:	bf38      	it	cc
 8014efc:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014f00:	2e00      	cmp	r6, #0
 8014f02:	bfa4      	itt	ge
 8014f04:	4639      	movge	r1, r7
 8014f06:	4633      	movge	r3, r6
 8014f08:	ea53 0001 	orrs.w	r0, r3, r1
 8014f0c:	d0c6      	beq.n	8014e9c <__ieee754_fmod+0x5c>
 8014f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014f12:	db6b      	blt.n	8014fec <__ieee754_fmod+0x1ac>
 8014f14:	484e      	ldr	r0, [pc, #312]	@ (8015050 <__ieee754_fmod+0x210>)
 8014f16:	4282      	cmp	r2, r0
 8014f18:	db6e      	blt.n	8014ff8 <__ieee754_fmod+0x1b8>
 8014f1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014f1e:	4323      	orrs	r3, r4
 8014f20:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8014f24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014f28:	460c      	mov	r4, r1
 8014f2a:	ec45 4b10 	vmov	d0, r4, r5
 8014f2e:	e7a7      	b.n	8014e80 <__ieee754_fmod+0x40>
 8014f30:	3801      	subs	r0, #1
 8014f32:	005b      	lsls	r3, r3, #1
 8014f34:	e7c1      	b.n	8014eba <__ieee754_fmod+0x7a>
 8014f36:	4846      	ldr	r0, [pc, #280]	@ (8015050 <__ieee754_fmod+0x210>)
 8014f38:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	ddbe      	ble.n	8014ebe <__ieee754_fmod+0x7e>
 8014f40:	3801      	subs	r0, #1
 8014f42:	005b      	lsls	r3, r3, #1
 8014f44:	e7fa      	b.n	8014f3c <__ieee754_fmod+0xfc>
 8014f46:	ea4f 5028 	mov.w	r0, r8, asr #20
 8014f4a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8014f4e:	e7b6      	b.n	8014ebe <__ieee754_fmod+0x7e>
 8014f50:	3a01      	subs	r2, #1
 8014f52:	005b      	lsls	r3, r3, #1
 8014f54:	e7b9      	b.n	8014eca <__ieee754_fmod+0x8a>
 8014f56:	4a3e      	ldr	r2, [pc, #248]	@ (8015050 <__ieee754_fmod+0x210>)
 8014f58:	02fb      	lsls	r3, r7, #11
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	ddb7      	ble.n	8014ece <__ieee754_fmod+0x8e>
 8014f5e:	3a01      	subs	r2, #1
 8014f60:	005b      	lsls	r3, r3, #1
 8014f62:	e7fa      	b.n	8014f5a <__ieee754_fmod+0x11a>
 8014f64:	153a      	asrs	r2, r7, #20
 8014f66:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014f6a:	e7b0      	b.n	8014ece <__ieee754_fmod+0x8e>
 8014f6c:	eba3 0c00 	sub.w	ip, r3, r0
 8014f70:	f1bc 0f1f 	cmp.w	ip, #31
 8014f74:	dc09      	bgt.n	8014f8a <__ieee754_fmod+0x14a>
 8014f76:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8014f7a:	fa08 f10c 	lsl.w	r1, r8, ip
 8014f7e:	fa29 f303 	lsr.w	r3, r9, r3
 8014f82:	430b      	orrs	r3, r1
 8014f84:	fa09 f10c 	lsl.w	r1, r9, ip
 8014f88:	e7a8      	b.n	8014edc <__ieee754_fmod+0x9c>
 8014f8a:	4b32      	ldr	r3, [pc, #200]	@ (8015054 <__ieee754_fmod+0x214>)
 8014f8c:	1a1b      	subs	r3, r3, r0
 8014f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8014f92:	2100      	movs	r1, #0
 8014f94:	e7a2      	b.n	8014edc <__ieee754_fmod+0x9c>
 8014f96:	ebac 0c02 	sub.w	ip, ip, r2
 8014f9a:	f1bc 0f1f 	cmp.w	ip, #31
 8014f9e:	dc09      	bgt.n	8014fb4 <__ieee754_fmod+0x174>
 8014fa0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8014fa4:	fa07 f70c 	lsl.w	r7, r7, ip
 8014fa8:	fa26 f505 	lsr.w	r5, r6, r5
 8014fac:	433d      	orrs	r5, r7
 8014fae:	fa06 fe0c 	lsl.w	lr, r6, ip
 8014fb2:	e79b      	b.n	8014eec <__ieee754_fmod+0xac>
 8014fb4:	4d27      	ldr	r5, [pc, #156]	@ (8015054 <__ieee754_fmod+0x214>)
 8014fb6:	1aad      	subs	r5, r5, r2
 8014fb8:	fa06 f505 	lsl.w	r5, r6, r5
 8014fbc:	f04f 0e00 	mov.w	lr, #0
 8014fc0:	e794      	b.n	8014eec <__ieee754_fmod+0xac>
 8014fc2:	4571      	cmp	r1, lr
 8014fc4:	bf38      	it	cc
 8014fc6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014fca:	2e00      	cmp	r6, #0
 8014fcc:	da05      	bge.n	8014fda <__ieee754_fmod+0x19a>
 8014fce:	0fce      	lsrs	r6, r1, #31
 8014fd0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8014fd4:	0049      	lsls	r1, r1, #1
 8014fd6:	3801      	subs	r0, #1
 8014fd8:	e789      	b.n	8014eee <__ieee754_fmod+0xae>
 8014fda:	ea56 0307 	orrs.w	r3, r6, r7
 8014fde:	f43f af5d 	beq.w	8014e9c <__ieee754_fmod+0x5c>
 8014fe2:	0ffb      	lsrs	r3, r7, #31
 8014fe4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8014fe8:	0079      	lsls	r1, r7, #1
 8014fea:	e7f4      	b.n	8014fd6 <__ieee754_fmod+0x196>
 8014fec:	0fc8      	lsrs	r0, r1, #31
 8014fee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014ff2:	0049      	lsls	r1, r1, #1
 8014ff4:	3a01      	subs	r2, #1
 8014ff6:	e78a      	b.n	8014f0e <__ieee754_fmod+0xce>
 8014ff8:	1a80      	subs	r0, r0, r2
 8014ffa:	2814      	cmp	r0, #20
 8014ffc:	dc0c      	bgt.n	8015018 <__ieee754_fmod+0x1d8>
 8014ffe:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015002:	fa03 f202 	lsl.w	r2, r3, r2
 8015006:	40c1      	lsrs	r1, r0
 8015008:	430a      	orrs	r2, r1
 801500a:	4103      	asrs	r3, r0
 801500c:	ea43 0104 	orr.w	r1, r3, r4
 8015010:	4610      	mov	r0, r2
 8015012:	ec41 0b10 	vmov	d0, r0, r1
 8015016:	e733      	b.n	8014e80 <__ieee754_fmod+0x40>
 8015018:	281f      	cmp	r0, #31
 801501a:	dc07      	bgt.n	801502c <__ieee754_fmod+0x1ec>
 801501c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015020:	40c1      	lsrs	r1, r0
 8015022:	fa03 f202 	lsl.w	r2, r3, r2
 8015026:	430a      	orrs	r2, r1
 8015028:	4623      	mov	r3, r4
 801502a:	e7ef      	b.n	801500c <__ieee754_fmod+0x1cc>
 801502c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8015030:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8015034:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8015038:	32e2      	adds	r2, #226	@ 0xe2
 801503a:	fa43 f202 	asr.w	r2, r3, r2
 801503e:	e7f3      	b.n	8015028 <__ieee754_fmod+0x1e8>
 8015040:	7fefffff 	.word	0x7fefffff
 8015044:	7ff00000 	.word	0x7ff00000
 8015048:	08016248 	.word	0x08016248
 801504c:	fffffbed 	.word	0xfffffbed
 8015050:	fffffc02 	.word	0xfffffc02
 8015054:	fffffbe2 	.word	0xfffffbe2

08015058 <_init>:
 8015058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801505a:	bf00      	nop
 801505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801505e:	bc08      	pop	{r3}
 8015060:	469e      	mov	lr, r3
 8015062:	4770      	bx	lr

08015064 <_fini>:
 8015064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015066:	bf00      	nop
 8015068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801506a:	bc08      	pop	{r3}
 801506c:	469e      	mov	lr, r3
 801506e:	4770      	bx	lr
