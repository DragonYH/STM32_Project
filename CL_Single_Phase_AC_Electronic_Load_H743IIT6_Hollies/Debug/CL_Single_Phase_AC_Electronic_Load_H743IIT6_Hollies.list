
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a30  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  08010cd0  08010cd0  00011cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011b68  08011b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011b70  08011b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011b74  08011b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08011b78  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001fb0  24000158  08011cd0  00013158  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002108  08011cd0  00014108  2**0
                  ALLOC
  9 ._D3_Area     00000004  38000000  38000000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 ._DTCM_Area   00000010  20000000  20000000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  00015004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fdfa  00000000  00000000  00015032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000646d  00000000  00000000  00044e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f0  00000000  00000000  0004b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018f2  00000000  00000000  0004d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f8fa  00000000  00000000  0004ec82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000315ba  00000000  00000000  0008e57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d725  00000000  00000000  000bfb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0023d25b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f7c  00000000  00000000  0023d314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00246290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  00246311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00246505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010cb8 	.word	0x08010cb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	08010cb8 	.word	0x08010cb8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000386:	f107 031c 	add.w	r3, r7, #28
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000392:	463b      	mov	r3, r7
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003a6:	4a30      	ldr	r2, [pc, #192]	@ (8000468 <MX_ADC1_Init+0xe8>)
 80003a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003be:	2204      	movs	r2, #4
 80003c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003c2:	4b28      	ldr	r3, [pc, #160]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003c8:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80003ce:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003da:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80003f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000400:	4818      	ldr	r0, [pc, #96]	@ (8000464 <MX_ADC1_Init+0xe4>)
 8000402:	f001 fc83 	bl	8001d0c <HAL_ADC_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800040c:	f000 fda0 	bl	8000f50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	4619      	mov	r1, r3
 800041a:	4812      	ldr	r0, [pc, #72]	@ (8000464 <MX_ADC1_Init+0xe4>)
 800041c:	f002 fd92 	bl	8002f44 <HAL_ADCEx_MultiModeConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000426:	f000 fd93 	bl	8000f50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <MX_ADC1_Init+0xec>)
 800042c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042e:	2306      	movs	r3, #6
 8000430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000436:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800043a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800043c:	2304      	movs	r3, #4
 800043e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000448:	463b      	mov	r3, r7
 800044a:	4619      	mov	r1, r3
 800044c:	4805      	ldr	r0, [pc, #20]	@ (8000464 <MX_ADC1_Init+0xe4>)
 800044e:	f001 fee1 	bl	8002214 <HAL_ADC_ConfigChannel>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000458:	f000 fd7a 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	@ 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	24000174 	.word	0x24000174
 8000468:	40022000 	.word	0x40022000
 800046c:	08600004 	.word	0x08600004

08000470 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b0bc      	sub	sp, #240	@ 0xf0
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	22c0      	movs	r2, #192	@ 0xc0
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f00f ff0d 	bl	80102b0 <memset>
  if(adcHandle->Instance==ADC1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a3b      	ldr	r2, [pc, #236]	@ (8000588 <HAL_ADC_MspInit+0x118>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d16f      	bne.n	8000580 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004a4:	f04f 0300 	mov.w	r3, #0
 80004a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004ac:	2319      	movs	r3, #25
 80004ae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80004b0:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80004b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 80004b6:	2307      	movs	r3, #7
 80004b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004ce:	2300      	movs	r3, #0
 80004d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4618      	mov	r0, r3
 80004da:	f006 fbe9 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80004e4:	f000 fd34 	bl	8000f50 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004e8:	4b28      	ldr	r3, [pc, #160]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 80004ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80004ee:	4a27      	ldr	r2, [pc, #156]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 80004f0:	f043 0320 	orr.w	r3, r3, #32
 80004f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80004f8:	4b24      	ldr	r3, [pc, #144]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 80004fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800050c:	4a1f      	ldr	r2, [pc, #124]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000516:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000524:	4b19      	ldr	r3, [pc, #100]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800052a:	4a18      	ldr	r2, [pc, #96]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000534:	4b15      	ldr	r3, [pc, #84]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800053a:	f003 0320 	and.w	r3, r3, #32
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000542:	2340      	movs	r3, #64	@ 0x40
 8000544:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000558:	4619      	mov	r1, r3
 800055a:	480d      	ldr	r0, [pc, #52]	@ (8000590 <HAL_ADC_MspInit+0x120>)
 800055c:	f003 fd88 	bl	8004070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000560:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000564:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000568:	2303      	movs	r3, #3
 800056a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000574:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000578:	4619      	mov	r1, r3
 800057a:	4806      	ldr	r0, [pc, #24]	@ (8000594 <HAL_ADC_MspInit+0x124>)
 800057c:	f003 fd78 	bl	8004070 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000580:	bf00      	nop
 8000582:	37f0      	adds	r7, #240	@ 0xf0
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40022000 	.word	0x40022000
 800058c:	58024400 	.word	0x58024400
 8000590:	58020000 	.word	0x58020000
 8000594:	58021400 	.word	0x58021400

08000598 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2224      	movs	r2, #36	@ 0x24
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f00f fe83 	bl	80102b0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_DAC1_Init+0x5c>)
 80005ac:	4a12      	ldr	r2, [pc, #72]	@ (80005f8 <MX_DAC1_Init+0x60>)
 80005ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005b0:	4810      	ldr	r0, [pc, #64]	@ (80005f4 <MX_DAC1_Init+0x5c>)
 80005b2:	f002 ff01 	bl	80033b8 <HAL_DAC_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005bc:	f000 fcc8 	bl	8000f50 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <MX_DAC1_Init+0x5c>)
 80005dc:	f002 ffea 	bl	80035b4 <HAL_DAC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005e6:	f000 fcb3 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	@ 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	240001d8 	.word	0x240001d8
 80005f8:	40007400 	.word	0x40007400

080005fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1c      	ldr	r2, [pc, #112]	@ (800068c <HAL_DAC_MspInit+0x90>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d131      	bne.n	8000682 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000624:	4a1a      	ldr	r2, [pc, #104]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000626:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800062a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000642:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800064c:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800065a:	2310      	movs	r3, #16
 800065c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <HAL_DAC_MspInit+0x98>)
 800066e:	f003 fcff 	bl	8004070 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	210f      	movs	r1, #15
 8000676:	2036      	movs	r0, #54	@ 0x36
 8000678:	f002 fdfa 	bl	8003270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800067c:	2036      	movs	r0, #54	@ 0x36
 800067e:	f002 fe11 	bl	80032a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	@ 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40007400 	.word	0x40007400
 8000690:	58024400 	.word	0x58024400
 8000694:	58020000 	.word	0x58020000

08000698 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	@ 0x30
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b5c      	ldr	r3, [pc, #368]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b4:	4a5a      	ldr	r2, [pc, #360]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006be:	4b58      	ldr	r3, [pc, #352]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
 80006ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006cc:	4b54      	ldr	r3, [pc, #336]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d2:	4a53      	ldr	r2, [pc, #332]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006dc:	4b50      	ldr	r3, [pc, #320]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f0:	4a4b      	ldr	r2, [pc, #300]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006fa:	4b49      	ldr	r3, [pc, #292]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4b45      	ldr	r3, [pc, #276]	@ (8000820 <MX_GPIO_Init+0x188>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070e:	4a44      	ldr	r2, [pc, #272]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000718:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <MX_GPIO_Init+0x188>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000726:	4b3e      	ldr	r3, [pc, #248]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072c:	4a3c      	ldr	r2, [pc, #240]	@ (8000820 <MX_GPIO_Init+0x188>)
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000736:	4b3a      	ldr	r3, [pc, #232]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073c:	f003 0320 	and.w	r3, r3, #32
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000744:	4b36      	ldr	r3, [pc, #216]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074a:	4a35      	ldr	r2, [pc, #212]	@ (8000820 <MX_GPIO_Init+0x188>)
 800074c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000754:	4b32      	ldr	r3, [pc, #200]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000762:	4b2f      	ldr	r3, [pc, #188]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000768:	4a2d      	ldr	r2, [pc, #180]	@ (8000820 <MX_GPIO_Init+0x188>)
 800076a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000772:	4b2b      	ldr	r3, [pc, #172]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2120      	movs	r1, #32
 8000784:	4827      	ldr	r0, [pc, #156]	@ (8000824 <MX_GPIO_Init+0x18c>)
 8000786:	f003 fe23 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	4826      	ldr	r0, [pc, #152]	@ (8000828 <MX_GPIO_Init+0x190>)
 8000790:	f003 fe1e 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	2101      	movs	r1, #1
 8000798:	4824      	ldr	r0, [pc, #144]	@ (800082c <MX_GPIO_Init+0x194>)
 800079a:	f003 fe19 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2140      	movs	r1, #64	@ 0x40
 80007a2:	4822      	ldr	r0, [pc, #136]	@ (800082c <MX_GPIO_Init+0x194>)
 80007a4:	f003 fe14 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80007a8:	2320      	movs	r3, #32
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4819      	ldr	r0, [pc, #100]	@ (8000824 <MX_GPIO_Init+0x18c>)
 80007c0:	f003 fc56 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4813      	ldr	r0, [pc, #76]	@ (8000828 <MX_GPIO_Init+0x190>)
 80007dc:	f003 fc48 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_GPIO_Init+0x194>)
 80007f8:	f003 fc3a 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80007fc:	2340      	movs	r3, #64	@ 0x40
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <MX_GPIO_Init+0x194>)
 8000814:	f003 fc2c 	bl	8004070 <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3730      	adds	r7, #48	@ 0x30
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	58024400 	.word	0x58024400
 8000824:	58020800 	.word	0x58020800
 8000828:	58020400 	.word	0x58020400
 800082c:	58022000 	.word	0x58022000

08000830 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <MX_I2C1_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800083a:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800083c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ac <MX_I2C1_Init+0x7c>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000840:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000848:	2201      	movs	r2, #1
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086a:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800086c:	f003 fde4 	bl	8004438 <HAL_I2C_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000876:	f000 fb6b 	bl	8000f50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800087e:	f003 fe6b 	bl	8004558 <HAL_I2CEx_ConfigAnalogFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000888:	f000 fb62 	bl	8000f50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000890:	f003 fead 	bl	80045ee <HAL_I2CEx_ConfigDigitalFilter>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 fb59 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	240001ec 	.word	0x240001ec
 80008a8:	40005400 	.word	0x40005400
 80008ac:	307075b1 	.word	0x307075b1

080008b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0ba      	sub	sp, #232	@ 0xe8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	22c0      	movs	r2, #192	@ 0xc0
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00f fced 	bl	80102b0 <memset>
  if(i2cHandle->Instance==I2C1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a26      	ldr	r2, [pc, #152]	@ (8000974 <HAL_I2C_MspInit+0xc4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d145      	bne.n	800096c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008e0:	f04f 0208 	mov.w	r2, #8
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 f9da 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000902:	f000 fb25 	bl	8000f50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a1a      	ldr	r2, [pc, #104]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000924:	23c0      	movs	r3, #192	@ 0xc0
 8000926:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092a:	2312      	movs	r3, #18
 800092c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093c:	2304      	movs	r3, #4
 800093e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <HAL_I2C_MspInit+0xcc>)
 800094a:	f003 fb91 	bl	8004070 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000954:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000956:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800095a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800096c:	bf00      	nop
 800096e:	37e8      	adds	r7, #232	@ 0xe8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40005400 	.word	0x40005400
 8000978:	58024400 	.word	0x58024400
 800097c:	58020400 	.word	0x58020400

08000980 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0a4      	sub	sp, #144	@ 0x90
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000986:	f000 f9cf 	bl	8000d28 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800098a:	4b83      	ldr	r3, [pc, #524]	@ (8000b98 <main+0x218>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11b      	bne.n	80009ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000996:	f3bf 8f4f 	dsb	sy
}
 800099a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800099c:	f3bf 8f6f 	isb	sy
}
 80009a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009a2:	4b7d      	ldr	r3, [pc, #500]	@ (8000b98 <main+0x218>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009aa:	f3bf 8f4f 	dsb	sy
}
 80009ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009b0:	f3bf 8f6f 	isb	sy
}
 80009b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009b6:	4b78      	ldr	r3, [pc, #480]	@ (8000b98 <main+0x218>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a77      	ldr	r2, [pc, #476]	@ (8000b98 <main+0x218>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009c2:	f3bf 8f4f 	dsb	sy
}
 80009c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009c8:	f3bf 8f6f 	isb	sy
}
 80009cc:	e000      	b.n	80009d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009d0:	4b71      	ldr	r3, [pc, #452]	@ (8000b98 <main+0x218>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d143      	bne.n	8000a64 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009dc:	4b6e      	ldr	r3, [pc, #440]	@ (8000b98 <main+0x218>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009e4:	f3bf 8f4f 	dsb	sy
}
 80009e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009ea:	4b6b      	ldr	r3, [pc, #428]	@ (8000b98 <main+0x218>)
 80009ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009f8:	0b5b      	lsrs	r3, r3, #13
 80009fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a14:	015a      	lsls	r2, r3, #5
 8000a16:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000a1a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a20:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a22:	495d      	ldr	r1, [pc, #372]	@ (8000b98 <main+0x218>)
 8000a24:	4313      	orrs	r3, r2
 8000a26:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a2e:	1e5a      	subs	r2, r3, #1
 8000a30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1eb      	bne.n	8000a10 <main+0x90>
    } while(sets-- != 0U);
 8000a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1dd      	bne.n	8000a02 <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a46:	f3bf 8f4f 	dsb	sy
}
 8000a4a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a4c:	4b52      	ldr	r3, [pc, #328]	@ (8000b98 <main+0x218>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a51      	ldr	r2, [pc, #324]	@ (8000b98 <main+0x218>)
 8000a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a56:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a58:	f3bf 8f4f 	dsb	sy
}
 8000a5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a5e:	f3bf 8f6f 	isb	sy
}
 8000a62:	e000      	b.n	8000a66 <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a64:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f000 feb7 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 f8af 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f7ff fe13 	bl	8000698 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a72:	f7ff fedd 	bl	8000830 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a76:	f000 fcf1 	bl	800145c <MX_TIM2_Init>
  MX_TIM8_Init();
 8000a7a:	f000 fd3d 	bl	80014f8 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000a7e:	f7ff fc7f 	bl	8000380 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000a82:	f00e fd7f 	bl	800f584 <MX_USB_DEVICE_Init>
  MX_DAC1_Init();
 8000a86:	f7ff fd87 	bl	8000598 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000a8a:	f000 fa67 	bl	8000f5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000a8e:	205c      	movs	r0, #92	@ 0x5c
 8000a90:	f00f fb38 	bl	8010104 <malloc>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b40      	ldr	r3, [pc, #256]	@ (8000b9c <main+0x21c>)
 8000a9a:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 8000a9c:	2020      	movs	r0, #32
 8000a9e:	f00f fb31 	bl	8010104 <malloc>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba0 <main+0x220>)
 8000aa8:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000aaa:	205c      	movs	r0, #92	@ 0x5c
 8000aac:	f00f fb2a 	bl	8010104 <malloc>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba4 <main+0x224>)
 8000ab6:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8000ab8:	2020      	movs	r0, #32
 8000aba:	f00f fb23 	bl	8010104 <malloc>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b39      	ldr	r3, [pc, #228]	@ (8000ba8 <main+0x228>)
 8000ac4:	601a      	str	r2, [r3, #0]
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 串口输出数组
  uint8_t textBuf[128] = {0};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	227c      	movs	r2, #124	@ 0x7c
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f00f fbec 	bl	80102b0 <memset>
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压环
 8000ad8:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <main+0x21c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a30      	ldr	r2, [pc, #192]	@ (8000ba0 <main+0x220>)
 8000ade:	6811      	ldr	r1, [r2, #0]
 8000ae0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ae4:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8000bac <main+0x22c>
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00e faa5 	bl	800f038 <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流环
 8000aee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba4 <main+0x224>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a2d      	ldr	r2, [pc, #180]	@ (8000ba8 <main+0x228>)
 8000af4:	6811      	ldr	r1, [r2, #0]
 8000af6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000afa:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8000bac <main+0x22c>
 8000afe:	4618      	mov	r0, r3
 8000b00:	f00e fa9a 	bl	800f038 <pll_Init>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000b04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4828      	ldr	r0, [pc, #160]	@ (8000bb0 <main+0x230>)
 8000b0e:	f002 fd21 	bl	8003554 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000b12:	2100      	movs	r1, #0
 8000b14:	4826      	ldr	r0, [pc, #152]	@ (8000bb0 <main+0x230>)
 8000b16:	f002 fc71 	bl	80033fc <HAL_DAC_Start>
  // ADC校准并开启
  HAL_Delay(200);
 8000b1a:	20c8      	movs	r0, #200	@ 0xc8
 8000b1c:	f000 feb8 	bl	8001890 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000b20:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b24:	2100      	movs	r1, #0
 8000b26:	4823      	ldr	r0, [pc, #140]	@ (8000bb4 <main+0x234>)
 8000b28:	f002 f9a8 	bl	8002e7c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线性度校准
 8000b2c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000b34:	481f      	ldr	r0, [pc, #124]	@ (8000bb4 <main+0x234>)
 8000b36:	f002 f9a1 	bl	8002e7c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	491e      	ldr	r1, [pc, #120]	@ (8000bb8 <main+0x238>)
 8000b3e:	481d      	ldr	r0, [pc, #116]	@ (8000bb4 <main+0x234>)
 8000b40:	f001 fa86 	bl	8002050 <HAL_ADC_Start_DMA>
  HAL_Delay(1000);
 8000b44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b48:	f000 fea2 	bl	8001890 <HAL_Delay>
  // 打开互补SPWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	481b      	ldr	r0, [pc, #108]	@ (8000bbc <main+0x23c>)
 8000b50:	f009 fae6 	bl	800a120 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8000b54:	2100      	movs	r1, #0
 8000b56:	4819      	ldr	r0, [pc, #100]	@ (8000bbc <main+0x23c>)
 8000b58:	f00a fb78 	bl	800b24c <HAL_TIMEx_PWMN_Start>
  // OLED初始化
  OLED_Init();
 8000b5c:	f00e f9e2 	bl	800ef24 <OLED_Init>
  // 开启中断
  HAL_TIM_Base_Start_IT(&htim2);
 8000b60:	4817      	ldr	r0, [pc, #92]	@ (8000bc0 <main+0x240>)
 8000b62:	f009 fa03 	bl	8009f6c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 虚拟串口输出日志
    sprintf((char *)textBuf, "test");
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4916      	ldr	r1, [pc, #88]	@ (8000bc4 <main+0x244>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00f fb80 	bl	8010270 <siprintf>
    CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2180      	movs	r1, #128	@ 0x80
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00e fdc5 	bl	800f704 <CDC_Transmit_FS>
    OLED_ShowString(0, 0, textBuf);
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2000      	movs	r0, #0
 8000b82:	f00e f9a1 	bl	800eec8 <OLED_ShowString>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000b86:	2101      	movs	r1, #1
 8000b88:	480f      	ldr	r0, [pc, #60]	@ (8000bc8 <main+0x248>)
 8000b8a:	f003 fc3a 	bl	8004402 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000b8e:	20c8      	movs	r0, #200	@ 0xc8
 8000b90:	f000 fe7e 	bl	8001890 <HAL_Delay>
    sprintf((char *)textBuf, "test");
 8000b94:	bf00      	nop
 8000b96:	e7e6      	b.n	8000b66 <main+0x1e6>
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000004 	.word	0x20000004
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	2000000c 	.word	0x2000000c
 8000bac:	42480000 	.word	0x42480000
 8000bb0:	240001d8 	.word	0x240001d8
 8000bb4:	24000174 	.word	0x24000174
 8000bb8:	38000000 	.word	0x38000000
 8000bbc:	24000364 	.word	0x24000364
 8000bc0:	24000318 	.word	0x24000318
 8000bc4:	08010cd0 	.word	0x08010cd0
 8000bc8:	58022000 	.word	0x58022000

08000bcc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09e      	sub	sp, #120	@ 0x78
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd6:	224c      	movs	r2, #76	@ 0x4c
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00f fb68 	bl	80102b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2220      	movs	r2, #32
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00f fb61 	bl	80102b0 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f005 f802 	bl	8005bf8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b48      	ldr	r3, [pc, #288]	@ (8000d1c <SystemClock_Config+0x150>)
 8000bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfc:	4a47      	ldr	r2, [pc, #284]	@ (8000d1c <SystemClock_Config+0x150>)
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c04:	4b45      	ldr	r3, [pc, #276]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b44      	ldr	r3, [pc, #272]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a43      	ldr	r2, [pc, #268]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b41      	ldr	r3, [pc, #260]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000c26:	bf00      	nop
 8000c28:	4b3d      	ldr	r3, [pc, #244]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c34:	d1f8      	bne.n	8000c28 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b3b      	ldr	r3, [pc, #236]	@ (8000d24 <SystemClock_Config+0x158>)
 8000c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c3c:	4a39      	ldr	r2, [pc, #228]	@ (8000d24 <SystemClock_Config+0x158>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c46:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <SystemClock_Config+0x158>)
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a30      	ldr	r2, [pc, #192]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c72:	4a2a      	ldr	r2, [pc, #168]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000c86:	bf00      	nop
 8000c88:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c94:	d1f8      	bne.n	8000c88 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ca8:	2305      	movs	r3, #5
 8000caa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cac:	23c0      	movs	r3, #192	@ 0xc0
 8000cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000cb4:	2314      	movs	r3, #20
 8000cb6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 ffdd 	bl	8005c8c <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000cd8:	f000 f93a 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000cdc:	233f      	movs	r3, #63	@ 0x3f
 8000cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cec:	2340      	movs	r3, #64	@ 0x40
 8000cee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cf0:	2340      	movs	r3, #64	@ 0x40
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cfa:	2340      	movs	r3, #64	@ 0x40
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	2104      	movs	r1, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f005 fc1b 	bl	8006540 <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000d10:	f000 f91e 	bl	8000f50 <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3778      	adds	r7, #120	@ 0x78
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58000400 	.word	0x58000400
 8000d20:	58024800 	.word	0x58024800
 8000d24:	58024400 	.word	0x58024400

08000d28 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d3a:	f002 fac1 	bl	80032c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000d46:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000d4a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fade 	bl	8003330 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000d78:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000d7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 facf 	bl	8003330 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8000d96:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d9a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000da0:	463b      	mov	r3, r7
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fac4 	bl	8003330 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000da8:	2004      	movs	r0, #4
 8000daa:	f002 faa1 	bl	80032f0 <HAL_MPU_Enable>
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	ed2d 8b02 	vpush	{d8}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a54      	ldr	r2, [pc, #336]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_IncTick();
 8000dce:	f000 fd3f 	bl	8001850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dda:	f040 8098 	bne.w	8000f0e <HAL_TIM_PeriodElapsedCallback+0x156>
 8000dde:	4b50      	ldr	r3, [pc, #320]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	2304      	movs	r3, #4
 8000de4:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dd1d      	ble.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0x70>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f003 021f 	and.w	r2, r3, #31
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4413      	add	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfc:	f3bf 8f4f 	dsb	sy
}
 8000e00:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e02:	4a48      	ldr	r2, [pc, #288]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3320      	adds	r3, #32
 8000e0e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3b20      	subs	r3, #32
 8000e14:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dcf2      	bgt.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1c:	f3bf 8f4f 	dsb	sy
}
 8000e20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e22:	f3bf 8f6f 	isb	sy
}
 8000e26:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000e28:	bf00      	nop
  {
    // 缓存adcBuf
    SCB_InvalidateDCache_by_Addr((uint32_t *)adcBuf, sizeof(adcBuf));
    signal_V->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.4f;
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e36:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000f28 <HAL_TIM_PeriodElapsedCallback+0x170>
 8000e3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e3e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8000f2c <HAL_TIM_PeriodElapsedCallback+0x174>
 8000e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e46:	4b3a      	ldr	r3, [pc, #232]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000f34 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8000e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e52:	edc3 7a00 	vstr	s15, [r3]
    signal_I->u_0 = adcBuf[1] * 3.3f / 65536.0f - 1.4f;
 8000e56:	4b32      	ldr	r3, [pc, #200]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000e58:	885b      	ldrh	r3, [r3, #2]
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e62:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000f28 <HAL_TIM_PeriodElapsedCallback+0x170>
 8000e66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e6a:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8000f2c <HAL_TIM_PeriodElapsedCallback+0x174>
 8000e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e72:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000f34 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8000e7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e7e:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_V, signal_config_V, signal_V); // 电压环
 8000e82:	4b2b      	ldr	r3, [pc, #172]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a2d      	ldr	r2, [pc, #180]	@ (8000f3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e88:	6811      	ldr	r1, [r2, #0]
 8000e8a:	4a29      	ldr	r2, [pc, #164]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f00e f9ba 	bl	800f208 <pll_Control>
    pll_Control(signal_I, signal_config_I, signal_V); // 电流环
 8000e94:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a29      	ldr	r2, [pc, #164]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e9a:	6811      	ldr	r1, [r2, #0]
 8000e9c:	4a24      	ldr	r2, [pc, #144]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00e f9b1 	bl	800f208 <pll_Control>
    // 调节SPWM占空比
    // 要想实现PFC，需要让电流相位与电压相位相同，而电压相位由电网控制，所以需要闭环控制的是电流相位
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eac:	ee07 3a90 	vmov	s15, r3
 8000eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000eb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000ece:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000f4c <HAL_TIM_PeriodElapsedCallback+0x194>
 8000ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eda:	f00f f883 	bl	800ffe4 <arm_sin_f32>
 8000ede:	eef0 7a40 	vmov.f32	s15, s0
 8000ee2:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ef4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000ef8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f08:	ee17 2a90 	vmov	r2, s15
 8000f0c:	635a      	str	r2, [r3, #52]	@ 0x34

    // DAC模拟输出，便于调试，不需要时可关闭
    // HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_1->theta + PI / 2.f) + 2048.f);
  }
  /* USER CODE END Callback 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	ecbd 8b02 	vpop	{d8}
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40001000 	.word	0x40001000
 8000f20:	38000000 	.word	0x38000000
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	40533333 	.word	0x40533333
 8000f2c:	47800000 	.word	0x47800000
 8000f30:	20000000 	.word	0x20000000
 8000f34:	3fb33333 	.word	0x3fb33333
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	2000000c 	.word	0x2000000c
 8000f44:	24000364 	.word	0x24000364
 8000f48:	24000000 	.word	0x24000000
 8000f4c:	3fc90fdb 	.word	0x3fc90fdb

08000f50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f60:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f62:	4a28      	ldr	r2, [pc, #160]	@ (8001004 <MX_SPI1_Init+0xa8>)
 8000f64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f66:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f68:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6e:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f74:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f76:	2207      	movs	r2, #7
 8000f78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_SPI1_Init+0xa4>)
 8000fec:	f008 fb5e 	bl	80096ac <HAL_SPI_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ff6:	f7ff ffab 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	24000240 	.word	0x24000240
 8001004:	40013000 	.word	0x40013000

08001008 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0bc      	sub	sp, #240	@ 0xf0
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	22c0      	movs	r2, #192	@ 0xc0
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f00f f941 	bl	80102b0 <memset>
  if(spiHandle->Instance==SPI1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a38      	ldr	r2, [pc, #224]	@ (8001114 <HAL_SPI_MspInit+0x10c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d169      	bne.n	800110c <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001038:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001044:	2300      	movs	r3, #0
 8001046:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fe2f 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001058:	f7ff ff7a 	bl	8000f50 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105c:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <HAL_SPI_MspInit+0x110>)
 800105e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001062:	4a2d      	ldr	r2, [pc, #180]	@ (8001118 <HAL_SPI_MspInit+0x110>)
 8001064:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001068:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800106c:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <HAL_SPI_MspInit+0x110>)
 800106e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <HAL_SPI_MspInit+0x110>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a25      	ldr	r2, [pc, #148]	@ (8001118 <HAL_SPI_MspInit+0x110>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <HAL_SPI_MspInit+0x110>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <HAL_SPI_MspInit+0x110>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <HAL_SPI_MspInit+0x110>)
 80010a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <HAL_SPI_MspInit+0x110>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 80010b6:	23a0      	movs	r3, #160	@ 0xa0
 80010b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ce:	2305      	movs	r3, #5
 80010d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010d8:	4619      	mov	r1, r3
 80010da:	4810      	ldr	r0, [pc, #64]	@ (800111c <HAL_SPI_MspInit+0x114>)
 80010dc:	f002 ffc8 	bl	8004070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010fa:	2305      	movs	r3, #5
 80010fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001100:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	@ (8001120 <HAL_SPI_MspInit+0x118>)
 8001108:	f002 ffb2 	bl	8004070 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800110c:	bf00      	nop
 800110e:	37f0      	adds	r7, #240	@ 0xf0
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40013000 	.word	0x40013000
 8001118:	58024400 	.word	0x58024400
 800111c:	58020000 	.word	0x58020000
 8001120:	58021800 	.word	0x58021800

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <HAL_MspInit+0x30>)
 800112c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001130:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_MspInit+0x30>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_MspInit+0x30>)
 800113c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	58024400 	.word	0x58024400

08001158 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b090      	sub	sp, #64	@ 0x40
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	d827      	bhi.n	80011b6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001166:	2200      	movs	r2, #0
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	2036      	movs	r0, #54	@ 0x36
 800116c:	f002 f880 	bl	8003270 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001170:	2036      	movs	r0, #54	@ 0x36
 8001172:	f002 f897 	bl	80032a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001176:	4a29      	ldr	r2, [pc, #164]	@ (800121c <HAL_InitTick+0xc4>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800117c:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <HAL_InitTick+0xc8>)
 800117e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001182:	4a27      	ldr	r2, [pc, #156]	@ (8001220 <HAL_InitTick+0xc8>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800118c:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <HAL_InitTick+0xc8>)
 800118e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800119a:	f107 0210 	add.w	r2, r7, #16
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 fd41 	bl	8006c2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d106      	bne.n	80011c2 <HAL_InitTick+0x6a>
 80011b4:	e001      	b.n	80011ba <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e02b      	b.n	8001212 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011ba:	f005 fd21 	bl	8006c00 <HAL_RCC_GetPCLK1Freq>
 80011be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80011c0:	e004      	b.n	80011cc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011c2:	f005 fd1d 	bl	8006c00 <HAL_RCC_GetPCLK1Freq>
 80011c6:	4603      	mov	r3, r0
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ce:	4a15      	ldr	r2, [pc, #84]	@ (8001224 <HAL_InitTick+0xcc>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	0c9b      	lsrs	r3, r3, #18
 80011d6:	3b01      	subs	r3, #1
 80011d8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011da:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <HAL_InitTick+0xd0>)
 80011dc:	4a13      	ldr	r2, [pc, #76]	@ (800122c <HAL_InitTick+0xd4>)
 80011de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <HAL_InitTick+0xd0>)
 80011e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <HAL_InitTick+0xd0>)
 80011ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <HAL_InitTick+0xd0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_InitTick+0xd0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011fa:	480b      	ldr	r0, [pc, #44]	@ (8001228 <HAL_InitTick+0xd0>)
 80011fc:	f008 fe5f 	bl	8009ebe <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d104      	bne.n	8001210 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001206:	4808      	ldr	r0, [pc, #32]	@ (8001228 <HAL_InitTick+0xd0>)
 8001208:	f008 feb0 	bl	8009f6c <HAL_TIM_Base_Start_IT>
 800120c:	4603      	mov	r3, r0
 800120e:	e000      	b.n	8001212 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3740      	adds	r7, #64	@ 0x40
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2400000c 	.word	0x2400000c
 8001220:	58024400 	.word	0x58024400
 8001224:	431bde83 	.word	0x431bde83
 8001228:	240002c8 	.word	0x240002c8
 800122c:	40001000 	.word	0x40001000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <NMI_Handler+0x4>

08001238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <MemManage_Handler+0x4>

08001248 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <UsageFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <TIM2_IRQHandler+0x10>)
 8001296:	f009 f851 	bl	800a33c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	24000318 	.word	0x24000318

080012a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <TIM6_DAC_IRQHandler+0x20>)
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80012b2:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <TIM6_DAC_IRQHandler+0x20>)
 80012b4:	f002 f8f4 	bl	80034a0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80012b8:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <TIM6_DAC_IRQHandler+0x24>)
 80012ba:	f009 f83f 	bl	800a33c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	240001d8 	.word	0x240001d8
 80012c8:	240002c8 	.word	0x240002c8

080012cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <OTG_FS_IRQHandler+0x10>)
 80012d2:	f003 fb31 	bl	8004938 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	24001894 	.word	0x24001894

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	4a14      	ldr	r2, [pc, #80]	@ (800133c <_sbrk+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <_sbrk+0x60>)
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <_sbrk+0x64>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <_sbrk+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001310:	f00e ffe6 	bl	80102e0 <__errno>
 8001314:	4603      	mov	r3, r0
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e009      	b.n	8001334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001326:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <_sbrk+0x64>)
 8001330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	24080000 	.word	0x24080000
 8001340:	00000400 	.word	0x00000400
 8001344:	24000314 	.word	0x24000314
 8001348:	24002108 	.word	0x24002108

0800134c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001350:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <SystemInit+0xe4>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001356:	4a36      	ldr	r2, [pc, #216]	@ (8001430 <SystemInit+0xe4>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001360:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <SystemInit+0xe8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	2b06      	cmp	r3, #6
 800136a:	d807      	bhi.n	800137c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800136c:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <SystemInit+0xe8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 030f 	bic.w	r3, r3, #15
 8001374:	4a2f      	ldr	r2, [pc, #188]	@ (8001434 <SystemInit+0xe8>)
 8001376:	f043 0307 	orr.w	r3, r3, #7
 800137a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800137c:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <SystemInit+0xec>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2d      	ldr	r2, [pc, #180]	@ (8001438 <SystemInit+0xec>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001388:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <SystemInit+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800138e:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <SystemInit+0xec>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4929      	ldr	r1, [pc, #164]	@ (8001438 <SystemInit+0xec>)
 8001394:	4b29      	ldr	r3, [pc, #164]	@ (800143c <SystemInit+0xf0>)
 8001396:	4013      	ands	r3, r2
 8001398:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800139a:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <SystemInit+0xe8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013a6:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <SystemInit+0xe8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 030f 	bic.w	r3, r3, #15
 80013ae:	4a21      	ldr	r2, [pc, #132]	@ (8001434 <SystemInit+0xe8>)
 80013b0:	f043 0307 	orr.w	r3, r3, #7
 80013b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013b6:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <SystemInit+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <SystemInit+0xec>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <SystemInit+0xec>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <SystemInit+0xec>)
 80013ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001440 <SystemInit+0xf4>)
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <SystemInit+0xec>)
 80013d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <SystemInit+0xf8>)
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <SystemInit+0xec>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <SystemInit+0xfc>)
 80013d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <SystemInit+0xec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <SystemInit+0xec>)
 80013e2:	4a19      	ldr	r2, [pc, #100]	@ (8001448 <SystemInit+0xfc>)
 80013e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013e6:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <SystemInit+0xec>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <SystemInit+0xec>)
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <SystemInit+0xfc>)
 80013f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <SystemInit+0xec>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <SystemInit+0xec>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <SystemInit+0xec>)
 80013fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <SystemInit+0xec>)
 8001406:	2200      	movs	r2, #0
 8001408:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <SystemInit+0x100>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <SystemInit+0x104>)
 8001410:	4013      	ands	r3, r2
 8001412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001416:	d202      	bcs.n	800141e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <SystemInit+0x108>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <SystemInit+0x10c>)
 8001420:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001424:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00
 8001434:	52002000 	.word	0x52002000
 8001438:	58024400 	.word	0x58024400
 800143c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001440:	02020200 	.word	0x02020200
 8001444:	01ff0000 	.word	0x01ff0000
 8001448:	01010280 	.word	0x01010280
 800144c:	5c001000 	.word	0x5c001000
 8001450:	ffff0000 	.word	0xffff0000
 8001454:	51008108 	.word	0x51008108
 8001458:	52004000 	.word	0x52004000

0800145c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800147a:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <MX_TIM2_Init+0x98>)
 800147c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001480:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <MX_TIM2_Init+0x98>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <MX_TIM2_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <MX_TIM2_Init+0x98>)
 8001490:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <MX_TIM2_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <MX_TIM2_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a2:	4814      	ldr	r0, [pc, #80]	@ (80014f4 <MX_TIM2_Init+0x98>)
 80014a4:	f008 fd0b 	bl	8009ebe <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014ae:	f7ff fd4f 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	@ (80014f4 <MX_TIM2_Init+0x98>)
 80014c0:	f009 f970 	bl	800a7a4 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014ca:	f7ff fd41 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	@ (80014f4 <MX_TIM2_Init+0x98>)
 80014dc:	f009 ff78 	bl	800b3d0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014e6:	f7ff fd33 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	24000318 	.word	0x24000318

080014f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09a      	sub	sp, #104	@ 0x68
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001518:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	222c      	movs	r2, #44	@ 0x2c
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f00e febc 	bl	80102b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001538:	4b43      	ldr	r3, [pc, #268]	@ (8001648 <MX_TIM8_Init+0x150>)
 800153a:	4a44      	ldr	r2, [pc, #272]	@ (800164c <MX_TIM8_Init+0x154>)
 800153c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800153e:	4b42      	ldr	r3, [pc, #264]	@ (8001648 <MX_TIM8_Init+0x150>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b40      	ldr	r3, [pc, #256]	@ (8001648 <MX_TIM8_Init+0x150>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 800154a:	4b3f      	ldr	r3, [pc, #252]	@ (8001648 <MX_TIM8_Init+0x150>)
 800154c:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001550:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b3d      	ldr	r3, [pc, #244]	@ (8001648 <MX_TIM8_Init+0x150>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001558:	4b3b      	ldr	r3, [pc, #236]	@ (8001648 <MX_TIM8_Init+0x150>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b3a      	ldr	r3, [pc, #232]	@ (8001648 <MX_TIM8_Init+0x150>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001564:	4838      	ldr	r0, [pc, #224]	@ (8001648 <MX_TIM8_Init+0x150>)
 8001566:	f008 fcaa 	bl	8009ebe <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001570:	f7ff fcee 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001578:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800157a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800157e:	4619      	mov	r1, r3
 8001580:	4831      	ldr	r0, [pc, #196]	@ (8001648 <MX_TIM8_Init+0x150>)
 8001582:	f009 f90f 	bl	800a7a4 <HAL_TIM_ConfigClockSource>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800158c:	f7ff fce0 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001590:	482d      	ldr	r0, [pc, #180]	@ (8001648 <MX_TIM8_Init+0x150>)
 8001592:	f008 fd63 	bl	800a05c <HAL_TIM_PWM_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800159c:	f7ff fcd8 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015b0:	4619      	mov	r1, r3
 80015b2:	4825      	ldr	r0, [pc, #148]	@ (8001648 <MX_TIM8_Init+0x150>)
 80015b4:	f009 ff0c 	bl	800b3d0 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80015be:	f7ff fcc7 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c2:	2360      	movs	r3, #96	@ 0x60
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ce:	2300      	movs	r3, #0
 80015d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4818      	ldr	r0, [pc, #96]	@ (8001648 <MX_TIM8_Init+0x150>)
 80015e8:	f008 ffc8 	bl	800a57c <HAL_TIM_PWM_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80015f2:	f7ff fcad 	bl	8000f50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800160a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001618:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4807      	ldr	r0, [pc, #28]	@ (8001648 <MX_TIM8_Init+0x150>)
 800162c:	f009 ff5e 	bl	800b4ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001636:	f7ff fc8b 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800163a:	4803      	ldr	r0, [pc, #12]	@ (8001648 <MX_TIM8_Init+0x150>)
 800163c:	f000 f846 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8001640:	bf00      	nop
 8001642:	3768      	adds	r7, #104	@ 0x68
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	24000364 	.word	0x24000364
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001660:	d117      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001662:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_TIM_Base_MspInit+0x74>)
 8001664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001668:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <HAL_TIM_Base_MspInit+0x74>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_TIM_Base_MspInit+0x74>)
 8001674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	201c      	movs	r0, #28
 8001686:	f001 fdf3 	bl	8003270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800168a:	201c      	movs	r0, #28
 800168c:	f001 fe0a 	bl	80032a4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001690:	e013      	b.n	80016ba <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM8)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <HAL_TIM_Base_MspInit+0x78>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d10e      	bne.n	80016ba <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_TIM_Base_MspInit+0x74>)
 800169e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016a2:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <HAL_TIM_Base_MspInit+0x74>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_TIM_Base_MspInit+0x74>)
 80016ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	58024400 	.word	0x58024400
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	@ 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <HAL_TIM_MspPostInit+0xa8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d13e      	bne.n	800176c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <HAL_TIM_MspPostInit+0xac>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f4:	4a20      	ldr	r2, [pc, #128]	@ (8001778 <HAL_TIM_MspPostInit+0xac>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001778 <HAL_TIM_MspPostInit+0xac>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800170c:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <HAL_TIM_MspPostInit+0xac>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001712:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <HAL_TIM_MspPostInit+0xac>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <HAL_TIM_MspPostInit+0xac>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PH13     ------> TIM8_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800172a:	2340      	movs	r3, #64	@ 0x40
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800173a:	2303      	movs	r3, #3
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	480d      	ldr	r0, [pc, #52]	@ (800177c <HAL_TIM_MspPostInit+0xb0>)
 8001746:	f002 fc93 	bl	8004070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800174a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800175c:	2303      	movs	r3, #3
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	@ (8001780 <HAL_TIM_MspPostInit+0xb4>)
 8001768:	f002 fc82 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	@ 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40010400 	.word	0x40010400
 8001778:	58024400 	.word	0x58024400
 800177c:	58020800 	.word	0x58020800
 8001780:	58021c00 	.word	0x58021c00

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001788:	f7ff fde0 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	@ (80017d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b2:	f00e fd9b 	bl	80102ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff f8e3 	bl	8000980 <main>
  bx  lr
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017c4:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 80017c8:	08011b78 	.word	0x08011b78
  ldr r2, =_sbss
 80017cc:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80017d0:	24002108 	.word	0x24002108

080017d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC3_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017de:	2003      	movs	r0, #3
 80017e0:	f001 fd3b 	bl	800325a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017e4:	f005 f862 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <HAL_Init+0x68>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	4913      	ldr	r1, [pc, #76]	@ (8001844 <HAL_Init+0x6c>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <HAL_Init+0x68>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	4a0e      	ldr	r2, [pc, #56]	@ (8001844 <HAL_Init+0x6c>)
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <HAL_Init+0x70>)
 800181a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800181c:	4a0b      	ldr	r2, [pc, #44]	@ (800184c <HAL_Init+0x74>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001822:	200f      	movs	r0, #15
 8001824:	f7ff fc98 	bl	8001158 <HAL_InitTick>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e002      	b.n	8001838 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001832:	f7ff fc77 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	58024400 	.word	0x58024400
 8001844:	08010d20 	.word	0x08010d20
 8001848:	24000008 	.word	0x24000008
 800184c:	24000004 	.word	0x24000004

08001850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x20>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_IncTick+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <HAL_IncTick+0x24>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	24000010 	.word	0x24000010
 8001874:	240003b0 	.word	0x240003b0

08001878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <HAL_GetTick+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	240003b0 	.word	0x240003b0

08001890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff ffee 	bl	8001878 <HAL_GetTick>
 800189c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a8:	d005      	beq.n	80018b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_Delay+0x44>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b6:	bf00      	nop
 80018b8:	f7ff ffde 	bl	8001878 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8f7      	bhi.n	80018b8 <HAL_Delay+0x28>
  {
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	24000010 	.word	0x24000010

080018d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <HAL_GetREVID+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0c1b      	lsrs	r3, r3, #16
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	5c001000 	.word	0x5c001000

080018f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3360      	adds	r3, #96	@ 0x60
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	431a      	orrs	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800198c:	bf00      	nop
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	611a      	str	r2, [r3, #16]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b087      	sub	sp, #28
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3360      	adds	r3, #96	@ 0x60
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	601a      	str	r2, [r3, #0]
  }
}
 80019f4:	bf00      	nop
 80019f6:	371c      	adds	r7, #28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b087      	sub	sp, #28
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3330      	adds	r3, #48	@ 0x30
 8001a36:	461a      	mov	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	4413      	add	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	211f      	movs	r1, #31
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	401a      	ands	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0e9b      	lsrs	r3, r3, #26
 8001a5e:	f003 011f 	and.w	r1, r3, #31
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f023 0203 	bic.w	r2, r3, #3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	60da      	str	r2, [r3, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3314      	adds	r3, #20
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	0e5b      	lsrs	r3, r3, #25
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	4413      	add	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	0d1b      	lsrs	r3, r3, #20
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	2107      	movs	r1, #7
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	0d1b      	lsrs	r3, r3, #20
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0318 	and.w	r3, r3, #24
 8001b1e:	4908      	ldr	r1, [pc, #32]	@ (8001b40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b20:	40d9      	lsrs	r1, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	400b      	ands	r3, r1
 8001b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	000fffff 	.word	0x000fffff

08001b44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 031f 	and.w	r3, r3, #31
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6093      	str	r3, [r2, #8]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	5fffffc0 	.word	0x5fffffc0

08001b84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b98:	d101      	bne.n	8001b9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	6fffffc0 	.word	0x6fffffc0

08001bd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001be8:	d101      	bne.n	8001bee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <LL_ADC_Enable+0x24>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	7fffffc0 	.word	0x7fffffc0

08001c24 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <LL_ADC_Disable+0x24>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	f043 0202 	orr.w	r2, r3, #2
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	7fffffc0 	.word	0x7fffffc0

08001c4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <LL_ADC_IsEnabled+0x18>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <LL_ADC_IsEnabled+0x1a>
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d101      	bne.n	8001c8a <LL_ADC_IsDisableOngoing+0x18>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <LL_ADC_IsDisableOngoing+0x1a>
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <LL_ADC_REG_StartConversion+0x24>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	f043 0204 	orr.w	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	7fffffc0 	.word	0x7fffffc0

08001cc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d101      	bne.n	8001cd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d101      	bne.n	8001cfe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b089      	sub	sp, #36	@ 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e18f      	b.n	8002046 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7fe fb9b 	bl	8000470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff19 	bl	8001b84 <LL_ADC_IsDeepPowerDownEnabled>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff feff 	bl	8001b60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff34 	bl	8001bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d114      	bne.n	8001d9c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff18 	bl	8001bac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d7c:	4b87      	ldr	r3, [pc, #540]	@ (8001f9c <HAL_ADC_Init+0x290>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	4a87      	ldr	r2, [pc, #540]	@ (8001fa0 <HAL_ADC_Init+0x294>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d8e:	e002      	b.n	8001d96 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f9      	bne.n	8001d90 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff17 	bl	8001bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10d      	bne.n	8001dc8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db0:	f043 0210 	orr.w	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff77 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 8001dd2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 8129 	bne.w	8002034 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 8125 	bne.w	8002034 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dee:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff24 	bl	8001c4c <LL_ADC_IsEnabled>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d136      	bne.n	8001e78 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a65      	ldr	r2, [pc, #404]	@ (8001fa4 <HAL_ADC_Init+0x298>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d004      	beq.n	8001e1e <HAL_ADC_Init+0x112>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a63      	ldr	r2, [pc, #396]	@ (8001fa8 <HAL_ADC_Init+0x29c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10e      	bne.n	8001e3c <HAL_ADC_Init+0x130>
 8001e1e:	4861      	ldr	r0, [pc, #388]	@ (8001fa4 <HAL_ADC_Init+0x298>)
 8001e20:	f7ff ff14 	bl	8001c4c <LL_ADC_IsEnabled>
 8001e24:	4604      	mov	r4, r0
 8001e26:	4860      	ldr	r0, [pc, #384]	@ (8001fa8 <HAL_ADC_Init+0x29c>)
 8001e28:	f7ff ff10 	bl	8001c4c <LL_ADC_IsEnabled>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4323      	orrs	r3, r4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e008      	b.n	8001e4e <HAL_ADC_Init+0x142>
 8001e3c:	485b      	ldr	r0, [pc, #364]	@ (8001fac <HAL_ADC_Init+0x2a0>)
 8001e3e:	f7ff ff05 	bl	8001c4c <LL_ADC_IsEnabled>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d012      	beq.n	8001e78 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a53      	ldr	r2, [pc, #332]	@ (8001fa4 <HAL_ADC_Init+0x298>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d004      	beq.n	8001e66 <HAL_ADC_Init+0x15a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a51      	ldr	r2, [pc, #324]	@ (8001fa8 <HAL_ADC_Init+0x29c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_Init+0x15e>
 8001e66:	4a52      	ldr	r2, [pc, #328]	@ (8001fb0 <HAL_ADC_Init+0x2a4>)
 8001e68:	e000      	b.n	8001e6c <HAL_ADC_Init+0x160>
 8001e6a:	4a52      	ldr	r2, [pc, #328]	@ (8001fb4 <HAL_ADC_Init+0x2a8>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4619      	mov	r1, r3
 8001e72:	4610      	mov	r0, r2
 8001e74:	f7ff fd3c 	bl	80018f0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e78:	f7ff fd2e 	bl	80018d8 <HAL_GetREVID>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d914      	bls.n	8001eb0 <HAL_ADC_Init+0x1a4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d110      	bne.n	8001eb0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7d5b      	ldrb	r3, [r3, #21]
 8001e92:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e98:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e9e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7f1b      	ldrb	r3, [r3, #28]
 8001ea4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ea6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ea8:	f043 030c 	orr.w	r3, r3, #12
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	e00d      	b.n	8001ecc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7d5b      	ldrb	r3, [r3, #21]
 8001eb4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ec0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7f1b      	ldrb	r3, [r3, #28]
 8001ec6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7f1b      	ldrb	r3, [r3, #28]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	045b      	lsls	r3, r3, #17
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb8 <HAL_ADC_Init+0x2ac>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	69b9      	ldr	r1, [r7, #24]
 8001f0e:	430b      	orrs	r3, r1
 8001f10:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fed2 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 8001f1c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fedf 	bl	8001ce6 <LL_ADC_INJ_IsConversionOngoing>
 8001f28:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d15f      	bne.n	8001ff0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d15c      	bne.n	8001ff0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7d1b      	ldrb	r3, [r3, #20]
 8001f3a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <HAL_ADC_Init+0x2b0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	69b9      	ldr	r1, [r7, #24]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d130      	bne.n	8001fc4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_ADC_Init+0x2b4>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f76:	3a01      	subs	r2, #1
 8001f78:	0411      	lsls	r1, r2, #16
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f84:	4311      	orrs	r1, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	e01c      	b.n	8001fd4 <HAL_ADC_Init+0x2c8>
 8001f9a:	bf00      	nop
 8001f9c:	24000004 	.word	0x24000004
 8001fa0:	053e2d63 	.word	0x053e2d63
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40022100 	.word	0x40022100
 8001fac:	58026000 	.word	0x58026000
 8001fb0:	40022300 	.word	0x40022300
 8001fb4:	58026300 	.word	0x58026300
 8001fb8:	fff0c003 	.word	0xfff0c003
 8001fbc:	ffffbffc 	.word	0xffffbffc
 8001fc0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fde0 	bl	8002bb0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f023 010f 	bic.w	r1, r3, #15
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002010:	e007      	b.n	8002022 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 020f 	bic.w	r2, r2, #15
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	@ 0x54
 8002032:	e007      	b.n	8002044 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002044:	7ffb      	ldrb	r3, [r7, #31]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	bf00      	nop

08002050 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a55      	ldr	r2, [pc, #340]	@ (80021b8 <HAL_ADC_Start_DMA+0x168>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d004      	beq.n	8002070 <HAL_ADC_Start_DMA+0x20>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a54      	ldr	r2, [pc, #336]	@ (80021bc <HAL_ADC_Start_DMA+0x16c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_ADC_Start_DMA+0x24>
 8002070:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_ADC_Start_DMA+0x170>)
 8002072:	e000      	b.n	8002076 <HAL_ADC_Start_DMA+0x26>
 8002074:	4b53      	ldr	r3, [pc, #332]	@ (80021c4 <HAL_ADC_Start_DMA+0x174>)
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fd64 	bl	8001b44 <LL_ADC_GetMultimode>
 800207c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fe1c 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 808c 	bne.w	80021a8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_ADC_Start_DMA+0x4e>
 800209a:	2302      	movs	r3, #2
 800209c:	e087      	b.n	80021ae <HAL_ADC_Start_DMA+0x15e>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d002      	beq.n	80020b8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b09      	cmp	r3, #9
 80020b6:	d170      	bne.n	800219a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fbfb 	bl	80028b4 <ADC_Enable>
 80020be:	4603      	mov	r3, r0
 80020c0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d163      	bne.n	8002190 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020cc:	4b3e      	ldr	r3, [pc, #248]	@ (80021c8 <HAL_ADC_Start_DMA+0x178>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a37      	ldr	r2, [pc, #220]	@ (80021bc <HAL_ADC_Start_DMA+0x16c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d002      	beq.n	80020e8 <HAL_ADC_Start_DMA+0x98>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e000      	b.n	80020ea <HAL_ADC_Start_DMA+0x9a>
 80020e8:	4b33      	ldr	r3, [pc, #204]	@ (80021b8 <HAL_ADC_Start_DMA+0x168>)
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d002      	beq.n	80020f8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f023 0206 	bic.w	r2, r3, #6
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	659a      	str	r2, [r3, #88]	@ 0x58
 800211c:	e002      	b.n	8002124 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002128:	4a28      	ldr	r2, [pc, #160]	@ (80021cc <HAL_ADC_Start_DMA+0x17c>)
 800212a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002130:	4a27      	ldr	r2, [pc, #156]	@ (80021d0 <HAL_ADC_Start_DMA+0x180>)
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002138:	4a26      	ldr	r2, [pc, #152]	@ (80021d4 <HAL_ADC_Start_DMA+0x184>)
 800213a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	221c      	movs	r2, #28
 8002142:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0210 	orr.w	r2, r2, #16
 800215a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	4619      	mov	r1, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f7ff fc89 	bl	8001a7e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3340      	adds	r3, #64	@ 0x40
 8002176:	4619      	mov	r1, r3
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f001 fb62 	bl	8003844 <HAL_DMA_Start_IT>
 8002180:	4603      	mov	r3, r0
 8002182:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fd85 	bl	8001c98 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800218e:	e00d      	b.n	80021ac <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002198:	e008      	b.n	80021ac <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021a6:	e001      	b.n	80021ac <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
 80021aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40022000 	.word	0x40022000
 80021bc:	40022100 	.word	0x40022100
 80021c0:	40022300 	.word	0x40022300
 80021c4:	58026300 	.word	0x58026300
 80021c8:	fffff0fe 	.word	0xfffff0fe
 80021cc:	08002a87 	.word	0x08002a87
 80021d0:	08002b5f 	.word	0x08002b5f
 80021d4:	08002b7b 	.word	0x08002b7b

080021d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b0a1      	sub	sp, #132	@ 0x84
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a9d      	ldr	r2, [pc, #628]	@ (80024a4 <HAL_ADC_ConfigChannel+0x290>)
 800222e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x2a>
 800223a:	2302      	movs	r3, #2
 800223c:	e321      	b.n	8002882 <HAL_ADC_ConfigChannel+0x66e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fd38 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 8306 	bne.w	8002864 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002260:	2b00      	cmp	r3, #0
 8002262:	d108      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x62>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2201      	movs	r2, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	e016      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x90>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002286:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002288:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e003      	b.n	800229a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2201      	movs	r2, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	69d1      	ldr	r1, [r2, #28]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	430b      	orrs	r3, r1
 80022b0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	f7ff fbb1 	bl	8001a26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fcf9 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 80022ce:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fd06 	bl	8001ce6 <LL_ADC_INJ_IsConversionOngoing>
 80022da:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 80b3 	bne.w	800244a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 80af 	bne.w	800244a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	461a      	mov	r2, r3
 80022fa:	f7ff fbd3 	bl	8001aa4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022fe:	4b6a      	ldr	r3, [pc, #424]	@ (80024a8 <HAL_ADC_ConfigChannel+0x294>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800230a:	d10b      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x110>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	e01d      	b.n	8002360 <HAL_ADC_ConfigChannel+0x14c>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_ADC_ConfigChannel+0x136>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	e00a      	b.n	8002360 <HAL_ADC_ConfigChannel+0x14c>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d027      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6919      	ldr	r1, [r3, #16]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002378:	f7ff faee 	bl	8001958 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6919      	ldr	r1, [r3, #16]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	7e5b      	ldrb	r3, [r3, #25]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d102      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x17e>
 800238c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002390:	e000      	b.n	8002394 <HAL_ADC_ConfigChannel+0x180>
 8002392:	2300      	movs	r3, #0
 8002394:	461a      	mov	r2, r3
 8002396:	f7ff fb18 	bl	80019ca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6919      	ldr	r1, [r3, #16]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	7e1b      	ldrb	r3, [r3, #24]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d102      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x19c>
 80023aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023ae:	e000      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x19e>
 80023b0:	2300      	movs	r3, #0
 80023b2:	461a      	mov	r2, r3
 80023b4:	f7ff faf0 	bl	8001998 <LL_ADC_SetDataRightShift>
 80023b8:	e047      	b.n	800244a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	069b      	lsls	r3, r3, #26
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d107      	bne.n	80023de <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023dc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	069b      	lsls	r3, r3, #26
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d107      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002400:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002408:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	069b      	lsls	r3, r3, #26
 8002412:	429a      	cmp	r2, r3
 8002414:	d107      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002424:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800242c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	069b      	lsls	r3, r3, #26
 8002436:	429a      	cmp	r2, r3
 8002438:	d107      	bne.n	800244a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002448:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fbfc 	bl	8001c4c <LL_ADC_IsEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 820d 	bne.w	8002876 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	461a      	mov	r2, r3
 800246a:	f7ff fb47 	bl	8001afc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4a0c      	ldr	r2, [pc, #48]	@ (80024a4 <HAL_ADC_ConfigChannel+0x290>)
 8002474:	4293      	cmp	r3, r2
 8002476:	f040 8133 	bne.w	80026e0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002486:	2b00      	cmp	r3, #0
 8002488:	d110      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x298>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	3301      	adds	r3, #1
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2b09      	cmp	r3, #9
 8002498:	bf94      	ite	ls
 800249a:	2301      	movls	r3, #1
 800249c:	2300      	movhi	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	e01e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x2cc>
 80024a2:	bf00      	nop
 80024a4:	47ff0000 	.word	0x47ff0000
 80024a8:	5c001000 	.word	0x5c001000
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80024ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80024be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80024c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	bf94      	ite	ls
 80024da:	2301      	movls	r3, #1
 80024dc:	2300      	movhi	r3, #0
 80024de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d079      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x2ec>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	3301      	adds	r3, #1
 80024f8:	069b      	lsls	r3, r3, #26
 80024fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024fe:	e015      	b.n	800252c <HAL_ADC_ConfigChannel+0x318>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800250e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002510:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e003      	b.n	8002524 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800251c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_ADC_ConfigChannel+0x338>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2101      	movs	r1, #1
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	e017      	b.n	800257c <HAL_ADC_ConfigChannel+0x368>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800255a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800255e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002564:	2320      	movs	r3, #32
 8002566:	e003      	b.n	8002570 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	ea42 0103 	orr.w	r1, r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x38e>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	051b      	lsls	r3, r3, #20
 80025a0:	e018      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x3c0>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80025b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e003      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d4:	430b      	orrs	r3, r1
 80025d6:	e07e      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x3e0>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0e9b      	lsrs	r3, r3, #26
 80025ea:	3301      	adds	r3, #1
 80025ec:	069b      	lsls	r3, r3, #26
 80025ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025f2:	e015      	b.n	8002620 <HAL_ADC_ConfigChannel+0x40c>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800260c:	2320      	movs	r3, #32
 800260e:	e003      	b.n	8002618 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3301      	adds	r3, #1
 800261a:	069b      	lsls	r3, r3, #26
 800261c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x42c>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	3301      	adds	r3, #1
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	e017      	b.n	8002670 <HAL_ADC_ConfigChannel+0x45c>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	61bb      	str	r3, [r7, #24]
  return result;
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002658:	2320      	movs	r3, #32
 800265a:	e003      	b.n	8002664 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	ea42 0103 	orr.w	r1, r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_ADC_ConfigChannel+0x488>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	3b1e      	subs	r3, #30
 8002694:	051b      	lsls	r3, r3, #20
 8002696:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800269a:	e01b      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x4c0>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	60fb      	str	r3, [r7, #12]
  return result;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 021f 	and.w	r2, r3, #31
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	3b1e      	subs	r3, #30
 80026ce:	051b      	lsls	r3, r3, #20
 80026d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d4:	430b      	orrs	r3, r1
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	6892      	ldr	r2, [r2, #8]
 80026da:	4619      	mov	r1, r3
 80026dc:	f7ff f9e2 	bl	8001aa4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f280 80c6 	bge.w	8002876 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a67      	ldr	r2, [pc, #412]	@ (800288c <HAL_ADC_ConfigChannel+0x678>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x4ea>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a65      	ldr	r2, [pc, #404]	@ (8002890 <HAL_ADC_ConfigChannel+0x67c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x4ee>
 80026fe:	4b65      	ldr	r3, [pc, #404]	@ (8002894 <HAL_ADC_ConfigChannel+0x680>)
 8002700:	e000      	b.n	8002704 <HAL_ADC_ConfigChannel+0x4f0>
 8002702:	4b65      	ldr	r3, [pc, #404]	@ (8002898 <HAL_ADC_ConfigChannel+0x684>)
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f919 	bl	800193c <LL_ADC_GetCommonPathInternalCh>
 800270a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a5e      	ldr	r2, [pc, #376]	@ (800288c <HAL_ADC_ConfigChannel+0x678>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x50c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5d      	ldr	r2, [pc, #372]	@ (8002890 <HAL_ADC_ConfigChannel+0x67c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d10e      	bne.n	800273e <HAL_ADC_ConfigChannel+0x52a>
 8002720:	485a      	ldr	r0, [pc, #360]	@ (800288c <HAL_ADC_ConfigChannel+0x678>)
 8002722:	f7ff fa93 	bl	8001c4c <LL_ADC_IsEnabled>
 8002726:	4604      	mov	r4, r0
 8002728:	4859      	ldr	r0, [pc, #356]	@ (8002890 <HAL_ADC_ConfigChannel+0x67c>)
 800272a:	f7ff fa8f 	bl	8001c4c <LL_ADC_IsEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	4323      	orrs	r3, r4
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	e008      	b.n	8002750 <HAL_ADC_ConfigChannel+0x53c>
 800273e:	4857      	ldr	r0, [pc, #348]	@ (800289c <HAL_ADC_ConfigChannel+0x688>)
 8002740:	f7ff fa84 	bl	8001c4c <LL_ADC_IsEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d07d      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a51      	ldr	r2, [pc, #324]	@ (80028a0 <HAL_ADC_ConfigChannel+0x68c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d130      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x5ac>
 800275e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d12b      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a4b      	ldr	r2, [pc, #300]	@ (800289c <HAL_ADC_ConfigChannel+0x688>)
 800276e:	4293      	cmp	r3, r2
 8002770:	f040 8081 	bne.w	8002876 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a44      	ldr	r2, [pc, #272]	@ (800288c <HAL_ADC_ConfigChannel+0x678>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x574>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a43      	ldr	r2, [pc, #268]	@ (8002890 <HAL_ADC_ConfigChannel+0x67c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x578>
 8002788:	4a42      	ldr	r2, [pc, #264]	@ (8002894 <HAL_ADC_ConfigChannel+0x680>)
 800278a:	e000      	b.n	800278e <HAL_ADC_ConfigChannel+0x57a>
 800278c:	4a42      	ldr	r2, [pc, #264]	@ (8002898 <HAL_ADC_ConfigChannel+0x684>)
 800278e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002790:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002794:	4619      	mov	r1, r3
 8002796:	4610      	mov	r0, r2
 8002798:	f7ff f8bd 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800279c:	4b41      	ldr	r3, [pc, #260]	@ (80028a4 <HAL_ADC_ConfigChannel+0x690>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	4a41      	ldr	r2, [pc, #260]	@ (80028a8 <HAL_ADC_ConfigChannel+0x694>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	099b      	lsrs	r3, r3, #6
 80027aa:	3301      	adds	r3, #1
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027b0:	e002      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f9      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027be:	e05a      	b.n	8002876 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a39      	ldr	r2, [pc, #228]	@ (80028ac <HAL_ADC_ConfigChannel+0x698>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d11e      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x5f4>
 80027ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d119      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a30      	ldr	r2, [pc, #192]	@ (800289c <HAL_ADC_ConfigChannel+0x688>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d14b      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2a      	ldr	r2, [pc, #168]	@ (800288c <HAL_ADC_ConfigChannel+0x678>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_ADC_ConfigChannel+0x5de>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <HAL_ADC_ConfigChannel+0x67c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x5e2>
 80027f2:	4a28      	ldr	r2, [pc, #160]	@ (8002894 <HAL_ADC_ConfigChannel+0x680>)
 80027f4:	e000      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x5e4>
 80027f6:	4a28      	ldr	r2, [pc, #160]	@ (8002898 <HAL_ADC_ConfigChannel+0x684>)
 80027f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7ff f888 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002806:	e036      	b.n	8002876 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a28      	ldr	r2, [pc, #160]	@ (80028b0 <HAL_ADC_ConfigChannel+0x69c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d131      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x662>
 8002812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002814:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d12c      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1e      	ldr	r2, [pc, #120]	@ (800289c <HAL_ADC_ConfigChannel+0x688>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d127      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a18      	ldr	r2, [pc, #96]	@ (800288c <HAL_ADC_ConfigChannel+0x678>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d004      	beq.n	800283a <HAL_ADC_ConfigChannel+0x626>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <HAL_ADC_ConfigChannel+0x67c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x62a>
 800283a:	4a16      	ldr	r2, [pc, #88]	@ (8002894 <HAL_ADC_ConfigChannel+0x680>)
 800283c:	e000      	b.n	8002840 <HAL_ADC_ConfigChannel+0x62c>
 800283e:	4a16      	ldr	r2, [pc, #88]	@ (8002898 <HAL_ADC_ConfigChannel+0x684>)
 8002840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002842:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f7ff f864 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
 800284e:	e012      	b.n	8002876 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002862:	e008      	b.n	8002876 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800287e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002882:	4618      	mov	r0, r3
 8002884:	3784      	adds	r7, #132	@ 0x84
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	bf00      	nop
 800288c:	40022000 	.word	0x40022000
 8002890:	40022100 	.word	0x40022100
 8002894:	40022300 	.word	0x40022300
 8002898:	58026300 	.word	0x58026300
 800289c:	58026000 	.word	0x58026000
 80028a0:	cb840000 	.word	0xcb840000
 80028a4:	24000004 	.word	0x24000004
 80028a8:	053e2d63 	.word	0x053e2d63
 80028ac:	c7520000 	.word	0xc7520000
 80028b0:	cfb80000 	.word	0xcfb80000

080028b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff f9c3 	bl	8001c4c <LL_ADC_IsEnabled>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d16e      	bne.n	80029aa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	4b38      	ldr	r3, [pc, #224]	@ (80029b4 <ADC_Enable+0x100>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00d      	beq.n	80028f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	f043 0210 	orr.w	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e05a      	b.n	80029ac <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f97e 	bl	8001bfc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002900:	f7fe ffba 	bl	8001878 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2b      	ldr	r2, [pc, #172]	@ (80029b8 <ADC_Enable+0x104>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <ADC_Enable+0x66>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a29      	ldr	r2, [pc, #164]	@ (80029bc <ADC_Enable+0x108>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <ADC_Enable+0x6a>
 800291a:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <ADC_Enable+0x10c>)
 800291c:	e000      	b.n	8002920 <ADC_Enable+0x6c>
 800291e:	4b29      	ldr	r3, [pc, #164]	@ (80029c4 <ADC_Enable+0x110>)
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff f90f 	bl	8001b44 <LL_ADC_GetMultimode>
 8002926:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a23      	ldr	r2, [pc, #140]	@ (80029bc <ADC_Enable+0x108>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d002      	beq.n	8002938 <ADC_Enable+0x84>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	e000      	b.n	800293a <ADC_Enable+0x86>
 8002938:	4b1f      	ldr	r3, [pc, #124]	@ (80029b8 <ADC_Enable+0x104>)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	4293      	cmp	r3, r2
 8002940:	d02c      	beq.n	800299c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d130      	bne.n	80029aa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002948:	e028      	b.n	800299c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f97c 	bl	8001c4c <LL_ADC_IsEnabled>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f94c 	bl	8001bfc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002964:	f7fe ff88 	bl	8001878 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d914      	bls.n	800299c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d00d      	beq.n	800299c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002984:	f043 0210 	orr.w	r2, r3, #16
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e007      	b.n	80029ac <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d1cf      	bne.n	800294a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	8000003f 	.word	0x8000003f
 80029b8:	40022000 	.word	0x40022000
 80029bc:	40022100 	.word	0x40022100
 80029c0:	40022300 	.word	0x40022300
 80029c4:	58026300 	.word	0x58026300

080029c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f94c 	bl	8001c72 <LL_ADC_IsDisableOngoing>
 80029da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f933 	bl	8001c4c <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d047      	beq.n	8002a7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d144      	bne.n	8002a7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030d 	and.w	r3, r3, #13
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10c      	bne.n	8002a1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f90d 	bl	8001c24 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2203      	movs	r2, #3
 8002a10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a12:	f7fe ff31 	bl	8001878 <HAL_GetTick>
 8002a16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a18:	e029      	b.n	8002a6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1e:	f043 0210 	orr.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e023      	b.n	8002a7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a36:	f7fe ff1f 	bl	8001878 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d914      	bls.n	8002a6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	f043 0210 	orr.w	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e007      	b.n	8002a7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1dc      	bne.n	8002a36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d14b      	bne.n	8002b38 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d021      	beq.n	8002afe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe ff9e 	bl	8001a00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d032      	beq.n	8002b30 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d12b      	bne.n	8002b30 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11f      	bne.n	8002b30 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54
 8002afc:	e018      	b.n	8002b30 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d111      	bne.n	8002b30 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b28:	f043 0201 	orr.w	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fb51 	bl	80021d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b36:	e00e      	b.n	8002b56 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fb5b 	bl	8002200 <HAL_ADC_ErrorCallback>
}
 8002b4a:	e004      	b.n	8002b56 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff fb3d 	bl	80021ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	f043 0204 	orr.w	r2, r3, #4
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff fb2d 	bl	8002200 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a7a      	ldr	r2, [pc, #488]	@ (8002da8 <ADC_ConfigureBoostMode+0x1f8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <ADC_ConfigureBoostMode+0x1c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a79      	ldr	r2, [pc, #484]	@ (8002dac <ADC_ConfigureBoostMode+0x1fc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d109      	bne.n	8002be0 <ADC_ConfigureBoostMode+0x30>
 8002bcc:	4b78      	ldr	r3, [pc, #480]	@ (8002db0 <ADC_ConfigureBoostMode+0x200>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e008      	b.n	8002bf2 <ADC_ConfigureBoostMode+0x42>
 8002be0:	4b74      	ldr	r3, [pc, #464]	@ (8002db4 <ADC_ConfigureBoostMode+0x204>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01c      	beq.n	8002c30 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002bf6:	f003 ffd3 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8002bfa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c04:	d010      	beq.n	8002c28 <ADC_ConfigureBoostMode+0x78>
 8002c06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c0a:	d873      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x144>
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c10:	d002      	beq.n	8002c18 <ADC_ConfigureBoostMode+0x68>
 8002c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c16:	d16d      	bne.n	8002cf4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	60fb      	str	r3, [r7, #12]
        break;
 8002c26:	e068      	b.n	8002cfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	60fb      	str	r3, [r7, #12]
        break;
 8002c2e:	e064      	b.n	8002cfa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c30:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002c34:	f04f 0100 	mov.w	r1, #0
 8002c38:	f005 fa44 	bl	80080c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c3c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002c46:	d051      	beq.n	8002cec <ADC_ConfigureBoostMode+0x13c>
 8002c48:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002c4c:	d854      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
 8002c4e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002c52:	d047      	beq.n	8002ce4 <ADC_ConfigureBoostMode+0x134>
 8002c54:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002c58:	d84e      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
 8002c5a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c5e:	d03d      	beq.n	8002cdc <ADC_ConfigureBoostMode+0x12c>
 8002c60:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c64:	d848      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
 8002c66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c6a:	d033      	beq.n	8002cd4 <ADC_ConfigureBoostMode+0x124>
 8002c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c70:	d842      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
 8002c72:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c76:	d029      	beq.n	8002ccc <ADC_ConfigureBoostMode+0x11c>
 8002c78:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c7c:	d83c      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
 8002c7e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c82:	d01a      	beq.n	8002cba <ADC_ConfigureBoostMode+0x10a>
 8002c84:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c88:	d836      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
 8002c8a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c8e:	d014      	beq.n	8002cba <ADC_ConfigureBoostMode+0x10a>
 8002c90:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c94:	d830      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
 8002c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c9a:	d00e      	beq.n	8002cba <ADC_ConfigureBoostMode+0x10a>
 8002c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ca0:	d82a      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
 8002ca2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ca6:	d008      	beq.n	8002cba <ADC_ConfigureBoostMode+0x10a>
 8002ca8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002cac:	d824      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
 8002cae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cb2:	d002      	beq.n	8002cba <ADC_ConfigureBoostMode+0x10a>
 8002cb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cb8:	d11e      	bne.n	8002cf8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	0c9b      	lsrs	r3, r3, #18
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	60fb      	str	r3, [r7, #12]
        break;
 8002cca:	e016      	b.n	8002cfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	60fb      	str	r3, [r7, #12]
        break;
 8002cd2:	e012      	b.n	8002cfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	60fb      	str	r3, [r7, #12]
        break;
 8002cda:	e00e      	b.n	8002cfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	60fb      	str	r3, [r7, #12]
        break;
 8002ce2:	e00a      	b.n	8002cfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	09db      	lsrs	r3, r3, #7
 8002ce8:	60fb      	str	r3, [r7, #12]
        break;
 8002cea:	e006      	b.n	8002cfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	60fb      	str	r3, [r7, #12]
        break;
 8002cf2:	e002      	b.n	8002cfa <ADC_ConfigureBoostMode+0x14a>
        break;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002cf8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002cfa:	f7fe fded 	bl	80018d8 <HAL_GetREVID>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d815      	bhi.n	8002d34 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002db8 <ADC_ConfigureBoostMode+0x208>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d908      	bls.n	8002d22 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d1e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d20:	e03e      	b.n	8002da0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d30:	609a      	str	r2, [r3, #8]
}
 8002d32:	e035      	b.n	8002da0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <ADC_ConfigureBoostMode+0x20c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d808      	bhi.n	8002d54 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	e025      	b.n	8002da0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc0 <ADC_ConfigureBoostMode+0x210>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d80a      	bhi.n	8002d72 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d6e:	609a      	str	r2, [r3, #8]
}
 8002d70:	e016      	b.n	8002da0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a13      	ldr	r2, [pc, #76]	@ (8002dc4 <ADC_ConfigureBoostMode+0x214>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d80a      	bhi.n	8002d90 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8c:	609a      	str	r2, [r3, #8]
}
 8002d8e:	e007      	b.n	8002da0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40022000 	.word	0x40022000
 8002dac:	40022100 	.word	0x40022100
 8002db0:	40022300 	.word	0x40022300
 8002db4:	58026300 	.word	0x58026300
 8002db8:	01312d00 	.word	0x01312d00
 8002dbc:	005f5e10 	.word	0x005f5e10
 8002dc0:	00bebc20 	.word	0x00bebc20
 8002dc4:	017d7840 	.word	0x017d7840

08002dc8 <LL_ADC_IsEnabled>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <LL_ADC_IsEnabled+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_ADC_IsEnabled+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <LL_ADC_StartCalibration>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <LL_ADC_StartCalibration+0x38>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e10:	430a      	orrs	r2, r1
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	3ffeffc0 	.word	0x3ffeffc0

08002e2c <LL_ADC_IsCalibrationOnGoing>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e40:	d101      	bne.n	8002e46 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d101      	bne.n	8002e6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_ADCEx_Calibration_Start+0x1e>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e04c      	b.n	8002f34 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f7ff fd90 	bl	80029c8 <ADC_Disable>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d135      	bne.n	8002f1e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eb6:	4b21      	ldr	r3, [pc, #132]	@ (8002f3c <HAL_ADCEx_Calibration_Start+0xc0>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff90 	bl	8002df0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ed0:	e014      	b.n	8002efc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4a19      	ldr	r2, [pc, #100]	@ (8002f40 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d30d      	bcc.n	8002efc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee4:	f023 0312 	bic.w	r3, r3, #18
 8002ee8:	f043 0210 	orr.w	r2, r3, #16
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e01b      	b.n	8002f34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff93 	bl	8002e2c <LL_ADC_IsCalibrationOnGoing>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e2      	bne.n	8002ed2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f10:	f023 0303 	bic.w	r3, r3, #3
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f1c:	e005      	b.n	8002f2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f22:	f043 0210 	orr.w	r2, r3, #16
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	ffffeefd 	.word	0xffffeefd
 8002f40:	25c3f800 	.word	0x25c3f800

08002f44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b09f      	sub	sp, #124	@ 0x7c
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e0be      	b.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a5c      	ldr	r2, [pc, #368]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d102      	bne.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	e001      	b.n	8002f86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e09d      	b.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ff54 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 8002fac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ff4e 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d17f      	bne.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d17c      	bne.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a47      	ldr	r2, [pc, #284]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a46      	ldr	r2, [pc, #280]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002fd8:	4b45      	ldr	r3, [pc, #276]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002fda:	e000      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002fdc:	4b45      	ldr	r3, [pc, #276]	@ (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002fde:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d039      	beq.n	800305c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a3a      	ldr	r2, [pc, #232]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a38      	ldr	r2, [pc, #224]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10e      	bne.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800300e:	4836      	ldr	r0, [pc, #216]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003010:	f7ff feda 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003014:	4604      	mov	r4, r0
 8003016:	4835      	ldr	r0, [pc, #212]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003018:	f7ff fed6 	bl	8002dc8 <LL_ADC_IsEnabled>
 800301c:	4603      	mov	r3, r0
 800301e:	4323      	orrs	r3, r4
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e008      	b.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800302c:	4832      	ldr	r0, [pc, #200]	@ (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800302e:	f7ff fecb 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d047      	beq.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	4b2d      	ldr	r3, [pc, #180]	@ (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003048:	4013      	ands	r3, r2
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	6811      	ldr	r1, [r2, #0]
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	6892      	ldr	r2, [r2, #8]
 8003052:	430a      	orrs	r2, r1
 8003054:	431a      	orrs	r2, r3
 8003056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003058:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800305a:	e03a      	b.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800305c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003066:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1e      	ldr	r2, [pc, #120]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1d      	ldr	r2, [pc, #116]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d10e      	bne.n	800309a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800307c:	481a      	ldr	r0, [pc, #104]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800307e:	f7ff fea3 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003082:	4604      	mov	r4, r0
 8003084:	4819      	ldr	r0, [pc, #100]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003086:	f7ff fe9f 	bl	8002dc8 <LL_ADC_IsEnabled>
 800308a:	4603      	mov	r3, r0
 800308c:	4323      	orrs	r3, r4
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e008      	b.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800309a:	4817      	ldr	r0, [pc, #92]	@ (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800309c:	f7ff fe94 	bl	8002dc8 <LL_ADC_IsEnabled>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d010      	beq.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030bc:	e009      	b.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c2:	f043 0220 	orr.w	r2, r3, #32
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80030d0:	e000      	b.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030dc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	377c      	adds	r7, #124	@ 0x7c
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd90      	pop	{r4, r7, pc}
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40022100 	.word	0x40022100
 80030f0:	40022300 	.word	0x40022300
 80030f4:	58026300 	.word	0x58026300
 80030f8:	58026000 	.word	0x58026000
 80030fc:	fffff0e0 	.word	0xfffff0e0

08003100 <__NVIC_SetPriorityGrouping>:
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <__NVIC_SetPriorityGrouping+0x40>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800311c:	4013      	ands	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 800312a:	4313      	orrs	r3, r2
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <__NVIC_SetPriorityGrouping+0x40>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00
 8003144:	05fa0000 	.word	0x05fa0000

08003148 <__NVIC_GetPriorityGrouping>:
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800314c:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <__NVIC_GetPriorityGrouping+0x18>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 0307 	and.w	r3, r3, #7
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_EnableIRQ>:
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800316e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003172:	2b00      	cmp	r3, #0
 8003174:	db0b      	blt.n	800318e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	f003 021f 	and.w	r2, r3, #31
 800317c:	4907      	ldr	r1, [pc, #28]	@ (800319c <__NVIC_EnableIRQ+0x38>)
 800317e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2001      	movs	r0, #1
 8003186:	fa00 f202 	lsl.w	r2, r0, r2
 800318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000e100 	.word	0xe000e100

080031a0 <__NVIC_SetPriority>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	6039      	str	r1, [r7, #0]
 80031aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db0a      	blt.n	80031ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	490c      	ldr	r1, [pc, #48]	@ (80031ec <__NVIC_SetPriority+0x4c>)
 80031ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	440b      	add	r3, r1
 80031c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031c8:	e00a      	b.n	80031e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4908      	ldr	r1, [pc, #32]	@ (80031f0 <__NVIC_SetPriority+0x50>)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	3b04      	subs	r3, #4
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	440b      	add	r3, r1
 80031de:	761a      	strb	r2, [r3, #24]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000e100 	.word	0xe000e100
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <NVIC_EncodePriority>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f1c3 0307 	rsb	r3, r3, #7
 800320e:	2b04      	cmp	r3, #4
 8003210:	bf28      	it	cs
 8003212:	2304      	movcs	r3, #4
 8003214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3304      	adds	r3, #4
 800321a:	2b06      	cmp	r3, #6
 800321c:	d902      	bls.n	8003224 <NVIC_EncodePriority+0x30>
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3b03      	subs	r3, #3
 8003222:	e000      	b.n	8003226 <NVIC_EncodePriority+0x32>
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	f04f 32ff 	mov.w	r2, #4294967295
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	401a      	ands	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800323c:	f04f 31ff 	mov.w	r1, #4294967295
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43d9      	mvns	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	4313      	orrs	r3, r2
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	@ 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ff4c 	bl	8003100 <__NVIC_SetPriorityGrouping>
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800327e:	f7ff ff63 	bl	8003148 <__NVIC_GetPriorityGrouping>
 8003282:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	6978      	ldr	r0, [r7, #20]
 800328a:	f7ff ffb3 	bl	80031f4 <NVIC_EncodePriority>
 800328e:	4602      	mov	r2, r0
 8003290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ff82 	bl	80031a0 <__NVIC_SetPriority>
}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff56 	bl	8003164 <__NVIC_EnableIRQ>
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80032c4:	f3bf 8f5f 	dmb	sy
}
 80032c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80032ca:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <HAL_MPU_Disable+0x28>)
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	4a06      	ldr	r2, [pc, #24]	@ (80032e8 <HAL_MPU_Disable+0x28>)
 80032d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80032d6:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_MPU_Disable+0x2c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	605a      	str	r2, [r3, #4]
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000ed00 	.word	0xe000ed00
 80032ec:	e000ed90 	.word	0xe000ed90

080032f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80032f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003328 <HAL_MPU_Enable+0x38>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003302:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <HAL_MPU_Enable+0x3c>)
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	4a09      	ldr	r2, [pc, #36]	@ (800332c <HAL_MPU_Enable+0x3c>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800330e:	f3bf 8f4f 	dsb	sy
}
 8003312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003314:	f3bf 8f6f 	isb	sy
}
 8003318:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed90 	.word	0xe000ed90
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	785a      	ldrb	r2, [r3, #1]
 800333c:	4b1d      	ldr	r3, [pc, #116]	@ (80033b4 <HAL_MPU_ConfigRegion+0x84>)
 800333e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d029      	beq.n	800339c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003348:	4a1a      	ldr	r2, [pc, #104]	@ (80033b4 <HAL_MPU_ConfigRegion+0x84>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7b1b      	ldrb	r3, [r3, #12]
 8003354:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7adb      	ldrb	r3, [r3, #11]
 800335a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800335c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7a9b      	ldrb	r3, [r3, #10]
 8003362:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003364:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7b5b      	ldrb	r3, [r3, #13]
 800336a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800336c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7b9b      	ldrb	r3, [r3, #14]
 8003372:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003374:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7bdb      	ldrb	r3, [r3, #15]
 800337a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800337c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7a5b      	ldrb	r3, [r3, #9]
 8003382:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003384:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	7a1b      	ldrb	r3, [r3, #8]
 800338a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800338c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003394:	4a07      	ldr	r2, [pc, #28]	@ (80033b4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003396:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003398:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800339a:	e005      	b.n	80033a8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800339c:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <HAL_MPU_ConfigRegion+0x84>)
 800339e:	2200      	movs	r2, #0
 80033a0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80033a2:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <HAL_MPU_ConfigRegion+0x84>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	611a      	str	r2, [r3, #16]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed90 	.word	0xe000ed90

080033b8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e014      	b.n	80033f4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	791b      	ldrb	r3, [r3, #4]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd f90e 	bl	80005fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	795b      	ldrb	r3, [r3, #5]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_DAC_Start+0x16>
 800340e:	2302      	movs	r3, #2
 8003410:	e040      	b.n	8003494 <HAL_DAC_Start+0x98>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2201      	movs	r2, #1
 800342c:	409a      	lsls	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003446:	2b02      	cmp	r3, #2
 8003448:	d11d      	bne.n	8003486 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	e014      	b.n	8003486 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2102      	movs	r1, #2
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	429a      	cmp	r2, r3
 8003474:	d107      	bne.n	8003486 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0202 	orr.w	r2, r2, #2
 8003484:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b6:	d120      	bne.n	80034fa <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c6:	d118      	bne.n	80034fa <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2204      	movs	r2, #4
 80034cc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f043 0201 	orr.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034f2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f852 	bl	800359e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003504:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003508:	d120      	bne.n	800354c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003518:	d118      	bne.n	800354c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2204      	movs	r2, #4
 800351e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f043 0202 	orr.w	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003534:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003544:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f972 	bl	8003830 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d105      	bne.n	800357e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3308      	adds	r3, #8
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e004      	b.n	8003588 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	3314      	adds	r3, #20
 8003586:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	461a      	mov	r2, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	795b      	ldrb	r3, [r3, #5]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_DAC_ConfigChannel+0x18>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e12a      	b.n	8003822 <HAL_DAC_ConfigChannel+0x26e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2202      	movs	r2, #2
 80035d6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	f040 8081 	bne.w	80036e4 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80035e2:	f7fe f949 	bl	8001878 <HAL_GetTick>
 80035e6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d140      	bne.n	8003670 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035ee:	e018      	b.n	8003622 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035f0:	f7fe f942 	bl	8001878 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d911      	bls.n	8003622 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003604:	4b89      	ldr	r3, [pc, #548]	@ (800382c <HAL_DAC_ConfigChannel+0x278>)
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f043 0208 	orr.w	r2, r3, #8
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2203      	movs	r2, #3
 800361c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0ff      	b.n	8003822 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003628:	4b80      	ldr	r3, [pc, #512]	@ (800382c <HAL_DAC_ConfigChannel+0x278>)
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1df      	bne.n	80035f0 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8003630:	2001      	movs	r0, #1
 8003632:	f7fe f92d 	bl	8001890 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	6992      	ldr	r2, [r2, #24]
 800363e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003640:	e023      	b.n	800368a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003642:	f7fe f919 	bl	8001878 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d90f      	bls.n	8003670 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003656:	2b00      	cmp	r3, #0
 8003658:	da0a      	bge.n	8003670 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f043 0208 	orr.w	r2, r3, #8
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2203      	movs	r2, #3
 800366a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0d8      	b.n	8003822 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003676:	2b00      	cmp	r3, #0
 8003678:	dbe3      	blt.n	8003642 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800367a:	2001      	movs	r0, #1
 800367c:	f7fe f908 	bl	8001890 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	6992      	ldr	r2, [r2, #24]
 8003688:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	ea02 0103 	and.w	r1, r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	21ff      	movs	r1, #255	@ 0xff
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	ea02 0103 	and.w	r1, r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d11d      	bne.n	8003728 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	221f      	movs	r2, #31
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4013      	ands	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2207      	movs	r2, #7
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4013      	ands	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d102      	bne.n	8003752 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e00f      	b.n	8003772 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d102      	bne.n	8003760 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800375a:	2301      	movs	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e008      	b.n	8003772 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003768:	2301      	movs	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	e001      	b.n	8003772 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4313      	orrs	r3, r2
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43da      	mvns	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	400a      	ands	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4013      	ands	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	22c0      	movs	r2, #192	@ 0xc0
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	400a      	ands	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20008000 	.word	0x20008000

08003830 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e226      	b.n	8003cae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_DMA_Start_IT+0x2a>
 800386a:	2302      	movs	r3, #2
 800386c:	e21f      	b.n	8003cae <HAL_DMA_Start_IT+0x46a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	f040 820a 	bne.w	8003c98 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <HAL_DMA_Start_IT+0x1f4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d04a      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a66      	ldr	r2, [pc, #408]	@ (8003a3c <HAL_DMA_Start_IT+0x1f8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d045      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <HAL_DMA_Start_IT+0x1fc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d040      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a63      	ldr	r2, [pc, #396]	@ (8003a44 <HAL_DMA_Start_IT+0x200>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d03b      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a62      	ldr	r2, [pc, #392]	@ (8003a48 <HAL_DMA_Start_IT+0x204>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d036      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a60      	ldr	r2, [pc, #384]	@ (8003a4c <HAL_DMA_Start_IT+0x208>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d031      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a5f      	ldr	r2, [pc, #380]	@ (8003a50 <HAL_DMA_Start_IT+0x20c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d02c      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003a54 <HAL_DMA_Start_IT+0x210>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d027      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003a58 <HAL_DMA_Start_IT+0x214>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d022      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a5a      	ldr	r2, [pc, #360]	@ (8003a5c <HAL_DMA_Start_IT+0x218>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01d      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a59      	ldr	r2, [pc, #356]	@ (8003a60 <HAL_DMA_Start_IT+0x21c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a57      	ldr	r2, [pc, #348]	@ (8003a64 <HAL_DMA_Start_IT+0x220>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a56      	ldr	r2, [pc, #344]	@ (8003a68 <HAL_DMA_Start_IT+0x224>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a54      	ldr	r2, [pc, #336]	@ (8003a6c <HAL_DMA_Start_IT+0x228>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a53      	ldr	r2, [pc, #332]	@ (8003a70 <HAL_DMA_Start_IT+0x22c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_Start_IT+0xee>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a51      	ldr	r2, [pc, #324]	@ (8003a74 <HAL_DMA_Start_IT+0x230>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <HAL_DMA_Start_IT+0x100>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e007      	b.n	8003954 <HAL_DMA_Start_IT+0x110>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f9dc 	bl	8003d18 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a34      	ldr	r2, [pc, #208]	@ (8003a38 <HAL_DMA_Start_IT+0x1f4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d04a      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a33      	ldr	r2, [pc, #204]	@ (8003a3c <HAL_DMA_Start_IT+0x1f8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d045      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a31      	ldr	r2, [pc, #196]	@ (8003a40 <HAL_DMA_Start_IT+0x1fc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d040      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a30      	ldr	r2, [pc, #192]	@ (8003a44 <HAL_DMA_Start_IT+0x200>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d03b      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a48 <HAL_DMA_Start_IT+0x204>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d036      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2d      	ldr	r2, [pc, #180]	@ (8003a4c <HAL_DMA_Start_IT+0x208>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d031      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a50 <HAL_DMA_Start_IT+0x20c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d02c      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003a54 <HAL_DMA_Start_IT+0x210>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d027      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a28      	ldr	r2, [pc, #160]	@ (8003a58 <HAL_DMA_Start_IT+0x214>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d022      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a27      	ldr	r2, [pc, #156]	@ (8003a5c <HAL_DMA_Start_IT+0x218>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d01d      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a25      	ldr	r2, [pc, #148]	@ (8003a60 <HAL_DMA_Start_IT+0x21c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d018      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <HAL_DMA_Start_IT+0x220>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d013      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a22      	ldr	r2, [pc, #136]	@ (8003a68 <HAL_DMA_Start_IT+0x224>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00e      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a21      	ldr	r2, [pc, #132]	@ (8003a6c <HAL_DMA_Start_IT+0x228>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a70 <HAL_DMA_Start_IT+0x22c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_DMA_Start_IT+0x1bc>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003a74 <HAL_DMA_Start_IT+0x230>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_Start_IT+0x1c0>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_DMA_Start_IT+0x1c2>
 8003a04:	2300      	movs	r3, #0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d036      	beq.n	8003a78 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 021e 	bic.w	r2, r3, #30
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0216 	orr.w	r2, r2, #22
 8003a1c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d03e      	beq.n	8003aa4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0208 	orr.w	r2, r2, #8
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e035      	b.n	8003aa4 <HAL_DMA_Start_IT+0x260>
 8003a38:	40020010 	.word	0x40020010
 8003a3c:	40020028 	.word	0x40020028
 8003a40:	40020040 	.word	0x40020040
 8003a44:	40020058 	.word	0x40020058
 8003a48:	40020070 	.word	0x40020070
 8003a4c:	40020088 	.word	0x40020088
 8003a50:	400200a0 	.word	0x400200a0
 8003a54:	400200b8 	.word	0x400200b8
 8003a58:	40020410 	.word	0x40020410
 8003a5c:	40020428 	.word	0x40020428
 8003a60:	40020440 	.word	0x40020440
 8003a64:	40020458 	.word	0x40020458
 8003a68:	40020470 	.word	0x40020470
 8003a6c:	40020488 	.word	0x40020488
 8003a70:	400204a0 	.word	0x400204a0
 8003a74:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 020e 	bic.w	r2, r3, #14
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 020a 	orr.w	r2, r2, #10
 8003a8a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0204 	orr.w	r2, r2, #4
 8003aa2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a83      	ldr	r2, [pc, #524]	@ (8003cb8 <HAL_DMA_Start_IT+0x474>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d072      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a82      	ldr	r2, [pc, #520]	@ (8003cbc <HAL_DMA_Start_IT+0x478>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d06d      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a80      	ldr	r2, [pc, #512]	@ (8003cc0 <HAL_DMA_Start_IT+0x47c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d068      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a7f      	ldr	r2, [pc, #508]	@ (8003cc4 <HAL_DMA_Start_IT+0x480>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d063      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc8 <HAL_DMA_Start_IT+0x484>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d05e      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7c      	ldr	r2, [pc, #496]	@ (8003ccc <HAL_DMA_Start_IT+0x488>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d059      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a7a      	ldr	r2, [pc, #488]	@ (8003cd0 <HAL_DMA_Start_IT+0x48c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d054      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a79      	ldr	r2, [pc, #484]	@ (8003cd4 <HAL_DMA_Start_IT+0x490>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d04f      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a77      	ldr	r2, [pc, #476]	@ (8003cd8 <HAL_DMA_Start_IT+0x494>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d04a      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a76      	ldr	r2, [pc, #472]	@ (8003cdc <HAL_DMA_Start_IT+0x498>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d045      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a74      	ldr	r2, [pc, #464]	@ (8003ce0 <HAL_DMA_Start_IT+0x49c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d040      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a73      	ldr	r2, [pc, #460]	@ (8003ce4 <HAL_DMA_Start_IT+0x4a0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d03b      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a71      	ldr	r2, [pc, #452]	@ (8003ce8 <HAL_DMA_Start_IT+0x4a4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d036      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a70      	ldr	r2, [pc, #448]	@ (8003cec <HAL_DMA_Start_IT+0x4a8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d031      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a6e      	ldr	r2, [pc, #440]	@ (8003cf0 <HAL_DMA_Start_IT+0x4ac>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02c      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6d      	ldr	r2, [pc, #436]	@ (8003cf4 <HAL_DMA_Start_IT+0x4b0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d027      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf8 <HAL_DMA_Start_IT+0x4b4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d022      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6a      	ldr	r2, [pc, #424]	@ (8003cfc <HAL_DMA_Start_IT+0x4b8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d01d      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a68      	ldr	r2, [pc, #416]	@ (8003d00 <HAL_DMA_Start_IT+0x4bc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d018      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a67      	ldr	r2, [pc, #412]	@ (8003d04 <HAL_DMA_Start_IT+0x4c0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a65      	ldr	r2, [pc, #404]	@ (8003d08 <HAL_DMA_Start_IT+0x4c4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00e      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a64      	ldr	r2, [pc, #400]	@ (8003d0c <HAL_DMA_Start_IT+0x4c8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d009      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a62      	ldr	r2, [pc, #392]	@ (8003d10 <HAL_DMA_Start_IT+0x4cc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_Start_IT+0x350>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a61      	ldr	r2, [pc, #388]	@ (8003d14 <HAL_DMA_Start_IT+0x4d0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_DMA_Start_IT+0x354>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_DMA_Start_IT+0x356>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01a      	beq.n	8003bd4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a37      	ldr	r2, [pc, #220]	@ (8003cb8 <HAL_DMA_Start_IT+0x474>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d04a      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a36      	ldr	r2, [pc, #216]	@ (8003cbc <HAL_DMA_Start_IT+0x478>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d045      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a34      	ldr	r2, [pc, #208]	@ (8003cc0 <HAL_DMA_Start_IT+0x47c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d040      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a33      	ldr	r2, [pc, #204]	@ (8003cc4 <HAL_DMA_Start_IT+0x480>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d03b      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a31      	ldr	r2, [pc, #196]	@ (8003cc8 <HAL_DMA_Start_IT+0x484>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d036      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a30      	ldr	r2, [pc, #192]	@ (8003ccc <HAL_DMA_Start_IT+0x488>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d031      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd0 <HAL_DMA_Start_IT+0x48c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d02c      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd4 <HAL_DMA_Start_IT+0x490>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d027      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2b      	ldr	r2, [pc, #172]	@ (8003cd8 <HAL_DMA_Start_IT+0x494>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d022      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2a      	ldr	r2, [pc, #168]	@ (8003cdc <HAL_DMA_Start_IT+0x498>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d01d      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a28      	ldr	r2, [pc, #160]	@ (8003ce0 <HAL_DMA_Start_IT+0x49c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d018      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a27      	ldr	r2, [pc, #156]	@ (8003ce4 <HAL_DMA_Start_IT+0x4a0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a25      	ldr	r2, [pc, #148]	@ (8003ce8 <HAL_DMA_Start_IT+0x4a4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00e      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a24      	ldr	r2, [pc, #144]	@ (8003cec <HAL_DMA_Start_IT+0x4a8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a22      	ldr	r2, [pc, #136]	@ (8003cf0 <HAL_DMA_Start_IT+0x4ac>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_Start_IT+0x430>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a21      	ldr	r2, [pc, #132]	@ (8003cf4 <HAL_DMA_Start_IT+0x4b0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d108      	bne.n	8003c86 <HAL_DMA_Start_IT+0x442>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e012      	b.n	8003cac <HAL_DMA_Start_IT+0x468>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e009      	b.n	8003cac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40020010 	.word	0x40020010
 8003cbc:	40020028 	.word	0x40020028
 8003cc0:	40020040 	.word	0x40020040
 8003cc4:	40020058 	.word	0x40020058
 8003cc8:	40020070 	.word	0x40020070
 8003ccc:	40020088 	.word	0x40020088
 8003cd0:	400200a0 	.word	0x400200a0
 8003cd4:	400200b8 	.word	0x400200b8
 8003cd8:	40020410 	.word	0x40020410
 8003cdc:	40020428 	.word	0x40020428
 8003ce0:	40020440 	.word	0x40020440
 8003ce4:	40020458 	.word	0x40020458
 8003ce8:	40020470 	.word	0x40020470
 8003cec:	40020488 	.word	0x40020488
 8003cf0:	400204a0 	.word	0x400204a0
 8003cf4:	400204b8 	.word	0x400204b8
 8003cf8:	58025408 	.word	0x58025408
 8003cfc:	5802541c 	.word	0x5802541c
 8003d00:	58025430 	.word	0x58025430
 8003d04:	58025444 	.word	0x58025444
 8003d08:	58025458 	.word	0x58025458
 8003d0c:	5802546c 	.word	0x5802546c
 8003d10:	58025480 	.word	0x58025480
 8003d14:	58025494 	.word	0x58025494

08003d18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7f      	ldr	r2, [pc, #508]	@ (8003f34 <DMA_SetConfig+0x21c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d072      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7d      	ldr	r2, [pc, #500]	@ (8003f38 <DMA_SetConfig+0x220>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d06d      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f3c <DMA_SetConfig+0x224>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d068      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7a      	ldr	r2, [pc, #488]	@ (8003f40 <DMA_SetConfig+0x228>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d063      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a79      	ldr	r2, [pc, #484]	@ (8003f44 <DMA_SetConfig+0x22c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d05e      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a77      	ldr	r2, [pc, #476]	@ (8003f48 <DMA_SetConfig+0x230>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d059      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <DMA_SetConfig+0x234>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d054      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a74      	ldr	r2, [pc, #464]	@ (8003f50 <DMA_SetConfig+0x238>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d04f      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	@ (8003f54 <DMA_SetConfig+0x23c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d04a      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a71      	ldr	r2, [pc, #452]	@ (8003f58 <DMA_SetConfig+0x240>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d045      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a70      	ldr	r2, [pc, #448]	@ (8003f5c <DMA_SetConfig+0x244>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d040      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <DMA_SetConfig+0x248>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d03b      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6d      	ldr	r2, [pc, #436]	@ (8003f64 <DMA_SetConfig+0x24c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d036      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f68 <DMA_SetConfig+0x250>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d031      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f6c <DMA_SetConfig+0x254>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d02c      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a68      	ldr	r2, [pc, #416]	@ (8003f70 <DMA_SetConfig+0x258>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d027      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a67      	ldr	r2, [pc, #412]	@ (8003f74 <DMA_SetConfig+0x25c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a65      	ldr	r2, [pc, #404]	@ (8003f78 <DMA_SetConfig+0x260>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01d      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a64      	ldr	r2, [pc, #400]	@ (8003f7c <DMA_SetConfig+0x264>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d018      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a62      	ldr	r2, [pc, #392]	@ (8003f80 <DMA_SetConfig+0x268>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a61      	ldr	r2, [pc, #388]	@ (8003f84 <DMA_SetConfig+0x26c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00e      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a5f      	ldr	r2, [pc, #380]	@ (8003f88 <DMA_SetConfig+0x270>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a5e      	ldr	r2, [pc, #376]	@ (8003f8c <DMA_SetConfig+0x274>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5c      	ldr	r2, [pc, #368]	@ (8003f90 <DMA_SetConfig+0x278>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <DMA_SetConfig+0x10e>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <DMA_SetConfig+0x110>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00d      	beq.n	8003e48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a39      	ldr	r2, [pc, #228]	@ (8003f34 <DMA_SetConfig+0x21c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d04a      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a38      	ldr	r2, [pc, #224]	@ (8003f38 <DMA_SetConfig+0x220>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d045      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a36      	ldr	r2, [pc, #216]	@ (8003f3c <DMA_SetConfig+0x224>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d040      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a35      	ldr	r2, [pc, #212]	@ (8003f40 <DMA_SetConfig+0x228>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d03b      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a33      	ldr	r2, [pc, #204]	@ (8003f44 <DMA_SetConfig+0x22c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d036      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a32      	ldr	r2, [pc, #200]	@ (8003f48 <DMA_SetConfig+0x230>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d031      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a30      	ldr	r2, [pc, #192]	@ (8003f4c <DMA_SetConfig+0x234>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02c      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2f      	ldr	r2, [pc, #188]	@ (8003f50 <DMA_SetConfig+0x238>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d027      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f54 <DMA_SetConfig+0x23c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d022      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f58 <DMA_SetConfig+0x240>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d01d      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f5c <DMA_SetConfig+0x244>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a29      	ldr	r2, [pc, #164]	@ (8003f60 <DMA_SetConfig+0x248>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a27      	ldr	r2, [pc, #156]	@ (8003f64 <DMA_SetConfig+0x24c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a26      	ldr	r2, [pc, #152]	@ (8003f68 <DMA_SetConfig+0x250>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a24      	ldr	r2, [pc, #144]	@ (8003f6c <DMA_SetConfig+0x254>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a23      	ldr	r2, [pc, #140]	@ (8003f70 <DMA_SetConfig+0x258>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <DMA_SetConfig+0x1d4>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <DMA_SetConfig+0x1d6>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d059      	beq.n	8003fa6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	223f      	movs	r2, #63	@ 0x3f
 8003efc:	409a      	lsls	r2, r3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b40      	cmp	r3, #64	@ 0x40
 8003f20:	d138      	bne.n	8003f94 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f32:	e086      	b.n	8004042 <DMA_SetConfig+0x32a>
 8003f34:	40020010 	.word	0x40020010
 8003f38:	40020028 	.word	0x40020028
 8003f3c:	40020040 	.word	0x40020040
 8003f40:	40020058 	.word	0x40020058
 8003f44:	40020070 	.word	0x40020070
 8003f48:	40020088 	.word	0x40020088
 8003f4c:	400200a0 	.word	0x400200a0
 8003f50:	400200b8 	.word	0x400200b8
 8003f54:	40020410 	.word	0x40020410
 8003f58:	40020428 	.word	0x40020428
 8003f5c:	40020440 	.word	0x40020440
 8003f60:	40020458 	.word	0x40020458
 8003f64:	40020470 	.word	0x40020470
 8003f68:	40020488 	.word	0x40020488
 8003f6c:	400204a0 	.word	0x400204a0
 8003f70:	400204b8 	.word	0x400204b8
 8003f74:	58025408 	.word	0x58025408
 8003f78:	5802541c 	.word	0x5802541c
 8003f7c:	58025430 	.word	0x58025430
 8003f80:	58025444 	.word	0x58025444
 8003f84:	58025458 	.word	0x58025458
 8003f88:	5802546c 	.word	0x5802546c
 8003f8c:	58025480 	.word	0x58025480
 8003f90:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]
}
 8003fa4:	e04d      	b.n	8004042 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a29      	ldr	r2, [pc, #164]	@ (8004050 <DMA_SetConfig+0x338>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a27      	ldr	r2, [pc, #156]	@ (8004054 <DMA_SetConfig+0x33c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a26      	ldr	r2, [pc, #152]	@ (8004058 <DMA_SetConfig+0x340>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a24      	ldr	r2, [pc, #144]	@ (800405c <DMA_SetConfig+0x344>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a23      	ldr	r2, [pc, #140]	@ (8004060 <DMA_SetConfig+0x348>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a21      	ldr	r2, [pc, #132]	@ (8004064 <DMA_SetConfig+0x34c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a20      	ldr	r2, [pc, #128]	@ (8004068 <DMA_SetConfig+0x350>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <DMA_SetConfig+0x354>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <DMA_SetConfig+0x2e2>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <DMA_SetConfig+0x2e4>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2201      	movs	r2, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	d108      	bne.n	8004032 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	60da      	str	r2, [r3, #12]
}
 8004030:	e007      	b.n	8004042 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	60da      	str	r2, [r3, #12]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	58025408 	.word	0x58025408
 8004054:	5802541c 	.word	0x5802541c
 8004058:	58025430 	.word	0x58025430
 800405c:	58025444 	.word	0x58025444
 8004060:	58025458 	.word	0x58025458
 8004064:	5802546c 	.word	0x5802546c
 8004068:	58025480 	.word	0x58025480
 800406c:	58025494 	.word	0x58025494

08004070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	@ 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800407e:	4b89      	ldr	r3, [pc, #548]	@ (80042a4 <HAL_GPIO_Init+0x234>)
 8004080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004082:	e194      	b.n	80043ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2101      	movs	r1, #1
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8186 	beq.w	80043a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d005      	beq.n	80040b4 <HAL_GPIO_Init+0x44>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d130      	bne.n	8004116 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	2203      	movs	r2, #3
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040ea:	2201      	movs	r2, #1
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f003 0201 	and.w	r2, r3, #1
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b03      	cmp	r3, #3
 8004120:	d017      	beq.n	8004152 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	2203      	movs	r2, #3
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d123      	bne.n	80041a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	08da      	lsrs	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3208      	adds	r2, #8
 8004166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	08da      	lsrs	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3208      	adds	r2, #8
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	2203      	movs	r2, #3
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 0203 	and.w	r2, r3, #3
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80e0 	beq.w	80043a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e8:	4b2f      	ldr	r3, [pc, #188]	@ (80042a8 <HAL_GPIO_Init+0x238>)
 80041ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041ee:	4a2e      	ldr	r2, [pc, #184]	@ (80042a8 <HAL_GPIO_Init+0x238>)
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80041f8:	4b2b      	ldr	r3, [pc, #172]	@ (80042a8 <HAL_GPIO_Init+0x238>)
 80041fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004206:	4a29      	ldr	r2, [pc, #164]	@ (80042ac <HAL_GPIO_Init+0x23c>)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	3302      	adds	r3, #2
 800420e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	220f      	movs	r2, #15
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a20      	ldr	r2, [pc, #128]	@ (80042b0 <HAL_GPIO_Init+0x240>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d052      	beq.n	80042d8 <HAL_GPIO_Init+0x268>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1f      	ldr	r2, [pc, #124]	@ (80042b4 <HAL_GPIO_Init+0x244>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_GPIO_Init+0x22e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1e      	ldr	r2, [pc, #120]	@ (80042b8 <HAL_GPIO_Init+0x248>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02b      	beq.n	800429a <HAL_GPIO_Init+0x22a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a1d      	ldr	r2, [pc, #116]	@ (80042bc <HAL_GPIO_Init+0x24c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d025      	beq.n	8004296 <HAL_GPIO_Init+0x226>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a1c      	ldr	r2, [pc, #112]	@ (80042c0 <HAL_GPIO_Init+0x250>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01f      	beq.n	8004292 <HAL_GPIO_Init+0x222>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a1b      	ldr	r2, [pc, #108]	@ (80042c4 <HAL_GPIO_Init+0x254>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d019      	beq.n	800428e <HAL_GPIO_Init+0x21e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1a      	ldr	r2, [pc, #104]	@ (80042c8 <HAL_GPIO_Init+0x258>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_GPIO_Init+0x21a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a19      	ldr	r2, [pc, #100]	@ (80042cc <HAL_GPIO_Init+0x25c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00d      	beq.n	8004286 <HAL_GPIO_Init+0x216>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_GPIO_Init+0x260>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <HAL_GPIO_Init+0x212>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a17      	ldr	r2, [pc, #92]	@ (80042d4 <HAL_GPIO_Init+0x264>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_GPIO_Init+0x20e>
 800427a:	2309      	movs	r3, #9
 800427c:	e02d      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800427e:	230a      	movs	r3, #10
 8004280:	e02b      	b.n	80042da <HAL_GPIO_Init+0x26a>
 8004282:	2308      	movs	r3, #8
 8004284:	e029      	b.n	80042da <HAL_GPIO_Init+0x26a>
 8004286:	2307      	movs	r3, #7
 8004288:	e027      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800428a:	2306      	movs	r3, #6
 800428c:	e025      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800428e:	2305      	movs	r3, #5
 8004290:	e023      	b.n	80042da <HAL_GPIO_Init+0x26a>
 8004292:	2304      	movs	r3, #4
 8004294:	e021      	b.n	80042da <HAL_GPIO_Init+0x26a>
 8004296:	2303      	movs	r3, #3
 8004298:	e01f      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800429a:	2302      	movs	r3, #2
 800429c:	e01d      	b.n	80042da <HAL_GPIO_Init+0x26a>
 800429e:	2301      	movs	r3, #1
 80042a0:	e01b      	b.n	80042da <HAL_GPIO_Init+0x26a>
 80042a2:	bf00      	nop
 80042a4:	58000080 	.word	0x58000080
 80042a8:	58024400 	.word	0x58024400
 80042ac:	58000400 	.word	0x58000400
 80042b0:	58020000 	.word	0x58020000
 80042b4:	58020400 	.word	0x58020400
 80042b8:	58020800 	.word	0x58020800
 80042bc:	58020c00 	.word	0x58020c00
 80042c0:	58021000 	.word	0x58021000
 80042c4:	58021400 	.word	0x58021400
 80042c8:	58021800 	.word	0x58021800
 80042cc:	58021c00 	.word	0x58021c00
 80042d0:	58022000 	.word	0x58022000
 80042d4:	58022400 	.word	0x58022400
 80042d8:	2300      	movs	r3, #0
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	f002 0203 	and.w	r2, r2, #3
 80042e0:	0092      	lsls	r2, r2, #2
 80042e2:	4093      	lsls	r3, r2
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ea:	4938      	ldr	r1, [pc, #224]	@ (80043cc <HAL_GPIO_Init+0x35c>)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	089b      	lsrs	r3, r3, #2
 80042f0:	3302      	adds	r3, #2
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800431e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800434c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	3301      	adds	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f47f ae63 	bne.w	8004084 <HAL_GPIO_Init+0x14>
  }
}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	3724      	adds	r7, #36	@ 0x24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	58000400 	.word	0x58000400

080043d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
 80043dc:	4613      	mov	r3, r2
 80043de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043e0:	787b      	ldrb	r3, [r7, #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043ec:	e003      	b.n	80043f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043ee:	887b      	ldrh	r3, [r7, #2]
 80043f0:	041a      	lsls	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	619a      	str	r2, [r3, #24]
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004414:	887a      	ldrh	r2, [r7, #2]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4013      	ands	r3, r2
 800441a:	041a      	lsls	r2, r3, #16
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	43d9      	mvns	r1, r3
 8004420:	887b      	ldrh	r3, [r7, #2]
 8004422:	400b      	ands	r3, r1
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	619a      	str	r2, [r3, #24]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e07f      	b.n	800454a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fa26 	bl	80008b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	@ 0x24
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	e006      	b.n	80044c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d104      	bne.n	80044d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004554 <HAL_I2C_Init+0x11c>)
 80044de:	430b      	orrs	r3, r1
 80044e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69d9      	ldr	r1, [r3, #28]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1a      	ldr	r2, [r3, #32]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	02008000 	.word	0x02008000

08004558 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b20      	cmp	r3, #32
 800456c:	d138      	bne.n	80045e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004578:	2302      	movs	r3, #2
 800457a:	e032      	b.n	80045e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	@ 0x24
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6819      	ldr	r1, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b20      	cmp	r3, #32
 8004602:	d139      	bne.n	8004678 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800460e:	2302      	movs	r3, #2
 8004610:	e033      	b.n	800467a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2224      	movs	r2, #36	@ 0x24
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004640:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004688:	b08f      	sub	sp, #60	@ 0x3c
 800468a:	af0a      	add	r7, sp, #40	@ 0x28
 800468c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e116      	b.n	80048c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f00b f95e 	bl	800f974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2203      	movs	r2, #3
 80046bc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d102      	bne.n	80046d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f007 f8eb 	bl	800b8b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	687e      	ldr	r6, [r7, #4]
 80046e4:	466d      	mov	r5, sp
 80046e6:	f106 0410 	add.w	r4, r6, #16
 80046ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80046fa:	1d33      	adds	r3, r6, #4
 80046fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046fe:	6838      	ldr	r0, [r7, #0]
 8004700:	f006 ffb6 	bl	800b670 <USB_CoreInit>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e0d7      	b.n	80048c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f007 f8d9 	bl	800b8d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e04a      	b.n	80047be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004728:	7bfa      	ldrb	r2, [r7, #15]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	333d      	adds	r3, #61	@ 0x3d
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	333c      	adds	r3, #60	@ 0x3c
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004750:	7bfa      	ldrb	r2, [r7, #15]
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	b298      	uxth	r0, r3
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	3356      	adds	r3, #86	@ 0x56
 8004764:	4602      	mov	r2, r0
 8004766:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	3340      	adds	r3, #64	@ 0x40
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800477c:	7bfa      	ldrb	r2, [r7, #15]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3344      	adds	r3, #68	@ 0x44
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004790:	7bfa      	ldrb	r2, [r7, #15]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	3348      	adds	r3, #72	@ 0x48
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047a4:	7bfa      	ldrb	r2, [r7, #15]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	334c      	adds	r3, #76	@ 0x4c
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	3301      	adds	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	7bfa      	ldrb	r2, [r7, #15]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d3af      	bcc.n	8004728 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	e044      	b.n	8004858 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047e4:	7bfa      	ldrb	r2, [r7, #15]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80047f6:	7bfa      	ldrb	r2, [r7, #15]
 80047f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004810:	7bfa      	ldrb	r2, [r7, #15]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004826:	7bfa      	ldrb	r2, [r7, #15]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800483c:	7bfa      	ldrb	r2, [r7, #15]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	3301      	adds	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	7bfa      	ldrb	r2, [r7, #15]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d3b5      	bcc.n	80047ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	687e      	ldr	r6, [r7, #4]
 800486a:	466d      	mov	r5, sp
 800486c:	f106 0410 	add.w	r4, r6, #16
 8004870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004878:	e894 0003 	ldmia.w	r4, {r0, r1}
 800487c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004880:	1d33      	adds	r3, r6, #4
 8004882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004884:	6838      	ldr	r0, [r7, #0]
 8004886:	f007 f871 	bl	800b96c <USB_DevInit>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e014      	b.n	80048c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d102      	bne.n	80048ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f001 f96f 	bl	8005b98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f008 f8b3 	bl	800ca2a <USB_DevDisconnect>

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_PCD_Start+0x1c>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e022      	b.n	8004930 <HAL_PCD_Start+0x62>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f006 ffba 	bl	800b890 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f008 f861 	bl	800c9e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b08d      	sub	sp, #52	@ 0x34
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f008 f91f 	bl	800cb92 <USB_GetMode>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 84b7 	bne.w	80052ca <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f008 f883 	bl	800ca6c <USB_ReadInterrupts>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 84ad 	beq.w	80052c8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f008 f870 	bl	800ca6c <USB_ReadInterrupts>
 800498c:	4603      	mov	r3, r0
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d107      	bne.n	80049a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f002 0202 	and.w	r2, r2, #2
 80049a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f008 f85e 	bl	800ca6c <USB_ReadInterrupts>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d161      	bne.n	8004a7e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0210 	bic.w	r2, r2, #16
 80049c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	3304      	adds	r3, #4
 80049e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	0c5b      	lsrs	r3, r3, #17
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d124      	bne.n	8004a40 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d035      	beq.n	8004a6e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	6a38      	ldr	r0, [r7, #32]
 8004a16:	f007 fe95 	bl	800c744 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a26:	441a      	add	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a38:	441a      	add	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	615a      	str	r2, [r3, #20]
 8004a3e:	e016      	b.n	8004a6e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	0c5b      	lsrs	r3, r3, #17
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	2b06      	cmp	r3, #6
 8004a4a:	d110      	bne.n	8004a6e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004a52:	2208      	movs	r2, #8
 8004a54:	4619      	mov	r1, r3
 8004a56:	6a38      	ldr	r0, [r7, #32]
 8004a58:	f007 fe74 	bl	800c744 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a68:	441a      	add	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0210 	orr.w	r2, r2, #16
 8004a7c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f007 fff2 	bl	800ca6c <USB_ReadInterrupts>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a92:	f040 80a7 	bne.w	8004be4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f007 fff7 	bl	800ca92 <USB_ReadDevAllOutEpInterrupt>
 8004aa4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004aa6:	e099      	b.n	8004bdc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 808e 	beq.w	8004bd0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f008 f81b 	bl	800cafa <USB_ReadDevOutEPInterrupt>
 8004ac4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004adc:	461a      	mov	r2, r3
 8004ade:	2301      	movs	r3, #1
 8004ae0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ae2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fed1 	bl	800588c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00c      	beq.n	8004b0e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b00:	461a      	mov	r2, r3
 8004b02:	2308      	movs	r3, #8
 8004b04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 ffa7 	bl	8005a5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b24:	461a      	mov	r2, r3
 8004b26:	2310      	movs	r3, #16
 8004b28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d030      	beq.n	8004b96 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3c:	2b80      	cmp	r3, #128	@ 0x80
 8004b3e:	d109      	bne.n	8004b54 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b52:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	3304      	adds	r3, #4
 8004b68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	78db      	ldrb	r3, [r3, #3]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d108      	bne.n	8004b84 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f00b f81e 	bl	800fbc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2302      	movs	r3, #2
 8004b94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bac:	461a      	mov	r2, r3
 8004bae:	2320      	movs	r3, #32
 8004bb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f47f af62 	bne.w	8004aa8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f007 ff3f 	bl	800ca6c <USB_ReadInterrupts>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bf4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bf8:	f040 80db 	bne.w	8004db2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f007 ff60 	bl	800cac6 <USB_ReadDevAllInEpInterrupt>
 8004c06:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004c0c:	e0cd      	b.n	8004daa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80c2 	beq.w	8004d9e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f007 ff86 	bl	800cb36 <USB_ReadDevInEPInterrupt>
 8004c2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d057      	beq.n	8004ce6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69f9      	ldr	r1, [r7, #28]
 8004c52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c56:	4013      	ands	r3, r2
 8004c58:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c66:	461a      	mov	r2, r3
 8004c68:	2301      	movs	r3, #1
 8004c6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d132      	bne.n	8004cda <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	3348      	adds	r3, #72	@ 0x48
 8004c84:	6819      	ldr	r1, [r3, #0]
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4403      	add	r3, r0
 8004c94:	3344      	adds	r3, #68	@ 0x44
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4419      	add	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4403      	add	r3, r0
 8004ca8:	3348      	adds	r3, #72	@ 0x48
 8004caa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d113      	bne.n	8004cda <HAL_PCD_IRQHandler+0x3a2>
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	334c      	adds	r3, #76	@ 0x4c
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d108      	bne.n	8004cda <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	f007 ff8f 	bl	800cbf8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f00a fee8 	bl	800fab6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2308      	movs	r3, #8
 8004d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d34:	461a      	mov	r2, r3
 8004d36:	2340      	movs	r3, #64	@ 0x40
 8004d38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d023      	beq.n	8004d8c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004d44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d46:	6a38      	ldr	r0, [r7, #32]
 8004d48:	f006 ff6e 	bl	800bc28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4e:	4613      	mov	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	3338      	adds	r3, #56	@ 0x38
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	78db      	ldrb	r3, [r3, #3]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d108      	bne.n	8004d7a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f00a ff35 	bl	800fbe4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d86:	461a      	mov	r2, r3
 8004d88:	2302      	movs	r3, #2
 8004d8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fcea 	bl	8005772 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	3301      	adds	r3, #1
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f47f af2e 	bne.w	8004c0e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f007 fe58 	bl	800ca6c <USB_ReadInterrupts>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc6:	d122      	bne.n	8004e0e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d108      	bne.n	8004df8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004dee:	2100      	movs	r1, #0
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fef5 	bl	8005be0 <HAL_PCDEx_LPM_Callback>
 8004df6:	e002      	b.n	8004dfe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f00a fed3 	bl	800fba4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f007 fe2a 	bl	800ca6c <USB_ReadInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e22:	d112      	bne.n	8004e4a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d102      	bne.n	8004e3a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f00a fe8f 	bl	800fb58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f007 fe0c 	bl	800ca6c <USB_ReadInterrupts>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e5e:	d121      	bne.n	8004ea4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004e6e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d111      	bne.n	8004e9e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e88:	089b      	lsrs	r3, r3, #2
 8004e8a:	f003 020f 	and.w	r2, r3, #15
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004e94:	2101      	movs	r1, #1
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fea2 	bl	8005be0 <HAL_PCDEx_LPM_Callback>
 8004e9c:	e002      	b.n	8004ea4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f00a fe5a 	bl	800fb58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f007 fddf 	bl	800ca6c <USB_ReadInterrupts>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb8:	f040 80b7 	bne.w	800502a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2110      	movs	r1, #16
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f006 fea6 	bl	800bc28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee0:	e046      	b.n	8004f70 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ef4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f10:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f22:	461a      	mov	r2, r3
 8004f24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f44:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d3b3      	bcc.n	8004ee2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f88:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004f8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d016      	beq.n	8004fc4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa6:	f043 030b 	orr.w	r3, r3, #11
 8004faa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fbc:	f043 030b 	orr.w	r3, r3, #11
 8004fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fc2:	e015      	b.n	8004ff0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fea:	f043 030b 	orr.w	r3, r3, #11
 8004fee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ffe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005002:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005014:	461a      	mov	r2, r3
 8005016:	f007 fdef 	bl	800cbf8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f007 fd1c 	bl	800ca6c <USB_ReadInterrupts>
 8005034:	4603      	mov	r3, r0
 8005036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800503a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800503e:	d124      	bne.n	800508a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f007 fdb3 	bl	800cbb0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f006 fe67 	bl	800bd22 <USB_GetDevSpeed>
 8005054:	4603      	mov	r3, r0
 8005056:	461a      	mov	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681c      	ldr	r4, [r3, #0]
 8005060:	f001 fd9e 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8005064:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	4620      	mov	r0, r4
 8005070:	f006 fb6c 	bl	800b74c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f00a fd46 	bl	800fb06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005088:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f007 fcec 	bl	800ca6c <USB_ReadInterrupts>
 8005094:	4603      	mov	r3, r0
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b08      	cmp	r3, #8
 800509c:	d10a      	bne.n	80050b4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f00a fd23 	bl	800faea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f002 0208 	and.w	r2, r2, #8
 80050b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f007 fcd7 	bl	800ca6c <USB_ReadInterrupts>
 80050be:	4603      	mov	r3, r0
 80050c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c4:	2b80      	cmp	r3, #128	@ 0x80
 80050c6:	d122      	bne.n	800510e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050d4:	2301      	movs	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d8:	e014      	b.n	8005104 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d105      	bne.n	80050fe <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fb09 	bl	8005710 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	3301      	adds	r3, #1
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510a:	429a      	cmp	r2, r3
 800510c:	d3e5      	bcc.n	80050da <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f007 fcaa 	bl	800ca6c <USB_ReadInterrupts>
 8005118:	4603      	mov	r3, r0
 800511a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800511e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005122:	d13b      	bne.n	800519c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005124:	2301      	movs	r3, #1
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
 8005128:	e02b      	b.n	8005182 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513e:	4613      	mov	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	3340      	adds	r3, #64	@ 0x40
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d115      	bne.n	800517c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005150:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005152:	2b00      	cmp	r3, #0
 8005154:	da12      	bge.n	800517c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	333f      	adds	r3, #63	@ 0x3f
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005172:	b2db      	uxtb	r3, r3
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 faca 	bl	8005710 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	3301      	adds	r3, #1
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005188:	429a      	cmp	r2, r3
 800518a:	d3ce      	bcc.n	800512a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800519a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f007 fc63 	bl	800ca6c <USB_ReadInterrupts>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051b0:	d155      	bne.n	800525e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051b2:	2301      	movs	r3, #1
 80051b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b6:	e045      	b.n	8005244 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051cc:	4613      	mov	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d12e      	bne.n	800523e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	da2b      	bge.n	800523e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80051f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d121      	bne.n	800523e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800520c:	2201      	movs	r2, #1
 800520e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800523a:	6053      	str	r3, [r2, #4]
            break;
 800523c:	e007      	b.n	800524e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	3301      	adds	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	@ 0x24
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524a:	429a      	cmp	r2, r3
 800524c:	d3b4      	bcc.n	80051b8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695a      	ldr	r2, [r3, #20]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800525c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f007 fc02 	bl	800ca6c <USB_ReadInterrupts>
 8005268:	4603      	mov	r3, r0
 800526a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800526e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005272:	d10a      	bne.n	800528a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f00a fcc7 	bl	800fc08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f007 fbec 	bl	800ca6c <USB_ReadInterrupts>
 8005294:	4603      	mov	r3, r0
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b04      	cmp	r3, #4
 800529c:	d115      	bne.n	80052ca <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f00a fcb7 	bl	800fc24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	e000      	b.n	80052ca <HAL_PCD_IRQHandler+0x992>
      return;
 80052c8:	bf00      	nop
    }
  }
}
 80052ca:	3734      	adds	r7, #52	@ 0x34
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd90      	pop	{r4, r7, pc}

080052d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_PCD_SetAddress+0x1a>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e013      	b.n	8005312 <HAL_PCD_SetAddress+0x42>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f007 fb4a 	bl	800c99c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	4608      	mov	r0, r1
 8005324:	4611      	mov	r1, r2
 8005326:	461a      	mov	r2, r3
 8005328:	4603      	mov	r3, r0
 800532a:	70fb      	strb	r3, [r7, #3]
 800532c:	460b      	mov	r3, r1
 800532e:	803b      	strh	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800533c:	2b00      	cmp	r3, #0
 800533e:	da0f      	bge.n	8005360 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	f003 020f 	and.w	r2, r3, #15
 8005346:	4613      	mov	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	3338      	adds	r3, #56	@ 0x38
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	3304      	adds	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	705a      	strb	r2, [r3, #1]
 800535e:	e00f      	b.n	8005380 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	f003 020f 	and.w	r2, r3, #15
 8005366:	4613      	mov	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	3304      	adds	r3, #4
 8005378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	b2da      	uxtb	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800538c:	883a      	ldrh	r2, [r7, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	78ba      	ldrb	r2, [r7, #2]
 8005396:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053aa:	78bb      	ldrb	r3, [r7, #2]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d102      	bne.n	80053b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_PCD_EP_Open+0xaa>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e00e      	b.n	80053e2 <HAL_PCD_EP_Open+0xc8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f006 fcca 	bl	800bd6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80053e0:	7afb      	ldrb	r3, [r7, #11]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	460b      	mov	r3, r1
 80053f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da0f      	bge.n	800541e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053fe:	78fb      	ldrb	r3, [r7, #3]
 8005400:	f003 020f 	and.w	r2, r3, #15
 8005404:	4613      	mov	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	3338      	adds	r3, #56	@ 0x38
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	705a      	strb	r2, [r3, #1]
 800541c:	e00f      	b.n	800543e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	f003 020f 	and.w	r2, r3, #15
 8005424:	4613      	mov	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	3304      	adds	r3, #4
 8005436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	b2da      	uxtb	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_PCD_EP_Close+0x6e>
 8005454:	2302      	movs	r3, #2
 8005456:	e00e      	b.n	8005476 <HAL_PCD_EP_Close+0x8c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68f9      	ldr	r1, [r7, #12]
 8005466:	4618      	mov	r0, r3
 8005468:	f006 fd08 	bl	800be7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b086      	sub	sp, #24
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	460b      	mov	r3, r1
 800548c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800548e:	7afb      	ldrb	r3, [r7, #11]
 8005490:	f003 020f 	and.w	r2, r3, #15
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	3304      	adds	r3, #4
 80054a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2200      	movs	r2, #0
 80054be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054c0:	7afb      	ldrb	r3, [r7, #11]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d102      	bne.n	80054da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	6979      	ldr	r1, [r7, #20]
 80054e8:	f006 fda4 	bl	800c034 <USB_EPStartXfer>

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	f003 020f 	and.w	r2, r3, #15
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8005518:	681b      	ldr	r3, [r3, #0]
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
 8005532:	460b      	mov	r3, r1
 8005534:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	f003 020f 	and.w	r2, r3, #15
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	3338      	adds	r3, #56	@ 0x38
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	3304      	adds	r3, #4
 800554c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2201      	movs	r2, #1
 8005564:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005566:	7afb      	ldrb	r3, [r7, #11]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	b2da      	uxtb	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d102      	bne.n	8005580 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	6979      	ldr	r1, [r7, #20]
 800558e:	f006 fd51 	bl	800c034 <USB_EPStartXfer>

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	f003 020f 	and.w	r2, r3, #15
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d901      	bls.n	80055ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e050      	b.n	800565c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da0f      	bge.n	80055e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	f003 020f 	and.w	r2, r3, #15
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	3338      	adds	r3, #56	@ 0x38
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4413      	add	r3, r2
 80055d6:	3304      	adds	r3, #4
 80055d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	705a      	strb	r2, [r3, #1]
 80055e0:	e00d      	b.n	80055fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	4613      	mov	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	4413      	add	r3, r2
 80055f4:	3304      	adds	r3, #4
 80055f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	b2da      	uxtb	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_PCD_EP_SetStall+0x82>
 800561a:	2302      	movs	r3, #2
 800561c:	e01e      	b.n	800565c <HAL_PCD_EP_SetStall+0xc0>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	4618      	mov	r0, r3
 800562e:	f007 f8e1 	bl	800c7f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	b2d9      	uxtb	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800564c:	461a      	mov	r2, r3
 800564e:	f007 fad3 	bl	800cbf8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	f003 020f 	and.w	r2, r3, #15
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d901      	bls.n	8005682 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e042      	b.n	8005708 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005686:	2b00      	cmp	r3, #0
 8005688:	da0f      	bge.n	80056aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	f003 020f 	and.w	r2, r3, #15
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	3338      	adds	r3, #56	@ 0x38
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	3304      	adds	r3, #4
 80056a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	705a      	strb	r2, [r3, #1]
 80056a8:	e00f      	b.n	80056ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	f003 020f 	and.w	r2, r3, #15
 80056b0:	4613      	mov	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	4413      	add	r3, r2
 80056c0:	3304      	adds	r3, #4
 80056c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_PCD_EP_ClrStall+0x86>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e00e      	b.n	8005708 <HAL_PCD_EP_ClrStall+0xa4>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f007 f8e9 	bl	800c8d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800571c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005720:	2b00      	cmp	r3, #0
 8005722:	da0c      	bge.n	800573e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	f003 020f 	and.w	r2, r3, #15
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	3338      	adds	r3, #56	@ 0x38
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	3304      	adds	r3, #4
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e00c      	b.n	8005758 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	f003 020f 	and.w	r2, r3, #15
 8005744:	4613      	mov	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4413      	add	r3, r2
 8005754:	3304      	adds	r3, #4
 8005756:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68f9      	ldr	r1, [r7, #12]
 800575e:	4618      	mov	r0, r3
 8005760:	f006 ff08 	bl	800c574 <USB_EPStopXfer>
 8005764:	4603      	mov	r3, r0
 8005766:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005768:	7afb      	ldrb	r3, [r7, #11]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b08a      	sub	sp, #40	@ 0x28
 8005776:	af02      	add	r7, sp, #8
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	3338      	adds	r3, #56	@ 0x38
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4413      	add	r3, r2
 8005796:	3304      	adds	r3, #4
 8005798:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	695a      	ldr	r2, [r3, #20]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d901      	bls.n	80057aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e06c      	b.n	8005884 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d902      	bls.n	80057c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3303      	adds	r3, #3
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057ce:	e02b      	b.n	8005828 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d902      	bls.n	80057ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	3303      	adds	r3, #3
 80057f0:	089b      	lsrs	r3, r3, #2
 80057f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68d9      	ldr	r1, [r3, #12]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005804:	b2db      	uxtb	r3, r3
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4603      	mov	r3, r0
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f006 ff5c 	bl	800c6c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	429a      	cmp	r2, r3
 800583c:	d809      	bhi.n	8005852 <PCD_WriteEmptyTxFifo+0xe0>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005846:	429a      	cmp	r2, r3
 8005848:	d203      	bcs.n	8005852 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1be      	bne.n	80057d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	429a      	cmp	r2, r3
 800585c:	d811      	bhi.n	8005882 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	2201      	movs	r2, #1
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	43db      	mvns	r3, r3
 8005878:	6939      	ldr	r1, [r7, #16]
 800587a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800587e:	4013      	ands	r3, r2
 8005880:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	333c      	adds	r3, #60	@ 0x3c
 80058a4:	3304      	adds	r3, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d17b      	bne.n	80059ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d015      	beq.n	80058f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	4a61      	ldr	r2, [pc, #388]	@ (8005a54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	f240 80b9 	bls.w	8005a48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80b3 	beq.w	8005a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ee:	461a      	mov	r2, r3
 80058f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058f4:	6093      	str	r3, [r2, #8]
 80058f6:	e0a7      	b.n	8005a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590e:	461a      	mov	r2, r3
 8005910:	2320      	movs	r3, #32
 8005912:	6093      	str	r3, [r2, #8]
 8005914:	e098      	b.n	8005a48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	f040 8093 	bne.w	8005a48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4a4b      	ldr	r2, [pc, #300]	@ (8005a54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d90f      	bls.n	800594a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005940:	461a      	mov	r2, r3
 8005942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005946:	6093      	str	r3, [r2, #8]
 8005948:	e07e      	b.n	8005a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	4413      	add	r3, r2
 800595c:	3304      	adds	r3, #4
 800595e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1a      	ldr	r2, [r3, #32]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	0159      	lsls	r1, r3, #5
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	440b      	add	r3, r1
 800596c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005976:	1ad2      	subs	r2, r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d114      	bne.n	80059ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005994:	461a      	mov	r2, r3
 8005996:	2101      	movs	r1, #1
 8005998:	f007 f92e 	bl	800cbf8 <USB_EP0_OutStart>
 800599c:	e006      	b.n	80059ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	441a      	add	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f00a f864 	bl	800fa80 <HAL_PCD_DataOutStageCallback>
 80059b8:	e046      	b.n	8005a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4a26      	ldr	r2, [pc, #152]	@ (8005a58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d124      	bne.n	8005a0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d8:	461a      	mov	r2, r3
 80059da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059de:	6093      	str	r3, [r2, #8]
 80059e0:	e032      	b.n	8005a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f8:	461a      	mov	r2, r3
 80059fa:	2320      	movs	r3, #32
 80059fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f00a f83b 	bl	800fa80 <HAL_PCD_DataOutStageCallback>
 8005a0a:	e01d      	b.n	8005a48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d114      	bne.n	8005a3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005a34:	461a      	mov	r2, r3
 8005a36:	2100      	movs	r1, #0
 8005a38:	f007 f8de 	bl	800cbf8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f00a f81c 	bl	800fa80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	4f54300a 	.word	0x4f54300a
 8005a58:	4f54310a 	.word	0x4f54310a

08005a5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	333c      	adds	r3, #60	@ 0x3c
 8005a74:	3304      	adds	r3, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a15      	ldr	r2, [pc, #84]	@ (8005ae4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d90e      	bls.n	8005ab0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d009      	beq.n	8005ab0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f009 ffd3 	bl	800fa5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d90c      	bls.n	8005ad8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d108      	bne.n	8005ad8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	f007 f890 	bl	800cbf8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	4f54300a 	.word	0x4f54300a

08005ae8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
 8005af4:	4613      	mov	r3, r2
 8005af6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d107      	bne.n	8005b16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b06:	883b      	ldrh	r3, [r7, #0]
 8005b08:	0419      	lsls	r1, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b14:	e028      	b.n	8005b68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	4413      	add	r3, r2
 8005b22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
 8005b28:	e00d      	b.n	8005b46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	3340      	adds	r3, #64	@ 0x40
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	0c1b      	lsrs	r3, r3, #16
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	3301      	adds	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
 8005b46:	7bfa      	ldrb	r2, [r7, #15]
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d3ec      	bcc.n	8005b2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005b50:	883b      	ldrh	r3, [r7, #0]
 8005b52:	0418      	lsls	r0, r3, #16
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6819      	ldr	r1, [r3, #0]
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	4302      	orrs	r2, r0
 8005b60:	3340      	adds	r3, #64	@ 0x40
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bc6:	4b05      	ldr	r3, [pc, #20]	@ (8005bdc <HAL_PCDEx_ActivateLPM+0x44>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	10000003 	.word	0x10000003

08005be0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c00:	4b19      	ldr	r3, [pc, #100]	@ (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d00a      	beq.n	8005c22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c0c:	4b16      	ldr	r3, [pc, #88]	@ (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d001      	beq.n	8005c1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e01f      	b.n	8005c5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e01d      	b.n	8005c5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c22:	4b11      	ldr	r3, [pc, #68]	@ (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f023 0207 	bic.w	r2, r3, #7
 8005c2a:	490f      	ldr	r1, [pc, #60]	@ (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c32:	f7fb fe21 	bl	8001878 <HAL_GetTick>
 8005c36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c38:	e009      	b.n	8005c4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c3a:	f7fb fe1d 	bl	8001878 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c48:	d901      	bls.n	8005c4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e007      	b.n	8005c5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c4e:	4b06      	ldr	r3, [pc, #24]	@ (8005c68 <HAL_PWREx_ConfigSupply+0x70>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5a:	d1ee      	bne.n	8005c3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	58024800 	.word	0x58024800

08005c6c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005c70:	4b05      	ldr	r3, [pc, #20]	@ (8005c88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4a04      	ldr	r2, [pc, #16]	@ (8005c88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c7a:	60d3      	str	r3, [r2, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	58024800 	.word	0x58024800

08005c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08c      	sub	sp, #48	@ 0x30
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f000 bc48 	b.w	8006530 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8088 	beq.w	8005dbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cae:	4b99      	ldr	r3, [pc, #612]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cb8:	4b96      	ldr	r3, [pc, #600]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d007      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x48>
 8005cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc6:	2b18      	cmp	r3, #24
 8005cc8:	d111      	bne.n	8005cee <HAL_RCC_OscConfig+0x62>
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d10c      	bne.n	8005cee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd4:	4b8f      	ldr	r3, [pc, #572]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d06d      	beq.n	8005dbc <HAL_RCC_OscConfig+0x130>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d169      	bne.n	8005dbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f000 bc21 	b.w	8006530 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCC_OscConfig+0x7a>
 8005cf8:	4b86      	ldr	r3, [pc, #536]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a85      	ldr	r2, [pc, #532]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e02e      	b.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x9c>
 8005d0e:	4b81      	ldr	r3, [pc, #516]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a80      	ldr	r2, [pc, #512]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b7e      	ldr	r3, [pc, #504]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a7d      	ldr	r2, [pc, #500]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e01d      	b.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d30:	d10c      	bne.n	8005d4c <HAL_RCC_OscConfig+0xc0>
 8005d32:	4b78      	ldr	r3, [pc, #480]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a77      	ldr	r2, [pc, #476]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	4b75      	ldr	r3, [pc, #468]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a74      	ldr	r2, [pc, #464]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e00b      	b.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d4c:	4b71      	ldr	r3, [pc, #452]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a70      	ldr	r2, [pc, #448]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	4b6e      	ldr	r3, [pc, #440]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a6d      	ldr	r2, [pc, #436]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d013      	beq.n	8005d94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fb fd84 	bl	8001878 <HAL_GetTick>
 8005d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d74:	f7fb fd80 	bl	8001878 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	@ 0x64
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e3d4      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d86:	4b63      	ldr	r3, [pc, #396]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0xe8>
 8005d92:	e014      	b.n	8005dbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fb fd70 	bl	8001878 <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d9c:	f7fb fd6c 	bl	8001878 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b64      	cmp	r3, #100	@ 0x64
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e3c0      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dae:	4b59      	ldr	r3, [pc, #356]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x110>
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 80ca 	beq.w	8005f60 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dcc:	4b51      	ldr	r3, [pc, #324]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dda:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <HAL_RCC_OscConfig+0x166>
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	2b18      	cmp	r3, #24
 8005de6:	d156      	bne.n	8005e96 <HAL_RCC_OscConfig+0x20a>
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d151      	bne.n	8005e96 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005df2:	4b48      	ldr	r3, [pc, #288]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_RCC_OscConfig+0x17e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e392      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e0a:	4b42      	ldr	r3, [pc, #264]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 0219 	bic.w	r2, r3, #25
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	493f      	ldr	r1, [pc, #252]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fb fd2c 	bl	8001878 <HAL_GetTick>
 8005e20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e24:	f7fb fd28 	bl	8001878 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e37c      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e36:	4b37      	ldr	r3, [pc, #220]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e42:	f7fb fd49 	bl	80018d8 <HAL_GetREVID>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d817      	bhi.n	8005e80 <HAL_RCC_OscConfig+0x1f4>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b40      	cmp	r3, #64	@ 0x40
 8005e56:	d108      	bne.n	8005e6a <HAL_RCC_OscConfig+0x1de>
 8005e58:	4b2e      	ldr	r3, [pc, #184]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005e60:	4a2c      	ldr	r2, [pc, #176]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e66:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e68:	e07a      	b.n	8005f60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	031b      	lsls	r3, r3, #12
 8005e78:	4926      	ldr	r1, [pc, #152]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e7e:	e06f      	b.n	8005f60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e80:	4b24      	ldr	r3, [pc, #144]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	061b      	lsls	r3, r3, #24
 8005e8e:	4921      	ldr	r1, [pc, #132]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e94:	e064      	b.n	8005f60 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d047      	beq.n	8005f2e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f023 0219 	bic.w	r2, r3, #25
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	491a      	ldr	r1, [pc, #104]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fb fce2 	bl	8001878 <HAL_GetTick>
 8005eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb8:	f7fb fcde 	bl	8001878 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e332      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eca:	4b12      	ldr	r3, [pc, #72]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0f0      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed6:	f7fb fcff 	bl	80018d8 <HAL_GetREVID>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d819      	bhi.n	8005f18 <HAL_RCC_OscConfig+0x28c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b40      	cmp	r3, #64	@ 0x40
 8005eea:	d108      	bne.n	8005efe <HAL_RCC_OscConfig+0x272>
 8005eec:	4b09      	ldr	r3, [pc, #36]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ef4:	4a07      	ldr	r2, [pc, #28]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005efa:	6053      	str	r3, [r2, #4]
 8005efc:	e030      	b.n	8005f60 <HAL_RCC_OscConfig+0x2d4>
 8005efe:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	031b      	lsls	r3, r3, #12
 8005f0c:	4901      	ldr	r1, [pc, #4]	@ (8005f14 <HAL_RCC_OscConfig+0x288>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	604b      	str	r3, [r1, #4]
 8005f12:	e025      	b.n	8005f60 <HAL_RCC_OscConfig+0x2d4>
 8005f14:	58024400 	.word	0x58024400
 8005f18:	4b9a      	ldr	r3, [pc, #616]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	061b      	lsls	r3, r3, #24
 8005f26:	4997      	ldr	r1, [pc, #604]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	604b      	str	r3, [r1, #4]
 8005f2c:	e018      	b.n	8005f60 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f2e:	4b95      	ldr	r3, [pc, #596]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a94      	ldr	r2, [pc, #592]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3a:	f7fb fc9d 	bl	8001878 <HAL_GetTick>
 8005f3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f42:	f7fb fc99 	bl	8001878 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e2ed      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f54:	4b8b      	ldr	r3, [pc, #556]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80a9 	beq.w	80060c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6e:	4b85      	ldr	r3, [pc, #532]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f78:	4b82      	ldr	r3, [pc, #520]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d007      	beq.n	8005f94 <HAL_RCC_OscConfig+0x308>
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b18      	cmp	r3, #24
 8005f88:	d13a      	bne.n	8006000 <HAL_RCC_OscConfig+0x374>
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d135      	bne.n	8006000 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f94:	4b7b      	ldr	r3, [pc, #492]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_OscConfig+0x320>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	2b80      	cmp	r3, #128	@ 0x80
 8005fa6:	d001      	beq.n	8005fac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e2c1      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fac:	f7fb fc94 	bl	80018d8 <HAL_GetREVID>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d817      	bhi.n	8005fea <HAL_RCC_OscConfig+0x35e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d108      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x348>
 8005fc2:	4b70      	ldr	r3, [pc, #448]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005fca:	4a6e      	ldr	r2, [pc, #440]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005fcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fd0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fd2:	e075      	b.n	80060c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	069b      	lsls	r3, r3, #26
 8005fe2:	4968      	ldr	r1, [pc, #416]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fe8:	e06a      	b.n	80060c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fea:	4b66      	ldr	r3, [pc, #408]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	061b      	lsls	r3, r3, #24
 8005ff8:	4962      	ldr	r1, [pc, #392]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ffe:	e05f      	b.n	80060c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d042      	beq.n	800608e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006008:	4b5e      	ldr	r3, [pc, #376]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a5d      	ldr	r2, [pc, #372]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 800600e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fb fc30 	bl	8001878 <HAL_GetTick>
 8006018:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800601c:	f7fb fc2c 	bl	8001878 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e280      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800602e:	4b55      	ldr	r3, [pc, #340]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800603a:	f7fb fc4d 	bl	80018d8 <HAL_GetREVID>
 800603e:	4603      	mov	r3, r0
 8006040:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006044:	4293      	cmp	r3, r2
 8006046:	d817      	bhi.n	8006078 <HAL_RCC_OscConfig+0x3ec>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	2b20      	cmp	r3, #32
 800604e:	d108      	bne.n	8006062 <HAL_RCC_OscConfig+0x3d6>
 8006050:	4b4c      	ldr	r3, [pc, #304]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006058:	4a4a      	ldr	r2, [pc, #296]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 800605a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800605e:	6053      	str	r3, [r2, #4]
 8006060:	e02e      	b.n	80060c0 <HAL_RCC_OscConfig+0x434>
 8006062:	4b48      	ldr	r3, [pc, #288]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	069b      	lsls	r3, r3, #26
 8006070:	4944      	ldr	r1, [pc, #272]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006072:	4313      	orrs	r3, r2
 8006074:	604b      	str	r3, [r1, #4]
 8006076:	e023      	b.n	80060c0 <HAL_RCC_OscConfig+0x434>
 8006078:	4b42      	ldr	r3, [pc, #264]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	061b      	lsls	r3, r3, #24
 8006086:	493f      	ldr	r1, [pc, #252]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006088:	4313      	orrs	r3, r2
 800608a:	60cb      	str	r3, [r1, #12]
 800608c:	e018      	b.n	80060c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800608e:	4b3d      	ldr	r3, [pc, #244]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a3c      	ldr	r2, [pc, #240]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fb fbed 	bl	8001878 <HAL_GetTick>
 800609e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060a2:	f7fb fbe9 	bl	8001878 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e23d      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060b4:	4b33      	ldr	r3, [pc, #204]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1f0      	bne.n	80060a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d036      	beq.n	800613a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d019      	beq.n	8006108 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 80060d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e0:	f7fb fbca 	bl	8001878 <HAL_GetTick>
 80060e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e8:	f7fb fbc6 	bl	8001878 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e21a      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060fa:	4b22      	ldr	r3, [pc, #136]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 80060fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0x45c>
 8006106:	e018      	b.n	800613a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006108:	4b1e      	ldr	r3, [pc, #120]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 800610a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800610c:	4a1d      	ldr	r2, [pc, #116]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 800610e:	f023 0301 	bic.w	r3, r3, #1
 8006112:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fb fbb0 	bl	8001878 <HAL_GetTick>
 8006118:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800611c:	f7fb fbac 	bl	8001878 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e200      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800612e:	4b15      	ldr	r3, [pc, #84]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d039      	beq.n	80061ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01c      	beq.n	8006188 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a0c      	ldr	r2, [pc, #48]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006154:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006158:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800615a:	f7fb fb8d 	bl	8001878 <HAL_GetTick>
 800615e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006162:	f7fb fb89 	bl	8001878 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e1dd      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006174:	4b03      	ldr	r3, [pc, #12]	@ (8006184 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0f0      	beq.n	8006162 <HAL_RCC_OscConfig+0x4d6>
 8006180:	e01b      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
 8006182:	bf00      	nop
 8006184:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006188:	4b9b      	ldr	r3, [pc, #620]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a9a      	ldr	r2, [pc, #616]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800618e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006192:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006194:	f7fb fb70 	bl	8001878 <HAL_GetTick>
 8006198:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800619c:	f7fb fb6c 	bl	8001878 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e1c0      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061ae:	4b92      	ldr	r3, [pc, #584]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f0      	bne.n	800619c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8081 	beq.w	80062ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061c8:	4b8c      	ldr	r3, [pc, #560]	@ (80063fc <HAL_RCC_OscConfig+0x770>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a8b      	ldr	r2, [pc, #556]	@ (80063fc <HAL_RCC_OscConfig+0x770>)
 80061ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061d4:	f7fb fb50 	bl	8001878 <HAL_GetTick>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061dc:	f7fb fb4c 	bl	8001878 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b64      	cmp	r3, #100	@ 0x64
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e1a0      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ee:	4b83      	ldr	r3, [pc, #524]	@ (80063fc <HAL_RCC_OscConfig+0x770>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f0      	beq.n	80061dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d106      	bne.n	8006210 <HAL_RCC_OscConfig+0x584>
 8006202:	4b7d      	ldr	r3, [pc, #500]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006206:	4a7c      	ldr	r2, [pc, #496]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	6713      	str	r3, [r2, #112]	@ 0x70
 800620e:	e02d      	b.n	800626c <HAL_RCC_OscConfig+0x5e0>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10c      	bne.n	8006232 <HAL_RCC_OscConfig+0x5a6>
 8006218:	4b77      	ldr	r3, [pc, #476]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800621a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621c:	4a76      	ldr	r2, [pc, #472]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	6713      	str	r3, [r2, #112]	@ 0x70
 8006224:	4b74      	ldr	r3, [pc, #464]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006228:	4a73      	ldr	r2, [pc, #460]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800622a:	f023 0304 	bic.w	r3, r3, #4
 800622e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006230:	e01c      	b.n	800626c <HAL_RCC_OscConfig+0x5e0>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	2b05      	cmp	r3, #5
 8006238:	d10c      	bne.n	8006254 <HAL_RCC_OscConfig+0x5c8>
 800623a:	4b6f      	ldr	r3, [pc, #444]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623e:	4a6e      	ldr	r2, [pc, #440]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006240:	f043 0304 	orr.w	r3, r3, #4
 8006244:	6713      	str	r3, [r2, #112]	@ 0x70
 8006246:	4b6c      	ldr	r3, [pc, #432]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624a:	4a6b      	ldr	r2, [pc, #428]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800624c:	f043 0301 	orr.w	r3, r3, #1
 8006250:	6713      	str	r3, [r2, #112]	@ 0x70
 8006252:	e00b      	b.n	800626c <HAL_RCC_OscConfig+0x5e0>
 8006254:	4b68      	ldr	r3, [pc, #416]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006258:	4a67      	ldr	r2, [pc, #412]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800625a:	f023 0301 	bic.w	r3, r3, #1
 800625e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006260:	4b65      	ldr	r3, [pc, #404]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006264:	4a64      	ldr	r2, [pc, #400]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006266:	f023 0304 	bic.w	r3, r3, #4
 800626a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d015      	beq.n	80062a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fb fb00 	bl	8001878 <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800627a:	e00a      	b.n	8006292 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800627c:	f7fb fafc 	bl	8001878 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e14e      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006292:	4b59      	ldr	r3, [pc, #356]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0ee      	beq.n	800627c <HAL_RCC_OscConfig+0x5f0>
 800629e:	e014      	b.n	80062ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a0:	f7fb faea 	bl	8001878 <HAL_GetTick>
 80062a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062a6:	e00a      	b.n	80062be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a8:	f7fb fae6 	bl	8001878 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e138      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062be:	4b4e      	ldr	r3, [pc, #312]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1ee      	bne.n	80062a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 812d 	beq.w	800652e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062d4:	4b48      	ldr	r3, [pc, #288]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062dc:	2b18      	cmp	r3, #24
 80062de:	f000 80bd 	beq.w	800645c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	f040 809e 	bne.w	8006428 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ec:	4b42      	ldr	r3, [pc, #264]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a41      	ldr	r2, [pc, #260]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80062f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fb fabe 	bl	8001878 <HAL_GetTick>
 80062fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006300:	f7fb faba 	bl	8001878 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e10e      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006312:	4b39      	ldr	r3, [pc, #228]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f0      	bne.n	8006300 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800631e:	4b36      	ldr	r3, [pc, #216]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006320:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006322:	4b37      	ldr	r3, [pc, #220]	@ (8006400 <HAL_RCC_OscConfig+0x774>)
 8006324:	4013      	ands	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800632e:	0112      	lsls	r2, r2, #4
 8006330:	430a      	orrs	r2, r1
 8006332:	4931      	ldr	r1, [pc, #196]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006334:	4313      	orrs	r3, r2
 8006336:	628b      	str	r3, [r1, #40]	@ 0x28
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633c:	3b01      	subs	r3, #1
 800633e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006346:	3b01      	subs	r3, #1
 8006348:	025b      	lsls	r3, r3, #9
 800634a:	b29b      	uxth	r3, r3
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006352:	3b01      	subs	r3, #1
 8006354:	041b      	lsls	r3, r3, #16
 8006356:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006360:	3b01      	subs	r3, #1
 8006362:	061b      	lsls	r3, r3, #24
 8006364:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006368:	4923      	ldr	r1, [pc, #140]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800636a:	4313      	orrs	r3, r2
 800636c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800636e:	4b22      	ldr	r3, [pc, #136]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	4a21      	ldr	r2, [pc, #132]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800637a:	4b1f      	ldr	r3, [pc, #124]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800637c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800637e:	4b21      	ldr	r3, [pc, #132]	@ (8006404 <HAL_RCC_OscConfig+0x778>)
 8006380:	4013      	ands	r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006386:	00d2      	lsls	r2, r2, #3
 8006388:	491b      	ldr	r1, [pc, #108]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800638a:	4313      	orrs	r3, r2
 800638c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800638e:	4b1a      	ldr	r3, [pc, #104]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	f023 020c 	bic.w	r2, r3, #12
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	4917      	ldr	r1, [pc, #92]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 800639c:	4313      	orrs	r3, r2
 800639e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063a0:	4b15      	ldr	r3, [pc, #84]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	f023 0202 	bic.w	r2, r3, #2
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ac:	4912      	ldr	r1, [pc, #72]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063b2:	4b11      	ldr	r3, [pc, #68]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	4a10      	ldr	r2, [pc, #64]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063be:	4b0e      	ldr	r3, [pc, #56]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	4a0d      	ldr	r2, [pc, #52]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063ca:	4b0b      	ldr	r3, [pc, #44]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ce:	4a0a      	ldr	r2, [pc, #40]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80063d6:	4b08      	ldr	r3, [pc, #32]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	4a07      	ldr	r2, [pc, #28]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063e2:	4b05      	ldr	r3, [pc, #20]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a04      	ldr	r2, [pc, #16]	@ (80063f8 <HAL_RCC_OscConfig+0x76c>)
 80063e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ee:	f7fb fa43 	bl	8001878 <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063f4:	e011      	b.n	800641a <HAL_RCC_OscConfig+0x78e>
 80063f6:	bf00      	nop
 80063f8:	58024400 	.word	0x58024400
 80063fc:	58024800 	.word	0x58024800
 8006400:	fffffc0c 	.word	0xfffffc0c
 8006404:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006408:	f7fb fa36 	bl	8001878 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e08a      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800641a:	4b47      	ldr	r3, [pc, #284]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0x77c>
 8006426:	e082      	b.n	800652e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006428:	4b43      	ldr	r3, [pc, #268]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a42      	ldr	r2, [pc, #264]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 800642e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006434:	f7fb fa20 	bl	8001878 <HAL_GetTick>
 8006438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800643c:	f7fb fa1c 	bl	8001878 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e070      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800644e:	4b3a      	ldr	r3, [pc, #232]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x7b0>
 800645a:	e068      	b.n	800652e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800645c:	4b36      	ldr	r3, [pc, #216]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006462:	4b35      	ldr	r3, [pc, #212]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 8006464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006466:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	2b01      	cmp	r3, #1
 800646e:	d031      	beq.n	80064d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f003 0203 	and.w	r2, r3, #3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800647a:	429a      	cmp	r2, r3
 800647c:	d12a      	bne.n	80064d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	091b      	lsrs	r3, r3, #4
 8006482:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648a:	429a      	cmp	r2, r3
 800648c:	d122      	bne.n	80064d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006498:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800649a:	429a      	cmp	r2, r3
 800649c:	d11a      	bne.n	80064d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	0a5b      	lsrs	r3, r3, #9
 80064a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d111      	bne.n	80064d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064be:	429a      	cmp	r2, r3
 80064c0:	d108      	bne.n	80064d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	0e1b      	lsrs	r3, r3, #24
 80064c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d001      	beq.n	80064d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e02b      	b.n	8006530 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80064d8:	4b17      	ldr	r3, [pc, #92]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 80064da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064dc:	08db      	lsrs	r3, r3, #3
 80064de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d01f      	beq.n	800652e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80064ee:	4b12      	ldr	r3, [pc, #72]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f2:	4a11      	ldr	r2, [pc, #68]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064fa:	f7fb f9bd 	bl	8001878 <HAL_GetTick>
 80064fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006500:	bf00      	nop
 8006502:	f7fb f9b9 	bl	8001878 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	4293      	cmp	r3, r2
 800650c:	d0f9      	beq.n	8006502 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800650e:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 8006510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006512:	4b0a      	ldr	r3, [pc, #40]	@ (800653c <HAL_RCC_OscConfig+0x8b0>)
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800651a:	00d2      	lsls	r2, r2, #3
 800651c:	4906      	ldr	r1, [pc, #24]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 800651e:	4313      	orrs	r3, r2
 8006520:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006522:	4b05      	ldr	r3, [pc, #20]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 8006524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006526:	4a04      	ldr	r2, [pc, #16]	@ (8006538 <HAL_RCC_OscConfig+0x8ac>)
 8006528:	f043 0301 	orr.w	r3, r3, #1
 800652c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3730      	adds	r7, #48	@ 0x30
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	58024400 	.word	0x58024400
 800653c:	ffff0007 	.word	0xffff0007

08006540 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e19c      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006554:	4b8a      	ldr	r3, [pc, #552]	@ (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d910      	bls.n	8006584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006562:	4b87      	ldr	r3, [pc, #540]	@ (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f023 020f 	bic.w	r2, r3, #15
 800656a:	4985      	ldr	r1, [pc, #532]	@ (8006780 <HAL_RCC_ClockConfig+0x240>)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	4313      	orrs	r3, r2
 8006570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006572:	4b83      	ldr	r3, [pc, #524]	@ (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d001      	beq.n	8006584 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e184      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d010      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	4b7b      	ldr	r3, [pc, #492]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800659c:	429a      	cmp	r2, r3
 800659e:	d908      	bls.n	80065b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065a0:	4b78      	ldr	r3, [pc, #480]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	4975      	ldr	r1, [pc, #468]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d010      	beq.n	80065e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695a      	ldr	r2, [r3, #20]
 80065c2:	4b70      	ldr	r3, [pc, #448]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d908      	bls.n	80065e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	496a      	ldr	r1, [pc, #424]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d010      	beq.n	800660e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699a      	ldr	r2, [r3, #24]
 80065f0:	4b64      	ldr	r3, [pc, #400]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d908      	bls.n	800660e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065fc:	4b61      	ldr	r3, [pc, #388]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	495e      	ldr	r1, [pc, #376]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 800660a:	4313      	orrs	r3, r2
 800660c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d010      	beq.n	800663c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69da      	ldr	r2, [r3, #28]
 800661e:	4b59      	ldr	r3, [pc, #356]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006626:	429a      	cmp	r2, r3
 8006628:	d908      	bls.n	800663c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800662a:	4b56      	ldr	r3, [pc, #344]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	4953      	ldr	r1, [pc, #332]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006638:	4313      	orrs	r3, r2
 800663a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d010      	beq.n	800666a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	4b4d      	ldr	r3, [pc, #308]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	429a      	cmp	r2, r3
 8006656:	d908      	bls.n	800666a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006658:	4b4a      	ldr	r3, [pc, #296]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f023 020f 	bic.w	r2, r3, #15
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4947      	ldr	r1, [pc, #284]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006666:	4313      	orrs	r3, r2
 8006668:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d055      	beq.n	8006722 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006676:	4b43      	ldr	r3, [pc, #268]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	4940      	ldr	r1, [pc, #256]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006684:	4313      	orrs	r3, r2
 8006686:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006690:	4b3c      	ldr	r3, [pc, #240]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d121      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0f6      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066a8:	4b36      	ldr	r3, [pc, #216]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d115      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0ea      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d107      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066c0:	4b30      	ldr	r3, [pc, #192]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0de      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0d6      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066e0:	4b28      	ldr	r3, [pc, #160]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f023 0207 	bic.w	r2, r3, #7
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4925      	ldr	r1, [pc, #148]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f2:	f7fb f8c1 	bl	8001878 <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066fa:	f7fb f8bd 	bl	8001878 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e0be      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006710:	4b1c      	ldr	r3, [pc, #112]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	429a      	cmp	r2, r3
 8006720:	d1eb      	bne.n	80066fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d010      	beq.n	8006750 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	4b14      	ldr	r3, [pc, #80]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	429a      	cmp	r2, r3
 800673c:	d208      	bcs.n	8006750 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673e:	4b11      	ldr	r3, [pc, #68]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f023 020f 	bic.w	r2, r3, #15
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	490e      	ldr	r1, [pc, #56]	@ (8006784 <HAL_RCC_ClockConfig+0x244>)
 800674c:	4313      	orrs	r3, r2
 800674e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006750:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d214      	bcs.n	8006788 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675e:	4b08      	ldr	r3, [pc, #32]	@ (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f023 020f 	bic.w	r2, r3, #15
 8006766:	4906      	ldr	r1, [pc, #24]	@ (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	4313      	orrs	r3, r2
 800676c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800676e:	4b04      	ldr	r3, [pc, #16]	@ (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d005      	beq.n	8006788 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e086      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
 8006780:	52002000 	.word	0x52002000
 8006784:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d010      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	4b3f      	ldr	r3, [pc, #252]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d208      	bcs.n	80067b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	4939      	ldr	r1, [pc, #228]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d010      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	4b34      	ldr	r3, [pc, #208]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d208      	bcs.n	80067e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067d2:	4b31      	ldr	r3, [pc, #196]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	492e      	ldr	r1, [pc, #184]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d010      	beq.n	8006812 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	4b28      	ldr	r3, [pc, #160]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d208      	bcs.n	8006812 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006800:	4b25      	ldr	r3, [pc, #148]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4922      	ldr	r1, [pc, #136]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 800680e:	4313      	orrs	r3, r2
 8006810:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d010      	beq.n	8006840 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69da      	ldr	r2, [r3, #28]
 8006822:	4b1d      	ldr	r3, [pc, #116]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800682a:	429a      	cmp	r2, r3
 800682c:	d208      	bcs.n	8006840 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800682e:	4b1a      	ldr	r3, [pc, #104]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	4917      	ldr	r1, [pc, #92]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 800683c:	4313      	orrs	r3, r2
 800683e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006840:	f000 f834 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 8006844:	4602      	mov	r2, r0
 8006846:	4b14      	ldr	r3, [pc, #80]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	4912      	ldr	r1, [pc, #72]	@ (800689c <HAL_RCC_ClockConfig+0x35c>)
 8006852:	5ccb      	ldrb	r3, [r1, r3]
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	fa22 f303 	lsr.w	r3, r2, r3
 800685c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800685e:	4b0e      	ldr	r3, [pc, #56]	@ (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f003 030f 	and.w	r3, r3, #15
 8006866:	4a0d      	ldr	r2, [pc, #52]	@ (800689c <HAL_RCC_ClockConfig+0x35c>)
 8006868:	5cd3      	ldrb	r3, [r2, r3]
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
 8006874:	4a0a      	ldr	r2, [pc, #40]	@ (80068a0 <HAL_RCC_ClockConfig+0x360>)
 8006876:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006878:	4a0a      	ldr	r2, [pc, #40]	@ (80068a4 <HAL_RCC_ClockConfig+0x364>)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800687e:	4b0a      	ldr	r3, [pc, #40]	@ (80068a8 <HAL_RCC_ClockConfig+0x368>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7fa fc68 	bl	8001158 <HAL_InitTick>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	58024400 	.word	0x58024400
 800689c:	08010d20 	.word	0x08010d20
 80068a0:	24000008 	.word	0x24000008
 80068a4:	24000004 	.word	0x24000004
 80068a8:	2400000c 	.word	0x2400000c

080068ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b089      	sub	sp, #36	@ 0x24
 80068b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068b2:	4bb3      	ldr	r3, [pc, #716]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ba:	2b18      	cmp	r3, #24
 80068bc:	f200 8155 	bhi.w	8006b6a <HAL_RCC_GetSysClockFreq+0x2be>
 80068c0:	a201      	add	r2, pc, #4	@ (adr r2, 80068c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	0800692d 	.word	0x0800692d
 80068cc:	08006b6b 	.word	0x08006b6b
 80068d0:	08006b6b 	.word	0x08006b6b
 80068d4:	08006b6b 	.word	0x08006b6b
 80068d8:	08006b6b 	.word	0x08006b6b
 80068dc:	08006b6b 	.word	0x08006b6b
 80068e0:	08006b6b 	.word	0x08006b6b
 80068e4:	08006b6b 	.word	0x08006b6b
 80068e8:	08006953 	.word	0x08006953
 80068ec:	08006b6b 	.word	0x08006b6b
 80068f0:	08006b6b 	.word	0x08006b6b
 80068f4:	08006b6b 	.word	0x08006b6b
 80068f8:	08006b6b 	.word	0x08006b6b
 80068fc:	08006b6b 	.word	0x08006b6b
 8006900:	08006b6b 	.word	0x08006b6b
 8006904:	08006b6b 	.word	0x08006b6b
 8006908:	08006959 	.word	0x08006959
 800690c:	08006b6b 	.word	0x08006b6b
 8006910:	08006b6b 	.word	0x08006b6b
 8006914:	08006b6b 	.word	0x08006b6b
 8006918:	08006b6b 	.word	0x08006b6b
 800691c:	08006b6b 	.word	0x08006b6b
 8006920:	08006b6b 	.word	0x08006b6b
 8006924:	08006b6b 	.word	0x08006b6b
 8006928:	0800695f 	.word	0x0800695f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800692c:	4b94      	ldr	r3, [pc, #592]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d009      	beq.n	800694c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006938:	4b91      	ldr	r3, [pc, #580]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	08db      	lsrs	r3, r3, #3
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	4a90      	ldr	r2, [pc, #576]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800694a:	e111      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800694c:	4b8d      	ldr	r3, [pc, #564]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800694e:	61bb      	str	r3, [r7, #24]
      break;
 8006950:	e10e      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006952:	4b8d      	ldr	r3, [pc, #564]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006954:	61bb      	str	r3, [r7, #24]
      break;
 8006956:	e10b      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006958:	4b8c      	ldr	r3, [pc, #560]	@ (8006b8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800695a:	61bb      	str	r3, [r7, #24]
      break;
 800695c:	e108      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800695e:	4b88      	ldr	r3, [pc, #544]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006968:	4b85      	ldr	r3, [pc, #532]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006972:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006974:	4b82      	ldr	r3, [pc, #520]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800697e:	4b80      	ldr	r3, [pc, #512]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006982:	08db      	lsrs	r3, r3, #3
 8006984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	fb02 f303 	mul.w	r3, r2, r3
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006996:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 80e1 	beq.w	8006b64 <HAL_RCC_GetSysClockFreq+0x2b8>
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	f000 8083 	beq.w	8006ab0 <HAL_RCC_GetSysClockFreq+0x204>
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	f200 80a1 	bhi.w	8006af4 <HAL_RCC_GetSysClockFreq+0x248>
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_RCC_GetSysClockFreq+0x114>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d056      	beq.n	8006a6c <HAL_RCC_GetSysClockFreq+0x1c0>
 80069be:	e099      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d02d      	beq.n	8006a28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	08db      	lsrs	r3, r3, #3
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
 80069dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f6:	4b62      	ldr	r3, [pc, #392]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006a26:	e087      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006b94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3a:	4b51      	ldr	r3, [pc, #324]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a6a:	e065      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006b98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7e:	4b40      	ldr	r3, [pc, #256]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006aae:	e043      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006b9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006af2:	e021      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006b98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b06:	4b1e      	ldr	r3, [pc, #120]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b1a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b38:	4b11      	ldr	r3, [pc, #68]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3c:	0a5b      	lsrs	r3, r3, #9
 8006b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b42:	3301      	adds	r3, #1
 8006b44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	ee07 3a90 	vmov	s15, r3
 8006b4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5c:	ee17 3a90 	vmov	r3, s15
 8006b60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006b62:	e005      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61bb      	str	r3, [r7, #24]
      break;
 8006b68:	e002      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006b6a:	4b07      	ldr	r3, [pc, #28]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b6c:	61bb      	str	r3, [r7, #24]
      break;
 8006b6e:	bf00      	nop
  }

  return sysclockfreq;
 8006b70:	69bb      	ldr	r3, [r7, #24]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3724      	adds	r7, #36	@ 0x24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	58024400 	.word	0x58024400
 8006b84:	03d09000 	.word	0x03d09000
 8006b88:	003d0900 	.word	0x003d0900
 8006b8c:	017d7840 	.word	0x017d7840
 8006b90:	46000000 	.word	0x46000000
 8006b94:	4c742400 	.word	0x4c742400
 8006b98:	4a742400 	.word	0x4a742400
 8006b9c:	4bbebc20 	.word	0x4bbebc20

08006ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ba6:	f7ff fe81 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 8006baa:	4602      	mov	r2, r0
 8006bac:	4b10      	ldr	r3, [pc, #64]	@ (8006bf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	490f      	ldr	r1, [pc, #60]	@ (8006bf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bb8:	5ccb      	ldrb	r3, [r1, r3]
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	4a09      	ldr	r2, [pc, #36]	@ (8006bf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bce:	5cd3      	ldrb	r3, [r2, r3]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bda:	4a07      	ldr	r2, [pc, #28]	@ (8006bf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bdc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bde:	4a07      	ldr	r2, [pc, #28]	@ (8006bfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006be4:	4b04      	ldr	r3, [pc, #16]	@ (8006bf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006be6:	681b      	ldr	r3, [r3, #0]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	58024400 	.word	0x58024400
 8006bf4:	08010d20 	.word	0x08010d20
 8006bf8:	24000008 	.word	0x24000008
 8006bfc:	24000004 	.word	0x24000004

08006c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c04:	f7ff ffcc 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	4b06      	ldr	r3, [pc, #24]	@ (8006c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	091b      	lsrs	r3, r3, #4
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	4904      	ldr	r1, [pc, #16]	@ (8006c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c16:	5ccb      	ldrb	r3, [r1, r3]
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	58024400 	.word	0x58024400
 8006c28:	08010d20 	.word	0x08010d20

08006c2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	223f      	movs	r2, #63	@ 0x3f
 8006c3a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 0207 	and.w	r2, r3, #7
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006c48:	4b17      	ldr	r3, [pc, #92]	@ (8006ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006c54:	4b14      	ldr	r3, [pc, #80]	@ (8006ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	f003 020f 	and.w	r2, r3, #15
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006c60:	4b11      	ldr	r3, [pc, #68]	@ (8006ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006c78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006c84:	4b08      	ldr	r3, [pc, #32]	@ (8006ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c90:	4b06      	ldr	r3, [pc, #24]	@ (8006cac <HAL_RCC_GetClockConfig+0x80>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 020f 	and.w	r2, r3, #15
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	601a      	str	r2, [r3, #0]
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	58024400 	.word	0x58024400
 8006cac:	52002000 	.word	0x52002000

08006cb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb4:	b0ca      	sub	sp, #296	@ 0x128
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006cd4:	2500      	movs	r5, #0
 8006cd6:	ea54 0305 	orrs.w	r3, r4, r5
 8006cda:	d049      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ce2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ce6:	d02f      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ce8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cec:	d828      	bhi.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cf2:	d01a      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006cf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cf8:	d822      	bhi.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d02:	d007      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d04:	e01c      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d06:	4bb8      	ldr	r3, [pc, #736]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	4ab7      	ldr	r2, [pc, #732]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d12:	e01a      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d18:	3308      	adds	r3, #8
 8006d1a:	2102      	movs	r1, #2
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f002 fb61 	bl	80093e4 <RCCEx_PLL2_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d28:	e00f      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2e:	3328      	adds	r3, #40	@ 0x28
 8006d30:	2102      	movs	r1, #2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 fc08 	bl	8009548 <RCCEx_PLL3_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d3e:	e004      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d46:	e000      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d52:	4ba5      	ldr	r3, [pc, #660]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d60:	4aa1      	ldr	r2, [pc, #644]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d62:	430b      	orrs	r3, r1
 8006d64:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d66:	e003      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006d7c:	f04f 0900 	mov.w	r9, #0
 8006d80:	ea58 0309 	orrs.w	r3, r8, r9
 8006d84:	d047      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d82a      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006d90:	a201      	add	r2, pc, #4	@ (adr r2, 8006d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006dad 	.word	0x08006dad
 8006d9c:	08006dbb 	.word	0x08006dbb
 8006da0:	08006dd1 	.word	0x08006dd1
 8006da4:	08006def 	.word	0x08006def
 8006da8:	08006def 	.word	0x08006def
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dac:	4b8e      	ldr	r3, [pc, #568]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	4a8d      	ldr	r2, [pc, #564]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006db8:	e01a      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f002 fb0e 	bl	80093e4 <RCCEx_PLL2_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dce:	e00f      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd4:	3328      	adds	r3, #40	@ 0x28
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f002 fbb5 	bl	8009548 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006de4:	e004      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dec:	e000      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006df8:	4b7b      	ldr	r3, [pc, #492]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfc:	f023 0107 	bic.w	r1, r3, #7
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e06:	4a78      	ldr	r2, [pc, #480]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e0c:	e003      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006e22:	f04f 0b00 	mov.w	fp, #0
 8006e26:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e2a:	d04c      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e36:	d030      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e3c:	d829      	bhi.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e40:	d02d      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e42:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e44:	d825      	bhi.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e46:	2b80      	cmp	r3, #128	@ 0x80
 8006e48:	d018      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e4a:	2b80      	cmp	r3, #128	@ 0x80
 8006e4c:	d821      	bhi.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e52:	2b40      	cmp	r3, #64	@ 0x40
 8006e54:	d007      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e56:	e01c      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e58:	4b63      	ldr	r3, [pc, #396]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5c:	4a62      	ldr	r2, [pc, #392]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e64:	e01c      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f002 fab8 	bl	80093e4 <RCCEx_PLL2_Config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e7a:	e011      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e80:	3328      	adds	r3, #40	@ 0x28
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f002 fb5f 	bl	8009548 <RCCEx_PLL3_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e90:	e006      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e98:	e002      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e9a:	bf00      	nop
 8006e9c:	e000      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ebc:	e003      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006ed2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006edc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	d053      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006eee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ef2:	d035      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ef4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ef8:	d82e      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006efa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006efe:	d031      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f04:	d828      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f0a:	d01a      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f10:	d822      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f1a:	d007      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f1c:	e01c      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1e:	4b32      	ldr	r3, [pc, #200]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f22:	4a31      	ldr	r2, [pc, #196]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f2a:	e01c      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f30:	3308      	adds	r3, #8
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f002 fa55 	bl	80093e4 <RCCEx_PLL2_Config>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f40:	e011      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f46:	3328      	adds	r3, #40	@ 0x28
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f002 fafc 	bl	8009548 <RCCEx_PLL3_Config>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f56:	e006      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f5e:	e002      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f60:	bf00      	nop
 8006f62:	e000      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10b      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f72:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f84:	e003      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006f9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006fa4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4313      	orrs	r3, r2
 8006fac:	d056      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fba:	d038      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006fbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fc0:	d831      	bhi.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fc6:	d034      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006fc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fcc:	d82b      	bhi.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fd2:	d01d      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fd8:	d825      	bhi.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d006      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fe2:	d00a      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006fe4:	e01f      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fe6:	bf00      	nop
 8006fe8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fec:	4ba2      	ldr	r3, [pc, #648]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff0:	4aa1      	ldr	r2, [pc, #644]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ff8:	e01c      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffe:	3308      	adds	r3, #8
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f002 f9ee 	bl	80093e4 <RCCEx_PLL2_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800700e:	e011      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007014:	3328      	adds	r3, #40	@ 0x28
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f002 fa95 	bl	8009548 <RCCEx_PLL3_Config>
 800701e:	4603      	mov	r3, r0
 8007020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007024:	e006      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800702c:	e002      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800702e:	bf00      	nop
 8007030:	e000      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800703c:	4b8e      	ldr	r3, [pc, #568]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800703e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007040:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007048:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800704c:	4a8a      	ldr	r2, [pc, #552]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800704e:	430b      	orrs	r3, r1
 8007050:	6593      	str	r3, [r2, #88]	@ 0x58
 8007052:	e003      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800705c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800706c:	2300      	movs	r3, #0
 800706e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007072:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007076:	460b      	mov	r3, r1
 8007078:	4313      	orrs	r3, r2
 800707a:	d03a      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007082:	2b30      	cmp	r3, #48	@ 0x30
 8007084:	d01f      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007086:	2b30      	cmp	r3, #48	@ 0x30
 8007088:	d819      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800708a:	2b20      	cmp	r3, #32
 800708c:	d00c      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800708e:	2b20      	cmp	r3, #32
 8007090:	d815      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d019      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007096:	2b10      	cmp	r3, #16
 8007098:	d111      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800709a:	4b77      	ldr	r3, [pc, #476]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800709c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709e:	4a76      	ldr	r2, [pc, #472]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070a6:	e011      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ac:	3308      	adds	r3, #8
 80070ae:	2102      	movs	r1, #2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f002 f997 	bl	80093e4 <RCCEx_PLL2_Config>
 80070b6:	4603      	mov	r3, r0
 80070b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070bc:	e006      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070c4:	e002      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070c6:	bf00      	nop
 80070c8:	e000      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070d4:	4b68      	ldr	r3, [pc, #416]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80070dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e2:	4a65      	ldr	r2, [pc, #404]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e4:	430b      	orrs	r3, r1
 80070e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070e8:	e003      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80070fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007102:	2300      	movs	r3, #0
 8007104:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007108:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800710c:	460b      	mov	r3, r1
 800710e:	4313      	orrs	r3, r2
 8007110:	d051      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007118:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800711c:	d035      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800711e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007122:	d82e      	bhi.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007124:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007128:	d031      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800712a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800712e:	d828      	bhi.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007134:	d01a      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800713a:	d822      	bhi.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007144:	d007      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007146:	e01c      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007148:	4b4b      	ldr	r3, [pc, #300]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800714a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714c:	4a4a      	ldr	r2, [pc, #296]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800714e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007154:	e01c      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715a:	3308      	adds	r3, #8
 800715c:	2100      	movs	r1, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f002 f940 	bl	80093e4 <RCCEx_PLL2_Config>
 8007164:	4603      	mov	r3, r0
 8007166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800716a:	e011      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800716c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007170:	3328      	adds	r3, #40	@ 0x28
 8007172:	2100      	movs	r1, #0
 8007174:	4618      	mov	r0, r3
 8007176:	f002 f9e7 	bl	8009548 <RCCEx_PLL3_Config>
 800717a:	4603      	mov	r3, r0
 800717c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007180:	e006      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007188:	e002      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800718e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007198:	4b37      	ldr	r3, [pc, #220]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800719a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800719c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80071a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a6:	4a34      	ldr	r2, [pc, #208]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071a8:	430b      	orrs	r3, r1
 80071aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80071ac:	e003      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80071c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071c6:	2300      	movs	r3, #0
 80071c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80071d0:	460b      	mov	r3, r1
 80071d2:	4313      	orrs	r3, r2
 80071d4:	d056      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071e0:	d033      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80071e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071e6:	d82c      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071ec:	d02f      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80071ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071f2:	d826      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071f8:	d02b      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80071fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071fe:	d820      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007204:	d012      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800720a:	d81a      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d022      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007214:	d115      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721a:	3308      	adds	r3, #8
 800721c:	2101      	movs	r1, #1
 800721e:	4618      	mov	r0, r3
 8007220:	f002 f8e0 	bl	80093e4 <RCCEx_PLL2_Config>
 8007224:	4603      	mov	r3, r0
 8007226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800722a:	e015      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007230:	3328      	adds	r3, #40	@ 0x28
 8007232:	2101      	movs	r1, #1
 8007234:	4618      	mov	r0, r3
 8007236:	f002 f987 	bl	8009548 <RCCEx_PLL3_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007240:	e00a      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007248:	e006      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800724a:	bf00      	nop
 800724c:	e004      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800724e:	bf00      	nop
 8007250:	e002      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007252:	bf00      	nop
 8007254:	e000      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10d      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007260:	4b05      	ldr	r3, [pc, #20]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007264:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800726e:	4a02      	ldr	r2, [pc, #8]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007270:	430b      	orrs	r3, r1
 8007272:	6513      	str	r3, [r2, #80]	@ 0x50
 8007274:	e006      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007276:	bf00      	nop
 8007278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007290:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007294:	2300      	movs	r3, #0
 8007296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800729a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800729e:	460b      	mov	r3, r1
 80072a0:	4313      	orrs	r3, r2
 80072a2:	d055      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072b0:	d033      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80072b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072b6:	d82c      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072bc:	d02f      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c2:	d826      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072c8:	d02b      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80072ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072ce:	d820      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d4:	d012      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80072d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072da:	d81a      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d022      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80072e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e4:	d115      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ea:	3308      	adds	r3, #8
 80072ec:	2101      	movs	r1, #1
 80072ee:	4618      	mov	r0, r3
 80072f0:	f002 f878 	bl	80093e4 <RCCEx_PLL2_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072fa:	e015      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007300:	3328      	adds	r3, #40	@ 0x28
 8007302:	2101      	movs	r1, #1
 8007304:	4618      	mov	r0, r3
 8007306:	f002 f91f 	bl	8009548 <RCCEx_PLL3_Config>
 800730a:	4603      	mov	r3, r0
 800730c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007310:	e00a      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007318:	e006      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800731a:	bf00      	nop
 800731c:	e004      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10b      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007330:	4ba3      	ldr	r3, [pc, #652]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007334:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007340:	4a9f      	ldr	r2, [pc, #636]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007342:	430b      	orrs	r3, r1
 8007344:	6593      	str	r3, [r2, #88]	@ 0x58
 8007346:	e003      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800734c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800735c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007360:	2300      	movs	r3, #0
 8007362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800736a:	460b      	mov	r3, r1
 800736c:	4313      	orrs	r3, r2
 800736e:	d037      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800737a:	d00e      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800737c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007380:	d816      	bhi.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d018      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800738a:	d111      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800738c:	4b8c      	ldr	r3, [pc, #560]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	4a8b      	ldr	r2, [pc, #556]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007398:	e00f      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739e:	3308      	adds	r3, #8
 80073a0:	2101      	movs	r1, #1
 80073a2:	4618      	mov	r0, r3
 80073a4:	f002 f81e 	bl	80093e4 <RCCEx_PLL2_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073ae:	e004      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073b6:	e000      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80073b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073c2:	4b7f      	ldr	r3, [pc, #508]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d0:	4a7b      	ldr	r2, [pc, #492]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d2:	430b      	orrs	r3, r1
 80073d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80073d6:	e003      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80073ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073f0:	2300      	movs	r3, #0
 80073f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80073f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4313      	orrs	r3, r2
 80073fe:	d039      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007406:	2b03      	cmp	r3, #3
 8007408:	d81c      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800740a:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	0800744d 	.word	0x0800744d
 8007414:	08007421 	.word	0x08007421
 8007418:	0800742f 	.word	0x0800742f
 800741c:	0800744d 	.word	0x0800744d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007420:	4b67      	ldr	r3, [pc, #412]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	4a66      	ldr	r2, [pc, #408]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800742a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800742c:	e00f      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	3308      	adds	r3, #8
 8007434:	2102      	movs	r1, #2
 8007436:	4618      	mov	r0, r3
 8007438:	f001 ffd4 	bl	80093e4 <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007442:	e004      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800744a:	e000      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800744c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007456:	4b5a      	ldr	r3, [pc, #360]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800745a:	f023 0103 	bic.w	r1, r3, #3
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007464:	4a56      	ldr	r2, [pc, #344]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007466:	430b      	orrs	r3, r1
 8007468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800746a:	e003      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007480:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007484:	2300      	movs	r3, #0
 8007486:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800748a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800748e:	460b      	mov	r3, r1
 8007490:	4313      	orrs	r3, r2
 8007492:	f000 809f 	beq.w	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007496:	4b4b      	ldr	r3, [pc, #300]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a4a      	ldr	r2, [pc, #296]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800749c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074a2:	f7fa f9e9 	bl	8001878 <HAL_GetTick>
 80074a6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074aa:	e00b      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ac:	f7fa f9e4 	bl	8001878 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b64      	cmp	r3, #100	@ 0x64
 80074ba:	d903      	bls.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074c2:	e005      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074c4:	4b3f      	ldr	r3, [pc, #252]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0ed      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80074d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d179      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074d8:	4b39      	ldr	r3, [pc, #228]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074e4:	4053      	eors	r3, r2
 80074e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d015      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074ee:	4b34      	ldr	r3, [pc, #208]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074fa:	4b31      	ldr	r3, [pc, #196]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fe:	4a30      	ldr	r2, [pc, #192]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007504:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007506:	4b2e      	ldr	r3, [pc, #184]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750a:	4a2d      	ldr	r2, [pc, #180]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800750c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007510:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007512:	4a2b      	ldr	r2, [pc, #172]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007518:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800751a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007526:	d118      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007528:	f7fa f9a6 	bl	8001878 <HAL_GetTick>
 800752c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007530:	e00d      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007532:	f7fa f9a1 	bl	8001878 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800753c:	1ad2      	subs	r2, r2, r3
 800753e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007542:	429a      	cmp	r2, r3
 8007544:	d903      	bls.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800754c:	e005      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800754e:	4b1c      	ldr	r3, [pc, #112]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0eb      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800755a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800755e:	2b00      	cmp	r3, #0
 8007560:	d129      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800756a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800756e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007572:	d10e      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007574:	4b12      	ldr	r3, [pc, #72]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800757c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007580:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007584:	091a      	lsrs	r2, r3, #4
 8007586:	4b10      	ldr	r3, [pc, #64]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007588:	4013      	ands	r3, r2
 800758a:	4a0d      	ldr	r2, [pc, #52]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800758c:	430b      	orrs	r3, r1
 800758e:	6113      	str	r3, [r2, #16]
 8007590:	e005      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007592:	4b0b      	ldr	r3, [pc, #44]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	4a0a      	ldr	r2, [pc, #40]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007598:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800759c:	6113      	str	r3, [r2, #16]
 800759e:	4b08      	ldr	r3, [pc, #32]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ae:	4a04      	ldr	r2, [pc, #16]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075b0:	430b      	orrs	r3, r1
 80075b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80075b4:	e00e      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80075be:	e009      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80075c0:	58024400 	.word	0x58024400
 80075c4:	58024800 	.word	0x58024800
 80075c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f002 0301 	and.w	r3, r2, #1
 80075e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075e4:	2300      	movs	r3, #0
 80075e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f000 8089 	beq.w	8007708 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075fc:	2b28      	cmp	r3, #40	@ 0x28
 80075fe:	d86b      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007600:	a201      	add	r2, pc, #4	@ (adr r2, 8007608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	080076e1 	.word	0x080076e1
 800760c:	080076d9 	.word	0x080076d9
 8007610:	080076d9 	.word	0x080076d9
 8007614:	080076d9 	.word	0x080076d9
 8007618:	080076d9 	.word	0x080076d9
 800761c:	080076d9 	.word	0x080076d9
 8007620:	080076d9 	.word	0x080076d9
 8007624:	080076d9 	.word	0x080076d9
 8007628:	080076ad 	.word	0x080076ad
 800762c:	080076d9 	.word	0x080076d9
 8007630:	080076d9 	.word	0x080076d9
 8007634:	080076d9 	.word	0x080076d9
 8007638:	080076d9 	.word	0x080076d9
 800763c:	080076d9 	.word	0x080076d9
 8007640:	080076d9 	.word	0x080076d9
 8007644:	080076d9 	.word	0x080076d9
 8007648:	080076c3 	.word	0x080076c3
 800764c:	080076d9 	.word	0x080076d9
 8007650:	080076d9 	.word	0x080076d9
 8007654:	080076d9 	.word	0x080076d9
 8007658:	080076d9 	.word	0x080076d9
 800765c:	080076d9 	.word	0x080076d9
 8007660:	080076d9 	.word	0x080076d9
 8007664:	080076d9 	.word	0x080076d9
 8007668:	080076e1 	.word	0x080076e1
 800766c:	080076d9 	.word	0x080076d9
 8007670:	080076d9 	.word	0x080076d9
 8007674:	080076d9 	.word	0x080076d9
 8007678:	080076d9 	.word	0x080076d9
 800767c:	080076d9 	.word	0x080076d9
 8007680:	080076d9 	.word	0x080076d9
 8007684:	080076d9 	.word	0x080076d9
 8007688:	080076e1 	.word	0x080076e1
 800768c:	080076d9 	.word	0x080076d9
 8007690:	080076d9 	.word	0x080076d9
 8007694:	080076d9 	.word	0x080076d9
 8007698:	080076d9 	.word	0x080076d9
 800769c:	080076d9 	.word	0x080076d9
 80076a0:	080076d9 	.word	0x080076d9
 80076a4:	080076d9 	.word	0x080076d9
 80076a8:	080076e1 	.word	0x080076e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b0:	3308      	adds	r3, #8
 80076b2:	2101      	movs	r1, #1
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 fe95 	bl	80093e4 <RCCEx_PLL2_Config>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076c0:	e00f      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c6:	3328      	adds	r3, #40	@ 0x28
 80076c8:	2101      	movs	r1, #1
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 ff3c 	bl	8009548 <RCCEx_PLL3_Config>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076d6:	e004      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076de:	e000      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80076e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076ea:	4bbf      	ldr	r3, [pc, #764]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076f8:	4abb      	ldr	r2, [pc, #748]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076fa:	430b      	orrs	r3, r1
 80076fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80076fe:	e003      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f002 0302 	and.w	r3, r2, #2
 8007714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007718:	2300      	movs	r3, #0
 800771a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800771e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007722:	460b      	mov	r3, r1
 8007724:	4313      	orrs	r3, r2
 8007726:	d041      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800772e:	2b05      	cmp	r3, #5
 8007730:	d824      	bhi.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007785 	.word	0x08007785
 800773c:	08007751 	.word	0x08007751
 8007740:	08007767 	.word	0x08007767
 8007744:	08007785 	.word	0x08007785
 8007748:	08007785 	.word	0x08007785
 800774c:	08007785 	.word	0x08007785
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007754:	3308      	adds	r3, #8
 8007756:	2101      	movs	r1, #1
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fe43 	bl	80093e4 <RCCEx_PLL2_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007764:	e00f      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776a:	3328      	adds	r3, #40	@ 0x28
 800776c:	2101      	movs	r1, #1
 800776e:	4618      	mov	r0, r3
 8007770:	f001 feea 	bl	8009548 <RCCEx_PLL3_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800777a:	e004      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007782:	e000      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800778e:	4b96      	ldr	r3, [pc, #600]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007792:	f023 0107 	bic.w	r1, r3, #7
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800779c:	4a92      	ldr	r2, [pc, #584]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800779e:	430b      	orrs	r3, r1
 80077a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80077a2:	e003      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f002 0304 	and.w	r3, r2, #4
 80077b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077bc:	2300      	movs	r3, #0
 80077be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4313      	orrs	r3, r2
 80077ca:	d044      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077d4:	2b05      	cmp	r3, #5
 80077d6:	d825      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80077d8:	a201      	add	r2, pc, #4	@ (adr r2, 80077e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	0800782d 	.word	0x0800782d
 80077e4:	080077f9 	.word	0x080077f9
 80077e8:	0800780f 	.word	0x0800780f
 80077ec:	0800782d 	.word	0x0800782d
 80077f0:	0800782d 	.word	0x0800782d
 80077f4:	0800782d 	.word	0x0800782d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fc:	3308      	adds	r3, #8
 80077fe:	2101      	movs	r1, #1
 8007800:	4618      	mov	r0, r3
 8007802:	f001 fdef 	bl	80093e4 <RCCEx_PLL2_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800780c:	e00f      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	3328      	adds	r3, #40	@ 0x28
 8007814:	2101      	movs	r1, #1
 8007816:	4618      	mov	r0, r3
 8007818:	f001 fe96 	bl	8009548 <RCCEx_PLL3_Config>
 800781c:	4603      	mov	r3, r0
 800781e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007822:	e004      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800782a:	e000      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800782c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10b      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007836:	4b6c      	ldr	r3, [pc, #432]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800783a:	f023 0107 	bic.w	r1, r3, #7
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007846:	4a68      	ldr	r2, [pc, #416]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007848:	430b      	orrs	r3, r1
 800784a:	6593      	str	r3, [r2, #88]	@ 0x58
 800784c:	e003      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f002 0320 	and.w	r3, r2, #32
 8007862:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007866:	2300      	movs	r3, #0
 8007868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800786c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007870:	460b      	mov	r3, r1
 8007872:	4313      	orrs	r3, r2
 8007874:	d055      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007882:	d033      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007888:	d82c      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800788a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788e:	d02f      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007894:	d826      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007896:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800789a:	d02b      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800789c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078a0:	d820      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a6:	d012      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80078a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078ac:	d81a      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d022      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80078b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078b6:	d115      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078bc:	3308      	adds	r3, #8
 80078be:	2100      	movs	r1, #0
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fd8f 	bl	80093e4 <RCCEx_PLL2_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078cc:	e015      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d2:	3328      	adds	r3, #40	@ 0x28
 80078d4:	2102      	movs	r1, #2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 fe36 	bl	8009548 <RCCEx_PLL3_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078e2:	e00a      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ea:	e006      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078ec:	bf00      	nop
 80078ee:	e004      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078f0:	bf00      	nop
 80078f2:	e002      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078f4:	bf00      	nop
 80078f6:	e000      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10b      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007902:	4b39      	ldr	r3, [pc, #228]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007906:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007912:	4a35      	ldr	r2, [pc, #212]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007914:	430b      	orrs	r3, r1
 8007916:	6553      	str	r3, [r2, #84]	@ 0x54
 8007918:	e003      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800792e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007932:	2300      	movs	r3, #0
 8007934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007938:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800793c:	460b      	mov	r3, r1
 800793e:	4313      	orrs	r3, r2
 8007940:	d058      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007946:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800794a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800794e:	d033      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007950:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007954:	d82c      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800795a:	d02f      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800795c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007960:	d826      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007962:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007966:	d02b      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007968:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800796c:	d820      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800796e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007972:	d012      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007978:	d81a      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d022      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800797e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007982:	d115      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007988:	3308      	adds	r3, #8
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f001 fd29 	bl	80093e4 <RCCEx_PLL2_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007998:	e015      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799e:	3328      	adds	r3, #40	@ 0x28
 80079a0:	2102      	movs	r1, #2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 fdd0 	bl	8009548 <RCCEx_PLL3_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079ae:	e00a      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079b6:	e006      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079b8:	bf00      	nop
 80079ba:	e004      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079bc:	bf00      	nop
 80079be:	e002      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079c0:	bf00      	nop
 80079c2:	e000      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10e      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079ce:	4b06      	ldr	r3, [pc, #24]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80079d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079de:	4a02      	ldr	r2, [pc, #8]	@ (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079e0:	430b      	orrs	r3, r1
 80079e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80079e4:	e006      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80079e6:	bf00      	nop
 80079e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a04:	2300      	movs	r3, #0
 8007a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4313      	orrs	r3, r2
 8007a12:	d055      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a1c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a20:	d033      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a22:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a26:	d82c      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a2c:	d02f      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a32:	d826      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a34:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a38:	d02b      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a3a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a3e:	d820      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a44:	d012      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a4a:	d81a      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d022      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a54:	d115      	bne.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 fcc0 	bl	80093e4 <RCCEx_PLL2_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a6a:	e015      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a70:	3328      	adds	r3, #40	@ 0x28
 8007a72:	2102      	movs	r1, #2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 fd67 	bl	8009548 <RCCEx_PLL3_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a80:	e00a      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a88:	e006      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a8a:	bf00      	nop
 8007a8c:	e004      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a8e:	bf00      	nop
 8007a90:	e002      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a92:	bf00      	nop
 8007a94:	e000      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10b      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007aa0:	4ba1      	ldr	r3, [pc, #644]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ab0:	4a9d      	ldr	r2, [pc, #628]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ab6:	e003      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f002 0308 	and.w	r3, r2, #8
 8007acc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ad6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007ada:	460b      	mov	r3, r1
 8007adc:	4313      	orrs	r3, r2
 8007ade:	d01e      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aec:	d10c      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af2:	3328      	adds	r3, #40	@ 0x28
 8007af4:	2102      	movs	r1, #2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 fd26 	bl	8009548 <RCCEx_PLL3_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b08:	4b87      	ldr	r3, [pc, #540]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b0c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b18:	4a83      	ldr	r2, [pc, #524]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b1a:	430b      	orrs	r3, r1
 8007b1c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f002 0310 	and.w	r3, r2, #16
 8007b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b34:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	d01e      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b4a:	d10c      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b50:	3328      	adds	r3, #40	@ 0x28
 8007b52:	2102      	movs	r1, #2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 fcf7 	bl	8009548 <RCCEx_PLL3_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b66:	4b70      	ldr	r3, [pc, #448]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b76:	4a6c      	ldr	r2, [pc, #432]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b92:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007b96:	460b      	mov	r3, r1
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	d03e      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba8:	d022      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007baa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bae:	d81b      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb8:	d00b      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007bba:	e015      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 fc0d 	bl	80093e4 <RCCEx_PLL2_Config>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bd0:	e00f      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd6:	3328      	adds	r3, #40	@ 0x28
 8007bd8:	2102      	movs	r1, #2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 fcb4 	bl	8009548 <RCCEx_PLL3_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007be6:	e004      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bee:	e000      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10b      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c0a:	4a47      	ldr	r2, [pc, #284]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c10:	e003      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c28:	2300      	movs	r3, #0
 8007c2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c2c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c30:	460b      	mov	r3, r1
 8007c32:	4313      	orrs	r3, r2
 8007c34:	d03b      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c42:	d01f      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c48:	d818      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c4e:	d003      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c54:	d007      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c56:	e011      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c58:	4b33      	ldr	r3, [pc, #204]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	4a32      	ldr	r2, [pc, #200]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c64:	e00f      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6a:	3328      	adds	r3, #40	@ 0x28
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 fc6a 	bl	8009548 <RCCEx_PLL3_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c7a:	e004      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c82:	e000      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10b      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c8e:	4b26      	ldr	r3, [pc, #152]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c9e:	4a22      	ldr	r2, [pc, #136]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ca4:	e003      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007cba:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8007cc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d034      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cd8:	d007      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007cda:	e011      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cdc:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	4a11      	ldr	r2, [pc, #68]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ce8:	e00e      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cee:	3308      	adds	r3, #8
 8007cf0:	2102      	movs	r1, #2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 fb76 	bl	80093e4 <RCCEx_PLL2_Config>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cfe:	e003      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10d      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d10:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d1e:	4a02      	ldr	r2, [pc, #8]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d20:	430b      	orrs	r3, r1
 8007d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d24:	e006      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d26:	bf00      	nop
 8007d28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d42:	2300      	movs	r3, #0
 8007d44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	d00c      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d54:	3328      	adds	r3, #40	@ 0x28
 8007d56:	2102      	movs	r1, #2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 fbf5 	bl	8009548 <RCCEx_PLL3_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007d76:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d78:	2300      	movs	r3, #0
 8007d7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007d80:	460b      	mov	r3, r1
 8007d82:	4313      	orrs	r3, r2
 8007d84:	d038      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d92:	d018      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007d94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d98:	d811      	bhi.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d9e:	d014      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da4:	d80b      	bhi.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d011      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dae:	d106      	bne.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db0:	4bc3      	ldr	r3, [pc, #780]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db4:	4ac2      	ldr	r2, [pc, #776]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007dbc:	e008      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dc4:	e004      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dc6:	bf00      	nop
 8007dc8:	e002      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dca:	bf00      	nop
 8007dcc:	e000      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10b      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dd8:	4bb9      	ldr	r3, [pc, #740]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ddc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007de8:	4ab5      	ldr	r2, [pc, #724]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dea:	430b      	orrs	r3, r1
 8007dec:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dee:	e003      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e06:	2300      	movs	r3, #0
 8007e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4313      	orrs	r3, r2
 8007e12:	d009      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e14:	4baa      	ldr	r3, [pc, #680]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e22:	4aa7      	ldr	r2, [pc, #668]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e24:	430b      	orrs	r3, r1
 8007e26:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e34:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e36:	2300      	movs	r3, #0
 8007e38:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4313      	orrs	r3, r2
 8007e42:	d00a      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e44:	4b9e      	ldr	r3, [pc, #632]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e54:	4a9a      	ldr	r2, [pc, #616]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e56:	430b      	orrs	r3, r1
 8007e58:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e68:	2300      	movs	r3, #0
 8007e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e70:	460b      	mov	r3, r1
 8007e72:	4313      	orrs	r3, r2
 8007e74:	d009      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e76:	4b92      	ldr	r3, [pc, #584]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e7a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e84:	4a8e      	ldr	r2, [pc, #568]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e86:	430b      	orrs	r3, r1
 8007e88:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007e96:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e98:	2300      	movs	r3, #0
 8007e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e9c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ea6:	4b86      	ldr	r3, [pc, #536]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	4a85      	ldr	r2, [pc, #532]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007eb0:	6113      	str	r3, [r2, #16]
 8007eb2:	4b83      	ldr	r3, [pc, #524]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eb4:	6919      	ldr	r1, [r3, #16]
 8007eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ebe:	4a80      	ldr	r2, [pc, #512]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007eda:	460b      	mov	r3, r1
 8007edc:	4313      	orrs	r3, r2
 8007ede:	d009      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ee0:	4b77      	ldr	r3, [pc, #476]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ee4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eee:	4a74      	ldr	r2, [pc, #464]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f02:	2300      	movs	r3, #0
 8007f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f06:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	d00a      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f10:	4b6b      	ldr	r3, [pc, #428]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f14:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f20:	4a67      	ldr	r2, [pc, #412]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f22:	430b      	orrs	r3, r1
 8007f24:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	2100      	movs	r1, #0
 8007f30:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	d011      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f46:	3308      	adds	r3, #8
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fa4a 	bl	80093e4 <RCCEx_PLL2_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6239      	str	r1, [r7, #32]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	d011      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f86:	3308      	adds	r3, #8
 8007f88:	2101      	movs	r1, #1
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 fa2a 	bl	80093e4 <RCCEx_PLL2_Config>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	61b9      	str	r1, [r7, #24]
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	61fb      	str	r3, [r7, #28]
 8007fb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	d011      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	2102      	movs	r1, #2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 fa0a 	bl	80093e4 <RCCEx_PLL2_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	2100      	movs	r1, #0
 8007ff0:	6139      	str	r1, [r7, #16]
 8007ff2:	f003 0308 	and.w	r3, r3, #8
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4313      	orrs	r3, r2
 8008000:	d011      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008006:	3328      	adds	r3, #40	@ 0x28
 8008008:	2100      	movs	r1, #0
 800800a:	4618      	mov	r0, r3
 800800c:	f001 fa9c 	bl	8009548 <RCCEx_PLL3_Config>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	2100      	movs	r1, #0
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800803c:	460b      	mov	r3, r1
 800803e:	4313      	orrs	r3, r2
 8008040:	d011      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008046:	3328      	adds	r3, #40	@ 0x28
 8008048:	2101      	movs	r1, #1
 800804a:	4618      	mov	r0, r3
 800804c:	f001 fa7c 	bl	8009548 <RCCEx_PLL3_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	2100      	movs	r1, #0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	607b      	str	r3, [r7, #4]
 8008078:	e9d7 1200 	ldrd	r1, r2, [r7]
 800807c:	460b      	mov	r3, r1
 800807e:	4313      	orrs	r3, r2
 8008080:	d011      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	3328      	adds	r3, #40	@ 0x28
 8008088:	2102      	movs	r1, #2
 800808a:	4618      	mov	r0, r3
 800808c:	f001 fa5c 	bl	8009548 <RCCEx_PLL3_Config>
 8008090:	4603      	mov	r3, r0
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80080a6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	e000      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80080ba:	46bd      	mov	sp, r7
 80080bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080c0:	58024400 	.word	0x58024400

080080c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b090      	sub	sp, #64	@ 0x40
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80080ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80080d6:	430b      	orrs	r3, r1
 80080d8:	f040 8094 	bne.w	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80080dc:	4b9e      	ldr	r3, [pc, #632]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	f200 8087 	bhi.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80080ee:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	08008109 	.word	0x08008109
 80080f8:	08008131 	.word	0x08008131
 80080fc:	08008159 	.word	0x08008159
 8008100:	080081f5 	.word	0x080081f5
 8008104:	08008181 	.word	0x08008181
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008108:	4b93      	ldr	r3, [pc, #588]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008110:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008114:	d108      	bne.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800811a:	4618      	mov	r0, r3
 800811c:	f001 f810 	bl	8009140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008124:	f000 bd45 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812c:	f000 bd41 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008130:	4b89      	ldr	r3, [pc, #548]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800813c:	d108      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800813e:	f107 0318 	add.w	r3, r7, #24
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fd54 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814c:	f000 bd31 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008154:	f000 bd2d 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008158:	4b7f      	ldr	r3, [pc, #508]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008164:	d108      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008166:	f107 030c 	add.w	r3, r7, #12
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fe94 	bl	8008e98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008174:	f000 bd1d 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800817c:	f000 bd19 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008180:	4b75      	ldr	r3, [pc, #468]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008184:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008188:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800818a:	4b73      	ldr	r3, [pc, #460]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b04      	cmp	r3, #4
 8008194:	d10c      	bne.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008198:	2b00      	cmp	r3, #0
 800819a:	d109      	bne.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800819c:	4b6e      	ldr	r3, [pc, #440]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	08db      	lsrs	r3, r3, #3
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	4a6d      	ldr	r2, [pc, #436]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081a8:	fa22 f303 	lsr.w	r3, r2, r3
 80081ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ae:	e01f      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081b0:	4b69      	ldr	r3, [pc, #420]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081bc:	d106      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80081be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081c4:	d102      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081c6:	4b66      	ldr	r3, [pc, #408]	@ (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ca:	e011      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081cc:	4b62      	ldr	r3, [pc, #392]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d8:	d106      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80081da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081e0:	d102      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081e2:	4b60      	ldr	r3, [pc, #384]	@ (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e6:	e003      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081ec:	f000 bce1 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081f0:	f000 bcdf 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081f4:	4b5c      	ldr	r3, [pc, #368]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f8:	f000 bcdb 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008200:	f000 bcd7 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008208:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800820c:	430b      	orrs	r3, r1
 800820e:	f040 80ad 	bne.w	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008212:	4b51      	ldr	r3, [pc, #324]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008216:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800821a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008222:	d056      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800822a:	f200 8090 	bhi.w	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	2bc0      	cmp	r3, #192	@ 0xc0
 8008232:	f000 8088 	beq.w	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008238:	2bc0      	cmp	r3, #192	@ 0xc0
 800823a:	f200 8088 	bhi.w	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	2b80      	cmp	r3, #128	@ 0x80
 8008242:	d032      	beq.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008246:	2b80      	cmp	r3, #128	@ 0x80
 8008248:	f200 8081 	bhi.w	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	2b40      	cmp	r3, #64	@ 0x40
 8008256:	d014      	beq.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008258:	e079      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800825a:	4b3f      	ldr	r3, [pc, #252]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008262:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008266:	d108      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800826c:	4618      	mov	r0, r3
 800826e:	f000 ff67 	bl	8009140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008276:	f000 bc9c 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800827e:	f000 bc98 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008282:	4b35      	ldr	r3, [pc, #212]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800828a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800828e:	d108      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008290:	f107 0318 	add.w	r3, r7, #24
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fcab 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800829e:	f000 bc88 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a6:	f000 bc84 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082b6:	d108      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082b8:	f107 030c 	add.w	r3, r7, #12
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fdeb 	bl	8008e98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082c6:	f000 bc74 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082ce:	f000 bc70 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082d2:	4b21      	ldr	r3, [pc, #132]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082dc:	4b1e      	ldr	r3, [pc, #120]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d10c      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80082e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	08db      	lsrs	r3, r3, #3
 80082f4:	f003 0303 	and.w	r3, r3, #3
 80082f8:	4a18      	ldr	r2, [pc, #96]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082fa:	fa22 f303 	lsr.w	r3, r2, r3
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008300:	e01f      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008302:	4b15      	ldr	r3, [pc, #84]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800830e:	d106      	bne.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008316:	d102      	bne.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008318:	4b11      	ldr	r3, [pc, #68]	@ (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800831a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800831c:	e011      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800831e:	4b0e      	ldr	r3, [pc, #56]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008326:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800832a:	d106      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800832c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008332:	d102      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008334:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008338:	e003      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800833e:	f000 bc38 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008342:	f000 bc36 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008346:	4b08      	ldr	r3, [pc, #32]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800834a:	f000 bc32 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008352:	f000 bc2e 	b.w	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008356:	bf00      	nop
 8008358:	58024400 	.word	0x58024400
 800835c:	03d09000 	.word	0x03d09000
 8008360:	003d0900 	.word	0x003d0900
 8008364:	017d7840 	.word	0x017d7840
 8008368:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800836c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008370:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008374:	430b      	orrs	r3, r1
 8008376:	f040 809c 	bne.w	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800837a:	4b9e      	ldr	r3, [pc, #632]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800837c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800837e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008382:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800838a:	d054      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008392:	f200 808b 	bhi.w	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800839c:	f000 8083 	beq.w	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80083a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80083a6:	f200 8081 	bhi.w	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083b0:	d02f      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083b8:	d878      	bhi.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d004      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083c6:	d012      	beq.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80083c8:	e070      	b.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083ca:	4b8a      	ldr	r3, [pc, #552]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083d6:	d107      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 feaf 	bl	8009140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e6:	e3e4      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ec:	e3e1      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083ee:	4b81      	ldr	r3, [pc, #516]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083fa:	d107      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083fc:	f107 0318 	add.w	r3, r7, #24
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fbf5 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800840a:	e3d2      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008410:	e3cf      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008412:	4b78      	ldr	r3, [pc, #480]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800841a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800841e:	d107      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008420:	f107 030c 	add.w	r3, r7, #12
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fd37 	bl	8008e98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800842e:	e3c0      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008434:	e3bd      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008436:	4b6f      	ldr	r3, [pc, #444]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800843a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800843e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008440:	4b6c      	ldr	r3, [pc, #432]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b04      	cmp	r3, #4
 800844a:	d10c      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800844c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844e:	2b00      	cmp	r3, #0
 8008450:	d109      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008452:	4b68      	ldr	r3, [pc, #416]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	08db      	lsrs	r3, r3, #3
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	4a66      	ldr	r2, [pc, #408]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800845e:	fa22 f303 	lsr.w	r3, r2, r3
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008464:	e01e      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008466:	4b63      	ldr	r3, [pc, #396]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008472:	d106      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008476:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800847a:	d102      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800847c:	4b5f      	ldr	r3, [pc, #380]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008480:	e010      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008482:	4b5c      	ldr	r3, [pc, #368]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800848a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800848e:	d106      	bne.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008496:	d102      	bne.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008498:	4b59      	ldr	r3, [pc, #356]	@ (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800849c:	e002      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084a2:	e386      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084a4:	e385      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084a6:	4b57      	ldr	r3, [pc, #348]	@ (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084aa:	e382      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084b0:	e37f      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80084b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80084ba:	430b      	orrs	r3, r1
 80084bc:	f040 80a7 	bne.w	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80084c0:	4b4c      	ldr	r3, [pc, #304]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80084c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084d0:	d055      	beq.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084d8:	f200 8096 	bhi.w	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80084e2:	f000 8084 	beq.w	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80084ec:	f200 808c 	bhi.w	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084f6:	d030      	beq.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80084f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084fe:	f200 8083 	bhi.w	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	2b00      	cmp	r3, #0
 8008506:	d004      	beq.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800850e:	d012      	beq.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008510:	e07a      	b.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008512:	4b38      	ldr	r3, [pc, #224]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800851e:	d107      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fe0b 	bl	8009140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800852e:	e340      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008534:	e33d      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008536:	4b2f      	ldr	r3, [pc, #188]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800853e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008542:	d107      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008544:	f107 0318 	add.w	r3, r7, #24
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fb51 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008552:	e32e      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008558:	e32b      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800855a:	4b26      	ldr	r3, [pc, #152]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008566:	d107      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008568:	f107 030c 	add.w	r3, r7, #12
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fc93 	bl	8008e98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008576:	e31c      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800857c:	e319      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800857e:	4b1d      	ldr	r3, [pc, #116]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008582:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008586:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008588:	4b1a      	ldr	r3, [pc, #104]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b04      	cmp	r3, #4
 8008592:	d10c      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008596:	2b00      	cmp	r3, #0
 8008598:	d109      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800859a:	4b16      	ldr	r3, [pc, #88]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	08db      	lsrs	r3, r3, #3
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	4a14      	ldr	r2, [pc, #80]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80085a6:	fa22 f303 	lsr.w	r3, r2, r3
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ac:	e01e      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085ae:	4b11      	ldr	r3, [pc, #68]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ba:	d106      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80085bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085c2:	d102      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085c4:	4b0d      	ldr	r3, [pc, #52]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c8:	e010      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085ca:	4b0a      	ldr	r3, [pc, #40]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d6:	d106      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80085d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085de:	d102      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085e0:	4b07      	ldr	r3, [pc, #28]	@ (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085e4:	e002      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085ea:	e2e2      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085ec:	e2e1      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085ee:	4b05      	ldr	r3, [pc, #20]	@ (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f2:	e2de      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085f4:	58024400 	.word	0x58024400
 80085f8:	03d09000 	.word	0x03d09000
 80085fc:	003d0900 	.word	0x003d0900
 8008600:	017d7840 	.word	0x017d7840
 8008604:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800860c:	e2d1      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800860e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008612:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008616:	430b      	orrs	r3, r1
 8008618:	f040 809c 	bne.w	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800861c:	4b93      	ldr	r3, [pc, #588]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800861e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008620:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008624:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800862c:	d054      	beq.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800862e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008630:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008634:	f200 808b 	bhi.w	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800863e:	f000 8083 	beq.w	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008644:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008648:	f200 8081 	bhi.w	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800864c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008652:	d02f      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800865a:	d878      	bhi.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800865c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865e:	2b00      	cmp	r3, #0
 8008660:	d004      	beq.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008668:	d012      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800866a:	e070      	b.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800866c:	4b7f      	ldr	r3, [pc, #508]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008678:	d107      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800867a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fd5e 	bl	8009140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008688:	e293      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868e:	e290      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008690:	4b76      	ldr	r3, [pc, #472]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800869c:	d107      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869e:	f107 0318 	add.w	r3, r7, #24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 faa4 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	e281      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b2:	e27e      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086b4:	4b6d      	ldr	r3, [pc, #436]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086c0:	d107      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c2:	f107 030c 	add.w	r3, r7, #12
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fbe6 	bl	8008e98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d0:	e26f      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d6:	e26c      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086d8:	4b64      	ldr	r3, [pc, #400]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086e2:	4b62      	ldr	r3, [pc, #392]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d10c      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80086ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d109      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086f4:	4b5d      	ldr	r3, [pc, #372]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	08db      	lsrs	r3, r3, #3
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	4a5c      	ldr	r2, [pc, #368]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008700:	fa22 f303 	lsr.w	r3, r2, r3
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008706:	e01e      	b.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008708:	4b58      	ldr	r3, [pc, #352]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008714:	d106      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800871c:	d102      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800871e:	4b55      	ldr	r3, [pc, #340]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008722:	e010      	b.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008724:	4b51      	ldr	r3, [pc, #324]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800872c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008730:	d106      	bne.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008738:	d102      	bne.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800873a:	4b4f      	ldr	r3, [pc, #316]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800873c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800873e:	e002      	b.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008744:	e235      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008746:	e234      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008748:	4b4c      	ldr	r3, [pc, #304]	@ (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874c:	e231      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008752:	e22e      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008758:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800875c:	430b      	orrs	r3, r1
 800875e:	f040 808f 	bne.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008762:	4b42      	ldr	r3, [pc, #264]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008766:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800876a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800876c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008772:	d06b      	beq.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008776:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800877a:	d874      	bhi.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800877c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008782:	d056      	beq.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008786:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800878a:	d86c      	bhi.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008792:	d03b      	beq.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800879a:	d864      	bhi.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087a2:	d021      	beq.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80087a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087aa:	d85c      	bhi.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d004      	beq.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b8:	d004      	beq.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80087ba:	e054      	b.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80087bc:	f7fe fa20 	bl	8006c00 <HAL_RCC_GetPCLK1Freq>
 80087c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087c2:	e1f6      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087c4:	4b29      	ldr	r3, [pc, #164]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087d0:	d107      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d2:	f107 0318 	add.w	r3, r7, #24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fa0a 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e0:	e1e7      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e6:	e1e4      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087e8:	4b20      	ldr	r3, [pc, #128]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f4:	d107      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f6:	f107 030c 	add.w	r3, r7, #12
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fb4c 	bl	8008e98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008804:	e1d5      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008806:	2300      	movs	r3, #0
 8008808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880a:	e1d2      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800880c:	4b17      	ldr	r3, [pc, #92]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b04      	cmp	r3, #4
 8008816:	d109      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008818:	4b14      	ldr	r3, [pc, #80]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	08db      	lsrs	r3, r3, #3
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	4a13      	ldr	r2, [pc, #76]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008824:	fa22 f303 	lsr.w	r3, r2, r3
 8008828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800882a:	e1c2      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008830:	e1bf      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008832:	4b0e      	ldr	r3, [pc, #56]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800883a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800883e:	d102      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008840:	4b0c      	ldr	r3, [pc, #48]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008844:	e1b5      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800884a:	e1b2      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800884c:	4b07      	ldr	r3, [pc, #28]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008858:	d102      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800885a:	4b07      	ldr	r3, [pc, #28]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800885c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800885e:	e1a8      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008864:	e1a5      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800886a:	e1a2      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800886c:	58024400 	.word	0x58024400
 8008870:	03d09000 	.word	0x03d09000
 8008874:	003d0900 	.word	0x003d0900
 8008878:	017d7840 	.word	0x017d7840
 800887c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008884:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008888:	430b      	orrs	r3, r1
 800888a:	d173      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800888c:	4b9c      	ldr	r3, [pc, #624]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800888e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008894:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800889c:	d02f      	beq.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800889e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088a4:	d863      	bhi.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80088a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d004      	beq.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80088ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b2:	d012      	beq.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80088b4:	e05b      	b.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088b6:	4b92      	ldr	r3, [pc, #584]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088c2:	d107      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088c4:	f107 0318 	add.w	r3, r7, #24
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 f991 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d2:	e16e      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d8:	e16b      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088da:	4b89      	ldr	r3, [pc, #548]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088e6:	d107      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088e8:	f107 030c 	add.w	r3, r7, #12
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fad3 	bl	8008e98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f6:	e15c      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fc:	e159      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088fe:	4b80      	ldr	r3, [pc, #512]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008902:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008908:	4b7d      	ldr	r3, [pc, #500]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b04      	cmp	r3, #4
 8008912:	d10c      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008916:	2b00      	cmp	r3, #0
 8008918:	d109      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800891a:	4b79      	ldr	r3, [pc, #484]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	08db      	lsrs	r3, r3, #3
 8008920:	f003 0303 	and.w	r3, r3, #3
 8008924:	4a77      	ldr	r2, [pc, #476]	@ (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008926:	fa22 f303 	lsr.w	r3, r2, r3
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800892c:	e01e      	b.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800892e:	4b74      	ldr	r3, [pc, #464]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893a:	d106      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800893c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008942:	d102      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008944:	4b70      	ldr	r3, [pc, #448]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008948:	e010      	b.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800894a:	4b6d      	ldr	r3, [pc, #436]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008956:	d106      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800895a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800895e:	d102      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008960:	4b6a      	ldr	r3, [pc, #424]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008964:	e002      	b.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800896a:	e122      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800896c:	e121      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008972:	e11e      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008978:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800897c:	430b      	orrs	r3, r1
 800897e:	d133      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008980:	4b5f      	ldr	r3, [pc, #380]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008988:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800898a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898c:	2b00      	cmp	r3, #0
 800898e:	d004      	beq.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008996:	d012      	beq.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008998:	e023      	b.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800899a:	4b59      	ldr	r3, [pc, #356]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089a6:	d107      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 fbc7 	bl	8009140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089b6:	e0fc      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089bc:	e0f9      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089be:	4b50      	ldr	r3, [pc, #320]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089ca:	d107      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089cc:	f107 0318 	add.w	r3, r7, #24
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 f90d 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089da:	e0ea      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e0:	e0e7      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e6:	e0e4      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80089e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80089f0:	430b      	orrs	r3, r1
 80089f2:	f040 808d 	bne.w	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80089f6:	4b42      	ldr	r3, [pc, #264]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80089fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a06:	d06b      	beq.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a0e:	d874      	bhi.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a16:	d056      	beq.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a1e:	d86c      	bhi.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a26:	d03b      	beq.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a2e:	d864      	bhi.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a36:	d021      	beq.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a3e:	d85c      	bhi.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d004      	beq.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a4c:	d004      	beq.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008a4e:	e054      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a50:	f000 f8b8 	bl	8008bc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a56:	e0ac      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a58:	4b29      	ldr	r3, [pc, #164]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a64:	d107      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a66:	f107 0318 	add.w	r3, r7, #24
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f8c0 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a74:	e09d      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7a:	e09a      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a7c:	4b20      	ldr	r3, [pc, #128]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a88:	d107      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a8a:	f107 030c 	add.w	r3, r7, #12
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fa02 	bl	8008e98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a98:	e08b      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a9e:	e088      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008aa0:	4b17      	ldr	r3, [pc, #92]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d109      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aac:	4b14      	ldr	r3, [pc, #80]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	08db      	lsrs	r3, r3, #3
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	4a13      	ldr	r2, [pc, #76]	@ (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8008abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008abe:	e078      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac4:	e075      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ad2:	d102      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad8:	e06b      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ade:	e068      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ae0:	4b07      	ldr	r3, [pc, #28]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aec:	d102      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008aee:	4b07      	ldr	r3, [pc, #28]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008af2:	e05e      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af8:	e05b      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afe:	e058      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b00:	58024400 	.word	0x58024400
 8008b04:	03d09000 	.word	0x03d09000
 8008b08:	003d0900 	.word	0x003d0900
 8008b0c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b14:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	d148      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008b1c:	4b27      	ldr	r3, [pc, #156]	@ (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b24:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b2c:	d02a      	beq.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b34:	d838      	bhi.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d004      	beq.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b42:	d00d      	beq.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008b44:	e030      	b.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b46:	4b1d      	ldr	r3, [pc, #116]	@ (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b52:	d102      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008b54:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b58:	e02b      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5e:	e028      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b60:	4b16      	ldr	r3, [pc, #88]	@ (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b6c:	d107      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fae4 	bl	8009140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b7c:	e019      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b82:	e016      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b84:	4b0d      	ldr	r3, [pc, #52]	@ (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b90:	d107      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b92:	f107 0318 	add.w	r3, r7, #24
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 f82a 	bl	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba0:	e007      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba6:	e004      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bac:	e001      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3740      	adds	r7, #64	@ 0x40
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	58024400 	.word	0x58024400
 8008bc0:	017d7840 	.word	0x017d7840

08008bc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008bc8:	f7fd ffea 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	4b06      	ldr	r3, [pc, #24]	@ (8008be8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	091b      	lsrs	r3, r3, #4
 8008bd4:	f003 0307 	and.w	r3, r3, #7
 8008bd8:	4904      	ldr	r1, [pc, #16]	@ (8008bec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008bda:	5ccb      	ldrb	r3, [r1, r3]
 8008bdc:	f003 031f 	and.w	r3, r3, #31
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	58024400 	.word	0x58024400
 8008bec:	08010d20 	.word	0x08010d20

08008bf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b089      	sub	sp, #36	@ 0x24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bf8:	4ba1      	ldr	r3, [pc, #644]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfc:	f003 0303 	and.w	r3, r3, #3
 8008c00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c02:	4b9f      	ldr	r3, [pc, #636]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	0b1b      	lsrs	r3, r3, #12
 8008c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c12:	091b      	lsrs	r3, r3, #4
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c1a:	4b99      	ldr	r3, [pc, #612]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c1e:	08db      	lsrs	r3, r3, #3
 8008c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 8111 	beq.w	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	f000 8083 	beq.w	8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	f200 80a1 	bhi.w	8008d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d056      	beq.n	8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c5a:	e099      	b.n	8008d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c5c:	4b88      	ldr	r3, [pc, #544]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0320 	and.w	r3, r3, #32
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d02d      	beq.n	8008cc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c68:	4b85      	ldr	r3, [pc, #532]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	08db      	lsrs	r3, r3, #3
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	4a84      	ldr	r2, [pc, #528]	@ (8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c74:	fa22 f303 	lsr.w	r3, r2, r3
 8008c78:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	ee07 3a90 	vmov	s15, r3
 8008c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c92:	4b7b      	ldr	r3, [pc, #492]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ca6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cc2:	e087      	b.n	8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cde:	ee07 3a90 	vmov	s15, r3
 8008ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d06:	e065      	b.n	8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1a:	4b59      	ldr	r3, [pc, #356]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d22:	ee07 3a90 	vmov	s15, r3
 8008d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d4a:	e043      	b.n	8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d5e:	4b48      	ldr	r3, [pc, #288]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d8e:	e021      	b.n	8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da2:	4b37      	ldr	r3, [pc, #220]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008db6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd8:	0a5b      	lsrs	r3, r3, #9
 8008dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dfa:	ee17 2a90 	vmov	r2, s15
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e02:	4b1f      	ldr	r3, [pc, #124]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e06:	0c1b      	lsrs	r3, r3, #16
 8008e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e0c:	ee07 3a90 	vmov	s15, r3
 8008e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e28:	ee17 2a90 	vmov	r2, s15
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e30:	4b13      	ldr	r3, [pc, #76]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e34:	0e1b      	lsrs	r3, r3, #24
 8008e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e56:	ee17 2a90 	vmov	r2, s15
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e5e:	e008      	b.n	8008e72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	609a      	str	r2, [r3, #8]
}
 8008e72:	bf00      	nop
 8008e74:	3724      	adds	r7, #36	@ 0x24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	58024400 	.word	0x58024400
 8008e84:	03d09000 	.word	0x03d09000
 8008e88:	46000000 	.word	0x46000000
 8008e8c:	4c742400 	.word	0x4c742400
 8008e90:	4a742400 	.word	0x4a742400
 8008e94:	4bbebc20 	.word	0x4bbebc20

08008e98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b089      	sub	sp, #36	@ 0x24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ea0:	4ba1      	ldr	r3, [pc, #644]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea4:	f003 0303 	and.w	r3, r3, #3
 8008ea8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008eaa:	4b9f      	ldr	r3, [pc, #636]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eae:	0d1b      	lsrs	r3, r3, #20
 8008eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008eb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008eb6:	4b9c      	ldr	r3, [pc, #624]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ec2:	4b99      	ldr	r3, [pc, #612]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec6:	08db      	lsrs	r3, r3, #3
 8008ec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 8111 	beq.w	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	f000 8083 	beq.w	8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	f200 80a1 	bhi.w	8009038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d056      	beq.n	8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f02:	e099      	b.n	8009038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f04:	4b88      	ldr	r3, [pc, #544]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d02d      	beq.n	8008f6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f10:	4b85      	ldr	r3, [pc, #532]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	08db      	lsrs	r3, r3, #3
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	4a84      	ldr	r2, [pc, #528]	@ (800912c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	ee07 3a90 	vmov	s15, r3
 8008f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f3a:	4b7b      	ldr	r3, [pc, #492]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f6a:	e087      	b.n	800907c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f86:	ee07 3a90 	vmov	s15, r3
 8008f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fae:	e065      	b.n	800907c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	ee07 3a90 	vmov	s15, r3
 8008fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc2:	4b59      	ldr	r3, [pc, #356]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fca:	ee07 3a90 	vmov	s15, r3
 8008fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ff2:	e043      	b.n	800907c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800913c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009006:	4b48      	ldr	r3, [pc, #288]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900e:	ee07 3a90 	vmov	s15, r3
 8009012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009016:	ed97 6a03 	vldr	s12, [r7, #12]
 800901a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800901e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800902e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009036:	e021      	b.n	800907c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009042:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904a:	4b37      	ldr	r3, [pc, #220]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800904c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009052:	ee07 3a90 	vmov	s15, r3
 8009056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905a:	ed97 6a03 	vldr	s12, [r7, #12]
 800905e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800906e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800907a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800907c:	4b2a      	ldr	r3, [pc, #168]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800907e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009080:	0a5b      	lsrs	r3, r3, #9
 8009082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009096:	edd7 6a07 	vldr	s13, [r7, #28]
 800909a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800909e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090a2:	ee17 2a90 	vmov	r2, s15
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80090aa:	4b1f      	ldr	r3, [pc, #124]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ae:	0c1b      	lsrs	r3, r3, #16
 80090b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b4:	ee07 3a90 	vmov	s15, r3
 80090b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80090c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090d0:	ee17 2a90 	vmov	r2, s15
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80090d8:	4b13      	ldr	r3, [pc, #76]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090dc:	0e1b      	lsrs	r3, r3, #24
 80090de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090fe:	ee17 2a90 	vmov	r2, s15
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009106:	e008      	b.n	800911a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	609a      	str	r2, [r3, #8]
}
 800911a:	bf00      	nop
 800911c:	3724      	adds	r7, #36	@ 0x24
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	58024400 	.word	0x58024400
 800912c:	03d09000 	.word	0x03d09000
 8009130:	46000000 	.word	0x46000000
 8009134:	4c742400 	.word	0x4c742400
 8009138:	4a742400 	.word	0x4a742400
 800913c:	4bbebc20 	.word	0x4bbebc20

08009140 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009140:	b480      	push	{r7}
 8009142:	b089      	sub	sp, #36	@ 0x24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009148:	4ba0      	ldr	r3, [pc, #640]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800914a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914c:	f003 0303 	and.w	r3, r3, #3
 8009150:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009152:	4b9e      	ldr	r3, [pc, #632]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009156:	091b      	lsrs	r3, r3, #4
 8009158:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800915c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800915e:	4b9b      	ldr	r3, [pc, #620]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009168:	4b98      	ldr	r3, [pc, #608]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800916a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800916c:	08db      	lsrs	r3, r3, #3
 800916e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	fb02 f303 	mul.w	r3, r2, r3
 8009178:	ee07 3a90 	vmov	s15, r3
 800917c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009180:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 8111 	beq.w	80093ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	2b02      	cmp	r3, #2
 8009190:	f000 8083 	beq.w	800929a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	2b02      	cmp	r3, #2
 8009198:	f200 80a1 	bhi.w	80092de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d056      	beq.n	8009256 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80091a8:	e099      	b.n	80092de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091aa:	4b88      	ldr	r3, [pc, #544]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d02d      	beq.n	8009212 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091b6:	4b85      	ldr	r3, [pc, #532]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	08db      	lsrs	r3, r3, #3
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	4a83      	ldr	r2, [pc, #524]	@ (80093d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80091c2:	fa22 f303 	lsr.w	r3, r2, r3
 80091c6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	ee07 3a90 	vmov	s15, r3
 80091d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091e0:	4b7a      	ldr	r3, [pc, #488]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e8:	ee07 3a90 	vmov	s15, r3
 80091ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80091f4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80093d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009200:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800920c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009210:	e087      	b.n	8009322 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	ee07 3a90 	vmov	s15, r3
 8009218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80093d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009224:	4b69      	ldr	r3, [pc, #420]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922c:	ee07 3a90 	vmov	s15, r3
 8009230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009234:	ed97 6a03 	vldr	s12, [r7, #12]
 8009238:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80093d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800923c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009244:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800924c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009254:	e065      	b.n	8009322 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	ee07 3a90 	vmov	s15, r3
 800925c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009260:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80093dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009268:	4b58      	ldr	r3, [pc, #352]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800926a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800926c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009270:	ee07 3a90 	vmov	s15, r3
 8009274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009278:	ed97 6a03 	vldr	s12, [r7, #12]
 800927c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80093d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800928c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009298:	e043      	b.n	8009322 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80093e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80092a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ac:	4b47      	ldr	r3, [pc, #284]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b4:	ee07 3a90 	vmov	s15, r3
 80092b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80093d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092dc:	e021      	b.n	8009322 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80093d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f0:	4b36      	ldr	r3, [pc, #216]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009300:	ed97 6a03 	vldr	s12, [r7, #12]
 8009304:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80093d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800930c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009310:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800931c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009320:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009322:	4b2a      	ldr	r3, [pc, #168]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009326:	0a5b      	lsrs	r3, r3, #9
 8009328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800932c:	ee07 3a90 	vmov	s15, r3
 8009330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009334:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009338:	ee37 7a87 	vadd.f32	s14, s15, s14
 800933c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009348:	ee17 2a90 	vmov	r2, s15
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009350:	4b1e      	ldr	r3, [pc, #120]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009354:	0c1b      	lsrs	r3, r3, #16
 8009356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800936a:	edd7 6a07 	vldr	s13, [r7, #28]
 800936e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009376:	ee17 2a90 	vmov	r2, s15
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800937e:	4b13      	ldr	r3, [pc, #76]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009382:	0e1b      	lsrs	r3, r3, #24
 8009384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009394:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009398:	edd7 6a07 	vldr	s13, [r7, #28]
 800939c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093a4:	ee17 2a90 	vmov	r2, s15
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80093ac:	e008      	b.n	80093c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	609a      	str	r2, [r3, #8]
}
 80093c0:	bf00      	nop
 80093c2:	3724      	adds	r7, #36	@ 0x24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	58024400 	.word	0x58024400
 80093d0:	03d09000 	.word	0x03d09000
 80093d4:	46000000 	.word	0x46000000
 80093d8:	4c742400 	.word	0x4c742400
 80093dc:	4a742400 	.word	0x4a742400
 80093e0:	4bbebc20 	.word	0x4bbebc20

080093e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093f2:	4b53      	ldr	r3, [pc, #332]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80093f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d101      	bne.n	8009402 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e099      	b.n	8009536 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009402:	4b4f      	ldr	r3, [pc, #316]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a4e      	ldr	r2, [pc, #312]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 8009408:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800940c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800940e:	f7f8 fa33 	bl	8001878 <HAL_GetTick>
 8009412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009414:	e008      	b.n	8009428 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009416:	f7f8 fa2f 	bl	8001878 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	2b02      	cmp	r3, #2
 8009422:	d901      	bls.n	8009428 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e086      	b.n	8009536 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009428:	4b45      	ldr	r3, [pc, #276]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f0      	bne.n	8009416 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009434:	4b42      	ldr	r3, [pc, #264]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 8009436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009438:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	031b      	lsls	r3, r3, #12
 8009442:	493f      	ldr	r1, [pc, #252]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 8009444:	4313      	orrs	r3, r2
 8009446:	628b      	str	r3, [r1, #40]	@ 0x28
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	3b01      	subs	r3, #1
 800944e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	3b01      	subs	r3, #1
 8009458:	025b      	lsls	r3, r3, #9
 800945a:	b29b      	uxth	r3, r3
 800945c:	431a      	orrs	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	3b01      	subs	r3, #1
 8009464:	041b      	lsls	r3, r3, #16
 8009466:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800946a:	431a      	orrs	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	3b01      	subs	r3, #1
 8009472:	061b      	lsls	r3, r3, #24
 8009474:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009478:	4931      	ldr	r1, [pc, #196]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 800947a:	4313      	orrs	r3, r2
 800947c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800947e:	4b30      	ldr	r3, [pc, #192]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 8009480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009482:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	492d      	ldr	r1, [pc, #180]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 800948c:	4313      	orrs	r3, r2
 800948e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009490:	4b2b      	ldr	r3, [pc, #172]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 8009492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009494:	f023 0220 	bic.w	r2, r3, #32
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	4928      	ldr	r1, [pc, #160]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80094a2:	4b27      	ldr	r3, [pc, #156]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a6:	4a26      	ldr	r2, [pc, #152]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094a8:	f023 0310 	bic.w	r3, r3, #16
 80094ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80094ae:	4b24      	ldr	r3, [pc, #144]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094b2:	4b24      	ldr	r3, [pc, #144]	@ (8009544 <RCCEx_PLL2_Config+0x160>)
 80094b4:	4013      	ands	r3, r2
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	69d2      	ldr	r2, [r2, #28]
 80094ba:	00d2      	lsls	r2, r2, #3
 80094bc:	4920      	ldr	r1, [pc, #128]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80094c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094c8:	f043 0310 	orr.w	r3, r3, #16
 80094cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d106      	bne.n	80094e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80094d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d8:	4a19      	ldr	r2, [pc, #100]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094e0:	e00f      	b.n	8009502 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d106      	bne.n	80094f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80094e8:	4b15      	ldr	r3, [pc, #84]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	4a14      	ldr	r2, [pc, #80]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094f4:	e005      	b.n	8009502 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094f6:	4b12      	ldr	r3, [pc, #72]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fa:	4a11      	ldr	r2, [pc, #68]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 80094fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009500:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009502:	4b0f      	ldr	r3, [pc, #60]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a0e      	ldr	r2, [pc, #56]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 8009508:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800950c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800950e:	f7f8 f9b3 	bl	8001878 <HAL_GetTick>
 8009512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009514:	e008      	b.n	8009528 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009516:	f7f8 f9af 	bl	8001878 <HAL_GetTick>
 800951a:	4602      	mov	r2, r0
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	2b02      	cmp	r3, #2
 8009522:	d901      	bls.n	8009528 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e006      	b.n	8009536 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009528:	4b05      	ldr	r3, [pc, #20]	@ (8009540 <RCCEx_PLL2_Config+0x15c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0f0      	beq.n	8009516 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	58024400 	.word	0x58024400
 8009544:	ffff0007 	.word	0xffff0007

08009548 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009556:	4b53      	ldr	r3, [pc, #332]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955a:	f003 0303 	and.w	r3, r3, #3
 800955e:	2b03      	cmp	r3, #3
 8009560:	d101      	bne.n	8009566 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e099      	b.n	800969a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009566:	4b4f      	ldr	r3, [pc, #316]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a4e      	ldr	r2, [pc, #312]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800956c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009572:	f7f8 f981 	bl	8001878 <HAL_GetTick>
 8009576:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009578:	e008      	b.n	800958c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800957a:	f7f8 f97d 	bl	8001878 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d901      	bls.n	800958c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e086      	b.n	800969a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800958c:	4b45      	ldr	r3, [pc, #276]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1f0      	bne.n	800957a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009598:	4b42      	ldr	r3, [pc, #264]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800959a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	051b      	lsls	r3, r3, #20
 80095a6:	493f      	ldr	r1, [pc, #252]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 80095a8:	4313      	orrs	r3, r2
 80095aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	025b      	lsls	r3, r3, #9
 80095be:	b29b      	uxth	r3, r3
 80095c0:	431a      	orrs	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	041b      	lsls	r3, r3, #16
 80095ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095ce:	431a      	orrs	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	061b      	lsls	r3, r3, #24
 80095d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095dc:	4931      	ldr	r1, [pc, #196]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80095e2:	4b30      	ldr	r3, [pc, #192]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 80095e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	492d      	ldr	r1, [pc, #180]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095f4:	4b2b      	ldr	r3, [pc, #172]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 80095f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	4928      	ldr	r1, [pc, #160]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009602:	4313      	orrs	r3, r2
 8009604:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009606:	4b27      	ldr	r3, [pc, #156]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960a:	4a26      	ldr	r2, [pc, #152]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800960c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009610:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009612:	4b24      	ldr	r3, [pc, #144]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009616:	4b24      	ldr	r3, [pc, #144]	@ (80096a8 <RCCEx_PLL3_Config+0x160>)
 8009618:	4013      	ands	r3, r2
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	69d2      	ldr	r2, [r2, #28]
 800961e:	00d2      	lsls	r2, r2, #3
 8009620:	4920      	ldr	r1, [pc, #128]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009622:	4313      	orrs	r3, r2
 8009624:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009626:	4b1f      	ldr	r3, [pc, #124]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962a:	4a1e      	ldr	r2, [pc, #120]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800962c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009630:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009638:	4b1a      	ldr	r3, [pc, #104]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800963a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963c:	4a19      	ldr	r2, [pc, #100]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800963e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009644:	e00f      	b.n	8009666 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d106      	bne.n	800965a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800964c:	4b15      	ldr	r3, [pc, #84]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800964e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009650:	4a14      	ldr	r2, [pc, #80]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009652:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009656:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009658:	e005      	b.n	8009666 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800965a:	4b12      	ldr	r3, [pc, #72]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800965c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965e:	4a11      	ldr	r2, [pc, #68]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009660:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009664:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009666:	4b0f      	ldr	r3, [pc, #60]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a0e      	ldr	r2, [pc, #56]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800966c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009672:	f7f8 f901 	bl	8001878 <HAL_GetTick>
 8009676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009678:	e008      	b.n	800968c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800967a:	f7f8 f8fd 	bl	8001878 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b02      	cmp	r3, #2
 8009686:	d901      	bls.n	800968c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009688:	2303      	movs	r3, #3
 800968a:	e006      	b.n	800969a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800968c:	4b05      	ldr	r3, [pc, #20]	@ (80096a4 <RCCEx_PLL3_Config+0x15c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d0f0      	beq.n	800967a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	58024400 	.word	0x58024400
 80096a8:	ffff0007 	.word	0xffff0007

080096ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e10f      	b.n	80098de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a87      	ldr	r2, [pc, #540]	@ (80098e8 <HAL_SPI_Init+0x23c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d00f      	beq.n	80096ee <HAL_SPI_Init+0x42>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a86      	ldr	r2, [pc, #536]	@ (80098ec <HAL_SPI_Init+0x240>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00a      	beq.n	80096ee <HAL_SPI_Init+0x42>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a84      	ldr	r2, [pc, #528]	@ (80098f0 <HAL_SPI_Init+0x244>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d005      	beq.n	80096ee <HAL_SPI_Init+0x42>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	2b0f      	cmp	r3, #15
 80096e8:	d901      	bls.n	80096ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e0f7      	b.n	80098de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fbca 	bl	8009e88 <SPI_GetPacketSize>
 80096f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a7b      	ldr	r2, [pc, #492]	@ (80098e8 <HAL_SPI_Init+0x23c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00c      	beq.n	800971a <HAL_SPI_Init+0x6e>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a79      	ldr	r2, [pc, #484]	@ (80098ec <HAL_SPI_Init+0x240>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d007      	beq.n	800971a <HAL_SPI_Init+0x6e>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a78      	ldr	r2, [pc, #480]	@ (80098f0 <HAL_SPI_Init+0x244>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d002      	beq.n	800971a <HAL_SPI_Init+0x6e>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b08      	cmp	r3, #8
 8009718:	d811      	bhi.n	800973e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800971e:	4a72      	ldr	r2, [pc, #456]	@ (80098e8 <HAL_SPI_Init+0x23c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d009      	beq.n	8009738 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a70      	ldr	r2, [pc, #448]	@ (80098ec <HAL_SPI_Init+0x240>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d004      	beq.n	8009738 <HAL_SPI_Init+0x8c>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a6f      	ldr	r2, [pc, #444]	@ (80098f0 <HAL_SPI_Init+0x244>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d104      	bne.n	8009742 <HAL_SPI_Init+0x96>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2b10      	cmp	r3, #16
 800973c:	d901      	bls.n	8009742 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e0cd      	b.n	80098de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7f7 fc56 	bl	8001008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2202      	movs	r2, #2
 8009760:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 0201 	bic.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800977e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009788:	d119      	bne.n	80097be <HAL_SPI_Init+0x112>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009792:	d103      	bne.n	800979c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009798:	2b00      	cmp	r3, #0
 800979a:	d008      	beq.n	80097ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10c      	bne.n	80097be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80097a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ac:	d107      	bne.n	80097be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00f      	beq.n	80097ea <HAL_SPI_Init+0x13e>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	2b06      	cmp	r3, #6
 80097d0:	d90b      	bls.n	80097ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	e007      	b.n	80097fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	69da      	ldr	r2, [r3, #28]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009802:	431a      	orrs	r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	431a      	orrs	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800980c:	ea42 0103 	orr.w	r1, r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	68da      	ldr	r2, [r3, #12]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	431a      	orrs	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	431a      	orrs	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800984e:	431a      	orrs	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	431a      	orrs	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800985a:	ea42 0103 	orr.w	r1, r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d113      	bne.n	800989a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009884:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009898:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f022 0201 	bic.w	r2, r2, #1
 80098a8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	40013000 	.word	0x40013000
 80098ec:	40003800 	.word	0x40003800
 80098f0:	40003c00 	.word	0x40003c00

080098f4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08a      	sub	sp, #40	@ 0x28
 80098f8:	af02      	add	r7, sp, #8
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3320      	adds	r3, #32
 800990a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009916:	2b01      	cmp	r3, #1
 8009918:	d101      	bne.n	800991e <HAL_SPI_Transmit+0x2a>
 800991a:	2302      	movs	r3, #2
 800991c:	e1e1      	b.n	8009ce2 <HAL_SPI_Transmit+0x3ee>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009926:	f7f7 ffa7 	bl	8001878 <HAL_GetTick>
 800992a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b01      	cmp	r3, #1
 8009936:	d007      	beq.n	8009948 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009938:	2302      	movs	r3, #2
 800993a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8009944:	7efb      	ldrb	r3, [r7, #27]
 8009946:	e1cc      	b.n	8009ce2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <HAL_SPI_Transmit+0x60>
 800994e:	88fb      	ldrh	r3, [r7, #6]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d107      	bne.n	8009964 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8009960:	7efb      	ldrb	r3, [r7, #27]
 8009962:	e1be      	b.n	8009ce2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2203      	movs	r2, #3
 8009968:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	88fa      	ldrh	r2, [r7, #6]
 800997e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	88fa      	ldrh	r2, [r7, #6]
 8009986:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80099b4:	d108      	bne.n	80099c8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099c4:	601a      	str	r2, [r3, #0]
 80099c6:	e009      	b.n	80099dc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80099da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	4b96      	ldr	r3, [pc, #600]	@ (8009c3c <HAL_SPI_Transmit+0x348>)
 80099e4:	4013      	ands	r3, r2
 80099e6:	88f9      	ldrh	r1, [r7, #6]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	6812      	ldr	r2, [r2, #0]
 80099ec:	430b      	orrs	r3, r1
 80099ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0201 	orr.w	r2, r2, #1
 80099fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a08:	d107      	bne.n	8009a1a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	2b0f      	cmp	r3, #15
 8009a20:	d947      	bls.n	8009ab2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a22:	e03f      	b.n	8009aa4 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	f003 0302 	and.w	r3, r3, #2
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d114      	bne.n	8009a5c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6812      	ldr	r2, [r2, #0]
 8009a3c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a42:	1d1a      	adds	r2, r3, #4
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	3b01      	subs	r3, #1
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009a5a:	e023      	b.n	8009aa4 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a5c:	f7f7 ff0c 	bl	8001878 <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d803      	bhi.n	8009a74 <HAL_SPI_Transmit+0x180>
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a72:	d102      	bne.n	8009a7a <HAL_SPI_Transmit+0x186>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d114      	bne.n	8009aa4 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f000 f936 	bl	8009cec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e11e      	b.n	8009ce2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1b9      	bne.n	8009a24 <HAL_SPI_Transmit+0x130>
 8009ab0:	e0f1      	b.n	8009c96 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	2b07      	cmp	r3, #7
 8009ab8:	f240 80e6 	bls.w	8009c88 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009abc:	e05d      	b.n	8009b7a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d132      	bne.n	8009b32 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d918      	bls.n	8009b0a <HAL_SPI_Transmit+0x216>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d014      	beq.n	8009b0a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009af0:	1d1a      	adds	r2, r3, #4
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b02      	subs	r3, #2
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b08:	e037      	b.n	8009b7a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b0e:	881a      	ldrh	r2, [r3, #0]
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b18:	1c9a      	adds	r2, r3, #2
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3b01      	subs	r3, #1
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b30:	e023      	b.n	8009b7a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b32:	f7f7 fea1 	bl	8001878 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d803      	bhi.n	8009b4a <HAL_SPI_Transmit+0x256>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b48:	d102      	bne.n	8009b50 <HAL_SPI_Transmit+0x25c>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d114      	bne.n	8009b7a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 f8cb 	bl	8009cec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e0b3      	b.n	8009ce2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d19b      	bne.n	8009abe <HAL_SPI_Transmit+0x1ca>
 8009b86:	e086      	b.n	8009c96 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	f003 0302 	and.w	r3, r3, #2
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d154      	bne.n	8009c40 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d918      	bls.n	8009bd4 <HAL_SPI_Transmit+0x2e0>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ba6:	2b40      	cmp	r3, #64	@ 0x40
 8009ba8:	d914      	bls.n	8009bd4 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6812      	ldr	r2, [r2, #0]
 8009bb4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bba:	1d1a      	adds	r2, r3, #4
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	3b04      	subs	r3, #4
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009bd2:	e059      	b.n	8009c88 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d917      	bls.n	8009c10 <HAL_SPI_Transmit+0x31c>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d013      	beq.n	8009c10 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bec:	881a      	ldrh	r2, [r3, #0]
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bf6:	1c9a      	adds	r2, r3, #2
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	3b02      	subs	r3, #2
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c0e:	e03b      	b.n	8009c88 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3320      	adds	r3, #32
 8009c1a:	7812      	ldrb	r2, [r2, #0]
 8009c1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c22:	1c5a      	adds	r2, r3, #1
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	3b01      	subs	r3, #1
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c3a:	e025      	b.n	8009c88 <HAL_SPI_Transmit+0x394>
 8009c3c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c40:	f7f7 fe1a 	bl	8001878 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d803      	bhi.n	8009c58 <HAL_SPI_Transmit+0x364>
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c56:	d102      	bne.n	8009c5e <HAL_SPI_Transmit+0x36a>
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d114      	bne.n	8009c88 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f844 	bl	8009cec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e02c      	b.n	8009ce2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f47f af79 	bne.w	8009b88 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2108      	movs	r1, #8
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 f8c3 	bl	8009e2c <SPI_WaitOnFlagUntilTimeout>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d007      	beq.n	8009cbc <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cb2:	f043 0220 	orr.w	r2, r3, #32
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 f815 	bl	8009cec <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e000      	b.n	8009ce2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8009ce0:	7efb      	ldrb	r3, [r7, #27]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop

08009cec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699a      	ldr	r2, [r3, #24]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f042 0208 	orr.w	r2, r2, #8
 8009d0a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	699a      	ldr	r2, [r3, #24]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f042 0210 	orr.w	r2, r2, #16
 8009d1a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0201 	bic.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6919      	ldr	r1, [r3, #16]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	4b3c      	ldr	r3, [pc, #240]	@ (8009e28 <SPI_CloseTransfer+0x13c>)
 8009d38:	400b      	ands	r3, r1
 8009d3a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689a      	ldr	r2, [r3, #8]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d4a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b04      	cmp	r3, #4
 8009d56:	d014      	beq.n	8009d82 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f003 0320 	and.w	r3, r3, #32
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00f      	beq.n	8009d82 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	699a      	ldr	r2, [r3, #24]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f042 0220 	orr.w	r2, r2, #32
 8009d80:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d014      	beq.n	8009db8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00f      	beq.n	8009db8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d9e:	f043 0204 	orr.w	r2, r3, #4
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	699a      	ldr	r2, [r3, #24]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009db6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00f      	beq.n	8009de2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dc8:	f043 0201 	orr.w	r2, r3, #1
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	699a      	ldr	r2, [r3, #24]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009de0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00f      	beq.n	8009e0c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009df2:	f043 0208 	orr.w	r2, r3, #8
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e0a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009e1c:	bf00      	nop
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	fffffc90 	.word	0xfffffc90

08009e2c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	603b      	str	r3, [r7, #0]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e3c:	e010      	b.n	8009e60 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e3e:	f7f7 fd1b 	bl	8001878 <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d803      	bhi.n	8009e56 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e54:	d102      	bne.n	8009e5c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e00f      	b.n	8009e80 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	695a      	ldr	r2, [r3, #20]
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	4013      	ands	r3, r2
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	bf0c      	ite	eq
 8009e70:	2301      	moveq	r3, #1
 8009e72:	2300      	movne	r3, #0
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	461a      	mov	r2, r3
 8009e78:	79fb      	ldrb	r3, [r7, #7]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d0df      	beq.n	8009e3e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e94:	095b      	lsrs	r3, r3, #5
 8009e96:	3301      	adds	r3, #1
 8009e98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	3307      	adds	r3, #7
 8009ea6:	08db      	lsrs	r3, r3, #3
 8009ea8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	fb02 f303 	mul.w	r3, r2, r3
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d101      	bne.n	8009ed0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e049      	b.n	8009f64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7f7 fbb3 	bl	8001650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2202      	movs	r2, #2
 8009eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f000 fd71 	bl	800a9e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d001      	beq.n	8009f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e054      	b.n	800a02e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2202      	movs	r2, #2
 8009f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68da      	ldr	r2, [r3, #12]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f042 0201 	orr.w	r2, r2, #1
 8009f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a26      	ldr	r2, [pc, #152]	@ (800a03c <HAL_TIM_Base_Start_IT+0xd0>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d022      	beq.n	8009fec <HAL_TIM_Base_Start_IT+0x80>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fae:	d01d      	beq.n	8009fec <HAL_TIM_Base_Start_IT+0x80>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a22      	ldr	r2, [pc, #136]	@ (800a040 <HAL_TIM_Base_Start_IT+0xd4>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d018      	beq.n	8009fec <HAL_TIM_Base_Start_IT+0x80>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a21      	ldr	r2, [pc, #132]	@ (800a044 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d013      	beq.n	8009fec <HAL_TIM_Base_Start_IT+0x80>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a1f      	ldr	r2, [pc, #124]	@ (800a048 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d00e      	beq.n	8009fec <HAL_TIM_Base_Start_IT+0x80>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800a04c <HAL_TIM_Base_Start_IT+0xe0>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d009      	beq.n	8009fec <HAL_TIM_Base_Start_IT+0x80>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a1c      	ldr	r2, [pc, #112]	@ (800a050 <HAL_TIM_Base_Start_IT+0xe4>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d004      	beq.n	8009fec <HAL_TIM_Base_Start_IT+0x80>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a1b      	ldr	r2, [pc, #108]	@ (800a054 <HAL_TIM_Base_Start_IT+0xe8>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d115      	bne.n	800a018 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689a      	ldr	r2, [r3, #8]
 8009ff2:	4b19      	ldr	r3, [pc, #100]	@ (800a058 <HAL_TIM_Base_Start_IT+0xec>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b06      	cmp	r3, #6
 8009ffc:	d015      	beq.n	800a02a <HAL_TIM_Base_Start_IT+0xbe>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a004:	d011      	beq.n	800a02a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f042 0201 	orr.w	r2, r2, #1
 800a014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a016:	e008      	b.n	800a02a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f042 0201 	orr.w	r2, r2, #1
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	e000      	b.n	800a02c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a02a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	40010000 	.word	0x40010000
 800a040:	40000400 	.word	0x40000400
 800a044:	40000800 	.word	0x40000800
 800a048:	40000c00 	.word	0x40000c00
 800a04c:	40010400 	.word	0x40010400
 800a050:	40001800 	.word	0x40001800
 800a054:	40014000 	.word	0x40014000
 800a058:	00010007 	.word	0x00010007

0800a05c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e049      	b.n	800a102 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d106      	bne.n	800a088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f841 	bl	800a10a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3304      	adds	r3, #4
 800a098:	4619      	mov	r1, r3
 800a09a:	4610      	mov	r0, r2
 800a09c:	f000 fca2 	bl	800a9e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a112:	bf00      	nop
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
	...

0800a120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d109      	bne.n	800a144 <HAL_TIM_PWM_Start+0x24>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b01      	cmp	r3, #1
 800a13a:	bf14      	ite	ne
 800a13c:	2301      	movne	r3, #1
 800a13e:	2300      	moveq	r3, #0
 800a140:	b2db      	uxtb	r3, r3
 800a142:	e03c      	b.n	800a1be <HAL_TIM_PWM_Start+0x9e>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2b04      	cmp	r3, #4
 800a148:	d109      	bne.n	800a15e <HAL_TIM_PWM_Start+0x3e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b01      	cmp	r3, #1
 800a154:	bf14      	ite	ne
 800a156:	2301      	movne	r3, #1
 800a158:	2300      	moveq	r3, #0
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	e02f      	b.n	800a1be <HAL_TIM_PWM_Start+0x9e>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b08      	cmp	r3, #8
 800a162:	d109      	bne.n	800a178 <HAL_TIM_PWM_Start+0x58>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	bf14      	ite	ne
 800a170:	2301      	movne	r3, #1
 800a172:	2300      	moveq	r3, #0
 800a174:	b2db      	uxtb	r3, r3
 800a176:	e022      	b.n	800a1be <HAL_TIM_PWM_Start+0x9e>
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b0c      	cmp	r3, #12
 800a17c:	d109      	bne.n	800a192 <HAL_TIM_PWM_Start+0x72>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b01      	cmp	r3, #1
 800a188:	bf14      	ite	ne
 800a18a:	2301      	movne	r3, #1
 800a18c:	2300      	moveq	r3, #0
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	e015      	b.n	800a1be <HAL_TIM_PWM_Start+0x9e>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b10      	cmp	r3, #16
 800a196:	d109      	bne.n	800a1ac <HAL_TIM_PWM_Start+0x8c>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	bf14      	ite	ne
 800a1a4:	2301      	movne	r3, #1
 800a1a6:	2300      	moveq	r3, #0
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	e008      	b.n	800a1be <HAL_TIM_PWM_Start+0x9e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	bf14      	ite	ne
 800a1b8:	2301      	movne	r3, #1
 800a1ba:	2300      	moveq	r3, #0
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e0a1      	b.n	800a30a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <HAL_TIM_PWM_Start+0xb6>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1d4:	e023      	b.n	800a21e <HAL_TIM_PWM_Start+0xfe>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b04      	cmp	r3, #4
 800a1da:	d104      	bne.n	800a1e6 <HAL_TIM_PWM_Start+0xc6>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1e4:	e01b      	b.n	800a21e <HAL_TIM_PWM_Start+0xfe>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b08      	cmp	r3, #8
 800a1ea:	d104      	bne.n	800a1f6 <HAL_TIM_PWM_Start+0xd6>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1f4:	e013      	b.n	800a21e <HAL_TIM_PWM_Start+0xfe>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b0c      	cmp	r3, #12
 800a1fa:	d104      	bne.n	800a206 <HAL_TIM_PWM_Start+0xe6>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2202      	movs	r2, #2
 800a200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a204:	e00b      	b.n	800a21e <HAL_TIM_PWM_Start+0xfe>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b10      	cmp	r3, #16
 800a20a:	d104      	bne.n	800a216 <HAL_TIM_PWM_Start+0xf6>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a214:	e003      	b.n	800a21e <HAL_TIM_PWM_Start+0xfe>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2202      	movs	r2, #2
 800a21a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2201      	movs	r2, #1
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	4618      	mov	r0, r3
 800a228:	f000 ffea 	bl	800b200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a38      	ldr	r2, [pc, #224]	@ (800a314 <HAL_TIM_PWM_Start+0x1f4>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d013      	beq.n	800a25e <HAL_TIM_PWM_Start+0x13e>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a37      	ldr	r2, [pc, #220]	@ (800a318 <HAL_TIM_PWM_Start+0x1f8>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d00e      	beq.n	800a25e <HAL_TIM_PWM_Start+0x13e>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a35      	ldr	r2, [pc, #212]	@ (800a31c <HAL_TIM_PWM_Start+0x1fc>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d009      	beq.n	800a25e <HAL_TIM_PWM_Start+0x13e>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a34      	ldr	r2, [pc, #208]	@ (800a320 <HAL_TIM_PWM_Start+0x200>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d004      	beq.n	800a25e <HAL_TIM_PWM_Start+0x13e>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a32      	ldr	r2, [pc, #200]	@ (800a324 <HAL_TIM_PWM_Start+0x204>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d101      	bne.n	800a262 <HAL_TIM_PWM_Start+0x142>
 800a25e:	2301      	movs	r3, #1
 800a260:	e000      	b.n	800a264 <HAL_TIM_PWM_Start+0x144>
 800a262:	2300      	movs	r3, #0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d007      	beq.n	800a278 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a276:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a25      	ldr	r2, [pc, #148]	@ (800a314 <HAL_TIM_PWM_Start+0x1f4>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d022      	beq.n	800a2c8 <HAL_TIM_PWM_Start+0x1a8>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a28a:	d01d      	beq.n	800a2c8 <HAL_TIM_PWM_Start+0x1a8>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a25      	ldr	r2, [pc, #148]	@ (800a328 <HAL_TIM_PWM_Start+0x208>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d018      	beq.n	800a2c8 <HAL_TIM_PWM_Start+0x1a8>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a24      	ldr	r2, [pc, #144]	@ (800a32c <HAL_TIM_PWM_Start+0x20c>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d013      	beq.n	800a2c8 <HAL_TIM_PWM_Start+0x1a8>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a22      	ldr	r2, [pc, #136]	@ (800a330 <HAL_TIM_PWM_Start+0x210>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d00e      	beq.n	800a2c8 <HAL_TIM_PWM_Start+0x1a8>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a318 <HAL_TIM_PWM_Start+0x1f8>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d009      	beq.n	800a2c8 <HAL_TIM_PWM_Start+0x1a8>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a1e      	ldr	r2, [pc, #120]	@ (800a334 <HAL_TIM_PWM_Start+0x214>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d004      	beq.n	800a2c8 <HAL_TIM_PWM_Start+0x1a8>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a16      	ldr	r2, [pc, #88]	@ (800a31c <HAL_TIM_PWM_Start+0x1fc>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d115      	bne.n	800a2f4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689a      	ldr	r2, [r3, #8]
 800a2ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a338 <HAL_TIM_PWM_Start+0x218>)
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b06      	cmp	r3, #6
 800a2d8:	d015      	beq.n	800a306 <HAL_TIM_PWM_Start+0x1e6>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2e0:	d011      	beq.n	800a306 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f042 0201 	orr.w	r2, r2, #1
 800a2f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f2:	e008      	b.n	800a306 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f042 0201 	orr.w	r2, r2, #1
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	e000      	b.n	800a308 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a306:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	40010000 	.word	0x40010000
 800a318:	40010400 	.word	0x40010400
 800a31c:	40014000 	.word	0x40014000
 800a320:	40014400 	.word	0x40014400
 800a324:	40014800 	.word	0x40014800
 800a328:	40000400 	.word	0x40000400
 800a32c:	40000800 	.word	0x40000800
 800a330:	40000c00 	.word	0x40000c00
 800a334:	40001800 	.word	0x40001800
 800a338:	00010007 	.word	0x00010007

0800a33c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d122      	bne.n	800a398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d11b      	bne.n	800a398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f06f 0202 	mvn.w	r2, #2
 800a368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fb12 	bl	800a9a8 <HAL_TIM_IC_CaptureCallback>
 800a384:	e005      	b.n	800a392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fb04 	bl	800a994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fb15 	bl	800a9bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	f003 0304 	and.w	r3, r3, #4
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d122      	bne.n	800a3ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d11b      	bne.n	800a3ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f06f 0204 	mvn.w	r2, #4
 800a3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fae8 	bl	800a9a8 <HAL_TIM_IC_CaptureCallback>
 800a3d8:	e005      	b.n	800a3e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fada 	bl	800a994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 faeb 	bl	800a9bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	f003 0308 	and.w	r3, r3, #8
 800a3f6:	2b08      	cmp	r3, #8
 800a3f8:	d122      	bne.n	800a440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	f003 0308 	and.w	r3, r3, #8
 800a404:	2b08      	cmp	r3, #8
 800a406:	d11b      	bne.n	800a440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f06f 0208 	mvn.w	r2, #8
 800a410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2204      	movs	r2, #4
 800a416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f003 0303 	and.w	r3, r3, #3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fabe 	bl	800a9a8 <HAL_TIM_IC_CaptureCallback>
 800a42c:	e005      	b.n	800a43a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fab0 	bl	800a994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fac1 	bl	800a9bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	f003 0310 	and.w	r3, r3, #16
 800a44a:	2b10      	cmp	r3, #16
 800a44c:	d122      	bne.n	800a494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f003 0310 	and.w	r3, r3, #16
 800a458:	2b10      	cmp	r3, #16
 800a45a:	d11b      	bne.n	800a494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0210 	mvn.w	r2, #16
 800a464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2208      	movs	r2, #8
 800a46a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fa94 	bl	800a9a8 <HAL_TIM_IC_CaptureCallback>
 800a480:	e005      	b.n	800a48e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fa86 	bl	800a994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fa97 	bl	800a9bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d10e      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d107      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0201 	mvn.w	r2, #1
 800a4b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7f6 fc7c 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ca:	2b80      	cmp	r3, #128	@ 0x80
 800a4cc:	d10e      	bne.n	800a4ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d8:	2b80      	cmp	r3, #128	@ 0x80
 800a4da:	d107      	bne.n	800a4ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a4e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f001 f888 	bl	800b5fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4fa:	d10e      	bne.n	800a51a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a506:	2b80      	cmp	r3, #128	@ 0x80
 800a508:	d107      	bne.n	800a51a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f001 f87b 	bl	800b610 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a524:	2b40      	cmp	r3, #64	@ 0x40
 800a526:	d10e      	bne.n	800a546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a532:	2b40      	cmp	r3, #64	@ 0x40
 800a534:	d107      	bne.n	800a546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a53e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fa45 	bl	800a9d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	f003 0320 	and.w	r3, r3, #32
 800a550:	2b20      	cmp	r3, #32
 800a552:	d10e      	bne.n	800a572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f003 0320 	and.w	r3, r3, #32
 800a55e:	2b20      	cmp	r3, #32
 800a560:	d107      	bne.n	800a572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f06f 0220 	mvn.w	r2, #32
 800a56a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f001 f83b 	bl	800b5e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
	...

0800a57c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a596:	2302      	movs	r3, #2
 800a598:	e0ff      	b.n	800a79a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b14      	cmp	r3, #20
 800a5a6:	f200 80f0 	bhi.w	800a78a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a605 	.word	0x0800a605
 800a5b4:	0800a78b 	.word	0x0800a78b
 800a5b8:	0800a78b 	.word	0x0800a78b
 800a5bc:	0800a78b 	.word	0x0800a78b
 800a5c0:	0800a645 	.word	0x0800a645
 800a5c4:	0800a78b 	.word	0x0800a78b
 800a5c8:	0800a78b 	.word	0x0800a78b
 800a5cc:	0800a78b 	.word	0x0800a78b
 800a5d0:	0800a687 	.word	0x0800a687
 800a5d4:	0800a78b 	.word	0x0800a78b
 800a5d8:	0800a78b 	.word	0x0800a78b
 800a5dc:	0800a78b 	.word	0x0800a78b
 800a5e0:	0800a6c7 	.word	0x0800a6c7
 800a5e4:	0800a78b 	.word	0x0800a78b
 800a5e8:	0800a78b 	.word	0x0800a78b
 800a5ec:	0800a78b 	.word	0x0800a78b
 800a5f0:	0800a709 	.word	0x0800a709
 800a5f4:	0800a78b 	.word	0x0800a78b
 800a5f8:	0800a78b 	.word	0x0800a78b
 800a5fc:	0800a78b 	.word	0x0800a78b
 800a600:	0800a749 	.word	0x0800a749
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68b9      	ldr	r1, [r7, #8]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fa84 	bl	800ab18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	699a      	ldr	r2, [r3, #24]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f042 0208 	orr.w	r2, r2, #8
 800a61e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	699a      	ldr	r2, [r3, #24]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0204 	bic.w	r2, r2, #4
 800a62e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6999      	ldr	r1, [r3, #24]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	691a      	ldr	r2, [r3, #16]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	430a      	orrs	r2, r1
 800a640:	619a      	str	r2, [r3, #24]
      break;
 800a642:	e0a5      	b.n	800a790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68b9      	ldr	r1, [r7, #8]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 faf4 	bl	800ac38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	699a      	ldr	r2, [r3, #24]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a65e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	699a      	ldr	r2, [r3, #24]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a66e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6999      	ldr	r1, [r3, #24]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	021a      	lsls	r2, r3, #8
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	430a      	orrs	r2, r1
 800a682:	619a      	str	r2, [r3, #24]
      break;
 800a684:	e084      	b.n	800a790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 fb5d 	bl	800ad4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69da      	ldr	r2, [r3, #28]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f042 0208 	orr.w	r2, r2, #8
 800a6a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	69da      	ldr	r2, [r3, #28]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0204 	bic.w	r2, r2, #4
 800a6b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	69d9      	ldr	r1, [r3, #28]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	691a      	ldr	r2, [r3, #16]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	61da      	str	r2, [r3, #28]
      break;
 800a6c4:	e064      	b.n	800a790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fbc5 	bl	800ae5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	69da      	ldr	r2, [r3, #28]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	69da      	ldr	r2, [r3, #28]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69d9      	ldr	r1, [r3, #28]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	021a      	lsls	r2, r3, #8
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	61da      	str	r2, [r3, #28]
      break;
 800a706:	e043      	b.n	800a790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fc0e 	bl	800af30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0208 	orr.w	r2, r2, #8
 800a722:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0204 	bic.w	r2, r2, #4
 800a732:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	691a      	ldr	r2, [r3, #16]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	430a      	orrs	r2, r1
 800a744:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a746:	e023      	b.n	800a790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68b9      	ldr	r1, [r7, #8]
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fc52 	bl	800aff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a762:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a772:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	021a      	lsls	r2, r3, #8
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a788:	e002      	b.n	800a790 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	75fb      	strb	r3, [r7, #23]
      break;
 800a78e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a798:	7dfb      	ldrb	r3, [r7, #23]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop

0800a7a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d101      	bne.n	800a7c0 <HAL_TIM_ConfigClockSource+0x1c>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	e0dc      	b.n	800a97a <HAL_TIM_ConfigClockSource+0x1d6>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	4b6a      	ldr	r3, [pc, #424]	@ (800a984 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a7dc:	4013      	ands	r3, r2
 800a7de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a64      	ldr	r2, [pc, #400]	@ (800a988 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	f000 80a9 	beq.w	800a94e <HAL_TIM_ConfigClockSource+0x1aa>
 800a7fc:	4a62      	ldr	r2, [pc, #392]	@ (800a988 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	f200 80ae 	bhi.w	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a804:	4a61      	ldr	r2, [pc, #388]	@ (800a98c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a806:	4293      	cmp	r3, r2
 800a808:	f000 80a1 	beq.w	800a94e <HAL_TIM_ConfigClockSource+0x1aa>
 800a80c:	4a5f      	ldr	r2, [pc, #380]	@ (800a98c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	f200 80a6 	bhi.w	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a814:	4a5e      	ldr	r2, [pc, #376]	@ (800a990 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a816:	4293      	cmp	r3, r2
 800a818:	f000 8099 	beq.w	800a94e <HAL_TIM_ConfigClockSource+0x1aa>
 800a81c:	4a5c      	ldr	r2, [pc, #368]	@ (800a990 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	f200 809e 	bhi.w	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a824:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a828:	f000 8091 	beq.w	800a94e <HAL_TIM_ConfigClockSource+0x1aa>
 800a82c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a830:	f200 8096 	bhi.w	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a838:	f000 8089 	beq.w	800a94e <HAL_TIM_ConfigClockSource+0x1aa>
 800a83c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a840:	f200 808e 	bhi.w	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a848:	d03e      	beq.n	800a8c8 <HAL_TIM_ConfigClockSource+0x124>
 800a84a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a84e:	f200 8087 	bhi.w	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a856:	f000 8086 	beq.w	800a966 <HAL_TIM_ConfigClockSource+0x1c2>
 800a85a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a85e:	d87f      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a860:	2b70      	cmp	r3, #112	@ 0x70
 800a862:	d01a      	beq.n	800a89a <HAL_TIM_ConfigClockSource+0xf6>
 800a864:	2b70      	cmp	r3, #112	@ 0x70
 800a866:	d87b      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a868:	2b60      	cmp	r3, #96	@ 0x60
 800a86a:	d050      	beq.n	800a90e <HAL_TIM_ConfigClockSource+0x16a>
 800a86c:	2b60      	cmp	r3, #96	@ 0x60
 800a86e:	d877      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a870:	2b50      	cmp	r3, #80	@ 0x50
 800a872:	d03c      	beq.n	800a8ee <HAL_TIM_ConfigClockSource+0x14a>
 800a874:	2b50      	cmp	r3, #80	@ 0x50
 800a876:	d873      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a878:	2b40      	cmp	r3, #64	@ 0x40
 800a87a:	d058      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x18a>
 800a87c:	2b40      	cmp	r3, #64	@ 0x40
 800a87e:	d86f      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a880:	2b30      	cmp	r3, #48	@ 0x30
 800a882:	d064      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x1aa>
 800a884:	2b30      	cmp	r3, #48	@ 0x30
 800a886:	d86b      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a888:	2b20      	cmp	r3, #32
 800a88a:	d060      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x1aa>
 800a88c:	2b20      	cmp	r3, #32
 800a88e:	d867      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
 800a890:	2b00      	cmp	r3, #0
 800a892:	d05c      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x1aa>
 800a894:	2b10      	cmp	r3, #16
 800a896:	d05a      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x1aa>
 800a898:	e062      	b.n	800a960 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8aa:	f000 fc89 	bl	800b1c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a8bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	609a      	str	r2, [r3, #8]
      break;
 800a8c6:	e04f      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8d8:	f000 fc72 	bl	800b1c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689a      	ldr	r2, [r3, #8]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8ea:	609a      	str	r2, [r3, #8]
      break;
 800a8ec:	e03c      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	f000 fbe2 	bl	800b0c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2150      	movs	r1, #80	@ 0x50
 800a906:	4618      	mov	r0, r3
 800a908:	f000 fc3c 	bl	800b184 <TIM_ITRx_SetConfig>
      break;
 800a90c:	e02c      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a91a:	461a      	mov	r2, r3
 800a91c:	f000 fc01 	bl	800b122 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2160      	movs	r1, #96	@ 0x60
 800a926:	4618      	mov	r0, r3
 800a928:	f000 fc2c 	bl	800b184 <TIM_ITRx_SetConfig>
      break;
 800a92c:	e01c      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a93a:	461a      	mov	r2, r3
 800a93c:	f000 fbc2 	bl	800b0c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2140      	movs	r1, #64	@ 0x40
 800a946:	4618      	mov	r0, r3
 800a948:	f000 fc1c 	bl	800b184 <TIM_ITRx_SetConfig>
      break;
 800a94c:	e00c      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4619      	mov	r1, r3
 800a958:	4610      	mov	r0, r2
 800a95a:	f000 fc13 	bl	800b184 <TIM_ITRx_SetConfig>
      break;
 800a95e:	e003      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	73fb      	strb	r3, [r7, #15]
      break;
 800a964:	e000      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	ffceff88 	.word	0xffceff88
 800a988:	00100040 	.word	0x00100040
 800a98c:	00100030 	.word	0x00100030
 800a990:	00100020 	.word	0x00100020

0800a994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a40      	ldr	r2, [pc, #256]	@ (800aaf8 <TIM_Base_SetConfig+0x114>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d013      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa02:	d00f      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a3d      	ldr	r2, [pc, #244]	@ (800aafc <TIM_Base_SetConfig+0x118>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d00b      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a3c      	ldr	r2, [pc, #240]	@ (800ab00 <TIM_Base_SetConfig+0x11c>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d007      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a3b      	ldr	r2, [pc, #236]	@ (800ab04 <TIM_Base_SetConfig+0x120>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d003      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a3a      	ldr	r2, [pc, #232]	@ (800ab08 <TIM_Base_SetConfig+0x124>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d108      	bne.n	800aa36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a2f      	ldr	r2, [pc, #188]	@ (800aaf8 <TIM_Base_SetConfig+0x114>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d01f      	beq.n	800aa7e <TIM_Base_SetConfig+0x9a>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa44:	d01b      	beq.n	800aa7e <TIM_Base_SetConfig+0x9a>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a2c      	ldr	r2, [pc, #176]	@ (800aafc <TIM_Base_SetConfig+0x118>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d017      	beq.n	800aa7e <TIM_Base_SetConfig+0x9a>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a2b      	ldr	r2, [pc, #172]	@ (800ab00 <TIM_Base_SetConfig+0x11c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d013      	beq.n	800aa7e <TIM_Base_SetConfig+0x9a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a2a      	ldr	r2, [pc, #168]	@ (800ab04 <TIM_Base_SetConfig+0x120>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00f      	beq.n	800aa7e <TIM_Base_SetConfig+0x9a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a29      	ldr	r2, [pc, #164]	@ (800ab08 <TIM_Base_SetConfig+0x124>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d00b      	beq.n	800aa7e <TIM_Base_SetConfig+0x9a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a28      	ldr	r2, [pc, #160]	@ (800ab0c <TIM_Base_SetConfig+0x128>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d007      	beq.n	800aa7e <TIM_Base_SetConfig+0x9a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a27      	ldr	r2, [pc, #156]	@ (800ab10 <TIM_Base_SetConfig+0x12c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d003      	beq.n	800aa7e <TIM_Base_SetConfig+0x9a>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a26      	ldr	r2, [pc, #152]	@ (800ab14 <TIM_Base_SetConfig+0x130>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d108      	bne.n	800aa90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	689a      	ldr	r2, [r3, #8]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a10      	ldr	r2, [pc, #64]	@ (800aaf8 <TIM_Base_SetConfig+0x114>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d00f      	beq.n	800aadc <TIM_Base_SetConfig+0xf8>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a12      	ldr	r2, [pc, #72]	@ (800ab08 <TIM_Base_SetConfig+0x124>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d00b      	beq.n	800aadc <TIM_Base_SetConfig+0xf8>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a11      	ldr	r2, [pc, #68]	@ (800ab0c <TIM_Base_SetConfig+0x128>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d007      	beq.n	800aadc <TIM_Base_SetConfig+0xf8>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a10      	ldr	r2, [pc, #64]	@ (800ab10 <TIM_Base_SetConfig+0x12c>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_Base_SetConfig+0xf8>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a0f      	ldr	r2, [pc, #60]	@ (800ab14 <TIM_Base_SetConfig+0x130>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d103      	bne.n	800aae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	691a      	ldr	r2, [r3, #16]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	615a      	str	r2, [r3, #20]
}
 800aaea:	bf00      	nop
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	40010000 	.word	0x40010000
 800aafc:	40000400 	.word	0x40000400
 800ab00:	40000800 	.word	0x40000800
 800ab04:	40000c00 	.word	0x40000c00
 800ab08:	40010400 	.word	0x40010400
 800ab0c:	40014000 	.word	0x40014000
 800ab10:	40014400 	.word	0x40014400
 800ab14:	40014800 	.word	0x40014800

0800ab18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	f023 0201 	bic.w	r2, r3, #1
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	4b37      	ldr	r3, [pc, #220]	@ (800ac20 <TIM_OC1_SetConfig+0x108>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0303 	bic.w	r3, r3, #3
 800ab4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f023 0302 	bic.w	r3, r3, #2
 800ab60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	697a      	ldr	r2, [r7, #20]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a2d      	ldr	r2, [pc, #180]	@ (800ac24 <TIM_OC1_SetConfig+0x10c>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d00f      	beq.n	800ab94 <TIM_OC1_SetConfig+0x7c>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a2c      	ldr	r2, [pc, #176]	@ (800ac28 <TIM_OC1_SetConfig+0x110>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d00b      	beq.n	800ab94 <TIM_OC1_SetConfig+0x7c>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a2b      	ldr	r2, [pc, #172]	@ (800ac2c <TIM_OC1_SetConfig+0x114>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d007      	beq.n	800ab94 <TIM_OC1_SetConfig+0x7c>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a2a      	ldr	r2, [pc, #168]	@ (800ac30 <TIM_OC1_SetConfig+0x118>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d003      	beq.n	800ab94 <TIM_OC1_SetConfig+0x7c>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a29      	ldr	r2, [pc, #164]	@ (800ac34 <TIM_OC1_SetConfig+0x11c>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d10c      	bne.n	800abae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f023 0308 	bic.w	r3, r3, #8
 800ab9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f023 0304 	bic.w	r3, r3, #4
 800abac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a1c      	ldr	r2, [pc, #112]	@ (800ac24 <TIM_OC1_SetConfig+0x10c>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d00f      	beq.n	800abd6 <TIM_OC1_SetConfig+0xbe>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a1b      	ldr	r2, [pc, #108]	@ (800ac28 <TIM_OC1_SetConfig+0x110>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d00b      	beq.n	800abd6 <TIM_OC1_SetConfig+0xbe>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a1a      	ldr	r2, [pc, #104]	@ (800ac2c <TIM_OC1_SetConfig+0x114>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d007      	beq.n	800abd6 <TIM_OC1_SetConfig+0xbe>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a19      	ldr	r2, [pc, #100]	@ (800ac30 <TIM_OC1_SetConfig+0x118>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d003      	beq.n	800abd6 <TIM_OC1_SetConfig+0xbe>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a18      	ldr	r2, [pc, #96]	@ (800ac34 <TIM_OC1_SetConfig+0x11c>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d111      	bne.n	800abfa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	4313      	orrs	r3, r2
 800abee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	621a      	str	r2, [r3, #32]
}
 800ac14:	bf00      	nop
 800ac16:	371c      	adds	r7, #28
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	fffeff8f 	.word	0xfffeff8f
 800ac24:	40010000 	.word	0x40010000
 800ac28:	40010400 	.word	0x40010400
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	40014400 	.word	0x40014400
 800ac34:	40014800 	.word	0x40014800

0800ac38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	f023 0210 	bic.w	r2, r3, #16
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	4b34      	ldr	r3, [pc, #208]	@ (800ad34 <TIM_OC2_SetConfig+0xfc>)
 800ac64:	4013      	ands	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f023 0320 	bic.w	r3, r3, #32
 800ac82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a29      	ldr	r2, [pc, #164]	@ (800ad38 <TIM_OC2_SetConfig+0x100>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d003      	beq.n	800aca0 <TIM_OC2_SetConfig+0x68>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a28      	ldr	r2, [pc, #160]	@ (800ad3c <TIM_OC2_SetConfig+0x104>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d10d      	bne.n	800acbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	011b      	lsls	r3, r3, #4
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a1e      	ldr	r2, [pc, #120]	@ (800ad38 <TIM_OC2_SetConfig+0x100>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d00f      	beq.n	800ace4 <TIM_OC2_SetConfig+0xac>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a1d      	ldr	r2, [pc, #116]	@ (800ad3c <TIM_OC2_SetConfig+0x104>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d00b      	beq.n	800ace4 <TIM_OC2_SetConfig+0xac>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a1c      	ldr	r2, [pc, #112]	@ (800ad40 <TIM_OC2_SetConfig+0x108>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d007      	beq.n	800ace4 <TIM_OC2_SetConfig+0xac>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a1b      	ldr	r2, [pc, #108]	@ (800ad44 <TIM_OC2_SetConfig+0x10c>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d003      	beq.n	800ace4 <TIM_OC2_SetConfig+0xac>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a1a      	ldr	r2, [pc, #104]	@ (800ad48 <TIM_OC2_SetConfig+0x110>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d113      	bne.n	800ad0c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800acea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	621a      	str	r2, [r3, #32]
}
 800ad26:	bf00      	nop
 800ad28:	371c      	adds	r7, #28
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	feff8fff 	.word	0xfeff8fff
 800ad38:	40010000 	.word	0x40010000
 800ad3c:	40010400 	.word	0x40010400
 800ad40:	40014000 	.word	0x40014000
 800ad44:	40014400 	.word	0x40014400
 800ad48:	40014800 	.word	0x40014800

0800ad4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4b33      	ldr	r3, [pc, #204]	@ (800ae44 <TIM_OC3_SetConfig+0xf8>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f023 0303 	bic.w	r3, r3, #3
 800ad82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	021b      	lsls	r3, r3, #8
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a28      	ldr	r2, [pc, #160]	@ (800ae48 <TIM_OC3_SetConfig+0xfc>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d003      	beq.n	800adb2 <TIM_OC3_SetConfig+0x66>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a27      	ldr	r2, [pc, #156]	@ (800ae4c <TIM_OC3_SetConfig+0x100>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d10d      	bne.n	800adce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800adb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	021b      	lsls	r3, r3, #8
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800adcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a1d      	ldr	r2, [pc, #116]	@ (800ae48 <TIM_OC3_SetConfig+0xfc>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d00f      	beq.n	800adf6 <TIM_OC3_SetConfig+0xaa>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a1c      	ldr	r2, [pc, #112]	@ (800ae4c <TIM_OC3_SetConfig+0x100>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d00b      	beq.n	800adf6 <TIM_OC3_SetConfig+0xaa>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a1b      	ldr	r2, [pc, #108]	@ (800ae50 <TIM_OC3_SetConfig+0x104>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d007      	beq.n	800adf6 <TIM_OC3_SetConfig+0xaa>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a1a      	ldr	r2, [pc, #104]	@ (800ae54 <TIM_OC3_SetConfig+0x108>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d003      	beq.n	800adf6 <TIM_OC3_SetConfig+0xaa>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a19      	ldr	r2, [pc, #100]	@ (800ae58 <TIM_OC3_SetConfig+0x10c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d113      	bne.n	800ae1e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	011b      	lsls	r3, r3, #4
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	621a      	str	r2, [r3, #32]
}
 800ae38:	bf00      	nop
 800ae3a:	371c      	adds	r7, #28
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	fffeff8f 	.word	0xfffeff8f
 800ae48:	40010000 	.word	0x40010000
 800ae4c:	40010400 	.word	0x40010400
 800ae50:	40014000 	.word	0x40014000
 800ae54:	40014400 	.word	0x40014400
 800ae58:	40014800 	.word	0x40014800

0800ae5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	69db      	ldr	r3, [r3, #28]
 800ae82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	4b24      	ldr	r3, [pc, #144]	@ (800af18 <TIM_OC4_SetConfig+0xbc>)
 800ae88:	4013      	ands	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	021b      	lsls	r3, r3, #8
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	031b      	lsls	r3, r3, #12
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a19      	ldr	r2, [pc, #100]	@ (800af1c <TIM_OC4_SetConfig+0xc0>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d00f      	beq.n	800aedc <TIM_OC4_SetConfig+0x80>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a18      	ldr	r2, [pc, #96]	@ (800af20 <TIM_OC4_SetConfig+0xc4>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d00b      	beq.n	800aedc <TIM_OC4_SetConfig+0x80>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a17      	ldr	r2, [pc, #92]	@ (800af24 <TIM_OC4_SetConfig+0xc8>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d007      	beq.n	800aedc <TIM_OC4_SetConfig+0x80>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a16      	ldr	r2, [pc, #88]	@ (800af28 <TIM_OC4_SetConfig+0xcc>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d003      	beq.n	800aedc <TIM_OC4_SetConfig+0x80>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a15      	ldr	r2, [pc, #84]	@ (800af2c <TIM_OC4_SetConfig+0xd0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d109      	bne.n	800aef0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	019b      	lsls	r3, r3, #6
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	621a      	str	r2, [r3, #32]
}
 800af0a:	bf00      	nop
 800af0c:	371c      	adds	r7, #28
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	feff8fff 	.word	0xfeff8fff
 800af1c:	40010000 	.word	0x40010000
 800af20:	40010400 	.word	0x40010400
 800af24:	40014000 	.word	0x40014000
 800af28:	40014400 	.word	0x40014400
 800af2c:	40014800 	.word	0x40014800

0800af30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af30:	b480      	push	{r7}
 800af32:	b087      	sub	sp, #28
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	4b21      	ldr	r3, [pc, #132]	@ (800afe0 <TIM_OC5_SetConfig+0xb0>)
 800af5c:	4013      	ands	r3, r2
 800af5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	4313      	orrs	r3, r2
 800af68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800af70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	041b      	lsls	r3, r3, #16
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a18      	ldr	r2, [pc, #96]	@ (800afe4 <TIM_OC5_SetConfig+0xb4>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d00f      	beq.n	800afa6 <TIM_OC5_SetConfig+0x76>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a17      	ldr	r2, [pc, #92]	@ (800afe8 <TIM_OC5_SetConfig+0xb8>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d00b      	beq.n	800afa6 <TIM_OC5_SetConfig+0x76>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a16      	ldr	r2, [pc, #88]	@ (800afec <TIM_OC5_SetConfig+0xbc>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d007      	beq.n	800afa6 <TIM_OC5_SetConfig+0x76>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a15      	ldr	r2, [pc, #84]	@ (800aff0 <TIM_OC5_SetConfig+0xc0>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d003      	beq.n	800afa6 <TIM_OC5_SetConfig+0x76>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a14      	ldr	r2, [pc, #80]	@ (800aff4 <TIM_OC5_SetConfig+0xc4>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d109      	bne.n	800afba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	021b      	lsls	r3, r3, #8
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	621a      	str	r2, [r3, #32]
}
 800afd4:	bf00      	nop
 800afd6:	371c      	adds	r7, #28
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	fffeff8f 	.word	0xfffeff8f
 800afe4:	40010000 	.word	0x40010000
 800afe8:	40010400 	.word	0x40010400
 800afec:	40014000 	.word	0x40014000
 800aff0:	40014400 	.word	0x40014400
 800aff4:	40014800 	.word	0x40014800

0800aff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	4b22      	ldr	r3, [pc, #136]	@ (800b0ac <TIM_OC6_SetConfig+0xb4>)
 800b024:	4013      	ands	r3, r2
 800b026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	021b      	lsls	r3, r3, #8
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	4313      	orrs	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b03a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	051b      	lsls	r3, r3, #20
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	4313      	orrs	r3, r2
 800b046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a19      	ldr	r2, [pc, #100]	@ (800b0b0 <TIM_OC6_SetConfig+0xb8>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d00f      	beq.n	800b070 <TIM_OC6_SetConfig+0x78>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a18      	ldr	r2, [pc, #96]	@ (800b0b4 <TIM_OC6_SetConfig+0xbc>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d00b      	beq.n	800b070 <TIM_OC6_SetConfig+0x78>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a17      	ldr	r2, [pc, #92]	@ (800b0b8 <TIM_OC6_SetConfig+0xc0>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d007      	beq.n	800b070 <TIM_OC6_SetConfig+0x78>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a16      	ldr	r2, [pc, #88]	@ (800b0bc <TIM_OC6_SetConfig+0xc4>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d003      	beq.n	800b070 <TIM_OC6_SetConfig+0x78>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a15      	ldr	r2, [pc, #84]	@ (800b0c0 <TIM_OC6_SetConfig+0xc8>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d109      	bne.n	800b084 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b076:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	695b      	ldr	r3, [r3, #20]
 800b07c:	029b      	lsls	r3, r3, #10
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	4313      	orrs	r3, r2
 800b082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	621a      	str	r2, [r3, #32]
}
 800b09e:	bf00      	nop
 800b0a0:	371c      	adds	r7, #28
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	feff8fff 	.word	0xfeff8fff
 800b0b0:	40010000 	.word	0x40010000
 800b0b4:	40010400 	.word	0x40010400
 800b0b8:	40014000 	.word	0x40014000
 800b0bc:	40014400 	.word	0x40014400
 800b0c0:	40014800 	.word	0x40014800

0800b0c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	f023 0201 	bic.w	r2, r3, #1
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	011b      	lsls	r3, r3, #4
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f023 030a 	bic.w	r3, r3, #10
 800b100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	4313      	orrs	r3, r2
 800b108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	621a      	str	r2, [r3, #32]
}
 800b116:	bf00      	nop
 800b118:	371c      	adds	r7, #28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b122:	b480      	push	{r7}
 800b124:	b087      	sub	sp, #28
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	60b9      	str	r1, [r7, #8]
 800b12c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	f023 0210 	bic.w	r2, r3, #16
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	699b      	ldr	r3, [r3, #24]
 800b13e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b14c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	031b      	lsls	r3, r3, #12
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	4313      	orrs	r3, r2
 800b156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b15e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	011b      	lsls	r3, r3, #4
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	4313      	orrs	r3, r2
 800b168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	697a      	ldr	r2, [r7, #20]
 800b16e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	621a      	str	r2, [r3, #32]
}
 800b176:	bf00      	nop
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
	...

0800b184 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	4b09      	ldr	r3, [pc, #36]	@ (800b1bc <TIM_ITRx_SetConfig+0x38>)
 800b198:	4013      	ands	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	f043 0307 	orr.w	r3, r3, #7
 800b1a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	609a      	str	r2, [r3, #8]
}
 800b1ae:	bf00      	nop
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	ffcfff8f 	.word	0xffcfff8f

0800b1c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b087      	sub	sp, #28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	021a      	lsls	r2, r3, #8
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	609a      	str	r2, [r3, #8]
}
 800b1f4:	bf00      	nop
 800b1f6:	371c      	adds	r7, #28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b200:	b480      	push	{r7}
 800b202:	b087      	sub	sp, #28
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f003 031f 	and.w	r3, r3, #31
 800b212:	2201      	movs	r2, #1
 800b214:	fa02 f303 	lsl.w	r3, r2, r3
 800b218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a1a      	ldr	r2, [r3, #32]
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	43db      	mvns	r3, r3
 800b222:	401a      	ands	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6a1a      	ldr	r2, [r3, #32]
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	f003 031f 	and.w	r3, r3, #31
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	fa01 f303 	lsl.w	r3, r1, r3
 800b238:	431a      	orrs	r2, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	621a      	str	r2, [r3, #32]
}
 800b23e:	bf00      	nop
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
	...

0800b24c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d109      	bne.n	800b270 <HAL_TIMEx_PWMN_Start+0x24>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b01      	cmp	r3, #1
 800b266:	bf14      	ite	ne
 800b268:	2301      	movne	r3, #1
 800b26a:	2300      	moveq	r3, #0
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	e022      	b.n	800b2b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b04      	cmp	r3, #4
 800b274:	d109      	bne.n	800b28a <HAL_TIMEx_PWMN_Start+0x3e>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b01      	cmp	r3, #1
 800b280:	bf14      	ite	ne
 800b282:	2301      	movne	r3, #1
 800b284:	2300      	moveq	r3, #0
 800b286:	b2db      	uxtb	r3, r3
 800b288:	e015      	b.n	800b2b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b08      	cmp	r3, #8
 800b28e:	d109      	bne.n	800b2a4 <HAL_TIMEx_PWMN_Start+0x58>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b01      	cmp	r3, #1
 800b29a:	bf14      	ite	ne
 800b29c:	2301      	movne	r3, #1
 800b29e:	2300      	moveq	r3, #0
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	e008      	b.n	800b2b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	bf14      	ite	ne
 800b2b0:	2301      	movne	r3, #1
 800b2b2:	2300      	moveq	r3, #0
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e073      	b.n	800b3a6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d104      	bne.n	800b2ce <HAL_TIMEx_PWMN_Start+0x82>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2cc:	e013      	b.n	800b2f6 <HAL_TIMEx_PWMN_Start+0xaa>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b04      	cmp	r3, #4
 800b2d2:	d104      	bne.n	800b2de <HAL_TIMEx_PWMN_Start+0x92>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2dc:	e00b      	b.n	800b2f6 <HAL_TIMEx_PWMN_Start+0xaa>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b08      	cmp	r3, #8
 800b2e2:	d104      	bne.n	800b2ee <HAL_TIMEx_PWMN_Start+0xa2>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b2ec:	e003      	b.n	800b2f6 <HAL_TIMEx_PWMN_Start+0xaa>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2204      	movs	r2, #4
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 f990 	bl	800b624 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b312:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a25      	ldr	r2, [pc, #148]	@ (800b3b0 <HAL_TIMEx_PWMN_Start+0x164>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d022      	beq.n	800b364 <HAL_TIMEx_PWMN_Start+0x118>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b326:	d01d      	beq.n	800b364 <HAL_TIMEx_PWMN_Start+0x118>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a21      	ldr	r2, [pc, #132]	@ (800b3b4 <HAL_TIMEx_PWMN_Start+0x168>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d018      	beq.n	800b364 <HAL_TIMEx_PWMN_Start+0x118>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a20      	ldr	r2, [pc, #128]	@ (800b3b8 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d013      	beq.n	800b364 <HAL_TIMEx_PWMN_Start+0x118>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a1e      	ldr	r2, [pc, #120]	@ (800b3bc <HAL_TIMEx_PWMN_Start+0x170>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d00e      	beq.n	800b364 <HAL_TIMEx_PWMN_Start+0x118>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a1d      	ldr	r2, [pc, #116]	@ (800b3c0 <HAL_TIMEx_PWMN_Start+0x174>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d009      	beq.n	800b364 <HAL_TIMEx_PWMN_Start+0x118>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a1b      	ldr	r2, [pc, #108]	@ (800b3c4 <HAL_TIMEx_PWMN_Start+0x178>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d004      	beq.n	800b364 <HAL_TIMEx_PWMN_Start+0x118>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a1a      	ldr	r2, [pc, #104]	@ (800b3c8 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d115      	bne.n	800b390 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	689a      	ldr	r2, [r3, #8]
 800b36a:	4b18      	ldr	r3, [pc, #96]	@ (800b3cc <HAL_TIMEx_PWMN_Start+0x180>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2b06      	cmp	r3, #6
 800b374:	d015      	beq.n	800b3a2 <HAL_TIMEx_PWMN_Start+0x156>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b37c:	d011      	beq.n	800b3a2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f042 0201 	orr.w	r2, r2, #1
 800b38c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b38e:	e008      	b.n	800b3a2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f042 0201 	orr.w	r2, r2, #1
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	e000      	b.n	800b3a4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	40010000 	.word	0x40010000
 800b3b4:	40000400 	.word	0x40000400
 800b3b8:	40000800 	.word	0x40000800
 800b3bc:	40000c00 	.word	0x40000c00
 800b3c0:	40010400 	.word	0x40010400
 800b3c4:	40001800 	.word	0x40001800
 800b3c8:	40014000 	.word	0x40014000
 800b3cc:	00010007 	.word	0x00010007

0800b3d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d101      	bne.n	800b3e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	e06d      	b.n	800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a30      	ldr	r2, [pc, #192]	@ (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d004      	beq.n	800b41c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a2f      	ldr	r2, [pc, #188]	@ (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d108      	bne.n	800b42e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b422:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b434:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a20      	ldr	r2, [pc, #128]	@ (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d022      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b45a:	d01d      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a1d      	ldr	r2, [pc, #116]	@ (800b4d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d018      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a1c      	ldr	r2, [pc, #112]	@ (800b4dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d013      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a1a      	ldr	r2, [pc, #104]	@ (800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d00e      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a15      	ldr	r2, [pc, #84]	@ (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d009      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a16      	ldr	r2, [pc, #88]	@ (800b4e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d004      	beq.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a15      	ldr	r2, [pc, #84]	@ (800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d10c      	bne.n	800b4b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b49e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	40010000 	.word	0x40010000
 800b4d4:	40010400 	.word	0x40010400
 800b4d8:	40000400 	.word	0x40000400
 800b4dc:	40000800 	.word	0x40000800
 800b4e0:	40000c00 	.word	0x40000c00
 800b4e4:	40001800 	.word	0x40001800
 800b4e8:	40014000 	.word	0x40014000

0800b4ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b500:	2b01      	cmp	r3, #1
 800b502:	d101      	bne.n	800b508 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b504:	2302      	movs	r3, #2
 800b506:	e065      	b.n	800b5d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	4313      	orrs	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	4313      	orrs	r3, r2
 800b538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4313      	orrs	r3, r2
 800b546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	4313      	orrs	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	041b      	lsls	r3, r3, #16
 800b57e:	4313      	orrs	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a16      	ldr	r2, [pc, #88]	@ (800b5e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d004      	beq.n	800b596 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a14      	ldr	r2, [pc, #80]	@ (800b5e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d115      	bne.n	800b5c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a0:	051b      	lsls	r3, r3, #20
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	69db      	ldr	r3, [r3, #28]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	40010000 	.word	0x40010000
 800b5e4:	40010400 	.word	0x40010400

0800b5e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b624:	b480      	push	{r7}
 800b626:	b087      	sub	sp, #28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	f003 031f 	and.w	r3, r3, #31
 800b636:	2204      	movs	r2, #4
 800b638:	fa02 f303 	lsl.w	r3, r2, r3
 800b63c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6a1a      	ldr	r2, [r3, #32]
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	43db      	mvns	r3, r3
 800b646:	401a      	ands	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6a1a      	ldr	r2, [r3, #32]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	f003 031f 	and.w	r3, r3, #31
 800b656:	6879      	ldr	r1, [r7, #4]
 800b658:	fa01 f303 	lsl.w	r3, r1, r3
 800b65c:	431a      	orrs	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	621a      	str	r2, [r3, #32]
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
	...

0800b670 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b670:	b084      	sub	sp, #16
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	f107 001c 	add.w	r0, r7, #28
 800b67e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b684:	2b01      	cmp	r3, #1
 800b686:	d120      	bne.n	800b6ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b68c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68da      	ldr	r2, [r3, #12]
 800b698:	4b2a      	ldr	r3, [pc, #168]	@ (800b744 <USB_CoreInit+0xd4>)
 800b69a:	4013      	ands	r3, r2
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b6ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d105      	bne.n	800b6be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f001 faf8 	bl	800ccb4 <USB_CoreReset>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]
 800b6c8:	e01a      	b.n	800b700 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f001 faec 	bl	800ccb4 <USB_CoreReset>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b6e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d106      	bne.n	800b6f4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	639a      	str	r2, [r3, #56]	@ 0x38
 800b6f2:	e005      	b.n	800b700 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b702:	2b01      	cmp	r3, #1
 800b704:	d116      	bne.n	800b734 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b714:	4b0c      	ldr	r3, [pc, #48]	@ (800b748 <USB_CoreInit+0xd8>)
 800b716:	4313      	orrs	r3, r2
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f043 0206 	orr.w	r2, r3, #6
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	f043 0220 	orr.w	r2, r3, #32
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b740:	b004      	add	sp, #16
 800b742:	4770      	bx	lr
 800b744:	ffbdffbf 	.word	0xffbdffbf
 800b748:	03ee0000 	.word	0x03ee0000

0800b74c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	4613      	mov	r3, r2
 800b758:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b75a:	79fb      	ldrb	r3, [r7, #7]
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d165      	bne.n	800b82c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	4a41      	ldr	r2, [pc, #260]	@ (800b868 <USB_SetTurnaroundTime+0x11c>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d906      	bls.n	800b776 <USB_SetTurnaroundTime+0x2a>
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	4a40      	ldr	r2, [pc, #256]	@ (800b86c <USB_SetTurnaroundTime+0x120>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d202      	bcs.n	800b776 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b770:	230f      	movs	r3, #15
 800b772:	617b      	str	r3, [r7, #20]
 800b774:	e062      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	4a3c      	ldr	r2, [pc, #240]	@ (800b86c <USB_SetTurnaroundTime+0x120>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d306      	bcc.n	800b78c <USB_SetTurnaroundTime+0x40>
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	4a3b      	ldr	r2, [pc, #236]	@ (800b870 <USB_SetTurnaroundTime+0x124>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d202      	bcs.n	800b78c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b786:	230e      	movs	r3, #14
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	e057      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4a38      	ldr	r2, [pc, #224]	@ (800b870 <USB_SetTurnaroundTime+0x124>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d306      	bcc.n	800b7a2 <USB_SetTurnaroundTime+0x56>
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4a37      	ldr	r2, [pc, #220]	@ (800b874 <USB_SetTurnaroundTime+0x128>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d202      	bcs.n	800b7a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b79c:	230d      	movs	r3, #13
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	e04c      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4a33      	ldr	r2, [pc, #204]	@ (800b874 <USB_SetTurnaroundTime+0x128>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d306      	bcc.n	800b7b8 <USB_SetTurnaroundTime+0x6c>
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	4a32      	ldr	r2, [pc, #200]	@ (800b878 <USB_SetTurnaroundTime+0x12c>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d802      	bhi.n	800b7b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b7b2:	230c      	movs	r3, #12
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	e041      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4a2f      	ldr	r2, [pc, #188]	@ (800b878 <USB_SetTurnaroundTime+0x12c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d906      	bls.n	800b7ce <USB_SetTurnaroundTime+0x82>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4a2e      	ldr	r2, [pc, #184]	@ (800b87c <USB_SetTurnaroundTime+0x130>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d802      	bhi.n	800b7ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b7c8:	230b      	movs	r3, #11
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e036      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	4a2a      	ldr	r2, [pc, #168]	@ (800b87c <USB_SetTurnaroundTime+0x130>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d906      	bls.n	800b7e4 <USB_SetTurnaroundTime+0x98>
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	4a29      	ldr	r2, [pc, #164]	@ (800b880 <USB_SetTurnaroundTime+0x134>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d802      	bhi.n	800b7e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b7de:	230a      	movs	r3, #10
 800b7e0:	617b      	str	r3, [r7, #20]
 800b7e2:	e02b      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	4a26      	ldr	r2, [pc, #152]	@ (800b880 <USB_SetTurnaroundTime+0x134>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d906      	bls.n	800b7fa <USB_SetTurnaroundTime+0xae>
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4a25      	ldr	r2, [pc, #148]	@ (800b884 <USB_SetTurnaroundTime+0x138>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d202      	bcs.n	800b7fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b7f4:	2309      	movs	r3, #9
 800b7f6:	617b      	str	r3, [r7, #20]
 800b7f8:	e020      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	4a21      	ldr	r2, [pc, #132]	@ (800b884 <USB_SetTurnaroundTime+0x138>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d306      	bcc.n	800b810 <USB_SetTurnaroundTime+0xc4>
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	4a20      	ldr	r2, [pc, #128]	@ (800b888 <USB_SetTurnaroundTime+0x13c>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d802      	bhi.n	800b810 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b80a:	2308      	movs	r3, #8
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	e015      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	4a1d      	ldr	r2, [pc, #116]	@ (800b888 <USB_SetTurnaroundTime+0x13c>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d906      	bls.n	800b826 <USB_SetTurnaroundTime+0xda>
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	4a1c      	ldr	r2, [pc, #112]	@ (800b88c <USB_SetTurnaroundTime+0x140>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d202      	bcs.n	800b826 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b820:	2307      	movs	r3, #7
 800b822:	617b      	str	r3, [r7, #20]
 800b824:	e00a      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b826:	2306      	movs	r3, #6
 800b828:	617b      	str	r3, [r7, #20]
 800b82a:	e007      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b82c:	79fb      	ldrb	r3, [r7, #7]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d102      	bne.n	800b838 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b832:	2309      	movs	r3, #9
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	e001      	b.n	800b83c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b838:	2309      	movs	r3, #9
 800b83a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	68da      	ldr	r2, [r3, #12]
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	029b      	lsls	r3, r3, #10
 800b850:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b854:	431a      	orrs	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	371c      	adds	r7, #28
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	00d8acbf 	.word	0x00d8acbf
 800b86c:	00e4e1c0 	.word	0x00e4e1c0
 800b870:	00f42400 	.word	0x00f42400
 800b874:	01067380 	.word	0x01067380
 800b878:	011a499f 	.word	0x011a499f
 800b87c:	01312cff 	.word	0x01312cff
 800b880:	014ca43f 	.word	0x014ca43f
 800b884:	016e3600 	.word	0x016e3600
 800b888:	01a6ab1f 	.word	0x01a6ab1f
 800b88c:	01e84800 	.word	0x01e84800

0800b890 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	f043 0201 	orr.w	r2, r3, #1
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b083      	sub	sp, #12
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f023 0201 	bic.w	r2, r3, #1
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b8f0:	78fb      	ldrb	r3, [r7, #3]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d115      	bne.n	800b922 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b902:	2001      	movs	r0, #1
 800b904:	f7f5 ffc4 	bl	8001890 <HAL_Delay>
      ms++;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3301      	adds	r3, #1
 800b90c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f001 f93f 	bl	800cb92 <USB_GetMode>
 800b914:	4603      	mov	r3, r0
 800b916:	2b01      	cmp	r3, #1
 800b918:	d01e      	beq.n	800b958 <USB_SetCurrentMode+0x84>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2b31      	cmp	r3, #49	@ 0x31
 800b91e:	d9f0      	bls.n	800b902 <USB_SetCurrentMode+0x2e>
 800b920:	e01a      	b.n	800b958 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b922:	78fb      	ldrb	r3, [r7, #3]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d115      	bne.n	800b954 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b934:	2001      	movs	r0, #1
 800b936:	f7f5 ffab 	bl	8001890 <HAL_Delay>
      ms++;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3301      	adds	r3, #1
 800b93e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f001 f926 	bl	800cb92 <USB_GetMode>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d005      	beq.n	800b958 <USB_SetCurrentMode+0x84>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b31      	cmp	r3, #49	@ 0x31
 800b950:	d9f0      	bls.n	800b934 <USB_SetCurrentMode+0x60>
 800b952:	e001      	b.n	800b958 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e005      	b.n	800b964 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2b32      	cmp	r3, #50	@ 0x32
 800b95c:	d101      	bne.n	800b962 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	e000      	b.n	800b964 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b96c:	b084      	sub	sp, #16
 800b96e:	b580      	push	{r7, lr}
 800b970:	b086      	sub	sp, #24
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b97a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b986:	2300      	movs	r3, #0
 800b988:	613b      	str	r3, [r7, #16]
 800b98a:	e009      	b.n	800b9a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	3340      	adds	r3, #64	@ 0x40
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	2200      	movs	r2, #0
 800b998:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	3301      	adds	r3, #1
 800b99e:	613b      	str	r3, [r7, #16]
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	2b0e      	cmp	r3, #14
 800b9a4:	d9f2      	bls.n	800b98c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d11c      	bne.n	800b9e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9ba:	f043 0302 	orr.w	r3, r3, #2
 800b9be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	601a      	str	r2, [r3, #0]
 800b9e4:	e005      	b.n	800b9f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba04:	4619      	mov	r1, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	680b      	ldr	r3, [r1, #0]
 800ba10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d10c      	bne.n	800ba32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ba18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d104      	bne.n	800ba28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ba1e:	2100      	movs	r1, #0
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f965 	bl	800bcf0 <USB_SetDevSpeed>
 800ba26:	e008      	b.n	800ba3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ba28:	2101      	movs	r1, #1
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f960 	bl	800bcf0 <USB_SetDevSpeed>
 800ba30:	e003      	b.n	800ba3a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba32:	2103      	movs	r1, #3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f95b 	bl	800bcf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba3a:	2110      	movs	r1, #16
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f8f3 	bl	800bc28 <USB_FlushTxFifo>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f91f 	bl	800bc90 <USB_FlushRxFifo>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba62:	461a      	mov	r2, r3
 800ba64:	2300      	movs	r3, #0
 800ba66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba6e:	461a      	mov	r2, r3
 800ba70:	2300      	movs	r3, #0
 800ba72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba80:	2300      	movs	r3, #0
 800ba82:	613b      	str	r3, [r7, #16]
 800ba84:	e043      	b.n	800bb0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	015a      	lsls	r2, r3, #5
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba9c:	d118      	bne.n	800bad0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10a      	bne.n	800baba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	015a      	lsls	r2, r3, #5
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	4413      	add	r3, r2
 800baac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bab0:	461a      	mov	r2, r3
 800bab2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	e013      	b.n	800bae2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	015a      	lsls	r2, r3, #5
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	4413      	add	r3, r2
 800bac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bac6:	461a      	mov	r2, r3
 800bac8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bacc:	6013      	str	r3, [r2, #0]
 800bace:	e008      	b.n	800bae2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	015a      	lsls	r2, r3, #5
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	4413      	add	r3, r2
 800bad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800badc:	461a      	mov	r2, r3
 800bade:	2300      	movs	r3, #0
 800bae0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baee:	461a      	mov	r2, r3
 800baf0:	2300      	movs	r3, #0
 800baf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	015a      	lsls	r2, r3, #5
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb00:	461a      	mov	r2, r3
 800bb02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	613b      	str	r3, [r7, #16]
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d3b7      	bcc.n	800ba86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb16:	2300      	movs	r3, #0
 800bb18:	613b      	str	r3, [r7, #16]
 800bb1a:	e043      	b.n	800bba4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	015a      	lsls	r2, r3, #5
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4413      	add	r3, r2
 800bb24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb32:	d118      	bne.n	800bb66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10a      	bne.n	800bb50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	015a      	lsls	r2, r3, #5
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	4413      	add	r3, r2
 800bb42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb46:	461a      	mov	r2, r3
 800bb48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	e013      	b.n	800bb78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bb62:	6013      	str	r3, [r2, #0]
 800bb64:	e008      	b.n	800bb78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	015a      	lsls	r2, r3, #5
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb72:	461a      	mov	r2, r3
 800bb74:	2300      	movs	r3, #0
 800bb76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb84:	461a      	mov	r2, r3
 800bb86:	2300      	movs	r3, #0
 800bb88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	015a      	lsls	r2, r3, #5
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	4413      	add	r3, r2
 800bb92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb96:	461a      	mov	r2, r3
 800bb98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	3301      	adds	r3, #1
 800bba2:	613b      	str	r3, [r7, #16]
 800bba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d3b7      	bcc.n	800bb1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bbcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d105      	bne.n	800bbe0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	f043 0210 	orr.w	r2, r3, #16
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	699a      	ldr	r2, [r3, #24]
 800bbe4:	4b0e      	ldr	r3, [pc, #56]	@ (800bc20 <USB_DevInit+0x2b4>)
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bbec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d005      	beq.n	800bbfe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	f043 0208 	orr.w	r2, r3, #8
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d105      	bne.n	800bc10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	699a      	ldr	r2, [r3, #24]
 800bc08:	4b06      	ldr	r3, [pc, #24]	@ (800bc24 <USB_DevInit+0x2b8>)
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bc10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3718      	adds	r7, #24
 800bc16:	46bd      	mov	sp, r7
 800bc18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc1c:	b004      	add	sp, #16
 800bc1e:	4770      	bx	lr
 800bc20:	803c3800 	.word	0x803c3800
 800bc24:	40000004 	.word	0x40000004

0800bc28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	4a13      	ldr	r2, [pc, #76]	@ (800bc8c <USB_FlushTxFifo+0x64>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d901      	bls.n	800bc48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	e01b      	b.n	800bc80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	daf2      	bge.n	800bc36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bc50:	2300      	movs	r3, #0
 800bc52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	019b      	lsls	r3, r3, #6
 800bc58:	f043 0220 	orr.w	r2, r3, #32
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	3301      	adds	r3, #1
 800bc64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	4a08      	ldr	r2, [pc, #32]	@ (800bc8c <USB_FlushTxFifo+0x64>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d901      	bls.n	800bc72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	e006      	b.n	800bc80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	f003 0320 	and.w	r3, r3, #32
 800bc7a:	2b20      	cmp	r3, #32
 800bc7c:	d0f0      	beq.n	800bc60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	00030d40 	.word	0x00030d40

0800bc90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	4a11      	ldr	r2, [pc, #68]	@ (800bcec <USB_FlushRxFifo+0x5c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d901      	bls.n	800bcae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e018      	b.n	800bce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	691b      	ldr	r3, [r3, #16]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	daf2      	bge.n	800bc9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2210      	movs	r2, #16
 800bcbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	4a08      	ldr	r2, [pc, #32]	@ (800bcec <USB_FlushRxFifo+0x5c>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d901      	bls.n	800bcd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e006      	b.n	800bce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	f003 0310 	and.w	r3, r3, #16
 800bcda:	2b10      	cmp	r3, #16
 800bcdc:	d0f0      	beq.n	800bcc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	00030d40 	.word	0x00030d40

0800bcf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	78fb      	ldrb	r3, [r7, #3]
 800bd0a:	68f9      	ldr	r1, [r7, #12]
 800bd0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd10:	4313      	orrs	r3, r2
 800bd12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bd22:	b480      	push	{r7}
 800bd24:	b087      	sub	sp, #28
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f003 0306 	and.w	r3, r3, #6
 800bd3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d102      	bne.n	800bd48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bd42:	2300      	movs	r3, #0
 800bd44:	75fb      	strb	r3, [r7, #23]
 800bd46:	e00a      	b.n	800bd5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d002      	beq.n	800bd54 <USB_GetDevSpeed+0x32>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b06      	cmp	r3, #6
 800bd52:	d102      	bne.n	800bd5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bd54:	2302      	movs	r3, #2
 800bd56:	75fb      	strb	r3, [r7, #23]
 800bd58:	e001      	b.n	800bd5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bd5a:	230f      	movs	r3, #15
 800bd5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	371c      	adds	r7, #28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	785b      	ldrb	r3, [r3, #1]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d139      	bne.n	800bdfc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd8e:	69da      	ldr	r2, [r3, #28]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	f003 030f 	and.w	r3, r3, #15
 800bd98:	2101      	movs	r1, #1
 800bd9a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	68f9      	ldr	r1, [r7, #12]
 800bda2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bda6:	4313      	orrs	r3, r2
 800bda8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	015a      	lsls	r2, r3, #5
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d153      	bne.n	800be68 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	791b      	ldrb	r3, [r3, #4]
 800bdda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bddc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	059b      	lsls	r3, r3, #22
 800bde2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bde4:	431a      	orrs	r2, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	0159      	lsls	r1, r3, #5
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	440b      	add	r3, r1
 800bdee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4b20      	ldr	r3, [pc, #128]	@ (800be78 <USB_ActivateEndpoint+0x10c>)
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	600b      	str	r3, [r1, #0]
 800bdfa:	e035      	b.n	800be68 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be02:	69da      	ldr	r2, [r3, #28]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	f003 030f 	and.w	r3, r3, #15
 800be0c:	2101      	movs	r1, #1
 800be0e:	fa01 f303 	lsl.w	r3, r1, r3
 800be12:	041b      	lsls	r3, r3, #16
 800be14:	68f9      	ldr	r1, [r7, #12]
 800be16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be1a:	4313      	orrs	r3, r2
 800be1c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	015a      	lsls	r2, r3, #5
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	4413      	add	r3, r2
 800be26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d119      	bne.n	800be68 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4413      	add	r3, r2
 800be3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	791b      	ldrb	r3, [r3, #4]
 800be4e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be50:	430b      	orrs	r3, r1
 800be52:	431a      	orrs	r2, r3
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	0159      	lsls	r1, r3, #5
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	440b      	add	r3, r1
 800be5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be60:	4619      	mov	r1, r3
 800be62:	4b05      	ldr	r3, [pc, #20]	@ (800be78 <USB_ActivateEndpoint+0x10c>)
 800be64:	4313      	orrs	r3, r2
 800be66:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	10008000 	.word	0x10008000

0800be7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	785b      	ldrb	r3, [r3, #1]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d161      	bne.n	800bf5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4413      	add	r3, r2
 800bea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800beaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800beae:	d11f      	bne.n	800bef0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	015a      	lsls	r2, r3, #5
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4413      	add	r3, r2
 800beb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	0151      	lsls	r1, r2, #5
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	440a      	add	r2, r1
 800bec6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bece:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	015a      	lsls	r2, r3, #5
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	0151      	lsls	r1, r2, #5
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	440a      	add	r2, r1
 800bee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800beee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bef6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	f003 030f 	and.w	r3, r3, #15
 800bf00:	2101      	movs	r1, #1
 800bf02:	fa01 f303 	lsl.w	r3, r1, r3
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	43db      	mvns	r3, r3
 800bf0a:	68f9      	ldr	r1, [r7, #12]
 800bf0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf10:	4013      	ands	r3, r2
 800bf12:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf1a:	69da      	ldr	r2, [r3, #28]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	f003 030f 	and.w	r3, r3, #15
 800bf24:	2101      	movs	r1, #1
 800bf26:	fa01 f303 	lsl.w	r3, r1, r3
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	43db      	mvns	r3, r3
 800bf2e:	68f9      	ldr	r1, [r7, #12]
 800bf30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf34:	4013      	ands	r3, r2
 800bf36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	015a      	lsls	r2, r3, #5
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	4413      	add	r3, r2
 800bf40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	0159      	lsls	r1, r3, #5
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	440b      	add	r3, r1
 800bf4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf52:	4619      	mov	r1, r3
 800bf54:	4b35      	ldr	r3, [pc, #212]	@ (800c02c <USB_DeactivateEndpoint+0x1b0>)
 800bf56:	4013      	ands	r3, r2
 800bf58:	600b      	str	r3, [r1, #0]
 800bf5a:	e060      	b.n	800c01e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf72:	d11f      	bne.n	800bfb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	015a      	lsls	r2, r3, #5
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	0151      	lsls	r1, r2, #5
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	440a      	add	r2, r1
 800bf8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	015a      	lsls	r2, r3, #5
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	0151      	lsls	r1, r2, #5
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	440a      	add	r2, r1
 800bfaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bfb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	f003 030f 	and.w	r3, r3, #15
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	fa01 f303 	lsl.w	r3, r1, r3
 800bfca:	041b      	lsls	r3, r3, #16
 800bfcc:	43db      	mvns	r3, r3
 800bfce:	68f9      	ldr	r1, [r7, #12]
 800bfd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfde:	69da      	ldr	r2, [r3, #28]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	f003 030f 	and.w	r3, r3, #15
 800bfe8:	2101      	movs	r1, #1
 800bfea:	fa01 f303 	lsl.w	r3, r1, r3
 800bfee:	041b      	lsls	r3, r3, #16
 800bff0:	43db      	mvns	r3, r3
 800bff2:	68f9      	ldr	r1, [r7, #12]
 800bff4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bff8:	4013      	ands	r3, r2
 800bffa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	4413      	add	r3, r2
 800c004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	0159      	lsls	r1, r3, #5
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	440b      	add	r3, r1
 800c012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c016:	4619      	mov	r1, r3
 800c018:	4b05      	ldr	r3, [pc, #20]	@ (800c030 <USB_DeactivateEndpoint+0x1b4>)
 800c01a:	4013      	ands	r3, r2
 800c01c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	ec337800 	.word	0xec337800
 800c030:	eff37800 	.word	0xeff37800

0800c034 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b08a      	sub	sp, #40	@ 0x28
 800c038:	af02      	add	r7, sp, #8
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	4613      	mov	r3, r2
 800c040:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	785b      	ldrb	r3, [r3, #1]
 800c050:	2b01      	cmp	r3, #1
 800c052:	f040 8181 	bne.w	800c358 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d132      	bne.n	800c0c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c06a:	691a      	ldr	r2, [r3, #16]
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	0159      	lsls	r1, r3, #5
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	440b      	add	r3, r1
 800c074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c078:	4619      	mov	r1, r3
 800c07a:	4ba5      	ldr	r3, [pc, #660]	@ (800c310 <USB_EPStartXfer+0x2dc>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	015a      	lsls	r2, r3, #5
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	4413      	add	r3, r2
 800c088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	69ba      	ldr	r2, [r7, #24]
 800c090:	0151      	lsls	r1, r2, #5
 800c092:	69fa      	ldr	r2, [r7, #28]
 800c094:	440a      	add	r2, r1
 800c096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c09a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c09e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0ac:	691a      	ldr	r2, [r3, #16]
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	0159      	lsls	r1, r3, #5
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	440b      	add	r3, r1
 800c0b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	4b95      	ldr	r3, [pc, #596]	@ (800c314 <USB_EPStartXfer+0x2e0>)
 800c0be:	4013      	ands	r3, r2
 800c0c0:	610b      	str	r3, [r1, #16]
 800c0c2:	e092      	b.n	800c1ea <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0d0:	691a      	ldr	r2, [r3, #16]
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	0159      	lsls	r1, r3, #5
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	440b      	add	r3, r1
 800c0da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4b8c      	ldr	r3, [pc, #560]	@ (800c314 <USB_EPStartXfer+0x2e0>)
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0f2:	691a      	ldr	r2, [r3, #16]
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	0159      	lsls	r1, r3, #5
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	440b      	add	r3, r1
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c100:	4619      	mov	r1, r3
 800c102:	4b83      	ldr	r3, [pc, #524]	@ (800c310 <USB_EPStartXfer+0x2dc>)
 800c104:	4013      	ands	r3, r2
 800c106:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d11a      	bne.n	800c144 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	691a      	ldr	r2, [r3, #16]
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	429a      	cmp	r2, r3
 800c118:	d903      	bls.n	800c122 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	689a      	ldr	r2, [r3, #8]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	015a      	lsls	r2, r3, #5
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	4413      	add	r3, r2
 800c12a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	0151      	lsls	r1, r2, #5
 800c134:	69fa      	ldr	r2, [r7, #28]
 800c136:	440a      	add	r2, r1
 800c138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c13c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c140:	6113      	str	r3, [r2, #16]
 800c142:	e01b      	b.n	800c17c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c150:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	6919      	ldr	r1, [r3, #16]
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	440b      	add	r3, r1
 800c15c:	1e59      	subs	r1, r3, #1
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	fbb1 f3f3 	udiv	r3, r1, r3
 800c166:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c168:	4b6b      	ldr	r3, [pc, #428]	@ (800c318 <USB_EPStartXfer+0x2e4>)
 800c16a:	400b      	ands	r3, r1
 800c16c:	69b9      	ldr	r1, [r7, #24]
 800c16e:	0148      	lsls	r0, r1, #5
 800c170:	69f9      	ldr	r1, [r7, #28]
 800c172:	4401      	add	r1, r0
 800c174:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c178:	4313      	orrs	r3, r2
 800c17a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	015a      	lsls	r2, r3, #5
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	4413      	add	r3, r2
 800c184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c188:	691a      	ldr	r2, [r3, #16]
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c192:	69b9      	ldr	r1, [r7, #24]
 800c194:	0148      	lsls	r0, r1, #5
 800c196:	69f9      	ldr	r1, [r7, #28]
 800c198:	4401      	add	r1, r0
 800c19a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	791b      	ldrb	r3, [r3, #4]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d11f      	bne.n	800c1ea <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	015a      	lsls	r2, r3, #5
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	0151      	lsls	r1, r2, #5
 800c1bc:	69fa      	ldr	r2, [r7, #28]
 800c1be:	440a      	add	r2, r1
 800c1c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1c4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c1c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	015a      	lsls	r2, r3, #5
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	69ba      	ldr	r2, [r7, #24]
 800c1da:	0151      	lsls	r1, r2, #5
 800c1dc:	69fa      	ldr	r2, [r7, #28]
 800c1de:	440a      	add	r2, r1
 800c1e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c1e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c1ea:	79fb      	ldrb	r3, [r7, #7]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d14b      	bne.n	800c288 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	69db      	ldr	r3, [r3, #28]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d009      	beq.n	800c20c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c204:	461a      	mov	r2, r3
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	791b      	ldrb	r3, [r3, #4]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d128      	bne.n	800c266 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c220:	2b00      	cmp	r3, #0
 800c222:	d110      	bne.n	800c246 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	015a      	lsls	r2, r3, #5
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	4413      	add	r3, r2
 800c22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	69ba      	ldr	r2, [r7, #24]
 800c234:	0151      	lsls	r1, r2, #5
 800c236:	69fa      	ldr	r2, [r7, #28]
 800c238:	440a      	add	r2, r1
 800c23a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c23e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c242:	6013      	str	r3, [r2, #0]
 800c244:	e00f      	b.n	800c266 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	015a      	lsls	r2, r3, #5
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	4413      	add	r3, r2
 800c24e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	69ba      	ldr	r2, [r7, #24]
 800c256:	0151      	lsls	r1, r2, #5
 800c258:	69fa      	ldr	r2, [r7, #28]
 800c25a:	440a      	add	r2, r1
 800c25c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c264:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	015a      	lsls	r2, r3, #5
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	4413      	add	r3, r2
 800c26e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	0151      	lsls	r1, r2, #5
 800c278:	69fa      	ldr	r2, [r7, #28]
 800c27a:	440a      	add	r2, r1
 800c27c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c280:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	e16a      	b.n	800c55e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	0151      	lsls	r1, r2, #5
 800c29a:	69fa      	ldr	r2, [r7, #28]
 800c29c:	440a      	add	r2, r1
 800c29e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c2a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	791b      	ldrb	r3, [r3, #4]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d015      	beq.n	800c2dc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f000 8152 	beq.w	800c55e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	f003 030f 	and.w	r3, r3, #15
 800c2ca:	2101      	movs	r1, #1
 800c2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c2d0:	69f9      	ldr	r1, [r7, #28]
 800c2d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	634b      	str	r3, [r1, #52]	@ 0x34
 800c2da:	e140      	b.n	800c55e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d117      	bne.n	800c31c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	69ba      	ldr	r2, [r7, #24]
 800c2fc:	0151      	lsls	r1, r2, #5
 800c2fe:	69fa      	ldr	r2, [r7, #28]
 800c300:	440a      	add	r2, r1
 800c302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c306:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c30a:	6013      	str	r3, [r2, #0]
 800c30c:	e016      	b.n	800c33c <USB_EPStartXfer+0x308>
 800c30e:	bf00      	nop
 800c310:	e007ffff 	.word	0xe007ffff
 800c314:	fff80000 	.word	0xfff80000
 800c318:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	015a      	lsls	r2, r3, #5
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	4413      	add	r3, r2
 800c324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	0151      	lsls	r1, r2, #5
 800c32e:	69fa      	ldr	r2, [r7, #28]
 800c330:	440a      	add	r2, r1
 800c332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c33a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	68d9      	ldr	r1, [r3, #12]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	781a      	ldrb	r2, [r3, #0]
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	b298      	uxth	r0, r3
 800c34a:	79fb      	ldrb	r3, [r7, #7]
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	4603      	mov	r3, r0
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f000 f9b9 	bl	800c6c8 <USB_WritePacket>
 800c356:	e102      	b.n	800c55e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	015a      	lsls	r2, r3, #5
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	4413      	add	r3, r2
 800c360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c364:	691a      	ldr	r2, [r3, #16]
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	0159      	lsls	r1, r3, #5
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	440b      	add	r3, r1
 800c36e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c372:	4619      	mov	r1, r3
 800c374:	4b7c      	ldr	r3, [pc, #496]	@ (800c568 <USB_EPStartXfer+0x534>)
 800c376:	4013      	ands	r3, r2
 800c378:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	015a      	lsls	r2, r3, #5
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	4413      	add	r3, r2
 800c382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c386:	691a      	ldr	r2, [r3, #16]
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	0159      	lsls	r1, r3, #5
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	440b      	add	r3, r1
 800c390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c394:	4619      	mov	r1, r3
 800c396:	4b75      	ldr	r3, [pc, #468]	@ (800c56c <USB_EPStartXfer+0x538>)
 800c398:	4013      	ands	r3, r2
 800c39a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d12f      	bne.n	800c402 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d003      	beq.n	800c3b2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	689a      	ldr	r2, [r3, #8]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	689a      	ldr	r2, [r3, #8]
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	015a      	lsls	r2, r3, #5
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3c6:	691a      	ldr	r2, [r3, #16]
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	6a1b      	ldr	r3, [r3, #32]
 800c3cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3d0:	69b9      	ldr	r1, [r7, #24]
 800c3d2:	0148      	lsls	r0, r1, #5
 800c3d4:	69f9      	ldr	r1, [r7, #28]
 800c3d6:	4401      	add	r1, r0
 800c3d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	015a      	lsls	r2, r3, #5
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	69ba      	ldr	r2, [r7, #24]
 800c3f0:	0151      	lsls	r1, r2, #5
 800c3f2:	69fa      	ldr	r2, [r7, #28]
 800c3f4:	440a      	add	r2, r1
 800c3f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c3fe:	6113      	str	r3, [r2, #16]
 800c400:	e05f      	b.n	800c4c2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d123      	bne.n	800c452 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	015a      	lsls	r2, r3, #5
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	4413      	add	r3, r2
 800c412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c416:	691a      	ldr	r2, [r3, #16]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c420:	69b9      	ldr	r1, [r7, #24]
 800c422:	0148      	lsls	r0, r1, #5
 800c424:	69f9      	ldr	r1, [r7, #28]
 800c426:	4401      	add	r1, r0
 800c428:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c42c:	4313      	orrs	r3, r2
 800c42e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	015a      	lsls	r2, r3, #5
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	4413      	add	r3, r2
 800c438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	69ba      	ldr	r2, [r7, #24]
 800c440:	0151      	lsls	r1, r2, #5
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	440a      	add	r2, r1
 800c446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c44a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c44e:	6113      	str	r3, [r2, #16]
 800c450:	e037      	b.n	800c4c2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	691a      	ldr	r2, [r3, #16]
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	4413      	add	r3, r2
 800c45c:	1e5a      	subs	r2, r3, #1
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	fbb2 f3f3 	udiv	r3, r2, r3
 800c466:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	8afa      	ldrh	r2, [r7, #22]
 800c46e:	fb03 f202 	mul.w	r2, r3, r2
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	015a      	lsls	r2, r3, #5
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	4413      	add	r3, r2
 800c47e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c482:	691a      	ldr	r2, [r3, #16]
 800c484:	8afb      	ldrh	r3, [r7, #22]
 800c486:	04d9      	lsls	r1, r3, #19
 800c488:	4b39      	ldr	r3, [pc, #228]	@ (800c570 <USB_EPStartXfer+0x53c>)
 800c48a:	400b      	ands	r3, r1
 800c48c:	69b9      	ldr	r1, [r7, #24]
 800c48e:	0148      	lsls	r0, r1, #5
 800c490:	69f9      	ldr	r1, [r7, #28]
 800c492:	4401      	add	r1, r0
 800c494:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c498:	4313      	orrs	r3, r2
 800c49a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	015a      	lsls	r2, r3, #5
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4a8:	691a      	ldr	r2, [r3, #16]
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4b2:	69b9      	ldr	r1, [r7, #24]
 800c4b4:	0148      	lsls	r0, r1, #5
 800c4b6:	69f9      	ldr	r1, [r7, #28]
 800c4b8:	4401      	add	r1, r0
 800c4ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c4c2:	79fb      	ldrb	r3, [r7, #7]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d10d      	bne.n	800c4e4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d009      	beq.n	800c4e4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	68d9      	ldr	r1, [r3, #12]
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	015a      	lsls	r2, r3, #5
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4e0:	460a      	mov	r2, r1
 800c4e2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	791b      	ldrb	r3, [r3, #4]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d128      	bne.n	800c53e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d110      	bne.n	800c51e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	015a      	lsls	r2, r3, #5
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	4413      	add	r3, r2
 800c504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	0151      	lsls	r1, r2, #5
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	440a      	add	r2, r1
 800c512:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c516:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	e00f      	b.n	800c53e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	015a      	lsls	r2, r3, #5
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	4413      	add	r3, r2
 800c526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	69ba      	ldr	r2, [r7, #24]
 800c52e:	0151      	lsls	r1, r2, #5
 800c530:	69fa      	ldr	r2, [r7, #28]
 800c532:	440a      	add	r2, r1
 800c534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c53c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	4413      	add	r3, r2
 800c546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	69ba      	ldr	r2, [r7, #24]
 800c54e:	0151      	lsls	r1, r2, #5
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	440a      	add	r2, r1
 800c554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c558:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c55c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3720      	adds	r7, #32
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	fff80000 	.word	0xfff80000
 800c56c:	e007ffff 	.word	0xe007ffff
 800c570:	1ff80000 	.word	0x1ff80000

0800c574 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c574:	b480      	push	{r7}
 800c576:	b087      	sub	sp, #28
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c57e:	2300      	movs	r3, #0
 800c580:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	785b      	ldrb	r3, [r3, #1]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d14a      	bne.n	800c628 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	015a      	lsls	r2, r3, #5
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	4413      	add	r3, r2
 800c59c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5aa:	f040 8086 	bne.w	800c6ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	7812      	ldrb	r2, [r2, #0]
 800c5c2:	0151      	lsls	r1, r2, #5
 800c5c4:	693a      	ldr	r2, [r7, #16]
 800c5c6:	440a      	add	r2, r1
 800c5c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c5d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	015a      	lsls	r2, r3, #5
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	4413      	add	r3, r2
 800c5dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	7812      	ldrb	r2, [r2, #0]
 800c5e6:	0151      	lsls	r1, r2, #5
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	440a      	add	r2, r1
 800c5ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c5f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c602:	4293      	cmp	r3, r2
 800c604:	d902      	bls.n	800c60c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	75fb      	strb	r3, [r7, #23]
          break;
 800c60a:	e056      	b.n	800c6ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	015a      	lsls	r2, r3, #5
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	4413      	add	r3, r2
 800c616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c624:	d0e7      	beq.n	800c5f6 <USB_EPStopXfer+0x82>
 800c626:	e048      	b.n	800c6ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	015a      	lsls	r2, r3, #5
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	4413      	add	r3, r2
 800c632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c63c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c640:	d13b      	bne.n	800c6ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	015a      	lsls	r2, r3, #5
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	4413      	add	r3, r2
 800c64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	7812      	ldrb	r2, [r2, #0]
 800c656:	0151      	lsls	r1, r2, #5
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	440a      	add	r2, r1
 800c65c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c660:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c664:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	015a      	lsls	r2, r3, #5
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	4413      	add	r3, r2
 800c670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	683a      	ldr	r2, [r7, #0]
 800c678:	7812      	ldrb	r2, [r2, #0]
 800c67a:	0151      	lsls	r1, r2, #5
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	440a      	add	r2, r1
 800c680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c684:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c688:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	3301      	adds	r3, #1
 800c68e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c696:	4293      	cmp	r3, r2
 800c698:	d902      	bls.n	800c6a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	75fb      	strb	r3, [r7, #23]
          break;
 800c69e:	e00c      	b.n	800c6ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	015a      	lsls	r2, r3, #5
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c6b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6b8:	d0e7      	beq.n	800c68a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	371c      	adds	r7, #28
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b089      	sub	sp, #36	@ 0x24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	71fb      	strb	r3, [r7, #7]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c6e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d123      	bne.n	800c736 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c6ee:	88bb      	ldrh	r3, [r7, #4]
 800c6f0:	3303      	adds	r3, #3
 800c6f2:	089b      	lsrs	r3, r3, #2
 800c6f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	61bb      	str	r3, [r7, #24]
 800c6fa:	e018      	b.n	800c72e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c6fc:	79fb      	ldrb	r3, [r7, #7]
 800c6fe:	031a      	lsls	r2, r3, #12
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	4413      	add	r3, r2
 800c704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c708:	461a      	mov	r2, r3
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	3301      	adds	r3, #1
 800c714:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	3301      	adds	r3, #1
 800c71a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	3301      	adds	r3, #1
 800c720:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	3301      	adds	r3, #1
 800c726:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	3301      	adds	r3, #1
 800c72c:	61bb      	str	r3, [r7, #24]
 800c72e:	69ba      	ldr	r2, [r7, #24]
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	429a      	cmp	r2, r3
 800c734:	d3e2      	bcc.n	800c6fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3724      	adds	r7, #36	@ 0x24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c744:	b480      	push	{r7}
 800c746:	b08b      	sub	sp, #44	@ 0x2c
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	4613      	mov	r3, r2
 800c750:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c75a:	88fb      	ldrh	r3, [r7, #6]
 800c75c:	089b      	lsrs	r3, r3, #2
 800c75e:	b29b      	uxth	r3, r3
 800c760:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c762:	88fb      	ldrh	r3, [r7, #6]
 800c764:	f003 0303 	and.w	r3, r3, #3
 800c768:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c76a:	2300      	movs	r3, #0
 800c76c:	623b      	str	r3, [r7, #32]
 800c76e:	e014      	b.n	800c79a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77a:	601a      	str	r2, [r3, #0]
    pDest++;
 800c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77e:	3301      	adds	r3, #1
 800c780:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	3301      	adds	r3, #1
 800c786:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78a:	3301      	adds	r3, #1
 800c78c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	3301      	adds	r3, #1
 800c792:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	3301      	adds	r3, #1
 800c798:	623b      	str	r3, [r7, #32]
 800c79a:	6a3a      	ldr	r2, [r7, #32]
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d3e6      	bcc.n	800c770 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c7a2:	8bfb      	ldrh	r3, [r7, #30]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d01e      	beq.n	800c7e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	f107 0310 	add.w	r3, r7, #16
 800c7b8:	6812      	ldr	r2, [r2, #0]
 800c7ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	6a3b      	ldr	r3, [r7, #32]
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	00db      	lsls	r3, r3, #3
 800c7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7cc:	701a      	strb	r2, [r3, #0]
      i++;
 800c7ce:	6a3b      	ldr	r3, [r7, #32]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c7da:	8bfb      	ldrh	r3, [r7, #30]
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c7e0:	8bfb      	ldrh	r3, [r7, #30]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1ea      	bne.n	800c7bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	372c      	adds	r7, #44	@ 0x2c
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	785b      	ldrb	r3, [r3, #1]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d12c      	bne.n	800c86a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	015a      	lsls	r2, r3, #5
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	4413      	add	r3, r2
 800c818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	db12      	blt.n	800c848 <USB_EPSetStall+0x54>
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00f      	beq.n	800c848 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	015a      	lsls	r2, r3, #5
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	4413      	add	r3, r2
 800c830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	0151      	lsls	r1, r2, #5
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	440a      	add	r2, r1
 800c83e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c842:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c846:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	015a      	lsls	r2, r3, #5
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	0151      	lsls	r1, r2, #5
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	440a      	add	r2, r1
 800c85e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c862:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c866:	6013      	str	r3, [r2, #0]
 800c868:	e02b      	b.n	800c8c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	015a      	lsls	r2, r3, #5
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	4413      	add	r3, r2
 800c872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	db12      	blt.n	800c8a2 <USB_EPSetStall+0xae>
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00f      	beq.n	800c8a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	015a      	lsls	r2, r3, #5
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4413      	add	r3, r2
 800c88a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	0151      	lsls	r1, r2, #5
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	440a      	add	r2, r1
 800c898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c89c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c8a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	0151      	lsls	r1, r2, #5
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	440a      	add	r2, r1
 800c8b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c8c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	785b      	ldrb	r3, [r3, #1]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d128      	bne.n	800c93e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	015a      	lsls	r2, r3, #5
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	0151      	lsls	r1, r2, #5
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	440a      	add	r2, r1
 800c902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c906:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c90a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	791b      	ldrb	r3, [r3, #4]
 800c910:	2b03      	cmp	r3, #3
 800c912:	d003      	beq.n	800c91c <USB_EPClearStall+0x4c>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	791b      	ldrb	r3, [r3, #4]
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d138      	bne.n	800c98e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	015a      	lsls	r2, r3, #5
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	4413      	add	r3, r2
 800c924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	0151      	lsls	r1, r2, #5
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	440a      	add	r2, r1
 800c932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c93a:	6013      	str	r3, [r2, #0]
 800c93c:	e027      	b.n	800c98e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	015a      	lsls	r2, r3, #5
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	4413      	add	r3, r2
 800c946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	0151      	lsls	r1, r2, #5
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	440a      	add	r2, r1
 800c954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c958:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c95c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	791b      	ldrb	r3, [r3, #4]
 800c962:	2b03      	cmp	r3, #3
 800c964:	d003      	beq.n	800c96e <USB_EPClearStall+0x9e>
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	791b      	ldrb	r3, [r3, #4]
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d10f      	bne.n	800c98e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	015a      	lsls	r2, r3, #5
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	4413      	add	r3, r2
 800c976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	0151      	lsls	r1, r2, #5
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	440a      	add	r2, r1
 800c984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c98c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3714      	adds	r7, #20
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c9be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	78fb      	ldrb	r3, [r7, #3]
 800c9ca:	011b      	lsls	r3, r3, #4
 800c9cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c9d0:	68f9      	ldr	r1, [r7, #12]
 800c9d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca02:	f023 0303 	bic.w	r3, r3, #3
 800ca06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca16:	f023 0302 	bic.w	r3, r3, #2
 800ca1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ca2a:	b480      	push	{r7}
 800ca2c:	b085      	sub	sp, #20
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca44:	f023 0303 	bic.w	r3, r3, #3
 800ca48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca58:	f043 0302 	orr.w	r3, r3, #2
 800ca5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	4013      	ands	r3, r2
 800ca82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca84:	68fb      	ldr	r3, [r7, #12]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b085      	sub	sp, #20
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caae:	69db      	ldr	r3, [r3, #28]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	4013      	ands	r3, r2
 800cab4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	0c1b      	lsrs	r3, r3, #16
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b085      	sub	sp, #20
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cae2:	69db      	ldr	r3, [r3, #28]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	4013      	ands	r3, r2
 800cae8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	b29b      	uxth	r3, r3
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3714      	adds	r7, #20
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr

0800cafa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cafa:	b480      	push	{r7}
 800cafc:	b085      	sub	sp, #20
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	460b      	mov	r3, r1
 800cb04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cb0a:	78fb      	ldrb	r3, [r7, #3]
 800cb0c:	015a      	lsls	r2, r3, #5
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	4413      	add	r3, r2
 800cb12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	4013      	ands	r3, r2
 800cb26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb28:	68bb      	ldr	r3, [r7, #8]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3714      	adds	r7, #20
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb36:	b480      	push	{r7}
 800cb38:	b087      	sub	sp, #28
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	460b      	mov	r3, r1
 800cb40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb5a:	78fb      	ldrb	r3, [r7, #3]
 800cb5c:	f003 030f 	and.w	r3, r3, #15
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	fa22 f303 	lsr.w	r3, r2, r3
 800cb66:	01db      	lsls	r3, r3, #7
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	693a      	ldr	r2, [r7, #16]
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb70:	78fb      	ldrb	r3, [r7, #3]
 800cb72:	015a      	lsls	r2, r3, #5
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	4413      	add	r3, r2
 800cb78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	4013      	ands	r3, r2
 800cb82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb84:	68bb      	ldr	r3, [r7, #8]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	371c      	adds	r7, #28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
	...

0800cbb0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4b09      	ldr	r3, [pc, #36]	@ (800cbf4 <USB_ActivateSetup+0x44>)
 800cbce:	4013      	ands	r3, r2
 800cbd0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cbe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbe4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr
 800cbf4:	fffff800 	.word	0xfffff800

0800cbf8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	460b      	mov	r3, r1
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	333c      	adds	r3, #60	@ 0x3c
 800cc0e:	3304      	adds	r3, #4
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	4a26      	ldr	r2, [pc, #152]	@ (800ccb0 <USB_EP0_OutStart+0xb8>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d90a      	bls.n	800cc32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc2c:	d101      	bne.n	800cc32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	e037      	b.n	800cca2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc38:	461a      	mov	r2, r3
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc60:	f043 0318 	orr.w	r3, r3, #24
 800cc64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc74:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cc78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc7a:	7afb      	ldrb	r3, [r7, #11]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d10f      	bne.n	800cca0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc86:	461a      	mov	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc9a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cc9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	371c      	adds	r7, #28
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	4f54300a 	.word	0x4f54300a

0800ccb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4a13      	ldr	r2, [pc, #76]	@ (800cd18 <USB_CoreReset+0x64>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d901      	bls.n	800ccd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	e01b      	b.n	800cd0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	daf2      	bge.n	800ccc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	f043 0201 	orr.w	r2, r3, #1
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3301      	adds	r3, #1
 800ccee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4a09      	ldr	r2, [pc, #36]	@ (800cd18 <USB_CoreReset+0x64>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d901      	bls.n	800ccfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e006      	b.n	800cd0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d0f0      	beq.n	800ccea <USB_CoreReset+0x36>

  return HAL_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	00030d40 	.word	0x00030d40

0800cd1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	460b      	mov	r3, r1
 800cd26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cd28:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cd2c:	f003 f916 	bl	800ff5c <USBD_static_malloc>
 800cd30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d109      	bne.n	800cd4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	32b0      	adds	r2, #176	@ 0xb0
 800cd42:	2100      	movs	r1, #0
 800cd44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cd48:	2302      	movs	r3, #2
 800cd4a:	e0d4      	b.n	800cef6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cd4c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cd50:	2100      	movs	r1, #0
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f003 faac 	bl	80102b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	32b0      	adds	r2, #176	@ 0xb0
 800cd62:	68f9      	ldr	r1, [r7, #12]
 800cd64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	32b0      	adds	r2, #176	@ 0xb0
 800cd72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	7c1b      	ldrb	r3, [r3, #16]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d138      	bne.n	800cdf6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd84:	4b5e      	ldr	r3, [pc, #376]	@ (800cf00 <USBD_CDC_Init+0x1e4>)
 800cd86:	7819      	ldrb	r1, [r3, #0]
 800cd88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f002 ffc1 	bl	800fd16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cd94:	4b5a      	ldr	r3, [pc, #360]	@ (800cf00 <USBD_CDC_Init+0x1e4>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	f003 020f 	and.w	r2, r3, #15
 800cd9c:	6879      	ldr	r1, [r7, #4]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4413      	add	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	440b      	add	r3, r1
 800cda8:	3324      	adds	r3, #36	@ 0x24
 800cdaa:	2201      	movs	r2, #1
 800cdac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdae:	4b55      	ldr	r3, [pc, #340]	@ (800cf04 <USBD_CDC_Init+0x1e8>)
 800cdb0:	7819      	ldrb	r1, [r3, #0]
 800cdb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f002 ffac 	bl	800fd16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cdbe:	4b51      	ldr	r3, [pc, #324]	@ (800cf04 <USBD_CDC_Init+0x1e8>)
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	f003 020f 	and.w	r2, r3, #15
 800cdc6:	6879      	ldr	r1, [r7, #4]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4413      	add	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	440b      	add	r3, r1
 800cdd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cdda:	4b4b      	ldr	r3, [pc, #300]	@ (800cf08 <USBD_CDC_Init+0x1ec>)
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	f003 020f 	and.w	r2, r3, #15
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	4613      	mov	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	440b      	add	r3, r1
 800cdee:	3326      	adds	r3, #38	@ 0x26
 800cdf0:	2210      	movs	r2, #16
 800cdf2:	801a      	strh	r2, [r3, #0]
 800cdf4:	e035      	b.n	800ce62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cdf6:	4b42      	ldr	r3, [pc, #264]	@ (800cf00 <USBD_CDC_Init+0x1e4>)
 800cdf8:	7819      	ldrb	r1, [r3, #0]
 800cdfa:	2340      	movs	r3, #64	@ 0x40
 800cdfc:	2202      	movs	r2, #2
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f002 ff89 	bl	800fd16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce04:	4b3e      	ldr	r3, [pc, #248]	@ (800cf00 <USBD_CDC_Init+0x1e4>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	f003 020f 	and.w	r2, r3, #15
 800ce0c:	6879      	ldr	r1, [r7, #4]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4413      	add	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	440b      	add	r3, r1
 800ce18:	3324      	adds	r3, #36	@ 0x24
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce1e:	4b39      	ldr	r3, [pc, #228]	@ (800cf04 <USBD_CDC_Init+0x1e8>)
 800ce20:	7819      	ldrb	r1, [r3, #0]
 800ce22:	2340      	movs	r3, #64	@ 0x40
 800ce24:	2202      	movs	r2, #2
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f002 ff75 	bl	800fd16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce2c:	4b35      	ldr	r3, [pc, #212]	@ (800cf04 <USBD_CDC_Init+0x1e8>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	f003 020f 	and.w	r2, r3, #15
 800ce34:	6879      	ldr	r1, [r7, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4413      	add	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	440b      	add	r3, r1
 800ce40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ce44:	2201      	movs	r2, #1
 800ce46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ce48:	4b2f      	ldr	r3, [pc, #188]	@ (800cf08 <USBD_CDC_Init+0x1ec>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	f003 020f 	and.w	r2, r3, #15
 800ce50:	6879      	ldr	r1, [r7, #4]
 800ce52:	4613      	mov	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4413      	add	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	440b      	add	r3, r1
 800ce5c:	3326      	adds	r3, #38	@ 0x26
 800ce5e:	2210      	movs	r2, #16
 800ce60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce62:	4b29      	ldr	r3, [pc, #164]	@ (800cf08 <USBD_CDC_Init+0x1ec>)
 800ce64:	7819      	ldrb	r1, [r3, #0]
 800ce66:	2308      	movs	r3, #8
 800ce68:	2203      	movs	r2, #3
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f002 ff53 	bl	800fd16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ce70:	4b25      	ldr	r3, [pc, #148]	@ (800cf08 <USBD_CDC_Init+0x1ec>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	f003 020f 	and.w	r2, r3, #15
 800ce78:	6879      	ldr	r1, [r7, #4]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	4413      	add	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	440b      	add	r3, r1
 800ce84:	3324      	adds	r3, #36	@ 0x24
 800ce86:	2201      	movs	r2, #1
 800ce88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	33b0      	adds	r3, #176	@ 0xb0
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4413      	add	r3, r2
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cec0:	2302      	movs	r3, #2
 800cec2:	e018      	b.n	800cef6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	7c1b      	ldrb	r3, [r3, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10a      	bne.n	800cee2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cecc:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <USBD_CDC_Init+0x1e8>)
 800cece:	7819      	ldrb	r1, [r3, #0]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ced6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f003 f80a 	bl	800fef4 <USBD_LL_PrepareReceive>
 800cee0:	e008      	b.n	800cef4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cee2:	4b08      	ldr	r3, [pc, #32]	@ (800cf04 <USBD_CDC_Init+0x1e8>)
 800cee4:	7819      	ldrb	r1, [r3, #0]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ceec:	2340      	movs	r3, #64	@ 0x40
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f003 f800 	bl	800fef4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	2400009b 	.word	0x2400009b
 800cf04:	2400009c 	.word	0x2400009c
 800cf08:	2400009d 	.word	0x2400009d

0800cf0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	460b      	mov	r3, r1
 800cf16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cf18:	4b3a      	ldr	r3, [pc, #232]	@ (800d004 <USBD_CDC_DeInit+0xf8>)
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f002 ff1f 	bl	800fd62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cf24:	4b37      	ldr	r3, [pc, #220]	@ (800d004 <USBD_CDC_DeInit+0xf8>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	f003 020f 	and.w	r2, r3, #15
 800cf2c:	6879      	ldr	r1, [r7, #4]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	4413      	add	r3, r2
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	440b      	add	r3, r1
 800cf38:	3324      	adds	r3, #36	@ 0x24
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cf3e:	4b32      	ldr	r3, [pc, #200]	@ (800d008 <USBD_CDC_DeInit+0xfc>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f002 ff0c 	bl	800fd62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cf4a:	4b2f      	ldr	r3, [pc, #188]	@ (800d008 <USBD_CDC_DeInit+0xfc>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	f003 020f 	and.w	r2, r3, #15
 800cf52:	6879      	ldr	r1, [r7, #4]
 800cf54:	4613      	mov	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	440b      	add	r3, r1
 800cf5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf62:	2200      	movs	r2, #0
 800cf64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cf66:	4b29      	ldr	r3, [pc, #164]	@ (800d00c <USBD_CDC_DeInit+0x100>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f002 fef8 	bl	800fd62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cf72:	4b26      	ldr	r3, [pc, #152]	@ (800d00c <USBD_CDC_DeInit+0x100>)
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	f003 020f 	and.w	r2, r3, #15
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4413      	add	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	440b      	add	r3, r1
 800cf86:	3324      	adds	r3, #36	@ 0x24
 800cf88:	2200      	movs	r2, #0
 800cf8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cf8c:	4b1f      	ldr	r3, [pc, #124]	@ (800d00c <USBD_CDC_DeInit+0x100>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	f003 020f 	and.w	r2, r3, #15
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	4613      	mov	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	440b      	add	r3, r1
 800cfa0:	3326      	adds	r3, #38	@ 0x26
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	32b0      	adds	r2, #176	@ 0xb0
 800cfb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d01f      	beq.n	800cff8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	33b0      	adds	r3, #176	@ 0xb0
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	32b0      	adds	r2, #176	@ 0xb0
 800cfd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f002 ffcc 	bl	800ff78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	32b0      	adds	r2, #176	@ 0xb0
 800cfea:	2100      	movs	r1, #0
 800cfec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3708      	adds	r7, #8
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	2400009b 	.word	0x2400009b
 800d008:	2400009c 	.word	0x2400009c
 800d00c:	2400009d 	.word	0x2400009d

0800d010 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	32b0      	adds	r2, #176	@ 0xb0
 800d024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d028:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d02a:	2300      	movs	r3, #0
 800d02c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d02e:	2300      	movs	r3, #0
 800d030:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d03c:	2303      	movs	r3, #3
 800d03e:	e0bf      	b.n	800d1c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d050      	beq.n	800d0ee <USBD_CDC_Setup+0xde>
 800d04c:	2b20      	cmp	r3, #32
 800d04e:	f040 80af 	bne.w	800d1b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	88db      	ldrh	r3, [r3, #6]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d03a      	beq.n	800d0d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	b25b      	sxtb	r3, r3
 800d060:	2b00      	cmp	r3, #0
 800d062:	da1b      	bge.n	800d09c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	33b0      	adds	r3, #176	@ 0xb0
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4413      	add	r3, r2
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d07a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d07c:	683a      	ldr	r2, [r7, #0]
 800d07e:	88d2      	ldrh	r2, [r2, #6]
 800d080:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	88db      	ldrh	r3, [r3, #6]
 800d086:	2b07      	cmp	r3, #7
 800d088:	bf28      	it	cs
 800d08a:	2307      	movcs	r3, #7
 800d08c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	89fa      	ldrh	r2, [r7, #14]
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f001 fdb1 	bl	800ebfc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d09a:	e090      	b.n	800d1be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	785a      	ldrb	r2, [r3, #1]
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	88db      	ldrh	r3, [r3, #6]
 800d0aa:	2b3f      	cmp	r3, #63	@ 0x3f
 800d0ac:	d803      	bhi.n	800d0b6 <USBD_CDC_Setup+0xa6>
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	88db      	ldrh	r3, [r3, #6]
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	e000      	b.n	800d0b8 <USBD_CDC_Setup+0xa8>
 800d0b6:	2240      	movs	r2, #64	@ 0x40
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d0be:	6939      	ldr	r1, [r7, #16]
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f001 fdc3 	bl	800ec54 <USBD_CtlPrepareRx>
      break;
 800d0ce:	e076      	b.n	800d1be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	33b0      	adds	r3, #176	@ 0xb0
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	7850      	ldrb	r0, [r2, #1]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	6839      	ldr	r1, [r7, #0]
 800d0ea:	4798      	blx	r3
      break;
 800d0ec:	e067      	b.n	800d1be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	785b      	ldrb	r3, [r3, #1]
 800d0f2:	2b0b      	cmp	r3, #11
 800d0f4:	d851      	bhi.n	800d19a <USBD_CDC_Setup+0x18a>
 800d0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0fc <USBD_CDC_Setup+0xec>)
 800d0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fc:	0800d12d 	.word	0x0800d12d
 800d100:	0800d1a9 	.word	0x0800d1a9
 800d104:	0800d19b 	.word	0x0800d19b
 800d108:	0800d19b 	.word	0x0800d19b
 800d10c:	0800d19b 	.word	0x0800d19b
 800d110:	0800d19b 	.word	0x0800d19b
 800d114:	0800d19b 	.word	0x0800d19b
 800d118:	0800d19b 	.word	0x0800d19b
 800d11c:	0800d19b 	.word	0x0800d19b
 800d120:	0800d19b 	.word	0x0800d19b
 800d124:	0800d157 	.word	0x0800d157
 800d128:	0800d181 	.word	0x0800d181
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b03      	cmp	r3, #3
 800d136:	d107      	bne.n	800d148 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d138:	f107 030a 	add.w	r3, r7, #10
 800d13c:	2202      	movs	r2, #2
 800d13e:	4619      	mov	r1, r3
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f001 fd5b 	bl	800ebfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d146:	e032      	b.n	800d1ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f001 fce5 	bl	800eb1a <USBD_CtlError>
            ret = USBD_FAIL;
 800d150:	2303      	movs	r3, #3
 800d152:	75fb      	strb	r3, [r7, #23]
          break;
 800d154:	e02b      	b.n	800d1ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	2b03      	cmp	r3, #3
 800d160:	d107      	bne.n	800d172 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d162:	f107 030d 	add.w	r3, r7, #13
 800d166:	2201      	movs	r2, #1
 800d168:	4619      	mov	r1, r3
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f001 fd46 	bl	800ebfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d170:	e01d      	b.n	800d1ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d172:	6839      	ldr	r1, [r7, #0]
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f001 fcd0 	bl	800eb1a <USBD_CtlError>
            ret = USBD_FAIL;
 800d17a:	2303      	movs	r3, #3
 800d17c:	75fb      	strb	r3, [r7, #23]
          break;
 800d17e:	e016      	b.n	800d1ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d00f      	beq.n	800d1ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d18c:	6839      	ldr	r1, [r7, #0]
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f001 fcc3 	bl	800eb1a <USBD_CtlError>
            ret = USBD_FAIL;
 800d194:	2303      	movs	r3, #3
 800d196:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d198:	e008      	b.n	800d1ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f001 fcbc 	bl	800eb1a <USBD_CtlError>
          ret = USBD_FAIL;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	75fb      	strb	r3, [r7, #23]
          break;
 800d1a6:	e002      	b.n	800d1ae <USBD_CDC_Setup+0x19e>
          break;
 800d1a8:	bf00      	nop
 800d1aa:	e008      	b.n	800d1be <USBD_CDC_Setup+0x1ae>
          break;
 800d1ac:	bf00      	nop
      }
      break;
 800d1ae:	e006      	b.n	800d1be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 fcb1 	bl	800eb1a <USBD_CtlError>
      ret = USBD_FAIL;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	75fb      	strb	r3, [r7, #23]
      break;
 800d1bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	32b0      	adds	r2, #176	@ 0xb0
 800d1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	e065      	b.n	800d2be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	32b0      	adds	r2, #176	@ 0xb0
 800d1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d200:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d202:	78fb      	ldrb	r3, [r7, #3]
 800d204:	f003 020f 	and.w	r2, r3, #15
 800d208:	6879      	ldr	r1, [r7, #4]
 800d20a:	4613      	mov	r3, r2
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	4413      	add	r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	440b      	add	r3, r1
 800d214:	3318      	adds	r3, #24
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d02f      	beq.n	800d27c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d21c:	78fb      	ldrb	r3, [r7, #3]
 800d21e:	f003 020f 	and.w	r2, r3, #15
 800d222:	6879      	ldr	r1, [r7, #4]
 800d224:	4613      	mov	r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	440b      	add	r3, r1
 800d22e:	3318      	adds	r3, #24
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	78fb      	ldrb	r3, [r7, #3]
 800d234:	f003 010f 	and.w	r1, r3, #15
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	460b      	mov	r3, r1
 800d23c:	00db      	lsls	r3, r3, #3
 800d23e:	440b      	add	r3, r1
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	4403      	add	r3, r0
 800d244:	3344      	adds	r3, #68	@ 0x44
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	fbb2 f1f3 	udiv	r1, r2, r3
 800d24c:	fb01 f303 	mul.w	r3, r1, r3
 800d250:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d252:	2b00      	cmp	r3, #0
 800d254:	d112      	bne.n	800d27c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d256:	78fb      	ldrb	r3, [r7, #3]
 800d258:	f003 020f 	and.w	r2, r3, #15
 800d25c:	6879      	ldr	r1, [r7, #4]
 800d25e:	4613      	mov	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	4413      	add	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	440b      	add	r3, r1
 800d268:	3318      	adds	r3, #24
 800d26a:	2200      	movs	r2, #0
 800d26c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d26e:	78f9      	ldrb	r1, [r7, #3]
 800d270:	2300      	movs	r3, #0
 800d272:	2200      	movs	r2, #0
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f002 fe1c 	bl	800feb2 <USBD_LL_Transmit>
 800d27a:	e01f      	b.n	800d2bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	2200      	movs	r2, #0
 800d280:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	33b0      	adds	r3, #176	@ 0xb0
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4413      	add	r3, r2
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d010      	beq.n	800d2bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	33b0      	adds	r3, #176	@ 0xb0
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4413      	add	r3, r2
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d2b8:	78fa      	ldrb	r2, [r7, #3]
 800d2ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	32b0      	adds	r2, #176	@ 0xb0
 800d2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	32b0      	adds	r2, #176	@ 0xb0
 800d2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d101      	bne.n	800d2f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d2f4:	2303      	movs	r3, #3
 800d2f6:	e01a      	b.n	800d32e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d2f8:	78fb      	ldrb	r3, [r7, #3]
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f002 fe1a 	bl	800ff36 <USBD_LL_GetRxDataSize>
 800d302:	4602      	mov	r2, r0
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	33b0      	adds	r3, #176	@ 0xb0
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	4413      	add	r3, r2
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d328:	4611      	mov	r1, r2
 800d32a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b084      	sub	sp, #16
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	32b0      	adds	r2, #176	@ 0xb0
 800d348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d101      	bne.n	800d358 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d354:	2303      	movs	r3, #3
 800d356:	e024      	b.n	800d3a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	33b0      	adds	r3, #176	@ 0xb0
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4413      	add	r3, r2
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d019      	beq.n	800d3a0 <USBD_CDC_EP0_RxReady+0x6a>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d372:	2bff      	cmp	r3, #255	@ 0xff
 800d374:	d014      	beq.n	800d3a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	33b0      	adds	r3, #176	@ 0xb0
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	4413      	add	r3, r2
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d38e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d396:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	22ff      	movs	r2, #255	@ 0xff
 800d39c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
	...

0800d3ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b086      	sub	sp, #24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3b4:	2182      	movs	r1, #130	@ 0x82
 800d3b6:	4818      	ldr	r0, [pc, #96]	@ (800d418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3b8:	f000 fd4f 	bl	800de5a <USBD_GetEpDesc>
 800d3bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3be:	2101      	movs	r1, #1
 800d3c0:	4815      	ldr	r0, [pc, #84]	@ (800d418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3c2:	f000 fd4a 	bl	800de5a <USBD_GetEpDesc>
 800d3c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3c8:	2181      	movs	r1, #129	@ 0x81
 800d3ca:	4813      	ldr	r0, [pc, #76]	@ (800d418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3cc:	f000 fd45 	bl	800de5a <USBD_GetEpDesc>
 800d3d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d002      	beq.n	800d3de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2210      	movs	r2, #16
 800d3dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d006      	beq.n	800d3f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d3ec:	711a      	strb	r2, [r3, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d006      	beq.n	800d406 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d400:	711a      	strb	r2, [r3, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2243      	movs	r2, #67	@ 0x43
 800d40a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d40c:	4b02      	ldr	r3, [pc, #8]	@ (800d418 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	24000058 	.word	0x24000058

0800d41c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b086      	sub	sp, #24
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d424:	2182      	movs	r1, #130	@ 0x82
 800d426:	4818      	ldr	r0, [pc, #96]	@ (800d488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d428:	f000 fd17 	bl	800de5a <USBD_GetEpDesc>
 800d42c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d42e:	2101      	movs	r1, #1
 800d430:	4815      	ldr	r0, [pc, #84]	@ (800d488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d432:	f000 fd12 	bl	800de5a <USBD_GetEpDesc>
 800d436:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d438:	2181      	movs	r1, #129	@ 0x81
 800d43a:	4813      	ldr	r0, [pc, #76]	@ (800d488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d43c:	f000 fd0d 	bl	800de5a <USBD_GetEpDesc>
 800d440:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d002      	beq.n	800d44e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	2210      	movs	r2, #16
 800d44c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d006      	beq.n	800d462 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	2200      	movs	r2, #0
 800d458:	711a      	strb	r2, [r3, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f042 0202 	orr.w	r2, r2, #2
 800d460:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d006      	beq.n	800d476 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	711a      	strb	r2, [r3, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	f042 0202 	orr.w	r2, r2, #2
 800d474:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2243      	movs	r2, #67	@ 0x43
 800d47a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d47c:	4b02      	ldr	r3, [pc, #8]	@ (800d488 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3718      	adds	r7, #24
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	24000058 	.word	0x24000058

0800d48c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b086      	sub	sp, #24
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d494:	2182      	movs	r1, #130	@ 0x82
 800d496:	4818      	ldr	r0, [pc, #96]	@ (800d4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d498:	f000 fcdf 	bl	800de5a <USBD_GetEpDesc>
 800d49c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d49e:	2101      	movs	r1, #1
 800d4a0:	4815      	ldr	r0, [pc, #84]	@ (800d4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4a2:	f000 fcda 	bl	800de5a <USBD_GetEpDesc>
 800d4a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4a8:	2181      	movs	r1, #129	@ 0x81
 800d4aa:	4813      	ldr	r0, [pc, #76]	@ (800d4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4ac:	f000 fcd5 	bl	800de5a <USBD_GetEpDesc>
 800d4b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d002      	beq.n	800d4be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	2210      	movs	r2, #16
 800d4bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d006      	beq.n	800d4d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4cc:	711a      	strb	r2, [r3, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d006      	beq.n	800d4e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4e0:	711a      	strb	r2, [r3, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2243      	movs	r2, #67	@ 0x43
 800d4ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d4ec:	4b02      	ldr	r3, [pc, #8]	@ (800d4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3718      	adds	r7, #24
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	24000058 	.word	0x24000058

0800d4fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	220a      	movs	r2, #10
 800d508:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d50a:	4b03      	ldr	r3, [pc, #12]	@ (800d518 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	370c      	adds	r7, #12
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	24000014 	.word	0x24000014

0800d51c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e009      	b.n	800d544 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	33b0      	adds	r3, #176	@ 0xb0
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	4413      	add	r3, r2
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d550:	b480      	push	{r7}
 800d552:	b087      	sub	sp, #28
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	32b0      	adds	r2, #176	@ 0xb0
 800d566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d56a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d101      	bne.n	800d576 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d572:	2303      	movs	r3, #3
 800d574:	e008      	b.n	800d588 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	371c      	adds	r7, #28
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	32b0      	adds	r2, #176	@ 0xb0
 800d5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d101      	bne.n	800d5b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	e004      	b.n	800d5c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	683a      	ldr	r2, [r7, #0]
 800d5bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3714      	adds	r7, #20
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr
	...

0800d5d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	32b0      	adds	r2, #176	@ 0xb0
 800d5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	e025      	b.n	800d642 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d11f      	bne.n	800d640 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2201      	movs	r2, #1
 800d604:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d608:	4b10      	ldr	r3, [pc, #64]	@ (800d64c <USBD_CDC_TransmitPacket+0x7c>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	f003 020f 	and.w	r2, r3, #15
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	4613      	mov	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	4413      	add	r3, r2
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	4403      	add	r3, r0
 800d622:	3318      	adds	r3, #24
 800d624:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d626:	4b09      	ldr	r3, [pc, #36]	@ (800d64c <USBD_CDC_TransmitPacket+0x7c>)
 800d628:	7819      	ldrb	r1, [r3, #0]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f002 fc3b 	bl	800feb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d640:	7bfb      	ldrb	r3, [r7, #15]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	2400009b 	.word	0x2400009b

0800d650 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	32b0      	adds	r2, #176	@ 0xb0
 800d662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d666:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	32b0      	adds	r2, #176	@ 0xb0
 800d672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d101      	bne.n	800d67e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e018      	b.n	800d6b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	7c1b      	ldrb	r3, [r3, #16]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10a      	bne.n	800d69c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d686:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b8 <USBD_CDC_ReceivePacket+0x68>)
 800d688:	7819      	ldrb	r1, [r3, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f002 fc2d 	bl	800fef4 <USBD_LL_PrepareReceive>
 800d69a:	e008      	b.n	800d6ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d69c:	4b06      	ldr	r3, [pc, #24]	@ (800d6b8 <USBD_CDC_ReceivePacket+0x68>)
 800d69e:	7819      	ldrb	r1, [r3, #0]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d6a6:	2340      	movs	r3, #64	@ 0x40
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f002 fc23 	bl	800fef4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3710      	adds	r7, #16
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	2400009c 	.word	0x2400009c

0800d6bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d101      	bne.n	800d6d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	e01f      	b.n	800d714 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d003      	beq.n	800d6fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	79fa      	ldrb	r2, [r7, #7]
 800d706:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f002 fa99 	bl	800fc40 <USBD_LL_Init>
 800d70e:	4603      	mov	r3, r0
 800d710:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d712:	7dfb      	ldrb	r3, [r7, #23]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3718      	adds	r7, #24
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d726:	2300      	movs	r3, #0
 800d728:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d730:	2303      	movs	r3, #3
 800d732:	e025      	b.n	800d780 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	32ae      	adds	r2, #174	@ 0xae
 800d746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00f      	beq.n	800d770 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	32ae      	adds	r2, #174	@ 0xae
 800d75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d760:	f107 020e 	add.w	r2, r7, #14
 800d764:	4610      	mov	r0, r2
 800d766:	4798      	blx	r3
 800d768:	4602      	mov	r2, r0
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d776:	1c5a      	adds	r2, r3, #1
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f002 faa5 	bl	800fce0 <USBD_LL_Start>
 800d796:	4603      	mov	r3, r0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	460b      	mov	r3, r1
 800d7c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d009      	beq.n	800d7e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	78fa      	ldrb	r2, [r7, #3]
 800d7da:	4611      	mov	r1, r2
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	4798      	blx	r3
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	78fa      	ldrb	r2, [r7, #3]
 800d808:	4611      	mov	r1, r2
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	4798      	blx	r3
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d814:	2303      	movs	r3, #3
 800d816:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d818:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
 800d82a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	f001 f936 	bl	800eaa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d848:	461a      	mov	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d856:	f003 031f 	and.w	r3, r3, #31
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d01a      	beq.n	800d894 <USBD_LL_SetupStage+0x72>
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d822      	bhi.n	800d8a8 <USBD_LL_SetupStage+0x86>
 800d862:	2b00      	cmp	r3, #0
 800d864:	d002      	beq.n	800d86c <USBD_LL_SetupStage+0x4a>
 800d866:	2b01      	cmp	r3, #1
 800d868:	d00a      	beq.n	800d880 <USBD_LL_SetupStage+0x5e>
 800d86a:	e01d      	b.n	800d8a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d872:	4619      	mov	r1, r3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fb63 	bl	800df40 <USBD_StdDevReq>
 800d87a:	4603      	mov	r3, r0
 800d87c:	73fb      	strb	r3, [r7, #15]
      break;
 800d87e:	e020      	b.n	800d8c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fbcb 	bl	800e024 <USBD_StdItfReq>
 800d88e:	4603      	mov	r3, r0
 800d890:	73fb      	strb	r3, [r7, #15]
      break;
 800d892:	e016      	b.n	800d8c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d89a:	4619      	mov	r1, r3
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 fc2d 	bl	800e0fc <USBD_StdEPReq>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a6:	e00c      	b.n	800d8c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d8ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f002 fa72 	bl	800fda0 <USBD_LL_StallEP>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73fb      	strb	r3, [r7, #15]
      break;
 800d8c0:	bf00      	nop
  }

  return ret;
 800d8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	607a      	str	r2, [r7, #4]
 800d8d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d8de:	7afb      	ldrb	r3, [r7, #11]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d16e      	bne.n	800d9c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d8ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	f040 8098 	bne.w	800da28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	689a      	ldr	r2, [r3, #8]
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	429a      	cmp	r2, r3
 800d902:	d913      	bls.n	800d92c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	689a      	ldr	r2, [r3, #8]
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	1ad2      	subs	r2, r2, r3
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	68da      	ldr	r2, [r3, #12]
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	4293      	cmp	r3, r2
 800d91c:	bf28      	it	cs
 800d91e:	4613      	movcs	r3, r2
 800d920:	461a      	mov	r2, r3
 800d922:	6879      	ldr	r1, [r7, #4]
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f001 f9b2 	bl	800ec8e <USBD_CtlContinueRx>
 800d92a:	e07d      	b.n	800da28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d932:	f003 031f 	and.w	r3, r3, #31
 800d936:	2b02      	cmp	r3, #2
 800d938:	d014      	beq.n	800d964 <USBD_LL_DataOutStage+0x98>
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	d81d      	bhi.n	800d97a <USBD_LL_DataOutStage+0xae>
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d002      	beq.n	800d948 <USBD_LL_DataOutStage+0x7c>
 800d942:	2b01      	cmp	r3, #1
 800d944:	d003      	beq.n	800d94e <USBD_LL_DataOutStage+0x82>
 800d946:	e018      	b.n	800d97a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d948:	2300      	movs	r3, #0
 800d94a:	75bb      	strb	r3, [r7, #22]
            break;
 800d94c:	e018      	b.n	800d980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d954:	b2db      	uxtb	r3, r3
 800d956:	4619      	mov	r1, r3
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f000 fa64 	bl	800de26 <USBD_CoreFindIF>
 800d95e:	4603      	mov	r3, r0
 800d960:	75bb      	strb	r3, [r7, #22]
            break;
 800d962:	e00d      	b.n	800d980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	4619      	mov	r1, r3
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f000 fa66 	bl	800de40 <USBD_CoreFindEP>
 800d974:	4603      	mov	r3, r0
 800d976:	75bb      	strb	r3, [r7, #22]
            break;
 800d978:	e002      	b.n	800d980 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d97a:	2300      	movs	r3, #0
 800d97c:	75bb      	strb	r3, [r7, #22]
            break;
 800d97e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d980:	7dbb      	ldrb	r3, [r7, #22]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d119      	bne.n	800d9ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d113      	bne.n	800d9ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d992:	7dba      	ldrb	r2, [r7, #22]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	32ae      	adds	r2, #174	@ 0xae
 800d998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00b      	beq.n	800d9ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d9a2:	7dba      	ldrb	r2, [r7, #22]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d9aa:	7dba      	ldrb	r2, [r7, #22]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	32ae      	adds	r2, #174	@ 0xae
 800d9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f001 f978 	bl	800ecb0 <USBD_CtlSendStatus>
 800d9c0:	e032      	b.n	800da28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d9c2:	7afb      	ldrb	r3, [r7, #11]
 800d9c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f000 fa37 	bl	800de40 <USBD_CoreFindEP>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9d6:	7dbb      	ldrb	r3, [r7, #22]
 800d9d8:	2bff      	cmp	r3, #255	@ 0xff
 800d9da:	d025      	beq.n	800da28 <USBD_LL_DataOutStage+0x15c>
 800d9dc:	7dbb      	ldrb	r3, [r7, #22]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d122      	bne.n	800da28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b03      	cmp	r3, #3
 800d9ec:	d117      	bne.n	800da1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d9ee:	7dba      	ldrb	r2, [r7, #22]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	32ae      	adds	r2, #174	@ 0xae
 800d9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00f      	beq.n	800da1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d9fe:	7dba      	ldrb	r2, [r7, #22]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800da06:	7dba      	ldrb	r2, [r7, #22]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	32ae      	adds	r2, #174	@ 0xae
 800da0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	7afa      	ldrb	r2, [r7, #11]
 800da14:	4611      	mov	r1, r2
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	4798      	blx	r3
 800da1a:	4603      	mov	r3, r0
 800da1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800da1e:	7dfb      	ldrb	r3, [r7, #23]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800da24:	7dfb      	ldrb	r3, [r7, #23]
 800da26:	e000      	b.n	800da2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b086      	sub	sp, #24
 800da36:	af00      	add	r7, sp, #0
 800da38:	60f8      	str	r0, [r7, #12]
 800da3a:	460b      	mov	r3, r1
 800da3c:	607a      	str	r2, [r7, #4]
 800da3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800da40:	7afb      	ldrb	r3, [r7, #11]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d16f      	bne.n	800db26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	3314      	adds	r3, #20
 800da4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800da52:	2b02      	cmp	r3, #2
 800da54:	d15a      	bne.n	800db0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	689a      	ldr	r2, [r3, #8]
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d914      	bls.n	800da8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	689a      	ldr	r2, [r3, #8]
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	1ad2      	subs	r2, r2, r3
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	461a      	mov	r2, r3
 800da76:	6879      	ldr	r1, [r7, #4]
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f001 f8da 	bl	800ec32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da7e:	2300      	movs	r3, #0
 800da80:	2200      	movs	r2, #0
 800da82:	2100      	movs	r1, #0
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f002 fa35 	bl	800fef4 <USBD_LL_PrepareReceive>
 800da8a:	e03f      	b.n	800db0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	68da      	ldr	r2, [r3, #12]
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	429a      	cmp	r2, r3
 800da96:	d11c      	bne.n	800dad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	685a      	ldr	r2, [r3, #4]
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d316      	bcc.n	800dad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	685a      	ldr	r2, [r3, #4]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800daae:	429a      	cmp	r2, r3
 800dab0:	d20f      	bcs.n	800dad2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dab2:	2200      	movs	r2, #0
 800dab4:	2100      	movs	r1, #0
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f001 f8bb 	bl	800ec32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dac4:	2300      	movs	r3, #0
 800dac6:	2200      	movs	r2, #0
 800dac8:	2100      	movs	r1, #0
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f002 fa12 	bl	800fef4 <USBD_LL_PrepareReceive>
 800dad0:	e01c      	b.n	800db0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d10f      	bne.n	800dafe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d009      	beq.n	800dafe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dafe:	2180      	movs	r1, #128	@ 0x80
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f002 f94d 	bl	800fda0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f001 f8e5 	bl	800ecd6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d03a      	beq.n	800db8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f7ff fe42 	bl	800d7a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800db24:	e032      	b.n	800db8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800db26:	7afb      	ldrb	r3, [r7, #11]
 800db28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	4619      	mov	r1, r3
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f000 f985 	bl	800de40 <USBD_CoreFindEP>
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	2bff      	cmp	r3, #255	@ 0xff
 800db3e:	d025      	beq.n	800db8c <USBD_LL_DataInStage+0x15a>
 800db40:	7dfb      	ldrb	r3, [r7, #23]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d122      	bne.n	800db8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b03      	cmp	r3, #3
 800db50:	d11c      	bne.n	800db8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db52:	7dfa      	ldrb	r2, [r7, #23]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	32ae      	adds	r2, #174	@ 0xae
 800db58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db5c:	695b      	ldr	r3, [r3, #20]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d014      	beq.n	800db8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db62:	7dfa      	ldrb	r2, [r7, #23]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db6a:	7dfa      	ldrb	r2, [r7, #23]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	32ae      	adds	r2, #174	@ 0xae
 800db70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	7afa      	ldrb	r2, [r7, #11]
 800db78:	4611      	mov	r1, r2
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	4798      	blx	r3
 800db7e:	4603      	mov	r3, r0
 800db80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800db82:	7dbb      	ldrb	r3, [r7, #22]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800db88:	7dbb      	ldrb	r3, [r7, #22]
 800db8a:	e000      	b.n	800db8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b084      	sub	sp, #16
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d014      	beq.n	800dbfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00e      	beq.n	800dbfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	6852      	ldr	r2, [r2, #4]
 800dbea:	b2d2      	uxtb	r2, r2
 800dbec:	4611      	mov	r1, r2
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	4798      	blx	r3
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dbf8:	2303      	movs	r3, #3
 800dbfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbfc:	2340      	movs	r3, #64	@ 0x40
 800dbfe:	2200      	movs	r2, #0
 800dc00:	2100      	movs	r1, #0
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f002 f887 	bl	800fd16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2240      	movs	r2, #64	@ 0x40
 800dc14:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc18:	2340      	movs	r3, #64	@ 0x40
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	2180      	movs	r1, #128	@ 0x80
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f002 f879 	bl	800fd16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2240      	movs	r2, #64	@ 0x40
 800dc2e:	621a      	str	r2, [r3, #32]

  return ret;
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc3a:	b480      	push	{r7}
 800dc3c:	b083      	sub	sp, #12
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	460b      	mov	r3, r1
 800dc44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	78fa      	ldrb	r2, [r7, #3]
 800dc4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b083      	sub	sp, #12
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	d006      	beq.n	800dc7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2204      	movs	r2, #4
 800dc80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b083      	sub	sp, #12
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	2b04      	cmp	r3, #4
 800dca4:	d106      	bne.n	800dcb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr

0800dcc2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b082      	sub	sp, #8
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b03      	cmp	r3, #3
 800dcd4:	d110      	bne.n	800dcf8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00b      	beq.n	800dcf8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dce6:	69db      	ldr	r3, [r3, #28]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d005      	beq.n	800dcf8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcf2:	69db      	ldr	r3, [r3, #28]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	32ae      	adds	r2, #174	@ 0xae
 800dd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd20:	2303      	movs	r3, #3
 800dd22:	e01c      	b.n	800dd5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	2b03      	cmp	r3, #3
 800dd2e:	d115      	bne.n	800dd5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	32ae      	adds	r2, #174	@ 0xae
 800dd3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd3e:	6a1b      	ldr	r3, [r3, #32]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d00b      	beq.n	800dd5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	32ae      	adds	r2, #174	@ 0xae
 800dd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd52:	6a1b      	ldr	r3, [r3, #32]
 800dd54:	78fa      	ldrb	r2, [r7, #3]
 800dd56:	4611      	mov	r1, r2
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b082      	sub	sp, #8
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
 800dd6e:	460b      	mov	r3, r1
 800dd70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	32ae      	adds	r2, #174	@ 0xae
 800dd7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d101      	bne.n	800dd88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd84:	2303      	movs	r3, #3
 800dd86:	e01c      	b.n	800ddc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	2b03      	cmp	r3, #3
 800dd92:	d115      	bne.n	800ddc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	32ae      	adds	r2, #174	@ 0xae
 800dd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00b      	beq.n	800ddc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	32ae      	adds	r2, #174	@ 0xae
 800ddb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddb8:	78fa      	ldrb	r2, [r7, #3]
 800ddba:	4611      	mov	r1, r2
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ddca:	b480      	push	{r7}
 800ddcc:	b083      	sub	sp, #12
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00e      	beq.n	800de1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	6852      	ldr	r2, [r2, #4]
 800de0a:	b2d2      	uxtb	r2, r2
 800de0c:	4611      	mov	r1, r2
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	4798      	blx	r3
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d001      	beq.n	800de1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800de18:	2303      	movs	r3, #3
 800de1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800de1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de26:	b480      	push	{r7}
 800de28:	b083      	sub	sp, #12
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	460b      	mov	r3, r1
 800de30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de34:	4618      	mov	r0, r3
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	460b      	mov	r3, r1
 800de4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de4e:	4618      	mov	r0, r3
 800de50:	370c      	adds	r7, #12
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b086      	sub	sp, #24
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
 800de62:	460b      	mov	r3, r1
 800de64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800de6e:	2300      	movs	r3, #0
 800de70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	885b      	ldrh	r3, [r3, #2]
 800de76:	b29b      	uxth	r3, r3
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	7812      	ldrb	r2, [r2, #0]
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d91f      	bls.n	800dec0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800de86:	e013      	b.n	800deb0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800de88:	f107 030a 	add.w	r3, r7, #10
 800de8c:	4619      	mov	r1, r3
 800de8e:	6978      	ldr	r0, [r7, #20]
 800de90:	f000 f81b 	bl	800deca <USBD_GetNextDesc>
 800de94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	785b      	ldrb	r3, [r3, #1]
 800de9a:	2b05      	cmp	r3, #5
 800de9c:	d108      	bne.n	800deb0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	789b      	ldrb	r3, [r3, #2]
 800dea6:	78fa      	ldrb	r2, [r7, #3]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d008      	beq.n	800debe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800deac:	2300      	movs	r3, #0
 800deae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	885b      	ldrh	r3, [r3, #2]
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	897b      	ldrh	r3, [r7, #10]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d8e5      	bhi.n	800de88 <USBD_GetEpDesc+0x2e>
 800debc:	e000      	b.n	800dec0 <USBD_GetEpDesc+0x66>
          break;
 800debe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dec0:	693b      	ldr	r3, [r7, #16]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3718      	adds	r7, #24
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800deca:	b480      	push	{r7}
 800decc:	b085      	sub	sp, #20
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
 800ded2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	881b      	ldrh	r3, [r3, #0]
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	7812      	ldrb	r2, [r2, #0]
 800dee0:	4413      	add	r3, r2
 800dee2:	b29a      	uxth	r2, r3
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	461a      	mov	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4413      	add	r3, r2
 800def2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800def4:	68fb      	ldr	r3, [r7, #12]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800df02:	b480      	push	{r7}
 800df04:	b087      	sub	sp, #28
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	3301      	adds	r3, #1
 800df18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800df20:	8a3b      	ldrh	r3, [r7, #16]
 800df22:	021b      	lsls	r3, r3, #8
 800df24:	b21a      	sxth	r2, r3
 800df26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	b21b      	sxth	r3, r3
 800df2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800df30:	89fb      	ldrh	r3, [r7, #14]
}
 800df32:	4618      	mov	r0, r3
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
	...

0800df40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df56:	2b40      	cmp	r3, #64	@ 0x40
 800df58:	d005      	beq.n	800df66 <USBD_StdDevReq+0x26>
 800df5a:	2b40      	cmp	r3, #64	@ 0x40
 800df5c:	d857      	bhi.n	800e00e <USBD_StdDevReq+0xce>
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00f      	beq.n	800df82 <USBD_StdDevReq+0x42>
 800df62:	2b20      	cmp	r3, #32
 800df64:	d153      	bne.n	800e00e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	32ae      	adds	r2, #174	@ 0xae
 800df70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	6839      	ldr	r1, [r7, #0]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	4798      	blx	r3
 800df7c:	4603      	mov	r3, r0
 800df7e:	73fb      	strb	r3, [r7, #15]
      break;
 800df80:	e04a      	b.n	800e018 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	785b      	ldrb	r3, [r3, #1]
 800df86:	2b09      	cmp	r3, #9
 800df88:	d83b      	bhi.n	800e002 <USBD_StdDevReq+0xc2>
 800df8a:	a201      	add	r2, pc, #4	@ (adr r2, 800df90 <USBD_StdDevReq+0x50>)
 800df8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df90:	0800dfe5 	.word	0x0800dfe5
 800df94:	0800dff9 	.word	0x0800dff9
 800df98:	0800e003 	.word	0x0800e003
 800df9c:	0800dfef 	.word	0x0800dfef
 800dfa0:	0800e003 	.word	0x0800e003
 800dfa4:	0800dfc3 	.word	0x0800dfc3
 800dfa8:	0800dfb9 	.word	0x0800dfb9
 800dfac:	0800e003 	.word	0x0800e003
 800dfb0:	0800dfdb 	.word	0x0800dfdb
 800dfb4:	0800dfcd 	.word	0x0800dfcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dfb8:	6839      	ldr	r1, [r7, #0]
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fa3c 	bl	800e438 <USBD_GetDescriptor>
          break;
 800dfc0:	e024      	b.n	800e00c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dfc2:	6839      	ldr	r1, [r7, #0]
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 fbcb 	bl	800e760 <USBD_SetAddress>
          break;
 800dfca:	e01f      	b.n	800e00c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dfcc:	6839      	ldr	r1, [r7, #0]
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 fc0a 	bl	800e7e8 <USBD_SetConfig>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	73fb      	strb	r3, [r7, #15]
          break;
 800dfd8:	e018      	b.n	800e00c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dfda:	6839      	ldr	r1, [r7, #0]
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 fcad 	bl	800e93c <USBD_GetConfig>
          break;
 800dfe2:	e013      	b.n	800e00c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dfe4:	6839      	ldr	r1, [r7, #0]
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 fcde 	bl	800e9a8 <USBD_GetStatus>
          break;
 800dfec:	e00e      	b.n	800e00c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dfee:	6839      	ldr	r1, [r7, #0]
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 fd0d 	bl	800ea10 <USBD_SetFeature>
          break;
 800dff6:	e009      	b.n	800e00c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dff8:	6839      	ldr	r1, [r7, #0]
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 fd31 	bl	800ea62 <USBD_ClrFeature>
          break;
 800e000:	e004      	b.n	800e00c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e002:	6839      	ldr	r1, [r7, #0]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 fd88 	bl	800eb1a <USBD_CtlError>
          break;
 800e00a:	bf00      	nop
      }
      break;
 800e00c:	e004      	b.n	800e018 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e00e:	6839      	ldr	r1, [r7, #0]
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 fd82 	bl	800eb1a <USBD_CtlError>
      break;
 800e016:	bf00      	nop
  }

  return ret;
 800e018:	7bfb      	ldrb	r3, [r7, #15]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop

0800e024 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e02e:	2300      	movs	r3, #0
 800e030:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e03a:	2b40      	cmp	r3, #64	@ 0x40
 800e03c:	d005      	beq.n	800e04a <USBD_StdItfReq+0x26>
 800e03e:	2b40      	cmp	r3, #64	@ 0x40
 800e040:	d852      	bhi.n	800e0e8 <USBD_StdItfReq+0xc4>
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <USBD_StdItfReq+0x26>
 800e046:	2b20      	cmp	r3, #32
 800e048:	d14e      	bne.n	800e0e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e050:	b2db      	uxtb	r3, r3
 800e052:	3b01      	subs	r3, #1
 800e054:	2b02      	cmp	r3, #2
 800e056:	d840      	bhi.n	800e0da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	889b      	ldrh	r3, [r3, #4]
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d836      	bhi.n	800e0d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	889b      	ldrh	r3, [r3, #4]
 800e066:	b2db      	uxtb	r3, r3
 800e068:	4619      	mov	r1, r3
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7ff fedb 	bl	800de26 <USBD_CoreFindIF>
 800e070:	4603      	mov	r3, r0
 800e072:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e074:	7bbb      	ldrb	r3, [r7, #14]
 800e076:	2bff      	cmp	r3, #255	@ 0xff
 800e078:	d01d      	beq.n	800e0b6 <USBD_StdItfReq+0x92>
 800e07a:	7bbb      	ldrb	r3, [r7, #14]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d11a      	bne.n	800e0b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e080:	7bba      	ldrb	r2, [r7, #14]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	32ae      	adds	r2, #174	@ 0xae
 800e086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00f      	beq.n	800e0b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e090:	7bba      	ldrb	r2, [r7, #14]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e098:	7bba      	ldrb	r2, [r7, #14]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	32ae      	adds	r2, #174	@ 0xae
 800e09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	4798      	blx	r3
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0ae:	e004      	b.n	800e0ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e0b0:	2303      	movs	r3, #3
 800e0b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0b4:	e001      	b.n	800e0ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	88db      	ldrh	r3, [r3, #6]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d110      	bne.n	800e0e4 <USBD_StdItfReq+0xc0>
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10d      	bne.n	800e0e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 fdf1 	bl	800ecb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e0ce:	e009      	b.n	800e0e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e0d0:	6839      	ldr	r1, [r7, #0]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fd21 	bl	800eb1a <USBD_CtlError>
          break;
 800e0d8:	e004      	b.n	800e0e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e0da:	6839      	ldr	r1, [r7, #0]
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 fd1c 	bl	800eb1a <USBD_CtlError>
          break;
 800e0e2:	e000      	b.n	800e0e6 <USBD_StdItfReq+0xc2>
          break;
 800e0e4:	bf00      	nop
      }
      break;
 800e0e6:	e004      	b.n	800e0f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e0e8:	6839      	ldr	r1, [r7, #0]
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 fd15 	bl	800eb1a <USBD_CtlError>
      break;
 800e0f0:	bf00      	nop
  }

  return ret;
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	889b      	ldrh	r3, [r3, #4]
 800e10e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e118:	2b40      	cmp	r3, #64	@ 0x40
 800e11a:	d007      	beq.n	800e12c <USBD_StdEPReq+0x30>
 800e11c:	2b40      	cmp	r3, #64	@ 0x40
 800e11e:	f200 817f 	bhi.w	800e420 <USBD_StdEPReq+0x324>
 800e122:	2b00      	cmp	r3, #0
 800e124:	d02a      	beq.n	800e17c <USBD_StdEPReq+0x80>
 800e126:	2b20      	cmp	r3, #32
 800e128:	f040 817a 	bne.w	800e420 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e12c:	7bbb      	ldrb	r3, [r7, #14]
 800e12e:	4619      	mov	r1, r3
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7ff fe85 	bl	800de40 <USBD_CoreFindEP>
 800e136:	4603      	mov	r3, r0
 800e138:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e13a:	7b7b      	ldrb	r3, [r7, #13]
 800e13c:	2bff      	cmp	r3, #255	@ 0xff
 800e13e:	f000 8174 	beq.w	800e42a <USBD_StdEPReq+0x32e>
 800e142:	7b7b      	ldrb	r3, [r7, #13]
 800e144:	2b00      	cmp	r3, #0
 800e146:	f040 8170 	bne.w	800e42a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e14a:	7b7a      	ldrb	r2, [r7, #13]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e152:	7b7a      	ldrb	r2, [r7, #13]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	32ae      	adds	r2, #174	@ 0xae
 800e158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 8163 	beq.w	800e42a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e164:	7b7a      	ldrb	r2, [r7, #13]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	32ae      	adds	r2, #174	@ 0xae
 800e16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	4798      	blx	r3
 800e176:	4603      	mov	r3, r0
 800e178:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e17a:	e156      	b.n	800e42a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	785b      	ldrb	r3, [r3, #1]
 800e180:	2b03      	cmp	r3, #3
 800e182:	d008      	beq.n	800e196 <USBD_StdEPReq+0x9a>
 800e184:	2b03      	cmp	r3, #3
 800e186:	f300 8145 	bgt.w	800e414 <USBD_StdEPReq+0x318>
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f000 809b 	beq.w	800e2c6 <USBD_StdEPReq+0x1ca>
 800e190:	2b01      	cmp	r3, #1
 800e192:	d03c      	beq.n	800e20e <USBD_StdEPReq+0x112>
 800e194:	e13e      	b.n	800e414 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d002      	beq.n	800e1a8 <USBD_StdEPReq+0xac>
 800e1a2:	2b03      	cmp	r3, #3
 800e1a4:	d016      	beq.n	800e1d4 <USBD_StdEPReq+0xd8>
 800e1a6:	e02c      	b.n	800e202 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1a8:	7bbb      	ldrb	r3, [r7, #14]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00d      	beq.n	800e1ca <USBD_StdEPReq+0xce>
 800e1ae:	7bbb      	ldrb	r3, [r7, #14]
 800e1b0:	2b80      	cmp	r3, #128	@ 0x80
 800e1b2:	d00a      	beq.n	800e1ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1b4:	7bbb      	ldrb	r3, [r7, #14]
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f001 fdf1 	bl	800fda0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1be:	2180      	movs	r1, #128	@ 0x80
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f001 fded 	bl	800fda0 <USBD_LL_StallEP>
 800e1c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1c8:	e020      	b.n	800e20c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 fca4 	bl	800eb1a <USBD_CtlError>
              break;
 800e1d2:	e01b      	b.n	800e20c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	885b      	ldrh	r3, [r3, #2]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10e      	bne.n	800e1fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00b      	beq.n	800e1fa <USBD_StdEPReq+0xfe>
 800e1e2:	7bbb      	ldrb	r3, [r7, #14]
 800e1e4:	2b80      	cmp	r3, #128	@ 0x80
 800e1e6:	d008      	beq.n	800e1fa <USBD_StdEPReq+0xfe>
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	88db      	ldrh	r3, [r3, #6]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d104      	bne.n	800e1fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1f0:	7bbb      	ldrb	r3, [r7, #14]
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f001 fdd3 	bl	800fda0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 fd58 	bl	800ecb0 <USBD_CtlSendStatus>

              break;
 800e200:	e004      	b.n	800e20c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e202:	6839      	ldr	r1, [r7, #0]
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 fc88 	bl	800eb1a <USBD_CtlError>
              break;
 800e20a:	bf00      	nop
          }
          break;
 800e20c:	e107      	b.n	800e41e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e214:	b2db      	uxtb	r3, r3
 800e216:	2b02      	cmp	r3, #2
 800e218:	d002      	beq.n	800e220 <USBD_StdEPReq+0x124>
 800e21a:	2b03      	cmp	r3, #3
 800e21c:	d016      	beq.n	800e24c <USBD_StdEPReq+0x150>
 800e21e:	e04b      	b.n	800e2b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e220:	7bbb      	ldrb	r3, [r7, #14]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00d      	beq.n	800e242 <USBD_StdEPReq+0x146>
 800e226:	7bbb      	ldrb	r3, [r7, #14]
 800e228:	2b80      	cmp	r3, #128	@ 0x80
 800e22a:	d00a      	beq.n	800e242 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e22c:	7bbb      	ldrb	r3, [r7, #14]
 800e22e:	4619      	mov	r1, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f001 fdb5 	bl	800fda0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e236:	2180      	movs	r1, #128	@ 0x80
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f001 fdb1 	bl	800fda0 <USBD_LL_StallEP>
 800e23e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e240:	e040      	b.n	800e2c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 fc68 	bl	800eb1a <USBD_CtlError>
              break;
 800e24a:	e03b      	b.n	800e2c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	885b      	ldrh	r3, [r3, #2]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d136      	bne.n	800e2c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e254:	7bbb      	ldrb	r3, [r7, #14]
 800e256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d004      	beq.n	800e268 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e25e:	7bbb      	ldrb	r3, [r7, #14]
 800e260:	4619      	mov	r1, r3
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f001 fdbb 	bl	800fdde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 fd21 	bl	800ecb0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e26e:	7bbb      	ldrb	r3, [r7, #14]
 800e270:	4619      	mov	r1, r3
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7ff fde4 	bl	800de40 <USBD_CoreFindEP>
 800e278:	4603      	mov	r3, r0
 800e27a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e27c:	7b7b      	ldrb	r3, [r7, #13]
 800e27e:	2bff      	cmp	r3, #255	@ 0xff
 800e280:	d01f      	beq.n	800e2c2 <USBD_StdEPReq+0x1c6>
 800e282:	7b7b      	ldrb	r3, [r7, #13]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d11c      	bne.n	800e2c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e288:	7b7a      	ldrb	r2, [r7, #13]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e290:	7b7a      	ldrb	r2, [r7, #13]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	32ae      	adds	r2, #174	@ 0xae
 800e296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d010      	beq.n	800e2c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e2a0:	7b7a      	ldrb	r2, [r7, #13]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	32ae      	adds	r2, #174	@ 0xae
 800e2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	4798      	blx	r3
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e2b6:	e004      	b.n	800e2c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e2b8:	6839      	ldr	r1, [r7, #0]
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 fc2d 	bl	800eb1a <USBD_CtlError>
              break;
 800e2c0:	e000      	b.n	800e2c4 <USBD_StdEPReq+0x1c8>
              break;
 800e2c2:	bf00      	nop
          }
          break;
 800e2c4:	e0ab      	b.n	800e41e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	d002      	beq.n	800e2d8 <USBD_StdEPReq+0x1dc>
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d032      	beq.n	800e33c <USBD_StdEPReq+0x240>
 800e2d6:	e097      	b.n	800e408 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2d8:	7bbb      	ldrb	r3, [r7, #14]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d007      	beq.n	800e2ee <USBD_StdEPReq+0x1f2>
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	2b80      	cmp	r3, #128	@ 0x80
 800e2e2:	d004      	beq.n	800e2ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 fc17 	bl	800eb1a <USBD_CtlError>
                break;
 800e2ec:	e091      	b.n	800e412 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	da0b      	bge.n	800e30e <USBD_StdEPReq+0x212>
 800e2f6:	7bbb      	ldrb	r3, [r7, #14]
 800e2f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	4413      	add	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	3310      	adds	r3, #16
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	4413      	add	r3, r2
 800e30a:	3304      	adds	r3, #4
 800e30c:	e00b      	b.n	800e326 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e30e:	7bbb      	ldrb	r3, [r7, #14]
 800e310:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e314:	4613      	mov	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4413      	add	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	4413      	add	r3, r2
 800e324:	3304      	adds	r3, #4
 800e326:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	2200      	movs	r2, #0
 800e32c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	2202      	movs	r2, #2
 800e332:	4619      	mov	r1, r3
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fc61 	bl	800ebfc <USBD_CtlSendData>
              break;
 800e33a:	e06a      	b.n	800e412 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e33c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e340:	2b00      	cmp	r3, #0
 800e342:	da11      	bge.n	800e368 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e344:	7bbb      	ldrb	r3, [r7, #14]
 800e346:	f003 020f 	and.w	r2, r3, #15
 800e34a:	6879      	ldr	r1, [r7, #4]
 800e34c:	4613      	mov	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4413      	add	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	440b      	add	r3, r1
 800e356:	3324      	adds	r3, #36	@ 0x24
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d117      	bne.n	800e38e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e35e:	6839      	ldr	r1, [r7, #0]
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 fbda 	bl	800eb1a <USBD_CtlError>
                  break;
 800e366:	e054      	b.n	800e412 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e368:	7bbb      	ldrb	r3, [r7, #14]
 800e36a:	f003 020f 	and.w	r2, r3, #15
 800e36e:	6879      	ldr	r1, [r7, #4]
 800e370:	4613      	mov	r3, r2
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	4413      	add	r3, r2
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	440b      	add	r3, r1
 800e37a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e37e:	881b      	ldrh	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d104      	bne.n	800e38e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e384:	6839      	ldr	r1, [r7, #0]
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 fbc7 	bl	800eb1a <USBD_CtlError>
                  break;
 800e38c:	e041      	b.n	800e412 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e38e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e392:	2b00      	cmp	r3, #0
 800e394:	da0b      	bge.n	800e3ae <USBD_StdEPReq+0x2b2>
 800e396:	7bbb      	ldrb	r3, [r7, #14]
 800e398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e39c:	4613      	mov	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4413      	add	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	3310      	adds	r3, #16
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	e00b      	b.n	800e3c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
 800e3b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d002      	beq.n	800e3d4 <USBD_StdEPReq+0x2d8>
 800e3ce:	7bbb      	ldrb	r3, [r7, #14]
 800e3d0:	2b80      	cmp	r3, #128	@ 0x80
 800e3d2:	d103      	bne.n	800e3dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	601a      	str	r2, [r3, #0]
 800e3da:	e00e      	b.n	800e3fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e3dc:	7bbb      	ldrb	r3, [r7, #14]
 800e3de:	4619      	mov	r1, r3
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f001 fd1b 	bl	800fe1c <USBD_LL_IsStallEP>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d003      	beq.n	800e3f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	601a      	str	r2, [r3, #0]
 800e3f2:	e002      	b.n	800e3fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	2202      	movs	r2, #2
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fbfb 	bl	800ebfc <USBD_CtlSendData>
              break;
 800e406:	e004      	b.n	800e412 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e408:	6839      	ldr	r1, [r7, #0]
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fb85 	bl	800eb1a <USBD_CtlError>
              break;
 800e410:	bf00      	nop
          }
          break;
 800e412:	e004      	b.n	800e41e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 fb7f 	bl	800eb1a <USBD_CtlError>
          break;
 800e41c:	bf00      	nop
      }
      break;
 800e41e:	e005      	b.n	800e42c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e420:	6839      	ldr	r1, [r7, #0]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fb79 	bl	800eb1a <USBD_CtlError>
      break;
 800e428:	e000      	b.n	800e42c <USBD_StdEPReq+0x330>
      break;
 800e42a:	bf00      	nop
  }

  return ret;
 800e42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
	...

0800e438 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e442:	2300      	movs	r3, #0
 800e444:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e446:	2300      	movs	r3, #0
 800e448:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e44a:	2300      	movs	r3, #0
 800e44c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	885b      	ldrh	r3, [r3, #2]
 800e452:	0a1b      	lsrs	r3, r3, #8
 800e454:	b29b      	uxth	r3, r3
 800e456:	3b01      	subs	r3, #1
 800e458:	2b0e      	cmp	r3, #14
 800e45a:	f200 8152 	bhi.w	800e702 <USBD_GetDescriptor+0x2ca>
 800e45e:	a201      	add	r2, pc, #4	@ (adr r2, 800e464 <USBD_GetDescriptor+0x2c>)
 800e460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e464:	0800e4d5 	.word	0x0800e4d5
 800e468:	0800e4ed 	.word	0x0800e4ed
 800e46c:	0800e52d 	.word	0x0800e52d
 800e470:	0800e703 	.word	0x0800e703
 800e474:	0800e703 	.word	0x0800e703
 800e478:	0800e6a3 	.word	0x0800e6a3
 800e47c:	0800e6cf 	.word	0x0800e6cf
 800e480:	0800e703 	.word	0x0800e703
 800e484:	0800e703 	.word	0x0800e703
 800e488:	0800e703 	.word	0x0800e703
 800e48c:	0800e703 	.word	0x0800e703
 800e490:	0800e703 	.word	0x0800e703
 800e494:	0800e703 	.word	0x0800e703
 800e498:	0800e703 	.word	0x0800e703
 800e49c:	0800e4a1 	.word	0x0800e4a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4a6:	69db      	ldr	r3, [r3, #28]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d00b      	beq.n	800e4c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4b2:	69db      	ldr	r3, [r3, #28]
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	7c12      	ldrb	r2, [r2, #16]
 800e4b8:	f107 0108 	add.w	r1, r7, #8
 800e4bc:	4610      	mov	r0, r2
 800e4be:	4798      	blx	r3
 800e4c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4c2:	e126      	b.n	800e712 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e4c4:	6839      	ldr	r1, [r7, #0]
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 fb27 	bl	800eb1a <USBD_CtlError>
        err++;
 800e4cc:	7afb      	ldrb	r3, [r7, #11]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	72fb      	strb	r3, [r7, #11]
      break;
 800e4d2:	e11e      	b.n	800e712 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	7c12      	ldrb	r2, [r2, #16]
 800e4e0:	f107 0108 	add.w	r1, r7, #8
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	4798      	blx	r3
 800e4e8:	60f8      	str	r0, [r7, #12]
      break;
 800e4ea:	e112      	b.n	800e712 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	7c1b      	ldrb	r3, [r3, #16]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d10d      	bne.n	800e510 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4fc:	f107 0208 	add.w	r2, r7, #8
 800e500:	4610      	mov	r0, r2
 800e502:	4798      	blx	r3
 800e504:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	3301      	adds	r3, #1
 800e50a:	2202      	movs	r2, #2
 800e50c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e50e:	e100      	b.n	800e712 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e518:	f107 0208 	add.w	r2, r7, #8
 800e51c:	4610      	mov	r0, r2
 800e51e:	4798      	blx	r3
 800e520:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3301      	adds	r3, #1
 800e526:	2202      	movs	r2, #2
 800e528:	701a      	strb	r2, [r3, #0]
      break;
 800e52a:	e0f2      	b.n	800e712 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	885b      	ldrh	r3, [r3, #2]
 800e530:	b2db      	uxtb	r3, r3
 800e532:	2b05      	cmp	r3, #5
 800e534:	f200 80ac 	bhi.w	800e690 <USBD_GetDescriptor+0x258>
 800e538:	a201      	add	r2, pc, #4	@ (adr r2, 800e540 <USBD_GetDescriptor+0x108>)
 800e53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53e:	bf00      	nop
 800e540:	0800e559 	.word	0x0800e559
 800e544:	0800e58d 	.word	0x0800e58d
 800e548:	0800e5c1 	.word	0x0800e5c1
 800e54c:	0800e5f5 	.word	0x0800e5f5
 800e550:	0800e629 	.word	0x0800e629
 800e554:	0800e65d 	.word	0x0800e65d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00b      	beq.n	800e57c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	7c12      	ldrb	r2, [r2, #16]
 800e570:	f107 0108 	add.w	r1, r7, #8
 800e574:	4610      	mov	r0, r2
 800e576:	4798      	blx	r3
 800e578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e57a:	e091      	b.n	800e6a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 facb 	bl	800eb1a <USBD_CtlError>
            err++;
 800e584:	7afb      	ldrb	r3, [r7, #11]
 800e586:	3301      	adds	r3, #1
 800e588:	72fb      	strb	r3, [r7, #11]
          break;
 800e58a:	e089      	b.n	800e6a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00b      	beq.n	800e5b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e59e:	689b      	ldr	r3, [r3, #8]
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	7c12      	ldrb	r2, [r2, #16]
 800e5a4:	f107 0108 	add.w	r1, r7, #8
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	4798      	blx	r3
 800e5ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5ae:	e077      	b.n	800e6a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5b0:	6839      	ldr	r1, [r7, #0]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fab1 	bl	800eb1a <USBD_CtlError>
            err++;
 800e5b8:	7afb      	ldrb	r3, [r7, #11]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e5be:	e06f      	b.n	800e6a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00b      	beq.n	800e5e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	7c12      	ldrb	r2, [r2, #16]
 800e5d8:	f107 0108 	add.w	r1, r7, #8
 800e5dc:	4610      	mov	r0, r2
 800e5de:	4798      	blx	r3
 800e5e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5e2:	e05d      	b.n	800e6a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5e4:	6839      	ldr	r1, [r7, #0]
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 fa97 	bl	800eb1a <USBD_CtlError>
            err++;
 800e5ec:	7afb      	ldrb	r3, [r7, #11]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e5f2:	e055      	b.n	800e6a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5fa:	691b      	ldr	r3, [r3, #16]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00b      	beq.n	800e618 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e606:	691b      	ldr	r3, [r3, #16]
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	7c12      	ldrb	r2, [r2, #16]
 800e60c:	f107 0108 	add.w	r1, r7, #8
 800e610:	4610      	mov	r0, r2
 800e612:	4798      	blx	r3
 800e614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e616:	e043      	b.n	800e6a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e618:	6839      	ldr	r1, [r7, #0]
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 fa7d 	bl	800eb1a <USBD_CtlError>
            err++;
 800e620:	7afb      	ldrb	r3, [r7, #11]
 800e622:	3301      	adds	r3, #1
 800e624:	72fb      	strb	r3, [r7, #11]
          break;
 800e626:	e03b      	b.n	800e6a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e62e:	695b      	ldr	r3, [r3, #20]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00b      	beq.n	800e64c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e63a:	695b      	ldr	r3, [r3, #20]
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	7c12      	ldrb	r2, [r2, #16]
 800e640:	f107 0108 	add.w	r1, r7, #8
 800e644:	4610      	mov	r0, r2
 800e646:	4798      	blx	r3
 800e648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e64a:	e029      	b.n	800e6a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e64c:	6839      	ldr	r1, [r7, #0]
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 fa63 	bl	800eb1a <USBD_CtlError>
            err++;
 800e654:	7afb      	ldrb	r3, [r7, #11]
 800e656:	3301      	adds	r3, #1
 800e658:	72fb      	strb	r3, [r7, #11]
          break;
 800e65a:	e021      	b.n	800e6a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00b      	beq.n	800e680 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e66e:	699b      	ldr	r3, [r3, #24]
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	7c12      	ldrb	r2, [r2, #16]
 800e674:	f107 0108 	add.w	r1, r7, #8
 800e678:	4610      	mov	r0, r2
 800e67a:	4798      	blx	r3
 800e67c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e67e:	e00f      	b.n	800e6a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fa49 	bl	800eb1a <USBD_CtlError>
            err++;
 800e688:	7afb      	ldrb	r3, [r7, #11]
 800e68a:	3301      	adds	r3, #1
 800e68c:	72fb      	strb	r3, [r7, #11]
          break;
 800e68e:	e007      	b.n	800e6a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e690:	6839      	ldr	r1, [r7, #0]
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 fa41 	bl	800eb1a <USBD_CtlError>
          err++;
 800e698:	7afb      	ldrb	r3, [r7, #11]
 800e69a:	3301      	adds	r3, #1
 800e69c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e69e:	bf00      	nop
      }
      break;
 800e6a0:	e037      	b.n	800e712 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	7c1b      	ldrb	r3, [r3, #16]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d109      	bne.n	800e6be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6b2:	f107 0208 	add.w	r2, r7, #8
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	4798      	blx	r3
 800e6ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6bc:	e029      	b.n	800e712 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e6be:	6839      	ldr	r1, [r7, #0]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 fa2a 	bl	800eb1a <USBD_CtlError>
        err++;
 800e6c6:	7afb      	ldrb	r3, [r7, #11]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e6cc:	e021      	b.n	800e712 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	7c1b      	ldrb	r3, [r3, #16]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10d      	bne.n	800e6f2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6de:	f107 0208 	add.w	r2, r7, #8
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	4798      	blx	r3
 800e6e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	2207      	movs	r2, #7
 800e6ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6f0:	e00f      	b.n	800e712 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e6f2:	6839      	ldr	r1, [r7, #0]
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 fa10 	bl	800eb1a <USBD_CtlError>
        err++;
 800e6fa:	7afb      	ldrb	r3, [r7, #11]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	72fb      	strb	r3, [r7, #11]
      break;
 800e700:	e007      	b.n	800e712 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e702:	6839      	ldr	r1, [r7, #0]
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 fa08 	bl	800eb1a <USBD_CtlError>
      err++;
 800e70a:	7afb      	ldrb	r3, [r7, #11]
 800e70c:	3301      	adds	r3, #1
 800e70e:	72fb      	strb	r3, [r7, #11]
      break;
 800e710:	bf00      	nop
  }

  if (err != 0U)
 800e712:	7afb      	ldrb	r3, [r7, #11]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d11e      	bne.n	800e756 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	88db      	ldrh	r3, [r3, #6]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d016      	beq.n	800e74e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e720:	893b      	ldrh	r3, [r7, #8]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00e      	beq.n	800e744 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	88da      	ldrh	r2, [r3, #6]
 800e72a:	893b      	ldrh	r3, [r7, #8]
 800e72c:	4293      	cmp	r3, r2
 800e72e:	bf28      	it	cs
 800e730:	4613      	movcs	r3, r2
 800e732:	b29b      	uxth	r3, r3
 800e734:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e736:	893b      	ldrh	r3, [r7, #8]
 800e738:	461a      	mov	r2, r3
 800e73a:	68f9      	ldr	r1, [r7, #12]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fa5d 	bl	800ebfc <USBD_CtlSendData>
 800e742:	e009      	b.n	800e758 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f9e7 	bl	800eb1a <USBD_CtlError>
 800e74c:	e004      	b.n	800e758 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 faae 	bl	800ecb0 <USBD_CtlSendStatus>
 800e754:	e000      	b.n	800e758 <USBD_GetDescriptor+0x320>
    return;
 800e756:	bf00      	nop
  }
}
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop

0800e760 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	889b      	ldrh	r3, [r3, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d131      	bne.n	800e7d6 <USBD_SetAddress+0x76>
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	88db      	ldrh	r3, [r3, #6]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d12d      	bne.n	800e7d6 <USBD_SetAddress+0x76>
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	885b      	ldrh	r3, [r3, #2]
 800e77e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e780:	d829      	bhi.n	800e7d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	885b      	ldrh	r3, [r3, #2]
 800e786:	b2db      	uxtb	r3, r3
 800e788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e78c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e794:	b2db      	uxtb	r3, r3
 800e796:	2b03      	cmp	r3, #3
 800e798:	d104      	bne.n	800e7a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 f9bc 	bl	800eb1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7a2:	e01d      	b.n	800e7e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	7bfa      	ldrb	r2, [r7, #15]
 800e7a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e7ac:	7bfb      	ldrb	r3, [r7, #15]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f001 fb5f 	bl	800fe74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 fa7a 	bl	800ecb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d004      	beq.n	800e7cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2202      	movs	r2, #2
 800e7c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ca:	e009      	b.n	800e7e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7d4:	e004      	b.n	800e7e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e7d6:	6839      	ldr	r1, [r7, #0]
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 f99e 	bl	800eb1a <USBD_CtlError>
  }
}
 800e7de:	bf00      	nop
 800e7e0:	bf00      	nop
 800e7e2:	3710      	adds	r7, #16
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	885b      	ldrh	r3, [r3, #2]
 800e7fa:	b2da      	uxtb	r2, r3
 800e7fc:	4b4e      	ldr	r3, [pc, #312]	@ (800e938 <USBD_SetConfig+0x150>)
 800e7fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e800:	4b4d      	ldr	r3, [pc, #308]	@ (800e938 <USBD_SetConfig+0x150>)
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d905      	bls.n	800e814 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e808:	6839      	ldr	r1, [r7, #0]
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 f985 	bl	800eb1a <USBD_CtlError>
    return USBD_FAIL;
 800e810:	2303      	movs	r3, #3
 800e812:	e08c      	b.n	800e92e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	2b02      	cmp	r3, #2
 800e81e:	d002      	beq.n	800e826 <USBD_SetConfig+0x3e>
 800e820:	2b03      	cmp	r3, #3
 800e822:	d029      	beq.n	800e878 <USBD_SetConfig+0x90>
 800e824:	e075      	b.n	800e912 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e826:	4b44      	ldr	r3, [pc, #272]	@ (800e938 <USBD_SetConfig+0x150>)
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d020      	beq.n	800e870 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e82e:	4b42      	ldr	r3, [pc, #264]	@ (800e938 <USBD_SetConfig+0x150>)
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	461a      	mov	r2, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e838:	4b3f      	ldr	r3, [pc, #252]	@ (800e938 <USBD_SetConfig+0x150>)
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	4619      	mov	r1, r3
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f7fe ffb9 	bl	800d7b6 <USBD_SetClassConfig>
 800e844:	4603      	mov	r3, r0
 800e846:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e848:	7bfb      	ldrb	r3, [r7, #15]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d008      	beq.n	800e860 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e84e:	6839      	ldr	r1, [r7, #0]
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 f962 	bl	800eb1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2202      	movs	r2, #2
 800e85a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e85e:	e065      	b.n	800e92c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 fa25 	bl	800ecb0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2203      	movs	r2, #3
 800e86a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e86e:	e05d      	b.n	800e92c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 fa1d 	bl	800ecb0 <USBD_CtlSendStatus>
      break;
 800e876:	e059      	b.n	800e92c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e878:	4b2f      	ldr	r3, [pc, #188]	@ (800e938 <USBD_SetConfig+0x150>)
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d112      	bne.n	800e8a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2202      	movs	r2, #2
 800e884:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e888:	4b2b      	ldr	r3, [pc, #172]	@ (800e938 <USBD_SetConfig+0x150>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	461a      	mov	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e892:	4b29      	ldr	r3, [pc, #164]	@ (800e938 <USBD_SetConfig+0x150>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	4619      	mov	r1, r3
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f7fe ffa8 	bl	800d7ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 fa06 	bl	800ecb0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8a4:	e042      	b.n	800e92c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e8a6:	4b24      	ldr	r3, [pc, #144]	@ (800e938 <USBD_SetConfig+0x150>)
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d02a      	beq.n	800e90a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7fe ff96 	bl	800d7ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e8c2:	4b1d      	ldr	r3, [pc, #116]	@ (800e938 <USBD_SetConfig+0x150>)
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8cc:	4b1a      	ldr	r3, [pc, #104]	@ (800e938 <USBD_SetConfig+0x150>)
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7fe ff6f 	bl	800d7b6 <USBD_SetClassConfig>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e8dc:	7bfb      	ldrb	r3, [r7, #15]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00f      	beq.n	800e902 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e8e2:	6839      	ldr	r1, [r7, #0]
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 f918 	bl	800eb1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f7fe ff7b 	bl	800d7ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2202      	movs	r2, #2
 800e8fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e900:	e014      	b.n	800e92c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 f9d4 	bl	800ecb0 <USBD_CtlSendStatus>
      break;
 800e908:	e010      	b.n	800e92c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 f9d0 	bl	800ecb0 <USBD_CtlSendStatus>
      break;
 800e910:	e00c      	b.n	800e92c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e912:	6839      	ldr	r1, [r7, #0]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 f900 	bl	800eb1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e91a:	4b07      	ldr	r3, [pc, #28]	@ (800e938 <USBD_SetConfig+0x150>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	4619      	mov	r1, r3
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f7fe ff64 	bl	800d7ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e926:	2303      	movs	r3, #3
 800e928:	73fb      	strb	r3, [r7, #15]
      break;
 800e92a:	bf00      	nop
  }

  return ret;
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	240003b4 	.word	0x240003b4

0800e93c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	88db      	ldrh	r3, [r3, #6]
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d004      	beq.n	800e958 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e94e:	6839      	ldr	r1, [r7, #0]
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 f8e2 	bl	800eb1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e956:	e023      	b.n	800e9a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b02      	cmp	r3, #2
 800e962:	dc02      	bgt.n	800e96a <USBD_GetConfig+0x2e>
 800e964:	2b00      	cmp	r3, #0
 800e966:	dc03      	bgt.n	800e970 <USBD_GetConfig+0x34>
 800e968:	e015      	b.n	800e996 <USBD_GetConfig+0x5a>
 800e96a:	2b03      	cmp	r3, #3
 800e96c:	d00b      	beq.n	800e986 <USBD_GetConfig+0x4a>
 800e96e:	e012      	b.n	800e996 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	3308      	adds	r3, #8
 800e97a:	2201      	movs	r2, #1
 800e97c:	4619      	mov	r1, r3
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 f93c 	bl	800ebfc <USBD_CtlSendData>
        break;
 800e984:	e00c      	b.n	800e9a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	3304      	adds	r3, #4
 800e98a:	2201      	movs	r2, #1
 800e98c:	4619      	mov	r1, r3
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f934 	bl	800ebfc <USBD_CtlSendData>
        break;
 800e994:	e004      	b.n	800e9a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 f8be 	bl	800eb1a <USBD_CtlError>
        break;
 800e99e:	bf00      	nop
}
 800e9a0:	bf00      	nop
 800e9a2:	3708      	adds	r7, #8
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	2b02      	cmp	r3, #2
 800e9be:	d81e      	bhi.n	800e9fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	88db      	ldrh	r3, [r3, #6]
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d004      	beq.n	800e9d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e9c8:	6839      	ldr	r1, [r7, #0]
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 f8a5 	bl	800eb1a <USBD_CtlError>
        break;
 800e9d0:	e01a      	b.n	800ea08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d005      	beq.n	800e9ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	f043 0202 	orr.w	r2, r3, #2
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	330c      	adds	r3, #12
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f900 	bl	800ebfc <USBD_CtlSendData>
      break;
 800e9fc:	e004      	b.n	800ea08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e9fe:	6839      	ldr	r1, [r7, #0]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 f88a 	bl	800eb1a <USBD_CtlError>
      break;
 800ea06:	bf00      	nop
  }
}
 800ea08:	bf00      	nop
 800ea0a:	3708      	adds	r7, #8
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	885b      	ldrh	r3, [r3, #2]
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d107      	bne.n	800ea32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2201      	movs	r2, #1
 800ea26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 f940 	bl	800ecb0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ea30:	e013      	b.n	800ea5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	885b      	ldrh	r3, [r3, #2]
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d10b      	bne.n	800ea52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	889b      	ldrh	r3, [r3, #4]
 800ea3e:	0a1b      	lsrs	r3, r3, #8
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f930 	bl	800ecb0 <USBD_CtlSendStatus>
}
 800ea50:	e003      	b.n	800ea5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ea52:	6839      	ldr	r1, [r7, #0]
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 f860 	bl	800eb1a <USBD_CtlError>
}
 800ea5a:	bf00      	nop
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b082      	sub	sp, #8
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
 800ea6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	3b01      	subs	r3, #1
 800ea76:	2b02      	cmp	r3, #2
 800ea78:	d80b      	bhi.n	800ea92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	885b      	ldrh	r3, [r3, #2]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d10c      	bne.n	800ea9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 f910 	bl	800ecb0 <USBD_CtlSendStatus>
      }
      break;
 800ea90:	e004      	b.n	800ea9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ea92:	6839      	ldr	r1, [r7, #0]
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 f840 	bl	800eb1a <USBD_CtlError>
      break;
 800ea9a:	e000      	b.n	800ea9e <USBD_ClrFeature+0x3c>
      break;
 800ea9c:	bf00      	nop
  }
}
 800ea9e:	bf00      	nop
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b084      	sub	sp, #16
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	781a      	ldrb	r2, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	3301      	adds	r3, #1
 800eac0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	781a      	ldrb	r2, [r3, #0]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	3301      	adds	r3, #1
 800eace:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f7ff fa16 	bl	800df02 <SWAPBYTE>
 800ead6:	4603      	mov	r3, r0
 800ead8:	461a      	mov	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	3301      	adds	r3, #1
 800eae2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	3301      	adds	r3, #1
 800eae8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f7ff fa09 	bl	800df02 <SWAPBYTE>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	3301      	adds	r3, #1
 800eafc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	3301      	adds	r3, #1
 800eb02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f7ff f9fc 	bl	800df02 <SWAPBYTE>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	80da      	strh	r2, [r3, #6]
}
 800eb12:	bf00      	nop
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b082      	sub	sp, #8
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb24:	2180      	movs	r1, #128	@ 0x80
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f001 f93a 	bl	800fda0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f001 f936 	bl	800fda0 <USBD_LL_StallEP>
}
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d036      	beq.n	800ebc0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eb56:	6938      	ldr	r0, [r7, #16]
 800eb58:	f000 f836 	bl	800ebc8 <USBD_GetLen>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	3301      	adds	r3, #1
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	005b      	lsls	r3, r3, #1
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb6a:	7dfb      	ldrb	r3, [r7, #23]
 800eb6c:	68ba      	ldr	r2, [r7, #8]
 800eb6e:	4413      	add	r3, r2
 800eb70:	687a      	ldr	r2, [r7, #4]
 800eb72:	7812      	ldrb	r2, [r2, #0]
 800eb74:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb76:	7dfb      	ldrb	r3, [r7, #23]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb7c:	7dfb      	ldrb	r3, [r7, #23]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	4413      	add	r3, r2
 800eb82:	2203      	movs	r2, #3
 800eb84:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb86:	7dfb      	ldrb	r3, [r7, #23]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eb8c:	e013      	b.n	800ebb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eb8e:	7dfb      	ldrb	r3, [r7, #23]
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	4413      	add	r3, r2
 800eb94:	693a      	ldr	r2, [r7, #16]
 800eb96:	7812      	ldrb	r2, [r2, #0]
 800eb98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	613b      	str	r3, [r7, #16]
    idx++;
 800eba0:	7dfb      	ldrb	r3, [r7, #23]
 800eba2:	3301      	adds	r3, #1
 800eba4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
 800eba8:	68ba      	ldr	r2, [r7, #8]
 800ebaa:	4413      	add	r3, r2
 800ebac:	2200      	movs	r2, #0
 800ebae:	701a      	strb	r2, [r3, #0]
    idx++;
 800ebb0:	7dfb      	ldrb	r3, [r7, #23]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1e7      	bne.n	800eb8e <USBD_GetString+0x52>
 800ebbe:	e000      	b.n	800ebc2 <USBD_GetString+0x86>
    return;
 800ebc0:	bf00      	nop
  }
}
 800ebc2:	3718      	adds	r7, #24
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ebd8:	e005      	b.n	800ebe6 <USBD_GetLen+0x1e>
  {
    len++;
 800ebda:	7bfb      	ldrb	r3, [r7, #15]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1f5      	bne.n	800ebda <USBD_GetLen+0x12>
  }

  return len;
 800ebee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	68ba      	ldr	r2, [r7, #8]
 800ec20:	2100      	movs	r1, #0
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	f001 f945 	bl	800feb2 <USBD_LL_Transmit>

  return USBD_OK;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b084      	sub	sp, #16
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	60f8      	str	r0, [r7, #12]
 800ec3a:	60b9      	str	r1, [r7, #8]
 800ec3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	68ba      	ldr	r2, [r7, #8]
 800ec42:	2100      	movs	r1, #0
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f001 f934 	bl	800feb2 <USBD_LL_Transmit>

  return USBD_OK;
 800ec4a:	2300      	movs	r3, #0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2203      	movs	r2, #3
 800ec64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	68ba      	ldr	r2, [r7, #8]
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f001 f938 	bl	800fef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b084      	sub	sp, #16
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	60f8      	str	r0, [r7, #12]
 800ec96:	60b9      	str	r1, [r7, #8]
 800ec98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	2100      	movs	r1, #0
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f001 f927 	bl	800fef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eca6:	2300      	movs	r3, #0
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2204      	movs	r2, #4
 800ecbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f001 f8f3 	bl	800feb2 <USBD_LL_Transmit>

  return USBD_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b082      	sub	sp, #8
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2205      	movs	r2, #5
 800ece2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ece6:	2300      	movs	r3, #0
 800ece8:	2200      	movs	r2, #0
 800ecea:	2100      	movs	r1, #0
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f001 f901 	bl	800fef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ecf2:	2300      	movs	r3, #0
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <OLED_WR_Byte>:
//[7]0 1 2 3 ... 127
// 向SSD1306写入一个字节
// dat:要写入的数据/命令
// cmd:数据/命令标志 0，表示命令；1，表示数据
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	4603      	mov	r3, r0
 800ed04:	460a      	mov	r2, r1
 800ed06:	71fb      	strb	r3, [r7, #7]
 800ed08:	4613      	mov	r3, r2
 800ed0a:	71bb      	strb	r3, [r7, #6]
	if (cmd)
 800ed0c:	79bb      	ldrb	r3, [r7, #6]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d005      	beq.n	800ed1e <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set(); // 命令/数据标志位置为1，则表示传送的是命令字节
 800ed12:	2201      	movs	r2, #1
 800ed14:	2140      	movs	r1, #64	@ 0x40
 800ed16:	4811      	ldr	r0, [pc, #68]	@ (800ed5c <OLED_WR_Byte+0x60>)
 800ed18:	f7f5 fb5a 	bl	80043d0 <HAL_GPIO_WritePin>
 800ed1c:	e004      	b.n	800ed28 <OLED_WR_Byte+0x2c>
	}
	else
		OLED_DC_Clr();						 // 命令/数据标志位置为0，则表示传送的是数据字节
 800ed1e:	2200      	movs	r2, #0
 800ed20:	2140      	movs	r1, #64	@ 0x40
 800ed22:	480e      	ldr	r0, [pc, #56]	@ (800ed5c <OLED_WR_Byte+0x60>)
 800ed24:	f7f5 fb54 	bl	80043d0 <HAL_GPIO_WritePin>
	OLED_CS_Clr();							 // 片选信号为低，表示选中OLED
 800ed28:	2200      	movs	r2, #0
 800ed2a:	2102      	movs	r1, #2
 800ed2c:	480c      	ldr	r0, [pc, #48]	@ (800ed60 <OLED_WR_Byte+0x64>)
 800ed2e:	f7f5 fb4f 	bl	80043d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000); // oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 800ed32:	1df9      	adds	r1, r7, #7
 800ed34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ed38:	2201      	movs	r2, #1
 800ed3a:	480a      	ldr	r0, [pc, #40]	@ (800ed64 <OLED_WR_Byte+0x68>)
 800ed3c:	f7fa fdda 	bl	80098f4 <HAL_SPI_Transmit>
	OLED_CS_Set();
 800ed40:	2201      	movs	r2, #1
 800ed42:	2102      	movs	r1, #2
 800ed44:	4806      	ldr	r0, [pc, #24]	@ (800ed60 <OLED_WR_Byte+0x64>)
 800ed46:	f7f5 fb43 	bl	80043d0 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	2140      	movs	r1, #64	@ 0x40
 800ed4e:	4803      	ldr	r0, [pc, #12]	@ (800ed5c <OLED_WR_Byte+0x60>)
 800ed50:	f7f5 fb3e 	bl	80043d0 <HAL_GPIO_WritePin>
}
 800ed54:	bf00      	nop
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	58022000 	.word	0x58022000
 800ed60:	58020400 	.word	0x58020400
 800ed64:	24000240 	.word	0x24000240

0800ed68 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4603      	mov	r3, r0
 800ed70:	460a      	mov	r2, r1
 800ed72:	71fb      	strb	r3, [r7, #7]
 800ed74:	4613      	mov	r3, r2
 800ed76:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0 + y, OLED_CMD);
 800ed78:	79bb      	ldrb	r3, [r7, #6]
 800ed7a:	3b50      	subs	r3, #80	@ 0x50
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	2100      	movs	r1, #0
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7ff ffbb 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte((((x + 2) & 0xf0) >> 4) | 0x10, OLED_CMD);
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	3302      	adds	r3, #2
 800ed8a:	111b      	asrs	r3, r3, #4
 800ed8c:	b25b      	sxtb	r3, r3
 800ed8e:	f003 030f 	and.w	r3, r3, #15
 800ed92:	b25b      	sxtb	r3, r3
 800ed94:	f043 0310 	orr.w	r3, r3, #16
 800ed98:	b25b      	sxtb	r3, r3
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff ffac 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(((x + 2) & 0x0f), OLED_CMD);
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	3302      	adds	r3, #2
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	f003 030f 	and.w	r3, r3, #15
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	2100      	movs	r1, #0
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7ff ffa2 	bl	800ecfc <OLED_WR_Byte>
}
 800edb8:	bf00      	nop
 800edba:	3708      	adds	r7, #8
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <OLED_Clear>:
	OLED_WR_Byte(0X10, OLED_CMD); // 关闭电荷泵
	OLED_WR_Byte(0XAE, OLED_CMD); // DISPLAY OFF
}
// 清屏函数，清完后整个屏幕都是黑色的，没有一点光亮
void OLED_Clear(void)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800edc6:	2300      	movs	r3, #0
 800edc8:	71fb      	strb	r3, [r7, #7]
 800edca:	e01f      	b.n	800ee0c <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置页地址
 800edcc:	79fb      	ldrb	r3, [r7, #7]
 800edce:	3b50      	subs	r3, #80	@ 0x50
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	2100      	movs	r1, #0
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7ff ff91 	bl	800ecfc <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);	  // 设置起始列低地址
 800edda:	2100      	movs	r1, #0
 800eddc:	2002      	movs	r0, #2
 800edde:	f7ff ff8d 	bl	800ecfc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置起始列高地址
 800ede2:	2100      	movs	r1, #0
 800ede4:	2010      	movs	r0, #16
 800ede6:	f7ff ff89 	bl	800ecfc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800edea:	2300      	movs	r3, #0
 800edec:	71bb      	strb	r3, [r7, #6]
 800edee:	e006      	b.n	800edfe <OLED_Clear+0x3e>
			OLED_WR_Byte(0, OLED_DATA);
 800edf0:	2101      	movs	r1, #1
 800edf2:	2000      	movs	r0, #0
 800edf4:	f7ff ff82 	bl	800ecfc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800edf8:	79bb      	ldrb	r3, [r7, #6]
 800edfa:	3301      	adds	r3, #1
 800edfc:	71bb      	strb	r3, [r7, #6]
 800edfe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	daf4      	bge.n	800edf0 <OLED_Clear+0x30>
	for (i = 0; i < 8; i++)
 800ee06:	79fb      	ldrb	r3, [r7, #7]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	71fb      	strb	r3, [r7, #7]
 800ee0c:	79fb      	ldrb	r3, [r7, #7]
 800ee0e:	2b07      	cmp	r3, #7
 800ee10:	d9dc      	bls.n	800edcc <OLED_Clear+0xc>
	} // 更新显示
}
 800ee12:	bf00      	nop
 800ee14:	bf00      	nop
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <OLED_ShowChar>:
// x:0~127
// y:0~6
// mode:0,反白显示；1，正常显示
// size:选择字体大小 16/12
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	4603      	mov	r3, r0
 800ee24:	71fb      	strb	r3, [r7, #7]
 800ee26:	460b      	mov	r3, r1
 800ee28:	71bb      	strb	r3, [r7, #6]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0, i = 0;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	73bb      	strb	r3, [r7, #14]
 800ee32:	2300      	movs	r3, #0
 800ee34:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; // 得到偏移后的值
 800ee36:	797b      	ldrb	r3, [r7, #5]
 800ee38:	3b20      	subs	r3, #32
 800ee3a:	73bb      	strb	r3, [r7, #14]
	if (x > Max_Column - 1)
 800ee3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	da04      	bge.n	800ee4e <OLED_ShowChar+0x32>
	{
		x = 0;
 800ee44:	2300      	movs	r3, #0
 800ee46:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 800ee48:	79bb      	ldrb	r3, [r7, #6]
 800ee4a:	3302      	adds	r3, #2
 800ee4c:	71bb      	strb	r3, [r7, #6]
	}
	if (SIZE == 16)
	{
		OLED_Set_Pos(x, y);
 800ee4e:	79ba      	ldrb	r2, [r7, #6]
 800ee50:	79fb      	ldrb	r3, [r7, #7]
 800ee52:	4611      	mov	r1, r2
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7ff ff87 	bl	800ed68 <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	73fb      	strb	r3, [r7, #15]
 800ee5e:	e00c      	b.n	800ee7a <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 800ee60:	7bbb      	ldrb	r3, [r7, #14]
 800ee62:	011a      	lsls	r2, r3, #4
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
 800ee66:	4413      	add	r3, r2
 800ee68:	4a16      	ldr	r2, [pc, #88]	@ (800eec4 <OLED_ShowChar+0xa8>)
 800ee6a:	5cd3      	ldrb	r3, [r2, r3]
 800ee6c:	2101      	movs	r1, #1
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7ff ff44 	bl	800ecfc <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 800ee74:	7bfb      	ldrb	r3, [r7, #15]
 800ee76:	3301      	adds	r3, #1
 800ee78:	73fb      	strb	r3, [r7, #15]
 800ee7a:	7bfb      	ldrb	r3, [r7, #15]
 800ee7c:	2b07      	cmp	r3, #7
 800ee7e:	d9ef      	bls.n	800ee60 <OLED_ShowChar+0x44>
		OLED_Set_Pos(x, y + 1);
 800ee80:	79bb      	ldrb	r3, [r7, #6]
 800ee82:	3301      	adds	r3, #1
 800ee84:	b2da      	uxtb	r2, r3
 800ee86:	79fb      	ldrb	r3, [r7, #7]
 800ee88:	4611      	mov	r1, r2
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7ff ff6c 	bl	800ed68 <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 800ee90:	2300      	movs	r3, #0
 800ee92:	73fb      	strb	r3, [r7, #15]
 800ee94:	e00d      	b.n	800eeb2 <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 800ee96:	7bbb      	ldrb	r3, [r7, #14]
 800ee98:	011a      	lsls	r2, r3, #4
 800ee9a:	7bfb      	ldrb	r3, [r7, #15]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	3308      	adds	r3, #8
 800eea0:	4a08      	ldr	r2, [pc, #32]	@ (800eec4 <OLED_ShowChar+0xa8>)
 800eea2:	5cd3      	ldrb	r3, [r2, r3]
 800eea4:	2101      	movs	r1, #1
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff ff28 	bl	800ecfc <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	73fb      	strb	r3, [r7, #15]
 800eeb2:	7bfb      	ldrb	r3, [r7, #15]
 800eeb4:	2b07      	cmp	r3, #7
 800eeb6:	d9ee      	bls.n	800ee96 <OLED_ShowChar+0x7a>
	{
		OLED_Set_Pos(x, y + 1);
		for (i = 0; i < 6; i++)
			OLED_WR_Byte(F6x8[c][i], OLED_DATA);
	}
}
 800eeb8:	bf00      	nop
 800eeba:	bf00      	nop
 800eebc:	3710      	adds	r7, #16
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	08010d30 	.word	0x08010d30

0800eec8 <OLED_ShowString>:
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0');
	}
}
// 显示一个字符串
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	4603      	mov	r3, r0
 800eed0:	603a      	str	r2, [r7, #0]
 800eed2:	71fb      	strb	r3, [r7, #7]
 800eed4:	460b      	mov	r3, r1
 800eed6:	71bb      	strb	r3, [r7, #6]
	unsigned char j = 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 800eedc:	e016      	b.n	800ef0c <OLED_ShowString+0x44>
	{
		OLED_ShowChar(x, y, chr[j]);
 800eede:	7bfb      	ldrb	r3, [r7, #15]
 800eee0:	683a      	ldr	r2, [r7, #0]
 800eee2:	4413      	add	r3, r2
 800eee4:	781a      	ldrb	r2, [r3, #0]
 800eee6:	79b9      	ldrb	r1, [r7, #6]
 800eee8:	79fb      	ldrb	r3, [r7, #7]
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7ff ff96 	bl	800ee1c <OLED_ShowChar>
		x += 8;
 800eef0:	79fb      	ldrb	r3, [r7, #7]
 800eef2:	3308      	adds	r3, #8
 800eef4:	71fb      	strb	r3, [r7, #7]
		if (x > 120)
 800eef6:	79fb      	ldrb	r3, [r7, #7]
 800eef8:	2b78      	cmp	r3, #120	@ 0x78
 800eefa:	d904      	bls.n	800ef06 <OLED_ShowString+0x3e>
		{
			x = 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	71fb      	strb	r3, [r7, #7]
			y += 2;
 800ef00:	79bb      	ldrb	r3, [r7, #6]
 800ef02:	3302      	adds	r3, #2
 800ef04:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 800ef0c:	7bfb      	ldrb	r3, [r7, #15]
 800ef0e:	683a      	ldr	r2, [r7, #0]
 800ef10:	4413      	add	r3, r2
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1e2      	bne.n	800eede <OLED_ShowString+0x16>
	}
}
 800ef18:	bf00      	nop
 800ef1a:	bf00      	nop
 800ef1c:	3710      	adds	r7, #16
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
	...

0800ef24 <OLED_Init>:
	}
}

// 初始化SSD1306
void OLED_Init(void)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	af00      	add	r7, sp, #0
	// 复位OLED
	OLED_RST_Clr(); // 拉低复位引脚
 800ef28:	2200      	movs	r2, #0
 800ef2a:	2120      	movs	r1, #32
 800ef2c:	4841      	ldr	r0, [pc, #260]	@ (800f034 <OLED_Init+0x110>)
 800ef2e:	f7f5 fa4f 	bl	80043d0 <HAL_GPIO_WritePin>
	HAL_Delay(200); // 延时200毫秒
 800ef32:	20c8      	movs	r0, #200	@ 0xc8
 800ef34:	f7f2 fcac 	bl	8001890 <HAL_Delay>
	OLED_RST_Set(); // 拉高复位引脚
 800ef38:	2201      	movs	r2, #1
 800ef3a:	2120      	movs	r1, #32
 800ef3c:	483d      	ldr	r0, [pc, #244]	@ (800f034 <OLED_Init+0x110>)
 800ef3e:	f7f5 fa47 	bl	80043d0 <HAL_GPIO_WritePin>

	// 关闭OLED面板
	OLED_WR_Byte(0xAE, OLED_CMD); // 关闭面板指令
 800ef42:	2100      	movs	r1, #0
 800ef44:	20ae      	movs	r0, #174	@ 0xae
 800ef46:	f7ff fed9 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // 设置低列地址
 800ef4a:	2100      	movs	r1, #0
 800ef4c:	2002      	movs	r0, #2
 800ef4e:	f7ff fed5 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址
 800ef52:	2100      	movs	r1, #0
 800ef54:	2010      	movs	r0, #16
 800ef56:	f7ff fed1 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置起始行地址，映射RAM显示起始行（0x00~0x3F）
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	2040      	movs	r0, #64	@ 0x40
 800ef5e:	f7ff fecd 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); // 设置对比度控制寄存器
 800ef62:	2100      	movs	r1, #0
 800ef64:	2081      	movs	r0, #129	@ 0x81
 800ef66:	f7ff fec9 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // 设置SEG输出电流亮度
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	20cf      	movs	r0, #207	@ 0xcf
 800ef6e:	f7ff fec5 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // 设置SEG/列映射，0Xa0左右反置，0Xa1正常
 800ef72:	2100      	movs	r1, #0
 800ef74:	20a1      	movs	r0, #161	@ 0xa1
 800ef76:	f7ff fec1 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // 设置COM/行扫描方向，0Xc0上下反置，0Xc8正常
 800ef7a:	2100      	movs	r1, #0
 800ef7c:	20c8      	movs	r0, #200	@ 0xc8
 800ef7e:	f7ff febd 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 设置正常显示
 800ef82:	2100      	movs	r1, #0
 800ef84:	20a6      	movs	r0, #166	@ 0xa6
 800ef86:	f7ff feb9 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // 设置多路复用比（1到64）
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	20a8      	movs	r0, #168	@ 0xa8
 800ef8e:	f7ff feb5 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); // 1/64 duty
 800ef92:	2100      	movs	r1, #0
 800ef94:	203f      	movs	r0, #63	@ 0x3f
 800ef96:	f7ff feb1 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // 设置显示偏移，移动映射RAM计数器（0x00~0x3F）
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	20d3      	movs	r0, #211	@ 0xd3
 800ef9e:	f7ff fead 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); // 不偏移
 800efa2:	2100      	movs	r1, #0
 800efa4:	2000      	movs	r0, #0
 800efa6:	f7ff fea9 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); // 设置显示时钟分频比/振荡器频率
 800efaa:	2100      	movs	r1, #0
 800efac:	20d5      	movs	r0, #213	@ 0xd5
 800efae:	f7ff fea5 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); // 设置分频比，设置时钟为100帧/秒
 800efb2:	2100      	movs	r1, #0
 800efb4:	2080      	movs	r0, #128	@ 0x80
 800efb6:	f7ff fea1 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // 设置预充电周期
 800efba:	2100      	movs	r1, #0
 800efbc:	20d9      	movs	r0, #217	@ 0xd9
 800efbe:	f7ff fe9d 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // 设置预充电为15个时钟，放电为1个时钟
 800efc2:	2100      	movs	r1, #0
 800efc4:	20f1      	movs	r0, #241	@ 0xf1
 800efc6:	f7ff fe99 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // 设置COM引脚硬件配置
 800efca:	2100      	movs	r1, #0
 800efcc:	20da      	movs	r0, #218	@ 0xda
 800efce:	f7ff fe95 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800efd2:	2100      	movs	r1, #0
 800efd4:	2012      	movs	r0, #18
 800efd6:	f7ff fe91 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // 设置vcomh
 800efda:	2100      	movs	r1, #0
 800efdc:	20db      	movs	r0, #219	@ 0xdb
 800efde:	f7ff fe8d 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置VCOM取消电平
 800efe2:	2100      	movs	r1, #0
 800efe4:	2040      	movs	r0, #64	@ 0x40
 800efe6:	f7ff fe89 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // 设置页面寻址模式（0x00/0x01/0x02）
 800efea:	2100      	movs	r1, #0
 800efec:	2020      	movs	r0, #32
 800efee:	f7ff fe85 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);
 800eff2:	2100      	movs	r1, #0
 800eff4:	2002      	movs	r0, #2
 800eff6:	f7ff fe81 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); // 设置充电泵使能/禁用
 800effa:	2100      	movs	r1, #0
 800effc:	208d      	movs	r0, #141	@ 0x8d
 800effe:	f7ff fe7d 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // 设置（0x10）禁用
 800f002:	2100      	movs	r1, #0
 800f004:	2014      	movs	r0, #20
 800f006:	f7ff fe79 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // 禁用整个显示（0xa4/0xa5）
 800f00a:	2100      	movs	r1, #0
 800f00c:	20a4      	movs	r0, #164	@ 0xa4
 800f00e:	f7ff fe75 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 禁用反相显示（0xa6/a7）
 800f012:	2100      	movs	r1, #0
 800f014:	20a6      	movs	r0, #166	@ 0xa6
 800f016:	f7ff fe71 	bl	800ecfc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // 打开OLED面板
 800f01a:	2100      	movs	r1, #0
 800f01c:	20af      	movs	r0, #175	@ 0xaf
 800f01e:	f7ff fe6d 	bl	800ecfc <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*显示开*/
 800f022:	2100      	movs	r1, #0
 800f024:	20af      	movs	r0, #175	@ 0xaf
 800f026:	f7ff fe69 	bl	800ecfc <OLED_WR_Byte>
	OLED_Clear();				  // 清除显示
 800f02a:	f7ff fec9 	bl	800edc0 <OLED_Clear>
}
 800f02e:	bf00      	nop
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	58020800 	.word	0x58020800

0800f038 <pll_Init>:
 * @param config: 配置指针
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 800f038:	b480      	push	{r7}
 800f03a:	b085      	sub	sp, #20
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	ed87 0a01 	vstr	s0, [r7, #4]
 800f046:	4613      	mov	r3, r2
 800f048:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f04f 0200 	mov.w	r2, #0
 800f050:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f04f 0200 	mov.w	r2, #0
 800f058:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f04f 0200 	mov.w	r2, #0
 800f060:	609a      	str	r2, [r3, #8]

    signal->sogi_a_1 = 0.f;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f04f 0200 	mov.w	r2, #0
 800f068:	611a      	str	r2, [r3, #16]
    signal->sogi_a_2 = 0.f;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f04f 0200 	mov.w	r2, #0
 800f070:	615a      	str	r2, [r3, #20]

    signal->sogi_b_1 = 0.f;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f04f 0200 	mov.w	r2, #0
 800f078:	61da      	str	r2, [r3, #28]
    signal->sogi_b_2 = 0.f;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f04f 0200 	mov.w	r2, #0
 800f080:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f04f 0200 	mov.w	r2, #0
 800f088:	635a      	str	r2, [r3, #52]	@ 0x34

    config->omiga = 2 * PI * f; // f典型值50
 800f08a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f08e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f1f4 <pll_Init+0x1bc>
 800f092:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 800f09c:	887b      	ldrh	r3, [r7, #2]
 800f09e:	ee07 3a90 	vmov	s15, r3
 800f0a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f0aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	4a50      	ldr	r2, [pc, #320]	@ (800f1f8 <pll_Init+0x1c0>)
 800f0b8:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	f04f 0200 	mov.w	r2, #0
 800f0c0:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	edd3 7a00 	vldr	s15, [r3]
 800f0c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f0cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	edd3 7a02 	vldr	s15, [r3, #8]
 800f0e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	edd3 7a00 	vldr	s15, [r3]
 800f0f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	ed93 7a00 	vldr	s14, [r3]
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f110:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	edd3 7a00 	vldr	s15, [r3]
 800f11a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	edd3 7a01 	vldr	s15, [r3, #4]
 800f124:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f140:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f144:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f14c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f15c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f160:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800f164:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f174:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f178:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f17c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f19a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f19e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f1ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1b2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f1b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	4a0d      	ldr	r2, [pc, #52]	@ (800f1fc <pll_Init+0x1c4>)
 800f1c8:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	4a0c      	ldr	r2, [pc, #48]	@ (800f200 <pll_Init+0x1c8>)
 800f1ce:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	f04f 0200 	mov.w	r2, #0
 800f1d6:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f04f 0200 	mov.w	r2, #0
 800f1de:	641a      	str	r2, [r3, #64]	@ 0x40
    signal->pid_out = 0.f;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f04f 0200 	mov.w	r2, #0
 800f1e6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800f1e8:	bf00      	nop
 800f1ea:	3714      	adds	r7, #20
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr
 800f1f4:	40c90fdb 	.word	0x40c90fdb
 800f1f8:	3fb4fdf4 	.word	0x3fb4fdf4
 800f1fc:	428d78c3 	.word	0x428d78c3
 800f200:	46758fb9 	.word	0x46758fb9
 800f204:	00000000 	.word	0x00000000

0800f208 <pll_Control>:
 * @param signal_In: 信号指针
 * @param config: 配置指针
 * @param signal_Target: 目标信号指针
 */
void pll_Control(pll_Signal *signal_In, pll_Config *config, pll_Signal *signal_Target)
{
 800f208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f20c:	ed2d 8b02 	vpush	{d8}
 800f210:	b090      	sub	sp, #64	@ 0x40
 800f212:	af00      	add	r7, sp, #0
 800f214:	60f8      	str	r0, [r7, #12]
 800f216:	60b9      	str	r1, [r7, #8]
 800f218:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_In);
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f000 f932 	bl	800f484 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_In->sogi_a_0, signal_In->sogi_b_0 / 382 * 3, &signal_In->park_d, &signal_In->park_q, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	68de      	ldr	r6, [r3, #12]
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	ed93 7a06 	vldr	s14, [r3, #24]
 800f22a:	eddf 6a67 	vldr	s13, [pc, #412]	@ 800f3c8 <pll_Control+0x1c0>
 800f22e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f232:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800f236:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f24c:	eeb0 0a67 	vmov.f32	s0, s15
 800f250:	f000 fec8 	bl	800ffe4 <arm_sin_f32>
 800f254:	eef0 8a40 	vmov.f32	s17, s0
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f25e:	eeb0 0a67 	vmov.f32	s0, s15
 800f262:	f000 ff05 	bl	8010070 <arm_cos_f32>
 800f266:	eef0 7a40 	vmov.f32	s15, s0
 800f26a:	627e      	str	r6, [r7, #36]	@ 0x24
 800f26c:	ed87 8a08 	vstr	s16, [r7, #32]
 800f270:	61fd      	str	r5, [r7, #28]
 800f272:	61bc      	str	r4, [r7, #24]
 800f274:	edc7 8a05 	vstr	s17, [r7, #20]
 800f278:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800f27c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f280:	edd7 7a04 	vldr	s15, [r7, #16]
 800f284:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f288:	edd7 6a08 	vldr	s13, [r7, #32]
 800f28c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f294:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800f29e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f2a2:	eeb1 7a67 	vneg.f32	s14, s15
 800f2a6:	edd7 7a05 	vldr	s15, [r7, #20]
 800f2aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2ae:	edd7 6a08 	vldr	s13, [r7, #32]
 800f2b2:	edd7 7a04 	vldr	s15, [r7, #16]
 800f2b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	edc3 7a00 	vstr	s15, [r3]
  }
 800f2c4:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_In, config);
 800f2c6:	68b9      	ldr	r1, [r7, #8]
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f000 f87f 	bl	800f3cc <pll_Pid>
    // 更新theta
    signal_In->theta += (signal_In->pid_out + config->omiga) * config->Ts;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	edd3 7a00 	vldr	s15, [r3]
 800f2e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f2ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_In->theta = (float)fmod(signal_In->theta, 2 * PI);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f2fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f302:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 800f3c0 <pll_Control+0x1b8>
 800f306:	eeb0 0b47 	vmov.f64	d0, d7
 800f30a:	f001 fba5 	bl	8010a58 <fmod>
 800f30e:	eeb0 7b40 	vmov.f64	d7, d0
 800f312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 反park变换
    arm_inv_park_f32(signal_In->park_d, signal_In->park_q, &signal_In->park_inv_a, &signal_In->park_inv_b, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f103 052c 	add.w	r5, r3, #44	@ 0x2c
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f338:	eeb0 0a67 	vmov.f32	s0, s15
 800f33c:	f000 fe52 	bl	800ffe4 <arm_sin_f32>
 800f340:	eeb0 8a40 	vmov.f32	s16, s0
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f34a:	eeb0 0a67 	vmov.f32	s0, s15
 800f34e:	f000 fe8f 	bl	8010070 <arm_cos_f32>
 800f352:	eef0 7a40 	vmov.f32	s15, s0
 800f356:	f8c7 803c 	str.w	r8, [r7, #60]	@ 0x3c
 800f35a:	63be      	str	r6, [r7, #56]	@ 0x38
 800f35c:	637d      	str	r5, [r7, #52]	@ 0x34
 800f35e:	633c      	str	r4, [r7, #48]	@ 0x30
 800f360:	ed87 8a0b 	vstr	s16, [r7, #44]	@ 0x2c
 800f364:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 800f368:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f36c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800f370:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f374:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800f378:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f37c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f380:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f386:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 800f38a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f38e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f392:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f396:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800f39a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800f39e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a8:	edc3 7a00 	vstr	s15, [r3]
  }
 800f3ac:	bf00      	nop
}
 800f3ae:	bf00      	nop
 800f3b0:	3740      	adds	r7, #64	@ 0x40
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	ecbd 8b02 	vpop	{d8}
 800f3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3bc:	f3af 8000 	nop.w
 800f3c0:	60000000 	.word	0x60000000
 800f3c4:	401921fb 	.word	0x401921fb
 800f3c8:	43bf0000 	.word	0x43bf0000

0800f3cc <pll_Pid>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	edd3 7a03 	vldr	s15, [r3, #12]
 800f3e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	edd3 6a04 	vldr	s13, [r3, #16]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800f404:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f40c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	edd3 6a05 	vldr	s13, [r3, #20]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800f41c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f420:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800f430:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800f474 <pll_Pid+0xa8>
 800f434:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f43c:	dd03      	ble.n	800f446 <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a0d      	ldr	r2, [pc, #52]	@ (800f478 <pll_Pid+0xac>)
 800f442:	639a      	str	r2, [r3, #56]	@ 0x38
 800f444:	e00c      	b.n	800f460 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800f44c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800f47c <pll_Pid+0xb0>
 800f450:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f458:	d502      	bpl.n	800f460 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4a08      	ldr	r2, [pc, #32]	@ (800f480 <pll_Pid+0xb4>)
 800f45e:	639a      	str	r2, [r3, #56]	@ 0x38

    signal->pid_err[1] = signal->pid_err[0];
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr
 800f474:	431d1463 	.word	0x431d1463
 800f478:	431d1463 	.word	0x431d1463
 800f47c:	c27b53d2 	.word	0xc27b53d2
 800f480:	c27b53d2 	.word	0xc27b53d2

0800f484 <pll_Sogi>:
 * @brief Sogi变换
 *
 * @param signal: 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
    signal->sogi_a_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_a_1 + signal->a2 * signal->sogi_a_2;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	edd3 7a00 	vldr	s15, [r3]
 800f498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	edd3 7a02 	vldr	s15, [r3, #8]
 800f4a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	edd3 7a04 	vldr	s15, [r3, #16]
 800f4bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	edd3 7a05 	vldr	s15, [r3, #20]
 800f4d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_b_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_b_1 + signal->a2 * signal->sogi_b_2;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	edd3 7a00 	vldr	s15, [r3]
 800f4ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800f4f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	edd3 7a01 	vldr	s15, [r3, #4]
 800f4fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f502:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	edd3 7a07 	vldr	s15, [r3, #28]
 800f526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f52a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	edd3 7a08 	vldr	s15, [r3, #32]
 800f53a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f53e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	685a      	ldr	r2, [r3, #4]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	605a      	str	r2, [r3, #4]
    signal->sogi_a_2 = signal->sogi_a_1;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	691a      	ldr	r2, [r3, #16]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	615a      	str	r2, [r3, #20]
    signal->sogi_a_1 = signal->sogi_a_0;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	68da      	ldr	r2, [r3, #12]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	611a      	str	r2, [r3, #16]
    signal->sogi_b_2 = signal->sogi_b_1;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	69da      	ldr	r2, [r3, #28]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	621a      	str	r2, [r3, #32]
    signal->sogi_b_1 = signal->sogi_b_0;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	699a      	ldr	r2, [r3, #24]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	61da      	str	r2, [r3, #28]
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f588:	2200      	movs	r2, #0
 800f58a:	4913      	ldr	r1, [pc, #76]	@ (800f5d8 <MX_USB_DEVICE_Init+0x54>)
 800f58c:	4813      	ldr	r0, [pc, #76]	@ (800f5dc <MX_USB_DEVICE_Init+0x58>)
 800f58e:	f7fe f895 	bl	800d6bc <USBD_Init>
 800f592:	4603      	mov	r3, r0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f598:	f7f1 fcda 	bl	8000f50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f59c:	4910      	ldr	r1, [pc, #64]	@ (800f5e0 <MX_USB_DEVICE_Init+0x5c>)
 800f59e:	480f      	ldr	r0, [pc, #60]	@ (800f5dc <MX_USB_DEVICE_Init+0x58>)
 800f5a0:	f7fe f8bc 	bl	800d71c <USBD_RegisterClass>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d001      	beq.n	800f5ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f5aa:	f7f1 fcd1 	bl	8000f50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f5ae:	490d      	ldr	r1, [pc, #52]	@ (800f5e4 <MX_USB_DEVICE_Init+0x60>)
 800f5b0:	480a      	ldr	r0, [pc, #40]	@ (800f5dc <MX_USB_DEVICE_Init+0x58>)
 800f5b2:	f7fd ffb3 	bl	800d51c <USBD_CDC_RegisterInterface>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f5bc:	f7f1 fcc8 	bl	8000f50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f5c0:	4806      	ldr	r0, [pc, #24]	@ (800f5dc <MX_USB_DEVICE_Init+0x58>)
 800f5c2:	f7fe f8e1 	bl	800d788 <USBD_Start>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d001      	beq.n	800f5d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f5cc:	f7f1 fcc0 	bl	8000f50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f5d0:	f7f6 fb4c 	bl	8005c6c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f5d4:	bf00      	nop
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	240000b4 	.word	0x240000b4
 800f5dc:	240003b8 	.word	0x240003b8
 800f5e0:	24000020 	.word	0x24000020
 800f5e4:	240000a0 	.word	0x240000a0

0800f5e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	4905      	ldr	r1, [pc, #20]	@ (800f604 <CDC_Init_FS+0x1c>)
 800f5f0:	4805      	ldr	r0, [pc, #20]	@ (800f608 <CDC_Init_FS+0x20>)
 800f5f2:	f7fd ffad 	bl	800d550 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f5f6:	4905      	ldr	r1, [pc, #20]	@ (800f60c <CDC_Init_FS+0x24>)
 800f5f8:	4803      	ldr	r0, [pc, #12]	@ (800f608 <CDC_Init_FS+0x20>)
 800f5fa:	f7fd ffcb 	bl	800d594 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f5fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f600:	4618      	mov	r0, r3
 800f602:	bd80      	pop	{r7, pc}
 800f604:	24000e94 	.word	0x24000e94
 800f608:	240003b8 	.word	0x240003b8
 800f60c:	24000694 	.word	0x24000694

0800f610 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f610:	b480      	push	{r7}
 800f612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f614:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f616:	4618      	mov	r0, r3
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	4603      	mov	r3, r0
 800f628:	6039      	str	r1, [r7, #0]
 800f62a:	71fb      	strb	r3, [r7, #7]
 800f62c:	4613      	mov	r3, r2
 800f62e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f630:	79fb      	ldrb	r3, [r7, #7]
 800f632:	2b23      	cmp	r3, #35	@ 0x23
 800f634:	d84a      	bhi.n	800f6cc <CDC_Control_FS+0xac>
 800f636:	a201      	add	r2, pc, #4	@ (adr r2, 800f63c <CDC_Control_FS+0x1c>)
 800f638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f63c:	0800f6cd 	.word	0x0800f6cd
 800f640:	0800f6cd 	.word	0x0800f6cd
 800f644:	0800f6cd 	.word	0x0800f6cd
 800f648:	0800f6cd 	.word	0x0800f6cd
 800f64c:	0800f6cd 	.word	0x0800f6cd
 800f650:	0800f6cd 	.word	0x0800f6cd
 800f654:	0800f6cd 	.word	0x0800f6cd
 800f658:	0800f6cd 	.word	0x0800f6cd
 800f65c:	0800f6cd 	.word	0x0800f6cd
 800f660:	0800f6cd 	.word	0x0800f6cd
 800f664:	0800f6cd 	.word	0x0800f6cd
 800f668:	0800f6cd 	.word	0x0800f6cd
 800f66c:	0800f6cd 	.word	0x0800f6cd
 800f670:	0800f6cd 	.word	0x0800f6cd
 800f674:	0800f6cd 	.word	0x0800f6cd
 800f678:	0800f6cd 	.word	0x0800f6cd
 800f67c:	0800f6cd 	.word	0x0800f6cd
 800f680:	0800f6cd 	.word	0x0800f6cd
 800f684:	0800f6cd 	.word	0x0800f6cd
 800f688:	0800f6cd 	.word	0x0800f6cd
 800f68c:	0800f6cd 	.word	0x0800f6cd
 800f690:	0800f6cd 	.word	0x0800f6cd
 800f694:	0800f6cd 	.word	0x0800f6cd
 800f698:	0800f6cd 	.word	0x0800f6cd
 800f69c:	0800f6cd 	.word	0x0800f6cd
 800f6a0:	0800f6cd 	.word	0x0800f6cd
 800f6a4:	0800f6cd 	.word	0x0800f6cd
 800f6a8:	0800f6cd 	.word	0x0800f6cd
 800f6ac:	0800f6cd 	.word	0x0800f6cd
 800f6b0:	0800f6cd 	.word	0x0800f6cd
 800f6b4:	0800f6cd 	.word	0x0800f6cd
 800f6b8:	0800f6cd 	.word	0x0800f6cd
 800f6bc:	0800f6cd 	.word	0x0800f6cd
 800f6c0:	0800f6cd 	.word	0x0800f6cd
 800f6c4:	0800f6cd 	.word	0x0800f6cd
 800f6c8:	0800f6cd 	.word	0x0800f6cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f6cc:	bf00      	nop
  }

  return (USBD_OK);
 800f6ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr

0800f6dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f6e6:	6879      	ldr	r1, [r7, #4]
 800f6e8:	4805      	ldr	r0, [pc, #20]	@ (800f700 <CDC_Receive_FS+0x24>)
 800f6ea:	f7fd ff53 	bl	800d594 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f6ee:	4804      	ldr	r0, [pc, #16]	@ (800f700 <CDC_Receive_FS+0x24>)
 800f6f0:	f7fd ffae 	bl	800d650 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f6f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	240003b8 	.word	0x240003b8

0800f704 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	460b      	mov	r3, r1
 800f70e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f710:	2300      	movs	r3, #0
 800f712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f714:	4b0d      	ldr	r3, [pc, #52]	@ (800f74c <CDC_Transmit_FS+0x48>)
 800f716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f71a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f722:	2b00      	cmp	r3, #0
 800f724:	d001      	beq.n	800f72a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f726:	2301      	movs	r3, #1
 800f728:	e00b      	b.n	800f742 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f72a:	887b      	ldrh	r3, [r7, #2]
 800f72c:	461a      	mov	r2, r3
 800f72e:	6879      	ldr	r1, [r7, #4]
 800f730:	4806      	ldr	r0, [pc, #24]	@ (800f74c <CDC_Transmit_FS+0x48>)
 800f732:	f7fd ff0d 	bl	800d550 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f736:	4805      	ldr	r0, [pc, #20]	@ (800f74c <CDC_Transmit_FS+0x48>)
 800f738:	f7fd ff4a 	bl	800d5d0 <USBD_CDC_TransmitPacket>
 800f73c:	4603      	mov	r3, r0
 800f73e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f740:	7bfb      	ldrb	r3, [r7, #15]
}
 800f742:	4618      	mov	r0, r3
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	240003b8 	.word	0x240003b8

0800f750 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f750:	b480      	push	{r7}
 800f752:	b087      	sub	sp, #28
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	4613      	mov	r3, r2
 800f75c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f75e:	2300      	movs	r3, #0
 800f760:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f762:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f766:	4618      	mov	r0, r3
 800f768:	371c      	adds	r7, #28
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
	...

0800f774 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
 800f77a:	4603      	mov	r3, r0
 800f77c:	6039      	str	r1, [r7, #0]
 800f77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	2212      	movs	r2, #18
 800f784:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f786:	4b03      	ldr	r3, [pc, #12]	@ (800f794 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f788:	4618      	mov	r0, r3
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr
 800f794:	240000d4 	.word	0x240000d4

0800f798 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	4603      	mov	r3, r0
 800f7a0:	6039      	str	r1, [r7, #0]
 800f7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	2204      	movs	r2, #4
 800f7a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f7aa:	4b03      	ldr	r3, [pc, #12]	@ (800f7b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr
 800f7b8:	240000e8 	.word	0x240000e8

0800f7bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	6039      	str	r1, [r7, #0]
 800f7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7c8:	79fb      	ldrb	r3, [r7, #7]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d105      	bne.n	800f7da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	4907      	ldr	r1, [pc, #28]	@ (800f7f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f7d2:	4808      	ldr	r0, [pc, #32]	@ (800f7f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f7d4:	f7ff f9b2 	bl	800eb3c <USBD_GetString>
 800f7d8:	e004      	b.n	800f7e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f7da:	683a      	ldr	r2, [r7, #0]
 800f7dc:	4904      	ldr	r1, [pc, #16]	@ (800f7f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f7de:	4805      	ldr	r0, [pc, #20]	@ (800f7f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f7e0:	f7ff f9ac 	bl	800eb3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7e4:	4b02      	ldr	r3, [pc, #8]	@ (800f7f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	24001694 	.word	0x24001694
 800f7f4:	08010cd8 	.word	0x08010cd8

0800f7f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	4603      	mov	r3, r0
 800f800:	6039      	str	r1, [r7, #0]
 800f802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f804:	683a      	ldr	r2, [r7, #0]
 800f806:	4904      	ldr	r1, [pc, #16]	@ (800f818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f808:	4804      	ldr	r0, [pc, #16]	@ (800f81c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f80a:	f7ff f997 	bl	800eb3c <USBD_GetString>
  return USBD_StrDesc;
 800f80e:	4b02      	ldr	r3, [pc, #8]	@ (800f818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f810:	4618      	mov	r0, r3
 800f812:	3708      	adds	r7, #8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	24001694 	.word	0x24001694
 800f81c:	08010cf0 	.word	0x08010cf0

0800f820 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	4603      	mov	r3, r0
 800f828:	6039      	str	r1, [r7, #0]
 800f82a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	221a      	movs	r2, #26
 800f830:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f832:	f000 f843 	bl	800f8bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f836:	4b02      	ldr	r3, [pc, #8]	@ (800f840 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	240000ec 	.word	0x240000ec

0800f844 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	6039      	str	r1, [r7, #0]
 800f84e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f850:	79fb      	ldrb	r3, [r7, #7]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d105      	bne.n	800f862 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f856:	683a      	ldr	r2, [r7, #0]
 800f858:	4907      	ldr	r1, [pc, #28]	@ (800f878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f85a:	4808      	ldr	r0, [pc, #32]	@ (800f87c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f85c:	f7ff f96e 	bl	800eb3c <USBD_GetString>
 800f860:	e004      	b.n	800f86c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	4904      	ldr	r1, [pc, #16]	@ (800f878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f866:	4805      	ldr	r0, [pc, #20]	@ (800f87c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f868:	f7ff f968 	bl	800eb3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f86c:	4b02      	ldr	r3, [pc, #8]	@ (800f878 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3708      	adds	r7, #8
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	bf00      	nop
 800f878:	24001694 	.word	0x24001694
 800f87c:	08010d04 	.word	0x08010d04

0800f880 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	4603      	mov	r3, r0
 800f888:	6039      	str	r1, [r7, #0]
 800f88a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f88c:	79fb      	ldrb	r3, [r7, #7]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d105      	bne.n	800f89e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f892:	683a      	ldr	r2, [r7, #0]
 800f894:	4907      	ldr	r1, [pc, #28]	@ (800f8b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f896:	4808      	ldr	r0, [pc, #32]	@ (800f8b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f898:	f7ff f950 	bl	800eb3c <USBD_GetString>
 800f89c:	e004      	b.n	800f8a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f89e:	683a      	ldr	r2, [r7, #0]
 800f8a0:	4904      	ldr	r1, [pc, #16]	@ (800f8b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f8a2:	4805      	ldr	r0, [pc, #20]	@ (800f8b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f8a4:	f7ff f94a 	bl	800eb3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8a8:	4b02      	ldr	r3, [pc, #8]	@ (800f8b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	24001694 	.word	0x24001694
 800f8b8:	08010d10 	.word	0x08010d10

0800f8bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d009      	beq.n	800f8e4 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f8d0:	2208      	movs	r2, #8
 800f8d2:	4906      	ldr	r1, [pc, #24]	@ (800f8ec <Get_SerialNum+0x30>)
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f000 f80d 	bl	800f8f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f8da:	2204      	movs	r2, #4
 800f8dc:	4904      	ldr	r1, [pc, #16]	@ (800f8f0 <Get_SerialNum+0x34>)
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 f808 	bl	800f8f4 <IntToUnicode>
  }
}
 800f8e4:	bf00      	nop
 800f8e6:	3710      	adds	r7, #16
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	240000ee 	.word	0x240000ee
 800f8f0:	240000fe 	.word	0x240000fe

0800f8f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b087      	sub	sp, #28
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	4613      	mov	r3, r2
 800f900:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f902:	2300      	movs	r3, #0
 800f904:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f906:	2300      	movs	r3, #0
 800f908:	75fb      	strb	r3, [r7, #23]
 800f90a:	e027      	b.n	800f95c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	0f1b      	lsrs	r3, r3, #28
 800f910:	2b09      	cmp	r3, #9
 800f912:	d80b      	bhi.n	800f92c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	0f1b      	lsrs	r3, r3, #28
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	7dfb      	ldrb	r3, [r7, #23]
 800f91c:	005b      	lsls	r3, r3, #1
 800f91e:	4619      	mov	r1, r3
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	440b      	add	r3, r1
 800f924:	3230      	adds	r2, #48	@ 0x30
 800f926:	b2d2      	uxtb	r2, r2
 800f928:	701a      	strb	r2, [r3, #0]
 800f92a:	e00a      	b.n	800f942 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	0f1b      	lsrs	r3, r3, #28
 800f930:	b2da      	uxtb	r2, r3
 800f932:	7dfb      	ldrb	r3, [r7, #23]
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	4619      	mov	r1, r3
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	440b      	add	r3, r1
 800f93c:	3237      	adds	r2, #55	@ 0x37
 800f93e:	b2d2      	uxtb	r2, r2
 800f940:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	011b      	lsls	r3, r3, #4
 800f946:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f948:	7dfb      	ldrb	r3, [r7, #23]
 800f94a:	005b      	lsls	r3, r3, #1
 800f94c:	3301      	adds	r3, #1
 800f94e:	68ba      	ldr	r2, [r7, #8]
 800f950:	4413      	add	r3, r2
 800f952:	2200      	movs	r2, #0
 800f954:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f956:	7dfb      	ldrb	r3, [r7, #23]
 800f958:	3301      	adds	r3, #1
 800f95a:	75fb      	strb	r3, [r7, #23]
 800f95c:	7dfa      	ldrb	r2, [r7, #23]
 800f95e:	79fb      	ldrb	r3, [r7, #7]
 800f960:	429a      	cmp	r2, r3
 800f962:	d3d3      	bcc.n	800f90c <IntToUnicode+0x18>
  }
}
 800f964:	bf00      	nop
 800f966:	bf00      	nop
 800f968:	371c      	adds	r7, #28
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
	...

0800f974 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b0ba      	sub	sp, #232	@ 0xe8
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f97c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f980:	2200      	movs	r2, #0
 800f982:	601a      	str	r2, [r3, #0]
 800f984:	605a      	str	r2, [r3, #4]
 800f986:	609a      	str	r2, [r3, #8]
 800f988:	60da      	str	r2, [r3, #12]
 800f98a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f98c:	f107 0310 	add.w	r3, r7, #16
 800f990:	22c0      	movs	r2, #192	@ 0xc0
 800f992:	2100      	movs	r1, #0
 800f994:	4618      	mov	r0, r3
 800f996:	f000 fc8b 	bl	80102b0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4a2c      	ldr	r2, [pc, #176]	@ (800fa50 <HAL_PCD_MspInit+0xdc>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d151      	bne.n	800fa48 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f9a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f9a8:	f04f 0300 	mov.w	r3, #0
 800f9ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800f9b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f9b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f9b8:	f107 0310 	add.w	r3, r7, #16
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7f7 f977 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d001      	beq.n	800f9cc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f9c8:	f7f1 fac2 	bl	8000f50 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f9cc:	f7f6 f94e 	bl	8005c6c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f9d0:	4b20      	ldr	r3, [pc, #128]	@ (800fa54 <HAL_PCD_MspInit+0xe0>)
 800f9d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f9d6:	4a1f      	ldr	r2, [pc, #124]	@ (800fa54 <HAL_PCD_MspInit+0xe0>)
 800f9d8:	f043 0301 	orr.w	r3, r3, #1
 800f9dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f9e0:	4b1c      	ldr	r3, [pc, #112]	@ (800fa54 <HAL_PCD_MspInit+0xe0>)
 800f9e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	60fb      	str	r3, [r7, #12]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f9ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f9f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9f6:	2302      	movs	r3, #2
 800f9f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa02:	2300      	movs	r3, #0
 800fa04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fa08:	230a      	movs	r3, #10
 800fa0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa0e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fa12:	4619      	mov	r1, r3
 800fa14:	4810      	ldr	r0, [pc, #64]	@ (800fa58 <HAL_PCD_MspInit+0xe4>)
 800fa16:	f7f4 fb2b 	bl	8004070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fa1a:	4b0e      	ldr	r3, [pc, #56]	@ (800fa54 <HAL_PCD_MspInit+0xe0>)
 800fa1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa20:	4a0c      	ldr	r2, [pc, #48]	@ (800fa54 <HAL_PCD_MspInit+0xe0>)
 800fa22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fa26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800fa2a:	4b0a      	ldr	r3, [pc, #40]	@ (800fa54 <HAL_PCD_MspInit+0xe0>)
 800fa2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa34:	60bb      	str	r3, [r7, #8]
 800fa36:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fa38:	2200      	movs	r2, #0
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	2065      	movs	r0, #101	@ 0x65
 800fa3e:	f7f3 fc17 	bl	8003270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fa42:	2065      	movs	r0, #101	@ 0x65
 800fa44:	f7f3 fc2e 	bl	80032a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fa48:	bf00      	nop
 800fa4a:	37e8      	adds	r7, #232	@ 0xe8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	40080000 	.word	0x40080000
 800fa54:	58024400 	.word	0x58024400
 800fa58:	58020000 	.word	0x58020000

0800fa5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800fa70:	4619      	mov	r1, r3
 800fa72:	4610      	mov	r0, r2
 800fa74:	f7fd fed5 	bl	800d822 <USBD_LL_SetupStage>
}
 800fa78:	bf00      	nop
 800fa7a:	3708      	adds	r7, #8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	460b      	mov	r3, r1
 800fa8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800fa92:	78fa      	ldrb	r2, [r7, #3]
 800fa94:	6879      	ldr	r1, [r7, #4]
 800fa96:	4613      	mov	r3, r2
 800fa98:	00db      	lsls	r3, r3, #3
 800fa9a:	4413      	add	r3, r2
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	440b      	add	r3, r1
 800faa0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800faa4:	681a      	ldr	r2, [r3, #0]
 800faa6:	78fb      	ldrb	r3, [r7, #3]
 800faa8:	4619      	mov	r1, r3
 800faaa:	f7fd ff0f 	bl	800d8cc <USBD_LL_DataOutStage>
}
 800faae:	bf00      	nop
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b082      	sub	sp, #8
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
 800fabe:	460b      	mov	r3, r1
 800fac0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800fac8:	78fa      	ldrb	r2, [r7, #3]
 800faca:	6879      	ldr	r1, [r7, #4]
 800facc:	4613      	mov	r3, r2
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	4413      	add	r3, r2
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	440b      	add	r3, r1
 800fad6:	3348      	adds	r3, #72	@ 0x48
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	78fb      	ldrb	r3, [r7, #3]
 800fadc:	4619      	mov	r1, r3
 800fade:	f7fd ffa8 	bl	800da32 <USBD_LL_DataInStage>
}
 800fae2:	bf00      	nop
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b082      	sub	sp, #8
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fe f8e2 	bl	800dcc2 <USBD_LL_SOF>
}
 800fafe:	bf00      	nop
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb06:	b580      	push	{r7, lr}
 800fb08:	b084      	sub	sp, #16
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	691b      	ldr	r3, [r3, #16]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d102      	bne.n	800fb20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	73fb      	strb	r3, [r7, #15]
 800fb1e:	e008      	b.n	800fb32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	691b      	ldr	r3, [r3, #16]
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d102      	bne.n	800fb2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fb28:	2301      	movs	r3, #1
 800fb2a:	73fb      	strb	r3, [r7, #15]
 800fb2c:	e001      	b.n	800fb32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fb2e:	f7f1 fa0f 	bl	8000f50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fb38:	7bfa      	ldrb	r2, [r7, #15]
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fe f87c 	bl	800dc3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fe f824 	bl	800db96 <USBD_LL_Reset>
}
 800fb4e:	bf00      	nop
 800fb50:	3710      	adds	r7, #16
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
	...

0800fb58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7fe f877 	bl	800dc5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	6812      	ldr	r2, [r2, #0]
 800fb7a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fb7e:	f043 0301 	orr.w	r3, r3, #1
 800fb82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6a1b      	ldr	r3, [r3, #32]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d005      	beq.n	800fb98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fb8c:	4b04      	ldr	r3, [pc, #16]	@ (800fba0 <HAL_PCD_SuspendCallback+0x48>)
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	4a03      	ldr	r2, [pc, #12]	@ (800fba0 <HAL_PCD_SuspendCallback+0x48>)
 800fb92:	f043 0306 	orr.w	r3, r3, #6
 800fb96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fb98:	bf00      	nop
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	e000ed00 	.word	0xe000ed00

0800fba4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe f86d 	bl	800dc92 <USBD_LL_Resume>
}
 800fbb8:	bf00      	nop
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	460b      	mov	r3, r1
 800fbca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fbd2:	78fa      	ldrb	r2, [r7, #3]
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe f8c5 	bl	800dd66 <USBD_LL_IsoOUTIncomplete>
}
 800fbdc:	bf00      	nop
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	460b      	mov	r3, r1
 800fbee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fbf6:	78fa      	ldrb	r2, [r7, #3]
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fe f881 	bl	800dd02 <USBD_LL_IsoINIncomplete>
}
 800fc00:	bf00      	nop
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fe f8d7 	bl	800ddca <USBD_LL_DevConnected>
}
 800fc1c:	bf00      	nop
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fe f8d4 	bl	800dde0 <USBD_LL_DevDisconnected>
}
 800fc38:	bf00      	nop
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d13e      	bne.n	800fcce <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fc50:	4a21      	ldr	r2, [pc, #132]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	4a1f      	ldr	r2, [pc, #124]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc5c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fc60:	4b1d      	ldr	r3, [pc, #116]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc62:	4a1e      	ldr	r2, [pc, #120]	@ (800fcdc <USBD_LL_Init+0x9c>)
 800fc64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fc66:	4b1c      	ldr	r3, [pc, #112]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc68:	2209      	movs	r2, #9
 800fc6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fc6c:	4b1a      	ldr	r3, [pc, #104]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc6e:	2202      	movs	r2, #2
 800fc70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fc72:	4b19      	ldr	r3, [pc, #100]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fc78:	4b17      	ldr	r3, [pc, #92]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc7a:	2202      	movs	r2, #2
 800fc7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fc7e:	4b16      	ldr	r3, [pc, #88]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fc84:	4b14      	ldr	r3, [pc, #80]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc86:	2200      	movs	r2, #0
 800fc88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fc8a:	4b13      	ldr	r3, [pc, #76]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fc90:	4b11      	ldr	r3, [pc, #68]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc92:	2200      	movs	r2, #0
 800fc94:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fc96:	4b10      	ldr	r3, [pc, #64]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc98:	2200      	movs	r2, #0
 800fc9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fc9c:	4b0e      	ldr	r3, [pc, #56]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fc9e:	2200      	movs	r2, #0
 800fca0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fca2:	480d      	ldr	r0, [pc, #52]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fca4:	f7f4 fcef 	bl	8004686 <HAL_PCD_Init>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d001      	beq.n	800fcb2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fcae:	f7f1 f94f 	bl	8000f50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fcb2:	2180      	movs	r1, #128	@ 0x80
 800fcb4:	4808      	ldr	r0, [pc, #32]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fcb6:	f7f5 ff5e 	bl	8005b76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fcba:	2240      	movs	r2, #64	@ 0x40
 800fcbc:	2100      	movs	r1, #0
 800fcbe:	4806      	ldr	r0, [pc, #24]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fcc0:	f7f5 ff12 	bl	8005ae8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fcc4:	2280      	movs	r2, #128	@ 0x80
 800fcc6:	2101      	movs	r1, #1
 800fcc8:	4803      	ldr	r0, [pc, #12]	@ (800fcd8 <USBD_LL_Init+0x98>)
 800fcca:	f7f5 ff0d 	bl	8005ae8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800fcce:	2300      	movs	r3, #0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	24001894 	.word	0x24001894
 800fcdc:	40080000 	.word	0x40080000

0800fce0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fce8:	2300      	movs	r3, #0
 800fcea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcec:	2300      	movs	r3, #0
 800fcee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7f4 fde9 	bl	80048ce <HAL_PCD_Start>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd00:	7bfb      	ldrb	r3, [r7, #15]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f000 f942 	bl	800ff8c <USBD_Get_USB_Status>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b084      	sub	sp, #16
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
 800fd1e:	4608      	mov	r0, r1
 800fd20:	4611      	mov	r1, r2
 800fd22:	461a      	mov	r2, r3
 800fd24:	4603      	mov	r3, r0
 800fd26:	70fb      	strb	r3, [r7, #3]
 800fd28:	460b      	mov	r3, r1
 800fd2a:	70bb      	strb	r3, [r7, #2]
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd30:	2300      	movs	r3, #0
 800fd32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd34:	2300      	movs	r3, #0
 800fd36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fd3e:	78bb      	ldrb	r3, [r7, #2]
 800fd40:	883a      	ldrh	r2, [r7, #0]
 800fd42:	78f9      	ldrb	r1, [r7, #3]
 800fd44:	f7f5 fae9 	bl	800531a <HAL_PCD_EP_Open>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd4c:	7bfb      	ldrb	r3, [r7, #15]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f000 f91c 	bl	800ff8c <USBD_Get_USB_Status>
 800fd54:	4603      	mov	r3, r0
 800fd56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd58:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b084      	sub	sp, #16
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd72:	2300      	movs	r3, #0
 800fd74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fd7c:	78fa      	ldrb	r2, [r7, #3]
 800fd7e:	4611      	mov	r1, r2
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7f5 fb32 	bl	80053ea <HAL_PCD_EP_Close>
 800fd86:	4603      	mov	r3, r0
 800fd88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd8a:	7bfb      	ldrb	r3, [r7, #15]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f000 f8fd 	bl	800ff8c <USBD_Get_USB_Status>
 800fd92:	4603      	mov	r3, r0
 800fd94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd96:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3710      	adds	r7, #16
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	460b      	mov	r3, r1
 800fdaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdac:	2300      	movs	r3, #0
 800fdae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fdba:	78fa      	ldrb	r2, [r7, #3]
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7f5 fbec 	bl	800559c <HAL_PCD_EP_SetStall>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdc8:	7bfb      	ldrb	r3, [r7, #15]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f000 f8de 	bl	800ff8c <USBD_Get_USB_Status>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b084      	sub	sp, #16
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
 800fde6:	460b      	mov	r3, r1
 800fde8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdea:	2300      	movs	r3, #0
 800fdec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fdf8:	78fa      	ldrb	r2, [r7, #3]
 800fdfa:	4611      	mov	r1, r2
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7f5 fc31 	bl	8005664 <HAL_PCD_EP_ClrStall>
 800fe02:	4603      	mov	r3, r0
 800fe04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe06:	7bfb      	ldrb	r3, [r7, #15]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f000 f8bf 	bl	800ff8c <USBD_Get_USB_Status>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe12:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b085      	sub	sp, #20
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	460b      	mov	r3, r1
 800fe26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fe30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	da0b      	bge.n	800fe50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fe38:	78fb      	ldrb	r3, [r7, #3]
 800fe3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fe3e:	68f9      	ldr	r1, [r7, #12]
 800fe40:	4613      	mov	r3, r2
 800fe42:	00db      	lsls	r3, r3, #3
 800fe44:	4413      	add	r3, r2
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	440b      	add	r3, r1
 800fe4a:	333e      	adds	r3, #62	@ 0x3e
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	e00b      	b.n	800fe68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fe50:	78fb      	ldrb	r3, [r7, #3]
 800fe52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fe56:	68f9      	ldr	r1, [r7, #12]
 800fe58:	4613      	mov	r3, r2
 800fe5a:	00db      	lsls	r3, r3, #3
 800fe5c:	4413      	add	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	440b      	add	r3, r1
 800fe62:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800fe66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3714      	adds	r7, #20
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe80:	2300      	movs	r3, #0
 800fe82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe84:	2300      	movs	r3, #0
 800fe86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe8e:	78fa      	ldrb	r2, [r7, #3]
 800fe90:	4611      	mov	r1, r2
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7f5 fa1c 	bl	80052d0 <HAL_PCD_SetAddress>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe9c:	7bfb      	ldrb	r3, [r7, #15]
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f000 f874 	bl	800ff8c <USBD_Get_USB_Status>
 800fea4:	4603      	mov	r3, r0
 800fea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}

0800feb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800feb2:	b580      	push	{r7, lr}
 800feb4:	b086      	sub	sp, #24
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	60f8      	str	r0, [r7, #12]
 800feba:	607a      	str	r2, [r7, #4]
 800febc:	603b      	str	r3, [r7, #0]
 800febe:	460b      	mov	r3, r1
 800fec0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fec2:	2300      	movs	r3, #0
 800fec4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fec6:	2300      	movs	r3, #0
 800fec8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fed0:	7af9      	ldrb	r1, [r7, #11]
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	f7f5 fb26 	bl	8005526 <HAL_PCD_EP_Transmit>
 800feda:	4603      	mov	r3, r0
 800fedc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fede:	7dfb      	ldrb	r3, [r7, #23]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f000 f853 	bl	800ff8c <USBD_Get_USB_Status>
 800fee6:	4603      	mov	r3, r0
 800fee8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800feea:	7dbb      	ldrb	r3, [r7, #22]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	607a      	str	r2, [r7, #4]
 800fefe:	603b      	str	r3, [r7, #0]
 800ff00:	460b      	mov	r3, r1
 800ff02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff04:	2300      	movs	r3, #0
 800ff06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ff12:	7af9      	ldrb	r1, [r7, #11]
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	f7f5 fab1 	bl	800547e <HAL_PCD_EP_Receive>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff20:	7dfb      	ldrb	r3, [r7, #23]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f000 f832 	bl	800ff8c <USBD_Get_USB_Status>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3718      	adds	r7, #24
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b082      	sub	sp, #8
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
 800ff3e:	460b      	mov	r3, r1
 800ff40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff48:	78fa      	ldrb	r2, [r7, #3]
 800ff4a:	4611      	mov	r1, r2
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7f5 fad2 	bl	80054f6 <HAL_PCD_EP_GetRxCount>
 800ff52:	4603      	mov	r3, r0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}

0800ff5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ff64:	4b03      	ldr	r3, [pc, #12]	@ (800ff74 <USBD_static_malloc+0x18>)
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	370c      	adds	r7, #12
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	24001da0 	.word	0x24001da0

0800ff78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b085      	sub	sp, #20
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	4603      	mov	r3, r0
 800ff94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff96:	2300      	movs	r3, #0
 800ff98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ff9a:	79fb      	ldrb	r3, [r7, #7]
 800ff9c:	2b03      	cmp	r3, #3
 800ff9e:	d817      	bhi.n	800ffd0 <USBD_Get_USB_Status+0x44>
 800ffa0:	a201      	add	r2, pc, #4	@ (adr r2, 800ffa8 <USBD_Get_USB_Status+0x1c>)
 800ffa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffa6:	bf00      	nop
 800ffa8:	0800ffb9 	.word	0x0800ffb9
 800ffac:	0800ffbf 	.word	0x0800ffbf
 800ffb0:	0800ffc5 	.word	0x0800ffc5
 800ffb4:	0800ffcb 	.word	0x0800ffcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	73fb      	strb	r3, [r7, #15]
    break;
 800ffbc:	e00b      	b.n	800ffd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ffbe:	2303      	movs	r3, #3
 800ffc0:	73fb      	strb	r3, [r7, #15]
    break;
 800ffc2:	e008      	b.n	800ffd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ffc8:	e005      	b.n	800ffd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ffca:	2303      	movs	r3, #3
 800ffcc:	73fb      	strb	r3, [r7, #15]
    break;
 800ffce:	e002      	b.n	800ffd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ffd0:	2303      	movs	r3, #3
 800ffd2:	73fb      	strb	r3, [r7, #15]
    break;
 800ffd4:	bf00      	nop
  }
  return usb_status;
 800ffd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3714      	adds	r7, #20
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <arm_sin_f32>:
 800ffe4:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8010064 <arm_sin_f32+0x80>
 800ffe8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ffec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fff0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff8:	d504      	bpl.n	8010004 <arm_sin_f32+0x20>
 800fffa:	ee17 3a90 	vmov	r3, s15
 800fffe:	3b01      	subs	r3, #1
 8010000:	ee07 3a90 	vmov	s15, r3
 8010004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010008:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8010068 <arm_sin_f32+0x84>
 801000c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010010:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010014:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8010018:	ee17 3a10 	vmov	r3, s14
 801001c:	b29b      	uxth	r3, r3
 801001e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010022:	d21a      	bcs.n	801005a <arm_sin_f32+0x76>
 8010024:	ee07 3a10 	vmov	s14, r3
 8010028:	1c59      	adds	r1, r3, #1
 801002a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801002e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010032:	4a0e      	ldr	r2, [pc, #56]	@ (801006c <arm_sin_f32+0x88>)
 8010034:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801003c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010040:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010044:	edd3 6a00 	vldr	s13, [r3]
 8010048:	ed92 7a00 	vldr	s14, [r2]
 801004c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010054:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010058:	4770      	bx	lr
 801005a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801005e:	2101      	movs	r1, #1
 8010060:	2300      	movs	r3, #0
 8010062:	e7e6      	b.n	8010032 <arm_sin_f32+0x4e>
 8010064:	3e22f983 	.word	0x3e22f983
 8010068:	44000000 	.word	0x44000000
 801006c:	08011320 	.word	0x08011320

08010070 <arm_cos_f32>:
 8010070:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80100f8 <arm_cos_f32+0x88>
 8010074:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8010078:	ee20 0a27 	vmul.f32	s0, s0, s15
 801007c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010080:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010084:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801008c:	d504      	bpl.n	8010098 <arm_cos_f32+0x28>
 801008e:	ee17 3a90 	vmov	r3, s15
 8010092:	3b01      	subs	r3, #1
 8010094:	ee07 3a90 	vmov	s15, r3
 8010098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801009c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80100fc <arm_cos_f32+0x8c>
 80100a0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80100a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80100a8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80100ac:	ee17 3a10 	vmov	r3, s14
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100b6:	d21a      	bcs.n	80100ee <arm_cos_f32+0x7e>
 80100b8:	ee07 3a10 	vmov	s14, r3
 80100bc:	1c59      	adds	r1, r3, #1
 80100be:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80100c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80100c6:	4a0e      	ldr	r2, [pc, #56]	@ (8010100 <arm_cos_f32+0x90>)
 80100c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80100cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80100d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80100d8:	edd3 6a00 	vldr	s13, [r3]
 80100dc:	ed92 7a00 	vldr	s14, [r2]
 80100e0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80100e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80100ec:	4770      	bx	lr
 80100ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80100f2:	2101      	movs	r1, #1
 80100f4:	2300      	movs	r3, #0
 80100f6:	e7e6      	b.n	80100c6 <arm_cos_f32+0x56>
 80100f8:	3e22f983 	.word	0x3e22f983
 80100fc:	44000000 	.word	0x44000000
 8010100:	08011320 	.word	0x08011320

08010104 <malloc>:
 8010104:	4b02      	ldr	r3, [pc, #8]	@ (8010110 <malloc+0xc>)
 8010106:	4601      	mov	r1, r0
 8010108:	6818      	ldr	r0, [r3, #0]
 801010a:	f000 b825 	b.w	8010158 <_malloc_r>
 801010e:	bf00      	nop
 8010110:	24000108 	.word	0x24000108

08010114 <sbrk_aligned>:
 8010114:	b570      	push	{r4, r5, r6, lr}
 8010116:	4e0f      	ldr	r6, [pc, #60]	@ (8010154 <sbrk_aligned+0x40>)
 8010118:	460c      	mov	r4, r1
 801011a:	6831      	ldr	r1, [r6, #0]
 801011c:	4605      	mov	r5, r0
 801011e:	b911      	cbnz	r1, 8010126 <sbrk_aligned+0x12>
 8010120:	f000 f8ce 	bl	80102c0 <_sbrk_r>
 8010124:	6030      	str	r0, [r6, #0]
 8010126:	4621      	mov	r1, r4
 8010128:	4628      	mov	r0, r5
 801012a:	f000 f8c9 	bl	80102c0 <_sbrk_r>
 801012e:	1c43      	adds	r3, r0, #1
 8010130:	d103      	bne.n	801013a <sbrk_aligned+0x26>
 8010132:	f04f 34ff 	mov.w	r4, #4294967295
 8010136:	4620      	mov	r0, r4
 8010138:	bd70      	pop	{r4, r5, r6, pc}
 801013a:	1cc4      	adds	r4, r0, #3
 801013c:	f024 0403 	bic.w	r4, r4, #3
 8010140:	42a0      	cmp	r0, r4
 8010142:	d0f8      	beq.n	8010136 <sbrk_aligned+0x22>
 8010144:	1a21      	subs	r1, r4, r0
 8010146:	4628      	mov	r0, r5
 8010148:	f000 f8ba 	bl	80102c0 <_sbrk_r>
 801014c:	3001      	adds	r0, #1
 801014e:	d1f2      	bne.n	8010136 <sbrk_aligned+0x22>
 8010150:	e7ef      	b.n	8010132 <sbrk_aligned+0x1e>
 8010152:	bf00      	nop
 8010154:	24001fc0 	.word	0x24001fc0

08010158 <_malloc_r>:
 8010158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801015c:	1ccd      	adds	r5, r1, #3
 801015e:	f025 0503 	bic.w	r5, r5, #3
 8010162:	3508      	adds	r5, #8
 8010164:	2d0c      	cmp	r5, #12
 8010166:	bf38      	it	cc
 8010168:	250c      	movcc	r5, #12
 801016a:	2d00      	cmp	r5, #0
 801016c:	4606      	mov	r6, r0
 801016e:	db01      	blt.n	8010174 <_malloc_r+0x1c>
 8010170:	42a9      	cmp	r1, r5
 8010172:	d904      	bls.n	801017e <_malloc_r+0x26>
 8010174:	230c      	movs	r3, #12
 8010176:	6033      	str	r3, [r6, #0]
 8010178:	2000      	movs	r0, #0
 801017a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801017e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010254 <_malloc_r+0xfc>
 8010182:	f000 f869 	bl	8010258 <__malloc_lock>
 8010186:	f8d8 3000 	ldr.w	r3, [r8]
 801018a:	461c      	mov	r4, r3
 801018c:	bb44      	cbnz	r4, 80101e0 <_malloc_r+0x88>
 801018e:	4629      	mov	r1, r5
 8010190:	4630      	mov	r0, r6
 8010192:	f7ff ffbf 	bl	8010114 <sbrk_aligned>
 8010196:	1c43      	adds	r3, r0, #1
 8010198:	4604      	mov	r4, r0
 801019a:	d158      	bne.n	801024e <_malloc_r+0xf6>
 801019c:	f8d8 4000 	ldr.w	r4, [r8]
 80101a0:	4627      	mov	r7, r4
 80101a2:	2f00      	cmp	r7, #0
 80101a4:	d143      	bne.n	801022e <_malloc_r+0xd6>
 80101a6:	2c00      	cmp	r4, #0
 80101a8:	d04b      	beq.n	8010242 <_malloc_r+0xea>
 80101aa:	6823      	ldr	r3, [r4, #0]
 80101ac:	4639      	mov	r1, r7
 80101ae:	4630      	mov	r0, r6
 80101b0:	eb04 0903 	add.w	r9, r4, r3
 80101b4:	f000 f884 	bl	80102c0 <_sbrk_r>
 80101b8:	4581      	cmp	r9, r0
 80101ba:	d142      	bne.n	8010242 <_malloc_r+0xea>
 80101bc:	6821      	ldr	r1, [r4, #0]
 80101be:	1a6d      	subs	r5, r5, r1
 80101c0:	4629      	mov	r1, r5
 80101c2:	4630      	mov	r0, r6
 80101c4:	f7ff ffa6 	bl	8010114 <sbrk_aligned>
 80101c8:	3001      	adds	r0, #1
 80101ca:	d03a      	beq.n	8010242 <_malloc_r+0xea>
 80101cc:	6823      	ldr	r3, [r4, #0]
 80101ce:	442b      	add	r3, r5
 80101d0:	6023      	str	r3, [r4, #0]
 80101d2:	f8d8 3000 	ldr.w	r3, [r8]
 80101d6:	685a      	ldr	r2, [r3, #4]
 80101d8:	bb62      	cbnz	r2, 8010234 <_malloc_r+0xdc>
 80101da:	f8c8 7000 	str.w	r7, [r8]
 80101de:	e00f      	b.n	8010200 <_malloc_r+0xa8>
 80101e0:	6822      	ldr	r2, [r4, #0]
 80101e2:	1b52      	subs	r2, r2, r5
 80101e4:	d420      	bmi.n	8010228 <_malloc_r+0xd0>
 80101e6:	2a0b      	cmp	r2, #11
 80101e8:	d917      	bls.n	801021a <_malloc_r+0xc2>
 80101ea:	1961      	adds	r1, r4, r5
 80101ec:	42a3      	cmp	r3, r4
 80101ee:	6025      	str	r5, [r4, #0]
 80101f0:	bf18      	it	ne
 80101f2:	6059      	strne	r1, [r3, #4]
 80101f4:	6863      	ldr	r3, [r4, #4]
 80101f6:	bf08      	it	eq
 80101f8:	f8c8 1000 	streq.w	r1, [r8]
 80101fc:	5162      	str	r2, [r4, r5]
 80101fe:	604b      	str	r3, [r1, #4]
 8010200:	4630      	mov	r0, r6
 8010202:	f000 f82f 	bl	8010264 <__malloc_unlock>
 8010206:	f104 000b 	add.w	r0, r4, #11
 801020a:	1d23      	adds	r3, r4, #4
 801020c:	f020 0007 	bic.w	r0, r0, #7
 8010210:	1ac2      	subs	r2, r0, r3
 8010212:	bf1c      	itt	ne
 8010214:	1a1b      	subne	r3, r3, r0
 8010216:	50a3      	strne	r3, [r4, r2]
 8010218:	e7af      	b.n	801017a <_malloc_r+0x22>
 801021a:	6862      	ldr	r2, [r4, #4]
 801021c:	42a3      	cmp	r3, r4
 801021e:	bf0c      	ite	eq
 8010220:	f8c8 2000 	streq.w	r2, [r8]
 8010224:	605a      	strne	r2, [r3, #4]
 8010226:	e7eb      	b.n	8010200 <_malloc_r+0xa8>
 8010228:	4623      	mov	r3, r4
 801022a:	6864      	ldr	r4, [r4, #4]
 801022c:	e7ae      	b.n	801018c <_malloc_r+0x34>
 801022e:	463c      	mov	r4, r7
 8010230:	687f      	ldr	r7, [r7, #4]
 8010232:	e7b6      	b.n	80101a2 <_malloc_r+0x4a>
 8010234:	461a      	mov	r2, r3
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	42a3      	cmp	r3, r4
 801023a:	d1fb      	bne.n	8010234 <_malloc_r+0xdc>
 801023c:	2300      	movs	r3, #0
 801023e:	6053      	str	r3, [r2, #4]
 8010240:	e7de      	b.n	8010200 <_malloc_r+0xa8>
 8010242:	230c      	movs	r3, #12
 8010244:	6033      	str	r3, [r6, #0]
 8010246:	4630      	mov	r0, r6
 8010248:	f000 f80c 	bl	8010264 <__malloc_unlock>
 801024c:	e794      	b.n	8010178 <_malloc_r+0x20>
 801024e:	6005      	str	r5, [r0, #0]
 8010250:	e7d6      	b.n	8010200 <_malloc_r+0xa8>
 8010252:	bf00      	nop
 8010254:	24001fc4 	.word	0x24001fc4

08010258 <__malloc_lock>:
 8010258:	4801      	ldr	r0, [pc, #4]	@ (8010260 <__malloc_lock+0x8>)
 801025a:	f000 b86b 	b.w	8010334 <__retarget_lock_acquire_recursive>
 801025e:	bf00      	nop
 8010260:	24002104 	.word	0x24002104

08010264 <__malloc_unlock>:
 8010264:	4801      	ldr	r0, [pc, #4]	@ (801026c <__malloc_unlock+0x8>)
 8010266:	f000 b866 	b.w	8010336 <__retarget_lock_release_recursive>
 801026a:	bf00      	nop
 801026c:	24002104 	.word	0x24002104

08010270 <siprintf>:
 8010270:	b40e      	push	{r1, r2, r3}
 8010272:	b500      	push	{lr}
 8010274:	b09c      	sub	sp, #112	@ 0x70
 8010276:	ab1d      	add	r3, sp, #116	@ 0x74
 8010278:	9002      	str	r0, [sp, #8]
 801027a:	9006      	str	r0, [sp, #24]
 801027c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010280:	4809      	ldr	r0, [pc, #36]	@ (80102a8 <siprintf+0x38>)
 8010282:	9107      	str	r1, [sp, #28]
 8010284:	9104      	str	r1, [sp, #16]
 8010286:	4909      	ldr	r1, [pc, #36]	@ (80102ac <siprintf+0x3c>)
 8010288:	f853 2b04 	ldr.w	r2, [r3], #4
 801028c:	9105      	str	r1, [sp, #20]
 801028e:	6800      	ldr	r0, [r0, #0]
 8010290:	9301      	str	r3, [sp, #4]
 8010292:	a902      	add	r1, sp, #8
 8010294:	f000 f8f6 	bl	8010484 <_svfiprintf_r>
 8010298:	9b02      	ldr	r3, [sp, #8]
 801029a:	2200      	movs	r2, #0
 801029c:	701a      	strb	r2, [r3, #0]
 801029e:	b01c      	add	sp, #112	@ 0x70
 80102a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80102a4:	b003      	add	sp, #12
 80102a6:	4770      	bx	lr
 80102a8:	24000108 	.word	0x24000108
 80102ac:	ffff0208 	.word	0xffff0208

080102b0 <memset>:
 80102b0:	4402      	add	r2, r0
 80102b2:	4603      	mov	r3, r0
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d100      	bne.n	80102ba <memset+0xa>
 80102b8:	4770      	bx	lr
 80102ba:	f803 1b01 	strb.w	r1, [r3], #1
 80102be:	e7f9      	b.n	80102b4 <memset+0x4>

080102c0 <_sbrk_r>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	4d06      	ldr	r5, [pc, #24]	@ (80102dc <_sbrk_r+0x1c>)
 80102c4:	2300      	movs	r3, #0
 80102c6:	4604      	mov	r4, r0
 80102c8:	4608      	mov	r0, r1
 80102ca:	602b      	str	r3, [r5, #0]
 80102cc:	f7f1 f808 	bl	80012e0 <_sbrk>
 80102d0:	1c43      	adds	r3, r0, #1
 80102d2:	d102      	bne.n	80102da <_sbrk_r+0x1a>
 80102d4:	682b      	ldr	r3, [r5, #0]
 80102d6:	b103      	cbz	r3, 80102da <_sbrk_r+0x1a>
 80102d8:	6023      	str	r3, [r4, #0]
 80102da:	bd38      	pop	{r3, r4, r5, pc}
 80102dc:	24002100 	.word	0x24002100

080102e0 <__errno>:
 80102e0:	4b01      	ldr	r3, [pc, #4]	@ (80102e8 <__errno+0x8>)
 80102e2:	6818      	ldr	r0, [r3, #0]
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop
 80102e8:	24000108 	.word	0x24000108

080102ec <__libc_init_array>:
 80102ec:	b570      	push	{r4, r5, r6, lr}
 80102ee:	4d0d      	ldr	r5, [pc, #52]	@ (8010324 <__libc_init_array+0x38>)
 80102f0:	4c0d      	ldr	r4, [pc, #52]	@ (8010328 <__libc_init_array+0x3c>)
 80102f2:	1b64      	subs	r4, r4, r5
 80102f4:	10a4      	asrs	r4, r4, #2
 80102f6:	2600      	movs	r6, #0
 80102f8:	42a6      	cmp	r6, r4
 80102fa:	d109      	bne.n	8010310 <__libc_init_array+0x24>
 80102fc:	4d0b      	ldr	r5, [pc, #44]	@ (801032c <__libc_init_array+0x40>)
 80102fe:	4c0c      	ldr	r4, [pc, #48]	@ (8010330 <__libc_init_array+0x44>)
 8010300:	f000 fcda 	bl	8010cb8 <_init>
 8010304:	1b64      	subs	r4, r4, r5
 8010306:	10a4      	asrs	r4, r4, #2
 8010308:	2600      	movs	r6, #0
 801030a:	42a6      	cmp	r6, r4
 801030c:	d105      	bne.n	801031a <__libc_init_array+0x2e>
 801030e:	bd70      	pop	{r4, r5, r6, pc}
 8010310:	f855 3b04 	ldr.w	r3, [r5], #4
 8010314:	4798      	blx	r3
 8010316:	3601      	adds	r6, #1
 8010318:	e7ee      	b.n	80102f8 <__libc_init_array+0xc>
 801031a:	f855 3b04 	ldr.w	r3, [r5], #4
 801031e:	4798      	blx	r3
 8010320:	3601      	adds	r6, #1
 8010322:	e7f2      	b.n	801030a <__libc_init_array+0x1e>
 8010324:	08011b70 	.word	0x08011b70
 8010328:	08011b70 	.word	0x08011b70
 801032c:	08011b70 	.word	0x08011b70
 8010330:	08011b74 	.word	0x08011b74

08010334 <__retarget_lock_acquire_recursive>:
 8010334:	4770      	bx	lr

08010336 <__retarget_lock_release_recursive>:
 8010336:	4770      	bx	lr

08010338 <_free_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4605      	mov	r5, r0
 801033c:	2900      	cmp	r1, #0
 801033e:	d041      	beq.n	80103c4 <_free_r+0x8c>
 8010340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010344:	1f0c      	subs	r4, r1, #4
 8010346:	2b00      	cmp	r3, #0
 8010348:	bfb8      	it	lt
 801034a:	18e4      	addlt	r4, r4, r3
 801034c:	f7ff ff84 	bl	8010258 <__malloc_lock>
 8010350:	4a1d      	ldr	r2, [pc, #116]	@ (80103c8 <_free_r+0x90>)
 8010352:	6813      	ldr	r3, [r2, #0]
 8010354:	b933      	cbnz	r3, 8010364 <_free_r+0x2c>
 8010356:	6063      	str	r3, [r4, #4]
 8010358:	6014      	str	r4, [r2, #0]
 801035a:	4628      	mov	r0, r5
 801035c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010360:	f7ff bf80 	b.w	8010264 <__malloc_unlock>
 8010364:	42a3      	cmp	r3, r4
 8010366:	d908      	bls.n	801037a <_free_r+0x42>
 8010368:	6820      	ldr	r0, [r4, #0]
 801036a:	1821      	adds	r1, r4, r0
 801036c:	428b      	cmp	r3, r1
 801036e:	bf01      	itttt	eq
 8010370:	6819      	ldreq	r1, [r3, #0]
 8010372:	685b      	ldreq	r3, [r3, #4]
 8010374:	1809      	addeq	r1, r1, r0
 8010376:	6021      	streq	r1, [r4, #0]
 8010378:	e7ed      	b.n	8010356 <_free_r+0x1e>
 801037a:	461a      	mov	r2, r3
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	b10b      	cbz	r3, 8010384 <_free_r+0x4c>
 8010380:	42a3      	cmp	r3, r4
 8010382:	d9fa      	bls.n	801037a <_free_r+0x42>
 8010384:	6811      	ldr	r1, [r2, #0]
 8010386:	1850      	adds	r0, r2, r1
 8010388:	42a0      	cmp	r0, r4
 801038a:	d10b      	bne.n	80103a4 <_free_r+0x6c>
 801038c:	6820      	ldr	r0, [r4, #0]
 801038e:	4401      	add	r1, r0
 8010390:	1850      	adds	r0, r2, r1
 8010392:	4283      	cmp	r3, r0
 8010394:	6011      	str	r1, [r2, #0]
 8010396:	d1e0      	bne.n	801035a <_free_r+0x22>
 8010398:	6818      	ldr	r0, [r3, #0]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	6053      	str	r3, [r2, #4]
 801039e:	4408      	add	r0, r1
 80103a0:	6010      	str	r0, [r2, #0]
 80103a2:	e7da      	b.n	801035a <_free_r+0x22>
 80103a4:	d902      	bls.n	80103ac <_free_r+0x74>
 80103a6:	230c      	movs	r3, #12
 80103a8:	602b      	str	r3, [r5, #0]
 80103aa:	e7d6      	b.n	801035a <_free_r+0x22>
 80103ac:	6820      	ldr	r0, [r4, #0]
 80103ae:	1821      	adds	r1, r4, r0
 80103b0:	428b      	cmp	r3, r1
 80103b2:	bf04      	itt	eq
 80103b4:	6819      	ldreq	r1, [r3, #0]
 80103b6:	685b      	ldreq	r3, [r3, #4]
 80103b8:	6063      	str	r3, [r4, #4]
 80103ba:	bf04      	itt	eq
 80103bc:	1809      	addeq	r1, r1, r0
 80103be:	6021      	streq	r1, [r4, #0]
 80103c0:	6054      	str	r4, [r2, #4]
 80103c2:	e7ca      	b.n	801035a <_free_r+0x22>
 80103c4:	bd38      	pop	{r3, r4, r5, pc}
 80103c6:	bf00      	nop
 80103c8:	24001fc4 	.word	0x24001fc4

080103cc <__ssputs_r>:
 80103cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103d0:	688e      	ldr	r6, [r1, #8]
 80103d2:	461f      	mov	r7, r3
 80103d4:	42be      	cmp	r6, r7
 80103d6:	680b      	ldr	r3, [r1, #0]
 80103d8:	4682      	mov	sl, r0
 80103da:	460c      	mov	r4, r1
 80103dc:	4690      	mov	r8, r2
 80103de:	d82d      	bhi.n	801043c <__ssputs_r+0x70>
 80103e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80103e8:	d026      	beq.n	8010438 <__ssputs_r+0x6c>
 80103ea:	6965      	ldr	r5, [r4, #20]
 80103ec:	6909      	ldr	r1, [r1, #16]
 80103ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103f2:	eba3 0901 	sub.w	r9, r3, r1
 80103f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103fa:	1c7b      	adds	r3, r7, #1
 80103fc:	444b      	add	r3, r9
 80103fe:	106d      	asrs	r5, r5, #1
 8010400:	429d      	cmp	r5, r3
 8010402:	bf38      	it	cc
 8010404:	461d      	movcc	r5, r3
 8010406:	0553      	lsls	r3, r2, #21
 8010408:	d527      	bpl.n	801045a <__ssputs_r+0x8e>
 801040a:	4629      	mov	r1, r5
 801040c:	f7ff fea4 	bl	8010158 <_malloc_r>
 8010410:	4606      	mov	r6, r0
 8010412:	b360      	cbz	r0, 801046e <__ssputs_r+0xa2>
 8010414:	6921      	ldr	r1, [r4, #16]
 8010416:	464a      	mov	r2, r9
 8010418:	f000 fad8 	bl	80109cc <memcpy>
 801041c:	89a3      	ldrh	r3, [r4, #12]
 801041e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010426:	81a3      	strh	r3, [r4, #12]
 8010428:	6126      	str	r6, [r4, #16]
 801042a:	6165      	str	r5, [r4, #20]
 801042c:	444e      	add	r6, r9
 801042e:	eba5 0509 	sub.w	r5, r5, r9
 8010432:	6026      	str	r6, [r4, #0]
 8010434:	60a5      	str	r5, [r4, #8]
 8010436:	463e      	mov	r6, r7
 8010438:	42be      	cmp	r6, r7
 801043a:	d900      	bls.n	801043e <__ssputs_r+0x72>
 801043c:	463e      	mov	r6, r7
 801043e:	6820      	ldr	r0, [r4, #0]
 8010440:	4632      	mov	r2, r6
 8010442:	4641      	mov	r1, r8
 8010444:	f000 faa8 	bl	8010998 <memmove>
 8010448:	68a3      	ldr	r3, [r4, #8]
 801044a:	1b9b      	subs	r3, r3, r6
 801044c:	60a3      	str	r3, [r4, #8]
 801044e:	6823      	ldr	r3, [r4, #0]
 8010450:	4433      	add	r3, r6
 8010452:	6023      	str	r3, [r4, #0]
 8010454:	2000      	movs	r0, #0
 8010456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801045a:	462a      	mov	r2, r5
 801045c:	f000 fac4 	bl	80109e8 <_realloc_r>
 8010460:	4606      	mov	r6, r0
 8010462:	2800      	cmp	r0, #0
 8010464:	d1e0      	bne.n	8010428 <__ssputs_r+0x5c>
 8010466:	6921      	ldr	r1, [r4, #16]
 8010468:	4650      	mov	r0, sl
 801046a:	f7ff ff65 	bl	8010338 <_free_r>
 801046e:	230c      	movs	r3, #12
 8010470:	f8ca 3000 	str.w	r3, [sl]
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801047a:	81a3      	strh	r3, [r4, #12]
 801047c:	f04f 30ff 	mov.w	r0, #4294967295
 8010480:	e7e9      	b.n	8010456 <__ssputs_r+0x8a>
	...

08010484 <_svfiprintf_r>:
 8010484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010488:	4698      	mov	r8, r3
 801048a:	898b      	ldrh	r3, [r1, #12]
 801048c:	061b      	lsls	r3, r3, #24
 801048e:	b09d      	sub	sp, #116	@ 0x74
 8010490:	4607      	mov	r7, r0
 8010492:	460d      	mov	r5, r1
 8010494:	4614      	mov	r4, r2
 8010496:	d510      	bpl.n	80104ba <_svfiprintf_r+0x36>
 8010498:	690b      	ldr	r3, [r1, #16]
 801049a:	b973      	cbnz	r3, 80104ba <_svfiprintf_r+0x36>
 801049c:	2140      	movs	r1, #64	@ 0x40
 801049e:	f7ff fe5b 	bl	8010158 <_malloc_r>
 80104a2:	6028      	str	r0, [r5, #0]
 80104a4:	6128      	str	r0, [r5, #16]
 80104a6:	b930      	cbnz	r0, 80104b6 <_svfiprintf_r+0x32>
 80104a8:	230c      	movs	r3, #12
 80104aa:	603b      	str	r3, [r7, #0]
 80104ac:	f04f 30ff 	mov.w	r0, #4294967295
 80104b0:	b01d      	add	sp, #116	@ 0x74
 80104b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b6:	2340      	movs	r3, #64	@ 0x40
 80104b8:	616b      	str	r3, [r5, #20]
 80104ba:	2300      	movs	r3, #0
 80104bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80104be:	2320      	movs	r3, #32
 80104c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80104c8:	2330      	movs	r3, #48	@ 0x30
 80104ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010668 <_svfiprintf_r+0x1e4>
 80104ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104d2:	f04f 0901 	mov.w	r9, #1
 80104d6:	4623      	mov	r3, r4
 80104d8:	469a      	mov	sl, r3
 80104da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104de:	b10a      	cbz	r2, 80104e4 <_svfiprintf_r+0x60>
 80104e0:	2a25      	cmp	r2, #37	@ 0x25
 80104e2:	d1f9      	bne.n	80104d8 <_svfiprintf_r+0x54>
 80104e4:	ebba 0b04 	subs.w	fp, sl, r4
 80104e8:	d00b      	beq.n	8010502 <_svfiprintf_r+0x7e>
 80104ea:	465b      	mov	r3, fp
 80104ec:	4622      	mov	r2, r4
 80104ee:	4629      	mov	r1, r5
 80104f0:	4638      	mov	r0, r7
 80104f2:	f7ff ff6b 	bl	80103cc <__ssputs_r>
 80104f6:	3001      	adds	r0, #1
 80104f8:	f000 80a7 	beq.w	801064a <_svfiprintf_r+0x1c6>
 80104fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104fe:	445a      	add	r2, fp
 8010500:	9209      	str	r2, [sp, #36]	@ 0x24
 8010502:	f89a 3000 	ldrb.w	r3, [sl]
 8010506:	2b00      	cmp	r3, #0
 8010508:	f000 809f 	beq.w	801064a <_svfiprintf_r+0x1c6>
 801050c:	2300      	movs	r3, #0
 801050e:	f04f 32ff 	mov.w	r2, #4294967295
 8010512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010516:	f10a 0a01 	add.w	sl, sl, #1
 801051a:	9304      	str	r3, [sp, #16]
 801051c:	9307      	str	r3, [sp, #28]
 801051e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010522:	931a      	str	r3, [sp, #104]	@ 0x68
 8010524:	4654      	mov	r4, sl
 8010526:	2205      	movs	r2, #5
 8010528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801052c:	484e      	ldr	r0, [pc, #312]	@ (8010668 <_svfiprintf_r+0x1e4>)
 801052e:	f7ef fed7 	bl	80002e0 <memchr>
 8010532:	9a04      	ldr	r2, [sp, #16]
 8010534:	b9d8      	cbnz	r0, 801056e <_svfiprintf_r+0xea>
 8010536:	06d0      	lsls	r0, r2, #27
 8010538:	bf44      	itt	mi
 801053a:	2320      	movmi	r3, #32
 801053c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010540:	0711      	lsls	r1, r2, #28
 8010542:	bf44      	itt	mi
 8010544:	232b      	movmi	r3, #43	@ 0x2b
 8010546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801054a:	f89a 3000 	ldrb.w	r3, [sl]
 801054e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010550:	d015      	beq.n	801057e <_svfiprintf_r+0xfa>
 8010552:	9a07      	ldr	r2, [sp, #28]
 8010554:	4654      	mov	r4, sl
 8010556:	2000      	movs	r0, #0
 8010558:	f04f 0c0a 	mov.w	ip, #10
 801055c:	4621      	mov	r1, r4
 801055e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010562:	3b30      	subs	r3, #48	@ 0x30
 8010564:	2b09      	cmp	r3, #9
 8010566:	d94b      	bls.n	8010600 <_svfiprintf_r+0x17c>
 8010568:	b1b0      	cbz	r0, 8010598 <_svfiprintf_r+0x114>
 801056a:	9207      	str	r2, [sp, #28]
 801056c:	e014      	b.n	8010598 <_svfiprintf_r+0x114>
 801056e:	eba0 0308 	sub.w	r3, r0, r8
 8010572:	fa09 f303 	lsl.w	r3, r9, r3
 8010576:	4313      	orrs	r3, r2
 8010578:	9304      	str	r3, [sp, #16]
 801057a:	46a2      	mov	sl, r4
 801057c:	e7d2      	b.n	8010524 <_svfiprintf_r+0xa0>
 801057e:	9b03      	ldr	r3, [sp, #12]
 8010580:	1d19      	adds	r1, r3, #4
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	9103      	str	r1, [sp, #12]
 8010586:	2b00      	cmp	r3, #0
 8010588:	bfbb      	ittet	lt
 801058a:	425b      	neglt	r3, r3
 801058c:	f042 0202 	orrlt.w	r2, r2, #2
 8010590:	9307      	strge	r3, [sp, #28]
 8010592:	9307      	strlt	r3, [sp, #28]
 8010594:	bfb8      	it	lt
 8010596:	9204      	strlt	r2, [sp, #16]
 8010598:	7823      	ldrb	r3, [r4, #0]
 801059a:	2b2e      	cmp	r3, #46	@ 0x2e
 801059c:	d10a      	bne.n	80105b4 <_svfiprintf_r+0x130>
 801059e:	7863      	ldrb	r3, [r4, #1]
 80105a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80105a2:	d132      	bne.n	801060a <_svfiprintf_r+0x186>
 80105a4:	9b03      	ldr	r3, [sp, #12]
 80105a6:	1d1a      	adds	r2, r3, #4
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	9203      	str	r2, [sp, #12]
 80105ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105b0:	3402      	adds	r4, #2
 80105b2:	9305      	str	r3, [sp, #20]
 80105b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010678 <_svfiprintf_r+0x1f4>
 80105b8:	7821      	ldrb	r1, [r4, #0]
 80105ba:	2203      	movs	r2, #3
 80105bc:	4650      	mov	r0, sl
 80105be:	f7ef fe8f 	bl	80002e0 <memchr>
 80105c2:	b138      	cbz	r0, 80105d4 <_svfiprintf_r+0x150>
 80105c4:	9b04      	ldr	r3, [sp, #16]
 80105c6:	eba0 000a 	sub.w	r0, r0, sl
 80105ca:	2240      	movs	r2, #64	@ 0x40
 80105cc:	4082      	lsls	r2, r0
 80105ce:	4313      	orrs	r3, r2
 80105d0:	3401      	adds	r4, #1
 80105d2:	9304      	str	r3, [sp, #16]
 80105d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105d8:	4824      	ldr	r0, [pc, #144]	@ (801066c <_svfiprintf_r+0x1e8>)
 80105da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105de:	2206      	movs	r2, #6
 80105e0:	f7ef fe7e 	bl	80002e0 <memchr>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d036      	beq.n	8010656 <_svfiprintf_r+0x1d2>
 80105e8:	4b21      	ldr	r3, [pc, #132]	@ (8010670 <_svfiprintf_r+0x1ec>)
 80105ea:	bb1b      	cbnz	r3, 8010634 <_svfiprintf_r+0x1b0>
 80105ec:	9b03      	ldr	r3, [sp, #12]
 80105ee:	3307      	adds	r3, #7
 80105f0:	f023 0307 	bic.w	r3, r3, #7
 80105f4:	3308      	adds	r3, #8
 80105f6:	9303      	str	r3, [sp, #12]
 80105f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105fa:	4433      	add	r3, r6
 80105fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80105fe:	e76a      	b.n	80104d6 <_svfiprintf_r+0x52>
 8010600:	fb0c 3202 	mla	r2, ip, r2, r3
 8010604:	460c      	mov	r4, r1
 8010606:	2001      	movs	r0, #1
 8010608:	e7a8      	b.n	801055c <_svfiprintf_r+0xd8>
 801060a:	2300      	movs	r3, #0
 801060c:	3401      	adds	r4, #1
 801060e:	9305      	str	r3, [sp, #20]
 8010610:	4619      	mov	r1, r3
 8010612:	f04f 0c0a 	mov.w	ip, #10
 8010616:	4620      	mov	r0, r4
 8010618:	f810 2b01 	ldrb.w	r2, [r0], #1
 801061c:	3a30      	subs	r2, #48	@ 0x30
 801061e:	2a09      	cmp	r2, #9
 8010620:	d903      	bls.n	801062a <_svfiprintf_r+0x1a6>
 8010622:	2b00      	cmp	r3, #0
 8010624:	d0c6      	beq.n	80105b4 <_svfiprintf_r+0x130>
 8010626:	9105      	str	r1, [sp, #20]
 8010628:	e7c4      	b.n	80105b4 <_svfiprintf_r+0x130>
 801062a:	fb0c 2101 	mla	r1, ip, r1, r2
 801062e:	4604      	mov	r4, r0
 8010630:	2301      	movs	r3, #1
 8010632:	e7f0      	b.n	8010616 <_svfiprintf_r+0x192>
 8010634:	ab03      	add	r3, sp, #12
 8010636:	9300      	str	r3, [sp, #0]
 8010638:	462a      	mov	r2, r5
 801063a:	4b0e      	ldr	r3, [pc, #56]	@ (8010674 <_svfiprintf_r+0x1f0>)
 801063c:	a904      	add	r1, sp, #16
 801063e:	4638      	mov	r0, r7
 8010640:	f3af 8000 	nop.w
 8010644:	1c42      	adds	r2, r0, #1
 8010646:	4606      	mov	r6, r0
 8010648:	d1d6      	bne.n	80105f8 <_svfiprintf_r+0x174>
 801064a:	89ab      	ldrh	r3, [r5, #12]
 801064c:	065b      	lsls	r3, r3, #25
 801064e:	f53f af2d 	bmi.w	80104ac <_svfiprintf_r+0x28>
 8010652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010654:	e72c      	b.n	80104b0 <_svfiprintf_r+0x2c>
 8010656:	ab03      	add	r3, sp, #12
 8010658:	9300      	str	r3, [sp, #0]
 801065a:	462a      	mov	r2, r5
 801065c:	4b05      	ldr	r3, [pc, #20]	@ (8010674 <_svfiprintf_r+0x1f0>)
 801065e:	a904      	add	r1, sp, #16
 8010660:	4638      	mov	r0, r7
 8010662:	f000 f879 	bl	8010758 <_printf_i>
 8010666:	e7ed      	b.n	8010644 <_svfiprintf_r+0x1c0>
 8010668:	08011b24 	.word	0x08011b24
 801066c:	08011b2e 	.word	0x08011b2e
 8010670:	00000000 	.word	0x00000000
 8010674:	080103cd 	.word	0x080103cd
 8010678:	08011b2a 	.word	0x08011b2a

0801067c <_printf_common>:
 801067c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010680:	4616      	mov	r6, r2
 8010682:	4698      	mov	r8, r3
 8010684:	688a      	ldr	r2, [r1, #8]
 8010686:	690b      	ldr	r3, [r1, #16]
 8010688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801068c:	4293      	cmp	r3, r2
 801068e:	bfb8      	it	lt
 8010690:	4613      	movlt	r3, r2
 8010692:	6033      	str	r3, [r6, #0]
 8010694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010698:	4607      	mov	r7, r0
 801069a:	460c      	mov	r4, r1
 801069c:	b10a      	cbz	r2, 80106a2 <_printf_common+0x26>
 801069e:	3301      	adds	r3, #1
 80106a0:	6033      	str	r3, [r6, #0]
 80106a2:	6823      	ldr	r3, [r4, #0]
 80106a4:	0699      	lsls	r1, r3, #26
 80106a6:	bf42      	ittt	mi
 80106a8:	6833      	ldrmi	r3, [r6, #0]
 80106aa:	3302      	addmi	r3, #2
 80106ac:	6033      	strmi	r3, [r6, #0]
 80106ae:	6825      	ldr	r5, [r4, #0]
 80106b0:	f015 0506 	ands.w	r5, r5, #6
 80106b4:	d106      	bne.n	80106c4 <_printf_common+0x48>
 80106b6:	f104 0a19 	add.w	sl, r4, #25
 80106ba:	68e3      	ldr	r3, [r4, #12]
 80106bc:	6832      	ldr	r2, [r6, #0]
 80106be:	1a9b      	subs	r3, r3, r2
 80106c0:	42ab      	cmp	r3, r5
 80106c2:	dc26      	bgt.n	8010712 <_printf_common+0x96>
 80106c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80106c8:	6822      	ldr	r2, [r4, #0]
 80106ca:	3b00      	subs	r3, #0
 80106cc:	bf18      	it	ne
 80106ce:	2301      	movne	r3, #1
 80106d0:	0692      	lsls	r2, r2, #26
 80106d2:	d42b      	bmi.n	801072c <_printf_common+0xb0>
 80106d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80106d8:	4641      	mov	r1, r8
 80106da:	4638      	mov	r0, r7
 80106dc:	47c8      	blx	r9
 80106de:	3001      	adds	r0, #1
 80106e0:	d01e      	beq.n	8010720 <_printf_common+0xa4>
 80106e2:	6823      	ldr	r3, [r4, #0]
 80106e4:	6922      	ldr	r2, [r4, #16]
 80106e6:	f003 0306 	and.w	r3, r3, #6
 80106ea:	2b04      	cmp	r3, #4
 80106ec:	bf02      	ittt	eq
 80106ee:	68e5      	ldreq	r5, [r4, #12]
 80106f0:	6833      	ldreq	r3, [r6, #0]
 80106f2:	1aed      	subeq	r5, r5, r3
 80106f4:	68a3      	ldr	r3, [r4, #8]
 80106f6:	bf0c      	ite	eq
 80106f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106fc:	2500      	movne	r5, #0
 80106fe:	4293      	cmp	r3, r2
 8010700:	bfc4      	itt	gt
 8010702:	1a9b      	subgt	r3, r3, r2
 8010704:	18ed      	addgt	r5, r5, r3
 8010706:	2600      	movs	r6, #0
 8010708:	341a      	adds	r4, #26
 801070a:	42b5      	cmp	r5, r6
 801070c:	d11a      	bne.n	8010744 <_printf_common+0xc8>
 801070e:	2000      	movs	r0, #0
 8010710:	e008      	b.n	8010724 <_printf_common+0xa8>
 8010712:	2301      	movs	r3, #1
 8010714:	4652      	mov	r2, sl
 8010716:	4641      	mov	r1, r8
 8010718:	4638      	mov	r0, r7
 801071a:	47c8      	blx	r9
 801071c:	3001      	adds	r0, #1
 801071e:	d103      	bne.n	8010728 <_printf_common+0xac>
 8010720:	f04f 30ff 	mov.w	r0, #4294967295
 8010724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010728:	3501      	adds	r5, #1
 801072a:	e7c6      	b.n	80106ba <_printf_common+0x3e>
 801072c:	18e1      	adds	r1, r4, r3
 801072e:	1c5a      	adds	r2, r3, #1
 8010730:	2030      	movs	r0, #48	@ 0x30
 8010732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010736:	4422      	add	r2, r4
 8010738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801073c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010740:	3302      	adds	r3, #2
 8010742:	e7c7      	b.n	80106d4 <_printf_common+0x58>
 8010744:	2301      	movs	r3, #1
 8010746:	4622      	mov	r2, r4
 8010748:	4641      	mov	r1, r8
 801074a:	4638      	mov	r0, r7
 801074c:	47c8      	blx	r9
 801074e:	3001      	adds	r0, #1
 8010750:	d0e6      	beq.n	8010720 <_printf_common+0xa4>
 8010752:	3601      	adds	r6, #1
 8010754:	e7d9      	b.n	801070a <_printf_common+0x8e>
	...

08010758 <_printf_i>:
 8010758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801075c:	7e0f      	ldrb	r7, [r1, #24]
 801075e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010760:	2f78      	cmp	r7, #120	@ 0x78
 8010762:	4691      	mov	r9, r2
 8010764:	4680      	mov	r8, r0
 8010766:	460c      	mov	r4, r1
 8010768:	469a      	mov	sl, r3
 801076a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801076e:	d807      	bhi.n	8010780 <_printf_i+0x28>
 8010770:	2f62      	cmp	r7, #98	@ 0x62
 8010772:	d80a      	bhi.n	801078a <_printf_i+0x32>
 8010774:	2f00      	cmp	r7, #0
 8010776:	f000 80d2 	beq.w	801091e <_printf_i+0x1c6>
 801077a:	2f58      	cmp	r7, #88	@ 0x58
 801077c:	f000 80b9 	beq.w	80108f2 <_printf_i+0x19a>
 8010780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010788:	e03a      	b.n	8010800 <_printf_i+0xa8>
 801078a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801078e:	2b15      	cmp	r3, #21
 8010790:	d8f6      	bhi.n	8010780 <_printf_i+0x28>
 8010792:	a101      	add	r1, pc, #4	@ (adr r1, 8010798 <_printf_i+0x40>)
 8010794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010798:	080107f1 	.word	0x080107f1
 801079c:	08010805 	.word	0x08010805
 80107a0:	08010781 	.word	0x08010781
 80107a4:	08010781 	.word	0x08010781
 80107a8:	08010781 	.word	0x08010781
 80107ac:	08010781 	.word	0x08010781
 80107b0:	08010805 	.word	0x08010805
 80107b4:	08010781 	.word	0x08010781
 80107b8:	08010781 	.word	0x08010781
 80107bc:	08010781 	.word	0x08010781
 80107c0:	08010781 	.word	0x08010781
 80107c4:	08010905 	.word	0x08010905
 80107c8:	0801082f 	.word	0x0801082f
 80107cc:	080108bf 	.word	0x080108bf
 80107d0:	08010781 	.word	0x08010781
 80107d4:	08010781 	.word	0x08010781
 80107d8:	08010927 	.word	0x08010927
 80107dc:	08010781 	.word	0x08010781
 80107e0:	0801082f 	.word	0x0801082f
 80107e4:	08010781 	.word	0x08010781
 80107e8:	08010781 	.word	0x08010781
 80107ec:	080108c7 	.word	0x080108c7
 80107f0:	6833      	ldr	r3, [r6, #0]
 80107f2:	1d1a      	adds	r2, r3, #4
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	6032      	str	r2, [r6, #0]
 80107f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010800:	2301      	movs	r3, #1
 8010802:	e09d      	b.n	8010940 <_printf_i+0x1e8>
 8010804:	6833      	ldr	r3, [r6, #0]
 8010806:	6820      	ldr	r0, [r4, #0]
 8010808:	1d19      	adds	r1, r3, #4
 801080a:	6031      	str	r1, [r6, #0]
 801080c:	0606      	lsls	r6, r0, #24
 801080e:	d501      	bpl.n	8010814 <_printf_i+0xbc>
 8010810:	681d      	ldr	r5, [r3, #0]
 8010812:	e003      	b.n	801081c <_printf_i+0xc4>
 8010814:	0645      	lsls	r5, r0, #25
 8010816:	d5fb      	bpl.n	8010810 <_printf_i+0xb8>
 8010818:	f9b3 5000 	ldrsh.w	r5, [r3]
 801081c:	2d00      	cmp	r5, #0
 801081e:	da03      	bge.n	8010828 <_printf_i+0xd0>
 8010820:	232d      	movs	r3, #45	@ 0x2d
 8010822:	426d      	negs	r5, r5
 8010824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010828:	4859      	ldr	r0, [pc, #356]	@ (8010990 <_printf_i+0x238>)
 801082a:	230a      	movs	r3, #10
 801082c:	e011      	b.n	8010852 <_printf_i+0xfa>
 801082e:	6821      	ldr	r1, [r4, #0]
 8010830:	6833      	ldr	r3, [r6, #0]
 8010832:	0608      	lsls	r0, r1, #24
 8010834:	f853 5b04 	ldr.w	r5, [r3], #4
 8010838:	d402      	bmi.n	8010840 <_printf_i+0xe8>
 801083a:	0649      	lsls	r1, r1, #25
 801083c:	bf48      	it	mi
 801083e:	b2ad      	uxthmi	r5, r5
 8010840:	2f6f      	cmp	r7, #111	@ 0x6f
 8010842:	4853      	ldr	r0, [pc, #332]	@ (8010990 <_printf_i+0x238>)
 8010844:	6033      	str	r3, [r6, #0]
 8010846:	bf14      	ite	ne
 8010848:	230a      	movne	r3, #10
 801084a:	2308      	moveq	r3, #8
 801084c:	2100      	movs	r1, #0
 801084e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010852:	6866      	ldr	r6, [r4, #4]
 8010854:	60a6      	str	r6, [r4, #8]
 8010856:	2e00      	cmp	r6, #0
 8010858:	bfa2      	ittt	ge
 801085a:	6821      	ldrge	r1, [r4, #0]
 801085c:	f021 0104 	bicge.w	r1, r1, #4
 8010860:	6021      	strge	r1, [r4, #0]
 8010862:	b90d      	cbnz	r5, 8010868 <_printf_i+0x110>
 8010864:	2e00      	cmp	r6, #0
 8010866:	d04b      	beq.n	8010900 <_printf_i+0x1a8>
 8010868:	4616      	mov	r6, r2
 801086a:	fbb5 f1f3 	udiv	r1, r5, r3
 801086e:	fb03 5711 	mls	r7, r3, r1, r5
 8010872:	5dc7      	ldrb	r7, [r0, r7]
 8010874:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010878:	462f      	mov	r7, r5
 801087a:	42bb      	cmp	r3, r7
 801087c:	460d      	mov	r5, r1
 801087e:	d9f4      	bls.n	801086a <_printf_i+0x112>
 8010880:	2b08      	cmp	r3, #8
 8010882:	d10b      	bne.n	801089c <_printf_i+0x144>
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	07df      	lsls	r7, r3, #31
 8010888:	d508      	bpl.n	801089c <_printf_i+0x144>
 801088a:	6923      	ldr	r3, [r4, #16]
 801088c:	6861      	ldr	r1, [r4, #4]
 801088e:	4299      	cmp	r1, r3
 8010890:	bfde      	ittt	le
 8010892:	2330      	movle	r3, #48	@ 0x30
 8010894:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010898:	f106 36ff 	addle.w	r6, r6, #4294967295
 801089c:	1b92      	subs	r2, r2, r6
 801089e:	6122      	str	r2, [r4, #16]
 80108a0:	f8cd a000 	str.w	sl, [sp]
 80108a4:	464b      	mov	r3, r9
 80108a6:	aa03      	add	r2, sp, #12
 80108a8:	4621      	mov	r1, r4
 80108aa:	4640      	mov	r0, r8
 80108ac:	f7ff fee6 	bl	801067c <_printf_common>
 80108b0:	3001      	adds	r0, #1
 80108b2:	d14a      	bne.n	801094a <_printf_i+0x1f2>
 80108b4:	f04f 30ff 	mov.w	r0, #4294967295
 80108b8:	b004      	add	sp, #16
 80108ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	f043 0320 	orr.w	r3, r3, #32
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	4833      	ldr	r0, [pc, #204]	@ (8010994 <_printf_i+0x23c>)
 80108c8:	2778      	movs	r7, #120	@ 0x78
 80108ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80108ce:	6823      	ldr	r3, [r4, #0]
 80108d0:	6831      	ldr	r1, [r6, #0]
 80108d2:	061f      	lsls	r7, r3, #24
 80108d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80108d8:	d402      	bmi.n	80108e0 <_printf_i+0x188>
 80108da:	065f      	lsls	r7, r3, #25
 80108dc:	bf48      	it	mi
 80108de:	b2ad      	uxthmi	r5, r5
 80108e0:	6031      	str	r1, [r6, #0]
 80108e2:	07d9      	lsls	r1, r3, #31
 80108e4:	bf44      	itt	mi
 80108e6:	f043 0320 	orrmi.w	r3, r3, #32
 80108ea:	6023      	strmi	r3, [r4, #0]
 80108ec:	b11d      	cbz	r5, 80108f6 <_printf_i+0x19e>
 80108ee:	2310      	movs	r3, #16
 80108f0:	e7ac      	b.n	801084c <_printf_i+0xf4>
 80108f2:	4827      	ldr	r0, [pc, #156]	@ (8010990 <_printf_i+0x238>)
 80108f4:	e7e9      	b.n	80108ca <_printf_i+0x172>
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	f023 0320 	bic.w	r3, r3, #32
 80108fc:	6023      	str	r3, [r4, #0]
 80108fe:	e7f6      	b.n	80108ee <_printf_i+0x196>
 8010900:	4616      	mov	r6, r2
 8010902:	e7bd      	b.n	8010880 <_printf_i+0x128>
 8010904:	6833      	ldr	r3, [r6, #0]
 8010906:	6825      	ldr	r5, [r4, #0]
 8010908:	6961      	ldr	r1, [r4, #20]
 801090a:	1d18      	adds	r0, r3, #4
 801090c:	6030      	str	r0, [r6, #0]
 801090e:	062e      	lsls	r6, r5, #24
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	d501      	bpl.n	8010918 <_printf_i+0x1c0>
 8010914:	6019      	str	r1, [r3, #0]
 8010916:	e002      	b.n	801091e <_printf_i+0x1c6>
 8010918:	0668      	lsls	r0, r5, #25
 801091a:	d5fb      	bpl.n	8010914 <_printf_i+0x1bc>
 801091c:	8019      	strh	r1, [r3, #0]
 801091e:	2300      	movs	r3, #0
 8010920:	6123      	str	r3, [r4, #16]
 8010922:	4616      	mov	r6, r2
 8010924:	e7bc      	b.n	80108a0 <_printf_i+0x148>
 8010926:	6833      	ldr	r3, [r6, #0]
 8010928:	1d1a      	adds	r2, r3, #4
 801092a:	6032      	str	r2, [r6, #0]
 801092c:	681e      	ldr	r6, [r3, #0]
 801092e:	6862      	ldr	r2, [r4, #4]
 8010930:	2100      	movs	r1, #0
 8010932:	4630      	mov	r0, r6
 8010934:	f7ef fcd4 	bl	80002e0 <memchr>
 8010938:	b108      	cbz	r0, 801093e <_printf_i+0x1e6>
 801093a:	1b80      	subs	r0, r0, r6
 801093c:	6060      	str	r0, [r4, #4]
 801093e:	6863      	ldr	r3, [r4, #4]
 8010940:	6123      	str	r3, [r4, #16]
 8010942:	2300      	movs	r3, #0
 8010944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010948:	e7aa      	b.n	80108a0 <_printf_i+0x148>
 801094a:	6923      	ldr	r3, [r4, #16]
 801094c:	4632      	mov	r2, r6
 801094e:	4649      	mov	r1, r9
 8010950:	4640      	mov	r0, r8
 8010952:	47d0      	blx	sl
 8010954:	3001      	adds	r0, #1
 8010956:	d0ad      	beq.n	80108b4 <_printf_i+0x15c>
 8010958:	6823      	ldr	r3, [r4, #0]
 801095a:	079b      	lsls	r3, r3, #30
 801095c:	d413      	bmi.n	8010986 <_printf_i+0x22e>
 801095e:	68e0      	ldr	r0, [r4, #12]
 8010960:	9b03      	ldr	r3, [sp, #12]
 8010962:	4298      	cmp	r0, r3
 8010964:	bfb8      	it	lt
 8010966:	4618      	movlt	r0, r3
 8010968:	e7a6      	b.n	80108b8 <_printf_i+0x160>
 801096a:	2301      	movs	r3, #1
 801096c:	4632      	mov	r2, r6
 801096e:	4649      	mov	r1, r9
 8010970:	4640      	mov	r0, r8
 8010972:	47d0      	blx	sl
 8010974:	3001      	adds	r0, #1
 8010976:	d09d      	beq.n	80108b4 <_printf_i+0x15c>
 8010978:	3501      	adds	r5, #1
 801097a:	68e3      	ldr	r3, [r4, #12]
 801097c:	9903      	ldr	r1, [sp, #12]
 801097e:	1a5b      	subs	r3, r3, r1
 8010980:	42ab      	cmp	r3, r5
 8010982:	dcf2      	bgt.n	801096a <_printf_i+0x212>
 8010984:	e7eb      	b.n	801095e <_printf_i+0x206>
 8010986:	2500      	movs	r5, #0
 8010988:	f104 0619 	add.w	r6, r4, #25
 801098c:	e7f5      	b.n	801097a <_printf_i+0x222>
 801098e:	bf00      	nop
 8010990:	08011b35 	.word	0x08011b35
 8010994:	08011b46 	.word	0x08011b46

08010998 <memmove>:
 8010998:	4288      	cmp	r0, r1
 801099a:	b510      	push	{r4, lr}
 801099c:	eb01 0402 	add.w	r4, r1, r2
 80109a0:	d902      	bls.n	80109a8 <memmove+0x10>
 80109a2:	4284      	cmp	r4, r0
 80109a4:	4623      	mov	r3, r4
 80109a6:	d807      	bhi.n	80109b8 <memmove+0x20>
 80109a8:	1e43      	subs	r3, r0, #1
 80109aa:	42a1      	cmp	r1, r4
 80109ac:	d008      	beq.n	80109c0 <memmove+0x28>
 80109ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109b6:	e7f8      	b.n	80109aa <memmove+0x12>
 80109b8:	4402      	add	r2, r0
 80109ba:	4601      	mov	r1, r0
 80109bc:	428a      	cmp	r2, r1
 80109be:	d100      	bne.n	80109c2 <memmove+0x2a>
 80109c0:	bd10      	pop	{r4, pc}
 80109c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109ca:	e7f7      	b.n	80109bc <memmove+0x24>

080109cc <memcpy>:
 80109cc:	440a      	add	r2, r1
 80109ce:	4291      	cmp	r1, r2
 80109d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80109d4:	d100      	bne.n	80109d8 <memcpy+0xc>
 80109d6:	4770      	bx	lr
 80109d8:	b510      	push	{r4, lr}
 80109da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109e2:	4291      	cmp	r1, r2
 80109e4:	d1f9      	bne.n	80109da <memcpy+0xe>
 80109e6:	bd10      	pop	{r4, pc}

080109e8 <_realloc_r>:
 80109e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ec:	4680      	mov	r8, r0
 80109ee:	4615      	mov	r5, r2
 80109f0:	460c      	mov	r4, r1
 80109f2:	b921      	cbnz	r1, 80109fe <_realloc_r+0x16>
 80109f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109f8:	4611      	mov	r1, r2
 80109fa:	f7ff bbad 	b.w	8010158 <_malloc_r>
 80109fe:	b92a      	cbnz	r2, 8010a0c <_realloc_r+0x24>
 8010a00:	f7ff fc9a 	bl	8010338 <_free_r>
 8010a04:	2400      	movs	r4, #0
 8010a06:	4620      	mov	r0, r4
 8010a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a0c:	f000 f81a 	bl	8010a44 <_malloc_usable_size_r>
 8010a10:	4285      	cmp	r5, r0
 8010a12:	4606      	mov	r6, r0
 8010a14:	d802      	bhi.n	8010a1c <_realloc_r+0x34>
 8010a16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010a1a:	d8f4      	bhi.n	8010a06 <_realloc_r+0x1e>
 8010a1c:	4629      	mov	r1, r5
 8010a1e:	4640      	mov	r0, r8
 8010a20:	f7ff fb9a 	bl	8010158 <_malloc_r>
 8010a24:	4607      	mov	r7, r0
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d0ec      	beq.n	8010a04 <_realloc_r+0x1c>
 8010a2a:	42b5      	cmp	r5, r6
 8010a2c:	462a      	mov	r2, r5
 8010a2e:	4621      	mov	r1, r4
 8010a30:	bf28      	it	cs
 8010a32:	4632      	movcs	r2, r6
 8010a34:	f7ff ffca 	bl	80109cc <memcpy>
 8010a38:	4621      	mov	r1, r4
 8010a3a:	4640      	mov	r0, r8
 8010a3c:	f7ff fc7c 	bl	8010338 <_free_r>
 8010a40:	463c      	mov	r4, r7
 8010a42:	e7e0      	b.n	8010a06 <_realloc_r+0x1e>

08010a44 <_malloc_usable_size_r>:
 8010a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a48:	1f18      	subs	r0, r3, #4
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	bfbc      	itt	lt
 8010a4e:	580b      	ldrlt	r3, [r1, r0]
 8010a50:	18c0      	addlt	r0, r0, r3
 8010a52:	4770      	bx	lr
 8010a54:	0000      	movs	r0, r0
	...

08010a58 <fmod>:
 8010a58:	b508      	push	{r3, lr}
 8010a5a:	ed2d 8b04 	vpush	{d8-d9}
 8010a5e:	eeb0 9b40 	vmov.f64	d9, d0
 8010a62:	eeb0 8b41 	vmov.f64	d8, d1
 8010a66:	f000 f81b 	bl	8010aa0 <__ieee754_fmod>
 8010a6a:	eeb4 9b48 	vcmp.f64	d9, d8
 8010a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a72:	d60c      	bvs.n	8010a8e <fmod+0x36>
 8010a74:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8010a98 <fmod+0x40>
 8010a78:	eeb4 8b49 	vcmp.f64	d8, d9
 8010a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a80:	d105      	bne.n	8010a8e <fmod+0x36>
 8010a82:	f7ff fc2d 	bl	80102e0 <__errno>
 8010a86:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010a8a:	2321      	movs	r3, #33	@ 0x21
 8010a8c:	6003      	str	r3, [r0, #0]
 8010a8e:	ecbd 8b04 	vpop	{d8-d9}
 8010a92:	bd08      	pop	{r3, pc}
 8010a94:	f3af 8000 	nop.w
	...

08010aa0 <__ieee754_fmod>:
 8010aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010aa4:	ed8d 1b00 	vstr	d1, [sp]
 8010aa8:	e9dd 6500 	ldrd	r6, r5, [sp]
 8010aac:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8010ab0:	ea56 0307 	orrs.w	r3, r6, r7
 8010ab4:	46b6      	mov	lr, r6
 8010ab6:	d00d      	beq.n	8010ad4 <__ieee754_fmod+0x34>
 8010ab8:	ee10 ca90 	vmov	ip, s1
 8010abc:	4b78      	ldr	r3, [pc, #480]	@ (8010ca0 <__ieee754_fmod+0x200>)
 8010abe:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8010ac2:	4598      	cmp	r8, r3
 8010ac4:	d806      	bhi.n	8010ad4 <__ieee754_fmod+0x34>
 8010ac6:	4273      	negs	r3, r6
 8010ac8:	4a76      	ldr	r2, [pc, #472]	@ (8010ca4 <__ieee754_fmod+0x204>)
 8010aca:	4333      	orrs	r3, r6
 8010acc:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d908      	bls.n	8010ae6 <__ieee754_fmod+0x46>
 8010ad4:	ed9d 7b00 	vldr	d7, [sp]
 8010ad8:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010adc:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8010ae0:	b003      	add	sp, #12
 8010ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ae6:	ee10 9a10 	vmov	r9, s0
 8010aea:	45b8      	cmp	r8, r7
 8010aec:	4649      	mov	r1, r9
 8010aee:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8010af2:	dc09      	bgt.n	8010b08 <__ieee754_fmod+0x68>
 8010af4:	dbf4      	blt.n	8010ae0 <__ieee754_fmod+0x40>
 8010af6:	454e      	cmp	r6, r9
 8010af8:	d8f2      	bhi.n	8010ae0 <__ieee754_fmod+0x40>
 8010afa:	d105      	bne.n	8010b08 <__ieee754_fmod+0x68>
 8010afc:	4b6a      	ldr	r3, [pc, #424]	@ (8010ca8 <__ieee754_fmod+0x208>)
 8010afe:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8010b02:	ed93 0b00 	vldr	d0, [r3]
 8010b06:	e7eb      	b.n	8010ae0 <__ieee754_fmod+0x40>
 8010b08:	4a66      	ldr	r2, [pc, #408]	@ (8010ca4 <__ieee754_fmod+0x204>)
 8010b0a:	ea1c 0f02 	tst.w	ip, r2
 8010b0e:	d14a      	bne.n	8010ba6 <__ieee754_fmod+0x106>
 8010b10:	f1b8 0f00 	cmp.w	r8, #0
 8010b14:	d13f      	bne.n	8010b96 <__ieee754_fmod+0xf6>
 8010b16:	4865      	ldr	r0, [pc, #404]	@ (8010cac <__ieee754_fmod+0x20c>)
 8010b18:	464b      	mov	r3, r9
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	dc38      	bgt.n	8010b90 <__ieee754_fmod+0xf0>
 8010b1e:	4215      	tst	r5, r2
 8010b20:	d150      	bne.n	8010bc4 <__ieee754_fmod+0x124>
 8010b22:	2f00      	cmp	r7, #0
 8010b24:	d147      	bne.n	8010bb6 <__ieee754_fmod+0x116>
 8010b26:	4a61      	ldr	r2, [pc, #388]	@ (8010cac <__ieee754_fmod+0x20c>)
 8010b28:	4633      	mov	r3, r6
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	dc40      	bgt.n	8010bb0 <__ieee754_fmod+0x110>
 8010b2e:	4b60      	ldr	r3, [pc, #384]	@ (8010cb0 <__ieee754_fmod+0x210>)
 8010b30:	4298      	cmp	r0, r3
 8010b32:	db4b      	blt.n	8010bcc <__ieee754_fmod+0x12c>
 8010b34:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8010b38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010b3c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8010cb0 <__ieee754_fmod+0x210>
 8010b40:	4562      	cmp	r2, ip
 8010b42:	db58      	blt.n	8010bf6 <__ieee754_fmod+0x156>
 8010b44:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010b48:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8010b4c:	1a80      	subs	r0, r0, r2
 8010b4e:	1b5e      	subs	r6, r3, r5
 8010b50:	eba1 070e 	sub.w	r7, r1, lr
 8010b54:	2800      	cmp	r0, #0
 8010b56:	d164      	bne.n	8010c22 <__ieee754_fmod+0x182>
 8010b58:	4571      	cmp	r1, lr
 8010b5a:	bf38      	it	cc
 8010b5c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8010b60:	2e00      	cmp	r6, #0
 8010b62:	bfa4      	itt	ge
 8010b64:	4639      	movge	r1, r7
 8010b66:	4633      	movge	r3, r6
 8010b68:	ea53 0001 	orrs.w	r0, r3, r1
 8010b6c:	d0c6      	beq.n	8010afc <__ieee754_fmod+0x5c>
 8010b6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010b72:	db6b      	blt.n	8010c4c <__ieee754_fmod+0x1ac>
 8010b74:	484e      	ldr	r0, [pc, #312]	@ (8010cb0 <__ieee754_fmod+0x210>)
 8010b76:	4282      	cmp	r2, r0
 8010b78:	db6e      	blt.n	8010c58 <__ieee754_fmod+0x1b8>
 8010b7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010b7e:	4323      	orrs	r3, r4
 8010b80:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8010b84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010b88:	460c      	mov	r4, r1
 8010b8a:	ec45 4b10 	vmov	d0, r4, r5
 8010b8e:	e7a7      	b.n	8010ae0 <__ieee754_fmod+0x40>
 8010b90:	3801      	subs	r0, #1
 8010b92:	005b      	lsls	r3, r3, #1
 8010b94:	e7c1      	b.n	8010b1a <__ieee754_fmod+0x7a>
 8010b96:	4846      	ldr	r0, [pc, #280]	@ (8010cb0 <__ieee754_fmod+0x210>)
 8010b98:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	ddbe      	ble.n	8010b1e <__ieee754_fmod+0x7e>
 8010ba0:	3801      	subs	r0, #1
 8010ba2:	005b      	lsls	r3, r3, #1
 8010ba4:	e7fa      	b.n	8010b9c <__ieee754_fmod+0xfc>
 8010ba6:	ea4f 5028 	mov.w	r0, r8, asr #20
 8010baa:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8010bae:	e7b6      	b.n	8010b1e <__ieee754_fmod+0x7e>
 8010bb0:	3a01      	subs	r2, #1
 8010bb2:	005b      	lsls	r3, r3, #1
 8010bb4:	e7b9      	b.n	8010b2a <__ieee754_fmod+0x8a>
 8010bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8010cb0 <__ieee754_fmod+0x210>)
 8010bb8:	02fb      	lsls	r3, r7, #11
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	ddb7      	ble.n	8010b2e <__ieee754_fmod+0x8e>
 8010bbe:	3a01      	subs	r2, #1
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	e7fa      	b.n	8010bba <__ieee754_fmod+0x11a>
 8010bc4:	153a      	asrs	r2, r7, #20
 8010bc6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010bca:	e7b0      	b.n	8010b2e <__ieee754_fmod+0x8e>
 8010bcc:	eba3 0c00 	sub.w	ip, r3, r0
 8010bd0:	f1bc 0f1f 	cmp.w	ip, #31
 8010bd4:	dc09      	bgt.n	8010bea <__ieee754_fmod+0x14a>
 8010bd6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8010bda:	fa08 f10c 	lsl.w	r1, r8, ip
 8010bde:	fa29 f303 	lsr.w	r3, r9, r3
 8010be2:	430b      	orrs	r3, r1
 8010be4:	fa09 f10c 	lsl.w	r1, r9, ip
 8010be8:	e7a8      	b.n	8010b3c <__ieee754_fmod+0x9c>
 8010bea:	4b32      	ldr	r3, [pc, #200]	@ (8010cb4 <__ieee754_fmod+0x214>)
 8010bec:	1a1b      	subs	r3, r3, r0
 8010bee:	fa09 f303 	lsl.w	r3, r9, r3
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	e7a2      	b.n	8010b3c <__ieee754_fmod+0x9c>
 8010bf6:	ebac 0c02 	sub.w	ip, ip, r2
 8010bfa:	f1bc 0f1f 	cmp.w	ip, #31
 8010bfe:	dc09      	bgt.n	8010c14 <__ieee754_fmod+0x174>
 8010c00:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8010c04:	fa07 f70c 	lsl.w	r7, r7, ip
 8010c08:	fa26 f505 	lsr.w	r5, r6, r5
 8010c0c:	433d      	orrs	r5, r7
 8010c0e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8010c12:	e79b      	b.n	8010b4c <__ieee754_fmod+0xac>
 8010c14:	4d27      	ldr	r5, [pc, #156]	@ (8010cb4 <__ieee754_fmod+0x214>)
 8010c16:	1aad      	subs	r5, r5, r2
 8010c18:	fa06 f505 	lsl.w	r5, r6, r5
 8010c1c:	f04f 0e00 	mov.w	lr, #0
 8010c20:	e794      	b.n	8010b4c <__ieee754_fmod+0xac>
 8010c22:	4571      	cmp	r1, lr
 8010c24:	bf38      	it	cc
 8010c26:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8010c2a:	2e00      	cmp	r6, #0
 8010c2c:	da05      	bge.n	8010c3a <__ieee754_fmod+0x19a>
 8010c2e:	0fce      	lsrs	r6, r1, #31
 8010c30:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8010c34:	0049      	lsls	r1, r1, #1
 8010c36:	3801      	subs	r0, #1
 8010c38:	e789      	b.n	8010b4e <__ieee754_fmod+0xae>
 8010c3a:	ea56 0307 	orrs.w	r3, r6, r7
 8010c3e:	f43f af5d 	beq.w	8010afc <__ieee754_fmod+0x5c>
 8010c42:	0ffb      	lsrs	r3, r7, #31
 8010c44:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8010c48:	0079      	lsls	r1, r7, #1
 8010c4a:	e7f4      	b.n	8010c36 <__ieee754_fmod+0x196>
 8010c4c:	0fc8      	lsrs	r0, r1, #31
 8010c4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010c52:	0049      	lsls	r1, r1, #1
 8010c54:	3a01      	subs	r2, #1
 8010c56:	e78a      	b.n	8010b6e <__ieee754_fmod+0xce>
 8010c58:	1a80      	subs	r0, r0, r2
 8010c5a:	2814      	cmp	r0, #20
 8010c5c:	dc0c      	bgt.n	8010c78 <__ieee754_fmod+0x1d8>
 8010c5e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8010c62:	fa03 f202 	lsl.w	r2, r3, r2
 8010c66:	40c1      	lsrs	r1, r0
 8010c68:	430a      	orrs	r2, r1
 8010c6a:	4103      	asrs	r3, r0
 8010c6c:	ea43 0104 	orr.w	r1, r3, r4
 8010c70:	4610      	mov	r0, r2
 8010c72:	ec41 0b10 	vmov	d0, r0, r1
 8010c76:	e733      	b.n	8010ae0 <__ieee754_fmod+0x40>
 8010c78:	281f      	cmp	r0, #31
 8010c7a:	dc07      	bgt.n	8010c8c <__ieee754_fmod+0x1ec>
 8010c7c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8010c80:	40c1      	lsrs	r1, r0
 8010c82:	fa03 f202 	lsl.w	r2, r3, r2
 8010c86:	430a      	orrs	r2, r1
 8010c88:	4623      	mov	r3, r4
 8010c8a:	e7ef      	b.n	8010c6c <__ieee754_fmod+0x1cc>
 8010c8c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8010c90:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8010c94:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8010c98:	32e2      	adds	r2, #226	@ 0xe2
 8010c9a:	fa43 f202 	asr.w	r2, r3, r2
 8010c9e:	e7f3      	b.n	8010c88 <__ieee754_fmod+0x1e8>
 8010ca0:	7fefffff 	.word	0x7fefffff
 8010ca4:	7ff00000 	.word	0x7ff00000
 8010ca8:	08011b58 	.word	0x08011b58
 8010cac:	fffffbed 	.word	0xfffffbed
 8010cb0:	fffffc02 	.word	0xfffffc02
 8010cb4:	fffffbe2 	.word	0xfffffbe2

08010cb8 <_init>:
 8010cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cba:	bf00      	nop
 8010cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cbe:	bc08      	pop	{r3}
 8010cc0:	469e      	mov	lr, r3
 8010cc2:	4770      	bx	lr

08010cc4 <_fini>:
 8010cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cc6:	bf00      	nop
 8010cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cca:	bc08      	pop	{r3}
 8010ccc:	469e      	mov	lr, r3
 8010cce:	4770      	bx	lr
