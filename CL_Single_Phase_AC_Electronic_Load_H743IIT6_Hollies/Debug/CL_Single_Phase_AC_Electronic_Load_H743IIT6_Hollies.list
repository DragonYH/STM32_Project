
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d68  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  08015008  08015008  00016008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015c78  08015c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015c80  08015c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015c84  08015c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  08015c88  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002130  240002d0  08015f58  000172d0  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  24002400  08015f58  00017400  2**0
                  ALLOC
  9 ._D3_Area     00000008  38000000  38000000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 ._DTCM_Area   00000010  20000000  20000000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  00019008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031886  00000000  00000000  00019036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006912  00000000  00000000  0004a8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  000511d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019b8  00000000  00000000  000533d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c06  00000000  00000000  00054d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003339e  00000000  00000000  00095996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f31a  00000000  00000000  000c8d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0024804e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d90  00000000  00000000  00248108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00251e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  00251f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0025210d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ff0 	.word	0x08014ff0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	08014ff0 	.word	0x08014ff0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	@ 0x28
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	463b      	mov	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003b6:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <MX_ADC1_Init+0x120>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ba:	4b3c      	ldr	r3, [pc, #240]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003c2:	4b3a      	ldr	r3, [pc, #232]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003c8:	4b38      	ldr	r3, [pc, #224]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003ce:	4b37      	ldr	r3, [pc, #220]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d0:	2208      	movs	r2, #8
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b35      	ldr	r3, [pc, #212]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003da:	4b34      	ldr	r3, [pc, #208]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80003e0:	4b32      	ldr	r3, [pc, #200]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b31      	ldr	r3, [pc, #196]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b2f      	ldr	r3, [pc, #188]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80003f8:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003fe:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000400:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000404:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000406:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800040c:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800040e:	2201      	movs	r2, #1
 8000410:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 8000414:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000416:	2204      	movs	r2, #4
 8000418:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800041a:	4b24      	ldr	r3, [pc, #144]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800041c:	2240      	movs	r2, #64	@ 0x40
 800041e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000420:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000422:	2200      	movs	r2, #0
 8000424:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000426:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000428:	2201      	movs	r2, #1
 800042a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042c:	481f      	ldr	r0, [pc, #124]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800042e:	f001 fe33 	bl	8002098 <HAL_ADC_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000438:	f000 feb8 	bl	80011ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	4619      	mov	r1, r3
 8000446:	4819      	ldr	r0, [pc, #100]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000448:	f002 ff42 	bl	80032d0 <HAL_ADCEx_MultiModeConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000452:	f000 feab 	bl	80011ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <MX_ADC1_Init+0x124>)
 8000458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800045a:	2306      	movs	r3, #6
 800045c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800045e:	2305      	movs	r3, #5
 8000460:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000462:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000466:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000468:	2304      	movs	r3, #4
 800046a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800047a:	f002 f891 	bl	80025a0 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000484:	f000 fe92 	bl	80011ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <MX_ADC1_Init+0x128>)
 800048a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800048c:	230c      	movs	r3, #12
 800048e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	4619      	mov	r1, r3
 8000494:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000496:	f002 f883 	bl	80025a0 <HAL_ADC_ConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80004a0:	f000 fe84 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	@ 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	240002ec 	.word	0x240002ec
 80004b0:	40022000 	.word	0x40022000
 80004b4:	10c00010 	.word	0x10c00010
 80004b8:	0c900008 	.word	0x0c900008

080004bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b0bc      	sub	sp, #240	@ 0xf0
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	22c0      	movs	r2, #192	@ 0xc0
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f012 fcb0 	bl	8012e42 <memset>
  if(adcHandle->Instance==ADC1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a54      	ldr	r2, [pc, #336]	@ (8000638 <HAL_ADC_MspInit+0x17c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	f040 80a0 	bne.w	800062e <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004f2:	f04f 0300 	mov.w	r3, #0
 80004f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004fa:	2319      	movs	r3, #25
 80004fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80004fe:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000502:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 8000504:	2307      	movs	r3, #7
 8000506:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000508:	2302      	movs	r3, #2
 800050a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000510:	2300      	movs	r3, #0
 8000512:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000514:	2300      	movs	r3, #0
 8000516:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800051c:	2300      	movs	r3, #0
 800051e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fda8 	bl	800907c <HAL_RCCEx_PeriphCLKConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000532:	f000 fe3b 	bl	80011ac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000536:	4b41      	ldr	r3, [pc, #260]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800053c:	4a3f      	ldr	r2, [pc, #252]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000546:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b39      	ldr	r3, [pc, #228]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800055a:	4a38      	ldr	r2, [pc, #224]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000564:	4b35      	ldr	r3, [pc, #212]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b32      	ldr	r3, [pc, #200]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000578:	4a30      	ldr	r2, [pc, #192]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	2303      	movs	r3, #3
 8000598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005a6:	4619      	mov	r1, r3
 80005a8:	4825      	ldr	r0, [pc, #148]	@ (8000640 <HAL_ADC_MspInit+0x184>)
 80005aa:	f005 fbe9 	bl	8005d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ae:	2310      	movs	r3, #16
 80005b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005c4:	4619      	mov	r1, r3
 80005c6:	481f      	ldr	r0, [pc, #124]	@ (8000644 <HAL_ADC_MspInit+0x188>)
 80005c8:	f005 fbda 	bl	8005d80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <HAL_ADC_MspInit+0x190>)
 80005d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000602:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000606:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000614:	f003 fadc 	bl	8003bd0 <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 800061e:	f000 fdc5 	bl	80011ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000626:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000628:	4a07      	ldr	r2, [pc, #28]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	37f0      	adds	r7, #240	@ 0xf0
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000
 800063c:	58024400 	.word	0x58024400
 8000640:	58020000 	.word	0x58020000
 8000644:	58020800 	.word	0x58020800
 8000648:	24000350 	.word	0x24000350
 800064c:	40020010 	.word	0x40020010

08000650 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2224      	movs	r2, #36	@ 0x24
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f012 fbf0 	bl	8012e42 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_DAC1_Init+0x60>)
 8000666:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <MX_DAC1_Init+0x5c>)
 800066a:	f003 f86b 	bl	8003744 <HAL_DAC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000674:	f000 fd9a 	bl	80011ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000694:	f003 f954 	bl	8003940 <HAL_DAC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 fd85 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	240003c8 	.word	0x240003c8
 80006b0:	40007400 	.word	0x40007400

080006b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <HAL_DAC_MspInit+0x90>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d131      	bne.n	800073a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80006e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fa:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000712:	2310      	movs	r3, #16
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	2303      	movs	r3, #3
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <HAL_DAC_MspInit+0x98>)
 8000726:	f005 fb2b 	bl	8005d80 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	210f      	movs	r1, #15
 800072e:	2036      	movs	r0, #54	@ 0x36
 8000730:	f002 ff64 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000734:	2036      	movs	r0, #54	@ 0x36
 8000736:	f002 ff7b 	bl	8003630 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	@ 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40007400 	.word	0x40007400
 8000748:	58024400 	.word	0x58024400
 800074c:	58020000 	.word	0x58020000

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <MX_DMA_Init+0x3c>)
 8000758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800075c:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <MX_DMA_Init+0x3c>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_DMA_Init+0x3c>)
 8000768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	200b      	movs	r0, #11
 800077a:	f002 ff3f 	bl	80035fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800077e:	200b      	movs	r0, #11
 8000780:	f002 ff56 	bl	8003630 <HAL_NVIC_EnableIRQ>

}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400

08000790 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b55      	ldr	r3, [pc, #340]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ac:	4a53      	ldr	r2, [pc, #332]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b6:	4b51      	ldr	r3, [pc, #324]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c4:	4b4d      	ldr	r3, [pc, #308]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ca:	4a4c      	ldr	r2, [pc, #304]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d4:	4b49      	ldr	r3, [pc, #292]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b46      	ldr	r3, [pc, #280]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a44      	ldr	r2, [pc, #272]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b42      	ldr	r3, [pc, #264]	@ (80008fc <MX_GPIO_Init+0x16c>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b3e      	ldr	r3, [pc, #248]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	4a3d      	ldr	r2, [pc, #244]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000810:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800081e:	4b37      	ldr	r3, [pc, #220]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000824:	4a35      	ldr	r2, [pc, #212]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082e:	4b33      	ldr	r3, [pc, #204]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083c:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <MX_GPIO_Init+0x16c>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000842:	4a2e      	ldr	r2, [pc, #184]	@ (80008fc <MX_GPIO_Init+0x16c>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084c:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <MX_GPIO_Init+0x16c>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	4828      	ldr	r0, [pc, #160]	@ (8000900 <MX_GPIO_Init+0x170>)
 8000860:	f005 fc3e 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2102      	movs	r1, #2
 8000868:	4826      	ldr	r0, [pc, #152]	@ (8000904 <MX_GPIO_Init+0x174>)
 800086a:	f005 fc39 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2101      	movs	r1, #1
 8000872:	4825      	ldr	r0, [pc, #148]	@ (8000908 <MX_GPIO_Init+0x178>)
 8000874:	f005 fc34 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2140      	movs	r1, #64	@ 0x40
 800087c:	4822      	ldr	r0, [pc, #136]	@ (8000908 <MX_GPIO_Init+0x178>)
 800087e:	f005 fc2f 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000882:	2320      	movs	r3, #32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800088e:	2301      	movs	r3, #1
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4819      	ldr	r0, [pc, #100]	@ (8000900 <MX_GPIO_Init+0x170>)
 800089a:	f005 fa71 	bl	8005d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800089e:	2302      	movs	r3, #2
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4813      	ldr	r0, [pc, #76]	@ (8000904 <MX_GPIO_Init+0x174>)
 80008b6:	f005 fa63 	bl	8005d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <MX_GPIO_Init+0x178>)
 80008d2:	f005 fa55 	bl	8005d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008e2:	2301      	movs	r3, #1
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4806      	ldr	r0, [pc, #24]	@ (8000908 <MX_GPIO_Init+0x178>)
 80008ee:	f005 fa47 	bl	8005d80 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	@ 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	58024400 	.word	0x58024400
 8000900:	58020800 	.word	0x58020800
 8000904:	58020400 	.word	0x58020400
 8000908:	58022000 	.word	0x58022000

0800090c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	@ (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000948:	f005 fbe4 	bl	8006114 <HAL_I2C_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000952:	f000 fc2b 	bl	80011ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4809      	ldr	r0, [pc, #36]	@ (8000980 <MX_I2C1_Init+0x74>)
 800095a:	f005 ffe3 	bl	8006924 <HAL_I2CEx_ConfigAnalogFilter>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 fc22 	bl	80011ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_I2C1_Init+0x74>)
 800096c:	f006 f825 	bl	80069ba <HAL_I2CEx_ConfigDigitalFilter>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 fc19 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	240003dc 	.word	0x240003dc
 8000984:	40005400 	.word	0x40005400
 8000988:	307075b1 	.word	0x307075b1

0800098c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0ba      	sub	sp, #232	@ 0xe8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	22c0      	movs	r2, #192	@ 0xc0
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f012 fa48 	bl	8012e42 <memset>
  if(i2cHandle->Instance==I2C1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a26      	ldr	r2, [pc, #152]	@ (8000a50 <HAL_I2C_MspInit+0xc4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d145      	bne.n	8000a48 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009bc:	f04f 0208 	mov.w	r2, #8
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 fb52 	bl	800907c <HAL_RCCEx_PeriphCLKConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009de:	f000 fbe5 	bl	80011ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a00:	23c0      	movs	r3, #192	@ 0xc0
 8000a02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a06:	2312      	movs	r3, #18
 8000a08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <HAL_I2C_MspInit+0xcc>)
 8000a26:	f005 f9ab 	bl	8005d80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 8000a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a30:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 8000a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_I2C_MspInit+0xc8>)
 8000a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	37e8      	adds	r7, #232	@ 0xe8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40005400 	.word	0x40005400
 8000a54:	58024400 	.word	0x58024400
 8000a58:	58020400 	.word	0x58020400

08000a5c <oled_Show>:
float M = 0.9f;
// 显示函数
uint8_t textBuf[256] = {0};
float theta_diff = 0.f;
void oled_Show()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	ed2d 8b06 	vpush	{d8-d10}
 8000a62:	b092      	sub	sp, #72	@ 0x48
 8000a64:	af12      	add	r7, sp, #72	@ 0x48
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
  // // FAC:
  // sprintf((char *)textBuf, "FA:%5.2f %5.2f%%", arm_cos_f32(theta_diff), (signal_V->u_0 * signal_I->u_0) / (signal_V->u_0 * signal_I->u_0) * 100.f);
  // OLED_ShowString(0, 6, textBuf);
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
  sprintf((char *)textBuf, "x=0,thetaV=%.2f,thetaI=%.2f,park_Iq=%.2f,park_Id=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,sogi_Ia=%.2f,sogi_Ib=%.2f\n", signal_V->theta, signal_I->theta, signal_I->park_q, signal_I->park_d, signal_V->park_d, signal_V->park_q, signal_V->sogi_a_0, signal_V->sogi_b_0 / 382 * 3, signal_I->sogi_a_0, signal_I->sogi_b_0 / 382 * 3);
 8000a66:	4b37      	ldr	r3, [pc, #220]	@ (8000b44 <oled_Show+0xe8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000a6e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000a72:	4b35      	ldr	r3, [pc, #212]	@ (8000b48 <oled_Show+0xec>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000a7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a7e:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <oled_Show+0xec>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8000a86:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <oled_Show+0xec>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 8000a92:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000a96:	4b2b      	ldr	r3, [pc, #172]	@ (8000b44 <oled_Show+0xe8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	edd3 4a09 	vldr	s9, [r3, #36]	@ 0x24
 8000a9e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000aa2:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <oled_Show+0xe8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	edd3 3a0a 	vldr	s7, [r3, #40]	@ 0x28
 8000aaa:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <oled_Show+0xe8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	edd3 2a03 	vldr	s5, [r3, #12]
 8000ab6:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000aba:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <oled_Show+0xe8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	ed93 1a06 	vldr	s2, [r3, #24]
 8000ac2:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8000b4c <oled_Show+0xf0>
 8000ac6:	eec1 1a20 	vdiv.f32	s3, s2, s1
 8000aca:	eeb0 1a08 	vmov.f32	s2, #8	@ 0x40400000  3.0
 8000ace:	ee61 1a81 	vmul.f32	s3, s3, s2
 8000ad2:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <oled_Show+0xec>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	edd3 0a03 	vldr	s1, [r3, #12]
 8000ade:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <oled_Show+0xec>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	edd3 8a06 	vldr	s17, [r3, #24]
 8000aea:	ed9f 9a18 	vldr	s18, [pc, #96]	@ 8000b4c <oled_Show+0xf0>
 8000aee:	ee88 8a89 	vdiv.f32	s16, s17, s18
 8000af2:	eef0 8a08 	vmov.f32	s17, #8	@ 0x40400000  3.0
 8000af6:	ee28 8a28 	vmul.f32	s16, s16, s17
 8000afa:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8000afe:	ed8d 8b10 	vstr	d8, [sp, #64]	@ 0x40
 8000b02:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8000b06:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8000b0a:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8000b0e:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000b12:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000b16:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b1a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b1e:	ed8d 7b00 	vstr	d7, [sp]
 8000b22:	ec53 2b1a 	vmov	r2, r3, d10
 8000b26:	490a      	ldr	r1, [pc, #40]	@ (8000b50 <oled_Show+0xf4>)
 8000b28:	480a      	ldr	r0, [pc, #40]	@ (8000b54 <oled_Show+0xf8>)
 8000b2a:	f012 f927 	bl	8012d7c <siprintf>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000b2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b32:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <oled_Show+0xf8>)
 8000b34:	f010 fe72 	bl	801181c <CDC_Transmit_FS>
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	ecbd 8b06 	vpop	{d8-d10}
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	43bf0000 	.word	0x43bf0000
 8000b50:	08015008 	.word	0x08015008
 8000b54:	24000430 	.word	0x24000430

08000b58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b5e:	f000 f9a3 	bl	8000ea8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b62:	4b6f      	ldr	r3, [pc, #444]	@ (8000d20 <main+0x1c8>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d11b      	bne.n	8000ba6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6e:	f3bf 8f4f 	dsb	sy
}
 8000b72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b74:	f3bf 8f6f 	isb	sy
}
 8000b78:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b7a:	4b69      	ldr	r3, [pc, #420]	@ (8000d20 <main+0x1c8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b82:	f3bf 8f4f 	dsb	sy
}
 8000b86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b88:	f3bf 8f6f 	isb	sy
}
 8000b8c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b8e:	4b64      	ldr	r3, [pc, #400]	@ (8000d20 <main+0x1c8>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a63      	ldr	r2, [pc, #396]	@ (8000d20 <main+0x1c8>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b9a:	f3bf 8f4f 	dsb	sy
}
 8000b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ba0:	f3bf 8f6f 	isb	sy
}
 8000ba4:	e000      	b.n	8000ba8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ba6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ba8:	4b5d      	ldr	r3, [pc, #372]	@ (8000d20 <main+0x1c8>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d138      	bne.n	8000c26 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d20 <main+0x1c8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bbc:	f3bf 8f4f 	dsb	sy
}
 8000bc0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bc2:	4b57      	ldr	r3, [pc, #348]	@ (8000d20 <main+0x1c8>)
 8000bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bc8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	0b5b      	lsrs	r3, r3, #13
 8000bce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bd2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bdc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	015a      	lsls	r2, r3, #5
 8000be2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000be6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bec:	494c      	ldr	r1, [pc, #304]	@ (8000d20 <main+0x1c8>)
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	1e5a      	subs	r2, r3, #1
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1ef      	bne.n	8000bde <main+0x86>
    } while(sets-- != 0U);
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1e5a      	subs	r2, r3, #1
 8000c02:	60ba      	str	r2, [r7, #8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1e5      	bne.n	8000bd4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c08:	f3bf 8f4f 	dsb	sy
}
 8000c0c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c0e:	4b44      	ldr	r3, [pc, #272]	@ (8000d20 <main+0x1c8>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a43      	ldr	r2, [pc, #268]	@ (8000d20 <main+0x1c8>)
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c18:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c1a:	f3bf 8f4f 	dsb	sy
}
 8000c1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c20:	f3bf 8f6f 	isb	sy
}
 8000c24:	e000      	b.n	8000c28 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c26:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c28:	f000 ff9c 	bl	8001b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2c:	f000 f88e 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f7ff fdae 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c34:	f7ff fd8c 	bl	8000750 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c38:	f000 fdea 	bl	8001810 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000c3c:	f000 fe36 	bl	80018ac <MX_TIM8_Init>
  MX_ADC1_Init();
 8000c40:	f7ff fba6 	bl	8000390 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000c44:	f010 fd2a 	bl	801169c <MX_USB_DEVICE_Init>
  MX_DAC1_Init();
 8000c48:	f7ff fd02 	bl	8000650 <MX_DAC1_Init>
  MX_I2C1_Init();
 8000c4c:	f7ff fe5e 	bl	800090c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c50:	f000 fab2 	bl	80011b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000c54:	205c      	movs	r0, #92	@ 0x5c
 8000c56:	f011 fae1 	bl	801221c <malloc>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b31      	ldr	r3, [pc, #196]	@ (8000d24 <main+0x1cc>)
 8000c60:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 8000c62:	2020      	movs	r0, #32
 8000c64:	f011 fada 	bl	801221c <malloc>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d28 <main+0x1d0>)
 8000c6e:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000c70:	205c      	movs	r0, #92	@ 0x5c
 8000c72:	f011 fad3 	bl	801221c <malloc>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <main+0x1d4>)
 8000c7c:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8000c7e:	2020      	movs	r0, #32
 8000c80:	f011 facc 	bl	801221c <malloc>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <main+0x1d8>)
 8000c8a:	601a      	str	r2, [r3, #0]
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压环
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <main+0x1cc>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a25      	ldr	r2, [pc, #148]	@ (8000d28 <main+0x1d0>)
 8000c92:	6811      	ldr	r1, [r2, #0]
 8000c94:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c98:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8000d34 <main+0x1dc>
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f010 fa59 	bl	8011154 <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流环
 8000ca2:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <main+0x1d4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a22      	ldr	r2, [pc, #136]	@ (8000d30 <main+0x1d8>)
 8000ca8:	6811      	ldr	r1, [r2, #0]
 8000caa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000cae:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8000d34 <main+0x1dc>
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f010 fa4e 	bl	8011154 <pll_Init>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000cb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	481d      	ldr	r0, [pc, #116]	@ (8000d38 <main+0x1e0>)
 8000cc2:	f002 fe0d 	bl	80038e0 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	481b      	ldr	r0, [pc, #108]	@ (8000d38 <main+0x1e0>)
 8000cca:	f002 fd5d 	bl	8003788 <HAL_DAC_Start>
  // ADC校准并开启
  HAL_Delay(200);
 8000cce:	20c8      	movs	r0, #200	@ 0xc8
 8000cd0:	f000 ffa4 	bl	8001c1c <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000cd4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4818      	ldr	r0, [pc, #96]	@ (8000d3c <main+0x1e4>)
 8000cdc:	f002 fa94 	bl	8003208 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线性度校准
 8000ce0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000ce4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000ce8:	4814      	ldr	r0, [pc, #80]	@ (8000d3c <main+0x1e4>)
 8000cea:	f002 fa8d 	bl	8003208 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(500);
 8000cee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cf2:	f000 ff93 	bl	8001c1c <HAL_Delay>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4811      	ldr	r0, [pc, #68]	@ (8000d40 <main+0x1e8>)
 8000cfa:	f00b fbf7 	bl	800c4ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000cfe:	2104      	movs	r1, #4
 8000d00:	480f      	ldr	r0, [pc, #60]	@ (8000d40 <main+0x1e8>)
 8000d02:	f00b fbf3 	bl	800c4ec <HAL_TIM_PWM_Start>
  // OLED初始化
  OLED_Init();
 8000d06:	f010 f99b 	bl	8011040 <OLED_Init>
  // INA238初始化
  ina238_Init(&hi2c1, 0);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <main+0x1ec>)
 8000d0e:	f010 f8f3 	bl	8010ef8 <ina238_Init>
  // 开启中断
  HAL_TIM_Base_Start_IT(&htim2);
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <main+0x1f0>)
 8000d14:	f00b fb10 	bl	800c338 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    // 虚拟串口输出日志
    // oled_Show();
    // HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
    HAL_Delay(10);
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f000 ff7f 	bl	8001c1c <HAL_Delay>
 8000d1e:	e7fb      	b.n	8000d18 <main+0x1c0>
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000004 	.word	0x20000004
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	42480000 	.word	0x42480000
 8000d38:	240003c8 	.word	0x240003c8
 8000d3c:	240002ec 	.word	0x240002ec
 8000d40:	24000658 	.word	0x24000658
 8000d44:	240003dc 	.word	0x240003dc
 8000d48:	2400060c 	.word	0x2400060c

08000d4c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b09e      	sub	sp, #120	@ 0x78
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d56:	224c      	movs	r2, #76	@ 0x4c
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f012 f871 	bl	8012e42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2220      	movs	r2, #32
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f012 f86a 	bl	8012e42 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f007 f928 	bl	8007fc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	4b48      	ldr	r3, [pc, #288]	@ (8000e9c <SystemClock_Config+0x150>)
 8000d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7c:	4a47      	ldr	r2, [pc, #284]	@ (8000e9c <SystemClock_Config+0x150>)
 8000d7e:	f023 0301 	bic.w	r3, r3, #1
 8000d82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d84:	4b45      	ldr	r3, [pc, #276]	@ (8000e9c <SystemClock_Config+0x150>)
 8000d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b44      	ldr	r3, [pc, #272]	@ (8000ea0 <SystemClock_Config+0x154>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a43      	ldr	r2, [pc, #268]	@ (8000ea0 <SystemClock_Config+0x154>)
 8000d94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ea0 <SystemClock_Config+0x154>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000da6:	bf00      	nop
 8000da8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea0 <SystemClock_Config+0x154>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000db4:	d1f8      	bne.n	8000da8 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea4 <SystemClock_Config+0x158>)
 8000db8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dbc:	4a39      	ldr	r2, [pc, #228]	@ (8000ea4 <SystemClock_Config+0x158>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dc6:	4b37      	ldr	r3, [pc, #220]	@ (8000ea4 <SystemClock_Config+0x158>)
 8000dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <SystemClock_Config+0x154>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a30      	ldr	r2, [pc, #192]	@ (8000ea0 <SystemClock_Config+0x154>)
 8000dde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea0 <SystemClock_Config+0x154>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b2b      	ldr	r3, [pc, #172]	@ (8000e9c <SystemClock_Config+0x150>)
 8000df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e9c <SystemClock_Config+0x150>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000dfa:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <SystemClock_Config+0x150>)
 8000dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000e06:	bf00      	nop
 8000e08:	4b25      	ldr	r3, [pc, #148]	@ (8000ea0 <SystemClock_Config+0x154>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e14:	d1f8      	bne.n	8000e08 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e24:	2302      	movs	r3, #2
 8000e26:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e28:	2305      	movs	r3, #5
 8000e2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e2c:	23c0      	movs	r3, #192	@ 0xc0
 8000e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e34:	2314      	movs	r3, #20
 8000e36:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f007 f903 	bl	8008058 <HAL_RCC_OscConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e58:	f000 f9a8 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000e5c:	233f      	movs	r3, #63	@ 0x3f
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2303      	movs	r3, #3
 8000e62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e6c:	2340      	movs	r3, #64	@ 0x40
 8000e6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e70:	2340      	movs	r3, #64	@ 0x40
 8000e72:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e7a:	2340      	movs	r3, #64	@ 0x40
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2104      	movs	r1, #4
 8000e84:	4618      	mov	r0, r3
 8000e86:	f007 fd41 	bl	800890c <HAL_RCC_ClockConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e90:	f000 f98c 	bl	80011ac <Error_Handler>
  }
}
 8000e94:	bf00      	nop
 8000e96:	3778      	adds	r7, #120	@ 0x78
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	58000400 	.word	0x58000400
 8000ea0:	58024800 	.word	0x58024800
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eba:	f002 fbc7 	bl	800364c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000ec6:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000eca:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000ecc:	2312      	movs	r3, #18
 8000ece:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eec:	463b      	mov	r3, r7
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fbe4 	bl	80036bc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000ef8:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000efc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000efe:	230f      	movs	r3, #15
 8000f00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fbd5 	bl	80036bc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8000f16:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f1a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f20:	463b      	mov	r3, r7
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fbca 	bl	80036bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f28:	2004      	movs	r0, #4
 8000f2a:	f002 fba7 	bl	800367c <HAL_MPU_Enable>
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	ed2d 8b02 	vpush	{d8}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a87      	ldr	r2, [pc, #540]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_IncTick();
 8000f4e:	f000 fe45 	bl	8001bdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f5a:	f040 80ff 	bne.w	800115c <HAL_TIM_PeriodElapsedCallback+0x224>
  {
    // 缓存adcBuf
    HAL_ADC_Start_DMA(&hadc1, adcBuf, 2);
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4982      	ldr	r1, [pc, #520]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000f62:	4883      	ldr	r0, [pc, #524]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000f64:	f001 fa3a 	bl	80023dc <HAL_ADC_Start_DMA>
 8000f68:	4b80      	ldr	r3, [pc, #512]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	dd1d      	ble.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x7a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f86:	f3bf 8f4f 	dsb	sy
}
 8000f8a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f8c:	4a79      	ldr	r2, [pc, #484]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	3320      	adds	r3, #32
 8000f98:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3b20      	subs	r3, #32
 8000f9e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	dcf2      	bgt.n	8000f8c <HAL_TIM_PeriodElapsedCallback+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fac:	f3bf 8f6f 	isb	sy
}
 8000fb0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000fb2:	bf00      	nop
    SCB_InvalidateDCache_by_Addr(adcBuf, sizeof(adcBuf));
    signal_V->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.5f;
 8000fb4:	4b6d      	ldr	r3, [pc, #436]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc0:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001178 <HAL_TIM_PeriodElapsedCallback+0x240>
 8000fc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fc8:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 800117c <HAL_TIM_PeriodElapsedCallback+0x244>
 8000fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fdc:	edc3 7a00 	vstr	s15, [r3]
    signal_I->u_0 = adcBuf[1] * 3.3f / 65536.0f - 1.5f;
 8000fe0:	4b62      	ldr	r3, [pc, #392]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fec:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001178 <HAL_TIM_PeriodElapsedCallback+0x240>
 8000ff0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ff4:	eddf 6a61 	vldr	s13, [pc, #388]	@ 800117c <HAL_TIM_PeriodElapsedCallback+0x244>
 8000ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffc:	4b61      	ldr	r3, [pc, #388]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001008:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_V, signal_config_V, signal_V); // 电压环
 800100c:	4b5c      	ldr	r3, [pc, #368]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a5d      	ldr	r2, [pc, #372]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001012:	6811      	ldr	r1, [r2, #0]
 8001014:	4a5a      	ldr	r2, [pc, #360]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f010 f981 	bl	8011320 <pll_Control>
    pll_Control(signal_I, signal_config_I, signal_V); // 电流环
 800101e:	4b59      	ldr	r3, [pc, #356]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a5a      	ldr	r2, [pc, #360]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001024:	6811      	ldr	r1, [r2, #0]
 8001026:	4a56      	ldr	r2, [pc, #344]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f010 f978 	bl	8011320 <pll_Control>
    theta_diff = signal_V->theta - signal_I->theta;
 8001030:	4b53      	ldr	r3, [pc, #332]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001038:	4b52      	ldr	r3, [pc, #328]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001044:	4b52      	ldr	r3, [pc, #328]	@ (8001190 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001046:	edc3 7a00 	vstr	s15, [r3]
    // 调节SPWM占空比
    // 要想实现PFC，需要让电流相位与电压相位相同，而电压相位由电网控制，所以需要闭环控制的是电流相位
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 800104a:	4b52      	ldr	r3, [pc, #328]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001058:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800105c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	ee27 8a27 	vmul.f32	s16, s14, s15
 800106a:	4b46      	ldr	r3, [pc, #280]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001072:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800119c <HAL_TIM_PeriodElapsedCallback+0x264>
 8001076:	ee77 7a87 	vadd.f32	s15, s15, s14
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	f011 f83d 	bl	80120fc <arm_sin_f32>
 8001082:	eef0 7a40 	vmov.f32	s15, s0
 8001086:	ee28 7a27 	vmul.f32	s14, s16, s15
 800108a:	4b42      	ldr	r3, [pc, #264]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001098:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800109c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ac:	ee17 2a90 	vmov	r2, s15
 80010b0:	635a      	str	r2, [r3, #52]	@ 0x34
    // 反馈侧
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 80010b2:	4b38      	ldr	r3, [pc, #224]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80010c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010c8:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	ee27 8a27 	vmul.f32	s16, s14, s15
 80010d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010da:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800119c <HAL_TIM_PeriodElapsedCallback+0x264>
 80010de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010e2:	eeb0 0a67 	vmov.f32	s0, s15
 80010e6:	f011 f809 	bl	80120fc <arm_sin_f32>
 80010ea:	eef0 7a40 	vmov.f32	s15, s0
 80010ee:	ee28 7a27 	vmul.f32	s14, s16, s15
 80010f2:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001100:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001104:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110c:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001114:	ee17 2a90 	vmov	r2, s15
 8001118:	639a      	str	r2, [r3, #56]	@ 0x38
    // todo: 控制中间直流电压
    // static float dcVolt;
    // dcVolt = ina238_GetVolt(&hi2c1);
    // DAC模拟输出，便于调试，不需要时可关闭
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_V->theta + PI / 2.f) + 2048.f);
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001122:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800119c <HAL_TIM_PeriodElapsedCallback+0x264>
 8001126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800112a:	eeb0 0a67 	vmov.f32	s0, s15
 800112e:	f010 ffe5 	bl	80120fc <arm_sin_f32>
 8001132:	eef0 7a40 	vmov.f32	s15, s0
 8001136:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80011a0 <HAL_TIM_PeriodElapsedCallback+0x268>
 800113a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80011a4 <HAL_TIM_PeriodElapsedCallback+0x26c>
 8001142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114a:	ee17 3a90 	vmov	r3, s15
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	4815      	ldr	r0, [pc, #84]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001154:	f002 fbc4 	bl	80038e0 <HAL_DAC_SetValue>

    oled_Show();
 8001158:	f7ff fc80 	bl	8000a5c <oled_Show>
  }
  /* USER CODE END Callback 1 */
}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	ecbd 8b02 	vpop	{d8}
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40001000 	.word	0x40001000
 800116c:	38000000 	.word	0x38000000
 8001170:	240002ec 	.word	0x240002ec
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	40533333 	.word	0x40533333
 800117c:	47800000 	.word	0x47800000
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004
 800118c:	2000000c 	.word	0x2000000c
 8001190:	24000530 	.word	0x24000530
 8001194:	24000658 	.word	0x24000658
 8001198:	24000000 	.word	0x24000000
 800119c:	3fc90fdb 	.word	0x3fc90fdb
 80011a0:	44fa0000 	.word	0x44fa0000
 80011a4:	45000000 	.word	0x45000000
 80011a8:	240003c8 	.word	0x240003c8

080011ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <Error_Handler+0x8>

080011b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011bc:	4b27      	ldr	r3, [pc, #156]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011be:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <MX_SPI1_Init+0xa8>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b26      	ldr	r3, [pc, #152]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011d2:	2207      	movs	r2, #7
 80011d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_SPI1_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_SPI1_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_SPI1_Init+0xa4>)
 800120a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800120e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_SPI1_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_SPI1_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_SPI1_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_SPI1_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_SPI1_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <MX_SPI1_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_SPI1_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <MX_SPI1_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_SPI1_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_SPI1_Init+0xa4>)
 8001248:	f00a fc16 	bl	800ba78 <HAL_SPI_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001252:	f7ff ffab 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24000534 	.word	0x24000534
 8001260:	40013000 	.word	0x40013000

08001264 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0bc      	sub	sp, #240	@ 0xf0
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800127c:	f107 0318 	add.w	r3, r7, #24
 8001280:	22c0      	movs	r2, #192	@ 0xc0
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f011 fddc 	bl	8012e42 <memset>
  if(spiHandle->Instance==SPI1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a41      	ldr	r2, [pc, #260]	@ (8001394 <HAL_SPI_MspInit+0x130>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d17b      	bne.n	800138c <HAL_SPI_MspInit+0x128>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001294:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80012a0:	2319      	movs	r3, #25
 80012a2:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 300;
 80012a4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80012a8:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80012c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	4618      	mov	r0, r3
 80012ce:	f007 fed5 	bl	800907c <HAL_RCCEx_PeriphCLKConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 80012d8:	f7ff ff68 	bl	80011ac <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <HAL_SPI_MspInit+0x134>)
 80012de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001398 <HAL_SPI_MspInit+0x134>)
 80012e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <HAL_SPI_MspInit+0x134>)
 80012ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_SPI_MspInit+0x134>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001300:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <HAL_SPI_MspInit+0x134>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130a:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <HAL_SPI_MspInit+0x134>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <HAL_SPI_MspInit+0x134>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	4a1e      	ldr	r2, [pc, #120]	@ (8001398 <HAL_SPI_MspInit+0x134>)
 8001320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <HAL_SPI_MspInit+0x134>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8001336:	23a0      	movs	r3, #160	@ 0xa0
 8001338:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001348:	2301      	movs	r3, #1
 800134a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800134e:	2305      	movs	r3, #5
 8001350:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001358:	4619      	mov	r1, r3
 800135a:	4810      	ldr	r0, [pc, #64]	@ (800139c <HAL_SPI_MspInit+0x138>)
 800135c:	f004 fd10 	bl	8005d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001360:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001364:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137a:	2305      	movs	r3, #5
 800137c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001380:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <HAL_SPI_MspInit+0x13c>)
 8001388:	f004 fcfa 	bl	8005d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800138c:	bf00      	nop
 800138e:	37f0      	adds	r7, #240	@ 0xf0
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013000 	.word	0x40013000
 8001398:	58024400 	.word	0x58024400
 800139c:	58020000 	.word	0x58020000
 80013a0:	58021800 	.word	0x58021800

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_MspInit+0x30>)
 80013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b0:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_MspInit+0x30>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_MspInit+0x30>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	58024400 	.word	0x58024400

080013d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b090      	sub	sp, #64	@ 0x40
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	d827      	bhi.n	8001436 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80013e6:	2200      	movs	r2, #0
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	2036      	movs	r0, #54	@ 0x36
 80013ec:	f002 f906 	bl	80035fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f0:	2036      	movs	r0, #54	@ 0x36
 80013f2:	f002 f91d 	bl	8003630 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013f6:	4a29      	ldr	r2, [pc, #164]	@ (800149c <HAL_InitTick+0xc4>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <HAL_InitTick+0xc8>)
 80013fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001402:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <HAL_InitTick+0xc8>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800140c:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <HAL_InitTick+0xc8>)
 800140e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800141a:	f107 0210 	add.w	r2, r7, #16
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f007 fde7 	bl	8008ff8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800142a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800142e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <HAL_InitTick+0x6a>
 8001434:	e001      	b.n	800143a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e02b      	b.n	8001492 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800143a:	f007 fdc7 	bl	8008fcc <HAL_RCC_GetPCLK1Freq>
 800143e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001440:	e004      	b.n	800144c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001442:	f007 fdc3 	bl	8008fcc <HAL_RCC_GetPCLK1Freq>
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800144e:	4a15      	ldr	r2, [pc, #84]	@ (80014a4 <HAL_InitTick+0xcc>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	0c9b      	lsrs	r3, r3, #18
 8001456:	3b01      	subs	r3, #1
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <HAL_InitTick+0xd0>)
 800145c:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <HAL_InitTick+0xd4>)
 800145e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_InitTick+0xd0>)
 8001462:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001466:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001468:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <HAL_InitTick+0xd0>)
 800146a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800146c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_InitTick+0xd0>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <HAL_InitTick+0xd0>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800147a:	480b      	ldr	r0, [pc, #44]	@ (80014a8 <HAL_InitTick+0xd0>)
 800147c:	f00a ff05 	bl	800c28a <HAL_TIM_Base_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d104      	bne.n	8001490 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001486:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <HAL_InitTick+0xd0>)
 8001488:	f00a ff56 	bl	800c338 <HAL_TIM_Base_Start_IT>
 800148c:	4603      	mov	r3, r0
 800148e:	e000      	b.n	8001492 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	3740      	adds	r7, #64	@ 0x40
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2400000c 	.word	0x2400000c
 80014a0:	58024400 	.word	0x58024400
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	240005bc 	.word	0x240005bc
 80014ac:	40001000 	.word	0x40001000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <NMI_Handler+0x4>

080014b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <MemManage_Handler+0x4>

080014c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <DMA1_Stream0_IRQHandler+0x10>)
 8001516:	f003 f921 	bl	800475c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	24000350 	.word	0x24000350

08001524 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <TIM2_IRQHandler+0x10>)
 800152a:	f00b f8ed 	bl	800c708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2400060c 	.word	0x2400060c

08001538 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <TIM6_DAC_IRQHandler+0x20>)
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001546:	4804      	ldr	r0, [pc, #16]	@ (8001558 <TIM6_DAC_IRQHandler+0x20>)
 8001548:	f002 f970 	bl	800382c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <TIM6_DAC_IRQHandler+0x24>)
 800154e:	f00b f8db 	bl	800c708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	240003c8 	.word	0x240003c8
 800155c:	240005bc 	.word	0x240005bc

08001560 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <OTG_FS_IRQHandler+0x10>)
 8001566:	f005 fbcd 	bl	8006d04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	24001b88 	.word	0x24001b88

08001574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_kill>:

int _kill(int pid, int sig)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158e:	f011 fcbb 	bl	8012f08 <__errno>
 8001592:	4603      	mov	r3, r0
 8001594:	2216      	movs	r2, #22
 8001596:	601a      	str	r2, [r3, #0]
  return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_exit>:

void _exit (int status)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ffe7 	bl	8001584 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b6:	bf00      	nop
 80015b8:	e7fd      	b.n	80015b6 <_exit+0x12>

080015ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e00a      	b.n	80015e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015cc:	f3af 8000 	nop.w
 80015d0:	4601      	mov	r1, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	60ba      	str	r2, [r7, #8]
 80015d8:	b2ca      	uxtb	r2, r1
 80015da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbf0      	blt.n	80015cc <_read+0x12>
  }

  return len;
 80015ea:	687b      	ldr	r3, [r7, #4]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e009      	b.n	800161a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	60ba      	str	r2, [r7, #8]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	dbf1      	blt.n	8001606 <_write+0x12>
  }
  return len;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_close>:

int _close(int file)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001654:	605a      	str	r2, [r3, #4]
  return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_isatty>:

int _isatty(int file)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	@ (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c4:	f011 fc20 	bl	8012f08 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e009      	b.n	80016e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016da:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <_sbrk+0x64>)
 80016e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	24080000 	.word	0x24080000
 80016f4:	00004000 	.word	0x00004000
 80016f8:	24000608 	.word	0x24000608
 80016fc:	24002400 	.word	0x24002400

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001704:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <SystemInit+0xe4>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170a:	4a36      	ldr	r2, [pc, #216]	@ (80017e4 <SystemInit+0xe4>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001714:	4b34      	ldr	r3, [pc, #208]	@ (80017e8 <SystemInit+0xe8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	2b06      	cmp	r3, #6
 800171e:	d807      	bhi.n	8001730 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001720:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <SystemInit+0xe8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 030f 	bic.w	r3, r3, #15
 8001728:	4a2f      	ldr	r2, [pc, #188]	@ (80017e8 <SystemInit+0xe8>)
 800172a:	f043 0307 	orr.w	r3, r3, #7
 800172e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001730:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <SystemInit+0xec>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2d      	ldr	r2, [pc, #180]	@ (80017ec <SystemInit+0xec>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800173c:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <SystemInit+0xec>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001742:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <SystemInit+0xec>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4929      	ldr	r1, [pc, #164]	@ (80017ec <SystemInit+0xec>)
 8001748:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <SystemInit+0xf0>)
 800174a:	4013      	ands	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <SystemInit+0xe8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800175a:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <SystemInit+0xe8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 030f 	bic.w	r3, r3, #15
 8001762:	4a21      	ldr	r2, [pc, #132]	@ (80017e8 <SystemInit+0xe8>)
 8001764:	f043 0307 	orr.w	r3, r3, #7
 8001768:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <SystemInit+0xec>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <SystemInit+0xec>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001776:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <SystemInit+0xec>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <SystemInit+0xec>)
 800177e:	4a1d      	ldr	r2, [pc, #116]	@ (80017f4 <SystemInit+0xf4>)
 8001780:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001782:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <SystemInit+0xec>)
 8001784:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <SystemInit+0xf8>)
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001788:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <SystemInit+0xec>)
 800178a:	4a1c      	ldr	r2, [pc, #112]	@ (80017fc <SystemInit+0xfc>)
 800178c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800178e:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <SystemInit+0xec>)
 8001790:	2200      	movs	r2, #0
 8001792:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <SystemInit+0xec>)
 8001796:	4a19      	ldr	r2, [pc, #100]	@ (80017fc <SystemInit+0xfc>)
 8001798:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800179a:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <SystemInit+0xec>)
 800179c:	2200      	movs	r2, #0
 800179e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <SystemInit+0xec>)
 80017a2:	4a16      	ldr	r2, [pc, #88]	@ (80017fc <SystemInit+0xfc>)
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <SystemInit+0xec>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <SystemInit+0xec>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <SystemInit+0xec>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <SystemInit+0xec>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <SystemInit+0x100>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <SystemInit+0x104>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017ca:	d202      	bcs.n	80017d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <SystemInit+0x108>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <SystemInit+0x10c>)
 80017d4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00
 80017e8:	52002000 	.word	0x52002000
 80017ec:	58024400 	.word	0x58024400
 80017f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017f4:	02020200 	.word	0x02020200
 80017f8:	01ff0000 	.word	0x01ff0000
 80017fc:	01010280 	.word	0x01010280
 8001800:	5c001000 	.word	0x5c001000
 8001804:	ffff0000 	.word	0xffff0000
 8001808:	51008108 	.word	0x51008108
 800180c:	52004000 	.word	0x52004000

08001810 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <MX_TIM2_Init+0x98>)
 8001830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001834:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001836:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <MX_TIM2_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183c:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_TIM2_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001842:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <MX_TIM2_Init+0x98>)
 8001844:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184a:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <MX_TIM2_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <MX_TIM2_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001856:	4814      	ldr	r0, [pc, #80]	@ (80018a8 <MX_TIM2_Init+0x98>)
 8001858:	f00a fd17 	bl	800c28a <HAL_TIM_Base_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001862:	f7ff fca3 	bl	80011ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001866:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	4619      	mov	r1, r3
 8001872:	480d      	ldr	r0, [pc, #52]	@ (80018a8 <MX_TIM2_Init+0x98>)
 8001874:	f00b f97c 	bl	800cb70 <HAL_TIM_ConfigClockSource>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800187e:	f7ff fc95 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <MX_TIM2_Init+0x98>)
 8001890:	f00b fec2 	bl	800d618 <HAL_TIMEx_MasterConfigSynchronization>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800189a:	f7ff fc87 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	3720      	adds	r7, #32
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2400060c 	.word	0x2400060c

080018ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b09a      	sub	sp, #104	@ 0x68
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	222c      	movs	r2, #44	@ 0x2c
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f011 faab 	bl	8012e42 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 80018ee:	4a4b      	ldr	r2, [pc, #300]	@ (8001a1c <MX_TIM8_Init+0x170>)
 80018f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018f2:	4b49      	ldr	r3, [pc, #292]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b47      	ldr	r3, [pc, #284]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 80018fe:	4b46      	ldr	r3, [pc, #280]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 8001900:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001904:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b44      	ldr	r3, [pc, #272]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800190c:	4b42      	ldr	r3, [pc, #264]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001918:	483f      	ldr	r0, [pc, #252]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 800191a:	f00a fcb6 	bl	800c28a <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001924:	f7ff fc42 	bl	80011ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800192c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800192e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001932:	4619      	mov	r1, r3
 8001934:	4838      	ldr	r0, [pc, #224]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 8001936:	f00b f91b 	bl	800cb70 <HAL_TIM_ConfigClockSource>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001940:	f7ff fc34 	bl	80011ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001944:	4834      	ldr	r0, [pc, #208]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 8001946:	f00a fd6f 	bl	800c428 <HAL_TIM_PWM_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001950:	f7ff fc2c 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001960:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001964:	4619      	mov	r1, r3
 8001966:	482c      	ldr	r0, [pc, #176]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 8001968:	f00b fe56 	bl	800d618 <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001972:	f7ff fc1b 	bl	80011ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001976:	2360      	movs	r3, #96	@ 0x60
 8001978:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 6000-1;
 800197a:	f241 736f 	movw	r3, #5999	@ 0x176f
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001980:	2300      	movs	r3, #0
 8001982:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001988:	2304      	movs	r3, #4
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001994:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	481e      	ldr	r0, [pc, #120]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 800199e:	f00a ffd3 	bl	800c948 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80019a8:	f7ff fc00 	bl	80011ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019b0:	2204      	movs	r2, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4818      	ldr	r0, [pc, #96]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 80019b6:	f00a ffc7 	bl	800c948 <HAL_TIM_PWM_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80019c0:	f7ff fbf4 	bl	80011ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 80019fa:	f00b fe9b 	bl	800d734 <HAL_TIMEx_ConfigBreakDeadTime>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8001a04:	f7ff fbd2 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a08:	4803      	ldr	r0, [pc, #12]	@ (8001a18 <MX_TIM8_Init+0x16c>)
 8001a0a:	f000 f847 	bl	8001a9c <HAL_TIM_MspPostInit>

}
 8001a0e:	bf00      	nop
 8001a10:	3768      	adds	r7, #104	@ 0x68
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	24000658 	.word	0x24000658
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a30:	d117      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <HAL_TIM_Base_MspInit+0x74>)
 8001a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a38:	4a16      	ldr	r2, [pc, #88]	@ (8001a94 <HAL_TIM_Base_MspInit+0x74>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <HAL_TIM_Base_MspInit+0x74>)
 8001a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	201c      	movs	r0, #28
 8001a56:	f001 fdd1 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a5a:	201c      	movs	r0, #28
 8001a5c:	f001 fde8 	bl	8003630 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001a60:	e013      	b.n	8001a8a <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM8)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0c      	ldr	r2, [pc, #48]	@ (8001a98 <HAL_TIM_Base_MspInit+0x78>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d10e      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_TIM_Base_MspInit+0x74>)
 8001a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a72:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <HAL_TIM_Base_MspInit+0x74>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_TIM_Base_MspInit+0x74>)
 8001a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	58024400 	.word	0x58024400
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	@ (8001b04 <HAL_TIM_MspPostInit+0x68>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d11e      	bne.n	8001afc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac4:	4a10      	ldr	r2, [pc, #64]	@ (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001adc:	23c0      	movs	r3, #192	@ 0xc0
 8001ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001aec:	2303      	movs	r3, #3
 8001aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <HAL_TIM_MspPostInit+0x70>)
 8001af8:	f004 f942 	bl	8005d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010400 	.word	0x40010400
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58020800 	.word	0x58020800

08001b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b14:	f7ff fdf4 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b18:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1a:	490d      	ldr	r1, [pc, #52]	@ (8001b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b30:	4c0a      	ldr	r4, [pc, #40]	@ (8001b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f011 f9e9 	bl	8012f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b42:	f7ff f809 	bl	8000b58 <main>
  bx  lr
 8001b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b50:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8001b54:	08015c88 	.word	0x08015c88
  ldr r2, =_sbss
 8001b58:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8001b5c:	24002400 	.word	0x24002400

08001b60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC3_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f001 fd3b 	bl	80035e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b70:	f007 f882 	bl	8008c78 <HAL_RCC_GetSysClockFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_Init+0x68>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	4913      	ldr	r1, [pc, #76]	@ (8001bd0 <HAL_Init+0x6c>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <HAL_Init+0x68>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd0 <HAL_Init+0x6c>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd4 <HAL_Init+0x70>)
 8001ba6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd8 <HAL_Init+0x74>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f7ff fc12 	bl	80013d8 <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e002      	b.n	8001bc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbe:	f7ff fbf1 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	080150d8 	.word	0x080150d8
 8001bd4:	24000008 	.word	0x24000008
 8001bd8:	24000004 	.word	0x24000004

08001bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x20>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_IncTick+0x24>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <HAL_IncTick+0x24>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	24000010 	.word	0x24000010
 8001c00:	240006a4 	.word	0x240006a4

08001c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return uwTick;
 8001c08:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <HAL_GetTick+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	240006a4 	.word	0x240006a4

08001c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c24:	f7ff ffee 	bl	8001c04 <HAL_GetTick>
 8001c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d005      	beq.n	8001c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <HAL_Delay+0x44>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c42:	bf00      	nop
 8001c44:	f7ff ffde 	bl	8001c04 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d8f7      	bhi.n	8001c44 <HAL_Delay+0x28>
  {
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	24000010 	.word	0x24000010

08001c64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_GetREVID+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	5c001000 	.word	0x5c001000

08001c7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	609a      	str	r2, [r3, #8]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3360      	adds	r3, #96	@ 0x60
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	431a      	orrs	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	431a      	orrs	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	611a      	str	r2, [r3, #16]
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b087      	sub	sp, #28
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3360      	adds	r3, #96	@ 0x60
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	601a      	str	r2, [r3, #0]
  }
}
 8001d80:	bf00      	nop
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b087      	sub	sp, #28
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3330      	adds	r3, #48	@ 0x30
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	211f      	movs	r1, #31
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	401a      	ands	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	f003 011f 	and.w	r1, r3, #31
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f023 0203 	bic.w	r2, r3, #3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3314      	adds	r3, #20
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	0e5b      	lsrs	r3, r3, #25
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0d1b      	lsrs	r3, r3, #20
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2107      	movs	r1, #7
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	401a      	ands	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	0d1b      	lsrs	r3, r3, #20
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0318 	and.w	r3, r3, #24
 8001eaa:	4908      	ldr	r1, [pc, #32]	@ (8001ecc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	000fffff 	.word	0x000fffff

08001ed0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 031f 	and.w	r3, r3, #31
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6093      	str	r3, [r2, #8]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	5fffffc0 	.word	0x5fffffc0

08001f10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f24:	d101      	bne.n	8001f2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <LL_ADC_EnableInternalRegulator+0x24>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	6fffffc0 	.word	0x6fffffc0

08001f60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <LL_ADC_Enable+0x24>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	7fffffc0 	.word	0x7fffffc0

08001fb0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <LL_ADC_Disable+0x24>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	7fffffc0 	.word	0x7fffffc0

08001fd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <LL_ADC_IsEnabled+0x18>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_ADC_IsEnabled+0x1a>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	d101      	bne.n	8002016 <LL_ADC_IsDisableOngoing+0x18>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <LL_ADC_IsDisableOngoing+0x1a>
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <LL_ADC_REG_StartConversion+0x24>)
 8002032:	4013      	ands	r3, r2
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	7fffffc0 	.word	0x7fffffc0

0800204c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b04      	cmp	r3, #4
 800205e:	d101      	bne.n	8002064 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b08      	cmp	r3, #8
 8002084:	d101      	bne.n	800208a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b089      	sub	sp, #36	@ 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e18f      	b.n	80023d2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe f9fb 	bl	80004bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff19 	bl	8001f10 <LL_ADC_IsDeepPowerDownEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff feff 	bl	8001eec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff34 	bl	8001f60 <LL_ADC_IsInternalRegulatorEnabled>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d114      	bne.n	8002128 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff18 	bl	8001f38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002108:	4b87      	ldr	r3, [pc, #540]	@ (8002328 <HAL_ADC_Init+0x290>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	4a87      	ldr	r2, [pc, #540]	@ (800232c <HAL_ADC_Init+0x294>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	3301      	adds	r3, #1
 8002118:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800211a:	e002      	b.n	8002122 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	3b01      	subs	r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f9      	bne.n	800211c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff17 	bl	8001f60 <LL_ADC_IsInternalRegulatorEnabled>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213c:	f043 0210 	orr.w	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff77 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 800215e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	f040 8129 	bne.w	80023c0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 8125 	bne.w	80023c0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800217e:	f043 0202 	orr.w	r2, r3, #2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff24 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d136      	bne.n	8002204 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a65      	ldr	r2, [pc, #404]	@ (8002330 <HAL_ADC_Init+0x298>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_ADC_Init+0x112>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a63      	ldr	r2, [pc, #396]	@ (8002334 <HAL_ADC_Init+0x29c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10e      	bne.n	80021c8 <HAL_ADC_Init+0x130>
 80021aa:	4861      	ldr	r0, [pc, #388]	@ (8002330 <HAL_ADC_Init+0x298>)
 80021ac:	f7ff ff14 	bl	8001fd8 <LL_ADC_IsEnabled>
 80021b0:	4604      	mov	r4, r0
 80021b2:	4860      	ldr	r0, [pc, #384]	@ (8002334 <HAL_ADC_Init+0x29c>)
 80021b4:	f7ff ff10 	bl	8001fd8 <LL_ADC_IsEnabled>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4323      	orrs	r3, r4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e008      	b.n	80021da <HAL_ADC_Init+0x142>
 80021c8:	485b      	ldr	r0, [pc, #364]	@ (8002338 <HAL_ADC_Init+0x2a0>)
 80021ca:	f7ff ff05 	bl	8001fd8 <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d012      	beq.n	8002204 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a53      	ldr	r2, [pc, #332]	@ (8002330 <HAL_ADC_Init+0x298>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <HAL_ADC_Init+0x15a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a51      	ldr	r2, [pc, #324]	@ (8002334 <HAL_ADC_Init+0x29c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Init+0x15e>
 80021f2:	4a52      	ldr	r2, [pc, #328]	@ (800233c <HAL_ADC_Init+0x2a4>)
 80021f4:	e000      	b.n	80021f8 <HAL_ADC_Init+0x160>
 80021f6:	4a52      	ldr	r2, [pc, #328]	@ (8002340 <HAL_ADC_Init+0x2a8>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7ff fd3c 	bl	8001c7c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002204:	f7ff fd2e 	bl	8001c64 <HAL_GetREVID>
 8002208:	4603      	mov	r3, r0
 800220a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800220e:	4293      	cmp	r3, r2
 8002210:	d914      	bls.n	800223c <HAL_ADC_Init+0x1a4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b10      	cmp	r3, #16
 8002218:	d110      	bne.n	800223c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7d5b      	ldrb	r3, [r3, #21]
 800221e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002224:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800222a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7f1b      	ldrb	r3, [r3, #28]
 8002230:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002232:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002234:	f043 030c 	orr.w	r3, r3, #12
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	e00d      	b.n	8002258 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7d5b      	ldrb	r3, [r3, #21]
 8002240:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002246:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800224c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7f1b      	ldrb	r3, [r3, #28]
 8002252:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7f1b      	ldrb	r3, [r3, #28]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	3b01      	subs	r3, #1
 8002266:	045b      	lsls	r3, r3, #17
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002282:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4b2c      	ldr	r3, [pc, #176]	@ (8002344 <HAL_ADC_Init+0x2ac>)
 8002292:	4013      	ands	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	69b9      	ldr	r1, [r7, #24]
 800229a:	430b      	orrs	r3, r1
 800229c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fed2 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 80022a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fedf 	bl	8002072 <LL_ADC_INJ_IsConversionOngoing>
 80022b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d15f      	bne.n	800237c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d15c      	bne.n	800237c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7d1b      	ldrb	r3, [r3, #20]
 80022c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002348 <HAL_ADC_Init+0x2b0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	430b      	orrs	r3, r1
 80022e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d130      	bne.n	8002350 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	4b14      	ldr	r3, [pc, #80]	@ (800234c <HAL_ADC_Init+0x2b4>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002302:	3a01      	subs	r2, #1
 8002304:	0411      	lsls	r1, r2, #16
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002316:	430a      	orrs	r2, r1
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	611a      	str	r2, [r3, #16]
 8002324:	e01c      	b.n	8002360 <HAL_ADC_Init+0x2c8>
 8002326:	bf00      	nop
 8002328:	24000004 	.word	0x24000004
 800232c:	053e2d63 	.word	0x053e2d63
 8002330:	40022000 	.word	0x40022000
 8002334:	40022100 	.word	0x40022100
 8002338:	58026000 	.word	0x58026000
 800233c:	40022300 	.word	0x40022300
 8002340:	58026300 	.word	0x58026300
 8002344:	fff0c003 	.word	0xfff0c003
 8002348:	ffffbffc 	.word	0xffffbffc
 800234c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fde0 	bl	8002f3c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d10c      	bne.n	800239e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	f023 010f 	bic.w	r1, r3, #15
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	1e5a      	subs	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	631a      	str	r2, [r3, #48]	@ 0x30
 800239c:	e007      	b.n	80023ae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 020f 	bic.w	r2, r2, #15
 80023ac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80023be:	e007      	b.n	80023d0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c4:	f043 0210 	orr.w	r2, r3, #16
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	bf00      	nop

080023dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a55      	ldr	r2, [pc, #340]	@ (8002544 <HAL_ADC_Start_DMA+0x168>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d004      	beq.n	80023fc <HAL_ADC_Start_DMA+0x20>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a54      	ldr	r2, [pc, #336]	@ (8002548 <HAL_ADC_Start_DMA+0x16c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_Start_DMA+0x24>
 80023fc:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_ADC_Start_DMA+0x170>)
 80023fe:	e000      	b.n	8002402 <HAL_ADC_Start_DMA+0x26>
 8002400:	4b53      	ldr	r3, [pc, #332]	@ (8002550 <HAL_ADC_Start_DMA+0x174>)
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fd64 	bl	8001ed0 <LL_ADC_GetMultimode>
 8002408:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fe1c 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 808c 	bne.w	8002534 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ADC_Start_DMA+0x4e>
 8002426:	2302      	movs	r3, #2
 8002428:	e087      	b.n	800253a <HAL_ADC_Start_DMA+0x15e>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b05      	cmp	r3, #5
 800243c:	d002      	beq.n	8002444 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b09      	cmp	r3, #9
 8002442:	d170      	bne.n	8002526 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fbfb 	bl	8002c40 <ADC_Enable>
 800244a:	4603      	mov	r3, r0
 800244c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d163      	bne.n	800251c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002458:	4b3e      	ldr	r3, [pc, #248]	@ (8002554 <HAL_ADC_Start_DMA+0x178>)
 800245a:	4013      	ands	r3, r2
 800245c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a37      	ldr	r2, [pc, #220]	@ (8002548 <HAL_ADC_Start_DMA+0x16c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d002      	beq.n	8002474 <HAL_ADC_Start_DMA+0x98>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e000      	b.n	8002476 <HAL_ADC_Start_DMA+0x9a>
 8002474:	4b33      	ldr	r3, [pc, #204]	@ (8002544 <HAL_ADC_Start_DMA+0x168>)
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	4293      	cmp	r3, r2
 800247c:	d002      	beq.n	8002484 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002488:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	f023 0206 	bic.w	r2, r3, #6
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80024a8:	e002      	b.n	80024b0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b4:	4a28      	ldr	r2, [pc, #160]	@ (8002558 <HAL_ADC_Start_DMA+0x17c>)
 80024b6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024bc:	4a27      	ldr	r2, [pc, #156]	@ (800255c <HAL_ADC_Start_DMA+0x180>)
 80024be:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c4:	4a26      	ldr	r2, [pc, #152]	@ (8002560 <HAL_ADC_Start_DMA+0x184>)
 80024c6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	221c      	movs	r2, #28
 80024ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0210 	orr.w	r2, r2, #16
 80024e6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f7ff fc89 	bl	8001e0a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3340      	adds	r3, #64	@ 0x40
 8002502:	4619      	mov	r1, r3
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f001 febe 	bl	8004288 <HAL_DMA_Start_IT>
 800250c:	4603      	mov	r3, r0
 800250e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fd85 	bl	8002024 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800251a:	e00d      	b.n	8002538 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002524:	e008      	b.n	8002538 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002532:	e001      	b.n	8002538 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002534:	2302      	movs	r3, #2
 8002536:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002538:	7dfb      	ldrb	r3, [r7, #23]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40022000 	.word	0x40022000
 8002548:	40022100 	.word	0x40022100
 800254c:	40022300 	.word	0x40022300
 8002550:	58026300 	.word	0x58026300
 8002554:	fffff0fe 	.word	0xfffff0fe
 8002558:	08002e13 	.word	0x08002e13
 800255c:	08002eeb 	.word	0x08002eeb
 8002560:	08002f07 	.word	0x08002f07

08002564 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b0a1      	sub	sp, #132	@ 0x84
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a9d      	ldr	r2, [pc, #628]	@ (8002830 <HAL_ADC_ConfigChannel+0x290>)
 80025ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x2a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e321      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x66e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fd38 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 8306 	bne.w	8002bf0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d108      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x62>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0e9b      	lsrs	r3, r3, #26
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2201      	movs	r2, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	e016      	b.n	8002630 <HAL_ADC_ConfigChannel+0x90>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002612:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e003      	b.n	8002626 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800261e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	2201      	movs	r2, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	69d1      	ldr	r1, [r2, #28]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	430b      	orrs	r3, r1
 800263c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	f7ff fbb1 	bl	8001db2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fcf9 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 800265a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fd06 	bl	8002072 <LL_ADC_INJ_IsConversionOngoing>
 8002666:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 80b3 	bne.w	80027d6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002670:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 80af 	bne.w	80027d6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	461a      	mov	r2, r3
 8002686:	f7ff fbd3 	bl	8001e30 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800268a:	4b6a      	ldr	r3, [pc, #424]	@ (8002834 <HAL_ADC_ConfigChannel+0x294>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002692:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002696:	d10b      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x110>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	e01d      	b.n	80026ec <HAL_ADC_ConfigChannel+0x14c>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10b      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x136>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	e00a      	b.n	80026ec <HAL_ADC_ConfigChannel+0x14c>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d027      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002704:	f7ff faee 	bl	8001ce4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6919      	ldr	r1, [r3, #16]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	7e5b      	ldrb	r3, [r3, #25]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d102      	bne.n	800271e <HAL_ADC_ConfigChannel+0x17e>
 8002718:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800271c:	e000      	b.n	8002720 <HAL_ADC_ConfigChannel+0x180>
 800271e:	2300      	movs	r3, #0
 8002720:	461a      	mov	r2, r3
 8002722:	f7ff fb18 	bl	8001d56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	7e1b      	ldrb	r3, [r3, #24]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_ADC_ConfigChannel+0x19c>
 8002736:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800273a:	e000      	b.n	800273e <HAL_ADC_ConfigChannel+0x19e>
 800273c:	2300      	movs	r3, #0
 800273e:	461a      	mov	r2, r3
 8002740:	f7ff faf0 	bl	8001d24 <LL_ADC_SetDataRightShift>
 8002744:	e047      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	069b      	lsls	r3, r3, #26
 8002756:	429a      	cmp	r2, r3
 8002758:	d107      	bne.n	800276a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002768:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002770:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	069b      	lsls	r3, r3, #26
 800277a:	429a      	cmp	r2, r3
 800277c:	d107      	bne.n	800278e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800278c:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002794:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	069b      	lsls	r3, r3, #26
 800279e:	429a      	cmp	r2, r3
 80027a0:	d107      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027b0:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	069b      	lsls	r3, r3, #26
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d107      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fbfc 	bl	8001fd8 <LL_ADC_IsEnabled>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 820d 	bne.w	8002c02 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	461a      	mov	r2, r3
 80027f6:	f7ff fb47 	bl	8001e88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002830 <HAL_ADC_ConfigChannel+0x290>)
 8002800:	4293      	cmp	r3, r2
 8002802:	f040 8133 	bne.w	8002a6c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002812:	2b00      	cmp	r3, #0
 8002814:	d110      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x298>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	3301      	adds	r3, #1
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2b09      	cmp	r3, #9
 8002824:	bf94      	ite	ls
 8002826:	2301      	movls	r3, #1
 8002828:	2300      	movhi	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	e01e      	b.n	800286c <HAL_ADC_ConfigChannel+0x2cc>
 800282e:	bf00      	nop
 8002830:	47ff0000 	.word	0x47ff0000
 8002834:	5c001000 	.word	0x5c001000
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002848:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800284a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e003      	b.n	800285c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2b09      	cmp	r3, #9
 8002864:	bf94      	ite	ls
 8002866:	2301      	movls	r3, #1
 8002868:	2300      	movhi	r3, #0
 800286a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800286c:	2b00      	cmp	r3, #0
 800286e:	d079      	beq.n	8002964 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_ADC_ConfigChannel+0x2ec>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	3301      	adds	r3, #1
 8002884:	069b      	lsls	r3, r3, #26
 8002886:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800288a:	e015      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x318>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800289a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800289c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800289e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80028a4:	2320      	movs	r3, #32
 80028a6:	e003      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	069b      	lsls	r3, r3, #26
 80028b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x338>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	3301      	adds	r3, #1
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2101      	movs	r1, #1
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	e017      	b.n	8002908 <HAL_ADC_ConfigChannel+0x368>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80028f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	ea42 0103 	orr.w	r1, r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_ADC_ConfigChannel+0x38e>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	3301      	adds	r3, #1
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	051b      	lsls	r3, r3, #20
 800292c:	e018      	b.n	8002960 <HAL_ADC_ConfigChannel+0x3c0>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002946:	2320      	movs	r3, #32
 8002948:	e003      	b.n	8002952 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800294a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	3301      	adds	r3, #1
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002960:	430b      	orrs	r3, r1
 8002962:	e07e      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x3e0>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	3301      	adds	r3, #1
 8002978:	069b      	lsls	r3, r3, #26
 800297a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800297e:	e015      	b.n	80029ac <HAL_ADC_ConfigChannel+0x40c>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800299c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	069b      	lsls	r3, r3, #26
 80029a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x42c>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	3301      	adds	r3, #1
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	e017      	b.n	80029fc <HAL_ADC_ConfigChannel+0x45c>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	61bb      	str	r3, [r7, #24]
  return result;
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80029e4:	2320      	movs	r3, #32
 80029e6:	e003      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	ea42 0103 	orr.w	r1, r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x488>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	3301      	adds	r3, #1
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b1e      	subs	r3, #30
 8002a20:	051b      	lsls	r3, r3, #20
 8002a22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a26:	e01b      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x4c0>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	60fb      	str	r3, [r7, #12]
  return result;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f003 021f 	and.w	r2, r3, #31
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	3b1e      	subs	r3, #30
 8002a5a:	051b      	lsls	r3, r3, #20
 8002a5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a60:	430b      	orrs	r3, r1
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	6892      	ldr	r2, [r2, #8]
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7ff f9e2 	bl	8001e30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f280 80c6 	bge.w	8002c02 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a67      	ldr	r2, [pc, #412]	@ (8002c18 <HAL_ADC_ConfigChannel+0x678>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_ADC_ConfigChannel+0x4ea>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a65      	ldr	r2, [pc, #404]	@ (8002c1c <HAL_ADC_ConfigChannel+0x67c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x4ee>
 8002a8a:	4b65      	ldr	r3, [pc, #404]	@ (8002c20 <HAL_ADC_ConfigChannel+0x680>)
 8002a8c:	e000      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x4f0>
 8002a8e:	4b65      	ldr	r3, [pc, #404]	@ (8002c24 <HAL_ADC_ConfigChannel+0x684>)
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff f919 	bl	8001cc8 <LL_ADC_GetCommonPathInternalCh>
 8002a96:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5e      	ldr	r2, [pc, #376]	@ (8002c18 <HAL_ADC_ConfigChannel+0x678>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_ADC_ConfigChannel+0x50c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8002c1c <HAL_ADC_ConfigChannel+0x67c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d10e      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x52a>
 8002aac:	485a      	ldr	r0, [pc, #360]	@ (8002c18 <HAL_ADC_ConfigChannel+0x678>)
 8002aae:	f7ff fa93 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	4859      	ldr	r0, [pc, #356]	@ (8002c1c <HAL_ADC_ConfigChannel+0x67c>)
 8002ab6:	f7ff fa8f 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4323      	orrs	r3, r4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	e008      	b.n	8002adc <HAL_ADC_ConfigChannel+0x53c>
 8002aca:	4857      	ldr	r0, [pc, #348]	@ (8002c28 <HAL_ADC_ConfigChannel+0x688>)
 8002acc:	f7ff fa84 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d07d      	beq.n	8002bdc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a51      	ldr	r2, [pc, #324]	@ (8002c2c <HAL_ADC_ConfigChannel+0x68c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d130      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x5ac>
 8002aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d12b      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	@ (8002c28 <HAL_ADC_ConfigChannel+0x688>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	f040 8081 	bne.w	8002c02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a44      	ldr	r2, [pc, #272]	@ (8002c18 <HAL_ADC_ConfigChannel+0x678>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x574>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a43      	ldr	r2, [pc, #268]	@ (8002c1c <HAL_ADC_ConfigChannel+0x67c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x578>
 8002b14:	4a42      	ldr	r2, [pc, #264]	@ (8002c20 <HAL_ADC_ConfigChannel+0x680>)
 8002b16:	e000      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x57a>
 8002b18:	4a42      	ldr	r2, [pc, #264]	@ (8002c24 <HAL_ADC_ConfigChannel+0x684>)
 8002b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f7ff f8bd 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b28:	4b41      	ldr	r3, [pc, #260]	@ (8002c30 <HAL_ADC_ConfigChannel+0x690>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	099b      	lsrs	r3, r3, #6
 8002b2e:	4a41      	ldr	r2, [pc, #260]	@ (8002c34 <HAL_ADC_ConfigChannel+0x694>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	3301      	adds	r3, #1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b3c:	e002      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f9      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b4a:	e05a      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a39      	ldr	r2, [pc, #228]	@ (8002c38 <HAL_ADC_ConfigChannel+0x698>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d11e      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x5f4>
 8002b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d119      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a30      	ldr	r2, [pc, #192]	@ (8002c28 <HAL_ADC_ConfigChannel+0x688>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d14b      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c18 <HAL_ADC_ConfigChannel+0x678>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_ADC_ConfigChannel+0x5de>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a28      	ldr	r2, [pc, #160]	@ (8002c1c <HAL_ADC_ConfigChannel+0x67c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x5e2>
 8002b7e:	4a28      	ldr	r2, [pc, #160]	@ (8002c20 <HAL_ADC_ConfigChannel+0x680>)
 8002b80:	e000      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x5e4>
 8002b82:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <HAL_ADC_ConfigChannel+0x684>)
 8002b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7ff f888 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b92:	e036      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a28      	ldr	r2, [pc, #160]	@ (8002c3c <HAL_ADC_ConfigChannel+0x69c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d131      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x662>
 8002b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d12c      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <HAL_ADC_ConfigChannel+0x688>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d127      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a18      	ldr	r2, [pc, #96]	@ (8002c18 <HAL_ADC_ConfigChannel+0x678>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_ADC_ConfigChannel+0x626>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a16      	ldr	r2, [pc, #88]	@ (8002c1c <HAL_ADC_ConfigChannel+0x67c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x62a>
 8002bc6:	4a16      	ldr	r2, [pc, #88]	@ (8002c20 <HAL_ADC_ConfigChannel+0x680>)
 8002bc8:	e000      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x62c>
 8002bca:	4a16      	ldr	r2, [pc, #88]	@ (8002c24 <HAL_ADC_ConfigChannel+0x684>)
 8002bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7ff f864 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
 8002bda:	e012      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bee:	e008      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3784      	adds	r7, #132	@ 0x84
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40022100 	.word	0x40022100
 8002c20:	40022300 	.word	0x40022300
 8002c24:	58026300 	.word	0x58026300
 8002c28:	58026000 	.word	0x58026000
 8002c2c:	cb840000 	.word	0xcb840000
 8002c30:	24000004 	.word	0x24000004
 8002c34:	053e2d63 	.word	0x053e2d63
 8002c38:	c7520000 	.word	0xc7520000
 8002c3c:	cfb80000 	.word	0xcfb80000

08002c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff f9c3 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d16e      	bne.n	8002d36 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <ADC_Enable+0x100>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	f043 0210 	orr.w	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e05a      	b.n	8002d38 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f97e 	bl	8001f88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe ffba 	bl	8001c04 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2b      	ldr	r2, [pc, #172]	@ (8002d44 <ADC_Enable+0x104>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <ADC_Enable+0x66>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <ADC_Enable+0x108>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <ADC_Enable+0x6a>
 8002ca6:	4b29      	ldr	r3, [pc, #164]	@ (8002d4c <ADC_Enable+0x10c>)
 8002ca8:	e000      	b.n	8002cac <ADC_Enable+0x6c>
 8002caa:	4b29      	ldr	r3, [pc, #164]	@ (8002d50 <ADC_Enable+0x110>)
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff f90f 	bl	8001ed0 <LL_ADC_GetMultimode>
 8002cb2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a23      	ldr	r2, [pc, #140]	@ (8002d48 <ADC_Enable+0x108>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d002      	beq.n	8002cc4 <ADC_Enable+0x84>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e000      	b.n	8002cc6 <ADC_Enable+0x86>
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <ADC_Enable+0x104>)
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d02c      	beq.n	8002d28 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d130      	bne.n	8002d36 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd4:	e028      	b.n	8002d28 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff f97c 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff f94c 	bl	8001f88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cf0:	f7fe ff88 	bl	8001c04 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d914      	bls.n	8002d28 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d00d      	beq.n	8002d28 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d10:	f043 0210 	orr.w	r2, r3, #16
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e007      	b.n	8002d38 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d1cf      	bne.n	8002cd6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	8000003f 	.word	0x8000003f
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40022100 	.word	0x40022100
 8002d4c:	40022300 	.word	0x40022300
 8002d50:	58026300 	.word	0x58026300

08002d54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f94c 	bl	8001ffe <LL_ADC_IsDisableOngoing>
 8002d66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f933 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d047      	beq.n	8002e08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d144      	bne.n	8002e08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030d 	and.w	r3, r3, #13
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10c      	bne.n	8002da6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff f90d 	bl	8001fb0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d9e:	f7fe ff31 	bl	8001c04 <HAL_GetTick>
 8002da2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002da4:	e029      	b.n	8002dfa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e023      	b.n	8002e0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dc2:	f7fe ff1f 	bl	8001c04 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d914      	bls.n	8002dfa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e007      	b.n	8002e0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1dc      	bne.n	8002dc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d14b      	bne.n	8002ec4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d021      	beq.n	8002e8a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe ff9e 	bl	8001d8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d032      	beq.n	8002ebc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d12b      	bne.n	8002ebc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11f      	bne.n	8002ebc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e88:	e018      	b.n	8002ebc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff fb51 	bl	8002564 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ec2:	e00e      	b.n	8002ee2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff fb5b 	bl	800258c <HAL_ADC_ErrorCallback>
}
 8002ed6:	e004      	b.n	8002ee2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff fb3d 	bl	8002578 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fb2d 	bl	800258c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a7a      	ldr	r2, [pc, #488]	@ (8003134 <ADC_ConfigureBoostMode+0x1f8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <ADC_ConfigureBoostMode+0x1c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a79      	ldr	r2, [pc, #484]	@ (8003138 <ADC_ConfigureBoostMode+0x1fc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d109      	bne.n	8002f6c <ADC_ConfigureBoostMode+0x30>
 8002f58:	4b78      	ldr	r3, [pc, #480]	@ (800313c <ADC_ConfigureBoostMode+0x200>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e008      	b.n	8002f7e <ADC_ConfigureBoostMode+0x42>
 8002f6c:	4b74      	ldr	r3, [pc, #464]	@ (8003140 <ADC_ConfigureBoostMode+0x204>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01c      	beq.n	8002fbc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f82:	f005 fff3 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 8002f86:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f90:	d010      	beq.n	8002fb4 <ADC_ConfigureBoostMode+0x78>
 8002f92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f96:	d873      	bhi.n	8003080 <ADC_ConfigureBoostMode+0x144>
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f9c:	d002      	beq.n	8002fa4 <ADC_ConfigureBoostMode+0x68>
 8002f9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fa2:	d16d      	bne.n	8003080 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	60fb      	str	r3, [r7, #12]
        break;
 8002fb2:	e068      	b.n	8003086 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	60fb      	str	r3, [r7, #12]
        break;
 8002fba:	e064      	b.n	8003086 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002fbc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002fc0:	f04f 0100 	mov.w	r1, #0
 8002fc4:	f007 fa64 	bl	800a490 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fc8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002fd2:	d051      	beq.n	8003078 <ADC_ConfigureBoostMode+0x13c>
 8002fd4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002fd8:	d854      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x148>
 8002fda:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002fde:	d047      	beq.n	8003070 <ADC_ConfigureBoostMode+0x134>
 8002fe0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002fe4:	d84e      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x148>
 8002fe6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002fea:	d03d      	beq.n	8003068 <ADC_ConfigureBoostMode+0x12c>
 8002fec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ff0:	d848      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x148>
 8002ff2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ff6:	d033      	beq.n	8003060 <ADC_ConfigureBoostMode+0x124>
 8002ff8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ffc:	d842      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x148>
 8002ffe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003002:	d029      	beq.n	8003058 <ADC_ConfigureBoostMode+0x11c>
 8003004:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003008:	d83c      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x148>
 800300a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800300e:	d01a      	beq.n	8003046 <ADC_ConfigureBoostMode+0x10a>
 8003010:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003014:	d836      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x148>
 8003016:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800301a:	d014      	beq.n	8003046 <ADC_ConfigureBoostMode+0x10a>
 800301c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003020:	d830      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x148>
 8003022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003026:	d00e      	beq.n	8003046 <ADC_ConfigureBoostMode+0x10a>
 8003028:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800302c:	d82a      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x148>
 800302e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003032:	d008      	beq.n	8003046 <ADC_ConfigureBoostMode+0x10a>
 8003034:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003038:	d824      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x148>
 800303a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800303e:	d002      	beq.n	8003046 <ADC_ConfigureBoostMode+0x10a>
 8003040:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003044:	d11e      	bne.n	8003084 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	0c9b      	lsrs	r3, r3, #18
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	60fb      	str	r3, [r7, #12]
        break;
 8003056:	e016      	b.n	8003086 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
        break;
 800305e:	e012      	b.n	8003086 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	60fb      	str	r3, [r7, #12]
        break;
 8003066:	e00e      	b.n	8003086 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	60fb      	str	r3, [r7, #12]
        break;
 800306e:	e00a      	b.n	8003086 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	09db      	lsrs	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
        break;
 8003076:	e006      	b.n	8003086 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	60fb      	str	r3, [r7, #12]
        break;
 800307e:	e002      	b.n	8003086 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003080:	bf00      	nop
 8003082:	e000      	b.n	8003086 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003084:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003086:	f7fe fded 	bl	8001c64 <HAL_GetREVID>
 800308a:	4603      	mov	r3, r0
 800308c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003090:	4293      	cmp	r3, r2
 8003092:	d815      	bhi.n	80030c0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <ADC_ConfigureBoostMode+0x208>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d908      	bls.n	80030ae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80030ac:	e03e      	b.n	800312c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030bc:	609a      	str	r2, [r3, #8]
}
 80030be:	e035      	b.n	800312c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003148 <ADC_ConfigureBoostMode+0x20c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d808      	bhi.n	80030e0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80030dc:	609a      	str	r2, [r3, #8]
}
 80030de:	e025      	b.n	800312c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a1a      	ldr	r2, [pc, #104]	@ (800314c <ADC_ConfigureBoostMode+0x210>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d80a      	bhi.n	80030fe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	e016      	b.n	800312c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a13      	ldr	r2, [pc, #76]	@ (8003150 <ADC_ConfigureBoostMode+0x214>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d80a      	bhi.n	800311c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003118:	609a      	str	r2, [r3, #8]
}
 800311a:	e007      	b.n	800312c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40022000 	.word	0x40022000
 8003138:	40022100 	.word	0x40022100
 800313c:	40022300 	.word	0x40022300
 8003140:	58026300 	.word	0x58026300
 8003144:	01312d00 	.word	0x01312d00
 8003148:	005f5e10 	.word	0x005f5e10
 800314c:	00bebc20 	.word	0x00bebc20
 8003150:	017d7840 	.word	0x017d7840

08003154 <LL_ADC_IsEnabled>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <LL_ADC_IsEnabled+0x18>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <LL_ADC_IsEnabled+0x1a>
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <LL_ADC_StartCalibration>:
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <LL_ADC_StartCalibration+0x38>)
 800318e:	4013      	ands	r3, r2
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800319c:	430a      	orrs	r2, r1
 800319e:	4313      	orrs	r3, r2
 80031a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	3ffeffc0 	.word	0x3ffeffc0

080031b8 <LL_ADC_IsCalibrationOnGoing>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031cc:	d101      	bne.n	80031d2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_REG_IsConversionOngoing>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d101      	bne.n	80031f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_ADCEx_Calibration_Start+0x1e>
 8003222:	2302      	movs	r3, #2
 8003224:	e04c      	b.n	80032c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff fd90 	bl	8002d54 <ADC_Disable>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d135      	bne.n	80032aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003242:	4b21      	ldr	r3, [pc, #132]	@ (80032c8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003244:	4013      	ands	r3, r2
 8003246:	f043 0202 	orr.w	r2, r3, #2
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff90 	bl	800317c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800325c:	e014      	b.n	8003288 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	3301      	adds	r3, #1
 8003262:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <HAL_ADCEx_Calibration_Start+0xc4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d30d      	bcc.n	8003288 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003270:	f023 0312 	bic.w	r3, r3, #18
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e01b      	b.n	80032c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff93 	bl	80031b8 <LL_ADC_IsCalibrationOnGoing>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e2      	bne.n	800325e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	f023 0303 	bic.w	r3, r3, #3
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80032a8:	e005      	b.n	80032b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	f043 0210 	orr.w	r2, r3, #16
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	ffffeefd 	.word	0xffffeefd
 80032cc:	25c3f800 	.word	0x25c3f800

080032d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b09f      	sub	sp, #124	@ 0x7c
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e0be      	b.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5c      	ldr	r2, [pc, #368]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d102      	bne.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003308:	4b5b      	ldr	r3, [pc, #364]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	e001      	b.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e09d      	b.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff54 	bl	80031e0 <LL_ADC_REG_IsConversionOngoing>
 8003338:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff4e 	bl	80031e0 <LL_ADC_REG_IsConversionOngoing>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d17f      	bne.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800334a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800334c:	2b00      	cmp	r3, #0
 800334e:	d17c      	bne.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a47      	ldr	r2, [pc, #284]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a46      	ldr	r2, [pc, #280]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003364:	4b45      	ldr	r3, [pc, #276]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003366:	e000      	b.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003368:	4b45      	ldr	r3, [pc, #276]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800336a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d039      	beq.n	80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	431a      	orrs	r2, r3
 8003382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003384:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a3a      	ldr	r2, [pc, #232]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a38      	ldr	r2, [pc, #224]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d10e      	bne.n	80033b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800339a:	4836      	ldr	r0, [pc, #216]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800339c:	f7ff feda 	bl	8003154 <LL_ADC_IsEnabled>
 80033a0:	4604      	mov	r4, r0
 80033a2:	4835      	ldr	r0, [pc, #212]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033a4:	f7ff fed6 	bl	8003154 <LL_ADC_IsEnabled>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4323      	orrs	r3, r4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e008      	b.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80033b8:	4832      	ldr	r0, [pc, #200]	@ (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033ba:	f7ff fecb 	bl	8003154 <LL_ADC_IsEnabled>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d047      	beq.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	6811      	ldr	r1, [r2, #0]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	6892      	ldr	r2, [r2, #8]
 80033de:	430a      	orrs	r2, r1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e6:	e03a      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10e      	bne.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003408:	481a      	ldr	r0, [pc, #104]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800340a:	f7ff fea3 	bl	8003154 <LL_ADC_IsEnabled>
 800340e:	4604      	mov	r4, r0
 8003410:	4819      	ldr	r0, [pc, #100]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003412:	f7ff fe9f 	bl	8003154 <LL_ADC_IsEnabled>
 8003416:	4603      	mov	r3, r0
 8003418:	4323      	orrs	r3, r4
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	e008      	b.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003426:	4817      	ldr	r0, [pc, #92]	@ (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003428:	f7ff fe94 	bl	8003154 <LL_ADC_IsEnabled>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800343c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003442:	4013      	ands	r3, r2
 8003444:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003446:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003448:	e009      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800345c:	e000      	b.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800345e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003468:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800346c:	4618      	mov	r0, r3
 800346e:	377c      	adds	r7, #124	@ 0x7c
 8003470:	46bd      	mov	sp, r7
 8003472:	bd90      	pop	{r4, r7, pc}
 8003474:	40022000 	.word	0x40022000
 8003478:	40022100 	.word	0x40022100
 800347c:	40022300 	.word	0x40022300
 8003480:	58026300 	.word	0x58026300
 8003484:	58026000 	.word	0x58026000
 8003488:	fffff0e0 	.word	0xfffff0e0

0800348c <__NVIC_SetPriorityGrouping>:
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <__NVIC_SetPriorityGrouping+0x40>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a8:	4013      	ands	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034b4:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ba:	4a04      	ldr	r2, [pc, #16]	@ (80034cc <__NVIC_SetPriorityGrouping+0x40>)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	60d3      	str	r3, [r2, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00
 80034d0:	05fa0000 	.word	0x05fa0000

080034d4 <__NVIC_GetPriorityGrouping>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <__NVIC_GetPriorityGrouping+0x18>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f003 0307 	and.w	r3, r3, #7
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_EnableIRQ>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db0b      	blt.n	800351a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	@ (8003528 <__NVIC_EnableIRQ+0x38>)
 800350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <__NVIC_SetPriority>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0a      	blt.n	8003556 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	@ (8003578 <__NVIC_SetPriority+0x4c>)
 8003546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003554:	e00a      	b.n	800356c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4908      	ldr	r1, [pc, #32]	@ (800357c <__NVIC_SetPriority+0x50>)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	3b04      	subs	r3, #4
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	440b      	add	r3, r1
 800356a:	761a      	strb	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <NVIC_EncodePriority>:
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	@ 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	@ 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ff4c 	bl	800348c <__NVIC_SetPriorityGrouping>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800360a:	f7ff ff63 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 800360e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	6978      	ldr	r0, [r7, #20]
 8003616:	f7ff ffb3 	bl	8003580 <NVIC_EncodePriority>
 800361a:	4602      	mov	r2, r0
 800361c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff82 	bl	800352c <__NVIC_SetPriority>
}
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800363a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff56 	bl	80034f0 <__NVIC_EnableIRQ>
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003650:	f3bf 8f5f 	dmb	sy
}
 8003654:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003656:	4b07      	ldr	r3, [pc, #28]	@ (8003674 <HAL_MPU_Disable+0x28>)
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	4a06      	ldr	r2, [pc, #24]	@ (8003674 <HAL_MPU_Disable+0x28>)
 800365c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003660:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_MPU_Disable+0x2c>)
 8003664:	2200      	movs	r2, #0
 8003666:	605a      	str	r2, [r3, #4]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000ed00 	.word	0xe000ed00
 8003678:	e000ed90 	.word	0xe000ed90

0800367c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003684:	4a0b      	ldr	r2, [pc, #44]	@ (80036b4 <HAL_MPU_Enable+0x38>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800368e:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <HAL_MPU_Enable+0x3c>)
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	4a09      	ldr	r2, [pc, #36]	@ (80036b8 <HAL_MPU_Enable+0x3c>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003698:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800369a:	f3bf 8f4f 	dsb	sy
}
 800369e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036a0:	f3bf 8f6f 	isb	sy
}
 80036a4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000ed90 	.word	0xe000ed90
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	785a      	ldrb	r2, [r3, #1]
 80036c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <HAL_MPU_ConfigRegion+0x84>)
 80036ca:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d029      	beq.n	8003728 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80036d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003740 <HAL_MPU_ConfigRegion+0x84>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7b1b      	ldrb	r3, [r3, #12]
 80036e0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	7adb      	ldrb	r3, [r3, #11]
 80036e6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7a9b      	ldrb	r3, [r3, #10]
 80036ee:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80036f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7b5b      	ldrb	r3, [r3, #13]
 80036f6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80036f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	7b9b      	ldrb	r3, [r3, #14]
 80036fe:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003700:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7bdb      	ldrb	r3, [r3, #15]
 8003706:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003708:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7a5b      	ldrb	r3, [r3, #9]
 800370e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003710:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7a1b      	ldrb	r3, [r3, #8]
 8003716:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003718:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003720:	4a07      	ldr	r2, [pc, #28]	@ (8003740 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003722:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003724:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003726:	e005      	b.n	8003734 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <HAL_MPU_ConfigRegion+0x84>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800372e:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <HAL_MPU_ConfigRegion+0x84>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed90 	.word	0xe000ed90

08003744 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e014      	b.n	8003780 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	791b      	ldrb	r3, [r3, #4]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fc ffa4 	bl	80006b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	795b      	ldrb	r3, [r3, #5]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_DAC_Start+0x16>
 800379a:	2302      	movs	r3, #2
 800379c:	e040      	b.n	8003820 <HAL_DAC_Start+0x98>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2201      	movs	r2, #1
 80037b8:	409a      	lsls	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d11d      	bne.n	8003812 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	e014      	b.n	8003812 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2102      	movs	r1, #2
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	429a      	cmp	r2, r3
 8003800:	d107      	bne.n	8003812 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0202 	orr.w	r2, r2, #2
 8003810:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003842:	d120      	bne.n	8003886 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800384e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003852:	d118      	bne.n	8003886 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2204      	movs	r2, #4
 8003858:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800386e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800387e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f852 	bl	800392a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003894:	d120      	bne.n	80038d8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038a4:	d118      	bne.n	80038d8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2204      	movs	r2, #4
 80038aa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f043 0202 	orr.w	r2, r3, #2
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80038c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80038d0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f972 	bl	8003bbc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4413      	add	r3, r2
 8003904:	3308      	adds	r3, #8
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e004      	b.n	8003914 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	3314      	adds	r3, #20
 8003912:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	461a      	mov	r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	795b      	ldrb	r3, [r3, #5]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_DAC_ConfigChannel+0x18>
 8003954:	2302      	movs	r3, #2
 8003956:	e12a      	b.n	8003bae <HAL_DAC_ConfigChannel+0x26e>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2202      	movs	r2, #2
 8003962:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b04      	cmp	r3, #4
 800396a:	f040 8081 	bne.w	8003a70 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800396e:	f7fe f949 	bl	8001c04 <HAL_GetTick>
 8003972:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d140      	bne.n	80039fc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800397a:	e018      	b.n	80039ae <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800397c:	f7fe f942 	bl	8001c04 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d911      	bls.n	80039ae <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003990:	4b89      	ldr	r3, [pc, #548]	@ (8003bb8 <HAL_DAC_ConfigChannel+0x278>)
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f043 0208 	orr.w	r2, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2203      	movs	r2, #3
 80039a8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0ff      	b.n	8003bae <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b4:	4b80      	ldr	r3, [pc, #512]	@ (8003bb8 <HAL_DAC_ConfigChannel+0x278>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1df      	bne.n	800397c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80039bc:	2001      	movs	r0, #1
 80039be:	f7fe f92d 	bl	8001c1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	6992      	ldr	r2, [r2, #24]
 80039ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80039cc:	e023      	b.n	8003a16 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039ce:	f7fe f919 	bl	8001c04 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d90f      	bls.n	80039fc <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da0a      	bge.n	80039fc <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2203      	movs	r2, #3
 80039f6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e0d8      	b.n	8003bae <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	dbe3      	blt.n	80039ce <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f7fe f908 	bl	8001c1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	6992      	ldr	r2, [r2, #24]
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	ea02 0103 	and.w	r1, r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	21ff      	movs	r1, #255	@ 0xff
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	ea02 0103 	and.w	r1, r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d11d      	bne.n	8003ab4 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	221f      	movs	r2, #31
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4013      	ands	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2207      	movs	r2, #7
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4013      	ands	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d102      	bne.n	8003ade <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e00f      	b.n	8003afe <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d102      	bne.n	8003aec <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e008      	b.n	8003afe <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003af4:	2301      	movs	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	e001      	b.n	8003afe <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	400a      	ands	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4013      	ands	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	22c0      	movs	r2, #192	@ 0xc0
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20008000 	.word	0x20008000

08003bbc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003bd8:	f7fe f814 	bl	8001c04 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e316      	b.n	8004216 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a66      	ldr	r2, [pc, #408]	@ (8003d88 <HAL_DMA_Init+0x1b8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d04a      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a65      	ldr	r2, [pc, #404]	@ (8003d8c <HAL_DMA_Init+0x1bc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d045      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a63      	ldr	r2, [pc, #396]	@ (8003d90 <HAL_DMA_Init+0x1c0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d040      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a62      	ldr	r2, [pc, #392]	@ (8003d94 <HAL_DMA_Init+0x1c4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d03b      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a60      	ldr	r2, [pc, #384]	@ (8003d98 <HAL_DMA_Init+0x1c8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d036      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8003d9c <HAL_DMA_Init+0x1cc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d031      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5d      	ldr	r2, [pc, #372]	@ (8003da0 <HAL_DMA_Init+0x1d0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d02c      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a5c      	ldr	r2, [pc, #368]	@ (8003da4 <HAL_DMA_Init+0x1d4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d027      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003da8 <HAL_DMA_Init+0x1d8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d022      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a59      	ldr	r2, [pc, #356]	@ (8003dac <HAL_DMA_Init+0x1dc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d01d      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a57      	ldr	r2, [pc, #348]	@ (8003db0 <HAL_DMA_Init+0x1e0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d018      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a56      	ldr	r2, [pc, #344]	@ (8003db4 <HAL_DMA_Init+0x1e4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d013      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a54      	ldr	r2, [pc, #336]	@ (8003db8 <HAL_DMA_Init+0x1e8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00e      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a53      	ldr	r2, [pc, #332]	@ (8003dbc <HAL_DMA_Init+0x1ec>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d009      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a51      	ldr	r2, [pc, #324]	@ (8003dc0 <HAL_DMA_Init+0x1f0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_DMA_Init+0xb8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a50      	ldr	r2, [pc, #320]	@ (8003dc4 <HAL_DMA_Init+0x1f4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <HAL_DMA_Init+0xbc>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_DMA_Init+0xbe>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 813b 	beq.w	8003f0a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a37      	ldr	r2, [pc, #220]	@ (8003d88 <HAL_DMA_Init+0x1b8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d04a      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a36      	ldr	r2, [pc, #216]	@ (8003d8c <HAL_DMA_Init+0x1bc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d045      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a34      	ldr	r2, [pc, #208]	@ (8003d90 <HAL_DMA_Init+0x1c0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d040      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a33      	ldr	r2, [pc, #204]	@ (8003d94 <HAL_DMA_Init+0x1c4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d03b      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a31      	ldr	r2, [pc, #196]	@ (8003d98 <HAL_DMA_Init+0x1c8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d036      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a30      	ldr	r2, [pc, #192]	@ (8003d9c <HAL_DMA_Init+0x1cc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d031      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8003da0 <HAL_DMA_Init+0x1d0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d02c      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2d      	ldr	r2, [pc, #180]	@ (8003da4 <HAL_DMA_Init+0x1d4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d027      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8003da8 <HAL_DMA_Init+0x1d8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d022      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2a      	ldr	r2, [pc, #168]	@ (8003dac <HAL_DMA_Init+0x1dc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d01d      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a28      	ldr	r2, [pc, #160]	@ (8003db0 <HAL_DMA_Init+0x1e0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d018      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a27      	ldr	r2, [pc, #156]	@ (8003db4 <HAL_DMA_Init+0x1e4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a25      	ldr	r2, [pc, #148]	@ (8003db8 <HAL_DMA_Init+0x1e8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00e      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a24      	ldr	r2, [pc, #144]	@ (8003dbc <HAL_DMA_Init+0x1ec>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d009      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a22      	ldr	r2, [pc, #136]	@ (8003dc0 <HAL_DMA_Init+0x1f0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <HAL_DMA_Init+0x174>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a21      	ldr	r2, [pc, #132]	@ (8003dc4 <HAL_DMA_Init+0x1f4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d108      	bne.n	8003d56 <HAL_DMA_Init+0x186>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e007      	b.n	8003d66 <HAL_DMA_Init+0x196>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d66:	e02f      	b.n	8003dc8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d68:	f7fd ff4c 	bl	8001c04 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d928      	bls.n	8003dc8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e246      	b.n	8004216 <HAL_DMA_Init+0x646>
 8003d88:	40020010 	.word	0x40020010
 8003d8c:	40020028 	.word	0x40020028
 8003d90:	40020040 	.word	0x40020040
 8003d94:	40020058 	.word	0x40020058
 8003d98:	40020070 	.word	0x40020070
 8003d9c:	40020088 	.word	0x40020088
 8003da0:	400200a0 	.word	0x400200a0
 8003da4:	400200b8 	.word	0x400200b8
 8003da8:	40020410 	.word	0x40020410
 8003dac:	40020428 	.word	0x40020428
 8003db0:	40020440 	.word	0x40020440
 8003db4:	40020458 	.word	0x40020458
 8003db8:	40020470 	.word	0x40020470
 8003dbc:	40020488 	.word	0x40020488
 8003dc0:	400204a0 	.word	0x400204a0
 8003dc4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1c8      	bne.n	8003d68 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4b83      	ldr	r3, [pc, #524]	@ (8003ff0 <HAL_DMA_Init+0x420>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003dee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e06:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d107      	bne.n	8003e2c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	4313      	orrs	r3, r2
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003e2c:	4b71      	ldr	r3, [pc, #452]	@ (8003ff4 <HAL_DMA_Init+0x424>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b71      	ldr	r3, [pc, #452]	@ (8003ff8 <HAL_DMA_Init+0x428>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e38:	d328      	bcc.n	8003e8c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b28      	cmp	r3, #40	@ 0x28
 8003e40:	d903      	bls.n	8003e4a <HAL_DMA_Init+0x27a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e48:	d917      	bls.n	8003e7a <HAL_DMA_Init+0x2aa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e50:	d903      	bls.n	8003e5a <HAL_DMA_Init+0x28a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b42      	cmp	r3, #66	@ 0x42
 8003e58:	d90f      	bls.n	8003e7a <HAL_DMA_Init+0x2aa>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b46      	cmp	r3, #70	@ 0x46
 8003e60:	d903      	bls.n	8003e6a <HAL_DMA_Init+0x29a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b48      	cmp	r3, #72	@ 0x48
 8003e68:	d907      	bls.n	8003e7a <HAL_DMA_Init+0x2aa>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003e70:	d905      	bls.n	8003e7e <HAL_DMA_Init+0x2ae>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b52      	cmp	r3, #82	@ 0x52
 8003e78:	d801      	bhi.n	8003e7e <HAL_DMA_Init+0x2ae>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_DMA_Init+0x2b0>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e8a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d117      	bne.n	8003ee6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f001 fdcf 	bl	8005a6c <DMA_CheckFifoParam>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2240      	movs	r2, #64	@ 0x40
 8003ed8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e197      	b.n	8004216 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f001 fd0a 	bl	8005908 <DMA_CalcBaseAndBitshift>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	223f      	movs	r2, #63	@ 0x3f
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	e0cd      	b.n	80040a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003ffc <HAL_DMA_Init+0x42c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d022      	beq.n	8003f5a <HAL_DMA_Init+0x38a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a39      	ldr	r2, [pc, #228]	@ (8004000 <HAL_DMA_Init+0x430>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <HAL_DMA_Init+0x38a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a38      	ldr	r2, [pc, #224]	@ (8004004 <HAL_DMA_Init+0x434>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_Init+0x38a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a36      	ldr	r2, [pc, #216]	@ (8004008 <HAL_DMA_Init+0x438>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_DMA_Init+0x38a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a35      	ldr	r2, [pc, #212]	@ (800400c <HAL_DMA_Init+0x43c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_DMA_Init+0x38a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a33      	ldr	r2, [pc, #204]	@ (8004010 <HAL_DMA_Init+0x440>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_DMA_Init+0x38a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a32      	ldr	r2, [pc, #200]	@ (8004014 <HAL_DMA_Init+0x444>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_DMA_Init+0x38a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a30      	ldr	r2, [pc, #192]	@ (8004018 <HAL_DMA_Init+0x448>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_DMA_Init+0x38e>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_DMA_Init+0x390>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8097 	beq.w	8004094 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a24      	ldr	r2, [pc, #144]	@ (8003ffc <HAL_DMA_Init+0x42c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d021      	beq.n	8003fb4 <HAL_DMA_Init+0x3e4>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a22      	ldr	r2, [pc, #136]	@ (8004000 <HAL_DMA_Init+0x430>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01c      	beq.n	8003fb4 <HAL_DMA_Init+0x3e4>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a21      	ldr	r2, [pc, #132]	@ (8004004 <HAL_DMA_Init+0x434>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d017      	beq.n	8003fb4 <HAL_DMA_Init+0x3e4>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1f      	ldr	r2, [pc, #124]	@ (8004008 <HAL_DMA_Init+0x438>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d012      	beq.n	8003fb4 <HAL_DMA_Init+0x3e4>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <HAL_DMA_Init+0x43c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00d      	beq.n	8003fb4 <HAL_DMA_Init+0x3e4>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004010 <HAL_DMA_Init+0x440>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d008      	beq.n	8003fb4 <HAL_DMA_Init+0x3e4>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8004014 <HAL_DMA_Init+0x444>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <HAL_DMA_Init+0x3e4>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a19      	ldr	r2, [pc, #100]	@ (8004018 <HAL_DMA_Init+0x448>)
 8003fb2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4b13      	ldr	r3, [pc, #76]	@ (800401c <HAL_DMA_Init+0x44c>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	d021      	beq.n	8004020 <HAL_DMA_Init+0x450>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b80      	cmp	r3, #128	@ 0x80
 8003fe2:	d102      	bne.n	8003fea <HAL_DMA_Init+0x41a>
 8003fe4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fe8:	e01b      	b.n	8004022 <HAL_DMA_Init+0x452>
 8003fea:	2300      	movs	r3, #0
 8003fec:	e019      	b.n	8004022 <HAL_DMA_Init+0x452>
 8003fee:	bf00      	nop
 8003ff0:	fe10803f 	.word	0xfe10803f
 8003ff4:	5c001000 	.word	0x5c001000
 8003ff8:	ffff0000 	.word	0xffff0000
 8003ffc:	58025408 	.word	0x58025408
 8004000:	5802541c 	.word	0x5802541c
 8004004:	58025430 	.word	0x58025430
 8004008:	58025444 	.word	0x58025444
 800400c:	58025458 	.word	0x58025458
 8004010:	5802546c 	.word	0x5802546c
 8004014:	58025480 	.word	0x58025480
 8004018:	58025494 	.word	0x58025494
 800401c:	fffe000f 	.word	0xfffe000f
 8004020:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68d2      	ldr	r2, [r2, #12]
 8004026:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004028:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004030:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004038:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004040:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004048:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004050:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	4b6e      	ldr	r3, [pc, #440]	@ (8004220 <HAL_DMA_Init+0x650>)
 8004068:	4413      	add	r3, r2
 800406a:	4a6e      	ldr	r2, [pc, #440]	@ (8004224 <HAL_DMA_Init+0x654>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	009a      	lsls	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f001 fc45 	bl	8005908 <DMA_CalcBaseAndBitshift>
 800407e:	4603      	mov	r3, r0
 8004080:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	2201      	movs	r2, #1
 800408c:	409a      	lsls	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	e008      	b.n	80040a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2240      	movs	r2, #64	@ 0x40
 8004098:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2203      	movs	r2, #3
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0b7      	b.n	8004216 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a5f      	ldr	r2, [pc, #380]	@ (8004228 <HAL_DMA_Init+0x658>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d072      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a5d      	ldr	r2, [pc, #372]	@ (800422c <HAL_DMA_Init+0x65c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d06d      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a5c      	ldr	r2, [pc, #368]	@ (8004230 <HAL_DMA_Init+0x660>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d068      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004234 <HAL_DMA_Init+0x664>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d063      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a59      	ldr	r2, [pc, #356]	@ (8004238 <HAL_DMA_Init+0x668>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d05e      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a57      	ldr	r2, [pc, #348]	@ (800423c <HAL_DMA_Init+0x66c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d059      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a56      	ldr	r2, [pc, #344]	@ (8004240 <HAL_DMA_Init+0x670>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d054      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a54      	ldr	r2, [pc, #336]	@ (8004244 <HAL_DMA_Init+0x674>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d04f      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a53      	ldr	r2, [pc, #332]	@ (8004248 <HAL_DMA_Init+0x678>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d04a      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a51      	ldr	r2, [pc, #324]	@ (800424c <HAL_DMA_Init+0x67c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d045      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a50      	ldr	r2, [pc, #320]	@ (8004250 <HAL_DMA_Init+0x680>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d040      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a4e      	ldr	r2, [pc, #312]	@ (8004254 <HAL_DMA_Init+0x684>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03b      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a4d      	ldr	r2, [pc, #308]	@ (8004258 <HAL_DMA_Init+0x688>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d036      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a4b      	ldr	r2, [pc, #300]	@ (800425c <HAL_DMA_Init+0x68c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d031      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a4a      	ldr	r2, [pc, #296]	@ (8004260 <HAL_DMA_Init+0x690>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d02c      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a48      	ldr	r2, [pc, #288]	@ (8004264 <HAL_DMA_Init+0x694>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d027      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a47      	ldr	r2, [pc, #284]	@ (8004268 <HAL_DMA_Init+0x698>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a45      	ldr	r2, [pc, #276]	@ (800426c <HAL_DMA_Init+0x69c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01d      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a44      	ldr	r2, [pc, #272]	@ (8004270 <HAL_DMA_Init+0x6a0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a42      	ldr	r2, [pc, #264]	@ (8004274 <HAL_DMA_Init+0x6a4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a41      	ldr	r2, [pc, #260]	@ (8004278 <HAL_DMA_Init+0x6a8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a3f      	ldr	r2, [pc, #252]	@ (800427c <HAL_DMA_Init+0x6ac>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a3e      	ldr	r2, [pc, #248]	@ (8004280 <HAL_DMA_Init+0x6b0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_Init+0x5c6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a3c      	ldr	r2, [pc, #240]	@ (8004284 <HAL_DMA_Init+0x6b4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_DMA_Init+0x5ca>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_DMA_Init+0x5cc>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d032      	beq.n	8004206 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f001 fcdf 	bl	8005b64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b80      	cmp	r3, #128	@ 0x80
 80041ac:	d102      	bne.n	80041b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d010      	beq.n	80041f4 <HAL_DMA_Init+0x624>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d80c      	bhi.n	80041f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f001 fd5c 	bl	8005c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	e008      	b.n	8004206 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	a7fdabf8 	.word	0xa7fdabf8
 8004224:	cccccccd 	.word	0xcccccccd
 8004228:	40020010 	.word	0x40020010
 800422c:	40020028 	.word	0x40020028
 8004230:	40020040 	.word	0x40020040
 8004234:	40020058 	.word	0x40020058
 8004238:	40020070 	.word	0x40020070
 800423c:	40020088 	.word	0x40020088
 8004240:	400200a0 	.word	0x400200a0
 8004244:	400200b8 	.word	0x400200b8
 8004248:	40020410 	.word	0x40020410
 800424c:	40020428 	.word	0x40020428
 8004250:	40020440 	.word	0x40020440
 8004254:	40020458 	.word	0x40020458
 8004258:	40020470 	.word	0x40020470
 800425c:	40020488 	.word	0x40020488
 8004260:	400204a0 	.word	0x400204a0
 8004264:	400204b8 	.word	0x400204b8
 8004268:	58025408 	.word	0x58025408
 800426c:	5802541c 	.word	0x5802541c
 8004270:	58025430 	.word	0x58025430
 8004274:	58025444 	.word	0x58025444
 8004278:	58025458 	.word	0x58025458
 800427c:	5802546c 	.word	0x5802546c
 8004280:	58025480 	.word	0x58025480
 8004284:	58025494 	.word	0x58025494

08004288 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e226      	b.n	80046f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_DMA_Start_IT+0x2a>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e21f      	b.n	80046f2 <HAL_DMA_Start_IT+0x46a>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	f040 820a 	bne.w	80046dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a68      	ldr	r2, [pc, #416]	@ (800447c <HAL_DMA_Start_IT+0x1f4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d04a      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a66      	ldr	r2, [pc, #408]	@ (8004480 <HAL_DMA_Start_IT+0x1f8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d045      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a65      	ldr	r2, [pc, #404]	@ (8004484 <HAL_DMA_Start_IT+0x1fc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d040      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a63      	ldr	r2, [pc, #396]	@ (8004488 <HAL_DMA_Start_IT+0x200>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d03b      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a62      	ldr	r2, [pc, #392]	@ (800448c <HAL_DMA_Start_IT+0x204>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d036      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a60      	ldr	r2, [pc, #384]	@ (8004490 <HAL_DMA_Start_IT+0x208>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d031      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a5f      	ldr	r2, [pc, #380]	@ (8004494 <HAL_DMA_Start_IT+0x20c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d02c      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a5d      	ldr	r2, [pc, #372]	@ (8004498 <HAL_DMA_Start_IT+0x210>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d027      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a5c      	ldr	r2, [pc, #368]	@ (800449c <HAL_DMA_Start_IT+0x214>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d022      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a5a      	ldr	r2, [pc, #360]	@ (80044a0 <HAL_DMA_Start_IT+0x218>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01d      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a59      	ldr	r2, [pc, #356]	@ (80044a4 <HAL_DMA_Start_IT+0x21c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d018      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a57      	ldr	r2, [pc, #348]	@ (80044a8 <HAL_DMA_Start_IT+0x220>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a56      	ldr	r2, [pc, #344]	@ (80044ac <HAL_DMA_Start_IT+0x224>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00e      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a54      	ldr	r2, [pc, #336]	@ (80044b0 <HAL_DMA_Start_IT+0x228>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d009      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a53      	ldr	r2, [pc, #332]	@ (80044b4 <HAL_DMA_Start_IT+0x22c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_DMA_Start_IT+0xee>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a51      	ldr	r2, [pc, #324]	@ (80044b8 <HAL_DMA_Start_IT+0x230>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d108      	bne.n	8004388 <HAL_DMA_Start_IT+0x100>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e007      	b.n	8004398 <HAL_DMA_Start_IT+0x110>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f001 f906 	bl	80055b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a34      	ldr	r2, [pc, #208]	@ (800447c <HAL_DMA_Start_IT+0x1f4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d04a      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a33      	ldr	r2, [pc, #204]	@ (8004480 <HAL_DMA_Start_IT+0x1f8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d045      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a31      	ldr	r2, [pc, #196]	@ (8004484 <HAL_DMA_Start_IT+0x1fc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d040      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a30      	ldr	r2, [pc, #192]	@ (8004488 <HAL_DMA_Start_IT+0x200>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d03b      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2e      	ldr	r2, [pc, #184]	@ (800448c <HAL_DMA_Start_IT+0x204>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d036      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2d      	ldr	r2, [pc, #180]	@ (8004490 <HAL_DMA_Start_IT+0x208>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d031      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004494 <HAL_DMA_Start_IT+0x20c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d02c      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004498 <HAL_DMA_Start_IT+0x210>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d027      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a28      	ldr	r2, [pc, #160]	@ (800449c <HAL_DMA_Start_IT+0x214>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d022      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a27      	ldr	r2, [pc, #156]	@ (80044a0 <HAL_DMA_Start_IT+0x218>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d01d      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a25      	ldr	r2, [pc, #148]	@ (80044a4 <HAL_DMA_Start_IT+0x21c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d018      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a24      	ldr	r2, [pc, #144]	@ (80044a8 <HAL_DMA_Start_IT+0x220>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d013      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a22      	ldr	r2, [pc, #136]	@ (80044ac <HAL_DMA_Start_IT+0x224>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00e      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a21      	ldr	r2, [pc, #132]	@ (80044b0 <HAL_DMA_Start_IT+0x228>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <HAL_DMA_Start_IT+0x22c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_DMA_Start_IT+0x1bc>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <HAL_DMA_Start_IT+0x230>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d101      	bne.n	8004448 <HAL_DMA_Start_IT+0x1c0>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_DMA_Start_IT+0x1c2>
 8004448:	2300      	movs	r3, #0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d036      	beq.n	80044bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 021e 	bic.w	r2, r3, #30
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0216 	orr.w	r2, r2, #22
 8004460:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d03e      	beq.n	80044e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0208 	orr.w	r2, r2, #8
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e035      	b.n	80044e8 <HAL_DMA_Start_IT+0x260>
 800447c:	40020010 	.word	0x40020010
 8004480:	40020028 	.word	0x40020028
 8004484:	40020040 	.word	0x40020040
 8004488:	40020058 	.word	0x40020058
 800448c:	40020070 	.word	0x40020070
 8004490:	40020088 	.word	0x40020088
 8004494:	400200a0 	.word	0x400200a0
 8004498:	400200b8 	.word	0x400200b8
 800449c:	40020410 	.word	0x40020410
 80044a0:	40020428 	.word	0x40020428
 80044a4:	40020440 	.word	0x40020440
 80044a8:	40020458 	.word	0x40020458
 80044ac:	40020470 	.word	0x40020470
 80044b0:	40020488 	.word	0x40020488
 80044b4:	400204a0 	.word	0x400204a0
 80044b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 020e 	bic.w	r2, r3, #14
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 020a 	orr.w	r2, r2, #10
 80044ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0204 	orr.w	r2, r2, #4
 80044e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a83      	ldr	r2, [pc, #524]	@ (80046fc <HAL_DMA_Start_IT+0x474>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d072      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a82      	ldr	r2, [pc, #520]	@ (8004700 <HAL_DMA_Start_IT+0x478>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d06d      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a80      	ldr	r2, [pc, #512]	@ (8004704 <HAL_DMA_Start_IT+0x47c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d068      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7f      	ldr	r2, [pc, #508]	@ (8004708 <HAL_DMA_Start_IT+0x480>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d063      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a7d      	ldr	r2, [pc, #500]	@ (800470c <HAL_DMA_Start_IT+0x484>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d05e      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7c      	ldr	r2, [pc, #496]	@ (8004710 <HAL_DMA_Start_IT+0x488>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d059      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a7a      	ldr	r2, [pc, #488]	@ (8004714 <HAL_DMA_Start_IT+0x48c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d054      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a79      	ldr	r2, [pc, #484]	@ (8004718 <HAL_DMA_Start_IT+0x490>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d04f      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a77      	ldr	r2, [pc, #476]	@ (800471c <HAL_DMA_Start_IT+0x494>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d04a      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a76      	ldr	r2, [pc, #472]	@ (8004720 <HAL_DMA_Start_IT+0x498>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d045      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a74      	ldr	r2, [pc, #464]	@ (8004724 <HAL_DMA_Start_IT+0x49c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d040      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a73      	ldr	r2, [pc, #460]	@ (8004728 <HAL_DMA_Start_IT+0x4a0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d03b      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a71      	ldr	r2, [pc, #452]	@ (800472c <HAL_DMA_Start_IT+0x4a4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d036      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a70      	ldr	r2, [pc, #448]	@ (8004730 <HAL_DMA_Start_IT+0x4a8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d031      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6e      	ldr	r2, [pc, #440]	@ (8004734 <HAL_DMA_Start_IT+0x4ac>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d02c      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a6d      	ldr	r2, [pc, #436]	@ (8004738 <HAL_DMA_Start_IT+0x4b0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d027      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6b      	ldr	r2, [pc, #428]	@ (800473c <HAL_DMA_Start_IT+0x4b4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d022      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6a      	ldr	r2, [pc, #424]	@ (8004740 <HAL_DMA_Start_IT+0x4b8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d01d      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a68      	ldr	r2, [pc, #416]	@ (8004744 <HAL_DMA_Start_IT+0x4bc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a67      	ldr	r2, [pc, #412]	@ (8004748 <HAL_DMA_Start_IT+0x4c0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d013      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a65      	ldr	r2, [pc, #404]	@ (800474c <HAL_DMA_Start_IT+0x4c4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a64      	ldr	r2, [pc, #400]	@ (8004750 <HAL_DMA_Start_IT+0x4c8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a62      	ldr	r2, [pc, #392]	@ (8004754 <HAL_DMA_Start_IT+0x4cc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_DMA_Start_IT+0x350>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a61      	ldr	r2, [pc, #388]	@ (8004758 <HAL_DMA_Start_IT+0x4d0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d101      	bne.n	80045dc <HAL_DMA_Start_IT+0x354>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <HAL_DMA_Start_IT+0x356>
 80045dc:	2300      	movs	r3, #0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d01a      	beq.n	8004618 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004616:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a37      	ldr	r2, [pc, #220]	@ (80046fc <HAL_DMA_Start_IT+0x474>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d04a      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a36      	ldr	r2, [pc, #216]	@ (8004700 <HAL_DMA_Start_IT+0x478>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d045      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a34      	ldr	r2, [pc, #208]	@ (8004704 <HAL_DMA_Start_IT+0x47c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d040      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a33      	ldr	r2, [pc, #204]	@ (8004708 <HAL_DMA_Start_IT+0x480>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d03b      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a31      	ldr	r2, [pc, #196]	@ (800470c <HAL_DMA_Start_IT+0x484>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d036      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a30      	ldr	r2, [pc, #192]	@ (8004710 <HAL_DMA_Start_IT+0x488>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d031      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2e      	ldr	r2, [pc, #184]	@ (8004714 <HAL_DMA_Start_IT+0x48c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d02c      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a2d      	ldr	r2, [pc, #180]	@ (8004718 <HAL_DMA_Start_IT+0x490>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d027      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a2b      	ldr	r2, [pc, #172]	@ (800471c <HAL_DMA_Start_IT+0x494>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d022      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a2a      	ldr	r2, [pc, #168]	@ (8004720 <HAL_DMA_Start_IT+0x498>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d01d      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a28      	ldr	r2, [pc, #160]	@ (8004724 <HAL_DMA_Start_IT+0x49c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d018      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a27      	ldr	r2, [pc, #156]	@ (8004728 <HAL_DMA_Start_IT+0x4a0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a25      	ldr	r2, [pc, #148]	@ (800472c <HAL_DMA_Start_IT+0x4a4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00e      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a24      	ldr	r2, [pc, #144]	@ (8004730 <HAL_DMA_Start_IT+0x4a8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a22      	ldr	r2, [pc, #136]	@ (8004734 <HAL_DMA_Start_IT+0x4ac>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_DMA_Start_IT+0x430>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a21      	ldr	r2, [pc, #132]	@ (8004738 <HAL_DMA_Start_IT+0x4b0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <HAL_DMA_Start_IT+0x442>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e012      	b.n	80046f0 <HAL_DMA_Start_IT+0x468>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e009      	b.n	80046f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
 800473c:	58025408 	.word	0x58025408
 8004740:	5802541c 	.word	0x5802541c
 8004744:	58025430 	.word	0x58025430
 8004748:	58025444 	.word	0x58025444
 800474c:	58025458 	.word	0x58025458
 8004750:	5802546c 	.word	0x5802546c
 8004754:	58025480 	.word	0x58025480
 8004758:	58025494 	.word	0x58025494

0800475c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	@ 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004768:	4b67      	ldr	r3, [pc, #412]	@ (8004908 <HAL_DMA_IRQHandler+0x1ac>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a67      	ldr	r2, [pc, #412]	@ (800490c <HAL_DMA_IRQHandler+0x1b0>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	0a9b      	lsrs	r3, r3, #10
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004780:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5f      	ldr	r2, [pc, #380]	@ (8004910 <HAL_DMA_IRQHandler+0x1b4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d04a      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5d      	ldr	r2, [pc, #372]	@ (8004914 <HAL_DMA_IRQHandler+0x1b8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d045      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a5c      	ldr	r2, [pc, #368]	@ (8004918 <HAL_DMA_IRQHandler+0x1bc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d040      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5a      	ldr	r2, [pc, #360]	@ (800491c <HAL_DMA_IRQHandler+0x1c0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d03b      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a59      	ldr	r2, [pc, #356]	@ (8004920 <HAL_DMA_IRQHandler+0x1c4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d036      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a57      	ldr	r2, [pc, #348]	@ (8004924 <HAL_DMA_IRQHandler+0x1c8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d031      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a56      	ldr	r2, [pc, #344]	@ (8004928 <HAL_DMA_IRQHandler+0x1cc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d02c      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a54      	ldr	r2, [pc, #336]	@ (800492c <HAL_DMA_IRQHandler+0x1d0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d027      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a53      	ldr	r2, [pc, #332]	@ (8004930 <HAL_DMA_IRQHandler+0x1d4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d022      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a51      	ldr	r2, [pc, #324]	@ (8004934 <HAL_DMA_IRQHandler+0x1d8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01d      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a50      	ldr	r2, [pc, #320]	@ (8004938 <HAL_DMA_IRQHandler+0x1dc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d018      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a4e      	ldr	r2, [pc, #312]	@ (800493c <HAL_DMA_IRQHandler+0x1e0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a4d      	ldr	r2, [pc, #308]	@ (8004940 <HAL_DMA_IRQHandler+0x1e4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00e      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a4b      	ldr	r2, [pc, #300]	@ (8004944 <HAL_DMA_IRQHandler+0x1e8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a4a      	ldr	r2, [pc, #296]	@ (8004948 <HAL_DMA_IRQHandler+0x1ec>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <HAL_DMA_IRQHandler+0xd2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a48      	ldr	r2, [pc, #288]	@ (800494c <HAL_DMA_IRQHandler+0x1f0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <HAL_DMA_IRQHandler+0xd6>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_DMA_IRQHandler+0xd8>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 842b 	beq.w	8005090 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2208      	movs	r2, #8
 8004844:	409a      	lsls	r2, r3
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80a2 	beq.w	8004994 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2e      	ldr	r2, [pc, #184]	@ (8004910 <HAL_DMA_IRQHandler+0x1b4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d04a      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2d      	ldr	r2, [pc, #180]	@ (8004914 <HAL_DMA_IRQHandler+0x1b8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d045      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2b      	ldr	r2, [pc, #172]	@ (8004918 <HAL_DMA_IRQHandler+0x1bc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d040      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2a      	ldr	r2, [pc, #168]	@ (800491c <HAL_DMA_IRQHandler+0x1c0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d03b      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a28      	ldr	r2, [pc, #160]	@ (8004920 <HAL_DMA_IRQHandler+0x1c4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d036      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a27      	ldr	r2, [pc, #156]	@ (8004924 <HAL_DMA_IRQHandler+0x1c8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d031      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a25      	ldr	r2, [pc, #148]	@ (8004928 <HAL_DMA_IRQHandler+0x1cc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02c      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a24      	ldr	r2, [pc, #144]	@ (800492c <HAL_DMA_IRQHandler+0x1d0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d027      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a22      	ldr	r2, [pc, #136]	@ (8004930 <HAL_DMA_IRQHandler+0x1d4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a21      	ldr	r2, [pc, #132]	@ (8004934 <HAL_DMA_IRQHandler+0x1d8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d01d      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004938 <HAL_DMA_IRQHandler+0x1dc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1e      	ldr	r2, [pc, #120]	@ (800493c <HAL_DMA_IRQHandler+0x1e0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <HAL_DMA_IRQHandler+0x1e4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004944 <HAL_DMA_IRQHandler+0x1e8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a19      	ldr	r2, [pc, #100]	@ (8004948 <HAL_DMA_IRQHandler+0x1ec>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x194>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a18      	ldr	r2, [pc, #96]	@ (800494c <HAL_DMA_IRQHandler+0x1f0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d12f      	bne.n	8004950 <HAL_DMA_IRQHandler+0x1f4>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf14      	ite	ne
 80048fe:	2301      	movne	r3, #1
 8004900:	2300      	moveq	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e02e      	b.n	8004964 <HAL_DMA_IRQHandler+0x208>
 8004906:	bf00      	nop
 8004908:	24000004 	.word	0x24000004
 800490c:	1b4e81b5 	.word	0x1b4e81b5
 8004910:	40020010 	.word	0x40020010
 8004914:	40020028 	.word	0x40020028
 8004918:	40020040 	.word	0x40020040
 800491c:	40020058 	.word	0x40020058
 8004920:	40020070 	.word	0x40020070
 8004924:	40020088 	.word	0x40020088
 8004928:	400200a0 	.word	0x400200a0
 800492c:	400200b8 	.word	0x400200b8
 8004930:	40020410 	.word	0x40020410
 8004934:	40020428 	.word	0x40020428
 8004938:	40020440 	.word	0x40020440
 800493c:	40020458 	.word	0x40020458
 8004940:	40020470 	.word	0x40020470
 8004944:	40020488 	.word	0x40020488
 8004948:	400204a0 	.word	0x400204a0
 800494c:	400204b8 	.word	0x400204b8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d015      	beq.n	8004994 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0204 	bic.w	r2, r2, #4
 8004976:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2208      	movs	r2, #8
 8004982:	409a      	lsls	r2, r3
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d06e      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a69      	ldr	r2, [pc, #420]	@ (8004b54 <HAL_DMA_IRQHandler+0x3f8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d04a      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a67      	ldr	r2, [pc, #412]	@ (8004b58 <HAL_DMA_IRQHandler+0x3fc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d045      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a66      	ldr	r2, [pc, #408]	@ (8004b5c <HAL_DMA_IRQHandler+0x400>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d040      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a64      	ldr	r2, [pc, #400]	@ (8004b60 <HAL_DMA_IRQHandler+0x404>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d03b      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a63      	ldr	r2, [pc, #396]	@ (8004b64 <HAL_DMA_IRQHandler+0x408>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d036      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a61      	ldr	r2, [pc, #388]	@ (8004b68 <HAL_DMA_IRQHandler+0x40c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d031      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a60      	ldr	r2, [pc, #384]	@ (8004b6c <HAL_DMA_IRQHandler+0x410>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d02c      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004b70 <HAL_DMA_IRQHandler+0x414>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d027      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a5d      	ldr	r2, [pc, #372]	@ (8004b74 <HAL_DMA_IRQHandler+0x418>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d022      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a5b      	ldr	r2, [pc, #364]	@ (8004b78 <HAL_DMA_IRQHandler+0x41c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01d      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a5a      	ldr	r2, [pc, #360]	@ (8004b7c <HAL_DMA_IRQHandler+0x420>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d018      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	@ (8004b80 <HAL_DMA_IRQHandler+0x424>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a57      	ldr	r2, [pc, #348]	@ (8004b84 <HAL_DMA_IRQHandler+0x428>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00e      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a55      	ldr	r2, [pc, #340]	@ (8004b88 <HAL_DMA_IRQHandler+0x42c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a54      	ldr	r2, [pc, #336]	@ (8004b8c <HAL_DMA_IRQHandler+0x430>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x2ee>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a52      	ldr	r2, [pc, #328]	@ (8004b90 <HAL_DMA_IRQHandler+0x434>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10a      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x304>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e003      	b.n	8004a68 <HAL_DMA_IRQHandler+0x30c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2201      	movs	r2, #1
 8004a76:	409a      	lsls	r2, r3
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a80:	f043 0202 	orr.w	r2, r3, #2
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2204      	movs	r2, #4
 8004a92:	409a      	lsls	r2, r3
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 808f 	beq.w	8004bbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b54 <HAL_DMA_IRQHandler+0x3f8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d04a      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <HAL_DMA_IRQHandler+0x3fc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d045      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a29      	ldr	r2, [pc, #164]	@ (8004b5c <HAL_DMA_IRQHandler+0x400>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d040      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a27      	ldr	r2, [pc, #156]	@ (8004b60 <HAL_DMA_IRQHandler+0x404>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d03b      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a26      	ldr	r2, [pc, #152]	@ (8004b64 <HAL_DMA_IRQHandler+0x408>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d036      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a24      	ldr	r2, [pc, #144]	@ (8004b68 <HAL_DMA_IRQHandler+0x40c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d031      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a23      	ldr	r2, [pc, #140]	@ (8004b6c <HAL_DMA_IRQHandler+0x410>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d02c      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a21      	ldr	r2, [pc, #132]	@ (8004b70 <HAL_DMA_IRQHandler+0x414>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d027      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a20      	ldr	r2, [pc, #128]	@ (8004b74 <HAL_DMA_IRQHandler+0x418>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b78 <HAL_DMA_IRQHandler+0x41c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01d      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1d      	ldr	r2, [pc, #116]	@ (8004b7c <HAL_DMA_IRQHandler+0x420>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <HAL_DMA_IRQHandler+0x424>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <HAL_DMA_IRQHandler+0x428>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a18      	ldr	r2, [pc, #96]	@ (8004b88 <HAL_DMA_IRQHandler+0x42c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a17      	ldr	r2, [pc, #92]	@ (8004b8c <HAL_DMA_IRQHandler+0x430>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x3e2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a15      	ldr	r2, [pc, #84]	@ (8004b90 <HAL_DMA_IRQHandler+0x434>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d12a      	bne.n	8004b94 <HAL_DMA_IRQHandler+0x438>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e023      	b.n	8004b9c <HAL_DMA_IRQHandler+0x440>
 8004b54:	40020010 	.word	0x40020010
 8004b58:	40020028 	.word	0x40020028
 8004b5c:	40020040 	.word	0x40020040
 8004b60:	40020058 	.word	0x40020058
 8004b64:	40020070 	.word	0x40020070
 8004b68:	40020088 	.word	0x40020088
 8004b6c:	400200a0 	.word	0x400200a0
 8004b70:	400200b8 	.word	0x400200b8
 8004b74:	40020410 	.word	0x40020410
 8004b78:	40020428 	.word	0x40020428
 8004b7c:	40020440 	.word	0x40020440
 8004b80:	40020458 	.word	0x40020458
 8004b84:	40020470 	.word	0x40020470
 8004b88:	40020488 	.word	0x40020488
 8004b8c:	400204a0 	.word	0x400204a0
 8004b90:	400204b8 	.word	0x400204b8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2204      	movs	r2, #4
 8004baa:	409a      	lsls	r2, r3
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb4:	f043 0204 	orr.w	r2, r3, #4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80a6 	beq.w	8004d1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a85      	ldr	r2, [pc, #532]	@ (8004dec <HAL_DMA_IRQHandler+0x690>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d04a      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a83      	ldr	r2, [pc, #524]	@ (8004df0 <HAL_DMA_IRQHandler+0x694>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d045      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a82      	ldr	r2, [pc, #520]	@ (8004df4 <HAL_DMA_IRQHandler+0x698>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d040      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a80      	ldr	r2, [pc, #512]	@ (8004df8 <HAL_DMA_IRQHandler+0x69c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d03b      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8004dfc <HAL_DMA_IRQHandler+0x6a0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d036      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a7d      	ldr	r2, [pc, #500]	@ (8004e00 <HAL_DMA_IRQHandler+0x6a4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d031      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7c      	ldr	r2, [pc, #496]	@ (8004e04 <HAL_DMA_IRQHandler+0x6a8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d02c      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8004e08 <HAL_DMA_IRQHandler+0x6ac>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d027      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a79      	ldr	r2, [pc, #484]	@ (8004e0c <HAL_DMA_IRQHandler+0x6b0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d022      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a77      	ldr	r2, [pc, #476]	@ (8004e10 <HAL_DMA_IRQHandler+0x6b4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d01d      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a76      	ldr	r2, [pc, #472]	@ (8004e14 <HAL_DMA_IRQHandler+0x6b8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d018      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a74      	ldr	r2, [pc, #464]	@ (8004e18 <HAL_DMA_IRQHandler+0x6bc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a73      	ldr	r2, [pc, #460]	@ (8004e1c <HAL_DMA_IRQHandler+0x6c0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a71      	ldr	r2, [pc, #452]	@ (8004e20 <HAL_DMA_IRQHandler+0x6c4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a70      	ldr	r2, [pc, #448]	@ (8004e24 <HAL_DMA_IRQHandler+0x6c8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x516>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e28 <HAL_DMA_IRQHandler+0x6cc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10a      	bne.n	8004c88 <HAL_DMA_IRQHandler+0x52c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e009      	b.n	8004c9c <HAL_DMA_IRQHandler+0x540>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bf14      	ite	ne
 8004c96:	2301      	movne	r3, #1
 8004c98:	2300      	moveq	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d03e      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	2210      	movs	r2, #16
 8004caa:	409a      	lsls	r2, r3
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d024      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	e01f      	b.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01b      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
 8004cee:	e016      	b.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d107      	bne.n	8004d0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0208 	bic.w	r2, r2, #8
 8004d0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2220      	movs	r2, #32
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8110 	beq.w	8004f54 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2c      	ldr	r2, [pc, #176]	@ (8004dec <HAL_DMA_IRQHandler+0x690>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d04a      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2b      	ldr	r2, [pc, #172]	@ (8004df0 <HAL_DMA_IRQHandler+0x694>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d045      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a29      	ldr	r2, [pc, #164]	@ (8004df4 <HAL_DMA_IRQHandler+0x698>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d040      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a28      	ldr	r2, [pc, #160]	@ (8004df8 <HAL_DMA_IRQHandler+0x69c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d03b      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a26      	ldr	r2, [pc, #152]	@ (8004dfc <HAL_DMA_IRQHandler+0x6a0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d036      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a25      	ldr	r2, [pc, #148]	@ (8004e00 <HAL_DMA_IRQHandler+0x6a4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d031      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a23      	ldr	r2, [pc, #140]	@ (8004e04 <HAL_DMA_IRQHandler+0x6a8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d02c      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <HAL_DMA_IRQHandler+0x6ac>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d027      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a20      	ldr	r2, [pc, #128]	@ (8004e0c <HAL_DMA_IRQHandler+0x6b0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d022      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1f      	ldr	r2, [pc, #124]	@ (8004e10 <HAL_DMA_IRQHandler+0x6b4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d01d      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e14 <HAL_DMA_IRQHandler+0x6b8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d018      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <HAL_DMA_IRQHandler+0x6bc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d013      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e1c <HAL_DMA_IRQHandler+0x6c0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00e      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a19      	ldr	r2, [pc, #100]	@ (8004e20 <HAL_DMA_IRQHandler+0x6c4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d009      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	@ (8004e24 <HAL_DMA_IRQHandler+0x6c8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x678>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a16      	ldr	r2, [pc, #88]	@ (8004e28 <HAL_DMA_IRQHandler+0x6cc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d12b      	bne.n	8004e2c <HAL_DMA_IRQHandler+0x6d0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e02a      	b.n	8004e40 <HAL_DMA_IRQHandler+0x6e4>
 8004dea:	bf00      	nop
 8004dec:	40020010 	.word	0x40020010
 8004df0:	40020028 	.word	0x40020028
 8004df4:	40020040 	.word	0x40020040
 8004df8:	40020058 	.word	0x40020058
 8004dfc:	40020070 	.word	0x40020070
 8004e00:	40020088 	.word	0x40020088
 8004e04:	400200a0 	.word	0x400200a0
 8004e08:	400200b8 	.word	0x400200b8
 8004e0c:	40020410 	.word	0x40020410
 8004e10:	40020428 	.word	0x40020428
 8004e14:	40020440 	.word	0x40020440
 8004e18:	40020458 	.word	0x40020458
 8004e1c:	40020470 	.word	0x40020470
 8004e20:	40020488 	.word	0x40020488
 8004e24:	400204a0 	.word	0x400204a0
 8004e28:	400204b8 	.word	0x400204b8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8087 	beq.w	8004f54 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	2220      	movs	r2, #32
 8004e50:	409a      	lsls	r2, r3
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d139      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0216 	bic.w	r2, r2, #22
 8004e70:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e80:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <HAL_DMA_IRQHandler+0x736>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0208 	bic.w	r2, r2, #8
 8004ea0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	223f      	movs	r2, #63	@ 0x3f
 8004eac:	409a      	lsls	r2, r3
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 834a 	beq.w	8005560 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
          }
          return;
 8004ed4:	e344      	b.n	8005560 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d018      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d108      	bne.n	8004f04 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d02c      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
 8004f02:	e027      	b.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d023      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
 8004f14:	e01e      	b.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10f      	bne.n	8004f44 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0210 	bic.w	r2, r2, #16
 8004f32:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8306 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8088 	beq.w	800507c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a7a      	ldr	r2, [pc, #488]	@ (8005164 <HAL_DMA_IRQHandler+0xa08>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d04a      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a79      	ldr	r2, [pc, #484]	@ (8005168 <HAL_DMA_IRQHandler+0xa0c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d045      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a77      	ldr	r2, [pc, #476]	@ (800516c <HAL_DMA_IRQHandler+0xa10>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d040      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a76      	ldr	r2, [pc, #472]	@ (8005170 <HAL_DMA_IRQHandler+0xa14>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d03b      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a74      	ldr	r2, [pc, #464]	@ (8005174 <HAL_DMA_IRQHandler+0xa18>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d036      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a73      	ldr	r2, [pc, #460]	@ (8005178 <HAL_DMA_IRQHandler+0xa1c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d031      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a71      	ldr	r2, [pc, #452]	@ (800517c <HAL_DMA_IRQHandler+0xa20>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d02c      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a70      	ldr	r2, [pc, #448]	@ (8005180 <HAL_DMA_IRQHandler+0xa24>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d027      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a6e      	ldr	r2, [pc, #440]	@ (8005184 <HAL_DMA_IRQHandler+0xa28>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d022      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a6d      	ldr	r2, [pc, #436]	@ (8005188 <HAL_DMA_IRQHandler+0xa2c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d01d      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a6b      	ldr	r2, [pc, #428]	@ (800518c <HAL_DMA_IRQHandler+0xa30>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d018      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a6a      	ldr	r2, [pc, #424]	@ (8005190 <HAL_DMA_IRQHandler+0xa34>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d013      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a68      	ldr	r2, [pc, #416]	@ (8005194 <HAL_DMA_IRQHandler+0xa38>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00e      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a67      	ldr	r2, [pc, #412]	@ (8005198 <HAL_DMA_IRQHandler+0xa3c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d009      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a65      	ldr	r2, [pc, #404]	@ (800519c <HAL_DMA_IRQHandler+0xa40>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_DMA_IRQHandler+0x8b8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a64      	ldr	r2, [pc, #400]	@ (80051a0 <HAL_DMA_IRQHandler+0xa44>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <HAL_DMA_IRQHandler+0x8ca>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e007      	b.n	8005036 <HAL_DMA_IRQHandler+0x8da>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3301      	adds	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503e:	429a      	cmp	r2, r3
 8005040:	d307      	bcc.n	8005052 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f2      	bne.n	8005036 <HAL_DMA_IRQHandler+0x8da>
 8005050:	e000      	b.n	8005054 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005052:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2203      	movs	r2, #3
 8005066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800506a:	e003      	b.n	8005074 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8272 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
 800508e:	e26c      	b.n	800556a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a43      	ldr	r2, [pc, #268]	@ (80051a4 <HAL_DMA_IRQHandler+0xa48>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a42      	ldr	r2, [pc, #264]	@ (80051a8 <HAL_DMA_IRQHandler+0xa4c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d01d      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a40      	ldr	r2, [pc, #256]	@ (80051ac <HAL_DMA_IRQHandler+0xa50>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3f      	ldr	r2, [pc, #252]	@ (80051b0 <HAL_DMA_IRQHandler+0xa54>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3d      	ldr	r2, [pc, #244]	@ (80051b4 <HAL_DMA_IRQHandler+0xa58>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a3c      	ldr	r2, [pc, #240]	@ (80051b8 <HAL_DMA_IRQHandler+0xa5c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a3a      	ldr	r2, [pc, #232]	@ (80051bc <HAL_DMA_IRQHandler+0xa60>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x984>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a39      	ldr	r2, [pc, #228]	@ (80051c0 <HAL_DMA_IRQHandler+0xa64>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d101      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x988>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <HAL_DMA_IRQHandler+0x98a>
 80050e4:	2300      	movs	r3, #0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 823f 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2204      	movs	r2, #4
 80050fe:	409a      	lsls	r2, r3
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80cd 	beq.w	80052a4 <HAL_DMA_IRQHandler+0xb48>
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80c7 	beq.w	80052a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2204      	movs	r2, #4
 8005120:	409a      	lsls	r2, r3
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d049      	beq.n	80051c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 8210 	beq.w	8005564 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800514c:	e20a      	b.n	8005564 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8206 	beq.w	8005564 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005160:	e200      	b.n	8005564 <HAL_DMA_IRQHandler+0xe08>
 8005162:	bf00      	nop
 8005164:	40020010 	.word	0x40020010
 8005168:	40020028 	.word	0x40020028
 800516c:	40020040 	.word	0x40020040
 8005170:	40020058 	.word	0x40020058
 8005174:	40020070 	.word	0x40020070
 8005178:	40020088 	.word	0x40020088
 800517c:	400200a0 	.word	0x400200a0
 8005180:	400200b8 	.word	0x400200b8
 8005184:	40020410 	.word	0x40020410
 8005188:	40020428 	.word	0x40020428
 800518c:	40020440 	.word	0x40020440
 8005190:	40020458 	.word	0x40020458
 8005194:	40020470 	.word	0x40020470
 8005198:	40020488 	.word	0x40020488
 800519c:	400204a0 	.word	0x400204a0
 80051a0:	400204b8 	.word	0x400204b8
 80051a4:	58025408 	.word	0x58025408
 80051a8:	5802541c 	.word	0x5802541c
 80051ac:	58025430 	.word	0x58025430
 80051b0:	58025444 	.word	0x58025444
 80051b4:	58025458 	.word	0x58025458
 80051b8:	5802546c 	.word	0x5802546c
 80051bc:	58025480 	.word	0x58025480
 80051c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d160      	bne.n	8005290 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a7f      	ldr	r2, [pc, #508]	@ (80053d0 <HAL_DMA_IRQHandler+0xc74>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d04a      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a7d      	ldr	r2, [pc, #500]	@ (80053d4 <HAL_DMA_IRQHandler+0xc78>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d045      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a7c      	ldr	r2, [pc, #496]	@ (80053d8 <HAL_DMA_IRQHandler+0xc7c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d040      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a7a      	ldr	r2, [pc, #488]	@ (80053dc <HAL_DMA_IRQHandler+0xc80>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d03b      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a79      	ldr	r2, [pc, #484]	@ (80053e0 <HAL_DMA_IRQHandler+0xc84>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d036      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a77      	ldr	r2, [pc, #476]	@ (80053e4 <HAL_DMA_IRQHandler+0xc88>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d031      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a76      	ldr	r2, [pc, #472]	@ (80053e8 <HAL_DMA_IRQHandler+0xc8c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d02c      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a74      	ldr	r2, [pc, #464]	@ (80053ec <HAL_DMA_IRQHandler+0xc90>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d027      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a73      	ldr	r2, [pc, #460]	@ (80053f0 <HAL_DMA_IRQHandler+0xc94>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d022      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a71      	ldr	r2, [pc, #452]	@ (80053f4 <HAL_DMA_IRQHandler+0xc98>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01d      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a70      	ldr	r2, [pc, #448]	@ (80053f8 <HAL_DMA_IRQHandler+0xc9c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a6e      	ldr	r2, [pc, #440]	@ (80053fc <HAL_DMA_IRQHandler+0xca0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6d      	ldr	r2, [pc, #436]	@ (8005400 <HAL_DMA_IRQHandler+0xca4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a6b      	ldr	r2, [pc, #428]	@ (8005404 <HAL_DMA_IRQHandler+0xca8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a6a      	ldr	r2, [pc, #424]	@ (8005408 <HAL_DMA_IRQHandler+0xcac>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_DMA_IRQHandler+0xb12>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a68      	ldr	r2, [pc, #416]	@ (800540c <HAL_DMA_IRQHandler+0xcb0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <HAL_DMA_IRQHandler+0xb24>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0208 	bic.w	r2, r2, #8
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e007      	b.n	8005290 <HAL_DMA_IRQHandler+0xb34>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0204 	bic.w	r2, r2, #4
 800528e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8165 	beq.w	8005564 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052a2:	e15f      	b.n	8005564 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	2202      	movs	r2, #2
 80052ae:	409a      	lsls	r2, r3
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 80c5 	beq.w	8005444 <HAL_DMA_IRQHandler+0xce8>
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80bf 	beq.w	8005444 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2202      	movs	r2, #2
 80052d0:	409a      	lsls	r2, r3
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d018      	beq.n	8005312 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 813a 	beq.w	8005568 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052fc:	e134      	b.n	8005568 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 8130 	beq.w	8005568 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005310:	e12a      	b.n	8005568 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 8089 	bne.w	8005430 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2b      	ldr	r2, [pc, #172]	@ (80053d0 <HAL_DMA_IRQHandler+0xc74>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d04a      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a29      	ldr	r2, [pc, #164]	@ (80053d4 <HAL_DMA_IRQHandler+0xc78>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d045      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a28      	ldr	r2, [pc, #160]	@ (80053d8 <HAL_DMA_IRQHandler+0xc7c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d040      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a26      	ldr	r2, [pc, #152]	@ (80053dc <HAL_DMA_IRQHandler+0xc80>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d03b      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a25      	ldr	r2, [pc, #148]	@ (80053e0 <HAL_DMA_IRQHandler+0xc84>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d036      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a23      	ldr	r2, [pc, #140]	@ (80053e4 <HAL_DMA_IRQHandler+0xc88>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d031      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <HAL_DMA_IRQHandler+0xc8c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d02c      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a20      	ldr	r2, [pc, #128]	@ (80053ec <HAL_DMA_IRQHandler+0xc90>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d027      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <HAL_DMA_IRQHandler+0xc94>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1d      	ldr	r2, [pc, #116]	@ (80053f4 <HAL_DMA_IRQHandler+0xc98>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01d      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1c      	ldr	r2, [pc, #112]	@ (80053f8 <HAL_DMA_IRQHandler+0xc9c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1a      	ldr	r2, [pc, #104]	@ (80053fc <HAL_DMA_IRQHandler+0xca0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a19      	ldr	r2, [pc, #100]	@ (8005400 <HAL_DMA_IRQHandler+0xca4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <HAL_DMA_IRQHandler+0xca8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <HAL_DMA_IRQHandler+0xcac>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_DMA_IRQHandler+0xc62>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a14      	ldr	r2, [pc, #80]	@ (800540c <HAL_DMA_IRQHandler+0xcb0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d128      	bne.n	8005410 <HAL_DMA_IRQHandler+0xcb4>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0214 	bic.w	r2, r2, #20
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e027      	b.n	8005420 <HAL_DMA_IRQHandler+0xcc4>
 80053d0:	40020010 	.word	0x40020010
 80053d4:	40020028 	.word	0x40020028
 80053d8:	40020040 	.word	0x40020040
 80053dc:	40020058 	.word	0x40020058
 80053e0:	40020070 	.word	0x40020070
 80053e4:	40020088 	.word	0x40020088
 80053e8:	400200a0 	.word	0x400200a0
 80053ec:	400200b8 	.word	0x400200b8
 80053f0:	40020410 	.word	0x40020410
 80053f4:	40020428 	.word	0x40020428
 80053f8:	40020440 	.word	0x40020440
 80053fc:	40020458 	.word	0x40020458
 8005400:	40020470 	.word	0x40020470
 8005404:	40020488 	.word	0x40020488
 8005408:	400204a0 	.word	0x400204a0
 800540c:	400204b8 	.word	0x400204b8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 020a 	bic.w	r2, r2, #10
 800541e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8097 	beq.w	8005568 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005442:	e091      	b.n	8005568 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2208      	movs	r2, #8
 800544e:	409a      	lsls	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8088 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8082 	beq.w	800556a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a41      	ldr	r2, [pc, #260]	@ (8005570 <HAL_DMA_IRQHandler+0xe14>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d04a      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a3f      	ldr	r2, [pc, #252]	@ (8005574 <HAL_DMA_IRQHandler+0xe18>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d045      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a3e      	ldr	r2, [pc, #248]	@ (8005578 <HAL_DMA_IRQHandler+0xe1c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d040      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3c      	ldr	r2, [pc, #240]	@ (800557c <HAL_DMA_IRQHandler+0xe20>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d03b      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a3b      	ldr	r2, [pc, #236]	@ (8005580 <HAL_DMA_IRQHandler+0xe24>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d036      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a39      	ldr	r2, [pc, #228]	@ (8005584 <HAL_DMA_IRQHandler+0xe28>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d031      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a38      	ldr	r2, [pc, #224]	@ (8005588 <HAL_DMA_IRQHandler+0xe2c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d02c      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a36      	ldr	r2, [pc, #216]	@ (800558c <HAL_DMA_IRQHandler+0xe30>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d027      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a35      	ldr	r2, [pc, #212]	@ (8005590 <HAL_DMA_IRQHandler+0xe34>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d022      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <HAL_DMA_IRQHandler+0xe38>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01d      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a32      	ldr	r2, [pc, #200]	@ (8005598 <HAL_DMA_IRQHandler+0xe3c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d018      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a30      	ldr	r2, [pc, #192]	@ (800559c <HAL_DMA_IRQHandler+0xe40>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a2f      	ldr	r2, [pc, #188]	@ (80055a0 <HAL_DMA_IRQHandler+0xe44>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2d      	ldr	r2, [pc, #180]	@ (80055a4 <HAL_DMA_IRQHandler+0xe48>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a2c      	ldr	r2, [pc, #176]	@ (80055a8 <HAL_DMA_IRQHandler+0xe4c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <HAL_DMA_IRQHandler+0xdaa>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2a      	ldr	r2, [pc, #168]	@ (80055ac <HAL_DMA_IRQHandler+0xe50>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d108      	bne.n	8005518 <HAL_DMA_IRQHandler+0xdbc>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 021c 	bic.w	r2, r2, #28
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e007      	b.n	8005528 <HAL_DMA_IRQHandler+0xdcc>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 020e 	bic.w	r2, r2, #14
 8005526:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	2201      	movs	r2, #1
 8005532:	409a      	lsls	r2, r3
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
 800555e:	e004      	b.n	800556a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005560:	bf00      	nop
 8005562:	e002      	b.n	800556a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005564:	bf00      	nop
 8005566:	e000      	b.n	800556a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005568:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800556a:	3728      	adds	r7, #40	@ 0x28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40020010 	.word	0x40020010
 8005574:	40020028 	.word	0x40020028
 8005578:	40020040 	.word	0x40020040
 800557c:	40020058 	.word	0x40020058
 8005580:	40020070 	.word	0x40020070
 8005584:	40020088 	.word	0x40020088
 8005588:	400200a0 	.word	0x400200a0
 800558c:	400200b8 	.word	0x400200b8
 8005590:	40020410 	.word	0x40020410
 8005594:	40020428 	.word	0x40020428
 8005598:	40020440 	.word	0x40020440
 800559c:	40020458 	.word	0x40020458
 80055a0:	40020470 	.word	0x40020470
 80055a4:	40020488 	.word	0x40020488
 80055a8:	400204a0 	.word	0x400204a0
 80055ac:	400204b8 	.word	0x400204b8

080055b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a7f      	ldr	r2, [pc, #508]	@ (80057cc <DMA_SetConfig+0x21c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d072      	beq.n	80056ba <DMA_SetConfig+0x10a>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a7d      	ldr	r2, [pc, #500]	@ (80057d0 <DMA_SetConfig+0x220>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d06d      	beq.n	80056ba <DMA_SetConfig+0x10a>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a7c      	ldr	r2, [pc, #496]	@ (80057d4 <DMA_SetConfig+0x224>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d068      	beq.n	80056ba <DMA_SetConfig+0x10a>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a7a      	ldr	r2, [pc, #488]	@ (80057d8 <DMA_SetConfig+0x228>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d063      	beq.n	80056ba <DMA_SetConfig+0x10a>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a79      	ldr	r2, [pc, #484]	@ (80057dc <DMA_SetConfig+0x22c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d05e      	beq.n	80056ba <DMA_SetConfig+0x10a>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a77      	ldr	r2, [pc, #476]	@ (80057e0 <DMA_SetConfig+0x230>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d059      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a76      	ldr	r2, [pc, #472]	@ (80057e4 <DMA_SetConfig+0x234>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d054      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a74      	ldr	r2, [pc, #464]	@ (80057e8 <DMA_SetConfig+0x238>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d04f      	beq.n	80056ba <DMA_SetConfig+0x10a>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a73      	ldr	r2, [pc, #460]	@ (80057ec <DMA_SetConfig+0x23c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d04a      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a71      	ldr	r2, [pc, #452]	@ (80057f0 <DMA_SetConfig+0x240>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d045      	beq.n	80056ba <DMA_SetConfig+0x10a>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a70      	ldr	r2, [pc, #448]	@ (80057f4 <DMA_SetConfig+0x244>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d040      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a6e      	ldr	r2, [pc, #440]	@ (80057f8 <DMA_SetConfig+0x248>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d03b      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a6d      	ldr	r2, [pc, #436]	@ (80057fc <DMA_SetConfig+0x24c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d036      	beq.n	80056ba <DMA_SetConfig+0x10a>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a6b      	ldr	r2, [pc, #428]	@ (8005800 <DMA_SetConfig+0x250>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d031      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a6a      	ldr	r2, [pc, #424]	@ (8005804 <DMA_SetConfig+0x254>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d02c      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a68      	ldr	r2, [pc, #416]	@ (8005808 <DMA_SetConfig+0x258>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d027      	beq.n	80056ba <DMA_SetConfig+0x10a>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a67      	ldr	r2, [pc, #412]	@ (800580c <DMA_SetConfig+0x25c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a65      	ldr	r2, [pc, #404]	@ (8005810 <DMA_SetConfig+0x260>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01d      	beq.n	80056ba <DMA_SetConfig+0x10a>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a64      	ldr	r2, [pc, #400]	@ (8005814 <DMA_SetConfig+0x264>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a62      	ldr	r2, [pc, #392]	@ (8005818 <DMA_SetConfig+0x268>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <DMA_SetConfig+0x10a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a61      	ldr	r2, [pc, #388]	@ (800581c <DMA_SetConfig+0x26c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <DMA_SetConfig+0x10a>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a5f      	ldr	r2, [pc, #380]	@ (8005820 <DMA_SetConfig+0x270>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <DMA_SetConfig+0x10a>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005824 <DMA_SetConfig+0x274>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <DMA_SetConfig+0x10a>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a5c      	ldr	r2, [pc, #368]	@ (8005828 <DMA_SetConfig+0x278>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <DMA_SetConfig+0x10e>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <DMA_SetConfig+0x110>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00d      	beq.n	80056e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d004      	beq.n	80056e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a39      	ldr	r2, [pc, #228]	@ (80057cc <DMA_SetConfig+0x21c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d04a      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a38      	ldr	r2, [pc, #224]	@ (80057d0 <DMA_SetConfig+0x220>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d045      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a36      	ldr	r2, [pc, #216]	@ (80057d4 <DMA_SetConfig+0x224>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d040      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a35      	ldr	r2, [pc, #212]	@ (80057d8 <DMA_SetConfig+0x228>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d03b      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a33      	ldr	r2, [pc, #204]	@ (80057dc <DMA_SetConfig+0x22c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d036      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a32      	ldr	r2, [pc, #200]	@ (80057e0 <DMA_SetConfig+0x230>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d031      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a30      	ldr	r2, [pc, #192]	@ (80057e4 <DMA_SetConfig+0x234>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d02c      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a2f      	ldr	r2, [pc, #188]	@ (80057e8 <DMA_SetConfig+0x238>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d027      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2d      	ldr	r2, [pc, #180]	@ (80057ec <DMA_SetConfig+0x23c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d022      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2c      	ldr	r2, [pc, #176]	@ (80057f0 <DMA_SetConfig+0x240>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d01d      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2a      	ldr	r2, [pc, #168]	@ (80057f4 <DMA_SetConfig+0x244>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a29      	ldr	r2, [pc, #164]	@ (80057f8 <DMA_SetConfig+0x248>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a27      	ldr	r2, [pc, #156]	@ (80057fc <DMA_SetConfig+0x24c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a26      	ldr	r2, [pc, #152]	@ (8005800 <DMA_SetConfig+0x250>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a24      	ldr	r2, [pc, #144]	@ (8005804 <DMA_SetConfig+0x254>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <DMA_SetConfig+0x1d0>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a23      	ldr	r2, [pc, #140]	@ (8005808 <DMA_SetConfig+0x258>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d101      	bne.n	8005784 <DMA_SetConfig+0x1d4>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <DMA_SetConfig+0x1d6>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d059      	beq.n	800583e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	223f      	movs	r2, #63	@ 0x3f
 8005794:	409a      	lsls	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b40      	cmp	r3, #64	@ 0x40
 80057b8:	d138      	bne.n	800582c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80057ca:	e086      	b.n	80058da <DMA_SetConfig+0x32a>
 80057cc:	40020010 	.word	0x40020010
 80057d0:	40020028 	.word	0x40020028
 80057d4:	40020040 	.word	0x40020040
 80057d8:	40020058 	.word	0x40020058
 80057dc:	40020070 	.word	0x40020070
 80057e0:	40020088 	.word	0x40020088
 80057e4:	400200a0 	.word	0x400200a0
 80057e8:	400200b8 	.word	0x400200b8
 80057ec:	40020410 	.word	0x40020410
 80057f0:	40020428 	.word	0x40020428
 80057f4:	40020440 	.word	0x40020440
 80057f8:	40020458 	.word	0x40020458
 80057fc:	40020470 	.word	0x40020470
 8005800:	40020488 	.word	0x40020488
 8005804:	400204a0 	.word	0x400204a0
 8005808:	400204b8 	.word	0x400204b8
 800580c:	58025408 	.word	0x58025408
 8005810:	5802541c 	.word	0x5802541c
 8005814:	58025430 	.word	0x58025430
 8005818:	58025444 	.word	0x58025444
 800581c:	58025458 	.word	0x58025458
 8005820:	5802546c 	.word	0x5802546c
 8005824:	58025480 	.word	0x58025480
 8005828:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	60da      	str	r2, [r3, #12]
}
 800583c:	e04d      	b.n	80058da <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a29      	ldr	r2, [pc, #164]	@ (80058e8 <DMA_SetConfig+0x338>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d022      	beq.n	800588e <DMA_SetConfig+0x2de>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a27      	ldr	r2, [pc, #156]	@ (80058ec <DMA_SetConfig+0x33c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01d      	beq.n	800588e <DMA_SetConfig+0x2de>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a26      	ldr	r2, [pc, #152]	@ (80058f0 <DMA_SetConfig+0x340>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d018      	beq.n	800588e <DMA_SetConfig+0x2de>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a24      	ldr	r2, [pc, #144]	@ (80058f4 <DMA_SetConfig+0x344>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <DMA_SetConfig+0x2de>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a23      	ldr	r2, [pc, #140]	@ (80058f8 <DMA_SetConfig+0x348>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <DMA_SetConfig+0x2de>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a21      	ldr	r2, [pc, #132]	@ (80058fc <DMA_SetConfig+0x34c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <DMA_SetConfig+0x2de>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a20      	ldr	r2, [pc, #128]	@ (8005900 <DMA_SetConfig+0x350>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <DMA_SetConfig+0x2de>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1e      	ldr	r2, [pc, #120]	@ (8005904 <DMA_SetConfig+0x354>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d101      	bne.n	8005892 <DMA_SetConfig+0x2e2>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <DMA_SetConfig+0x2e4>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d020      	beq.n	80058da <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	2201      	movs	r2, #1
 80058a2:	409a      	lsls	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b40      	cmp	r3, #64	@ 0x40
 80058b6:	d108      	bne.n	80058ca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	60da      	str	r2, [r3, #12]
}
 80058c8:	e007      	b.n	80058da <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	60da      	str	r2, [r3, #12]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	58025408 	.word	0x58025408
 80058ec:	5802541c 	.word	0x5802541c
 80058f0:	58025430 	.word	0x58025430
 80058f4:	58025444 	.word	0x58025444
 80058f8:	58025458 	.word	0x58025458
 80058fc:	5802546c 	.word	0x5802546c
 8005900:	58025480 	.word	0x58025480
 8005904:	58025494 	.word	0x58025494

08005908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a42      	ldr	r2, [pc, #264]	@ (8005a20 <DMA_CalcBaseAndBitshift+0x118>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d04a      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a41      	ldr	r2, [pc, #260]	@ (8005a24 <DMA_CalcBaseAndBitshift+0x11c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d045      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a3f      	ldr	r2, [pc, #252]	@ (8005a28 <DMA_CalcBaseAndBitshift+0x120>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d040      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a3e      	ldr	r2, [pc, #248]	@ (8005a2c <DMA_CalcBaseAndBitshift+0x124>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d03b      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a30 <DMA_CalcBaseAndBitshift+0x128>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d036      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a3b      	ldr	r2, [pc, #236]	@ (8005a34 <DMA_CalcBaseAndBitshift+0x12c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d031      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a39      	ldr	r2, [pc, #228]	@ (8005a38 <DMA_CalcBaseAndBitshift+0x130>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02c      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a38      	ldr	r2, [pc, #224]	@ (8005a3c <DMA_CalcBaseAndBitshift+0x134>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d027      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a36      	ldr	r2, [pc, #216]	@ (8005a40 <DMA_CalcBaseAndBitshift+0x138>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a35      	ldr	r2, [pc, #212]	@ (8005a44 <DMA_CalcBaseAndBitshift+0x13c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a33      	ldr	r2, [pc, #204]	@ (8005a48 <DMA_CalcBaseAndBitshift+0x140>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a32      	ldr	r2, [pc, #200]	@ (8005a4c <DMA_CalcBaseAndBitshift+0x144>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a30      	ldr	r2, [pc, #192]	@ (8005a50 <DMA_CalcBaseAndBitshift+0x148>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2f      	ldr	r2, [pc, #188]	@ (8005a54 <DMA_CalcBaseAndBitshift+0x14c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a58 <DMA_CalcBaseAndBitshift+0x150>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xa8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a2c      	ldr	r2, [pc, #176]	@ (8005a5c <DMA_CalcBaseAndBitshift+0x154>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d101      	bne.n	80059b4 <DMA_CalcBaseAndBitshift+0xac>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <DMA_CalcBaseAndBitshift+0xae>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d024      	beq.n	8005a04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	3b10      	subs	r3, #16
 80059c2:	4a27      	ldr	r2, [pc, #156]	@ (8005a60 <DMA_CalcBaseAndBitshift+0x158>)
 80059c4:	fba2 2303 	umull	r2, r3, r2, r3
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	4a24      	ldr	r2, [pc, #144]	@ (8005a64 <DMA_CalcBaseAndBitshift+0x15c>)
 80059d4:	5cd3      	ldrb	r3, [r2, r3]
 80059d6:	461a      	mov	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d908      	bls.n	80059f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005a68 <DMA_CalcBaseAndBitshift+0x160>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	1d1a      	adds	r2, r3, #4
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80059f2:	e00d      	b.n	8005a10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <DMA_CalcBaseAndBitshift+0x160>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a02:	e005      	b.n	8005a10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40020010 	.word	0x40020010
 8005a24:	40020028 	.word	0x40020028
 8005a28:	40020040 	.word	0x40020040
 8005a2c:	40020058 	.word	0x40020058
 8005a30:	40020070 	.word	0x40020070
 8005a34:	40020088 	.word	0x40020088
 8005a38:	400200a0 	.word	0x400200a0
 8005a3c:	400200b8 	.word	0x400200b8
 8005a40:	40020410 	.word	0x40020410
 8005a44:	40020428 	.word	0x40020428
 8005a48:	40020440 	.word	0x40020440
 8005a4c:	40020458 	.word	0x40020458
 8005a50:	40020470 	.word	0x40020470
 8005a54:	40020488 	.word	0x40020488
 8005a58:	400204a0 	.word	0x400204a0
 8005a5c:	400204b8 	.word	0x400204b8
 8005a60:	aaaaaaab 	.word	0xaaaaaaab
 8005a64:	080150e8 	.word	0x080150e8
 8005a68:	fffffc00 	.word	0xfffffc00

08005a6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d120      	bne.n	8005ac2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d858      	bhi.n	8005b3a <DMA_CheckFifoParam+0xce>
 8005a88:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <DMA_CheckFifoParam+0x24>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005ab3 	.word	0x08005ab3
 8005a98:	08005aa1 	.word	0x08005aa1
 8005a9c:	08005b3b 	.word	0x08005b3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d048      	beq.n	8005b3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ab0:	e045      	b.n	8005b3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005aba:	d142      	bne.n	8005b42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ac0:	e03f      	b.n	8005b42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aca:	d123      	bne.n	8005b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d838      	bhi.n	8005b46 <DMA_CheckFifoParam+0xda>
 8005ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8005adc <DMA_CheckFifoParam+0x70>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005af3 	.word	0x08005af3
 8005ae4:	08005aed 	.word	0x08005aed
 8005ae8:	08005b05 	.word	0x08005b05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
        break;
 8005af0:	e030      	b.n	8005b54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d025      	beq.n	8005b4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b02:	e022      	b.n	8005b4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b0c:	d11f      	bne.n	8005b4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b12:	e01c      	b.n	8005b4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d902      	bls.n	8005b22 <DMA_CheckFifoParam+0xb6>
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d003      	beq.n	8005b28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005b20:	e018      	b.n	8005b54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	73fb      	strb	r3, [r7, #15]
        break;
 8005b26:	e015      	b.n	8005b54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]
    break;
 8005b38:	e00b      	b.n	8005b52 <DMA_CheckFifoParam+0xe6>
        break;
 8005b3a:	bf00      	nop
 8005b3c:	e00a      	b.n	8005b54 <DMA_CheckFifoParam+0xe8>
        break;
 8005b3e:	bf00      	nop
 8005b40:	e008      	b.n	8005b54 <DMA_CheckFifoParam+0xe8>
        break;
 8005b42:	bf00      	nop
 8005b44:	e006      	b.n	8005b54 <DMA_CheckFifoParam+0xe8>
        break;
 8005b46:	bf00      	nop
 8005b48:	e004      	b.n	8005b54 <DMA_CheckFifoParam+0xe8>
        break;
 8005b4a:	bf00      	nop
 8005b4c:	e002      	b.n	8005b54 <DMA_CheckFifoParam+0xe8>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e000      	b.n	8005b54 <DMA_CheckFifoParam+0xe8>
    break;
 8005b52:	bf00      	nop
    }
  }

  return status;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop

08005b64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a38      	ldr	r2, [pc, #224]	@ (8005c58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a36      	ldr	r2, [pc, #216]	@ (8005c5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01d      	beq.n	8005bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a35      	ldr	r2, [pc, #212]	@ (8005c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a33      	ldr	r2, [pc, #204]	@ (8005c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a32      	ldr	r2, [pc, #200]	@ (8005c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a30      	ldr	r2, [pc, #192]	@ (8005c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8005c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d101      	bne.n	8005bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01a      	beq.n	8005c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	3b08      	subs	r3, #8
 8005bd4:	4a28      	ldr	r2, [pc, #160]	@ (8005c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	091b      	lsrs	r3, r3, #4
 8005bdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4b26      	ldr	r3, [pc, #152]	@ (8005c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	461a      	mov	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a24      	ldr	r2, [pc, #144]	@ (8005c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005bf0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c00:	e024      	b.n	8005c4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	3b10      	subs	r3, #16
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	091b      	lsrs	r3, r3, #4
 8005c12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4a1c      	ldr	r2, [pc, #112]	@ (8005c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d806      	bhi.n	8005c2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d902      	bls.n	8005c2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3308      	adds	r3, #8
 8005c28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4b18      	ldr	r3, [pc, #96]	@ (8005c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a16      	ldr	r2, [pc, #88]	@ (8005c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005c3c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	2201      	movs	r2, #1
 8005c46:	409a      	lsls	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	58025408 	.word	0x58025408
 8005c5c:	5802541c 	.word	0x5802541c
 8005c60:	58025430 	.word	0x58025430
 8005c64:	58025444 	.word	0x58025444
 8005c68:	58025458 	.word	0x58025458
 8005c6c:	5802546c 	.word	0x5802546c
 8005c70:	58025480 	.word	0x58025480
 8005c74:	58025494 	.word	0x58025494
 8005c78:	cccccccd 	.word	0xcccccccd
 8005c7c:	16009600 	.word	0x16009600
 8005c80:	58025880 	.word	0x58025880
 8005c84:	aaaaaaab 	.word	0xaaaaaaab
 8005c88:	400204b8 	.word	0x400204b8
 8005c8c:	4002040f 	.word	0x4002040f
 8005c90:	10008200 	.word	0x10008200
 8005c94:	40020880 	.word	0x40020880

08005c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d04a      	beq.n	8005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d847      	bhi.n	8005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a25      	ldr	r2, [pc, #148]	@ (8005d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d022      	beq.n	8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a24      	ldr	r2, [pc, #144]	@ (8005d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d01d      	beq.n	8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a22      	ldr	r2, [pc, #136]	@ (8005d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a21      	ldr	r2, [pc, #132]	@ (8005d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d013      	beq.n	8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1e      	ldr	r2, [pc, #120]	@ (8005d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8005d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d101      	bne.n	8005d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4b17      	ldr	r3, [pc, #92]	@ (8005d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a15      	ldr	r2, [pc, #84]	@ (8005d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005d20:	671a      	str	r2, [r3, #112]	@ 0x70
 8005d22:	e009      	b.n	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4b14      	ldr	r3, [pc, #80]	@ (8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a11      	ldr	r2, [pc, #68]	@ (8005d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005d36:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005d44:	bf00      	nop
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	58025408 	.word	0x58025408
 8005d54:	5802541c 	.word	0x5802541c
 8005d58:	58025430 	.word	0x58025430
 8005d5c:	58025444 	.word	0x58025444
 8005d60:	58025458 	.word	0x58025458
 8005d64:	5802546c 	.word	0x5802546c
 8005d68:	58025480 	.word	0x58025480
 8005d6c:	58025494 	.word	0x58025494
 8005d70:	1600963f 	.word	0x1600963f
 8005d74:	58025940 	.word	0x58025940
 8005d78:	1000823f 	.word	0x1000823f
 8005d7c:	40020940 	.word	0x40020940

08005d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b089      	sub	sp, #36	@ 0x24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d8e:	4b89      	ldr	r3, [pc, #548]	@ (8005fb4 <HAL_GPIO_Init+0x234>)
 8005d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d92:	e194      	b.n	80060be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	2101      	movs	r1, #1
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005da0:	4013      	ands	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 8186 	beq.w	80060b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d005      	beq.n	8005dc4 <HAL_GPIO_Init+0x44>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d130      	bne.n	8005e26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	2203      	movs	r2, #3
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43db      	mvns	r3, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4013      	ands	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	f003 0201 	and.w	r2, r3, #1
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d017      	beq.n	8005e62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	43db      	mvns	r3, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4013      	ands	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d123      	bne.n	8005eb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	08da      	lsrs	r2, r3, #3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3208      	adds	r2, #8
 8005e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	220f      	movs	r2, #15
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	08da      	lsrs	r2, r3, #3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3208      	adds	r2, #8
 8005eb0:	69b9      	ldr	r1, [r7, #24]
 8005eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f003 0203 	and.w	r2, r3, #3
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 80e0 	beq.w	80060b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8005fb8 <HAL_GPIO_Init+0x238>)
 8005efa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005efe:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb8 <HAL_GPIO_Init+0x238>)
 8005f00:	f043 0302 	orr.w	r3, r3, #2
 8005f04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005f08:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb8 <HAL_GPIO_Init+0x238>)
 8005f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f16:	4a29      	ldr	r2, [pc, #164]	@ (8005fbc <HAL_GPIO_Init+0x23c>)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	089b      	lsrs	r3, r3, #2
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	220f      	movs	r2, #15
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	4013      	ands	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a20      	ldr	r2, [pc, #128]	@ (8005fc0 <HAL_GPIO_Init+0x240>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d052      	beq.n	8005fe8 <HAL_GPIO_Init+0x268>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <HAL_GPIO_Init+0x244>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d031      	beq.n	8005fae <HAL_GPIO_Init+0x22e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc8 <HAL_GPIO_Init+0x248>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d02b      	beq.n	8005faa <HAL_GPIO_Init+0x22a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a1d      	ldr	r2, [pc, #116]	@ (8005fcc <HAL_GPIO_Init+0x24c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d025      	beq.n	8005fa6 <HAL_GPIO_Init+0x226>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd0 <HAL_GPIO_Init+0x250>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01f      	beq.n	8005fa2 <HAL_GPIO_Init+0x222>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd4 <HAL_GPIO_Init+0x254>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d019      	beq.n	8005f9e <HAL_GPIO_Init+0x21e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd8 <HAL_GPIO_Init+0x258>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d013      	beq.n	8005f9a <HAL_GPIO_Init+0x21a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a19      	ldr	r2, [pc, #100]	@ (8005fdc <HAL_GPIO_Init+0x25c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00d      	beq.n	8005f96 <HAL_GPIO_Init+0x216>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a18      	ldr	r2, [pc, #96]	@ (8005fe0 <HAL_GPIO_Init+0x260>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d007      	beq.n	8005f92 <HAL_GPIO_Init+0x212>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a17      	ldr	r2, [pc, #92]	@ (8005fe4 <HAL_GPIO_Init+0x264>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d101      	bne.n	8005f8e <HAL_GPIO_Init+0x20e>
 8005f8a:	2309      	movs	r3, #9
 8005f8c:	e02d      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005f8e:	230a      	movs	r3, #10
 8005f90:	e02b      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005f92:	2308      	movs	r3, #8
 8005f94:	e029      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005f96:	2307      	movs	r3, #7
 8005f98:	e027      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005f9a:	2306      	movs	r3, #6
 8005f9c:	e025      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005f9e:	2305      	movs	r3, #5
 8005fa0:	e023      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	e021      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e01f      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e01d      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e01b      	b.n	8005fea <HAL_GPIO_Init+0x26a>
 8005fb2:	bf00      	nop
 8005fb4:	58000080 	.word	0x58000080
 8005fb8:	58024400 	.word	0x58024400
 8005fbc:	58000400 	.word	0x58000400
 8005fc0:	58020000 	.word	0x58020000
 8005fc4:	58020400 	.word	0x58020400
 8005fc8:	58020800 	.word	0x58020800
 8005fcc:	58020c00 	.word	0x58020c00
 8005fd0:	58021000 	.word	0x58021000
 8005fd4:	58021400 	.word	0x58021400
 8005fd8:	58021800 	.word	0x58021800
 8005fdc:	58021c00 	.word	0x58021c00
 8005fe0:	58022000 	.word	0x58022000
 8005fe4:	58022400 	.word	0x58022400
 8005fe8:	2300      	movs	r3, #0
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	f002 0203 	and.w	r2, r2, #3
 8005ff0:	0092      	lsls	r2, r2, #2
 8005ff2:	4093      	lsls	r3, r2
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ffa:	4938      	ldr	r1, [pc, #224]	@ (80060dc <HAL_GPIO_Init+0x35c>)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	089b      	lsrs	r3, r3, #2
 8006000:	3302      	adds	r3, #2
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	43db      	mvns	r3, r3
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800602e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	43db      	mvns	r3, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4013      	ands	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800605c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	43db      	mvns	r3, r3
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4013      	ands	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	43db      	mvns	r3, r3
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	4013      	ands	r3, r2
 800609c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3301      	adds	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f47f ae63 	bne.w	8005d94 <HAL_GPIO_Init+0x14>
  }
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	3724      	adds	r7, #36	@ 0x24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	58000400 	.word	0x58000400

080060e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
 80060ec:	4613      	mov	r3, r2
 80060ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060f0:	787b      	ldrb	r3, [r7, #1]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060fc:	e003      	b.n	8006106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	041a      	lsls	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	619a      	str	r2, [r3, #24]
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e07f      	b.n	8006226 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fa fc26 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2224      	movs	r2, #36	@ 0x24
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006164:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006174:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d107      	bne.n	800618e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800618a:	609a      	str	r2, [r3, #8]
 800618c:	e006      	b.n	800619c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800619a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d104      	bne.n	80061ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6859      	ldr	r1, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006230 <HAL_I2C_Init+0x11c>)
 80061ba:	430b      	orrs	r3, r1
 80061bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	69d9      	ldr	r1, [r3, #28]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1a      	ldr	r2, [r3, #32]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	02008000 	.word	0x02008000

08006234 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	4608      	mov	r0, r1
 800623e:	4611      	mov	r1, r2
 8006240:	461a      	mov	r2, r3
 8006242:	4603      	mov	r3, r0
 8006244:	817b      	strh	r3, [r7, #10]
 8006246:	460b      	mov	r3, r1
 8006248:	813b      	strh	r3, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b20      	cmp	r3, #32
 8006258:	f040 80f9 	bne.w	800644e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_I2C_Mem_Write+0x34>
 8006262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800626e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e0ed      	b.n	8006450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_I2C_Mem_Write+0x4e>
 800627e:	2302      	movs	r3, #2
 8006280:	e0e6      	b.n	8006450 <HAL_I2C_Mem_Write+0x21c>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800628a:	f7fb fcbb 	bl	8001c04 <HAL_GetTick>
 800628e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	2319      	movs	r3, #25
 8006296:	2201      	movs	r2, #1
 8006298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f955 	bl	800654c <I2C_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0d1      	b.n	8006450 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2221      	movs	r2, #33	@ 0x21
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2240      	movs	r2, #64	@ 0x40
 80062b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a3a      	ldr	r2, [r7, #32]
 80062c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80062cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062d4:	88f8      	ldrh	r0, [r7, #6]
 80062d6:	893a      	ldrh	r2, [r7, #8]
 80062d8:	8979      	ldrh	r1, [r7, #10]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	4603      	mov	r3, r0
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f8b9 	bl	800645c <I2C_RequestMemoryWrite>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0a9      	b.n	8006450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	2bff      	cmp	r3, #255	@ 0xff
 8006304:	d90e      	bls.n	8006324 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	22ff      	movs	r2, #255	@ 0xff
 800630a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006310:	b2da      	uxtb	r2, r3
 8006312:	8979      	ldrh	r1, [r7, #10]
 8006314:	2300      	movs	r3, #0
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 facf 	bl	80068c0 <I2C_TransferConfig>
 8006322:	e00f      	b.n	8006344 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006332:	b2da      	uxtb	r2, r3
 8006334:	8979      	ldrh	r1, [r7, #10]
 8006336:	2300      	movs	r3, #0
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fabe 	bl	80068c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f94e 	bl	80065ea <I2C_WaitOnTXISFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e07b      	b.n	8006450 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d034      	beq.n	80063fc <HAL_I2C_Mem_Write+0x1c8>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006396:	2b00      	cmp	r3, #0
 8006398:	d130      	bne.n	80063fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	2200      	movs	r2, #0
 80063a2:	2180      	movs	r1, #128	@ 0x80
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f8d1 	bl	800654c <I2C_WaitOnFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e04d      	b.n	8006450 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2bff      	cmp	r3, #255	@ 0xff
 80063bc:	d90e      	bls.n	80063dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	22ff      	movs	r2, #255	@ 0xff
 80063c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	8979      	ldrh	r1, [r7, #10]
 80063cc:	2300      	movs	r3, #0
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fa73 	bl	80068c0 <I2C_TransferConfig>
 80063da:	e00f      	b.n	80063fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	8979      	ldrh	r1, [r7, #10]
 80063ee:	2300      	movs	r3, #0
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 fa62 	bl	80068c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d19e      	bne.n	8006344 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f934 	bl	8006678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e01a      	b.n	8006450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2220      	movs	r2, #32
 8006420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6859      	ldr	r1, [r3, #4]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <HAL_I2C_Mem_Write+0x224>)
 800642e:	400b      	ands	r3, r1
 8006430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e000      	b.n	8006450 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800644e:	2302      	movs	r3, #2
  }
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	fe00e800 	.word	0xfe00e800

0800645c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	4608      	mov	r0, r1
 8006466:	4611      	mov	r1, r2
 8006468:	461a      	mov	r2, r3
 800646a:	4603      	mov	r3, r0
 800646c:	817b      	strh	r3, [r7, #10]
 800646e:	460b      	mov	r3, r1
 8006470:	813b      	strh	r3, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	b2da      	uxtb	r2, r3
 800647a:	8979      	ldrh	r1, [r7, #10]
 800647c:	4b20      	ldr	r3, [pc, #128]	@ (8006500 <I2C_RequestMemoryWrite+0xa4>)
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa1b 	bl	80068c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	69b9      	ldr	r1, [r7, #24]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 f8ab 	bl	80065ea <I2C_WaitOnTXISFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e02c      	b.n	80064f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d105      	bne.n	80064b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064a4:	893b      	ldrh	r3, [r7, #8]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80064ae:	e015      	b.n	80064dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064b0:	893b      	ldrh	r3, [r7, #8]
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	69b9      	ldr	r1, [r7, #24]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f891 	bl	80065ea <I2C_WaitOnTXISFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e012      	b.n	80064f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064d2:	893b      	ldrh	r3, [r7, #8]
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2200      	movs	r2, #0
 80064e4:	2180      	movs	r1, #128	@ 0x80
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f830 	bl	800654c <I2C_WaitOnFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	80002000 	.word	0x80002000

08006504 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d103      	bne.n	8006522 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	d007      	beq.n	8006540 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	619a      	str	r2, [r3, #24]
  }
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	4613      	mov	r3, r2
 800655a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800655c:	e031      	b.n	80065c2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d02d      	beq.n	80065c2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006566:	f7fb fb4d 	bl	8001c04 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d302      	bcc.n	800657c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d122      	bne.n	80065c2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4013      	ands	r3, r2
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	bf0c      	ite	eq
 800658c:	2301      	moveq	r3, #1
 800658e:	2300      	movne	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	429a      	cmp	r2, r3
 8006598:	d113      	bne.n	80065c2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659e:	f043 0220 	orr.w	r2, r3, #32
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e00f      	b.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4013      	ands	r3, r2
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	bf0c      	ite	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	2300      	movne	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d0be      	beq.n	800655e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065f6:	e033      	b.n	8006660 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f87f 	bl	8006700 <I2C_IsErrorOccurred>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e031      	b.n	8006670 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d025      	beq.n	8006660 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006614:	f7fb faf6 	bl	8001c04 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	429a      	cmp	r2, r3
 8006622:	d302      	bcc.n	800662a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d11a      	bne.n	8006660 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b02      	cmp	r3, #2
 8006636:	d013      	beq.n	8006660 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663c:	f043 0220 	orr.w	r2, r3, #32
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e007      	b.n	8006670 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d1c4      	bne.n	80065f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006684:	e02f      	b.n	80066e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 f838 	bl	8006700 <I2C_IsErrorOccurred>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e02d      	b.n	80066f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800669a:	f7fb fab3 	bl	8001c04 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d302      	bcc.n	80066b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11a      	bne.n	80066e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d013      	beq.n	80066e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c2:	f043 0220 	orr.w	r2, r3, #32
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e007      	b.n	80066f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d1c8      	bne.n	8006686 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	@ 0x28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b00      	cmp	r3, #0
 800672a:	d068      	beq.n	80067fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2210      	movs	r2, #16
 8006732:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006734:	e049      	b.n	80067ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d045      	beq.n	80067ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7fb fa61 	bl	8001c04 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <I2C_IsErrorOccurred+0x54>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d13a      	bne.n	80067ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800675e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006766:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006776:	d121      	bne.n	80067bc <I2C_IsErrorOccurred+0xbc>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800677e:	d01d      	beq.n	80067bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006780:	7cfb      	ldrb	r3, [r7, #19]
 8006782:	2b20      	cmp	r3, #32
 8006784:	d01a      	beq.n	80067bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006794:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006796:	f7fb fa35 	bl	8001c04 <HAL_GetTick>
 800679a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800679c:	e00e      	b.n	80067bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800679e:	f7fb fa31 	bl	8001c04 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b19      	cmp	r3, #25
 80067aa:	d907      	bls.n	80067bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	f043 0320 	orr.w	r3, r3, #32
 80067b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80067ba:	e006      	b.n	80067ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	d1e9      	bne.n	800679e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d003      	beq.n	80067e0 <I2C_IsErrorOccurred+0xe0>
 80067d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0aa      	beq.n	8006736 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80067e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d103      	bne.n	80067f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2220      	movs	r2, #32
 80067ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	f043 0304 	orr.w	r3, r3, #4
 80067f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006820:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	f043 0308 	orr.w	r3, r3, #8
 8006838:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006842:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	f043 0302 	orr.w	r3, r3, #2
 800685a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006864:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800686c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01c      	beq.n	80068ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7ff fe45 	bl	8006504 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6859      	ldr	r1, [r3, #4]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <I2C_IsErrorOccurred+0x1bc>)
 8006886:	400b      	ands	r3, r1
 8006888:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	431a      	orrs	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80068ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3728      	adds	r7, #40	@ 0x28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	fe00e800 	.word	0xfe00e800

080068c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	607b      	str	r3, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	817b      	strh	r3, [r7, #10]
 80068ce:	4613      	mov	r3, r2
 80068d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068d2:	897b      	ldrh	r3, [r7, #10]
 80068d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068d8:	7a7b      	ldrb	r3, [r7, #9]
 80068da:	041b      	lsls	r3, r3, #16
 80068dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	0d5b      	lsrs	r3, r3, #21
 80068fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80068fe:	4b08      	ldr	r3, [pc, #32]	@ (8006920 <I2C_TransferConfig+0x60>)
 8006900:	430b      	orrs	r3, r1
 8006902:	43db      	mvns	r3, r3
 8006904:	ea02 0103 	and.w	r1, r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	03ff63ff 	.word	0x03ff63ff

08006924 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b20      	cmp	r3, #32
 8006938:	d138      	bne.n	80069ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006944:	2302      	movs	r3, #2
 8006946:	e032      	b.n	80069ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2224      	movs	r2, #36	@ 0x24
 8006954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006976:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6819      	ldr	r1, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	e000      	b.n	80069ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069ac:	2302      	movs	r3, #2
  }
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d139      	bne.n	8006a44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80069da:	2302      	movs	r3, #2
 80069dc:	e033      	b.n	8006a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2224      	movs	r2, #36	@ 0x24
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006a0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	e000      	b.n	8006a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006a44:	2302      	movs	r3, #2
  }
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a54:	b08f      	sub	sp, #60	@ 0x3c
 8006a56:	af0a      	add	r7, sp, #40	@ 0x28
 8006a58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e116      	b.n	8006c92 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f00b f804 	bl	8011a8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2203      	movs	r2, #3
 8006a88:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f007 f803 	bl	800daae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	687e      	ldr	r6, [r7, #4]
 8006ab0:	466d      	mov	r5, sp
 8006ab2:	f106 0410 	add.w	r4, r6, #16
 8006ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006abe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ac2:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ac6:	1d33      	adds	r3, r6, #4
 8006ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006aca:	6838      	ldr	r0, [r7, #0]
 8006acc:	f006 fece 	bl	800d86c <USB_CoreInit>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e0d7      	b.n	8006c92 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f006 fff1 	bl	800dad0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]
 8006af2:	e04a      	b.n	8006b8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006af4:	7bfa      	ldrb	r2, [r7, #15]
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	4613      	mov	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	333d      	adds	r3, #61	@ 0x3d
 8006b04:	2201      	movs	r2, #1
 8006b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b08:	7bfa      	ldrb	r2, [r7, #15]
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	333c      	adds	r3, #60	@ 0x3c
 8006b18:	7bfa      	ldrb	r2, [r7, #15]
 8006b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b1c:	7bfa      	ldrb	r2, [r7, #15]
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	b298      	uxth	r0, r3
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3356      	adds	r3, #86	@ 0x56
 8006b30:	4602      	mov	r2, r0
 8006b32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b34:	7bfa      	ldrb	r2, [r7, #15]
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	440b      	add	r3, r1
 8006b42:	3340      	adds	r3, #64	@ 0x40
 8006b44:	2200      	movs	r2, #0
 8006b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b48:	7bfa      	ldrb	r2, [r7, #15]
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	3344      	adds	r3, #68	@ 0x44
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b5c:	7bfa      	ldrb	r2, [r7, #15]
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	3348      	adds	r3, #72	@ 0x48
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b70:	7bfa      	ldrb	r2, [r7, #15]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	334c      	adds	r3, #76	@ 0x4c
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	3301      	adds	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
 8006b8a:	7bfa      	ldrb	r2, [r7, #15]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d3af      	bcc.n	8006af4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e044      	b.n	8006c24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b9a:	7bfa      	ldrb	r2, [r7, #15]
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006bb0:	7bfa      	ldrb	r2, [r7, #15]
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	440b      	add	r3, r1
 8006bbe:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8006bc2:	7bfa      	ldrb	r2, [r7, #15]
 8006bc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006bc6:	7bfa      	ldrb	r2, [r7, #15]
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006bd8:	2200      	movs	r2, #0
 8006bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006bdc:	7bfa      	ldrb	r2, [r7, #15]
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006bf2:	7bfa      	ldrb	r2, [r7, #15]
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c08:	7bfa      	ldrb	r2, [r7, #15]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	3301      	adds	r3, #1
 8006c22:	73fb      	strb	r3, [r7, #15]
 8006c24:	7bfa      	ldrb	r2, [r7, #15]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d3b5      	bcc.n	8006b9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	687e      	ldr	r6, [r7, #4]
 8006c36:	466d      	mov	r5, sp
 8006c38:	f106 0410 	add.w	r4, r6, #16
 8006c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c48:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c4c:	1d33      	adds	r3, r6, #4
 8006c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c50:	6838      	ldr	r0, [r7, #0]
 8006c52:	f006 ff89 	bl	800db68 <USB_DevInit>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e014      	b.n	8006c92 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d102      	bne.n	8006c86 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f96f 	bl	8007f64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f007 ffcb 	bl	800ec26 <USB_DevDisconnect>

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_PCD_Start+0x1c>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e022      	b.n	8006cfc <HAL_PCD_Start+0x62>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d105      	bne.n	8006cde <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f006 fed2 	bl	800da8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f007 ff79 	bl	800ebe4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d04:	b590      	push	{r4, r7, lr}
 8006d06:	b08d      	sub	sp, #52	@ 0x34
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f008 f837 	bl	800ed8e <USB_GetMode>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 84b7 	bne.w	8007696 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f007 ff9b 	bl	800ec68 <USB_ReadInterrupts>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 84ad 	beq.w	8007694 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f007 ff88 	bl	800ec68 <USB_ReadInterrupts>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d107      	bne.n	8006d72 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695a      	ldr	r2, [r3, #20]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f002 0202 	and.w	r2, r2, #2
 8006d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f007 ff76 	bl	800ec68 <USB_ReadInterrupts>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b10      	cmp	r3, #16
 8006d84:	d161      	bne.n	8006e4a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699a      	ldr	r2, [r3, #24]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0210 	bic.w	r2, r2, #16
 8006d94:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	f003 020f 	and.w	r2, r3, #15
 8006da2:	4613      	mov	r3, r2
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	4413      	add	r3, r2
 8006db2:	3304      	adds	r3, #4
 8006db4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	0c5b      	lsrs	r3, r3, #17
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d124      	bne.n	8006e0c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d035      	beq.n	8006e3a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	091b      	lsrs	r3, r3, #4
 8006dd6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006dd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	6a38      	ldr	r0, [r7, #32]
 8006de2:	f007 fdad 	bl	800e940 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	091b      	lsrs	r3, r3, #4
 8006dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006df2:	441a      	add	r2, r3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	695a      	ldr	r2, [r3, #20]
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	091b      	lsrs	r3, r3, #4
 8006e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e04:	441a      	add	r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	615a      	str	r2, [r3, #20]
 8006e0a:	e016      	b.n	8006e3a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	0c5b      	lsrs	r3, r3, #17
 8006e10:	f003 030f 	and.w	r3, r3, #15
 8006e14:	2b06      	cmp	r3, #6
 8006e16:	d110      	bne.n	8006e3a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006e1e:	2208      	movs	r2, #8
 8006e20:	4619      	mov	r1, r3
 8006e22:	6a38      	ldr	r0, [r7, #32]
 8006e24:	f007 fd8c 	bl	800e940 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	091b      	lsrs	r3, r3, #4
 8006e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e34:	441a      	add	r2, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0210 	orr.w	r2, r2, #16
 8006e48:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f007 ff0a 	bl	800ec68 <USB_ReadInterrupts>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e5a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e5e:	f040 80a7 	bne.w	8006fb0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f007 ff0f 	bl	800ec8e <USB_ReadDevAllOutEpInterrupt>
 8006e70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006e72:	e099      	b.n	8006fa8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 808e 	beq.w	8006f9c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f007 ff33 	bl	800ecf6 <USB_ReadDevOutEPInterrupt>
 8006e90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00c      	beq.n	8006eb6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2301      	movs	r3, #1
 8006eac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006eae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fed1 	bl	8007c58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00c      	beq.n	8006eda <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ecc:	461a      	mov	r2, r3
 8006ece:	2308      	movs	r3, #8
 8006ed0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006ed2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 ffa7 	bl	8007e28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f003 0310 	and.w	r3, r3, #16
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2310      	movs	r3, #16
 8006ef4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d030      	beq.n	8006f62 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f08:	2b80      	cmp	r3, #128	@ 0x80
 8006f0a:	d109      	bne.n	8006f20 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f1e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f22:	4613      	mov	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	3304      	adds	r3, #4
 8006f34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	78db      	ldrb	r3, [r3, #3]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d108      	bne.n	8006f50 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2200      	movs	r2, #0
 8006f42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f00a fec4 	bl	8011cd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	2302      	movs	r3, #2
 8006f60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2320      	movs	r3, #32
 8006f7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d009      	beq.n	8006f9c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f94:	461a      	mov	r2, r3
 8006f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006f9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa4:	085b      	lsrs	r3, r3, #1
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f47f af62 	bne.w	8006e74 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f007 fe57 	bl	800ec68 <USB_ReadInterrupts>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fc4:	f040 80db 	bne.w	800717e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f007 fe78 	bl	800ecc2 <USB_ReadDevAllInEpInterrupt>
 8006fd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006fd8:	e0cd      	b.n	8007176 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80c2 	beq.w	800716a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	4611      	mov	r1, r2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f007 fe9e 	bl	800ed32 <USB_ReadDevInEPInterrupt>
 8006ff6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d057      	beq.n	80070b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	2201      	movs	r2, #1
 800700a:	fa02 f303 	lsl.w	r3, r2, r3
 800700e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	43db      	mvns	r3, r3
 800701c:	69f9      	ldr	r1, [r7, #28]
 800701e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007022:	4013      	ands	r3, r2
 8007024:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007032:	461a      	mov	r2, r3
 8007034:	2301      	movs	r3, #1
 8007036:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d132      	bne.n	80070a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007044:	4613      	mov	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	3348      	adds	r3, #72	@ 0x48
 8007050:	6819      	ldr	r1, [r3, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007056:	4613      	mov	r3, r2
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4403      	add	r3, r0
 8007060:	3344      	adds	r3, #68	@ 0x44
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4419      	add	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706a:	4613      	mov	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4403      	add	r3, r0
 8007074:	3348      	adds	r3, #72	@ 0x48
 8007076:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	2b00      	cmp	r3, #0
 800707c:	d113      	bne.n	80070a6 <HAL_PCD_IRQHandler+0x3a2>
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007082:	4613      	mov	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	334c      	adds	r3, #76	@ 0x4c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d108      	bne.n	80070a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800709e:	461a      	mov	r2, r3
 80070a0:	2101      	movs	r1, #1
 80070a2:	f007 fea7 	bl	800edf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f00a fd8e 	bl	8011bce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f003 0308 	and.w	r3, r3, #8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c8:	461a      	mov	r2, r3
 80070ca:	2308      	movs	r3, #8
 80070cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f003 0310 	and.w	r3, r3, #16
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e4:	461a      	mov	r2, r3
 80070e6:	2310      	movs	r3, #16
 80070e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007100:	461a      	mov	r2, r3
 8007102:	2340      	movs	r3, #64	@ 0x40
 8007104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d023      	beq.n	8007158 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007110:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007112:	6a38      	ldr	r0, [r7, #32]
 8007114:	f006 fe86 	bl	800de24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800711a:	4613      	mov	r3, r2
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	3338      	adds	r3, #56	@ 0x38
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	3304      	adds	r3, #4
 800712a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	78db      	ldrb	r3, [r3, #3]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d108      	bne.n	8007146 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2200      	movs	r2, #0
 8007138:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	b2db      	uxtb	r3, r3
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f00a fddb 	bl	8011cfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007152:	461a      	mov	r2, r3
 8007154:	2302      	movs	r3, #2
 8007156:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007162:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fcea 	bl	8007b3e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	3301      	adds	r3, #1
 800716e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007172:	085b      	lsrs	r3, r3, #1
 8007174:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007178:	2b00      	cmp	r3, #0
 800717a:	f47f af2e 	bne.w	8006fda <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f007 fd70 	bl	800ec68 <USB_ReadInterrupts>
 8007188:	4603      	mov	r3, r0
 800718a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800718e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007192:	d122      	bne.n	80071da <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071a2:	f023 0301 	bic.w	r3, r3, #1
 80071a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d108      	bne.n	80071c4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80071ba:	2100      	movs	r1, #0
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fef5 	bl	8007fac <HAL_PCDEx_LPM_Callback>
 80071c2:	e002      	b.n	80071ca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f00a fd79 	bl	8011cbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695a      	ldr	r2, [r3, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80071d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f007 fd42 	bl	800ec68 <USB_ReadInterrupts>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071ee:	d112      	bne.n	8007216 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d102      	bne.n	8007206 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f00a fd35 	bl	8011c70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695a      	ldr	r2, [r3, #20]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007214:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f007 fd24 	bl	800ec68 <USB_ReadInterrupts>
 8007220:	4603      	mov	r3, r0
 8007222:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800722a:	d121      	bne.n	8007270 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	695a      	ldr	r2, [r3, #20]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800723a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d111      	bne.n	800726a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007254:	089b      	lsrs	r3, r3, #2
 8007256:	f003 020f 	and.w	r2, r3, #15
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007260:	2101      	movs	r1, #1
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fea2 	bl	8007fac <HAL_PCDEx_LPM_Callback>
 8007268:	e002      	b.n	8007270 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f00a fd00 	bl	8011c70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f007 fcf7 	bl	800ec68 <USB_ReadInterrupts>
 800727a:	4603      	mov	r3, r0
 800727c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007284:	f040 80b7 	bne.w	80073f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2110      	movs	r1, #16
 80072a2:	4618      	mov	r0, r3
 80072a4:	f006 fdbe 	bl	800de24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a8:	2300      	movs	r3, #0
 80072aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072ac:	e046      	b.n	800733c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ba:	461a      	mov	r2, r3
 80072bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ee:	461a      	mov	r2, r3
 80072f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	440a      	add	r2, r1
 800730c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007310:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007314:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	440a      	add	r2, r1
 800732c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007330:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007334:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007338:	3301      	adds	r3, #1
 800733a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007342:	429a      	cmp	r2, r3
 8007344:	d3b3      	bcc.n	80072ae <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007354:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007358:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800735e:	2b00      	cmp	r3, #0
 8007360:	d016      	beq.n	8007390 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007372:	f043 030b 	orr.w	r3, r3, #11
 8007376:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007388:	f043 030b 	orr.w	r3, r3, #11
 800738c:	6453      	str	r3, [r2, #68]	@ 0x44
 800738e:	e015      	b.n	80073bc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007396:	695a      	ldr	r2, [r3, #20]
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800739e:	4619      	mov	r1, r3
 80073a0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80073a4:	4313      	orrs	r3, r2
 80073a6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073b6:	f043 030b 	orr.w	r3, r3, #11
 80073ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80073ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80073e0:	461a      	mov	r2, r3
 80073e2:	f007 fd07 	bl	800edf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	695a      	ldr	r2, [r3, #20]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80073f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f007 fc34 	bl	800ec68 <USB_ReadInterrupts>
 8007400:	4603      	mov	r3, r0
 8007402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800740a:	d124      	bne.n	8007456 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4618      	mov	r0, r3
 8007412:	f007 fccb 	bl	800edac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f006 fd7f 	bl	800df1e <USB_GetDevSpeed>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681c      	ldr	r4, [r3, #0]
 800742c:	f001 fd9e 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 8007430:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007436:	b2db      	uxtb	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	4620      	mov	r0, r4
 800743c:	f006 fa84 	bl	800d948 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f00a fbec 	bl	8011c1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695a      	ldr	r2, [r3, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007454:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f007 fc04 	bl	800ec68 <USB_ReadInterrupts>
 8007460:	4603      	mov	r3, r0
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b08      	cmp	r3, #8
 8007468:	d10a      	bne.n	8007480 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f00a fbc9 	bl	8011c02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695a      	ldr	r2, [r3, #20]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f002 0208 	and.w	r2, r2, #8
 800747e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f007 fbef 	bl	800ec68 <USB_ReadInterrupts>
 800748a:	4603      	mov	r3, r0
 800748c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007490:	2b80      	cmp	r3, #128	@ 0x80
 8007492:	d122      	bne.n	80074da <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074a0:	2301      	movs	r3, #1
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a4:	e014      	b.n	80074d0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074aa:	4613      	mov	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d105      	bne.n	80074ca <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fb09 	bl	8007adc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	3301      	adds	r3, #1
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d3e5      	bcc.n	80074a6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f007 fbc2 	bl	800ec68 <USB_ReadInterrupts>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ee:	d13b      	bne.n	8007568 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074f0:	2301      	movs	r3, #1
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f4:	e02b      	b.n	800754e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800750a:	4613      	mov	r3, r2
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	3340      	adds	r3, #64	@ 0x40
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d115      	bne.n	8007548 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800751c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800751e:	2b00      	cmp	r3, #0
 8007520:	da12      	bge.n	8007548 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007526:	4613      	mov	r3, r2
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	333f      	adds	r3, #63	@ 0x3f
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800753e:	b2db      	uxtb	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 faca 	bl	8007adc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	3301      	adds	r3, #1
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007554:	429a      	cmp	r2, r3
 8007556:	d3ce      	bcc.n	80074f6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695a      	ldr	r2, [r3, #20]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	f007 fb7b 	bl	800ec68 <USB_ReadInterrupts>
 8007572:	4603      	mov	r3, r0
 8007574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800757c:	d155      	bne.n	800762a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800757e:	2301      	movs	r3, #1
 8007580:	627b      	str	r3, [r7, #36]	@ 0x24
 8007582:	e045      	b.n	8007610 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007598:	4613      	mov	r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d12e      	bne.n	800760a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80075ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da2b      	bge.n	800760a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80075be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d121      	bne.n	800760a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ca:	4613      	mov	r3, r2
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80075d8:	2201      	movs	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007606:	6053      	str	r3, [r2, #4]
            break;
 8007608:	e007      	b.n	800761a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	3301      	adds	r3, #1
 800760e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007616:	429a      	cmp	r2, r3
 8007618:	d3b4      	bcc.n	8007584 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f007 fb1a 	bl	800ec68 <USB_ReadInterrupts>
 8007634:	4603      	mov	r3, r0
 8007636:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800763a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800763e:	d10a      	bne.n	8007656 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f00a fb6d 	bl	8011d20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695a      	ldr	r2, [r3, #20]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007654:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f007 fb04 	bl	800ec68 <USB_ReadInterrupts>
 8007660:	4603      	mov	r3, r0
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b04      	cmp	r3, #4
 8007668:	d115      	bne.n	8007696 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f00a fb5d 	bl	8011d3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6859      	ldr	r1, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
 8007692:	e000      	b.n	8007696 <HAL_PCD_IRQHandler+0x992>
      return;
 8007694:	bf00      	nop
    }
  }
}
 8007696:	3734      	adds	r7, #52	@ 0x34
 8007698:	46bd      	mov	sp, r7
 800769a:	bd90      	pop	{r4, r7, pc}

0800769c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_PCD_SetAddress+0x1a>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e013      	b.n	80076de <HAL_PCD_SetAddress+0x42>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	78fa      	ldrb	r2, [r7, #3]
 80076cc:	4611      	mov	r1, r2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f007 fa62 	bl	800eb98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	4608      	mov	r0, r1
 80076f0:	4611      	mov	r1, r2
 80076f2:	461a      	mov	r2, r3
 80076f4:	4603      	mov	r3, r0
 80076f6:	70fb      	strb	r3, [r7, #3]
 80076f8:	460b      	mov	r3, r1
 80076fa:	803b      	strh	r3, [r7, #0]
 80076fc:	4613      	mov	r3, r2
 80076fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007708:	2b00      	cmp	r3, #0
 800770a:	da0f      	bge.n	800772c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	f003 020f 	and.w	r2, r3, #15
 8007712:	4613      	mov	r3, r2
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	3338      	adds	r3, #56	@ 0x38
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4413      	add	r3, r2
 8007720:	3304      	adds	r3, #4
 8007722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	705a      	strb	r2, [r3, #1]
 800772a:	e00f      	b.n	800774c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	f003 020f 	and.w	r2, r3, #15
 8007732:	4613      	mov	r3, r2
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	3304      	adds	r3, #4
 8007744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	b2da      	uxtb	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007758:	883a      	ldrh	r2, [r7, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	78ba      	ldrb	r2, [r7, #2]
 8007762:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d004      	beq.n	8007776 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007776:	78bb      	ldrb	r3, [r7, #2]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d102      	bne.n	8007782 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_PCD_EP_Open+0xaa>
 800778c:	2302      	movs	r3, #2
 800778e:	e00e      	b.n	80077ae <HAL_PCD_EP_Open+0xc8>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68f9      	ldr	r1, [r7, #12]
 800779e:	4618      	mov	r0, r3
 80077a0:	f006 fbe2 	bl	800df68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80077ac:	7afb      	ldrb	r3, [r7, #11]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da0f      	bge.n	80077ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	f003 020f 	and.w	r2, r3, #15
 80077d0:	4613      	mov	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	3338      	adds	r3, #56	@ 0x38
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4413      	add	r3, r2
 80077de:	3304      	adds	r3, #4
 80077e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	705a      	strb	r2, [r3, #1]
 80077e8:	e00f      	b.n	800780a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077ea:	78fb      	ldrb	r3, [r7, #3]
 80077ec:	f003 020f 	and.w	r2, r3, #15
 80077f0:	4613      	mov	r3, r2
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	4413      	add	r3, r2
 8007800:	3304      	adds	r3, #4
 8007802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	b2da      	uxtb	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_PCD_EP_Close+0x6e>
 8007820:	2302      	movs	r3, #2
 8007822:	e00e      	b.n	8007842 <HAL_PCD_EP_Close+0x8c>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68f9      	ldr	r1, [r7, #12]
 8007832:	4618      	mov	r0, r3
 8007834:	f006 fc20 	bl	800e078 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b086      	sub	sp, #24
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	460b      	mov	r3, r1
 8007858:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800785a:	7afb      	ldrb	r3, [r7, #11]
 800785c:	f003 020f 	and.w	r2, r3, #15
 8007860:	4613      	mov	r3, r2
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	3304      	adds	r3, #4
 8007872:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2200      	movs	r2, #0
 8007884:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2200      	movs	r2, #0
 800788a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	b2da      	uxtb	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d102      	bne.n	80078a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	6979      	ldr	r1, [r7, #20]
 80078b4:	f006 fcbc 	bl	800e230 <USB_EPStartXfer>

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	460b      	mov	r3, r1
 80078cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	f003 020f 	and.w	r2, r3, #15
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80078e4:	681b      	ldr	r3, [r3, #0]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
 80078fe:	460b      	mov	r3, r1
 8007900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007902:	7afb      	ldrb	r3, [r7, #11]
 8007904:	f003 020f 	and.w	r2, r3, #15
 8007908:	4613      	mov	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	3338      	adds	r3, #56	@ 0x38
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4413      	add	r3, r2
 8007916:	3304      	adds	r3, #4
 8007918:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2200      	movs	r2, #0
 800792a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2201      	movs	r2, #1
 8007930:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	b2da      	uxtb	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d102      	bne.n	800794c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	6979      	ldr	r1, [r7, #20]
 800795a:	f006 fc69 	bl	800e230 <USB_EPStartXfer>

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	f003 020f 	and.w	r2, r3, #15
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	429a      	cmp	r2, r3
 8007980:	d901      	bls.n	8007986 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e050      	b.n	8007a28 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800798a:	2b00      	cmp	r3, #0
 800798c:	da0f      	bge.n	80079ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800798e:	78fb      	ldrb	r3, [r7, #3]
 8007990:	f003 020f 	and.w	r2, r3, #15
 8007994:	4613      	mov	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	3338      	adds	r3, #56	@ 0x38
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	4413      	add	r3, r2
 80079a2:	3304      	adds	r3, #4
 80079a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	705a      	strb	r2, [r3, #1]
 80079ac:	e00d      	b.n	80079ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079ae:	78fa      	ldrb	r2, [r7, #3]
 80079b0:	4613      	mov	r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	3304      	adds	r3, #4
 80079c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_PCD_EP_SetStall+0x82>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e01e      	b.n	8007a28 <HAL_PCD_EP_SetStall+0xc0>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f006 fff9 	bl	800e9f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	b2d9      	uxtb	r1, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f007 f9eb 	bl	800edf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	f003 020f 	and.w	r2, r3, #15
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d901      	bls.n	8007a4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e042      	b.n	8007ad4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da0f      	bge.n	8007a76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a56:	78fb      	ldrb	r3, [r7, #3]
 8007a58:	f003 020f 	and.w	r2, r3, #15
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	3338      	adds	r3, #56	@ 0x38
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	705a      	strb	r2, [r3, #1]
 8007a74:	e00f      	b.n	8007a96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	f003 020f 	and.w	r2, r3, #15
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_PCD_EP_ClrStall+0x86>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e00e      	b.n	8007ad4 <HAL_PCD_EP_ClrStall+0xa4>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f007 f801 	bl	800eacc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	da0c      	bge.n	8007b0a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	f003 020f 	and.w	r2, r3, #15
 8007af6:	4613      	mov	r3, r2
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	3338      	adds	r3, #56	@ 0x38
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	4413      	add	r3, r2
 8007b04:	3304      	adds	r3, #4
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e00c      	b.n	8007b24 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	f003 020f 	and.w	r2, r3, #15
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	4413      	add	r3, r2
 8007b20:	3304      	adds	r3, #4
 8007b22:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68f9      	ldr	r1, [r7, #12]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f006 fe20 	bl	800e770 <USB_EPStopXfer>
 8007b30:	4603      	mov	r3, r0
 8007b32:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007b34:	7afb      	ldrb	r3, [r7, #11]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b08a      	sub	sp, #40	@ 0x28
 8007b42:	af02      	add	r7, sp, #8
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	3338      	adds	r3, #56	@ 0x38
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	3304      	adds	r3, #4
 8007b64:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	695a      	ldr	r2, [r3, #20]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d901      	bls.n	8007b76 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e06c      	b.n	8007c50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	691a      	ldr	r2, [r3, #16]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d902      	bls.n	8007b92 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	3303      	adds	r3, #3
 8007b96:	089b      	lsrs	r3, r3, #2
 8007b98:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b9a:	e02b      	b.n	8007bf4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d902      	bls.n	8007bb8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	3303      	adds	r3, #3
 8007bbc:	089b      	lsrs	r3, r3, #2
 8007bbe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68d9      	ldr	r1, [r3, #12]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	6978      	ldr	r0, [r7, #20]
 8007bd8:	f006 fe74 	bl	800e8c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	441a      	add	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	695a      	ldr	r2, [r3, #20]
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	441a      	add	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d809      	bhi.n	8007c1e <PCD_WriteEmptyTxFifo+0xe0>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	695a      	ldr	r2, [r3, #20]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d203      	bcs.n	8007c1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1be      	bne.n	8007b9c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	691a      	ldr	r2, [r3, #16]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d811      	bhi.n	8007c4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	f003 030f 	and.w	r3, r3, #15
 8007c30:	2201      	movs	r2, #1
 8007c32:	fa02 f303 	lsl.w	r3, r2, r3
 8007c36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	43db      	mvns	r3, r3
 8007c44:	6939      	ldr	r1, [r7, #16]
 8007c46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3720      	adds	r7, #32
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	333c      	adds	r3, #60	@ 0x3c
 8007c70:	3304      	adds	r3, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d17b      	bne.n	8007d86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f003 0308 	and.w	r3, r3, #8
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d015      	beq.n	8007cc4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	4a61      	ldr	r2, [pc, #388]	@ (8007e20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	f240 80b9 	bls.w	8007e14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 80b3 	beq.w	8007e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc0:	6093      	str	r3, [r2, #8]
 8007cc2:	e0a7      	b.n	8007e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cda:	461a      	mov	r2, r3
 8007cdc:	2320      	movs	r3, #32
 8007cde:	6093      	str	r3, [r2, #8]
 8007ce0:	e098      	b.n	8007e14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f040 8093 	bne.w	8007e14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8007e20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d90f      	bls.n	8007d16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00a      	beq.n	8007d16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d12:	6093      	str	r3, [r2, #8]
 8007d14:	e07e      	b.n	8007e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	4413      	add	r3, r2
 8007d28:	3304      	adds	r3, #4
 8007d2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6a1a      	ldr	r2, [r3, #32]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	0159      	lsls	r1, r3, #5
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	440b      	add	r3, r1
 8007d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d42:	1ad2      	subs	r2, r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d114      	bne.n	8007d78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d109      	bne.n	8007d6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007d60:	461a      	mov	r2, r3
 8007d62:	2101      	movs	r1, #1
 8007d64:	f007 f846 	bl	800edf4 <USB_EP0_OutStart>
 8007d68:	e006      	b.n	8007d78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	441a      	add	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f009 ff0a 	bl	8011b98 <HAL_PCD_DataOutStageCallback>
 8007d84:	e046      	b.n	8007e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	4a26      	ldr	r2, [pc, #152]	@ (8007e24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d124      	bne.n	8007dd8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da4:	461a      	mov	r2, r3
 8007da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007daa:	6093      	str	r3, [r2, #8]
 8007dac:	e032      	b.n	8007e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d008      	beq.n	8007dca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	2320      	movs	r3, #32
 8007dc8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f009 fee1 	bl	8011b98 <HAL_PCD_DataOutStageCallback>
 8007dd6:	e01d      	b.n	8007e14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d114      	bne.n	8007e08 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	4613      	mov	r3, r2
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d108      	bne.n	8007e08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007e00:	461a      	mov	r2, r3
 8007e02:	2100      	movs	r1, #0
 8007e04:	f006 fff6 	bl	800edf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f009 fec2 	bl	8011b98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3720      	adds	r7, #32
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	4f54300a 	.word	0x4f54300a
 8007e24:	4f54310a 	.word	0x4f54310a

08007e28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	333c      	adds	r3, #60	@ 0x3c
 8007e40:	3304      	adds	r3, #4
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4a15      	ldr	r2, [pc, #84]	@ (8007eb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d90e      	bls.n	8007e7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d009      	beq.n	8007e7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e74:	461a      	mov	r2, r3
 8007e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f009 fe79 	bl	8011b74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4a0a      	ldr	r2, [pc, #40]	@ (8007eb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d90c      	bls.n	8007ea4 <PCD_EP_OutSetupPacket_int+0x7c>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d108      	bne.n	8007ea4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6818      	ldr	r0, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	f006 ffa8 	bl	800edf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	4f54300a 	.word	0x4f54300a

08007eb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d107      	bne.n	8007ee2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007ed2:	883b      	ldrh	r3, [r7, #0]
 8007ed4:	0419      	lsls	r1, r3, #16
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ee0:	e028      	b.n	8007f34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee8:	0c1b      	lsrs	r3, r3, #16
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	4413      	add	r3, r2
 8007eee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
 8007ef4:	e00d      	b.n	8007f12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	3340      	adds	r3, #64	@ 0x40
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	0c1b      	lsrs	r3, r3, #16
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	4413      	add	r3, r2
 8007f0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
 8007f12:	7bfa      	ldrb	r2, [r7, #15]
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d3ec      	bcc.n	8007ef6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007f1c:	883b      	ldrh	r3, [r7, #0]
 8007f1e:	0418      	lsls	r0, r3, #16
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6819      	ldr	r1, [r3, #0]
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	4302      	orrs	r2, r0
 8007f2c:	3340      	adds	r3, #64	@ 0x40
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	440b      	add	r3, r1
 8007f32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	887a      	ldrh	r2, [r7, #2]
 8007f54:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f92:	4b05      	ldr	r3, [pc, #20]	@ (8007fa8 <HAL_PCDEx_ActivateLPM+0x44>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	10000003 	.word	0x10000003

08007fac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007fcc:	4b19      	ldr	r3, [pc, #100]	@ (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d00a      	beq.n	8007fee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007fd8:	4b16      	ldr	r3, [pc, #88]	@ (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0307 	and.w	r3, r3, #7
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d001      	beq.n	8007fea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e01f      	b.n	800802a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e01d      	b.n	800802a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007fee:	4b11      	ldr	r3, [pc, #68]	@ (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f023 0207 	bic.w	r2, r3, #7
 8007ff6:	490f      	ldr	r1, [pc, #60]	@ (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007ffe:	f7f9 fe01 	bl	8001c04 <HAL_GetTick>
 8008002:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008004:	e009      	b.n	800801a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008006:	f7f9 fdfd 	bl	8001c04 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008014:	d901      	bls.n	800801a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e007      	b.n	800802a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800801a:	4b06      	ldr	r3, [pc, #24]	@ (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008026:	d1ee      	bne.n	8008006 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	58024800 	.word	0x58024800

08008038 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800803c:	4b05      	ldr	r3, [pc, #20]	@ (8008054 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	4a04      	ldr	r2, [pc, #16]	@ (8008054 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008046:	60d3      	str	r3, [r2, #12]
}
 8008048:	bf00      	nop
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	58024800 	.word	0x58024800

08008058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08c      	sub	sp, #48	@ 0x30
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f000 bc48 	b.w	80088fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8088 	beq.w	800818a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800807a:	4b99      	ldr	r3, [pc, #612]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008084:	4b96      	ldr	r3, [pc, #600]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008088:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800808a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808c:	2b10      	cmp	r3, #16
 800808e:	d007      	beq.n	80080a0 <HAL_RCC_OscConfig+0x48>
 8008090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008092:	2b18      	cmp	r3, #24
 8008094:	d111      	bne.n	80080ba <HAL_RCC_OscConfig+0x62>
 8008096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d10c      	bne.n	80080ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080a0:	4b8f      	ldr	r3, [pc, #572]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d06d      	beq.n	8008188 <HAL_RCC_OscConfig+0x130>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d169      	bne.n	8008188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f000 bc21 	b.w	80088fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c2:	d106      	bne.n	80080d2 <HAL_RCC_OscConfig+0x7a>
 80080c4:	4b86      	ldr	r3, [pc, #536]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a85      	ldr	r2, [pc, #532]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	e02e      	b.n	8008130 <HAL_RCC_OscConfig+0xd8>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10c      	bne.n	80080f4 <HAL_RCC_OscConfig+0x9c>
 80080da:	4b81      	ldr	r3, [pc, #516]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a80      	ldr	r2, [pc, #512]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	4b7e      	ldr	r3, [pc, #504]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a7d      	ldr	r2, [pc, #500]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	e01d      	b.n	8008130 <HAL_RCC_OscConfig+0xd8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080fc:	d10c      	bne.n	8008118 <HAL_RCC_OscConfig+0xc0>
 80080fe:	4b78      	ldr	r3, [pc, #480]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a77      	ldr	r2, [pc, #476]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	4b75      	ldr	r3, [pc, #468]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a74      	ldr	r2, [pc, #464]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	e00b      	b.n	8008130 <HAL_RCC_OscConfig+0xd8>
 8008118:	4b71      	ldr	r3, [pc, #452]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a70      	ldr	r2, [pc, #448]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800811e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	4b6e      	ldr	r3, [pc, #440]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a6d      	ldr	r2, [pc, #436]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800812a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800812e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d013      	beq.n	8008160 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008138:	f7f9 fd64 	bl	8001c04 <HAL_GetTick>
 800813c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008140:	f7f9 fd60 	bl	8001c04 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b64      	cmp	r3, #100	@ 0x64
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e3d4      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008152:	4b63      	ldr	r3, [pc, #396]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f0      	beq.n	8008140 <HAL_RCC_OscConfig+0xe8>
 800815e:	e014      	b.n	800818a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008160:	f7f9 fd50 	bl	8001c04 <HAL_GetTick>
 8008164:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008168:	f7f9 fd4c 	bl	8001c04 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b64      	cmp	r3, #100	@ 0x64
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e3c0      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800817a:	4b59      	ldr	r3, [pc, #356]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f0      	bne.n	8008168 <HAL_RCC_OscConfig+0x110>
 8008186:	e000      	b.n	800818a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80ca 	beq.w	800832c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008198:	4b51      	ldr	r3, [pc, #324]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081a2:	4b4f      	ldr	r3, [pc, #316]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80081a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <HAL_RCC_OscConfig+0x166>
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	2b18      	cmp	r3, #24
 80081b2:	d156      	bne.n	8008262 <HAL_RCC_OscConfig+0x20a>
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d151      	bne.n	8008262 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081be:	4b48      	ldr	r3, [pc, #288]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <HAL_RCC_OscConfig+0x17e>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e392      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081d6:	4b42      	ldr	r3, [pc, #264]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f023 0219 	bic.w	r2, r3, #25
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	493f      	ldr	r1, [pc, #252]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e8:	f7f9 fd0c 	bl	8001c04 <HAL_GetTick>
 80081ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081f0:	f7f9 fd08 	bl	8001c04 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e37c      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008202:	4b37      	ldr	r3, [pc, #220]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800820e:	f7f9 fd29 	bl	8001c64 <HAL_GetREVID>
 8008212:	4603      	mov	r3, r0
 8008214:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008218:	4293      	cmp	r3, r2
 800821a:	d817      	bhi.n	800824c <HAL_RCC_OscConfig+0x1f4>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b40      	cmp	r3, #64	@ 0x40
 8008222:	d108      	bne.n	8008236 <HAL_RCC_OscConfig+0x1de>
 8008224:	4b2e      	ldr	r3, [pc, #184]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800822c:	4a2c      	ldr	r2, [pc, #176]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800822e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008232:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008234:	e07a      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008236:	4b2a      	ldr	r3, [pc, #168]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	031b      	lsls	r3, r3, #12
 8008244:	4926      	ldr	r1, [pc, #152]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008246:	4313      	orrs	r3, r2
 8008248:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800824a:	e06f      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800824c:	4b24      	ldr	r3, [pc, #144]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	061b      	lsls	r3, r3, #24
 800825a:	4921      	ldr	r1, [pc, #132]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800825c:	4313      	orrs	r3, r2
 800825e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008260:	e064      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d047      	beq.n	80082fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800826a:	4b1d      	ldr	r3, [pc, #116]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f023 0219 	bic.w	r2, r3, #25
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	491a      	ldr	r1, [pc, #104]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008278:	4313      	orrs	r3, r2
 800827a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827c:	f7f9 fcc2 	bl	8001c04 <HAL_GetTick>
 8008280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008284:	f7f9 fcbe 	bl	8001c04 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e332      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008296:	4b12      	ldr	r3, [pc, #72]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f0      	beq.n	8008284 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a2:	f7f9 fcdf 	bl	8001c64 <HAL_GetREVID>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d819      	bhi.n	80082e4 <HAL_RCC_OscConfig+0x28c>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b40      	cmp	r3, #64	@ 0x40
 80082b6:	d108      	bne.n	80082ca <HAL_RCC_OscConfig+0x272>
 80082b8:	4b09      	ldr	r3, [pc, #36]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80082c0:	4a07      	ldr	r2, [pc, #28]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80082c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082c6:	6053      	str	r3, [r2, #4]
 80082c8:	e030      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
 80082ca:	4b05      	ldr	r3, [pc, #20]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	031b      	lsls	r3, r3, #12
 80082d8:	4901      	ldr	r1, [pc, #4]	@ (80082e0 <HAL_RCC_OscConfig+0x288>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	604b      	str	r3, [r1, #4]
 80082de:	e025      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
 80082e0:	58024400 	.word	0x58024400
 80082e4:	4b9a      	ldr	r3, [pc, #616]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	061b      	lsls	r3, r3, #24
 80082f2:	4997      	ldr	r1, [pc, #604]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	604b      	str	r3, [r1, #4]
 80082f8:	e018      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082fa:	4b95      	ldr	r3, [pc, #596]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a94      	ldr	r2, [pc, #592]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008306:	f7f9 fc7d 	bl	8001c04 <HAL_GetTick>
 800830a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800830c:	e008      	b.n	8008320 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800830e:	f7f9 fc79 	bl	8001c04 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d901      	bls.n	8008320 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e2ed      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008320:	4b8b      	ldr	r3, [pc, #556]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f0      	bne.n	800830e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80a9 	beq.w	800848c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800833a:	4b85      	ldr	r3, [pc, #532]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008342:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008344:	4b82      	ldr	r3, [pc, #520]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008348:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b08      	cmp	r3, #8
 800834e:	d007      	beq.n	8008360 <HAL_RCC_OscConfig+0x308>
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b18      	cmp	r3, #24
 8008354:	d13a      	bne.n	80083cc <HAL_RCC_OscConfig+0x374>
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	2b01      	cmp	r3, #1
 800835e:	d135      	bne.n	80083cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008360:	4b7b      	ldr	r3, [pc, #492]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_RCC_OscConfig+0x320>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	2b80      	cmp	r3, #128	@ 0x80
 8008372:	d001      	beq.n	8008378 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e2c1      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008378:	f7f9 fc74 	bl	8001c64 <HAL_GetREVID>
 800837c:	4603      	mov	r3, r0
 800837e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008382:	4293      	cmp	r3, r2
 8008384:	d817      	bhi.n	80083b6 <HAL_RCC_OscConfig+0x35e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	2b20      	cmp	r3, #32
 800838c:	d108      	bne.n	80083a0 <HAL_RCC_OscConfig+0x348>
 800838e:	4b70      	ldr	r3, [pc, #448]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008396:	4a6e      	ldr	r2, [pc, #440]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008398:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800839c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800839e:	e075      	b.n	800848c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083a0:	4b6b      	ldr	r3, [pc, #428]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	069b      	lsls	r3, r3, #26
 80083ae:	4968      	ldr	r1, [pc, #416]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083b4:	e06a      	b.n	800848c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083b6:	4b66      	ldr	r3, [pc, #408]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	061b      	lsls	r3, r3, #24
 80083c4:	4962      	ldr	r1, [pc, #392]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083ca:	e05f      	b.n	800848c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d042      	beq.n	800845a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80083d4:	4b5e      	ldr	r3, [pc, #376]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a5d      	ldr	r2, [pc, #372]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e0:	f7f9 fc10 	bl	8001c04 <HAL_GetTick>
 80083e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083e8:	f7f9 fc0c 	bl	8001c04 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e280      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083fa:	4b55      	ldr	r3, [pc, #340]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0f0      	beq.n	80083e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008406:	f7f9 fc2d 	bl	8001c64 <HAL_GetREVID>
 800840a:	4603      	mov	r3, r0
 800840c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008410:	4293      	cmp	r3, r2
 8008412:	d817      	bhi.n	8008444 <HAL_RCC_OscConfig+0x3ec>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	2b20      	cmp	r3, #32
 800841a:	d108      	bne.n	800842e <HAL_RCC_OscConfig+0x3d6>
 800841c:	4b4c      	ldr	r3, [pc, #304]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008424:	4a4a      	ldr	r2, [pc, #296]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008426:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800842a:	6053      	str	r3, [r2, #4]
 800842c:	e02e      	b.n	800848c <HAL_RCC_OscConfig+0x434>
 800842e:	4b48      	ldr	r3, [pc, #288]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	069b      	lsls	r3, r3, #26
 800843c:	4944      	ldr	r1, [pc, #272]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800843e:	4313      	orrs	r3, r2
 8008440:	604b      	str	r3, [r1, #4]
 8008442:	e023      	b.n	800848c <HAL_RCC_OscConfig+0x434>
 8008444:	4b42      	ldr	r3, [pc, #264]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	061b      	lsls	r3, r3, #24
 8008452:	493f      	ldr	r1, [pc, #252]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008454:	4313      	orrs	r3, r2
 8008456:	60cb      	str	r3, [r1, #12]
 8008458:	e018      	b.n	800848c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800845a:	4b3d      	ldr	r3, [pc, #244]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a3c      	ldr	r2, [pc, #240]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008466:	f7f9 fbcd 	bl	8001c04 <HAL_GetTick>
 800846a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800846c:	e008      	b.n	8008480 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800846e:	f7f9 fbc9 	bl	8001c04 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e23d      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008480:	4b33      	ldr	r3, [pc, #204]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1f0      	bne.n	800846e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0308 	and.w	r3, r3, #8
 8008494:	2b00      	cmp	r3, #0
 8008496:	d036      	beq.n	8008506 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d019      	beq.n	80084d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084a4:	4a2a      	ldr	r2, [pc, #168]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ac:	f7f9 fbaa 	bl	8001c04 <HAL_GetTick>
 80084b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084b2:	e008      	b.n	80084c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084b4:	f7f9 fba6 	bl	8001c04 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e21a      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084c6:	4b22      	ldr	r3, [pc, #136]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0f0      	beq.n	80084b4 <HAL_RCC_OscConfig+0x45c>
 80084d2:	e018      	b.n	8008506 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e0:	f7f9 fb90 	bl	8001c04 <HAL_GetTick>
 80084e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084e8:	f7f9 fb8c 	bl	8001c04 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e200      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084fa:	4b15      	ldr	r3, [pc, #84]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f0      	bne.n	80084e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d039      	beq.n	8008586 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d01c      	beq.n	8008554 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a0c      	ldr	r2, [pc, #48]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008520:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008524:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008526:	f7f9 fb6d 	bl	8001c04 <HAL_GetTick>
 800852a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800852e:	f7f9 fb69 	bl	8001c04 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e1dd      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008540:	4b03      	ldr	r3, [pc, #12]	@ (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0f0      	beq.n	800852e <HAL_RCC_OscConfig+0x4d6>
 800854c:	e01b      	b.n	8008586 <HAL_RCC_OscConfig+0x52e>
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008554:	4b9b      	ldr	r3, [pc, #620]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a9a      	ldr	r2, [pc, #616]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800855a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800855e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008560:	f7f9 fb50 	bl	8001c04 <HAL_GetTick>
 8008564:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008568:	f7f9 fb4c 	bl	8001c04 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e1c0      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800857a:	4b92      	ldr	r3, [pc, #584]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f0      	bne.n	8008568 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0304 	and.w	r3, r3, #4
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 8081 	beq.w	8008696 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008594:	4b8c      	ldr	r3, [pc, #560]	@ (80087c8 <HAL_RCC_OscConfig+0x770>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a8b      	ldr	r2, [pc, #556]	@ (80087c8 <HAL_RCC_OscConfig+0x770>)
 800859a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800859e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085a0:	f7f9 fb30 	bl	8001c04 <HAL_GetTick>
 80085a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085a6:	e008      	b.n	80085ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085a8:	f7f9 fb2c 	bl	8001c04 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b64      	cmp	r3, #100	@ 0x64
 80085b4:	d901      	bls.n	80085ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e1a0      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085ba:	4b83      	ldr	r3, [pc, #524]	@ (80087c8 <HAL_RCC_OscConfig+0x770>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0f0      	beq.n	80085a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d106      	bne.n	80085dc <HAL_RCC_OscConfig+0x584>
 80085ce:	4b7d      	ldr	r3, [pc, #500]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085d2:	4a7c      	ldr	r2, [pc, #496]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085d4:	f043 0301 	orr.w	r3, r3, #1
 80085d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80085da:	e02d      	b.n	8008638 <HAL_RCC_OscConfig+0x5e0>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10c      	bne.n	80085fe <HAL_RCC_OscConfig+0x5a6>
 80085e4:	4b77      	ldr	r3, [pc, #476]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085e8:	4a76      	ldr	r2, [pc, #472]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085ea:	f023 0301 	bic.w	r3, r3, #1
 80085ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80085f0:	4b74      	ldr	r3, [pc, #464]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f4:	4a73      	ldr	r2, [pc, #460]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085f6:	f023 0304 	bic.w	r3, r3, #4
 80085fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80085fc:	e01c      	b.n	8008638 <HAL_RCC_OscConfig+0x5e0>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	2b05      	cmp	r3, #5
 8008604:	d10c      	bne.n	8008620 <HAL_RCC_OscConfig+0x5c8>
 8008606:	4b6f      	ldr	r3, [pc, #444]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860a:	4a6e      	ldr	r2, [pc, #440]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800860c:	f043 0304 	orr.w	r3, r3, #4
 8008610:	6713      	str	r3, [r2, #112]	@ 0x70
 8008612:	4b6c      	ldr	r3, [pc, #432]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008616:	4a6b      	ldr	r2, [pc, #428]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008618:	f043 0301 	orr.w	r3, r3, #1
 800861c:	6713      	str	r3, [r2, #112]	@ 0x70
 800861e:	e00b      	b.n	8008638 <HAL_RCC_OscConfig+0x5e0>
 8008620:	4b68      	ldr	r3, [pc, #416]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008624:	4a67      	ldr	r2, [pc, #412]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008626:	f023 0301 	bic.w	r3, r3, #1
 800862a:	6713      	str	r3, [r2, #112]	@ 0x70
 800862c:	4b65      	ldr	r3, [pc, #404]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800862e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008630:	4a64      	ldr	r2, [pc, #400]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008632:	f023 0304 	bic.w	r3, r3, #4
 8008636:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d015      	beq.n	800866c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008640:	f7f9 fae0 	bl	8001c04 <HAL_GetTick>
 8008644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008646:	e00a      	b.n	800865e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008648:	f7f9 fadc 	bl	8001c04 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008656:	4293      	cmp	r3, r2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e14e      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800865e:	4b59      	ldr	r3, [pc, #356]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0ee      	beq.n	8008648 <HAL_RCC_OscConfig+0x5f0>
 800866a:	e014      	b.n	8008696 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800866c:	f7f9 faca 	bl	8001c04 <HAL_GetTick>
 8008670:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008672:	e00a      	b.n	800868a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008674:	f7f9 fac6 	bl	8001c04 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008682:	4293      	cmp	r3, r2
 8008684:	d901      	bls.n	800868a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e138      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800868a:	4b4e      	ldr	r3, [pc, #312]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800868c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1ee      	bne.n	8008674 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 812d 	beq.w	80088fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80086a0:	4b48      	ldr	r3, [pc, #288]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086a8:	2b18      	cmp	r3, #24
 80086aa:	f000 80bd 	beq.w	8008828 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	f040 809e 	bne.w	80087f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086b8:	4b42      	ldr	r3, [pc, #264]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a41      	ldr	r2, [pc, #260]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c4:	f7f9 fa9e 	bl	8001c04 <HAL_GetTick>
 80086c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086cc:	f7f9 fa9a 	bl	8001c04 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e10e      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086de:	4b39      	ldr	r3, [pc, #228]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f0      	bne.n	80086cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086ea:	4b36      	ldr	r3, [pc, #216]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086ee:	4b37      	ldr	r3, [pc, #220]	@ (80087cc <HAL_RCC_OscConfig+0x774>)
 80086f0:	4013      	ands	r3, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80086fa:	0112      	lsls	r2, r2, #4
 80086fc:	430a      	orrs	r2, r1
 80086fe:	4931      	ldr	r1, [pc, #196]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008700:	4313      	orrs	r3, r2
 8008702:	628b      	str	r3, [r1, #40]	@ 0x28
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008708:	3b01      	subs	r3, #1
 800870a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008712:	3b01      	subs	r3, #1
 8008714:	025b      	lsls	r3, r3, #9
 8008716:	b29b      	uxth	r3, r3
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	3b01      	subs	r3, #1
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008726:	431a      	orrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872c:	3b01      	subs	r3, #1
 800872e:	061b      	lsls	r3, r3, #24
 8008730:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008734:	4923      	ldr	r1, [pc, #140]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008736:	4313      	orrs	r3, r2
 8008738:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800873a:	4b22      	ldr	r3, [pc, #136]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800873c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873e:	4a21      	ldr	r2, [pc, #132]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008740:	f023 0301 	bic.w	r3, r3, #1
 8008744:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008746:	4b1f      	ldr	r3, [pc, #124]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800874a:	4b21      	ldr	r3, [pc, #132]	@ (80087d0 <HAL_RCC_OscConfig+0x778>)
 800874c:	4013      	ands	r3, r2
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008752:	00d2      	lsls	r2, r2, #3
 8008754:	491b      	ldr	r1, [pc, #108]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008756:	4313      	orrs	r3, r2
 8008758:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800875a:	4b1a      	ldr	r3, [pc, #104]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800875c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875e:	f023 020c 	bic.w	r2, r3, #12
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008766:	4917      	ldr	r1, [pc, #92]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008768:	4313      	orrs	r3, r2
 800876a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800876c:	4b15      	ldr	r3, [pc, #84]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800876e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008770:	f023 0202 	bic.w	r2, r3, #2
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008778:	4912      	ldr	r1, [pc, #72]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800877a:	4313      	orrs	r3, r2
 800877c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800877e:	4b11      	ldr	r3, [pc, #68]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008782:	4a10      	ldr	r2, [pc, #64]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008788:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878a:	4b0e      	ldr	r3, [pc, #56]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800878c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878e:	4a0d      	ldr	r2, [pc, #52]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008796:	4b0b      	ldr	r3, [pc, #44]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879a:	4a0a      	ldr	r2, [pc, #40]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800879c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80087a2:	4b08      	ldr	r3, [pc, #32]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80087a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a6:	4a07      	ldr	r2, [pc, #28]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087ae:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a04      	ldr	r2, [pc, #16]	@ (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80087b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ba:	f7f9 fa23 	bl	8001c04 <HAL_GetTick>
 80087be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087c0:	e011      	b.n	80087e6 <HAL_RCC_OscConfig+0x78e>
 80087c2:	bf00      	nop
 80087c4:	58024400 	.word	0x58024400
 80087c8:	58024800 	.word	0x58024800
 80087cc:	fffffc0c 	.word	0xfffffc0c
 80087d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d4:	f7f9 fa16 	bl	8001c04 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e08a      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087e6:	4b47      	ldr	r3, [pc, #284]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0f0      	beq.n	80087d4 <HAL_RCC_OscConfig+0x77c>
 80087f2:	e082      	b.n	80088fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087f4:	4b43      	ldr	r3, [pc, #268]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a42      	ldr	r2, [pc, #264]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80087fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7f9 fa00 	bl	8001c04 <HAL_GetTick>
 8008804:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008808:	f7f9 f9fc 	bl	8001c04 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e070      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800881a:	4b3a      	ldr	r3, [pc, #232]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f0      	bne.n	8008808 <HAL_RCC_OscConfig+0x7b0>
 8008826:	e068      	b.n	80088fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008828:	4b36      	ldr	r3, [pc, #216]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 800882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800882e:	4b35      	ldr	r3, [pc, #212]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008832:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008838:	2b01      	cmp	r3, #1
 800883a:	d031      	beq.n	80088a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f003 0203 	and.w	r2, r3, #3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008846:	429a      	cmp	r2, r3
 8008848:	d12a      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	091b      	lsrs	r3, r3, #4
 800884e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008856:	429a      	cmp	r2, r3
 8008858:	d122      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008864:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008866:	429a      	cmp	r2, r3
 8008868:	d11a      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	0a5b      	lsrs	r3, r3, #9
 800886e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008876:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008878:	429a      	cmp	r2, r3
 800887a:	d111      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008888:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800888a:	429a      	cmp	r2, r3
 800888c:	d108      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	0e1b      	lsrs	r3, r3, #24
 8008892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800889a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800889c:	429a      	cmp	r2, r3
 800889e:	d001      	beq.n	80088a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e02b      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80088a4:	4b17      	ldr	r3, [pc, #92]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a8:	08db      	lsrs	r3, r3, #3
 80088aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d01f      	beq.n	80088fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80088ba:	4b12      	ldr	r3, [pc, #72]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	4a11      	ldr	r2, [pc, #68]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088c0:	f023 0301 	bic.w	r3, r3, #1
 80088c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088c6:	f7f9 f99d 	bl	8001c04 <HAL_GetTick>
 80088ca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80088cc:	bf00      	nop
 80088ce:	f7f9 f999 	bl	8001c04 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d0f9      	beq.n	80088ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088da:	4b0a      	ldr	r3, [pc, #40]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088de:	4b0a      	ldr	r3, [pc, #40]	@ (8008908 <HAL_RCC_OscConfig+0x8b0>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80088e6:	00d2      	lsls	r2, r2, #3
 80088e8:	4906      	ldr	r1, [pc, #24]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80088ee:	4b05      	ldr	r3, [pc, #20]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f2:	4a04      	ldr	r2, [pc, #16]	@ (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088f4:	f043 0301 	orr.w	r3, r3, #1
 80088f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3730      	adds	r7, #48	@ 0x30
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	58024400 	.word	0x58024400
 8008908:	ffff0007 	.word	0xffff0007

0800890c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e19c      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008920:	4b8a      	ldr	r3, [pc, #552]	@ (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 030f 	and.w	r3, r3, #15
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	d910      	bls.n	8008950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800892e:	4b87      	ldr	r3, [pc, #540]	@ (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f023 020f 	bic.w	r2, r3, #15
 8008936:	4985      	ldr	r1, [pc, #532]	@ (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	4313      	orrs	r3, r2
 800893c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800893e:	4b83      	ldr	r3, [pc, #524]	@ (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d001      	beq.n	8008950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e184      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d010      	beq.n	800897e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691a      	ldr	r2, [r3, #16]
 8008960:	4b7b      	ldr	r3, [pc, #492]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008968:	429a      	cmp	r2, r3
 800896a:	d908      	bls.n	800897e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800896c:	4b78      	ldr	r3, [pc, #480]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	4975      	ldr	r1, [pc, #468]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 800897a:	4313      	orrs	r3, r2
 800897c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0308 	and.w	r3, r3, #8
 8008986:	2b00      	cmp	r3, #0
 8008988:	d010      	beq.n	80089ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695a      	ldr	r2, [r3, #20]
 800898e:	4b70      	ldr	r3, [pc, #448]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008996:	429a      	cmp	r2, r3
 8008998:	d908      	bls.n	80089ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800899a:	4b6d      	ldr	r3, [pc, #436]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	496a      	ldr	r1, [pc, #424]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d010      	beq.n	80089da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699a      	ldr	r2, [r3, #24]
 80089bc:	4b64      	ldr	r3, [pc, #400]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d908      	bls.n	80089da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089c8:	4b61      	ldr	r3, [pc, #388]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	495e      	ldr	r1, [pc, #376]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d010      	beq.n	8008a08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69da      	ldr	r2, [r3, #28]
 80089ea:	4b59      	ldr	r3, [pc, #356]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d908      	bls.n	8008a08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089f6:	4b56      	ldr	r3, [pc, #344]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	4953      	ldr	r1, [pc, #332]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d010      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	4b4d      	ldr	r3, [pc, #308]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d908      	bls.n	8008a36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a24:	4b4a      	ldr	r3, [pc, #296]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	f023 020f 	bic.w	r2, r3, #15
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	4947      	ldr	r1, [pc, #284]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d055      	beq.n	8008aee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a42:	4b43      	ldr	r3, [pc, #268]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	4940      	ldr	r1, [pc, #256]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d121      	bne.n	8008aac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0f6      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d107      	bne.n	8008a84 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a74:	4b36      	ldr	r3, [pc, #216]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d115      	bne.n	8008aac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e0ea      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d107      	bne.n	8008a9c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a8c:	4b30      	ldr	r3, [pc, #192]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d109      	bne.n	8008aac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e0de      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0304 	and.w	r3, r3, #4
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e0d6      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008aac:	4b28      	ldr	r3, [pc, #160]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	f023 0207 	bic.w	r2, r3, #7
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	4925      	ldr	r1, [pc, #148]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008abe:	f7f9 f8a1 	bl	8001c04 <HAL_GetTick>
 8008ac2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ac4:	e00a      	b.n	8008adc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ac6:	f7f9 f89d 	bl	8001c04 <HAL_GetTick>
 8008aca:	4602      	mov	r2, r0
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d901      	bls.n	8008adc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e0be      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008adc:	4b1c      	ldr	r3, [pc, #112]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d1eb      	bne.n	8008ac6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d010      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	4b14      	ldr	r3, [pc, #80]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d208      	bcs.n	8008b1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b0a:	4b11      	ldr	r3, [pc, #68]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f023 020f 	bic.w	r2, r3, #15
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	490e      	ldr	r1, [pc, #56]	@ (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d214      	bcs.n	8008b54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b2a:	4b08      	ldr	r3, [pc, #32]	@ (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f023 020f 	bic.w	r2, r3, #15
 8008b32:	4906      	ldr	r1, [pc, #24]	@ (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b3a:	4b04      	ldr	r3, [pc, #16]	@ (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d005      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e086      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
 8008b4c:	52002000 	.word	0x52002000
 8008b50:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d010      	beq.n	8008b82 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691a      	ldr	r2, [r3, #16]
 8008b64:	4b3f      	ldr	r3, [pc, #252]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d208      	bcs.n	8008b82 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b70:	4b3c      	ldr	r3, [pc, #240]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	4939      	ldr	r1, [pc, #228]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0308 	and.w	r3, r3, #8
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d010      	beq.n	8008bb0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	4b34      	ldr	r3, [pc, #208]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d208      	bcs.n	8008bb0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b9e:	4b31      	ldr	r3, [pc, #196]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	492e      	ldr	r1, [pc, #184]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d010      	beq.n	8008bde <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	699a      	ldr	r2, [r3, #24]
 8008bc0:	4b28      	ldr	r3, [pc, #160]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d208      	bcs.n	8008bde <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008bcc:	4b25      	ldr	r3, [pc, #148]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	4922      	ldr	r1, [pc, #136]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d010      	beq.n	8008c0c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69da      	ldr	r2, [r3, #28]
 8008bee:	4b1d      	ldr	r3, [pc, #116]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d208      	bcs.n	8008c0c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	4917      	ldr	r1, [pc, #92]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c0c:	f000 f834 	bl	8008c78 <HAL_RCC_GetSysClockFreq>
 8008c10:	4602      	mov	r2, r0
 8008c12:	4b14      	ldr	r3, [pc, #80]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	4912      	ldr	r1, [pc, #72]	@ (8008c68 <HAL_RCC_ClockConfig+0x35c>)
 8008c1e:	5ccb      	ldrb	r3, [r1, r3]
 8008c20:	f003 031f 	and.w	r3, r3, #31
 8008c24:	fa22 f303 	lsr.w	r3, r2, r3
 8008c28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	4a0d      	ldr	r2, [pc, #52]	@ (8008c68 <HAL_RCC_ClockConfig+0x35c>)
 8008c34:	5cd3      	ldrb	r3, [r2, r3]
 8008c36:	f003 031f 	and.w	r3, r3, #31
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c40:	4a0a      	ldr	r2, [pc, #40]	@ (8008c6c <HAL_RCC_ClockConfig+0x360>)
 8008c42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c44:	4a0a      	ldr	r2, [pc, #40]	@ (8008c70 <HAL_RCC_ClockConfig+0x364>)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c74 <HAL_RCC_ClockConfig+0x368>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7f8 fbc2 	bl	80013d8 <HAL_InitTick>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	58024400 	.word	0x58024400
 8008c68:	080150d8 	.word	0x080150d8
 8008c6c:	24000008 	.word	0x24000008
 8008c70:	24000004 	.word	0x24000004
 8008c74:	2400000c 	.word	0x2400000c

08008c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b089      	sub	sp, #36	@ 0x24
 8008c7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c7e:	4bb3      	ldr	r3, [pc, #716]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c86:	2b18      	cmp	r3, #24
 8008c88:	f200 8155 	bhi.w	8008f36 <HAL_RCC_GetSysClockFreq+0x2be>
 8008c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008cf9 	.word	0x08008cf9
 8008c98:	08008f37 	.word	0x08008f37
 8008c9c:	08008f37 	.word	0x08008f37
 8008ca0:	08008f37 	.word	0x08008f37
 8008ca4:	08008f37 	.word	0x08008f37
 8008ca8:	08008f37 	.word	0x08008f37
 8008cac:	08008f37 	.word	0x08008f37
 8008cb0:	08008f37 	.word	0x08008f37
 8008cb4:	08008d1f 	.word	0x08008d1f
 8008cb8:	08008f37 	.word	0x08008f37
 8008cbc:	08008f37 	.word	0x08008f37
 8008cc0:	08008f37 	.word	0x08008f37
 8008cc4:	08008f37 	.word	0x08008f37
 8008cc8:	08008f37 	.word	0x08008f37
 8008ccc:	08008f37 	.word	0x08008f37
 8008cd0:	08008f37 	.word	0x08008f37
 8008cd4:	08008d25 	.word	0x08008d25
 8008cd8:	08008f37 	.word	0x08008f37
 8008cdc:	08008f37 	.word	0x08008f37
 8008ce0:	08008f37 	.word	0x08008f37
 8008ce4:	08008f37 	.word	0x08008f37
 8008ce8:	08008f37 	.word	0x08008f37
 8008cec:	08008f37 	.word	0x08008f37
 8008cf0:	08008f37 	.word	0x08008f37
 8008cf4:	08008d2b 	.word	0x08008d2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf8:	4b94      	ldr	r3, [pc, #592]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d04:	4b91      	ldr	r3, [pc, #580]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	08db      	lsrs	r3, r3, #3
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	4a90      	ldr	r2, [pc, #576]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
 8008d14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008d16:	e111      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d18:	4b8d      	ldr	r3, [pc, #564]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d1a:	61bb      	str	r3, [r7, #24]
      break;
 8008d1c:	e10e      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008d1e:	4b8d      	ldr	r3, [pc, #564]	@ (8008f54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d20:	61bb      	str	r3, [r7, #24]
      break;
 8008d22:	e10b      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008d24:	4b8c      	ldr	r3, [pc, #560]	@ (8008f58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008d26:	61bb      	str	r3, [r7, #24]
      break;
 8008d28:	e108      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d2a:	4b88      	ldr	r3, [pc, #544]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008d34:	4b85      	ldr	r3, [pc, #532]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d38:	091b      	lsrs	r3, r3, #4
 8008d3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d40:	4b82      	ldr	r3, [pc, #520]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d4a:	4b80      	ldr	r3, [pc, #512]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d4e:	08db      	lsrs	r3, r3, #3
 8008d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 80e1 	beq.w	8008f30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	f000 8083 	beq.w	8008e7c <HAL_RCC_GetSysClockFreq+0x204>
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	f200 80a1 	bhi.w	8008ec0 <HAL_RCC_GetSysClockFreq+0x248>
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <HAL_RCC_GetSysClockFreq+0x114>
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d056      	beq.n	8008e38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d8a:	e099      	b.n	8008ec0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d02d      	beq.n	8008df4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d98:	4b6c      	ldr	r3, [pc, #432]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	08db      	lsrs	r3, r3, #3
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	4a6b      	ldr	r2, [pc, #428]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008da4:	fa22 f303 	lsr.w	r3, r2, r3
 8008da8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	ee07 3a90 	vmov	s15, r3
 8008db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc2:	4b62      	ldr	r3, [pc, #392]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dd6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008df2:	e087      	b.n	8008f04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008f60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e06:	4b51      	ldr	r3, [pc, #324]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e36:	e065      	b.n	8008f04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008f64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4a:	4b40      	ldr	r3, [pc, #256]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e7a:	e043      	b.n	8008f04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008f68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ea2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ebe:	e021      	b.n	8008f04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008f64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ee6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008f04:	4b11      	ldr	r3, [pc, #68]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f08:	0a5b      	lsrs	r3, r3, #9
 8008f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f0e:	3301      	adds	r3, #1
 8008f10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	ee07 3a90 	vmov	s15, r3
 8008f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f28:	ee17 3a90 	vmov	r3, s15
 8008f2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008f2e:	e005      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61bb      	str	r3, [r7, #24]
      break;
 8008f34:	e002      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008f36:	4b07      	ldr	r3, [pc, #28]	@ (8008f54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f38:	61bb      	str	r3, [r7, #24]
      break;
 8008f3a:	bf00      	nop
  }

  return sysclockfreq;
 8008f3c:	69bb      	ldr	r3, [r7, #24]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3724      	adds	r7, #36	@ 0x24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	03d09000 	.word	0x03d09000
 8008f54:	003d0900 	.word	0x003d0900
 8008f58:	017d7840 	.word	0x017d7840
 8008f5c:	46000000 	.word	0x46000000
 8008f60:	4c742400 	.word	0x4c742400
 8008f64:	4a742400 	.word	0x4a742400
 8008f68:	4bbebc20 	.word	0x4bbebc20

08008f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f72:	f7ff fe81 	bl	8008c78 <HAL_RCC_GetSysClockFreq>
 8008f76:	4602      	mov	r2, r0
 8008f78:	4b10      	ldr	r3, [pc, #64]	@ (8008fbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	0a1b      	lsrs	r3, r3, #8
 8008f7e:	f003 030f 	and.w	r3, r3, #15
 8008f82:	490f      	ldr	r1, [pc, #60]	@ (8008fc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f84:	5ccb      	ldrb	r3, [r1, r3]
 8008f86:	f003 031f 	and.w	r3, r3, #31
 8008f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f90:	4b0a      	ldr	r3, [pc, #40]	@ (8008fbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	f003 030f 	and.w	r3, r3, #15
 8008f98:	4a09      	ldr	r2, [pc, #36]	@ (8008fc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f9a:	5cd3      	ldrb	r3, [r2, r3]
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa6:	4a07      	ldr	r2, [pc, #28]	@ (8008fc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008fa8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008faa:	4a07      	ldr	r2, [pc, #28]	@ (8008fc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008fb0:	4b04      	ldr	r3, [pc, #16]	@ (8008fc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	080150d8 	.word	0x080150d8
 8008fc4:	24000008 	.word	0x24000008
 8008fc8:	24000004 	.word	0x24000004

08008fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008fd0:	f7ff ffcc 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	4b06      	ldr	r3, [pc, #24]	@ (8008ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	091b      	lsrs	r3, r3, #4
 8008fdc:	f003 0307 	and.w	r3, r3, #7
 8008fe0:	4904      	ldr	r1, [pc, #16]	@ (8008ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fe2:	5ccb      	ldrb	r3, [r1, r3]
 8008fe4:	f003 031f 	and.w	r3, r3, #31
 8008fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	58024400 	.word	0x58024400
 8008ff4:	080150d8 	.word	0x080150d8

08008ff8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	223f      	movs	r2, #63	@ 0x3f
 8009006:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009008:	4b1a      	ldr	r3, [pc, #104]	@ (8009074 <HAL_RCC_GetClockConfig+0x7c>)
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	f003 0207 	and.w	r2, r3, #7
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009014:	4b17      	ldr	r3, [pc, #92]	@ (8009074 <HAL_RCC_GetClockConfig+0x7c>)
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009020:	4b14      	ldr	r3, [pc, #80]	@ (8009074 <HAL_RCC_GetClockConfig+0x7c>)
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f003 020f 	and.w	r2, r3, #15
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800902c:	4b11      	ldr	r3, [pc, #68]	@ (8009074 <HAL_RCC_GetClockConfig+0x7c>)
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009038:	4b0e      	ldr	r3, [pc, #56]	@ (8009074 <HAL_RCC_GetClockConfig+0x7c>)
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009044:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <HAL_RCC_GetClockConfig+0x7c>)
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009050:	4b08      	ldr	r3, [pc, #32]	@ (8009074 <HAL_RCC_GetClockConfig+0x7c>)
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800905c:	4b06      	ldr	r3, [pc, #24]	@ (8009078 <HAL_RCC_GetClockConfig+0x80>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 020f 	and.w	r2, r3, #15
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	601a      	str	r2, [r3, #0]
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	58024400 	.word	0x58024400
 8009078:	52002000 	.word	0x52002000

0800907c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800907c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009080:	b0ca      	sub	sp, #296	@ 0x128
 8009082:	af00      	add	r7, sp, #0
 8009084:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009088:	2300      	movs	r3, #0
 800908a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800908e:	2300      	movs	r3, #0
 8009090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80090a0:	2500      	movs	r5, #0
 80090a2:	ea54 0305 	orrs.w	r3, r4, r5
 80090a6:	d049      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090b2:	d02f      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80090b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090b8:	d828      	bhi.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80090ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090be:	d01a      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80090c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090c4:	d822      	bhi.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80090ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090ce:	d007      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80090d0:	e01c      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d2:	4bb8      	ldr	r3, [pc, #736]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d6:	4ab7      	ldr	r2, [pc, #732]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090de:	e01a      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e4:	3308      	adds	r3, #8
 80090e6:	2102      	movs	r1, #2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 fb61 	bl	800b7b0 <RCCEx_PLL2_Config>
 80090ee:	4603      	mov	r3, r0
 80090f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090f4:	e00f      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fa:	3328      	adds	r3, #40	@ 0x28
 80090fc:	2102      	movs	r1, #2
 80090fe:	4618      	mov	r0, r3
 8009100:	f002 fc08 	bl	800b914 <RCCEx_PLL3_Config>
 8009104:	4603      	mov	r3, r0
 8009106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800910a:	e004      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009112:	e000      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800911e:	4ba5      	ldr	r3, [pc, #660]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009122:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800912a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800912c:	4aa1      	ldr	r2, [pc, #644]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800912e:	430b      	orrs	r3, r1
 8009130:	6513      	str	r3, [r2, #80]	@ 0x50
 8009132:	e003      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009138:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800913c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009148:	f04f 0900 	mov.w	r9, #0
 800914c:	ea58 0309 	orrs.w	r3, r8, r9
 8009150:	d047      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009158:	2b04      	cmp	r3, #4
 800915a:	d82a      	bhi.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800915c:	a201      	add	r2, pc, #4	@ (adr r2, 8009164 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800915e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009162:	bf00      	nop
 8009164:	08009179 	.word	0x08009179
 8009168:	08009187 	.word	0x08009187
 800916c:	0800919d 	.word	0x0800919d
 8009170:	080091bb 	.word	0x080091bb
 8009174:	080091bb 	.word	0x080091bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009178:	4b8e      	ldr	r3, [pc, #568]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800917a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917c:	4a8d      	ldr	r2, [pc, #564]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800917e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009184:	e01a      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800918a:	3308      	adds	r3, #8
 800918c:	2100      	movs	r1, #0
 800918e:	4618      	mov	r0, r3
 8009190:	f002 fb0e 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009194:	4603      	mov	r3, r0
 8009196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800919a:	e00f      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800919c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a0:	3328      	adds	r3, #40	@ 0x28
 80091a2:	2100      	movs	r1, #0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f002 fbb5 	bl	800b914 <RCCEx_PLL3_Config>
 80091aa:	4603      	mov	r3, r0
 80091ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091b0:	e004      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091b8:	e000      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80091ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091c4:	4b7b      	ldr	r3, [pc, #492]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091c8:	f023 0107 	bic.w	r1, r3, #7
 80091cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d2:	4a78      	ldr	r2, [pc, #480]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091d4:	430b      	orrs	r3, r1
 80091d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80091d8:	e003      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80091e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80091ee:	f04f 0b00 	mov.w	fp, #0
 80091f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80091f6:	d04c      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80091f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009202:	d030      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009208:	d829      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800920a:	2bc0      	cmp	r3, #192	@ 0xc0
 800920c:	d02d      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800920e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009210:	d825      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009212:	2b80      	cmp	r3, #128	@ 0x80
 8009214:	d018      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009216:	2b80      	cmp	r3, #128	@ 0x80
 8009218:	d821      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d002      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800921e:	2b40      	cmp	r3, #64	@ 0x40
 8009220:	d007      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009222:	e01c      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009224:	4b63      	ldr	r3, [pc, #396]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009228:	4a62      	ldr	r2, [pc, #392]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800922a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800922e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009230:	e01c      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009236:	3308      	adds	r3, #8
 8009238:	2100      	movs	r1, #0
 800923a:	4618      	mov	r0, r3
 800923c:	f002 fab8 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009246:	e011      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924c:	3328      	adds	r3, #40	@ 0x28
 800924e:	2100      	movs	r1, #0
 8009250:	4618      	mov	r0, r3
 8009252:	f002 fb5f 	bl	800b914 <RCCEx_PLL3_Config>
 8009256:	4603      	mov	r3, r0
 8009258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800925c:	e006      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009264:	e002      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009266:	bf00      	nop
 8009268:	e000      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800926a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800926c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009274:	4b4f      	ldr	r3, [pc, #316]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009278:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800927c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009282:	4a4c      	ldr	r2, [pc, #304]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009284:	430b      	orrs	r3, r1
 8009286:	6513      	str	r3, [r2, #80]	@ 0x50
 8009288:	e003      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800928e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800929e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80092a2:	2300      	movs	r3, #0
 80092a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80092a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80092ac:	460b      	mov	r3, r1
 80092ae:	4313      	orrs	r3, r2
 80092b0:	d053      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80092b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80092ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092be:	d035      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80092c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092c4:	d82e      	bhi.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092ca:	d031      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80092cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092d0:	d828      	bhi.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092d6:	d01a      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80092d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092dc:	d822      	bhi.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80092e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092e6:	d007      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80092e8:	e01c      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ea:	4b32      	ldr	r3, [pc, #200]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ee:	4a31      	ldr	r2, [pc, #196]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092f6:	e01c      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fc:	3308      	adds	r3, #8
 80092fe:	2100      	movs	r1, #0
 8009300:	4618      	mov	r0, r3
 8009302:	f002 fa55 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800930c:	e011      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800930e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009312:	3328      	adds	r3, #40	@ 0x28
 8009314:	2100      	movs	r1, #0
 8009316:	4618      	mov	r0, r3
 8009318:	f002 fafc 	bl	800b914 <RCCEx_PLL3_Config>
 800931c:	4603      	mov	r3, r0
 800931e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009322:	e006      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800932a:	e002      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800932c:	bf00      	nop
 800932e:	e000      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10b      	bne.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800933a:	4b1e      	ldr	r3, [pc, #120]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800933c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800933e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009346:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800934a:	4a1a      	ldr	r2, [pc, #104]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800934c:	430b      	orrs	r3, r1
 800934e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009350:	e003      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009366:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800936a:	2300      	movs	r3, #0
 800936c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009370:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009374:	460b      	mov	r3, r1
 8009376:	4313      	orrs	r3, r2
 8009378:	d056      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009382:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009386:	d038      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800938c:	d831      	bhi.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800938e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009392:	d034      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009394:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009398:	d82b      	bhi.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800939a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800939e:	d01d      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80093a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093a4:	d825      	bhi.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d006      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80093aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093ae:	d00a      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80093b0:	e01f      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093b2:	bf00      	nop
 80093b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b8:	4ba2      	ldr	r3, [pc, #648]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	4aa1      	ldr	r2, [pc, #644]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093c4:	e01c      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ca:	3308      	adds	r3, #8
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 f9ee 	bl	800b7b0 <RCCEx_PLL2_Config>
 80093d4:	4603      	mov	r3, r0
 80093d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80093da:	e011      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e0:	3328      	adds	r3, #40	@ 0x28
 80093e2:	2100      	movs	r1, #0
 80093e4:	4618      	mov	r0, r3
 80093e6:	f002 fa95 	bl	800b914 <RCCEx_PLL3_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093f0:	e006      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093f8:	e002      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093fa:	bf00      	nop
 80093fc:	e000      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10b      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009408:	4b8e      	ldr	r3, [pc, #568]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800940a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800940c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009414:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009418:	4a8a      	ldr	r2, [pc, #552]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800941a:	430b      	orrs	r3, r1
 800941c:	6593      	str	r3, [r2, #88]	@ 0x58
 800941e:	e003      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009424:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009434:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009438:	2300      	movs	r3, #0
 800943a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800943e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009442:	460b      	mov	r3, r1
 8009444:	4313      	orrs	r3, r2
 8009446:	d03a      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800944e:	2b30      	cmp	r3, #48	@ 0x30
 8009450:	d01f      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009452:	2b30      	cmp	r3, #48	@ 0x30
 8009454:	d819      	bhi.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009456:	2b20      	cmp	r3, #32
 8009458:	d00c      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800945a:	2b20      	cmp	r3, #32
 800945c:	d815      	bhi.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d019      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009462:	2b10      	cmp	r3, #16
 8009464:	d111      	bne.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009466:	4b77      	ldr	r3, [pc, #476]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800946a:	4a76      	ldr	r2, [pc, #472]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800946c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009470:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009472:	e011      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009478:	3308      	adds	r3, #8
 800947a:	2102      	movs	r1, #2
 800947c:	4618      	mov	r0, r3
 800947e:	f002 f997 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009482:	4603      	mov	r3, r0
 8009484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009488:	e006      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009490:	e002      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009492:	bf00      	nop
 8009494:	e000      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80094a0:	4b68      	ldr	r3, [pc, #416]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80094a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ae:	4a65      	ldr	r2, [pc, #404]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094b0:	430b      	orrs	r3, r1
 80094b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094b4:	e003      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80094ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80094ce:	2300      	movs	r3, #0
 80094d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80094d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80094d8:	460b      	mov	r3, r1
 80094da:	4313      	orrs	r3, r2
 80094dc:	d051      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80094de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094e8:	d035      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80094ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094ee:	d82e      	bhi.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094f4:	d031      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80094f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094fa:	d828      	bhi.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009500:	d01a      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009506:	d822      	bhi.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800950c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009510:	d007      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009512:	e01c      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009514:	4b4b      	ldr	r3, [pc, #300]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009518:	4a4a      	ldr	r2, [pc, #296]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800951a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800951e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009520:	e01c      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009526:	3308      	adds	r3, #8
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f002 f940 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009530:	4603      	mov	r3, r0
 8009532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009536:	e011      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953c:	3328      	adds	r3, #40	@ 0x28
 800953e:	2100      	movs	r1, #0
 8009540:	4618      	mov	r0, r3
 8009542:	f002 f9e7 	bl	800b914 <RCCEx_PLL3_Config>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800954c:	e006      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009554:	e002      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009556:	bf00      	nop
 8009558:	e000      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800955a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800955c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009564:	4b37      	ldr	r3, [pc, #220]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009568:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009572:	4a34      	ldr	r2, [pc, #208]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009574:	430b      	orrs	r3, r1
 8009576:	6513      	str	r3, [r2, #80]	@ 0x50
 8009578:	e003      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800957a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800957e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800958e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009592:	2300      	movs	r3, #0
 8009594:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009598:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800959c:	460b      	mov	r3, r1
 800959e:	4313      	orrs	r3, r2
 80095a0:	d056      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80095a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095ac:	d033      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80095ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095b2:	d82c      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095b8:	d02f      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80095ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095be:	d826      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095c4:	d02b      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80095c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095ca:	d820      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095d0:	d012      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80095d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095d6:	d81a      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d022      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80095dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095e0:	d115      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e6:	3308      	adds	r3, #8
 80095e8:	2101      	movs	r1, #1
 80095ea:	4618      	mov	r0, r3
 80095ec:	f002 f8e0 	bl	800b7b0 <RCCEx_PLL2_Config>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80095f6:	e015      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fc:	3328      	adds	r3, #40	@ 0x28
 80095fe:	2101      	movs	r1, #1
 8009600:	4618      	mov	r0, r3
 8009602:	f002 f987 	bl	800b914 <RCCEx_PLL3_Config>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800960c:	e00a      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009614:	e006      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009616:	bf00      	nop
 8009618:	e004      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800961a:	bf00      	nop
 800961c:	e002      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800961e:	bf00      	nop
 8009620:	e000      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10d      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800962c:	4b05      	ldr	r3, [pc, #20]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800962e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009630:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800963a:	4a02      	ldr	r2, [pc, #8]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800963c:	430b      	orrs	r3, r1
 800963e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009640:	e006      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009642:	bf00      	nop
 8009644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800964c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800965c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009660:	2300      	movs	r3, #0
 8009662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009666:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800966a:	460b      	mov	r3, r1
 800966c:	4313      	orrs	r3, r2
 800966e:	d055      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009674:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800967c:	d033      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800967e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009682:	d82c      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009688:	d02f      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800968a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800968e:	d826      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009690:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009694:	d02b      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009696:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800969a:	d820      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800969c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096a0:	d012      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80096a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096a6:	d81a      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x662>
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d022      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80096ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096b0:	d115      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b6:	3308      	adds	r3, #8
 80096b8:	2101      	movs	r1, #1
 80096ba:	4618      	mov	r0, r3
 80096bc:	f002 f878 	bl	800b7b0 <RCCEx_PLL2_Config>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096c6:	e015      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096cc:	3328      	adds	r3, #40	@ 0x28
 80096ce:	2101      	movs	r1, #1
 80096d0:	4618      	mov	r0, r3
 80096d2:	f002 f91f 	bl	800b914 <RCCEx_PLL3_Config>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096dc:	e00a      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096e4:	e006      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096e6:	bf00      	nop
 80096e8:	e004      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096ea:	bf00      	nop
 80096ec:	e002      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096ee:	bf00      	nop
 80096f0:	e000      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10b      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096fc:	4ba3      	ldr	r3, [pc, #652]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009700:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800970c:	4a9f      	ldr	r2, [pc, #636]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800970e:	430b      	orrs	r3, r1
 8009710:	6593      	str	r3, [r2, #88]	@ 0x58
 8009712:	e003      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800971c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009728:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800972c:	2300      	movs	r3, #0
 800972e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009732:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009736:	460b      	mov	r3, r1
 8009738:	4313      	orrs	r3, r2
 800973a:	d037      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800973c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009746:	d00e      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800974c:	d816      	bhi.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800974e:	2b00      	cmp	r3, #0
 8009750:	d018      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009756:	d111      	bne.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009758:	4b8c      	ldr	r3, [pc, #560]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800975a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800975c:	4a8b      	ldr	r2, [pc, #556]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800975e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009764:	e00f      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976a:	3308      	adds	r3, #8
 800976c:	2101      	movs	r1, #1
 800976e:	4618      	mov	r0, r3
 8009770:	f002 f81e 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009774:	4603      	mov	r3, r0
 8009776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800977a:	e004      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009782:	e000      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800978e:	4b7f      	ldr	r3, [pc, #508]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009792:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800979c:	4a7b      	ldr	r2, [pc, #492]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800979e:	430b      	orrs	r3, r1
 80097a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80097a2:	e003      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80097ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80097b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097bc:	2300      	movs	r3, #0
 80097be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80097c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4313      	orrs	r3, r2
 80097ca:	d039      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80097cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d81c      	bhi.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80097d6:	a201      	add	r2, pc, #4	@ (adr r2, 80097dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	08009819 	.word	0x08009819
 80097e0:	080097ed 	.word	0x080097ed
 80097e4:	080097fb 	.word	0x080097fb
 80097e8:	08009819 	.word	0x08009819
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ec:	4b67      	ldr	r3, [pc, #412]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f0:	4a66      	ldr	r2, [pc, #408]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097f8:	e00f      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fe:	3308      	adds	r3, #8
 8009800:	2102      	movs	r1, #2
 8009802:	4618      	mov	r0, r3
 8009804:	f001 ffd4 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009808:	4603      	mov	r3, r0
 800980a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800980e:	e004      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009816:	e000      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800981a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10a      	bne.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009822:	4b5a      	ldr	r3, [pc, #360]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009826:	f023 0103 	bic.w	r1, r3, #3
 800982a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009830:	4a56      	ldr	r2, [pc, #344]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009832:	430b      	orrs	r3, r1
 8009834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009836:	e003      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800983c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800984c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009850:	2300      	movs	r3, #0
 8009852:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009856:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800985a:	460b      	mov	r3, r1
 800985c:	4313      	orrs	r3, r2
 800985e:	f000 809f 	beq.w	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009862:	4b4b      	ldr	r3, [pc, #300]	@ (8009990 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a4a      	ldr	r2, [pc, #296]	@ (8009990 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800986c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800986e:	f7f8 f9c9 	bl	8001c04 <HAL_GetTick>
 8009872:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009876:	e00b      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009878:	f7f8 f9c4 	bl	8001c04 <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	2b64      	cmp	r3, #100	@ 0x64
 8009886:	d903      	bls.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800988e:	e005      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009890:	4b3f      	ldr	r3, [pc, #252]	@ (8009990 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0ed      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800989c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d179      	bne.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80098a4:	4b39      	ldr	r3, [pc, #228]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80098a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098b0:	4053      	eors	r3, r2
 80098b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d015      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098ba:	4b34      	ldr	r3, [pc, #208]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098c6:	4b31      	ldr	r3, [pc, #196]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ca:	4a30      	ldr	r2, [pc, #192]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098d2:	4b2e      	ldr	r3, [pc, #184]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098d6:	4a2d      	ldr	r2, [pc, #180]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80098de:	4a2b      	ldr	r2, [pc, #172]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f2:	d118      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f4:	f7f8 f986 	bl	8001c04 <HAL_GetTick>
 80098f8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098fc:	e00d      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098fe:	f7f8 f981 	bl	8001c04 <HAL_GetTick>
 8009902:	4602      	mov	r2, r0
 8009904:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009908:	1ad2      	subs	r2, r2, r3
 800990a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800990e:	429a      	cmp	r2, r3
 8009910:	d903      	bls.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009918:	e005      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800991a:	4b1c      	ldr	r3, [pc, #112]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800991c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0eb      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800992a:	2b00      	cmp	r3, #0
 800992c:	d129      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800992e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009932:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800993a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800993e:	d10e      	bne.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009940:	4b12      	ldr	r3, [pc, #72]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009950:	091a      	lsrs	r2, r3, #4
 8009952:	4b10      	ldr	r3, [pc, #64]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009954:	4013      	ands	r3, r2
 8009956:	4a0d      	ldr	r2, [pc, #52]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009958:	430b      	orrs	r3, r1
 800995a:	6113      	str	r3, [r2, #16]
 800995c:	e005      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800995e:	4b0b      	ldr	r3, [pc, #44]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	4a0a      	ldr	r2, [pc, #40]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009964:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009968:	6113      	str	r3, [r2, #16]
 800996a:	4b08      	ldr	r3, [pc, #32]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800996c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800996e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009972:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800997a:	4a04      	ldr	r2, [pc, #16]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800997c:	430b      	orrs	r3, r1
 800997e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009980:	e00e      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800998a:	e009      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800998c:	58024400 	.word	0x58024400
 8009990:	58024800 	.word	0x58024800
 8009994:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800999c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f002 0301 	and.w	r3, r2, #1
 80099ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099b0:	2300      	movs	r3, #0
 80099b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4313      	orrs	r3, r2
 80099be:	f000 8089 	beq.w	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80099c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099c8:	2b28      	cmp	r3, #40	@ 0x28
 80099ca:	d86b      	bhi.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80099cc:	a201      	add	r2, pc, #4	@ (adr r2, 80099d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80099ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d2:	bf00      	nop
 80099d4:	08009aad 	.word	0x08009aad
 80099d8:	08009aa5 	.word	0x08009aa5
 80099dc:	08009aa5 	.word	0x08009aa5
 80099e0:	08009aa5 	.word	0x08009aa5
 80099e4:	08009aa5 	.word	0x08009aa5
 80099e8:	08009aa5 	.word	0x08009aa5
 80099ec:	08009aa5 	.word	0x08009aa5
 80099f0:	08009aa5 	.word	0x08009aa5
 80099f4:	08009a79 	.word	0x08009a79
 80099f8:	08009aa5 	.word	0x08009aa5
 80099fc:	08009aa5 	.word	0x08009aa5
 8009a00:	08009aa5 	.word	0x08009aa5
 8009a04:	08009aa5 	.word	0x08009aa5
 8009a08:	08009aa5 	.word	0x08009aa5
 8009a0c:	08009aa5 	.word	0x08009aa5
 8009a10:	08009aa5 	.word	0x08009aa5
 8009a14:	08009a8f 	.word	0x08009a8f
 8009a18:	08009aa5 	.word	0x08009aa5
 8009a1c:	08009aa5 	.word	0x08009aa5
 8009a20:	08009aa5 	.word	0x08009aa5
 8009a24:	08009aa5 	.word	0x08009aa5
 8009a28:	08009aa5 	.word	0x08009aa5
 8009a2c:	08009aa5 	.word	0x08009aa5
 8009a30:	08009aa5 	.word	0x08009aa5
 8009a34:	08009aad 	.word	0x08009aad
 8009a38:	08009aa5 	.word	0x08009aa5
 8009a3c:	08009aa5 	.word	0x08009aa5
 8009a40:	08009aa5 	.word	0x08009aa5
 8009a44:	08009aa5 	.word	0x08009aa5
 8009a48:	08009aa5 	.word	0x08009aa5
 8009a4c:	08009aa5 	.word	0x08009aa5
 8009a50:	08009aa5 	.word	0x08009aa5
 8009a54:	08009aad 	.word	0x08009aad
 8009a58:	08009aa5 	.word	0x08009aa5
 8009a5c:	08009aa5 	.word	0x08009aa5
 8009a60:	08009aa5 	.word	0x08009aa5
 8009a64:	08009aa5 	.word	0x08009aa5
 8009a68:	08009aa5 	.word	0x08009aa5
 8009a6c:	08009aa5 	.word	0x08009aa5
 8009a70:	08009aa5 	.word	0x08009aa5
 8009a74:	08009aad 	.word	0x08009aad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	2101      	movs	r1, #1
 8009a80:	4618      	mov	r0, r3
 8009a82:	f001 fe95 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009a86:	4603      	mov	r3, r0
 8009a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a8c:	e00f      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a92:	3328      	adds	r3, #40	@ 0x28
 8009a94:	2101      	movs	r1, #1
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 ff3c 	bl	800b914 <RCCEx_PLL3_Config>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009aa2:	e004      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aaa:	e000      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10a      	bne.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ab6:	4bbf      	ldr	r3, [pc, #764]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ac4:	4abb      	ldr	r2, [pc, #748]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8009aca:	e003      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f002 0302 	and.w	r3, r2, #2
 8009ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009aea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009aee:	460b      	mov	r3, r1
 8009af0:	4313      	orrs	r3, r2
 8009af2:	d041      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	d824      	bhi.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009afe:	a201      	add	r2, pc, #4	@ (adr r2, 8009b04 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b51 	.word	0x08009b51
 8009b08:	08009b1d 	.word	0x08009b1d
 8009b0c:	08009b33 	.word	0x08009b33
 8009b10:	08009b51 	.word	0x08009b51
 8009b14:	08009b51 	.word	0x08009b51
 8009b18:	08009b51 	.word	0x08009b51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b20:	3308      	adds	r3, #8
 8009b22:	2101      	movs	r1, #1
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 fe43 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b30:	e00f      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b36:	3328      	adds	r3, #40	@ 0x28
 8009b38:	2101      	movs	r1, #1
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 feea 	bl	800b914 <RCCEx_PLL3_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b46:	e004      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b4e:	e000      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10a      	bne.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b5a:	4b96      	ldr	r3, [pc, #600]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5e:	f023 0107 	bic.w	r1, r3, #7
 8009b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b68:	4a92      	ldr	r2, [pc, #584]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b6a:	430b      	orrs	r3, r1
 8009b6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b6e:	e003      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	f002 0304 	and.w	r3, r2, #4
 8009b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4313      	orrs	r3, r2
 8009b96:	d044      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ba0:	2b05      	cmp	r3, #5
 8009ba2:	d825      	bhi.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009baa:	bf00      	nop
 8009bac:	08009bf9 	.word	0x08009bf9
 8009bb0:	08009bc5 	.word	0x08009bc5
 8009bb4:	08009bdb 	.word	0x08009bdb
 8009bb8:	08009bf9 	.word	0x08009bf9
 8009bbc:	08009bf9 	.word	0x08009bf9
 8009bc0:	08009bf9 	.word	0x08009bf9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc8:	3308      	adds	r3, #8
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 fdef 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009bd8:	e00f      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bde:	3328      	adds	r3, #40	@ 0x28
 8009be0:	2101      	movs	r1, #1
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 fe96 	bl	800b914 <RCCEx_PLL3_Config>
 8009be8:	4603      	mov	r3, r0
 8009bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009bee:	e004      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bf6:	e000      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10b      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c02:	4b6c      	ldr	r3, [pc, #432]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c06:	f023 0107 	bic.w	r1, r3, #7
 8009c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c12:	4a68      	ldr	r2, [pc, #416]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c14:	430b      	orrs	r3, r1
 8009c16:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c18:	e003      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	f002 0320 	and.w	r3, r2, #32
 8009c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c32:	2300      	movs	r3, #0
 8009c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	d055      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c4e:	d033      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c54:	d82c      	bhi.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c5a:	d02f      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c60:	d826      	bhi.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c66:	d02b      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009c68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c6c:	d820      	bhi.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c72:	d012      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c78:	d81a      	bhi.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d022      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c82:	d115      	bne.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c88:	3308      	adds	r3, #8
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f001 fd8f 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c98:	e015      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9e:	3328      	adds	r3, #40	@ 0x28
 8009ca0:	2102      	movs	r1, #2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f001 fe36 	bl	800b914 <RCCEx_PLL3_Config>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009cae:	e00a      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cb6:	e006      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cb8:	bf00      	nop
 8009cba:	e004      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cbc:	bf00      	nop
 8009cbe:	e002      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cc0:	bf00      	nop
 8009cc2:	e000      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10b      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cce:	4b39      	ldr	r3, [pc, #228]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cd2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cde:	4a35      	ldr	r2, [pc, #212]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ce4:	e003      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d04:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	d058      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d16:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d1a:	d033      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009d1c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d20:	d82c      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d26:	d02f      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d2c:	d826      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d32:	d02b      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009d34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d38:	d820      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d3e:	d012      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d44:	d81a      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d022      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d4e:	d115      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d54:	3308      	adds	r3, #8
 8009d56:	2100      	movs	r1, #0
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 fd29 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d64:	e015      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6a:	3328      	adds	r3, #40	@ 0x28
 8009d6c:	2102      	movs	r1, #2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f001 fdd0 	bl	800b914 <RCCEx_PLL3_Config>
 8009d74:	4603      	mov	r3, r0
 8009d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d7a:	e00a      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d82:	e006      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d84:	bf00      	nop
 8009d86:	e004      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d88:	bf00      	nop
 8009d8a:	e002      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d8c:	bf00      	nop
 8009d8e:	e000      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10e      	bne.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d9a:	4b06      	ldr	r3, [pc, #24]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d9e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009daa:	4a02      	ldr	r2, [pc, #8]	@ (8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009dac:	430b      	orrs	r3, r1
 8009dae:	6593      	str	r3, [r2, #88]	@ 0x58
 8009db0:	e006      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009db2:	bf00      	nop
 8009db4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009dd6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	d055      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009de8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009dec:	d033      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009dee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009df2:	d82c      	bhi.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009df8:	d02f      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009dfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dfe:	d826      	bhi.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e00:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e04:	d02b      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009e06:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e0a:	d820      	bhi.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e10:	d012      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e16:	d81a      	bhi.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d022      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e20:	d115      	bne.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e26:	3308      	adds	r3, #8
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 fcc0 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e36:	e015      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3c:	3328      	adds	r3, #40	@ 0x28
 8009e3e:	2102      	movs	r1, #2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 fd67 	bl	800b914 <RCCEx_PLL3_Config>
 8009e46:	4603      	mov	r3, r0
 8009e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e4c:	e00a      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e54:	e006      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e56:	bf00      	nop
 8009e58:	e004      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e5a:	bf00      	nop
 8009e5c:	e002      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e5e:	bf00      	nop
 8009e60:	e000      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10b      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e6c:	4ba1      	ldr	r3, [pc, #644]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e70:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e7c:	4a9d      	ldr	r2, [pc, #628]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e7e:	430b      	orrs	r3, r1
 8009e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e82:	e003      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f002 0308 	and.w	r3, r2, #8
 8009e98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ea2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	d01e      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eb8:	d10c      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ebe:	3328      	adds	r3, #40	@ 0x28
 8009ec0:	2102      	movs	r1, #2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fd26 	bl	800b914 <RCCEx_PLL3_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ed4:	4b87      	ldr	r3, [pc, #540]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ed8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ee4:	4a83      	ldr	r2, [pc, #524]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee6:	430b      	orrs	r3, r1
 8009ee8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f002 0310 	and.w	r3, r2, #16
 8009ef6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009efa:	2300      	movs	r3, #0
 8009efc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009f04:	460b      	mov	r3, r1
 8009f06:	4313      	orrs	r3, r2
 8009f08:	d01e      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f16:	d10c      	bne.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f1c:	3328      	adds	r3, #40	@ 0x28
 8009f1e:	2102      	movs	r1, #2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f001 fcf7 	bl	800b914 <RCCEx_PLL3_Config>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f32:	4b70      	ldr	r3, [pc, #448]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f42:	4a6c      	ldr	r2, [pc, #432]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f44:	430b      	orrs	r3, r1
 8009f46:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009f54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009f62:	460b      	mov	r3, r1
 8009f64:	4313      	orrs	r3, r2
 8009f66:	d03e      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f74:	d022      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009f76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f7a:	d81b      	bhi.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f84:	d00b      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009f86:	e015      	b.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4618      	mov	r0, r3
 8009f92:	f001 fc0d 	bl	800b7b0 <RCCEx_PLL2_Config>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f9c:	e00f      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa2:	3328      	adds	r3, #40	@ 0x28
 8009fa4:	2102      	movs	r1, #2
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f001 fcb4 	bl	800b914 <RCCEx_PLL3_Config>
 8009fac:	4603      	mov	r3, r0
 8009fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009fb2:	e004      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fba:	e000      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10b      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fc6:	4b4b      	ldr	r3, [pc, #300]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009fd6:	4a47      	ldr	r2, [pc, #284]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fd8:	430b      	orrs	r3, r1
 8009fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fdc:	e003      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009ff2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ff8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4313      	orrs	r3, r2
 800a000:	d03b      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a00a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a00e:	d01f      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a010:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a014:	d818      	bhi.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a01a:	d003      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a01c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a020:	d007      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a022:	e011      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a024:	4b33      	ldr	r3, [pc, #204]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a028:	4a32      	ldr	r2, [pc, #200]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a02a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a02e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a030:	e00f      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a036:	3328      	adds	r3, #40	@ 0x28
 800a038:	2101      	movs	r1, #1
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 fc6a 	bl	800b914 <RCCEx_PLL3_Config>
 800a040:	4603      	mov	r3, r0
 800a042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a046:	e004      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a04e:	e000      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a050:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a05a:	4b26      	ldr	r3, [pc, #152]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a05c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a05e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a06a:	4a22      	ldr	r2, [pc, #136]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a06c:	430b      	orrs	r3, r1
 800a06e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a070:	e003      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a086:	673b      	str	r3, [r7, #112]	@ 0x70
 800a088:	2300      	movs	r3, #0
 800a08a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a08c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a090:	460b      	mov	r3, r1
 800a092:	4313      	orrs	r3, r2
 800a094:	d034      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d003      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a0a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0a4:	d007      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a0a6:	e011      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a8:	4b12      	ldr	r3, [pc, #72]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	4a11      	ldr	r2, [pc, #68]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0b4:	e00e      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	2102      	movs	r1, #2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f001 fb76 	bl	800b7b0 <RCCEx_PLL2_Config>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0ca:	e003      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10d      	bne.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a0dc:	4b05      	ldr	r3, [pc, #20]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0ea:	4a02      	ldr	r2, [pc, #8]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0ec:	430b      	orrs	r3, r1
 800a0ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a0f0:	e006      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a0f2:	bf00      	nop
 800a0f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a10c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a10e:	2300      	movs	r3, #0
 800a110:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a112:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a116:	460b      	mov	r3, r1
 800a118:	4313      	orrs	r3, r2
 800a11a:	d00c      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a120:	3328      	adds	r3, #40	@ 0x28
 800a122:	2102      	movs	r1, #2
 800a124:	4618      	mov	r0, r3
 800a126:	f001 fbf5 	bl	800b914 <RCCEx_PLL3_Config>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a142:	663b      	str	r3, [r7, #96]	@ 0x60
 800a144:	2300      	movs	r3, #0
 800a146:	667b      	str	r3, [r7, #100]	@ 0x64
 800a148:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a14c:	460b      	mov	r3, r1
 800a14e:	4313      	orrs	r3, r2
 800a150:	d038      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a15a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a15e:	d018      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a160:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a164:	d811      	bhi.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a16a:	d014      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a16c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a170:	d80b      	bhi.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d011      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a17a:	d106      	bne.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a17c:	4bc3      	ldr	r3, [pc, #780]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a180:	4ac2      	ldr	r2, [pc, #776]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a188:	e008      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a190:	e004      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a192:	bf00      	nop
 800a194:	e002      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a196:	bf00      	nop
 800a198:	e000      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a19a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a19c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10b      	bne.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1a4:	4bb9      	ldr	r3, [pc, #740]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1b4:	4ab5      	ldr	r2, [pc, #724]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1b6:	430b      	orrs	r3, r1
 800a1b8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1ba:	e003      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a1d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	d009      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a1e0:	4baa      	ldr	r3, [pc, #680]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ee:	4aa7      	ldr	r2, [pc, #668]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a200:	653b      	str	r3, [r7, #80]	@ 0x50
 800a202:	2300      	movs	r3, #0
 800a204:	657b      	str	r3, [r7, #84]	@ 0x54
 800a206:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a20a:	460b      	mov	r3, r1
 800a20c:	4313      	orrs	r3, r2
 800a20e:	d00a      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a210:	4b9e      	ldr	r3, [pc, #632]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a21c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a220:	4a9a      	ldr	r2, [pc, #616]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a222:	430b      	orrs	r3, r1
 800a224:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a232:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a234:	2300      	movs	r3, #0
 800a236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a238:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a23c:	460b      	mov	r3, r1
 800a23e:	4313      	orrs	r3, r2
 800a240:	d009      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a242:	4b92      	ldr	r3, [pc, #584]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a246:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a24e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a250:	4a8e      	ldr	r2, [pc, #568]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a252:	430b      	orrs	r3, r1
 800a254:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a262:	643b      	str	r3, [r7, #64]	@ 0x40
 800a264:	2300      	movs	r3, #0
 800a266:	647b      	str	r3, [r7, #68]	@ 0x44
 800a268:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a26c:	460b      	mov	r3, r1
 800a26e:	4313      	orrs	r3, r2
 800a270:	d00e      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a272:	4b86      	ldr	r3, [pc, #536]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	4a85      	ldr	r2, [pc, #532]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a278:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a27c:	6113      	str	r3, [r2, #16]
 800a27e:	4b83      	ldr	r3, [pc, #524]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a280:	6919      	ldr	r1, [r3, #16]
 800a282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a286:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a28a:	4a80      	ldr	r2, [pc, #512]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a29c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a29e:	2300      	movs	r3, #0
 800a2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	d009      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a2ac:	4b77      	ldr	r3, [pc, #476]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ba:	4a74      	ldr	r2, [pc, #464]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a2cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	d00a      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a2dc:	4b6b      	ldr	r3, [pc, #428]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2e0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2ec:	4a67      	ldr	r2, [pc, #412]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2ee:	430b      	orrs	r3, r1
 800a2f0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a304:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a308:	460b      	mov	r3, r1
 800a30a:	4313      	orrs	r3, r2
 800a30c:	d011      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a30e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a312:	3308      	adds	r3, #8
 800a314:	2100      	movs	r1, #0
 800a316:	4618      	mov	r0, r3
 800a318:	f001 fa4a 	bl	800b7b0 <RCCEx_PLL2_Config>
 800a31c:	4603      	mov	r3, r0
 800a31e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a32a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a32e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	2100      	movs	r1, #0
 800a33c:	6239      	str	r1, [r7, #32]
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	627b      	str	r3, [r7, #36]	@ 0x24
 800a344:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a348:	460b      	mov	r3, r1
 800a34a:	4313      	orrs	r3, r2
 800a34c:	d011      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a352:	3308      	adds	r3, #8
 800a354:	2101      	movs	r1, #1
 800a356:	4618      	mov	r0, r3
 800a358:	f001 fa2a 	bl	800b7b0 <RCCEx_PLL2_Config>
 800a35c:	4603      	mov	r3, r0
 800a35e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a36a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a36e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37a:	2100      	movs	r1, #0
 800a37c:	61b9      	str	r1, [r7, #24]
 800a37e:	f003 0304 	and.w	r3, r3, #4
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a388:	460b      	mov	r3, r1
 800a38a:	4313      	orrs	r3, r2
 800a38c:	d011      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a392:	3308      	adds	r3, #8
 800a394:	2102      	movs	r1, #2
 800a396:	4618      	mov	r0, r3
 800a398:	f001 fa0a 	bl	800b7b0 <RCCEx_PLL2_Config>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	6139      	str	r1, [r7, #16]
 800a3be:	f003 0308 	and.w	r3, r3, #8
 800a3c2:	617b      	str	r3, [r7, #20]
 800a3c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	d011      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3d2:	3328      	adds	r3, #40	@ 0x28
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f001 fa9c 	bl	800b914 <RCCEx_PLL3_Config>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a3e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	f003 0310 	and.w	r3, r3, #16
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a408:	460b      	mov	r3, r1
 800a40a:	4313      	orrs	r3, r2
 800a40c:	d011      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a412:	3328      	adds	r3, #40	@ 0x28
 800a414:	2101      	movs	r1, #1
 800a416:	4618      	mov	r0, r3
 800a418:	f001 fa7c 	bl	800b914 <RCCEx_PLL3_Config>
 800a41c:	4603      	mov	r3, r0
 800a41e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a42a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a42e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	2100      	movs	r1, #0
 800a43c:	6039      	str	r1, [r7, #0]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	607b      	str	r3, [r7, #4]
 800a444:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a448:	460b      	mov	r3, r1
 800a44a:	4313      	orrs	r3, r2
 800a44c:	d011      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a452:	3328      	adds	r3, #40	@ 0x28
 800a454:	2102      	movs	r1, #2
 800a456:	4618      	mov	r0, r3
 800a458:	f001 fa5c 	bl	800b914 <RCCEx_PLL3_Config>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a46a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a46e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a472:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	e000      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
}
 800a480:	4618      	mov	r0, r3
 800a482:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a486:	46bd      	mov	sp, r7
 800a488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a48c:	58024400 	.word	0x58024400

0800a490 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b090      	sub	sp, #64	@ 0x40
 800a494:	af00      	add	r7, sp, #0
 800a496:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a49e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a4a2:	430b      	orrs	r3, r1
 800a4a4:	f040 8094 	bne.w	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a4a8:	4b9e      	ldr	r3, [pc, #632]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ac:	f003 0307 	and.w	r3, r3, #7
 800a4b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	2b04      	cmp	r3, #4
 800a4b6:	f200 8087 	bhi.w	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a4ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c0:	0800a4d5 	.word	0x0800a4d5
 800a4c4:	0800a4fd 	.word	0x0800a4fd
 800a4c8:	0800a525 	.word	0x0800a525
 800a4cc:	0800a5c1 	.word	0x0800a5c1
 800a4d0:	0800a54d 	.word	0x0800a54d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4d4:	4b93      	ldr	r3, [pc, #588]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4e0:	d108      	bne.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f001 f810 	bl	800b50c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4f0:	f000 bd45 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f8:	f000 bd41 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4fc:	4b89      	ldr	r3, [pc, #548]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a504:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a508:	d108      	bne.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50a:	f107 0318 	add.w	r3, r7, #24
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fd54 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a518:	f000 bd31 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a520:	f000 bd2d 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a524:	4b7f      	ldr	r3, [pc, #508]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a52c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a530:	d108      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a532:	f107 030c 	add.w	r3, r7, #12
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fe94 	bl	800b264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a540:	f000 bd1d 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a548:	f000 bd19 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a54c:	4b75      	ldr	r3, [pc, #468]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a54e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a550:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a554:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a556:	4b73      	ldr	r3, [pc, #460]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0304 	and.w	r3, r3, #4
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d10c      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a564:	2b00      	cmp	r3, #0
 800a566:	d109      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a568:	4b6e      	ldr	r3, [pc, #440]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	08db      	lsrs	r3, r3, #3
 800a56e:	f003 0303 	and.w	r3, r3, #3
 800a572:	4a6d      	ldr	r2, [pc, #436]	@ (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a574:	fa22 f303 	lsr.w	r3, r2, r3
 800a578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a57a:	e01f      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a57c:	4b69      	ldr	r3, [pc, #420]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a588:	d106      	bne.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a58c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a590:	d102      	bne.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a592:	4b66      	ldr	r3, [pc, #408]	@ (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a594:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a596:	e011      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a598:	4b62      	ldr	r3, [pc, #392]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5a4:	d106      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ac:	d102      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5ae:	4b60      	ldr	r3, [pc, #384]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5b2:	e003      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5b8:	f000 bce1 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5bc:	f000 bcdf 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5c0:	4b5c      	ldr	r3, [pc, #368]	@ (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c4:	f000 bcdb 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5cc:	f000 bcd7 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a5d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5d4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	f040 80ad 	bne.w	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a5de:	4b51      	ldr	r3, [pc, #324]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a5e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ee:	d056      	beq.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5f6:	f200 8090 	bhi.w	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5fe:	f000 8088 	beq.w	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a604:	2bc0      	cmp	r3, #192	@ 0xc0
 800a606:	f200 8088 	bhi.w	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60c:	2b80      	cmp	r3, #128	@ 0x80
 800a60e:	d032      	beq.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	2b80      	cmp	r3, #128	@ 0x80
 800a614:	f200 8081 	bhi.w	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a620:	2b40      	cmp	r3, #64	@ 0x40
 800a622:	d014      	beq.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a624:	e079      	b.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a626:	4b3f      	ldr	r3, [pc, #252]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a62e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a632:	d108      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 ff67 	bl	800b50c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a642:	f000 bc9c 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64a:	f000 bc98 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a64e:	4b35      	ldr	r3, [pc, #212]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a65a:	d108      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a65c:	f107 0318 	add.w	r3, r7, #24
 800a660:	4618      	mov	r0, r3
 800a662:	f000 fcab 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66a:	f000 bc88 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a672:	f000 bc84 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a676:	4b2b      	ldr	r3, [pc, #172]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a67e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a682:	d108      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a684:	f107 030c 	add.w	r3, r7, #12
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fdeb 	bl	800b264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a692:	f000 bc74 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a69a:	f000 bc70 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a69e:	4b21      	ldr	r3, [pc, #132]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6a8:	4b1e      	ldr	r3, [pc, #120]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b04      	cmp	r3, #4
 800a6b2:	d10c      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6ba:	4b1a      	ldr	r3, [pc, #104]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	08db      	lsrs	r3, r3, #3
 800a6c0:	f003 0303 	and.w	r3, r3, #3
 800a6c4:	4a18      	ldr	r2, [pc, #96]	@ (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6cc:	e01f      	b.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ce:	4b15      	ldr	r3, [pc, #84]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6da:	d106      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6e2:	d102      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6e4:	4b11      	ldr	r3, [pc, #68]	@ (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6e8:	e011      	b.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6f6:	d106      	bne.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6fe:	d102      	bne.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a700:	4b0b      	ldr	r3, [pc, #44]	@ (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a704:	e003      	b.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a70a:	f000 bc38 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a70e:	f000 bc36 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a712:	4b08      	ldr	r3, [pc, #32]	@ (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a716:	f000 bc32 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a71e:	f000 bc2e 	b.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a722:	bf00      	nop
 800a724:	58024400 	.word	0x58024400
 800a728:	03d09000 	.word	0x03d09000
 800a72c:	003d0900 	.word	0x003d0900
 800a730:	017d7840 	.word	0x017d7840
 800a734:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a740:	430b      	orrs	r3, r1
 800a742:	f040 809c 	bne.w	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a746:	4b9e      	ldr	r3, [pc, #632]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a74a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a74e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a752:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a756:	d054      	beq.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a75e:	f200 808b 	bhi.w	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a764:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a768:	f000 8083 	beq.w	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a772:	f200 8081 	bhi.w	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a77c:	d02f      	beq.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a784:	d878      	bhi.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d004      	beq.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a792:	d012      	beq.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a794:	e070      	b.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a796:	4b8a      	ldr	r3, [pc, #552]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a79e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7a2:	d107      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 feaf 	bl	800b50c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b2:	e3e4      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b8:	e3e1      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7ba:	4b81      	ldr	r3, [pc, #516]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7c6:	d107      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c8:	f107 0318 	add.w	r3, r7, #24
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fbf5 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d6:	e3d2      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7dc:	e3cf      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7de:	4b78      	ldr	r3, [pc, #480]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ea:	d107      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ec:	f107 030c 	add.w	r3, r7, #12
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 fd37 	bl	800b264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7fa:	e3c0      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a800:	e3bd      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a802:	4b6f      	ldr	r3, [pc, #444]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a806:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a80a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a80c:	4b6c      	ldr	r3, [pc, #432]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0304 	and.w	r3, r3, #4
 800a814:	2b04      	cmp	r3, #4
 800a816:	d10c      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a81e:	4b68      	ldr	r3, [pc, #416]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	08db      	lsrs	r3, r3, #3
 800a824:	f003 0303 	and.w	r3, r3, #3
 800a828:	4a66      	ldr	r2, [pc, #408]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a82a:	fa22 f303 	lsr.w	r3, r2, r3
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a830:	e01e      	b.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a832:	4b63      	ldr	r3, [pc, #396]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a83a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a83e:	d106      	bne.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a846:	d102      	bne.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a848:	4b5f      	ldr	r3, [pc, #380]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a84c:	e010      	b.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a84e:	4b5c      	ldr	r3, [pc, #368]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a85a:	d106      	bne.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a862:	d102      	bne.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a864:	4b59      	ldr	r3, [pc, #356]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a868:	e002      	b.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a86e:	e386      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a870:	e385      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a872:	4b57      	ldr	r3, [pc, #348]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a876:	e382      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a878:	2300      	movs	r3, #0
 800a87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a87c:	e37f      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a87e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a882:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a886:	430b      	orrs	r3, r1
 800a888:	f040 80a7 	bne.w	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a88c:	4b4c      	ldr	r3, [pc, #304]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a88e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a890:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a894:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a89c:	d055      	beq.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8a4:	f200 8096 	bhi.w	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8ae:	f000 8084 	beq.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8b8:	f200 808c 	bhi.w	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8c2:	d030      	beq.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ca:	f200 8083 	bhi.w	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d004      	beq.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8da:	d012      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a8dc:	e07a      	b.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8de:	4b38      	ldr	r3, [pc, #224]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ea:	d107      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fe0b 	bl	800b50c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fa:	e340      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a900:	e33d      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a902:	4b2f      	ldr	r3, [pc, #188]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a90a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a90e:	d107      	bne.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a910:	f107 0318 	add.w	r3, r7, #24
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fb51 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91e:	e32e      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a924:	e32b      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a926:	4b26      	ldr	r3, [pc, #152]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a92e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a932:	d107      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a934:	f107 030c 	add.w	r3, r7, #12
 800a938:	4618      	mov	r0, r3
 800a93a:	f000 fc93 	bl	800b264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a942:	e31c      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a948:	e319      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a94a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a94c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a94e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a952:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a954:	4b1a      	ldr	r3, [pc, #104]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d10c      	bne.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a962:	2b00      	cmp	r3, #0
 800a964:	d109      	bne.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a966:	4b16      	ldr	r3, [pc, #88]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	08db      	lsrs	r3, r3, #3
 800a96c:	f003 0303 	and.w	r3, r3, #3
 800a970:	4a14      	ldr	r2, [pc, #80]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a972:	fa22 f303 	lsr.w	r3, r2, r3
 800a976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a978:	e01e      	b.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a97a:	4b11      	ldr	r3, [pc, #68]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a986:	d106      	bne.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a98a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a98e:	d102      	bne.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a990:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a994:	e010      	b.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a996:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a99e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9a2:	d106      	bne.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9aa:	d102      	bne.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9ac:	4b07      	ldr	r3, [pc, #28]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9b0:	e002      	b.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9b6:	e2e2      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9b8:	e2e1      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9ba:	4b05      	ldr	r3, [pc, #20]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9be:	e2de      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	03d09000 	.word	0x03d09000
 800a9c8:	003d0900 	.word	0x003d0900
 800a9cc:	017d7840 	.word	0x017d7840
 800a9d0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d8:	e2d1      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a9da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9de:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	f040 809c 	bne.w	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a9e8:	4b93      	ldr	r3, [pc, #588]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a9f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9f8:	d054      	beq.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa00:	f200 808b 	bhi.w	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa0a:	f000 8083 	beq.w	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa14:	f200 8081 	bhi.w	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa1e:	d02f      	beq.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800aa20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa26:	d878      	bhi.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d004      	beq.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa34:	d012      	beq.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800aa36:	e070      	b.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa38:	4b7f      	ldr	r3, [pc, #508]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa44:	d107      	bne.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fd5e 	bl	800b50c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa54:	e293      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa5a:	e290      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa5c:	4b76      	ldr	r3, [pc, #472]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa68:	d107      	bne.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa6a:	f107 0318 	add.w	r3, r7, #24
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 faa4 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa78:	e281      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa7e:	e27e      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa80:	4b6d      	ldr	r3, [pc, #436]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa8c:	d107      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa8e:	f107 030c 	add.w	r3, r7, #12
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 fbe6 	bl	800b264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa9c:	e26f      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa2:	e26c      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aaa4:	4b64      	ldr	r3, [pc, #400]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aaac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aaae:	4b62      	ldr	r3, [pc, #392]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0304 	and.w	r3, r3, #4
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	d10c      	bne.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aaba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d109      	bne.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aac0:	4b5d      	ldr	r3, [pc, #372]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	08db      	lsrs	r3, r3, #3
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	4a5c      	ldr	r2, [pc, #368]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aacc:	fa22 f303 	lsr.w	r3, r2, r3
 800aad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aad2:	e01e      	b.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aad4:	4b58      	ldr	r3, [pc, #352]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aadc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aae0:	d106      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aae8:	d102      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aaea:	4b55      	ldr	r3, [pc, #340]	@ (800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaee:	e010      	b.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaf0:	4b51      	ldr	r3, [pc, #324]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aafc:	d106      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab04:	d102      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab06:	4b4f      	ldr	r3, [pc, #316]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ab08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab0a:	e002      	b.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab10:	e235      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab12:	e234      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab14:	4b4c      	ldr	r3, [pc, #304]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab18:	e231      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab1e:	e22e      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ab20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab24:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ab28:	430b      	orrs	r3, r1
 800ab2a:	f040 808f 	bne.w	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ab2e:	4b42      	ldr	r3, [pc, #264]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab32:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ab36:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab3e:	d06b      	beq.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ab40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab46:	d874      	bhi.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab4e:	d056      	beq.n	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ab50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab56:	d86c      	bhi.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab5e:	d03b      	beq.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab66:	d864      	bhi.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab6e:	d021      	beq.n	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ab70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab76:	d85c      	bhi.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d004      	beq.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab84:	d004      	beq.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ab86:	e054      	b.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ab88:	f7fe fa20 	bl	8008fcc <HAL_RCC_GetPCLK1Freq>
 800ab8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab8e:	e1f6      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab90:	4b29      	ldr	r3, [pc, #164]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab9c:	d107      	bne.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab9e:	f107 0318 	add.w	r3, r7, #24
 800aba2:	4618      	mov	r0, r3
 800aba4:	f000 fa0a 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abac:	e1e7      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb2:	e1e4      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abb4:	4b20      	ldr	r3, [pc, #128]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abc0:	d107      	bne.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abc2:	f107 030c 	add.w	r3, r7, #12
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 fb4c 	bl	800b264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd0:	e1d5      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd6:	e1d2      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abd8:	4b17      	ldr	r3, [pc, #92]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0304 	and.w	r3, r3, #4
 800abe0:	2b04      	cmp	r3, #4
 800abe2:	d109      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abe4:	4b14      	ldr	r3, [pc, #80]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	08db      	lsrs	r3, r3, #3
 800abea:	f003 0303 	and.w	r3, r3, #3
 800abee:	4a13      	ldr	r2, [pc, #76]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800abf0:	fa22 f303 	lsr.w	r3, r2, r3
 800abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf6:	e1c2      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abfc:	e1bf      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800abfe:	4b0e      	ldr	r3, [pc, #56]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac0a:	d102      	bne.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ac0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac10:	e1b5      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac16:	e1b2      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac18:	4b07      	ldr	r3, [pc, #28]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac24:	d102      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ac26:	4b07      	ldr	r3, [pc, #28]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ac28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac2a:	e1a8      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac30:	e1a5      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac36:	e1a2      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac38:	58024400 	.word	0x58024400
 800ac3c:	03d09000 	.word	0x03d09000
 800ac40:	003d0900 	.word	0x003d0900
 800ac44:	017d7840 	.word	0x017d7840
 800ac48:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac50:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ac54:	430b      	orrs	r3, r1
 800ac56:	d173      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac58:	4b9c      	ldr	r3, [pc, #624]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac68:	d02f      	beq.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac70:	d863      	bhi.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ac72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d004      	beq.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ac78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac7e:	d012      	beq.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ac80:	e05b      	b.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac82:	4b92      	ldr	r3, [pc, #584]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac8e:	d107      	bne.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac90:	f107 0318 	add.w	r3, r7, #24
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 f991 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac9e:	e16e      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca4:	e16b      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aca6:	4b89      	ldr	r3, [pc, #548]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acb2:	d107      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acb4:	f107 030c 	add.w	r3, r7, #12
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fad3 	bl	800b264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc2:	e15c      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc8:	e159      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acca:	4b80      	ldr	r3, [pc, #512]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800accc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acd2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acd4:	4b7d      	ldr	r3, [pc, #500]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0304 	and.w	r3, r3, #4
 800acdc:	2b04      	cmp	r3, #4
 800acde:	d10c      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ace0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d109      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace6:	4b79      	ldr	r3, [pc, #484]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	08db      	lsrs	r3, r3, #3
 800acec:	f003 0303 	and.w	r3, r3, #3
 800acf0:	4a77      	ldr	r2, [pc, #476]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800acf2:	fa22 f303 	lsr.w	r3, r2, r3
 800acf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acf8:	e01e      	b.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acfa:	4b74      	ldr	r3, [pc, #464]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad06:	d106      	bne.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ad08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad0e:	d102      	bne.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad10:	4b70      	ldr	r3, [pc, #448]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ad12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad14:	e010      	b.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad16:	4b6d      	ldr	r3, [pc, #436]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad22:	d106      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ad24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad2a:	d102      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad2c:	4b6a      	ldr	r3, [pc, #424]	@ (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ad2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad30:	e002      	b.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad36:	e122      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad38:	e121      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad3e:	e11e      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad44:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	d133      	bne.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad4c:	4b5f      	ldr	r3, [pc, #380]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad54:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad62:	d012      	beq.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ad64:	e023      	b.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad66:	4b59      	ldr	r3, [pc, #356]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad72:	d107      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fbc7 	bl	800b50c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad82:	e0fc      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad88:	e0f9      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad8a:	4b50      	ldr	r3, [pc, #320]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad96:	d107      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad98:	f107 0318 	add.w	r3, r7, #24
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 f90d 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ada6:	e0ea      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adac:	e0e7      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb2:	e0e4      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800adb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adb8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800adbc:	430b      	orrs	r3, r1
 800adbe:	f040 808d 	bne.w	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800adc2:	4b42      	ldr	r3, [pc, #264]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adc6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800adca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800adcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800add2:	d06b      	beq.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800add4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adda:	d874      	bhi.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800addc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ade2:	d056      	beq.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ade4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adea:	d86c      	bhi.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adf2:	d03b      	beq.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800adf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adfa:	d864      	bhi.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae02:	d021      	beq.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ae04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae0a:	d85c      	bhi.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d004      	beq.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ae12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae18:	d004      	beq.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ae1a:	e054      	b.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ae1c:	f000 f8b8 	bl	800af90 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae20:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae22:	e0ac      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae24:	4b29      	ldr	r3, [pc, #164]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae30:	d107      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae32:	f107 0318 	add.w	r3, r7, #24
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 f8c0 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae40:	e09d      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae46:	e09a      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae48:	4b20      	ldr	r3, [pc, #128]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae54:	d107      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae56:	f107 030c 	add.w	r3, r7, #12
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fa02 	bl	800b264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae64:	e08b      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae6a:	e088      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae6c:	4b17      	ldr	r3, [pc, #92]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d109      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae78:	4b14      	ldr	r3, [pc, #80]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	08db      	lsrs	r3, r3, #3
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	4a13      	ldr	r2, [pc, #76]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae84:	fa22 f303 	lsr.w	r3, r2, r3
 800ae88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae8a:	e078      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae90:	e075      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae92:	4b0e      	ldr	r3, [pc, #56]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae9e:	d102      	bne.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aea0:	4b0c      	ldr	r3, [pc, #48]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea4:	e06b      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeaa:	e068      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aeac:	4b07      	ldr	r3, [pc, #28]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeb8:	d102      	bne.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aeba:	4b07      	ldr	r3, [pc, #28]	@ (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aebe:	e05e      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aec4:	e05b      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeca:	e058      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aecc:	58024400 	.word	0x58024400
 800aed0:	03d09000 	.word	0x03d09000
 800aed4:	003d0900 	.word	0x003d0900
 800aed8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aedc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aee4:	430b      	orrs	r3, r1
 800aee6:	d148      	bne.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aee8:	4b27      	ldr	r3, [pc, #156]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aeea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aef0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aef8:	d02a      	beq.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af00:	d838      	bhi.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800af02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af04:	2b00      	cmp	r3, #0
 800af06:	d004      	beq.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800af08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af0e:	d00d      	beq.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800af10:	e030      	b.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af12:	4b1d      	ldr	r3, [pc, #116]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af1e:	d102      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800af20:	4b1a      	ldr	r3, [pc, #104]	@ (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800af22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af24:	e02b      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2a:	e028      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af2c:	4b16      	ldr	r3, [pc, #88]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af38:	d107      	bne.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 fae4 	bl	800b50c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af48:	e019      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af4e:	e016      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af50:	4b0d      	ldr	r3, [pc, #52]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af5c:	d107      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af5e:	f107 0318 	add.w	r3, r7, #24
 800af62:	4618      	mov	r0, r3
 800af64:	f000 f82a 	bl	800afbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af6c:	e007      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af72:	e004      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af78:	e001      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800af7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af80:	4618      	mov	r0, r3
 800af82:	3740      	adds	r7, #64	@ 0x40
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	58024400 	.word	0x58024400
 800af8c:	017d7840 	.word	0x017d7840

0800af90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af94:	f7fd ffea 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 800af98:	4602      	mov	r2, r0
 800af9a:	4b06      	ldr	r3, [pc, #24]	@ (800afb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	091b      	lsrs	r3, r3, #4
 800afa0:	f003 0307 	and.w	r3, r3, #7
 800afa4:	4904      	ldr	r1, [pc, #16]	@ (800afb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800afa6:	5ccb      	ldrb	r3, [r1, r3]
 800afa8:	f003 031f 	and.w	r3, r3, #31
 800afac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	58024400 	.word	0x58024400
 800afb8:	080150d8 	.word	0x080150d8

0800afbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b089      	sub	sp, #36	@ 0x24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afc4:	4ba1      	ldr	r3, [pc, #644]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc8:	f003 0303 	and.w	r3, r3, #3
 800afcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800afce:	4b9f      	ldr	r3, [pc, #636]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd2:	0b1b      	lsrs	r3, r3, #12
 800afd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800afda:	4b9c      	ldr	r3, [pc, #624]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afde:	091b      	lsrs	r3, r3, #4
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800afe6:	4b99      	ldr	r3, [pc, #612]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afea:	08db      	lsrs	r3, r3, #3
 800afec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	fb02 f303 	mul.w	r3, r2, r3
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 8111 	beq.w	800b22c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	f000 8083 	beq.w	800b118 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	2b02      	cmp	r3, #2
 800b016:	f200 80a1 	bhi.w	800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d056      	beq.n	800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b026:	e099      	b.n	800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b028:	4b88      	ldr	r3, [pc, #544]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0320 	and.w	r3, r3, #32
 800b030:	2b00      	cmp	r3, #0
 800b032:	d02d      	beq.n	800b090 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b034:	4b85      	ldr	r3, [pc, #532]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	08db      	lsrs	r3, r3, #3
 800b03a:	f003 0303 	and.w	r3, r3, #3
 800b03e:	4a84      	ldr	r2, [pc, #528]	@ (800b250 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b040:	fa22 f303 	lsr.w	r3, r2, r3
 800b044:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	ee07 3a90 	vmov	s15, r3
 800b04c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	ee07 3a90 	vmov	s15, r3
 800b056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05e:	4b7b      	ldr	r3, [pc, #492]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b072:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b08e:	e087      	b.n	800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	ee07 3a90 	vmov	s15, r3
 800b096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a2:	4b6a      	ldr	r3, [pc, #424]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0d2:	e065      	b.n	800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	ee07 3a90 	vmov	s15, r3
 800b0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0e6:	4b59      	ldr	r3, [pc, #356]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b116:	e043      	b.n	800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b122:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b12a:	4b48      	ldr	r3, [pc, #288]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b13a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b13e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b14a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b15a:	e021      	b.n	800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	ee07 3a90 	vmov	s15, r3
 800b162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b166:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b16e:	4b37      	ldr	r3, [pc, #220]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b17e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b182:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b19e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b1a0:	4b2a      	ldr	r3, [pc, #168]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a4:	0a5b      	lsrs	r3, r3, #9
 800b1a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c6:	ee17 2a90 	vmov	r2, s15
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b1ce:	4b1f      	ldr	r3, [pc, #124]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1d2:	0c1b      	lsrs	r3, r3, #16
 800b1d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1d8:	ee07 3a90 	vmov	s15, r3
 800b1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1f4:	ee17 2a90 	vmov	r2, s15
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b1fc:	4b13      	ldr	r3, [pc, #76]	@ (800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b200:	0e1b      	lsrs	r3, r3, #24
 800b202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b212:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b216:	edd7 6a07 	vldr	s13, [r7, #28]
 800b21a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b21e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b222:	ee17 2a90 	vmov	r2, s15
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b22a:	e008      	b.n	800b23e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	609a      	str	r2, [r3, #8]
}
 800b23e:	bf00      	nop
 800b240:	3724      	adds	r7, #36	@ 0x24
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	58024400 	.word	0x58024400
 800b250:	03d09000 	.word	0x03d09000
 800b254:	46000000 	.word	0x46000000
 800b258:	4c742400 	.word	0x4c742400
 800b25c:	4a742400 	.word	0x4a742400
 800b260:	4bbebc20 	.word	0x4bbebc20

0800b264 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b264:	b480      	push	{r7}
 800b266:	b089      	sub	sp, #36	@ 0x24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b26c:	4ba1      	ldr	r3, [pc, #644]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b270:	f003 0303 	and.w	r3, r3, #3
 800b274:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b276:	4b9f      	ldr	r3, [pc, #636]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b27a:	0d1b      	lsrs	r3, r3, #20
 800b27c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b280:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b282:	4b9c      	ldr	r3, [pc, #624]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b286:	0a1b      	lsrs	r3, r3, #8
 800b288:	f003 0301 	and.w	r3, r3, #1
 800b28c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b28e:	4b99      	ldr	r3, [pc, #612]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b292:	08db      	lsrs	r3, r3, #3
 800b294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	fb02 f303 	mul.w	r3, r2, r3
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 8111 	beq.w	800b4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	f000 8083 	beq.w	800b3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	f200 80a1 	bhi.w	800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d056      	beq.n	800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b2ce:	e099      	b.n	800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2d0:	4b88      	ldr	r3, [pc, #544]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0320 	and.w	r3, r3, #32
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d02d      	beq.n	800b338 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2dc:	4b85      	ldr	r3, [pc, #532]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	08db      	lsrs	r3, r3, #3
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	4a84      	ldr	r2, [pc, #528]	@ (800b4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b2e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	ee07 3a90 	vmov	s15, r3
 800b2f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	ee07 3a90 	vmov	s15, r3
 800b2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b306:	4b7b      	ldr	r3, [pc, #492]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b316:	ed97 6a03 	vldr	s12, [r7, #12]
 800b31a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b332:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b336:	e087      	b.n	800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	ee07 3a90 	vmov	s15, r3
 800b33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b342:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b34a:	4b6a      	ldr	r3, [pc, #424]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b35a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b35e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b36a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b37a:	e065      	b.n	800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	ee07 3a90 	vmov	s15, r3
 800b382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b386:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b38a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b38e:	4b59      	ldr	r3, [pc, #356]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b39e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3be:	e043      	b.n	800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b3ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3d2:	4b48      	ldr	r3, [pc, #288]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3da:	ee07 3a90 	vmov	s15, r3
 800b3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b402:	e021      	b.n	800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	ee07 3a90 	vmov	s15, r3
 800b40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b40e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b416:	4b37      	ldr	r3, [pc, #220]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b426:	ed97 6a03 	vldr	s12, [r7, #12]
 800b42a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b42e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b43a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b446:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b448:	4b2a      	ldr	r3, [pc, #168]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b44a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b44c:	0a5b      	lsrs	r3, r3, #9
 800b44e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b45e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b462:	edd7 6a07 	vldr	s13, [r7, #28]
 800b466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b46a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b46e:	ee17 2a90 	vmov	r2, s15
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b476:	4b1f      	ldr	r3, [pc, #124]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47a:	0c1b      	lsrs	r3, r3, #16
 800b47c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b480:	ee07 3a90 	vmov	s15, r3
 800b484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b48c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b490:	edd7 6a07 	vldr	s13, [r7, #28]
 800b494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b49c:	ee17 2a90 	vmov	r2, s15
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b4a4:	4b13      	ldr	r3, [pc, #76]	@ (800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a8:	0e1b      	lsrs	r3, r3, #24
 800b4aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4ae:	ee07 3a90 	vmov	s15, r3
 800b4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ca:	ee17 2a90 	vmov	r2, s15
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b4d2:	e008      	b.n	800b4e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	609a      	str	r2, [r3, #8]
}
 800b4e6:	bf00      	nop
 800b4e8:	3724      	adds	r7, #36	@ 0x24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	58024400 	.word	0x58024400
 800b4f8:	03d09000 	.word	0x03d09000
 800b4fc:	46000000 	.word	0x46000000
 800b500:	4c742400 	.word	0x4c742400
 800b504:	4a742400 	.word	0x4a742400
 800b508:	4bbebc20 	.word	0x4bbebc20

0800b50c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b089      	sub	sp, #36	@ 0x24
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b514:	4ba0      	ldr	r3, [pc, #640]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b518:	f003 0303 	and.w	r3, r3, #3
 800b51c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b51e:	4b9e      	ldr	r3, [pc, #632]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b522:	091b      	lsrs	r3, r3, #4
 800b524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b528:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b52a:	4b9b      	ldr	r3, [pc, #620]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b534:	4b98      	ldr	r3, [pc, #608]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b538:	08db      	lsrs	r3, r3, #3
 800b53a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	fb02 f303 	mul.w	r3, r2, r3
 800b544:	ee07 3a90 	vmov	s15, r3
 800b548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2b00      	cmp	r3, #0
 800b554:	f000 8111 	beq.w	800b77a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	f000 8083 	beq.w	800b666 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	2b02      	cmp	r3, #2
 800b564:	f200 80a1 	bhi.w	800b6aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d056      	beq.n	800b622 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b574:	e099      	b.n	800b6aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b576:	4b88      	ldr	r3, [pc, #544]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 0320 	and.w	r3, r3, #32
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d02d      	beq.n	800b5de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b582:	4b85      	ldr	r3, [pc, #532]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	08db      	lsrs	r3, r3, #3
 800b588:	f003 0303 	and.w	r3, r3, #3
 800b58c:	4a83      	ldr	r2, [pc, #524]	@ (800b79c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b58e:	fa22 f303 	lsr.w	r3, r2, r3
 800b592:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	ee07 3a90 	vmov	s15, r3
 800b59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	ee07 3a90 	vmov	s15, r3
 800b5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ac:	4b7a      	ldr	r3, [pc, #488]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b4:	ee07 3a90 	vmov	s15, r3
 800b5b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5c0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5dc:	e087      	b.n	800b6ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	ee07 3a90 	vmov	s15, r3
 800b5e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f0:	4b69      	ldr	r3, [pc, #420]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f8:	ee07 3a90 	vmov	s15, r3
 800b5fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b600:	ed97 6a03 	vldr	s12, [r7, #12]
 800b604:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b610:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b620:	e065      	b.n	800b6ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	ee07 3a90 	vmov	s15, r3
 800b628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b634:	4b58      	ldr	r3, [pc, #352]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63c:	ee07 3a90 	vmov	s15, r3
 800b640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b644:	ed97 6a03 	vldr	s12, [r7, #12]
 800b648:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b64c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b654:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b65c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b660:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b664:	e043      	b.n	800b6ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	ee07 3a90 	vmov	s15, r3
 800b66c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b670:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b7ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b678:	4b47      	ldr	r3, [pc, #284]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b67a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b67c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b680:	ee07 3a90 	vmov	s15, r3
 800b684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b688:	ed97 6a03 	vldr	s12, [r7, #12]
 800b68c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b698:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b69c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6a8:	e021      	b.n	800b6ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	ee07 3a90 	vmov	s15, r3
 800b6b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b6b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6bc:	4b36      	ldr	r3, [pc, #216]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b6ee:	4b2a      	ldr	r3, [pc, #168]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f2:	0a5b      	lsrs	r3, r3, #9
 800b6f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6f8:	ee07 3a90 	vmov	s15, r3
 800b6fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b700:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b704:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b708:	edd7 6a07 	vldr	s13, [r7, #28]
 800b70c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b714:	ee17 2a90 	vmov	r2, s15
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b71c:	4b1e      	ldr	r3, [pc, #120]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b71e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b720:	0c1b      	lsrs	r3, r3, #16
 800b722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b732:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b736:	edd7 6a07 	vldr	s13, [r7, #28]
 800b73a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b73e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b742:	ee17 2a90 	vmov	r2, s15
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b74a:	4b13      	ldr	r3, [pc, #76]	@ (800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b74c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b74e:	0e1b      	lsrs	r3, r3, #24
 800b750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b754:	ee07 3a90 	vmov	s15, r3
 800b758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b760:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b764:	edd7 6a07 	vldr	s13, [r7, #28]
 800b768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b76c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b770:	ee17 2a90 	vmov	r2, s15
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b778:	e008      	b.n	800b78c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	609a      	str	r2, [r3, #8]
}
 800b78c:	bf00      	nop
 800b78e:	3724      	adds	r7, #36	@ 0x24
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	58024400 	.word	0x58024400
 800b79c:	03d09000 	.word	0x03d09000
 800b7a0:	46000000 	.word	0x46000000
 800b7a4:	4c742400 	.word	0x4c742400
 800b7a8:	4a742400 	.word	0x4a742400
 800b7ac:	4bbebc20 	.word	0x4bbebc20

0800b7b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7be:	4b53      	ldr	r3, [pc, #332]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c2:	f003 0303 	and.w	r3, r3, #3
 800b7c6:	2b03      	cmp	r3, #3
 800b7c8:	d101      	bne.n	800b7ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e099      	b.n	800b902 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b7ce:	4b4f      	ldr	r3, [pc, #316]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a4e      	ldr	r2, [pc, #312]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b7d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b7d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7da:	f7f6 fa13 	bl	8001c04 <HAL_GetTick>
 800b7de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7e0:	e008      	b.n	800b7f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7e2:	f7f6 fa0f 	bl	8001c04 <HAL_GetTick>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d901      	bls.n	800b7f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e086      	b.n	800b902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7f4:	4b45      	ldr	r3, [pc, #276]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1f0      	bne.n	800b7e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b800:	4b42      	ldr	r3, [pc, #264]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b804:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	031b      	lsls	r3, r3, #12
 800b80e:	493f      	ldr	r1, [pc, #252]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b810:	4313      	orrs	r3, r2
 800b812:	628b      	str	r3, [r1, #40]	@ 0x28
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	3b01      	subs	r3, #1
 800b81a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	3b01      	subs	r3, #1
 800b824:	025b      	lsls	r3, r3, #9
 800b826:	b29b      	uxth	r3, r3
 800b828:	431a      	orrs	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	3b01      	subs	r3, #1
 800b830:	041b      	lsls	r3, r3, #16
 800b832:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b836:	431a      	orrs	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	061b      	lsls	r3, r3, #24
 800b840:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b844:	4931      	ldr	r1, [pc, #196]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b846:	4313      	orrs	r3, r2
 800b848:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b84a:	4b30      	ldr	r3, [pc, #192]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	492d      	ldr	r1, [pc, #180]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b858:	4313      	orrs	r3, r2
 800b85a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b85c:	4b2b      	ldr	r3, [pc, #172]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b860:	f023 0220 	bic.w	r2, r3, #32
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	4928      	ldr	r1, [pc, #160]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b86a:	4313      	orrs	r3, r2
 800b86c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b86e:	4b27      	ldr	r3, [pc, #156]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b872:	4a26      	ldr	r2, [pc, #152]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b874:	f023 0310 	bic.w	r3, r3, #16
 800b878:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b87a:	4b24      	ldr	r3, [pc, #144]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b87c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b87e:	4b24      	ldr	r3, [pc, #144]	@ (800b910 <RCCEx_PLL2_Config+0x160>)
 800b880:	4013      	ands	r3, r2
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	69d2      	ldr	r2, [r2, #28]
 800b886:	00d2      	lsls	r2, r2, #3
 800b888:	4920      	ldr	r1, [pc, #128]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b88a:	4313      	orrs	r3, r2
 800b88c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b88e:	4b1f      	ldr	r3, [pc, #124]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b892:	4a1e      	ldr	r2, [pc, #120]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b894:	f043 0310 	orr.w	r3, r3, #16
 800b898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d106      	bne.n	800b8ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b8a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a4:	4a19      	ldr	r2, [pc, #100]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b8a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8ac:	e00f      	b.n	800b8ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d106      	bne.n	800b8c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b8b4:	4b15      	ldr	r3, [pc, #84]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b8:	4a14      	ldr	r2, [pc, #80]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b8ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8c0:	e005      	b.n	800b8ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b8c2:	4b12      	ldr	r3, [pc, #72]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c6:	4a11      	ldr	r2, [pc, #68]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b8c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b8cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b8ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a0e      	ldr	r2, [pc, #56]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b8d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b8d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8da:	f7f6 f993 	bl	8001c04 <HAL_GetTick>
 800b8de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8e0:	e008      	b.n	800b8f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8e2:	f7f6 f98f 	bl	8001c04 <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d901      	bls.n	800b8f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	e006      	b.n	800b902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8f4:	4b05      	ldr	r3, [pc, #20]	@ (800b90c <RCCEx_PLL2_Config+0x15c>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d0f0      	beq.n	800b8e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b900:	7bfb      	ldrb	r3, [r7, #15]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	58024400 	.word	0x58024400
 800b910:	ffff0007 	.word	0xffff0007

0800b914 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b922:	4b53      	ldr	r3, [pc, #332]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b926:	f003 0303 	and.w	r3, r3, #3
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d101      	bne.n	800b932 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e099      	b.n	800ba66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b932:	4b4f      	ldr	r3, [pc, #316]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a4e      	ldr	r2, [pc, #312]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b93c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b93e:	f7f6 f961 	bl	8001c04 <HAL_GetTick>
 800b942:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b944:	e008      	b.n	800b958 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b946:	f7f6 f95d 	bl	8001c04 <HAL_GetTick>
 800b94a:	4602      	mov	r2, r0
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	2b02      	cmp	r3, #2
 800b952:	d901      	bls.n	800b958 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	e086      	b.n	800ba66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b958:	4b45      	ldr	r3, [pc, #276]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1f0      	bne.n	800b946 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b964:	4b42      	ldr	r3, [pc, #264]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b968:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	051b      	lsls	r3, r3, #20
 800b972:	493f      	ldr	r1, [pc, #252]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b974:	4313      	orrs	r3, r2
 800b976:	628b      	str	r3, [r1, #40]	@ 0x28
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	3b01      	subs	r3, #1
 800b988:	025b      	lsls	r3, r3, #9
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	431a      	orrs	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	3b01      	subs	r3, #1
 800b994:	041b      	lsls	r3, r3, #16
 800b996:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b99a:	431a      	orrs	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	061b      	lsls	r3, r3, #24
 800b9a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b9a8:	4931      	ldr	r1, [pc, #196]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b9ae:	4b30      	ldr	r3, [pc, #192]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	492d      	ldr	r1, [pc, #180]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b9c0:	4b2b      	ldr	r3, [pc, #172]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	4928      	ldr	r1, [pc, #160]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b9d2:	4b27      	ldr	r3, [pc, #156]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d6:	4a26      	ldr	r2, [pc, #152]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b9de:	4b24      	ldr	r3, [pc, #144]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9e2:	4b24      	ldr	r3, [pc, #144]	@ (800ba74 <RCCEx_PLL3_Config+0x160>)
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	69d2      	ldr	r2, [r2, #28]
 800b9ea:	00d2      	lsls	r2, r2, #3
 800b9ec:	4920      	ldr	r1, [pc, #128]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9f2:	4b1f      	ldr	r3, [pc, #124]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f6:	4a1e      	ldr	r2, [pc, #120]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800b9f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d106      	bne.n	800ba12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba04:	4b1a      	ldr	r3, [pc, #104]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800ba06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba08:	4a19      	ldr	r2, [pc, #100]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800ba0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ba0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba10:	e00f      	b.n	800ba32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d106      	bne.n	800ba26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba18:	4b15      	ldr	r3, [pc, #84]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800ba1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1c:	4a14      	ldr	r2, [pc, #80]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800ba1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba24:	e005      	b.n	800ba32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba26:	4b12      	ldr	r3, [pc, #72]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800ba28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2a:	4a11      	ldr	r2, [pc, #68]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800ba2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba32:	4b0f      	ldr	r3, [pc, #60]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a0e      	ldr	r2, [pc, #56]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800ba38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba3e:	f7f6 f8e1 	bl	8001c04 <HAL_GetTick>
 800ba42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba44:	e008      	b.n	800ba58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba46:	f7f6 f8dd 	bl	8001c04 <HAL_GetTick>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d901      	bls.n	800ba58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e006      	b.n	800ba66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba58:	4b05      	ldr	r3, [pc, #20]	@ (800ba70 <RCCEx_PLL3_Config+0x15c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d0f0      	beq.n	800ba46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	58024400 	.word	0x58024400
 800ba74:	ffff0007 	.word	0xffff0007

0800ba78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e10f      	b.n	800bcaa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a87      	ldr	r2, [pc, #540]	@ (800bcb4 <HAL_SPI_Init+0x23c>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d00f      	beq.n	800baba <HAL_SPI_Init+0x42>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a86      	ldr	r2, [pc, #536]	@ (800bcb8 <HAL_SPI_Init+0x240>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d00a      	beq.n	800baba <HAL_SPI_Init+0x42>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a84      	ldr	r2, [pc, #528]	@ (800bcbc <HAL_SPI_Init+0x244>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d005      	beq.n	800baba <HAL_SPI_Init+0x42>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	2b0f      	cmp	r3, #15
 800bab4:	d901      	bls.n	800baba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e0f7      	b.n	800bcaa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fbca 	bl	800c254 <SPI_GetPacketSize>
 800bac0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a7b      	ldr	r2, [pc, #492]	@ (800bcb4 <HAL_SPI_Init+0x23c>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d00c      	beq.n	800bae6 <HAL_SPI_Init+0x6e>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a79      	ldr	r2, [pc, #484]	@ (800bcb8 <HAL_SPI_Init+0x240>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d007      	beq.n	800bae6 <HAL_SPI_Init+0x6e>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a78      	ldr	r2, [pc, #480]	@ (800bcbc <HAL_SPI_Init+0x244>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d002      	beq.n	800bae6 <HAL_SPI_Init+0x6e>
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b08      	cmp	r3, #8
 800bae4:	d811      	bhi.n	800bb0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800baea:	4a72      	ldr	r2, [pc, #456]	@ (800bcb4 <HAL_SPI_Init+0x23c>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d009      	beq.n	800bb04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a70      	ldr	r2, [pc, #448]	@ (800bcb8 <HAL_SPI_Init+0x240>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d004      	beq.n	800bb04 <HAL_SPI_Init+0x8c>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a6f      	ldr	r2, [pc, #444]	@ (800bcbc <HAL_SPI_Init+0x244>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d104      	bne.n	800bb0e <HAL_SPI_Init+0x96>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b10      	cmp	r3, #16
 800bb08:	d901      	bls.n	800bb0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e0cd      	b.n	800bcaa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d106      	bne.n	800bb28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7f5 fb9e 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f022 0201 	bic.w	r2, r2, #1
 800bb3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bb4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb54:	d119      	bne.n	800bb8a <HAL_SPI_Init+0x112>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb5e:	d103      	bne.n	800bb68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d008      	beq.n	800bb7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10c      	bne.n	800bb8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb78:	d107      	bne.n	800bb8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bb88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00f      	beq.n	800bbb6 <HAL_SPI_Init+0x13e>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	2b06      	cmp	r3, #6
 800bb9c:	d90b      	bls.n	800bbb6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	e007      	b.n	800bbc6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bbc4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	69da      	ldr	r2, [r3, #28]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbce:	431a      	orrs	r2, r3
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd8:	ea42 0103 	orr.w	r1, r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	68da      	ldr	r2, [r3, #12]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	430a      	orrs	r2, r1
 800bbe6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf0:	431a      	orrs	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbf6:	431a      	orrs	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	431a      	orrs	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	431a      	orrs	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	695b      	ldr	r3, [r3, #20]
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc1a:	431a      	orrs	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	431a      	orrs	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc26:	ea42 0103 	orr.w	r1, r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d113      	bne.n	800bc66 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bc64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f022 0201 	bic.w	r2, r2, #1
 800bc74:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00a      	beq.n	800bc98 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	430a      	orrs	r2, r1
 800bc96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	40013000 	.word	0x40013000
 800bcb8:	40003800 	.word	0x40003800
 800bcbc:	40003c00 	.word	0x40003c00

0800bcc0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b08a      	sub	sp, #40	@ 0x28
 800bcc4:	af02      	add	r7, sp, #8
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	603b      	str	r3, [r7, #0]
 800bccc:	4613      	mov	r3, r2
 800bcce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3320      	adds	r3, #32
 800bcd6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d101      	bne.n	800bcea <HAL_SPI_Transmit+0x2a>
 800bce6:	2302      	movs	r3, #2
 800bce8:	e1e1      	b.n	800c0ae <HAL_SPI_Transmit+0x3ee>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcf2:	f7f5 ff87 	bl	8001c04 <HAL_GetTick>
 800bcf6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d007      	beq.n	800bd14 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bd04:	2302      	movs	r3, #2
 800bd06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800bd10:	7efb      	ldrb	r3, [r7, #27]
 800bd12:	e1cc      	b.n	800c0ae <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <HAL_SPI_Transmit+0x60>
 800bd1a:	88fb      	ldrh	r3, [r7, #6]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d107      	bne.n	800bd30 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800bd2c:	7efb      	ldrb	r3, [r7, #27]
 800bd2e:	e1be      	b.n	800c0ae <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2203      	movs	r2, #3
 800bd34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	88fa      	ldrh	r2, [r7, #6]
 800bd4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	88fa      	ldrh	r2, [r7, #6]
 800bd52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2200      	movs	r2, #0
 800bd76:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bd80:	d108      	bne.n	800bd94 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	e009      	b.n	800bda8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bda6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	4b96      	ldr	r3, [pc, #600]	@ (800c008 <HAL_SPI_Transmit+0x348>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	88f9      	ldrh	r1, [r7, #6]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	6812      	ldr	r2, [r2, #0]
 800bdb8:	430b      	orrs	r3, r1
 800bdba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f042 0201 	orr.w	r2, r2, #1
 800bdca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdd4:	d107      	bne.n	800bde6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bde4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	2b0f      	cmp	r3, #15
 800bdec:	d947      	bls.n	800be7e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bdee:	e03f      	b.n	800be70 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	f003 0302 	and.w	r3, r3, #2
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d114      	bne.n	800be28 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6812      	ldr	r2, [r2, #0]
 800be08:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be0e:	1d1a      	adds	r2, r3, #4
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	3b01      	subs	r3, #1
 800be1e:	b29a      	uxth	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800be26:	e023      	b.n	800be70 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be28:	f7f5 feec 	bl	8001c04 <HAL_GetTick>
 800be2c:	4602      	mov	r2, r0
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	429a      	cmp	r2, r3
 800be36:	d803      	bhi.n	800be40 <HAL_SPI_Transmit+0x180>
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be3e:	d102      	bne.n	800be46 <HAL_SPI_Transmit+0x186>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d114      	bne.n	800be70 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f000 f936 	bl	800c0b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e11e      	b.n	800c0ae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be76:	b29b      	uxth	r3, r3
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1b9      	bne.n	800bdf0 <HAL_SPI_Transmit+0x130>
 800be7c:	e0f1      	b.n	800c062 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	2b07      	cmp	r3, #7
 800be84:	f240 80e6 	bls.w	800c054 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800be88:	e05d      	b.n	800bf46 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	f003 0302 	and.w	r3, r3, #2
 800be94:	2b02      	cmp	r3, #2
 800be96:	d132      	bne.n	800befe <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d918      	bls.n	800bed6 <HAL_SPI_Transmit+0x216>
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d014      	beq.n	800bed6 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6812      	ldr	r2, [r2, #0]
 800beb6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bebc:	1d1a      	adds	r2, r3, #4
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bec8:	b29b      	uxth	r3, r3
 800beca:	3b02      	subs	r3, #2
 800becc:	b29a      	uxth	r2, r3
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bed4:	e037      	b.n	800bf46 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beda:	881a      	ldrh	r2, [r3, #0]
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bee4:	1c9a      	adds	r2, r3, #2
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	3b01      	subs	r3, #1
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800befc:	e023      	b.n	800bf46 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800befe:	f7f5 fe81 	bl	8001c04 <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d803      	bhi.n	800bf16 <HAL_SPI_Transmit+0x256>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf14:	d102      	bne.n	800bf1c <HAL_SPI_Transmit+0x25c>
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d114      	bne.n	800bf46 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f000 f8cb 	bl	800c0b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800bf42:	2303      	movs	r3, #3
 800bf44:	e0b3      	b.n	800c0ae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d19b      	bne.n	800be8a <HAL_SPI_Transmit+0x1ca>
 800bf52:	e086      	b.n	800c062 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	f003 0302 	and.w	r3, r3, #2
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d154      	bne.n	800c00c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	2b03      	cmp	r3, #3
 800bf6c:	d918      	bls.n	800bfa0 <HAL_SPI_Transmit+0x2e0>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf72:	2b40      	cmp	r3, #64	@ 0x40
 800bf74:	d914      	bls.n	800bfa0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	6812      	ldr	r2, [r2, #0]
 800bf80:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf86:	1d1a      	adds	r2, r3, #4
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	3b04      	subs	r3, #4
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf9e:	e059      	b.n	800c054 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d917      	bls.n	800bfdc <HAL_SPI_Transmit+0x31c>
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d013      	beq.n	800bfdc <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfb8:	881a      	ldrh	r2, [r3, #0]
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfc2:	1c9a      	adds	r2, r3, #2
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	3b02      	subs	r3, #2
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bfda:	e03b      	b.n	800c054 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3320      	adds	r3, #32
 800bfe6:	7812      	ldrb	r2, [r2, #0]
 800bfe8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	3b01      	subs	r3, #1
 800bffe:	b29a      	uxth	r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c006:	e025      	b.n	800c054 <HAL_SPI_Transmit+0x394>
 800c008:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c00c:	f7f5 fdfa 	bl	8001c04 <HAL_GetTick>
 800c010:	4602      	mov	r2, r0
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	1ad3      	subs	r3, r2, r3
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d803      	bhi.n	800c024 <HAL_SPI_Transmit+0x364>
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c022:	d102      	bne.n	800c02a <HAL_SPI_Transmit+0x36a>
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d114      	bne.n	800c054 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f000 f844 	bl	800c0b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c03e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c050:	2303      	movs	r3, #3
 800c052:	e02c      	b.n	800c0ae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f47f af79 	bne.w	800bf54 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2200      	movs	r2, #0
 800c06a:	2108      	movs	r1, #8
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f000 f8c3 	bl	800c1f8 <SPI_WaitOnFlagUntilTimeout>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d007      	beq.n	800c088 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c07e:	f043 0220 	orr.w	r2, r3, #32
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 f815 	bl	800c0b8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d001      	beq.n	800c0ac <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e000      	b.n	800c0ae <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800c0ac:	7efb      	ldrb	r3, [r7, #27]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3720      	adds	r7, #32
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop

0800c0b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	699a      	ldr	r2, [r3, #24]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f042 0208 	orr.w	r2, r2, #8
 800c0d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	699a      	ldr	r2, [r3, #24]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f042 0210 	orr.w	r2, r2, #16
 800c0e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f022 0201 	bic.w	r2, r2, #1
 800c0f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6919      	ldr	r1, [r3, #16]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	4b3c      	ldr	r3, [pc, #240]	@ (800c1f4 <SPI_CloseTransfer+0x13c>)
 800c104:	400b      	ands	r3, r1
 800c106:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689a      	ldr	r2, [r3, #8]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c116:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b04      	cmp	r3, #4
 800c122:	d014      	beq.n	800c14e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f003 0320 	and.w	r3, r3, #32
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00f      	beq.n	800c14e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c134:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	699a      	ldr	r2, [r3, #24]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f042 0220 	orr.w	r2, r2, #32
 800c14c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b03      	cmp	r3, #3
 800c158:	d014      	beq.n	800c184 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00f      	beq.n	800c184 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c16a:	f043 0204 	orr.w	r2, r3, #4
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	699a      	ldr	r2, [r3, #24]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c182:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00f      	beq.n	800c1ae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c194:	f043 0201 	orr.w	r2, r3, #1
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	699a      	ldr	r2, [r3, #24]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1ac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00f      	beq.n	800c1d8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1be:	f043 0208 	orr.w	r2, r3, #8
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	699a      	ldr	r2, [r3, #24]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c1d6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c1e8:	bf00      	nop
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	fffffc90 	.word	0xfffffc90

0800c1f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	603b      	str	r3, [r7, #0]
 800c204:	4613      	mov	r3, r2
 800c206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c208:	e010      	b.n	800c22c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c20a:	f7f5 fcfb 	bl	8001c04 <HAL_GetTick>
 800c20e:	4602      	mov	r2, r0
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	683a      	ldr	r2, [r7, #0]
 800c216:	429a      	cmp	r2, r3
 800c218:	d803      	bhi.n	800c222 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c220:	d102      	bne.n	800c228 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d101      	bne.n	800c22c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c228:	2303      	movs	r3, #3
 800c22a:	e00f      	b.n	800c24c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	695a      	ldr	r2, [r3, #20]
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	4013      	ands	r3, r2
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	429a      	cmp	r2, r3
 800c23a:	bf0c      	ite	eq
 800c23c:	2301      	moveq	r3, #1
 800c23e:	2300      	movne	r3, #0
 800c240:	b2db      	uxtb	r3, r3
 800c242:	461a      	mov	r2, r3
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	429a      	cmp	r2, r3
 800c248:	d0df      	beq.n	800c20a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c260:	095b      	lsrs	r3, r3, #5
 800c262:	3301      	adds	r3, #1
 800c264:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	3301      	adds	r3, #1
 800c26c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	3307      	adds	r3, #7
 800c272:	08db      	lsrs	r3, r3, #3
 800c274:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr

0800c28a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b082      	sub	sp, #8
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e049      	b.n	800c330 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7f5 fbb5 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2202      	movs	r2, #2
 800c2ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f000 fd71 	bl	800cdb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2201      	movs	r2, #1
 800c322:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2201      	movs	r2, #1
 800c32a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d001      	beq.n	800c350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	e054      	b.n	800c3fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2202      	movs	r2, #2
 800c354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68da      	ldr	r2, [r3, #12]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f042 0201 	orr.w	r2, r2, #1
 800c366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a26      	ldr	r2, [pc, #152]	@ (800c408 <HAL_TIM_Base_Start_IT+0xd0>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d022      	beq.n	800c3b8 <HAL_TIM_Base_Start_IT+0x80>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c37a:	d01d      	beq.n	800c3b8 <HAL_TIM_Base_Start_IT+0x80>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a22      	ldr	r2, [pc, #136]	@ (800c40c <HAL_TIM_Base_Start_IT+0xd4>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d018      	beq.n	800c3b8 <HAL_TIM_Base_Start_IT+0x80>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a21      	ldr	r2, [pc, #132]	@ (800c410 <HAL_TIM_Base_Start_IT+0xd8>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d013      	beq.n	800c3b8 <HAL_TIM_Base_Start_IT+0x80>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a1f      	ldr	r2, [pc, #124]	@ (800c414 <HAL_TIM_Base_Start_IT+0xdc>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d00e      	beq.n	800c3b8 <HAL_TIM_Base_Start_IT+0x80>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a1e      	ldr	r2, [pc, #120]	@ (800c418 <HAL_TIM_Base_Start_IT+0xe0>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d009      	beq.n	800c3b8 <HAL_TIM_Base_Start_IT+0x80>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a1c      	ldr	r2, [pc, #112]	@ (800c41c <HAL_TIM_Base_Start_IT+0xe4>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d004      	beq.n	800c3b8 <HAL_TIM_Base_Start_IT+0x80>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a1b      	ldr	r2, [pc, #108]	@ (800c420 <HAL_TIM_Base_Start_IT+0xe8>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d115      	bne.n	800c3e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689a      	ldr	r2, [r3, #8]
 800c3be:	4b19      	ldr	r3, [pc, #100]	@ (800c424 <HAL_TIM_Base_Start_IT+0xec>)
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b06      	cmp	r3, #6
 800c3c8:	d015      	beq.n	800c3f6 <HAL_TIM_Base_Start_IT+0xbe>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3d0:	d011      	beq.n	800c3f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f042 0201 	orr.w	r2, r2, #1
 800c3e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3e2:	e008      	b.n	800c3f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	e000      	b.n	800c3f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	40010000 	.word	0x40010000
 800c40c:	40000400 	.word	0x40000400
 800c410:	40000800 	.word	0x40000800
 800c414:	40000c00 	.word	0x40000c00
 800c418:	40010400 	.word	0x40010400
 800c41c:	40001800 	.word	0x40001800
 800c420:	40014000 	.word	0x40014000
 800c424:	00010007 	.word	0x00010007

0800c428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e049      	b.n	800c4ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	d106      	bne.n	800c454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f841 	bl	800c4d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2202      	movs	r2, #2
 800c458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3304      	adds	r3, #4
 800c464:	4619      	mov	r1, r3
 800c466:	4610      	mov	r0, r2
 800c468:	f000 fca2 	bl	800cdb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c4d6:	b480      	push	{r7}
 800c4d8:	b083      	sub	sp, #12
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c4de:	bf00      	nop
 800c4e0:	370c      	adds	r7, #12
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
	...

0800c4ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d109      	bne.n	800c510 <HAL_TIM_PWM_Start+0x24>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b01      	cmp	r3, #1
 800c506:	bf14      	ite	ne
 800c508:	2301      	movne	r3, #1
 800c50a:	2300      	moveq	r3, #0
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	e03c      	b.n	800c58a <HAL_TIM_PWM_Start+0x9e>
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b04      	cmp	r3, #4
 800c514:	d109      	bne.n	800c52a <HAL_TIM_PWM_Start+0x3e>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b01      	cmp	r3, #1
 800c520:	bf14      	ite	ne
 800c522:	2301      	movne	r3, #1
 800c524:	2300      	moveq	r3, #0
 800c526:	b2db      	uxtb	r3, r3
 800c528:	e02f      	b.n	800c58a <HAL_TIM_PWM_Start+0x9e>
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	2b08      	cmp	r3, #8
 800c52e:	d109      	bne.n	800c544 <HAL_TIM_PWM_Start+0x58>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b01      	cmp	r3, #1
 800c53a:	bf14      	ite	ne
 800c53c:	2301      	movne	r3, #1
 800c53e:	2300      	moveq	r3, #0
 800c540:	b2db      	uxtb	r3, r3
 800c542:	e022      	b.n	800c58a <HAL_TIM_PWM_Start+0x9e>
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	2b0c      	cmp	r3, #12
 800c548:	d109      	bne.n	800c55e <HAL_TIM_PWM_Start+0x72>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c550:	b2db      	uxtb	r3, r3
 800c552:	2b01      	cmp	r3, #1
 800c554:	bf14      	ite	ne
 800c556:	2301      	movne	r3, #1
 800c558:	2300      	moveq	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	e015      	b.n	800c58a <HAL_TIM_PWM_Start+0x9e>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b10      	cmp	r3, #16
 800c562:	d109      	bne.n	800c578 <HAL_TIM_PWM_Start+0x8c>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	bf14      	ite	ne
 800c570:	2301      	movne	r3, #1
 800c572:	2300      	moveq	r3, #0
 800c574:	b2db      	uxtb	r3, r3
 800c576:	e008      	b.n	800c58a <HAL_TIM_PWM_Start+0x9e>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b01      	cmp	r3, #1
 800c582:	bf14      	ite	ne
 800c584:	2301      	movne	r3, #1
 800c586:	2300      	moveq	r3, #0
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e0a1      	b.n	800c6d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d104      	bne.n	800c5a2 <HAL_TIM_PWM_Start+0xb6>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2202      	movs	r2, #2
 800c59c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5a0:	e023      	b.n	800c5ea <HAL_TIM_PWM_Start+0xfe>
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	2b04      	cmp	r3, #4
 800c5a6:	d104      	bne.n	800c5b2 <HAL_TIM_PWM_Start+0xc6>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5b0:	e01b      	b.n	800c5ea <HAL_TIM_PWM_Start+0xfe>
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2b08      	cmp	r3, #8
 800c5b6:	d104      	bne.n	800c5c2 <HAL_TIM_PWM_Start+0xd6>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5c0:	e013      	b.n	800c5ea <HAL_TIM_PWM_Start+0xfe>
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b0c      	cmp	r3, #12
 800c5c6:	d104      	bne.n	800c5d2 <HAL_TIM_PWM_Start+0xe6>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5d0:	e00b      	b.n	800c5ea <HAL_TIM_PWM_Start+0xfe>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	2b10      	cmp	r3, #16
 800c5d6:	d104      	bne.n	800c5e2 <HAL_TIM_PWM_Start+0xf6>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5e0:	e003      	b.n	800c5ea <HAL_TIM_PWM_Start+0xfe>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f000 ffea 	bl	800d5cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a38      	ldr	r2, [pc, #224]	@ (800c6e0 <HAL_TIM_PWM_Start+0x1f4>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d013      	beq.n	800c62a <HAL_TIM_PWM_Start+0x13e>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a37      	ldr	r2, [pc, #220]	@ (800c6e4 <HAL_TIM_PWM_Start+0x1f8>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d00e      	beq.n	800c62a <HAL_TIM_PWM_Start+0x13e>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a35      	ldr	r2, [pc, #212]	@ (800c6e8 <HAL_TIM_PWM_Start+0x1fc>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d009      	beq.n	800c62a <HAL_TIM_PWM_Start+0x13e>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a34      	ldr	r2, [pc, #208]	@ (800c6ec <HAL_TIM_PWM_Start+0x200>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d004      	beq.n	800c62a <HAL_TIM_PWM_Start+0x13e>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a32      	ldr	r2, [pc, #200]	@ (800c6f0 <HAL_TIM_PWM_Start+0x204>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d101      	bne.n	800c62e <HAL_TIM_PWM_Start+0x142>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e000      	b.n	800c630 <HAL_TIM_PWM_Start+0x144>
 800c62e:	2300      	movs	r3, #0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d007      	beq.n	800c644 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c642:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a25      	ldr	r2, [pc, #148]	@ (800c6e0 <HAL_TIM_PWM_Start+0x1f4>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d022      	beq.n	800c694 <HAL_TIM_PWM_Start+0x1a8>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c656:	d01d      	beq.n	800c694 <HAL_TIM_PWM_Start+0x1a8>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a25      	ldr	r2, [pc, #148]	@ (800c6f4 <HAL_TIM_PWM_Start+0x208>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d018      	beq.n	800c694 <HAL_TIM_PWM_Start+0x1a8>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a24      	ldr	r2, [pc, #144]	@ (800c6f8 <HAL_TIM_PWM_Start+0x20c>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d013      	beq.n	800c694 <HAL_TIM_PWM_Start+0x1a8>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a22      	ldr	r2, [pc, #136]	@ (800c6fc <HAL_TIM_PWM_Start+0x210>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d00e      	beq.n	800c694 <HAL_TIM_PWM_Start+0x1a8>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a1a      	ldr	r2, [pc, #104]	@ (800c6e4 <HAL_TIM_PWM_Start+0x1f8>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d009      	beq.n	800c694 <HAL_TIM_PWM_Start+0x1a8>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a1e      	ldr	r2, [pc, #120]	@ (800c700 <HAL_TIM_PWM_Start+0x214>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d004      	beq.n	800c694 <HAL_TIM_PWM_Start+0x1a8>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a16      	ldr	r2, [pc, #88]	@ (800c6e8 <HAL_TIM_PWM_Start+0x1fc>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d115      	bne.n	800c6c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	689a      	ldr	r2, [r3, #8]
 800c69a:	4b1a      	ldr	r3, [pc, #104]	@ (800c704 <HAL_TIM_PWM_Start+0x218>)
 800c69c:	4013      	ands	r3, r2
 800c69e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2b06      	cmp	r3, #6
 800c6a4:	d015      	beq.n	800c6d2 <HAL_TIM_PWM_Start+0x1e6>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6ac:	d011      	beq.n	800c6d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f042 0201 	orr.w	r2, r2, #1
 800c6bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6be:	e008      	b.n	800c6d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f042 0201 	orr.w	r2, r2, #1
 800c6ce:	601a      	str	r2, [r3, #0]
 800c6d0:	e000      	b.n	800c6d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	40010000 	.word	0x40010000
 800c6e4:	40010400 	.word	0x40010400
 800c6e8:	40014000 	.word	0x40014000
 800c6ec:	40014400 	.word	0x40014400
 800c6f0:	40014800 	.word	0x40014800
 800c6f4:	40000400 	.word	0x40000400
 800c6f8:	40000800 	.word	0x40000800
 800c6fc:	40000c00 	.word	0x40000c00
 800c700:	40001800 	.word	0x40001800
 800c704:	00010007 	.word	0x00010007

0800c708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	f003 0302 	and.w	r3, r3, #2
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d122      	bne.n	800c764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	f003 0302 	and.w	r3, r3, #2
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d11b      	bne.n	800c764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f06f 0202 	mvn.w	r2, #2
 800c734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2201      	movs	r2, #1
 800c73a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	699b      	ldr	r3, [r3, #24]
 800c742:	f003 0303 	and.w	r3, r3, #3
 800c746:	2b00      	cmp	r3, #0
 800c748:	d003      	beq.n	800c752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fb12 	bl	800cd74 <HAL_TIM_IC_CaptureCallback>
 800c750:	e005      	b.n	800c75e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fb04 	bl	800cd60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fb15 	bl	800cd88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	f003 0304 	and.w	r3, r3, #4
 800c76e:	2b04      	cmp	r3, #4
 800c770:	d122      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	f003 0304 	and.w	r3, r3, #4
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d11b      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f06f 0204 	mvn.w	r2, #4
 800c788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2202      	movs	r2, #2
 800c78e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d003      	beq.n	800c7a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fae8 	bl	800cd74 <HAL_TIM_IC_CaptureCallback>
 800c7a4:	e005      	b.n	800c7b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fada 	bl	800cd60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 faeb 	bl	800cd88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	f003 0308 	and.w	r3, r3, #8
 800c7c2:	2b08      	cmp	r3, #8
 800c7c4:	d122      	bne.n	800c80c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	f003 0308 	and.w	r3, r3, #8
 800c7d0:	2b08      	cmp	r3, #8
 800c7d2:	d11b      	bne.n	800c80c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f06f 0208 	mvn.w	r2, #8
 800c7dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2204      	movs	r2, #4
 800c7e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	69db      	ldr	r3, [r3, #28]
 800c7ea:	f003 0303 	and.w	r3, r3, #3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fabe 	bl	800cd74 <HAL_TIM_IC_CaptureCallback>
 800c7f8:	e005      	b.n	800c806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fab0 	bl	800cd60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fac1 	bl	800cd88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	f003 0310 	and.w	r3, r3, #16
 800c816:	2b10      	cmp	r3, #16
 800c818:	d122      	bne.n	800c860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f003 0310 	and.w	r3, r3, #16
 800c824:	2b10      	cmp	r3, #16
 800c826:	d11b      	bne.n	800c860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f06f 0210 	mvn.w	r2, #16
 800c830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2208      	movs	r2, #8
 800c836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c842:	2b00      	cmp	r3, #0
 800c844:	d003      	beq.n	800c84e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fa94 	bl	800cd74 <HAL_TIM_IC_CaptureCallback>
 800c84c:	e005      	b.n	800c85a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fa86 	bl	800cd60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fa97 	bl	800cd88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	f003 0301 	and.w	r3, r3, #1
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d10e      	bne.n	800c88c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	f003 0301 	and.w	r3, r3, #1
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d107      	bne.n	800c88c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f06f 0201 	mvn.w	r2, #1
 800c884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7f4 fb56 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c896:	2b80      	cmp	r3, #128	@ 0x80
 800c898:	d10e      	bne.n	800c8b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8a4:	2b80      	cmp	r3, #128	@ 0x80
 800c8a6:	d107      	bne.n	800c8b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c8b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 ffc6 	bl	800d844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8c6:	d10e      	bne.n	800c8e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8d2:	2b80      	cmp	r3, #128	@ 0x80
 800c8d4:	d107      	bne.n	800c8e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 ffb9 	bl	800d858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8f0:	2b40      	cmp	r3, #64	@ 0x40
 800c8f2:	d10e      	bne.n	800c912 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8fe:	2b40      	cmp	r3, #64	@ 0x40
 800c900:	d107      	bne.n	800c912 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c90a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fa45 	bl	800cd9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	f003 0320 	and.w	r3, r3, #32
 800c91c:	2b20      	cmp	r3, #32
 800c91e:	d10e      	bne.n	800c93e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	f003 0320 	and.w	r3, r3, #32
 800c92a:	2b20      	cmp	r3, #32
 800c92c:	d107      	bne.n	800c93e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f06f 0220 	mvn.w	r2, #32
 800c936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 ff79 	bl	800d830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
	...

0800c948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d101      	bne.n	800c966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c962:	2302      	movs	r3, #2
 800c964:	e0ff      	b.n	800cb66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2201      	movs	r2, #1
 800c96a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b14      	cmp	r3, #20
 800c972:	f200 80f0 	bhi.w	800cb56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c976:	a201      	add	r2, pc, #4	@ (adr r2, 800c97c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97c:	0800c9d1 	.word	0x0800c9d1
 800c980:	0800cb57 	.word	0x0800cb57
 800c984:	0800cb57 	.word	0x0800cb57
 800c988:	0800cb57 	.word	0x0800cb57
 800c98c:	0800ca11 	.word	0x0800ca11
 800c990:	0800cb57 	.word	0x0800cb57
 800c994:	0800cb57 	.word	0x0800cb57
 800c998:	0800cb57 	.word	0x0800cb57
 800c99c:	0800ca53 	.word	0x0800ca53
 800c9a0:	0800cb57 	.word	0x0800cb57
 800c9a4:	0800cb57 	.word	0x0800cb57
 800c9a8:	0800cb57 	.word	0x0800cb57
 800c9ac:	0800ca93 	.word	0x0800ca93
 800c9b0:	0800cb57 	.word	0x0800cb57
 800c9b4:	0800cb57 	.word	0x0800cb57
 800c9b8:	0800cb57 	.word	0x0800cb57
 800c9bc:	0800cad5 	.word	0x0800cad5
 800c9c0:	0800cb57 	.word	0x0800cb57
 800c9c4:	0800cb57 	.word	0x0800cb57
 800c9c8:	0800cb57 	.word	0x0800cb57
 800c9cc:	0800cb15 	.word	0x0800cb15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68b9      	ldr	r1, [r7, #8]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f000 fa84 	bl	800cee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	699a      	ldr	r2, [r3, #24]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f042 0208 	orr.w	r2, r2, #8
 800c9ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	699a      	ldr	r2, [r3, #24]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f022 0204 	bic.w	r2, r2, #4
 800c9fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6999      	ldr	r1, [r3, #24]
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	691a      	ldr	r2, [r3, #16]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	430a      	orrs	r2, r1
 800ca0c:	619a      	str	r2, [r3, #24]
      break;
 800ca0e:	e0a5      	b.n	800cb5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68b9      	ldr	r1, [r7, #8]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 faf4 	bl	800d004 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	699a      	ldr	r2, [r3, #24]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	699a      	ldr	r2, [r3, #24]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6999      	ldr	r1, [r3, #24]
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	021a      	lsls	r2, r3, #8
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	430a      	orrs	r2, r1
 800ca4e:	619a      	str	r2, [r3, #24]
      break;
 800ca50:	e084      	b.n	800cb5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68b9      	ldr	r1, [r7, #8]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f000 fb5d 	bl	800d118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	69da      	ldr	r2, [r3, #28]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f042 0208 	orr.w	r2, r2, #8
 800ca6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	69da      	ldr	r2, [r3, #28]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f022 0204 	bic.w	r2, r2, #4
 800ca7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	69d9      	ldr	r1, [r3, #28]
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	691a      	ldr	r2, [r3, #16]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	430a      	orrs	r2, r1
 800ca8e:	61da      	str	r2, [r3, #28]
      break;
 800ca90:	e064      	b.n	800cb5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68b9      	ldr	r1, [r7, #8]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 fbc5 	bl	800d228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	69da      	ldr	r2, [r3, #28]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800caac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	69da      	ldr	r2, [r3, #28]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cabc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	69d9      	ldr	r1, [r3, #28]
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	021a      	lsls	r2, r3, #8
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	430a      	orrs	r2, r1
 800cad0:	61da      	str	r2, [r3, #28]
      break;
 800cad2:	e043      	b.n	800cb5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68b9      	ldr	r1, [r7, #8]
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 fc0e 	bl	800d2fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f042 0208 	orr.w	r2, r2, #8
 800caee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f022 0204 	bic.w	r2, r2, #4
 800cafe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	691a      	ldr	r2, [r3, #16]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	430a      	orrs	r2, r1
 800cb10:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cb12:	e023      	b.n	800cb5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68b9      	ldr	r1, [r7, #8]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 fc52 	bl	800d3c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	021a      	lsls	r2, r3, #8
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	430a      	orrs	r2, r1
 800cb52:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cb54:	e002      	b.n	800cb5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	75fb      	strb	r3, [r7, #23]
      break;
 800cb5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3718      	adds	r7, #24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop

0800cb70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d101      	bne.n	800cb8c <HAL_TIM_ConfigClockSource+0x1c>
 800cb88:	2302      	movs	r3, #2
 800cb8a:	e0dc      	b.n	800cd46 <HAL_TIM_ConfigClockSource+0x1d6>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2202      	movs	r2, #2
 800cb98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cba4:	68ba      	ldr	r2, [r7, #8]
 800cba6:	4b6a      	ldr	r3, [pc, #424]	@ (800cd50 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cba8:	4013      	ands	r3, r2
 800cbaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cbb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a64      	ldr	r2, [pc, #400]	@ (800cd54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	f000 80a9 	beq.w	800cd1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cbc8:	4a62      	ldr	r2, [pc, #392]	@ (800cd54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	f200 80ae 	bhi.w	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cbd0:	4a61      	ldr	r2, [pc, #388]	@ (800cd58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	f000 80a1 	beq.w	800cd1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cbd8:	4a5f      	ldr	r2, [pc, #380]	@ (800cd58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	f200 80a6 	bhi.w	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cbe0:	4a5e      	ldr	r2, [pc, #376]	@ (800cd5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	f000 8099 	beq.w	800cd1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cbe8:	4a5c      	ldr	r2, [pc, #368]	@ (800cd5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	f200 809e 	bhi.w	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cbf0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbf4:	f000 8091 	beq.w	800cd1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cbf8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbfc:	f200 8096 	bhi.w	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc04:	f000 8089 	beq.w	800cd1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc0c:	f200 808e 	bhi.w	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc14:	d03e      	beq.n	800cc94 <HAL_TIM_ConfigClockSource+0x124>
 800cc16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc1a:	f200 8087 	bhi.w	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc22:	f000 8086 	beq.w	800cd32 <HAL_TIM_ConfigClockSource+0x1c2>
 800cc26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc2a:	d87f      	bhi.n	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc2c:	2b70      	cmp	r3, #112	@ 0x70
 800cc2e:	d01a      	beq.n	800cc66 <HAL_TIM_ConfigClockSource+0xf6>
 800cc30:	2b70      	cmp	r3, #112	@ 0x70
 800cc32:	d87b      	bhi.n	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc34:	2b60      	cmp	r3, #96	@ 0x60
 800cc36:	d050      	beq.n	800ccda <HAL_TIM_ConfigClockSource+0x16a>
 800cc38:	2b60      	cmp	r3, #96	@ 0x60
 800cc3a:	d877      	bhi.n	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc3c:	2b50      	cmp	r3, #80	@ 0x50
 800cc3e:	d03c      	beq.n	800ccba <HAL_TIM_ConfigClockSource+0x14a>
 800cc40:	2b50      	cmp	r3, #80	@ 0x50
 800cc42:	d873      	bhi.n	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc44:	2b40      	cmp	r3, #64	@ 0x40
 800cc46:	d058      	beq.n	800ccfa <HAL_TIM_ConfigClockSource+0x18a>
 800cc48:	2b40      	cmp	r3, #64	@ 0x40
 800cc4a:	d86f      	bhi.n	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc4c:	2b30      	cmp	r3, #48	@ 0x30
 800cc4e:	d064      	beq.n	800cd1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc50:	2b30      	cmp	r3, #48	@ 0x30
 800cc52:	d86b      	bhi.n	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc54:	2b20      	cmp	r3, #32
 800cc56:	d060      	beq.n	800cd1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc58:	2b20      	cmp	r3, #32
 800cc5a:	d867      	bhi.n	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d05c      	beq.n	800cd1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc60:	2b10      	cmp	r3, #16
 800cc62:	d05a      	beq.n	800cd1a <HAL_TIM_ConfigClockSource+0x1aa>
 800cc64:	e062      	b.n	800cd2c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc76:	f000 fc89 	bl	800d58c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	609a      	str	r2, [r3, #8]
      break;
 800cc92:	e04f      	b.n	800cd34 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cca4:	f000 fc72 	bl	800d58c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	689a      	ldr	r2, [r3, #8]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ccb6:	609a      	str	r2, [r3, #8]
      break;
 800ccb8:	e03c      	b.n	800cd34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	f000 fbe2 	bl	800d490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2150      	movs	r1, #80	@ 0x50
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 fc3c 	bl	800d550 <TIM_ITRx_SetConfig>
      break;
 800ccd8:	e02c      	b.n	800cd34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cce6:	461a      	mov	r2, r3
 800cce8:	f000 fc01 	bl	800d4ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2160      	movs	r1, #96	@ 0x60
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 fc2c 	bl	800d550 <TIM_ITRx_SetConfig>
      break;
 800ccf8:	e01c      	b.n	800cd34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd06:	461a      	mov	r2, r3
 800cd08:	f000 fbc2 	bl	800d490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2140      	movs	r1, #64	@ 0x40
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 fc1c 	bl	800d550 <TIM_ITRx_SetConfig>
      break;
 800cd18:	e00c      	b.n	800cd34 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4619      	mov	r1, r3
 800cd24:	4610      	mov	r0, r2
 800cd26:	f000 fc13 	bl	800d550 <TIM_ITRx_SetConfig>
      break;
 800cd2a:	e003      	b.n	800cd34 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	73fb      	strb	r3, [r7, #15]
      break;
 800cd30:	e000      	b.n	800cd34 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cd32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	ffceff88 	.word	0xffceff88
 800cd54:	00100040 	.word	0x00100040
 800cd58:	00100030 	.word	0x00100030
 800cd5c:	00100020 	.word	0x00100020

0800cd60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd68:	bf00      	nop
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cda4:	bf00      	nop
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a40      	ldr	r2, [pc, #256]	@ (800cec4 <TIM_Base_SetConfig+0x114>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d013      	beq.n	800cdf0 <TIM_Base_SetConfig+0x40>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdce:	d00f      	beq.n	800cdf0 <TIM_Base_SetConfig+0x40>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4a3d      	ldr	r2, [pc, #244]	@ (800cec8 <TIM_Base_SetConfig+0x118>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d00b      	beq.n	800cdf0 <TIM_Base_SetConfig+0x40>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4a3c      	ldr	r2, [pc, #240]	@ (800cecc <TIM_Base_SetConfig+0x11c>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d007      	beq.n	800cdf0 <TIM_Base_SetConfig+0x40>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4a3b      	ldr	r2, [pc, #236]	@ (800ced0 <TIM_Base_SetConfig+0x120>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d003      	beq.n	800cdf0 <TIM_Base_SetConfig+0x40>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a3a      	ldr	r2, [pc, #232]	@ (800ced4 <TIM_Base_SetConfig+0x124>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d108      	bne.n	800ce02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a2f      	ldr	r2, [pc, #188]	@ (800cec4 <TIM_Base_SetConfig+0x114>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d01f      	beq.n	800ce4a <TIM_Base_SetConfig+0x9a>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce10:	d01b      	beq.n	800ce4a <TIM_Base_SetConfig+0x9a>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a2c      	ldr	r2, [pc, #176]	@ (800cec8 <TIM_Base_SetConfig+0x118>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d017      	beq.n	800ce4a <TIM_Base_SetConfig+0x9a>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a2b      	ldr	r2, [pc, #172]	@ (800cecc <TIM_Base_SetConfig+0x11c>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d013      	beq.n	800ce4a <TIM_Base_SetConfig+0x9a>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4a2a      	ldr	r2, [pc, #168]	@ (800ced0 <TIM_Base_SetConfig+0x120>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d00f      	beq.n	800ce4a <TIM_Base_SetConfig+0x9a>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4a29      	ldr	r2, [pc, #164]	@ (800ced4 <TIM_Base_SetConfig+0x124>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d00b      	beq.n	800ce4a <TIM_Base_SetConfig+0x9a>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	4a28      	ldr	r2, [pc, #160]	@ (800ced8 <TIM_Base_SetConfig+0x128>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d007      	beq.n	800ce4a <TIM_Base_SetConfig+0x9a>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4a27      	ldr	r2, [pc, #156]	@ (800cedc <TIM_Base_SetConfig+0x12c>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d003      	beq.n	800ce4a <TIM_Base_SetConfig+0x9a>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	4a26      	ldr	r2, [pc, #152]	@ (800cee0 <TIM_Base_SetConfig+0x130>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d108      	bne.n	800ce5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	68db      	ldr	r3, [r3, #12]
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	695b      	ldr	r3, [r3, #20]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	689a      	ldr	r2, [r3, #8]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a10      	ldr	r2, [pc, #64]	@ (800cec4 <TIM_Base_SetConfig+0x114>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d00f      	beq.n	800cea8 <TIM_Base_SetConfig+0xf8>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a12      	ldr	r2, [pc, #72]	@ (800ced4 <TIM_Base_SetConfig+0x124>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d00b      	beq.n	800cea8 <TIM_Base_SetConfig+0xf8>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4a11      	ldr	r2, [pc, #68]	@ (800ced8 <TIM_Base_SetConfig+0x128>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d007      	beq.n	800cea8 <TIM_Base_SetConfig+0xf8>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4a10      	ldr	r2, [pc, #64]	@ (800cedc <TIM_Base_SetConfig+0x12c>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d003      	beq.n	800cea8 <TIM_Base_SetConfig+0xf8>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4a0f      	ldr	r2, [pc, #60]	@ (800cee0 <TIM_Base_SetConfig+0x130>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d103      	bne.n	800ceb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	691a      	ldr	r2, [r3, #16]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	615a      	str	r2, [r3, #20]
}
 800ceb6:	bf00      	nop
 800ceb8:	3714      	adds	r7, #20
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	40010000 	.word	0x40010000
 800cec8:	40000400 	.word	0x40000400
 800cecc:	40000800 	.word	0x40000800
 800ced0:	40000c00 	.word	0x40000c00
 800ced4:	40010400 	.word	0x40010400
 800ced8:	40014000 	.word	0x40014000
 800cedc:	40014400 	.word	0x40014400
 800cee0:	40014800 	.word	0x40014800

0800cee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	f023 0201 	bic.w	r2, r3, #1
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a1b      	ldr	r3, [r3, #32]
 800cefe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	4b37      	ldr	r3, [pc, #220]	@ (800cfec <TIM_OC1_SetConfig+0x108>)
 800cf10:	4013      	ands	r3, r2
 800cf12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f023 0303 	bic.w	r3, r3, #3
 800cf1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f023 0302 	bic.w	r3, r3, #2
 800cf2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a2d      	ldr	r2, [pc, #180]	@ (800cff0 <TIM_OC1_SetConfig+0x10c>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d00f      	beq.n	800cf60 <TIM_OC1_SetConfig+0x7c>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a2c      	ldr	r2, [pc, #176]	@ (800cff4 <TIM_OC1_SetConfig+0x110>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d00b      	beq.n	800cf60 <TIM_OC1_SetConfig+0x7c>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a2b      	ldr	r2, [pc, #172]	@ (800cff8 <TIM_OC1_SetConfig+0x114>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d007      	beq.n	800cf60 <TIM_OC1_SetConfig+0x7c>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a2a      	ldr	r2, [pc, #168]	@ (800cffc <TIM_OC1_SetConfig+0x118>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d003      	beq.n	800cf60 <TIM_OC1_SetConfig+0x7c>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a29      	ldr	r2, [pc, #164]	@ (800d000 <TIM_OC1_SetConfig+0x11c>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d10c      	bne.n	800cf7a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	f023 0308 	bic.w	r3, r3, #8
 800cf66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	697a      	ldr	r2, [r7, #20]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f023 0304 	bic.w	r3, r3, #4
 800cf78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a1c      	ldr	r2, [pc, #112]	@ (800cff0 <TIM_OC1_SetConfig+0x10c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d00f      	beq.n	800cfa2 <TIM_OC1_SetConfig+0xbe>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a1b      	ldr	r2, [pc, #108]	@ (800cff4 <TIM_OC1_SetConfig+0x110>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d00b      	beq.n	800cfa2 <TIM_OC1_SetConfig+0xbe>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a1a      	ldr	r2, [pc, #104]	@ (800cff8 <TIM_OC1_SetConfig+0x114>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d007      	beq.n	800cfa2 <TIM_OC1_SetConfig+0xbe>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a19      	ldr	r2, [pc, #100]	@ (800cffc <TIM_OC1_SetConfig+0x118>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d003      	beq.n	800cfa2 <TIM_OC1_SetConfig+0xbe>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a18      	ldr	r2, [pc, #96]	@ (800d000 <TIM_OC1_SetConfig+0x11c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d111      	bne.n	800cfc6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cfa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cfb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	693a      	ldr	r2, [r7, #16]
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	699b      	ldr	r3, [r3, #24]
 800cfc0:	693a      	ldr	r2, [r7, #16]
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	693a      	ldr	r2, [r7, #16]
 800cfca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	697a      	ldr	r2, [r7, #20]
 800cfde:	621a      	str	r2, [r3, #32]
}
 800cfe0:	bf00      	nop
 800cfe2:	371c      	adds	r7, #28
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	fffeff8f 	.word	0xfffeff8f
 800cff0:	40010000 	.word	0x40010000
 800cff4:	40010400 	.word	0x40010400
 800cff8:	40014000 	.word	0x40014000
 800cffc:	40014400 	.word	0x40014400
 800d000:	40014800 	.word	0x40014800

0800d004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d004:	b480      	push	{r7}
 800d006:	b087      	sub	sp, #28
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6a1b      	ldr	r3, [r3, #32]
 800d012:	f023 0210 	bic.w	r2, r3, #16
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a1b      	ldr	r3, [r3, #32]
 800d01e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4b34      	ldr	r3, [pc, #208]	@ (800d100 <TIM_OC2_SetConfig+0xfc>)
 800d030:	4013      	ands	r3, r2
 800d032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d03a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	021b      	lsls	r3, r3, #8
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	4313      	orrs	r3, r2
 800d046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	f023 0320 	bic.w	r3, r3, #32
 800d04e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	011b      	lsls	r3, r3, #4
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	4313      	orrs	r3, r2
 800d05a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a29      	ldr	r2, [pc, #164]	@ (800d104 <TIM_OC2_SetConfig+0x100>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d003      	beq.n	800d06c <TIM_OC2_SetConfig+0x68>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4a28      	ldr	r2, [pc, #160]	@ (800d108 <TIM_OC2_SetConfig+0x104>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d10d      	bne.n	800d088 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	011b      	lsls	r3, r3, #4
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d086:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a1e      	ldr	r2, [pc, #120]	@ (800d104 <TIM_OC2_SetConfig+0x100>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d00f      	beq.n	800d0b0 <TIM_OC2_SetConfig+0xac>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a1d      	ldr	r2, [pc, #116]	@ (800d108 <TIM_OC2_SetConfig+0x104>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d00b      	beq.n	800d0b0 <TIM_OC2_SetConfig+0xac>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a1c      	ldr	r2, [pc, #112]	@ (800d10c <TIM_OC2_SetConfig+0x108>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d007      	beq.n	800d0b0 <TIM_OC2_SetConfig+0xac>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a1b      	ldr	r2, [pc, #108]	@ (800d110 <TIM_OC2_SetConfig+0x10c>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d003      	beq.n	800d0b0 <TIM_OC2_SetConfig+0xac>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a1a      	ldr	r2, [pc, #104]	@ (800d114 <TIM_OC2_SetConfig+0x110>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d113      	bne.n	800d0d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d0b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d0be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	699b      	ldr	r3, [r3, #24]
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	693a      	ldr	r2, [r7, #16]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	693a      	ldr	r2, [r7, #16]
 800d0dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	685a      	ldr	r2, [r3, #4]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	697a      	ldr	r2, [r7, #20]
 800d0f0:	621a      	str	r2, [r3, #32]
}
 800d0f2:	bf00      	nop
 800d0f4:	371c      	adds	r7, #28
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	feff8fff 	.word	0xfeff8fff
 800d104:	40010000 	.word	0x40010000
 800d108:	40010400 	.word	0x40010400
 800d10c:	40014000 	.word	0x40014000
 800d110:	40014400 	.word	0x40014400
 800d114:	40014800 	.word	0x40014800

0800d118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d118:	b480      	push	{r7}
 800d11a:	b087      	sub	sp, #28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6a1b      	ldr	r3, [r3, #32]
 800d126:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a1b      	ldr	r3, [r3, #32]
 800d132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	69db      	ldr	r3, [r3, #28]
 800d13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	4b33      	ldr	r3, [pc, #204]	@ (800d210 <TIM_OC3_SetConfig+0xf8>)
 800d144:	4013      	ands	r3, r2
 800d146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f023 0303 	bic.w	r3, r3, #3
 800d14e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	4313      	orrs	r3, r2
 800d158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	021b      	lsls	r3, r3, #8
 800d168:	697a      	ldr	r2, [r7, #20]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4a28      	ldr	r2, [pc, #160]	@ (800d214 <TIM_OC3_SetConfig+0xfc>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d003      	beq.n	800d17e <TIM_OC3_SetConfig+0x66>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4a27      	ldr	r2, [pc, #156]	@ (800d218 <TIM_OC3_SetConfig+0x100>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d10d      	bne.n	800d19a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	021b      	lsls	r3, r3, #8
 800d18c:	697a      	ldr	r2, [r7, #20]
 800d18e:	4313      	orrs	r3, r2
 800d190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4a1d      	ldr	r2, [pc, #116]	@ (800d214 <TIM_OC3_SetConfig+0xfc>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d00f      	beq.n	800d1c2 <TIM_OC3_SetConfig+0xaa>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d218 <TIM_OC3_SetConfig+0x100>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d00b      	beq.n	800d1c2 <TIM_OC3_SetConfig+0xaa>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d21c <TIM_OC3_SetConfig+0x104>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d007      	beq.n	800d1c2 <TIM_OC3_SetConfig+0xaa>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d220 <TIM_OC3_SetConfig+0x108>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d003      	beq.n	800d1c2 <TIM_OC3_SetConfig+0xaa>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4a19      	ldr	r2, [pc, #100]	@ (800d224 <TIM_OC3_SetConfig+0x10c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d113      	bne.n	800d1ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d1d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	011b      	lsls	r3, r3, #4
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	011b      	lsls	r3, r3, #4
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	68fa      	ldr	r2, [r7, #12]
 800d1f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	685a      	ldr	r2, [r3, #4]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	697a      	ldr	r2, [r7, #20]
 800d202:	621a      	str	r2, [r3, #32]
}
 800d204:	bf00      	nop
 800d206:	371c      	adds	r7, #28
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	fffeff8f 	.word	0xfffeff8f
 800d214:	40010000 	.word	0x40010000
 800d218:	40010400 	.word	0x40010400
 800d21c:	40014000 	.word	0x40014000
 800d220:	40014400 	.word	0x40014400
 800d224:	40014800 	.word	0x40014800

0800d228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d228:	b480      	push	{r7}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6a1b      	ldr	r3, [r3, #32]
 800d236:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	69db      	ldr	r3, [r3, #28]
 800d24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	4b24      	ldr	r3, [pc, #144]	@ (800d2e4 <TIM_OC4_SetConfig+0xbc>)
 800d254:	4013      	ands	r3, r2
 800d256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d25e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	021b      	lsls	r3, r3, #8
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	4313      	orrs	r3, r2
 800d26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	031b      	lsls	r3, r3, #12
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4a19      	ldr	r2, [pc, #100]	@ (800d2e8 <TIM_OC4_SetConfig+0xc0>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d00f      	beq.n	800d2a8 <TIM_OC4_SetConfig+0x80>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a18      	ldr	r2, [pc, #96]	@ (800d2ec <TIM_OC4_SetConfig+0xc4>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d00b      	beq.n	800d2a8 <TIM_OC4_SetConfig+0x80>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a17      	ldr	r2, [pc, #92]	@ (800d2f0 <TIM_OC4_SetConfig+0xc8>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d007      	beq.n	800d2a8 <TIM_OC4_SetConfig+0x80>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a16      	ldr	r2, [pc, #88]	@ (800d2f4 <TIM_OC4_SetConfig+0xcc>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d003      	beq.n	800d2a8 <TIM_OC4_SetConfig+0x80>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	4a15      	ldr	r2, [pc, #84]	@ (800d2f8 <TIM_OC4_SetConfig+0xd0>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d109      	bne.n	800d2bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d2ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	019b      	lsls	r3, r3, #6
 800d2b6:	697a      	ldr	r2, [r7, #20]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	697a      	ldr	r2, [r7, #20]
 800d2c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	621a      	str	r2, [r3, #32]
}
 800d2d6:	bf00      	nop
 800d2d8:	371c      	adds	r7, #28
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	feff8fff 	.word	0xfeff8fff
 800d2e8:	40010000 	.word	0x40010000
 800d2ec:	40010400 	.word	0x40010400
 800d2f0:	40014000 	.word	0x40014000
 800d2f4:	40014400 	.word	0x40014400
 800d2f8:	40014800 	.word	0x40014800

0800d2fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6a1b      	ldr	r3, [r3, #32]
 800d30a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	4b21      	ldr	r3, [pc, #132]	@ (800d3ac <TIM_OC5_SetConfig+0xb0>)
 800d328:	4013      	ands	r3, r2
 800d32a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	4313      	orrs	r3, r2
 800d334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d33c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	041b      	lsls	r3, r3, #16
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	4313      	orrs	r3, r2
 800d348:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a18      	ldr	r2, [pc, #96]	@ (800d3b0 <TIM_OC5_SetConfig+0xb4>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d00f      	beq.n	800d372 <TIM_OC5_SetConfig+0x76>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a17      	ldr	r2, [pc, #92]	@ (800d3b4 <TIM_OC5_SetConfig+0xb8>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d00b      	beq.n	800d372 <TIM_OC5_SetConfig+0x76>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a16      	ldr	r2, [pc, #88]	@ (800d3b8 <TIM_OC5_SetConfig+0xbc>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d007      	beq.n	800d372 <TIM_OC5_SetConfig+0x76>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4a15      	ldr	r2, [pc, #84]	@ (800d3bc <TIM_OC5_SetConfig+0xc0>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d003      	beq.n	800d372 <TIM_OC5_SetConfig+0x76>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a14      	ldr	r2, [pc, #80]	@ (800d3c0 <TIM_OC5_SetConfig+0xc4>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d109      	bne.n	800d386 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d378:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	695b      	ldr	r3, [r3, #20]
 800d37e:	021b      	lsls	r3, r3, #8
 800d380:	697a      	ldr	r2, [r7, #20]
 800d382:	4313      	orrs	r3, r2
 800d384:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	685a      	ldr	r2, [r3, #4]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	621a      	str	r2, [r3, #32]
}
 800d3a0:	bf00      	nop
 800d3a2:	371c      	adds	r7, #28
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr
 800d3ac:	fffeff8f 	.word	0xfffeff8f
 800d3b0:	40010000 	.word	0x40010000
 800d3b4:	40010400 	.word	0x40010400
 800d3b8:	40014000 	.word	0x40014000
 800d3bc:	40014400 	.word	0x40014400
 800d3c0:	40014800 	.word	0x40014800

0800d3c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b087      	sub	sp, #28
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a1b      	ldr	r3, [r3, #32]
 800d3de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	4b22      	ldr	r3, [pc, #136]	@ (800d478 <TIM_OC6_SetConfig+0xb4>)
 800d3f0:	4013      	ands	r3, r2
 800d3f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	021b      	lsls	r3, r3, #8
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	051b      	lsls	r3, r3, #20
 800d40e:	693a      	ldr	r2, [r7, #16]
 800d410:	4313      	orrs	r3, r2
 800d412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a19      	ldr	r2, [pc, #100]	@ (800d47c <TIM_OC6_SetConfig+0xb8>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d00f      	beq.n	800d43c <TIM_OC6_SetConfig+0x78>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a18      	ldr	r2, [pc, #96]	@ (800d480 <TIM_OC6_SetConfig+0xbc>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d00b      	beq.n	800d43c <TIM_OC6_SetConfig+0x78>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4a17      	ldr	r2, [pc, #92]	@ (800d484 <TIM_OC6_SetConfig+0xc0>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d007      	beq.n	800d43c <TIM_OC6_SetConfig+0x78>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a16      	ldr	r2, [pc, #88]	@ (800d488 <TIM_OC6_SetConfig+0xc4>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d003      	beq.n	800d43c <TIM_OC6_SetConfig+0x78>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a15      	ldr	r2, [pc, #84]	@ (800d48c <TIM_OC6_SetConfig+0xc8>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d109      	bne.n	800d450 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d442:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	029b      	lsls	r3, r3, #10
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	685a      	ldr	r2, [r3, #4]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	621a      	str	r2, [r3, #32]
}
 800d46a:	bf00      	nop
 800d46c:	371c      	adds	r7, #28
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	feff8fff 	.word	0xfeff8fff
 800d47c:	40010000 	.word	0x40010000
 800d480:	40010400 	.word	0x40010400
 800d484:	40014000 	.word	0x40014000
 800d488:	40014400 	.word	0x40014400
 800d48c:	40014800 	.word	0x40014800

0800d490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d490:	b480      	push	{r7}
 800d492:	b087      	sub	sp, #28
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6a1b      	ldr	r3, [r3, #32]
 800d4a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6a1b      	ldr	r3, [r3, #32]
 800d4a6:	f023 0201 	bic.w	r2, r3, #1
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d4ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	011b      	lsls	r3, r3, #4
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f023 030a 	bic.w	r3, r3, #10
 800d4cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	697a      	ldr	r2, [r7, #20]
 800d4e0:	621a      	str	r2, [r3, #32]
}
 800d4e2:	bf00      	nop
 800d4e4:	371c      	adds	r7, #28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr

0800d4ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4ee:	b480      	push	{r7}
 800d4f0:	b087      	sub	sp, #28
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	60f8      	str	r0, [r7, #12]
 800d4f6:	60b9      	str	r1, [r7, #8]
 800d4f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6a1b      	ldr	r3, [r3, #32]
 800d4fe:	f023 0210 	bic.w	r2, r3, #16
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	699b      	ldr	r3, [r3, #24]
 800d50a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6a1b      	ldr	r3, [r3, #32]
 800d510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	031b      	lsls	r3, r3, #12
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	4313      	orrs	r3, r2
 800d522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d52a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	011b      	lsls	r3, r3, #4
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	4313      	orrs	r3, r2
 800d534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	621a      	str	r2, [r3, #32]
}
 800d542:	bf00      	nop
 800d544:	371c      	adds	r7, #28
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
	...

0800d550 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d560:	68fa      	ldr	r2, [r7, #12]
 800d562:	4b09      	ldr	r3, [pc, #36]	@ (800d588 <TIM_ITRx_SetConfig+0x38>)
 800d564:	4013      	ands	r3, r2
 800d566:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	f043 0307 	orr.w	r3, r3, #7
 800d572:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	609a      	str	r2, [r3, #8]
}
 800d57a:	bf00      	nop
 800d57c:	3714      	adds	r7, #20
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	ffcfff8f 	.word	0xffcfff8f

0800d58c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b087      	sub	sp, #28
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
 800d598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d5a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	021a      	lsls	r2, r3, #8
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	431a      	orrs	r2, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	697a      	ldr	r2, [r7, #20]
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	697a      	ldr	r2, [r7, #20]
 800d5be:	609a      	str	r2, [r3, #8]
}
 800d5c0:	bf00      	nop
 800d5c2:	371c      	adds	r7, #28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b087      	sub	sp, #28
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	f003 031f 	and.w	r3, r3, #31
 800d5de:	2201      	movs	r2, #1
 800d5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	6a1a      	ldr	r2, [r3, #32]
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	43db      	mvns	r3, r3
 800d5ee:	401a      	ands	r2, r3
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6a1a      	ldr	r2, [r3, #32]
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	f003 031f 	and.w	r3, r3, #31
 800d5fe:	6879      	ldr	r1, [r7, #4]
 800d600:	fa01 f303 	lsl.w	r3, r1, r3
 800d604:	431a      	orrs	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	621a      	str	r2, [r3, #32]
}
 800d60a:	bf00      	nop
 800d60c:	371c      	adds	r7, #28
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
	...

0800d618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d101      	bne.n	800d630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d62c:	2302      	movs	r3, #2
 800d62e:	e06d      	b.n	800d70c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2202      	movs	r2, #2
 800d63c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a30      	ldr	r2, [pc, #192]	@ (800d718 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d004      	beq.n	800d664 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a2f      	ldr	r2, [pc, #188]	@ (800d71c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d108      	bne.n	800d676 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d66a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	4313      	orrs	r3, r2
 800d674:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d67c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	4313      	orrs	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a20      	ldr	r2, [pc, #128]	@ (800d718 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d022      	beq.n	800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6a2:	d01d      	beq.n	800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800d720 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d018      	beq.n	800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a1c      	ldr	r2, [pc, #112]	@ (800d724 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d013      	beq.n	800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a1a      	ldr	r2, [pc, #104]	@ (800d728 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d00e      	beq.n	800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a15      	ldr	r2, [pc, #84]	@ (800d71c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d009      	beq.n	800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a16      	ldr	r2, [pc, #88]	@ (800d72c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d004      	beq.n	800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a15      	ldr	r2, [pc, #84]	@ (800d730 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d10c      	bne.n	800d6fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d6e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3714      	adds	r7, #20
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	40010000 	.word	0x40010000
 800d71c:	40010400 	.word	0x40010400
 800d720:	40000400 	.word	0x40000400
 800d724:	40000800 	.word	0x40000800
 800d728:	40000c00 	.word	0x40000c00
 800d72c:	40001800 	.word	0x40001800
 800d730:	40014000 	.word	0x40014000

0800d734 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d73e:	2300      	movs	r3, #0
 800d740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d101      	bne.n	800d750 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d74c:	2302      	movs	r3, #2
 800d74e:	e065      	b.n	800d81c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	4313      	orrs	r3, r2
 800d764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	4313      	orrs	r3, r2
 800d772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	4313      	orrs	r3, r2
 800d780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	691b      	ldr	r3, [r3, #16]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	695b      	ldr	r3, [r3, #20]
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	041b      	lsls	r3, r3, #16
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a16      	ldr	r2, [pc, #88]	@ (800d828 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d004      	beq.n	800d7de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a14      	ldr	r2, [pc, #80]	@ (800d82c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d115      	bne.n	800d80a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e8:	051b      	lsls	r3, r3, #20
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	69db      	ldr	r3, [r3, #28]
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	6a1b      	ldr	r3, [r3, #32]
 800d806:	4313      	orrs	r3, r2
 800d808:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3714      	adds	r7, #20
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	40010000 	.word	0x40010000
 800d82c:	40010400 	.word	0x40010400

0800d830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d84c:	bf00      	nop
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d86c:	b084      	sub	sp, #16
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	f107 001c 	add.w	r0, r7, #28
 800d87a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d880:	2b01      	cmp	r3, #1
 800d882:	d120      	bne.n	800d8c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d888:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	68da      	ldr	r2, [r3, #12]
 800d894:	4b2a      	ldr	r3, [pc, #168]	@ (800d940 <USB_CoreInit+0xd4>)
 800d896:	4013      	ands	r3, r2
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d8a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d105      	bne.n	800d8ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f001 faf8 	bl	800eeb0 <USB_CoreReset>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	73fb      	strb	r3, [r7, #15]
 800d8c4:	e01a      	b.n	800d8fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f001 faec 	bl	800eeb0 <USB_CoreReset>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d8dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d106      	bne.n	800d8f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	639a      	str	r2, [r3, #56]	@ 0x38
 800d8ee:	e005      	b.n	800d8fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d116      	bne.n	800d930 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d906:	b29a      	uxth	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d910:	4b0c      	ldr	r3, [pc, #48]	@ (800d944 <USB_CoreInit+0xd8>)
 800d912:	4313      	orrs	r3, r2
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	f043 0206 	orr.w	r2, r3, #6
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	f043 0220 	orr.w	r2, r3, #32
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d930:	7bfb      	ldrb	r3, [r7, #15]
}
 800d932:	4618      	mov	r0, r3
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d93c:	b004      	add	sp, #16
 800d93e:	4770      	bx	lr
 800d940:	ffbdffbf 	.word	0xffbdffbf
 800d944:	03ee0000 	.word	0x03ee0000

0800d948 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d948:	b480      	push	{r7}
 800d94a:	b087      	sub	sp, #28
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	4613      	mov	r3, r2
 800d954:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d956:	79fb      	ldrb	r3, [r7, #7]
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d165      	bne.n	800da28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	4a41      	ldr	r2, [pc, #260]	@ (800da64 <USB_SetTurnaroundTime+0x11c>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d906      	bls.n	800d972 <USB_SetTurnaroundTime+0x2a>
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	4a40      	ldr	r2, [pc, #256]	@ (800da68 <USB_SetTurnaroundTime+0x120>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d202      	bcs.n	800d972 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d96c:	230f      	movs	r3, #15
 800d96e:	617b      	str	r3, [r7, #20]
 800d970:	e062      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	4a3c      	ldr	r2, [pc, #240]	@ (800da68 <USB_SetTurnaroundTime+0x120>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d306      	bcc.n	800d988 <USB_SetTurnaroundTime+0x40>
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	4a3b      	ldr	r2, [pc, #236]	@ (800da6c <USB_SetTurnaroundTime+0x124>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d202      	bcs.n	800d988 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d982:	230e      	movs	r3, #14
 800d984:	617b      	str	r3, [r7, #20]
 800d986:	e057      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	4a38      	ldr	r2, [pc, #224]	@ (800da6c <USB_SetTurnaroundTime+0x124>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d306      	bcc.n	800d99e <USB_SetTurnaroundTime+0x56>
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	4a37      	ldr	r2, [pc, #220]	@ (800da70 <USB_SetTurnaroundTime+0x128>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d202      	bcs.n	800d99e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d998:	230d      	movs	r3, #13
 800d99a:	617b      	str	r3, [r7, #20]
 800d99c:	e04c      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	4a33      	ldr	r2, [pc, #204]	@ (800da70 <USB_SetTurnaroundTime+0x128>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d306      	bcc.n	800d9b4 <USB_SetTurnaroundTime+0x6c>
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	4a32      	ldr	r2, [pc, #200]	@ (800da74 <USB_SetTurnaroundTime+0x12c>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d802      	bhi.n	800d9b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d9ae:	230c      	movs	r3, #12
 800d9b0:	617b      	str	r3, [r7, #20]
 800d9b2:	e041      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	4a2f      	ldr	r2, [pc, #188]	@ (800da74 <USB_SetTurnaroundTime+0x12c>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d906      	bls.n	800d9ca <USB_SetTurnaroundTime+0x82>
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	4a2e      	ldr	r2, [pc, #184]	@ (800da78 <USB_SetTurnaroundTime+0x130>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d802      	bhi.n	800d9ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d9c4:	230b      	movs	r3, #11
 800d9c6:	617b      	str	r3, [r7, #20]
 800d9c8:	e036      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	4a2a      	ldr	r2, [pc, #168]	@ (800da78 <USB_SetTurnaroundTime+0x130>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d906      	bls.n	800d9e0 <USB_SetTurnaroundTime+0x98>
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	4a29      	ldr	r2, [pc, #164]	@ (800da7c <USB_SetTurnaroundTime+0x134>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d802      	bhi.n	800d9e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d9da:	230a      	movs	r3, #10
 800d9dc:	617b      	str	r3, [r7, #20]
 800d9de:	e02b      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	4a26      	ldr	r2, [pc, #152]	@ (800da7c <USB_SetTurnaroundTime+0x134>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d906      	bls.n	800d9f6 <USB_SetTurnaroundTime+0xae>
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	4a25      	ldr	r2, [pc, #148]	@ (800da80 <USB_SetTurnaroundTime+0x138>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d202      	bcs.n	800d9f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d9f0:	2309      	movs	r3, #9
 800d9f2:	617b      	str	r3, [r7, #20]
 800d9f4:	e020      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	4a21      	ldr	r2, [pc, #132]	@ (800da80 <USB_SetTurnaroundTime+0x138>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d306      	bcc.n	800da0c <USB_SetTurnaroundTime+0xc4>
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	4a20      	ldr	r2, [pc, #128]	@ (800da84 <USB_SetTurnaroundTime+0x13c>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d802      	bhi.n	800da0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800da06:	2308      	movs	r3, #8
 800da08:	617b      	str	r3, [r7, #20]
 800da0a:	e015      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	4a1d      	ldr	r2, [pc, #116]	@ (800da84 <USB_SetTurnaroundTime+0x13c>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d906      	bls.n	800da22 <USB_SetTurnaroundTime+0xda>
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	4a1c      	ldr	r2, [pc, #112]	@ (800da88 <USB_SetTurnaroundTime+0x140>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d202      	bcs.n	800da22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800da1c:	2307      	movs	r3, #7
 800da1e:	617b      	str	r3, [r7, #20]
 800da20:	e00a      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800da22:	2306      	movs	r3, #6
 800da24:	617b      	str	r3, [r7, #20]
 800da26:	e007      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800da28:	79fb      	ldrb	r3, [r7, #7]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d102      	bne.n	800da34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800da2e:	2309      	movs	r3, #9
 800da30:	617b      	str	r3, [r7, #20]
 800da32:	e001      	b.n	800da38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800da34:	2309      	movs	r3, #9
 800da36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	68da      	ldr	r2, [r3, #12]
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	029b      	lsls	r3, r3, #10
 800da4c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800da50:	431a      	orrs	r2, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	371c      	adds	r7, #28
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr
 800da64:	00d8acbf 	.word	0x00d8acbf
 800da68:	00e4e1c0 	.word	0x00e4e1c0
 800da6c:	00f42400 	.word	0x00f42400
 800da70:	01067380 	.word	0x01067380
 800da74:	011a499f 	.word	0x011a499f
 800da78:	01312cff 	.word	0x01312cff
 800da7c:	014ca43f 	.word	0x014ca43f
 800da80:	016e3600 	.word	0x016e3600
 800da84:	01a6ab1f 	.word	0x01a6ab1f
 800da88:	01e84800 	.word	0x01e84800

0800da8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	f043 0201 	orr.w	r2, r3, #1
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800daae:	b480      	push	{r7}
 800dab0:	b083      	sub	sp, #12
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	f023 0201 	bic.w	r2, r3, #1
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dadc:	2300      	movs	r3, #0
 800dade:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800daec:	78fb      	ldrb	r3, [r7, #3]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d115      	bne.n	800db1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dafe:	2001      	movs	r0, #1
 800db00:	f7f4 f88c 	bl	8001c1c <HAL_Delay>
      ms++;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3301      	adds	r3, #1
 800db08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f001 f93f 	bl	800ed8e <USB_GetMode>
 800db10:	4603      	mov	r3, r0
 800db12:	2b01      	cmp	r3, #1
 800db14:	d01e      	beq.n	800db54 <USB_SetCurrentMode+0x84>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b31      	cmp	r3, #49	@ 0x31
 800db1a:	d9f0      	bls.n	800dafe <USB_SetCurrentMode+0x2e>
 800db1c:	e01a      	b.n	800db54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800db1e:	78fb      	ldrb	r3, [r7, #3]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d115      	bne.n	800db50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800db30:	2001      	movs	r0, #1
 800db32:	f7f4 f873 	bl	8001c1c <HAL_Delay>
      ms++;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	3301      	adds	r3, #1
 800db3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f001 f926 	bl	800ed8e <USB_GetMode>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d005      	beq.n	800db54 <USB_SetCurrentMode+0x84>
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2b31      	cmp	r3, #49	@ 0x31
 800db4c:	d9f0      	bls.n	800db30 <USB_SetCurrentMode+0x60>
 800db4e:	e001      	b.n	800db54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db50:	2301      	movs	r3, #1
 800db52:	e005      	b.n	800db60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b32      	cmp	r3, #50	@ 0x32
 800db58:	d101      	bne.n	800db5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800db5a:	2301      	movs	r3, #1
 800db5c:	e000      	b.n	800db60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db68:	b084      	sub	sp, #16
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b086      	sub	sp, #24
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
 800db72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800db76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db7a:	2300      	movs	r3, #0
 800db7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db82:	2300      	movs	r3, #0
 800db84:	613b      	str	r3, [r7, #16]
 800db86:	e009      	b.n	800db9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	3340      	adds	r3, #64	@ 0x40
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	4413      	add	r3, r2
 800db92:	2200      	movs	r2, #0
 800db94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	3301      	adds	r3, #1
 800db9a:	613b      	str	r3, [r7, #16]
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	2b0e      	cmp	r3, #14
 800dba0:	d9f2      	bls.n	800db88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d11c      	bne.n	800dbe2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbb6:	f043 0302 	orr.w	r3, r3, #2
 800dbba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbc0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	601a      	str	r2, [r3, #0]
 800dbe0:	e005      	b.n	800dbee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc00:	4619      	mov	r1, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc08:	461a      	mov	r2, r3
 800dc0a:	680b      	ldr	r3, [r1, #0]
 800dc0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d10c      	bne.n	800dc2e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d104      	bne.n	800dc24 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f965 	bl	800deec <USB_SetDevSpeed>
 800dc22:	e008      	b.n	800dc36 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dc24:	2101      	movs	r1, #1
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f960 	bl	800deec <USB_SetDevSpeed>
 800dc2c:	e003      	b.n	800dc36 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dc2e:	2103      	movs	r1, #3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f95b 	bl	800deec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dc36:	2110      	movs	r1, #16
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 f8f3 	bl	800de24 <USB_FlushTxFifo>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d001      	beq.n	800dc48 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dc44:	2301      	movs	r3, #1
 800dc46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 f91f 	bl	800de8c <USB_FlushRxFifo>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d001      	beq.n	800dc58 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc5e:	461a      	mov	r2, r3
 800dc60:	2300      	movs	r3, #0
 800dc62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc76:	461a      	mov	r2, r3
 800dc78:	2300      	movs	r3, #0
 800dc7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	613b      	str	r3, [r7, #16]
 800dc80:	e043      	b.n	800dd0a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	015a      	lsls	r2, r3, #5
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	4413      	add	r3, r2
 800dc8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc98:	d118      	bne.n	800dccc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10a      	bne.n	800dcb6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	015a      	lsls	r2, r3, #5
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	4413      	add	r3, r2
 800dca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcac:	461a      	mov	r2, r3
 800dcae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dcb2:	6013      	str	r3, [r2, #0]
 800dcb4:	e013      	b.n	800dcde <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	015a      	lsls	r2, r3, #5
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dcc8:	6013      	str	r3, [r2, #0]
 800dcca:	e008      	b.n	800dcde <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	015a      	lsls	r2, r3, #5
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcd8:	461a      	mov	r2, r3
 800dcda:	2300      	movs	r3, #0
 800dcdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	015a      	lsls	r2, r3, #5
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	4413      	add	r3, r2
 800dce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcea:	461a      	mov	r2, r3
 800dcec:	2300      	movs	r3, #0
 800dcee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	015a      	lsls	r2, r3, #5
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dd02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	3301      	adds	r3, #1
 800dd08:	613b      	str	r3, [r7, #16]
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0c:	693a      	ldr	r2, [r7, #16]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d3b7      	bcc.n	800dc82 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd12:	2300      	movs	r3, #0
 800dd14:	613b      	str	r3, [r7, #16]
 800dd16:	e043      	b.n	800dda0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	015a      	lsls	r2, r3, #5
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	4413      	add	r3, r2
 800dd20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd2e:	d118      	bne.n	800dd62 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d10a      	bne.n	800dd4c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	015a      	lsls	r2, r3, #5
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd42:	461a      	mov	r2, r3
 800dd44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dd48:	6013      	str	r3, [r2, #0]
 800dd4a:	e013      	b.n	800dd74 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	015a      	lsls	r2, r3, #5
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	4413      	add	r3, r2
 800dd54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd58:	461a      	mov	r2, r3
 800dd5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dd5e:	6013      	str	r3, [r2, #0]
 800dd60:	e008      	b.n	800dd74 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	015a      	lsls	r2, r3, #5
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd6e:	461a      	mov	r2, r3
 800dd70:	2300      	movs	r3, #0
 800dd72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	015a      	lsls	r2, r3, #5
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd80:	461a      	mov	r2, r3
 800dd82:	2300      	movs	r3, #0
 800dd84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	015a      	lsls	r2, r3, #5
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd92:	461a      	mov	r2, r3
 800dd94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dd98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	613b      	str	r3, [r7, #16]
 800dda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d3b7      	bcc.n	800dd18 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ddb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ddc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ddca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d105      	bne.n	800dddc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	699b      	ldr	r3, [r3, #24]
 800ddd4:	f043 0210 	orr.w	r2, r3, #16
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	699a      	ldr	r2, [r3, #24]
 800dde0:	4b0e      	ldr	r3, [pc, #56]	@ (800de1c <USB_DevInit+0x2b4>)
 800dde2:	4313      	orrs	r3, r2
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dde8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d005      	beq.n	800ddfa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	699b      	ldr	r3, [r3, #24]
 800ddf2:	f043 0208 	orr.w	r2, r3, #8
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ddfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d105      	bne.n	800de0c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	699a      	ldr	r2, [r3, #24]
 800de04:	4b06      	ldr	r3, [pc, #24]	@ (800de20 <USB_DevInit+0x2b8>)
 800de06:	4313      	orrs	r3, r2
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800de0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de18:	b004      	add	sp, #16
 800de1a:	4770      	bx	lr
 800de1c:	803c3800 	.word	0x803c3800
 800de20:	40000004 	.word	0x40000004

0800de24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	3301      	adds	r3, #1
 800de36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	4a13      	ldr	r2, [pc, #76]	@ (800de88 <USB_FlushTxFifo+0x64>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d901      	bls.n	800de44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de40:	2303      	movs	r3, #3
 800de42:	e01b      	b.n	800de7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	daf2      	bge.n	800de32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de4c:	2300      	movs	r3, #0
 800de4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	019b      	lsls	r3, r3, #6
 800de54:	f043 0220 	orr.w	r2, r3, #32
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	3301      	adds	r3, #1
 800de60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	4a08      	ldr	r2, [pc, #32]	@ (800de88 <USB_FlushTxFifo+0x64>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d901      	bls.n	800de6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800de6a:	2303      	movs	r3, #3
 800de6c:	e006      	b.n	800de7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	f003 0320 	and.w	r3, r3, #32
 800de76:	2b20      	cmp	r3, #32
 800de78:	d0f0      	beq.n	800de5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3714      	adds	r7, #20
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr
 800de88:	00030d40 	.word	0x00030d40

0800de8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de94:	2300      	movs	r3, #0
 800de96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	3301      	adds	r3, #1
 800de9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	4a11      	ldr	r2, [pc, #68]	@ (800dee8 <USB_FlushRxFifo+0x5c>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d901      	bls.n	800deaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dea6:	2303      	movs	r3, #3
 800dea8:	e018      	b.n	800dedc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	daf2      	bge.n	800de98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800deb2:	2300      	movs	r3, #0
 800deb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2210      	movs	r2, #16
 800deba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	3301      	adds	r3, #1
 800dec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	4a08      	ldr	r2, [pc, #32]	@ (800dee8 <USB_FlushRxFifo+0x5c>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d901      	bls.n	800dece <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	e006      	b.n	800dedc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	691b      	ldr	r3, [r3, #16]
 800ded2:	f003 0310 	and.w	r3, r3, #16
 800ded6:	2b10      	cmp	r3, #16
 800ded8:	d0f0      	beq.n	800debc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3714      	adds	r7, #20
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr
 800dee8:	00030d40 	.word	0x00030d40

0800deec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800deec:	b480      	push	{r7}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	460b      	mov	r3, r1
 800def6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	78fb      	ldrb	r3, [r7, #3]
 800df06:	68f9      	ldr	r1, [r7, #12]
 800df08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df0c:	4313      	orrs	r3, r2
 800df0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800df10:	2300      	movs	r3, #0
}
 800df12:	4618      	mov	r0, r3
 800df14:	3714      	adds	r7, #20
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr

0800df1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800df1e:	b480      	push	{r7}
 800df20:	b087      	sub	sp, #28
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	f003 0306 	and.w	r3, r3, #6
 800df36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d102      	bne.n	800df44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800df3e:	2300      	movs	r3, #0
 800df40:	75fb      	strb	r3, [r7, #23]
 800df42:	e00a      	b.n	800df5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2b02      	cmp	r3, #2
 800df48:	d002      	beq.n	800df50 <USB_GetDevSpeed+0x32>
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2b06      	cmp	r3, #6
 800df4e:	d102      	bne.n	800df56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800df50:	2302      	movs	r3, #2
 800df52:	75fb      	strb	r3, [r7, #23]
 800df54:	e001      	b.n	800df5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800df56:	230f      	movs	r3, #15
 800df58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800df5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	371c      	adds	r7, #28
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	785b      	ldrb	r3, [r3, #1]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d139      	bne.n	800dff8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df8a:	69da      	ldr	r2, [r3, #28]
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	f003 030f 	and.w	r3, r3, #15
 800df94:	2101      	movs	r1, #1
 800df96:	fa01 f303 	lsl.w	r3, r1, r3
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	68f9      	ldr	r1, [r7, #12]
 800df9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	015a      	lsls	r2, r3, #5
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	4413      	add	r3, r2
 800dfae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d153      	bne.n	800e064 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	015a      	lsls	r2, r3, #5
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	689b      	ldr	r3, [r3, #8]
 800dfce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	791b      	ldrb	r3, [r3, #4]
 800dfd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dfd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	059b      	lsls	r3, r3, #22
 800dfde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dfe0:	431a      	orrs	r2, r3
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	0159      	lsls	r1, r3, #5
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	440b      	add	r3, r1
 800dfea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfee:	4619      	mov	r1, r3
 800dff0:	4b20      	ldr	r3, [pc, #128]	@ (800e074 <USB_ActivateEndpoint+0x10c>)
 800dff2:	4313      	orrs	r3, r2
 800dff4:	600b      	str	r3, [r1, #0]
 800dff6:	e035      	b.n	800e064 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dffe:	69da      	ldr	r2, [r3, #28]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	f003 030f 	and.w	r3, r3, #15
 800e008:	2101      	movs	r1, #1
 800e00a:	fa01 f303 	lsl.w	r3, r1, r3
 800e00e:	041b      	lsls	r3, r3, #16
 800e010:	68f9      	ldr	r1, [r7, #12]
 800e012:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e016:	4313      	orrs	r3, r2
 800e018:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	015a      	lsls	r2, r3, #5
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	4413      	add	r3, r2
 800e022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d119      	bne.n	800e064 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	015a      	lsls	r2, r3, #5
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	4413      	add	r3, r2
 800e038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	791b      	ldrb	r3, [r3, #4]
 800e04a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e04c:	430b      	orrs	r3, r1
 800e04e:	431a      	orrs	r2, r3
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	0159      	lsls	r1, r3, #5
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	440b      	add	r3, r1
 800e058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e05c:	4619      	mov	r1, r3
 800e05e:	4b05      	ldr	r3, [pc, #20]	@ (800e074 <USB_ActivateEndpoint+0x10c>)
 800e060:	4313      	orrs	r3, r2
 800e062:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3714      	adds	r7, #20
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop
 800e074:	10008000 	.word	0x10008000

0800e078 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e078:	b480      	push	{r7}
 800e07a:	b085      	sub	sp, #20
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	785b      	ldrb	r3, [r3, #1]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d161      	bne.n	800e158 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	015a      	lsls	r2, r3, #5
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	4413      	add	r3, r2
 800e09c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e0a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e0aa:	d11f      	bne.n	800e0ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	015a      	lsls	r2, r3, #5
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	68ba      	ldr	r2, [r7, #8]
 800e0bc:	0151      	lsls	r1, r2, #5
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	440a      	add	r2, r1
 800e0c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e0c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e0ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	015a      	lsls	r2, r3, #5
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68ba      	ldr	r2, [r7, #8]
 800e0dc:	0151      	lsls	r1, r2, #5
 800e0de:	68fa      	ldr	r2, [r7, #12]
 800e0e0:	440a      	add	r2, r1
 800e0e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e0e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e0ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	f003 030f 	and.w	r3, r3, #15
 800e0fc:	2101      	movs	r1, #1
 800e0fe:	fa01 f303 	lsl.w	r3, r1, r3
 800e102:	b29b      	uxth	r3, r3
 800e104:	43db      	mvns	r3, r3
 800e106:	68f9      	ldr	r1, [r7, #12]
 800e108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e10c:	4013      	ands	r3, r2
 800e10e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e116:	69da      	ldr	r2, [r3, #28]
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	f003 030f 	and.w	r3, r3, #15
 800e120:	2101      	movs	r1, #1
 800e122:	fa01 f303 	lsl.w	r3, r1, r3
 800e126:	b29b      	uxth	r3, r3
 800e128:	43db      	mvns	r3, r3
 800e12a:	68f9      	ldr	r1, [r7, #12]
 800e12c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e130:	4013      	ands	r3, r2
 800e132:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	015a      	lsls	r2, r3, #5
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	4413      	add	r3, r2
 800e13c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	0159      	lsls	r1, r3, #5
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	440b      	add	r3, r1
 800e14a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e14e:	4619      	mov	r1, r3
 800e150:	4b35      	ldr	r3, [pc, #212]	@ (800e228 <USB_DeactivateEndpoint+0x1b0>)
 800e152:	4013      	ands	r3, r2
 800e154:	600b      	str	r3, [r1, #0]
 800e156:	e060      	b.n	800e21a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	015a      	lsls	r2, r3, #5
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	4413      	add	r3, r2
 800e160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e16a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e16e:	d11f      	bne.n	800e1b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	015a      	lsls	r2, r3, #5
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	4413      	add	r3, r2
 800e178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	68ba      	ldr	r2, [r7, #8]
 800e180:	0151      	lsls	r1, r2, #5
 800e182:	68fa      	ldr	r2, [r7, #12]
 800e184:	440a      	add	r2, r1
 800e186:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e18a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e18e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	015a      	lsls	r2, r3, #5
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	4413      	add	r3, r2
 800e198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	0151      	lsls	r1, r2, #5
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	440a      	add	r2, r1
 800e1a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e1aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e1ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	f003 030f 	and.w	r3, r3, #15
 800e1c0:	2101      	movs	r1, #1
 800e1c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e1c6:	041b      	lsls	r3, r3, #16
 800e1c8:	43db      	mvns	r3, r3
 800e1ca:	68f9      	ldr	r1, [r7, #12]
 800e1cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1da:	69da      	ldr	r2, [r3, #28]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	f003 030f 	and.w	r3, r3, #15
 800e1e4:	2101      	movs	r1, #1
 800e1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e1ea:	041b      	lsls	r3, r3, #16
 800e1ec:	43db      	mvns	r3, r3
 800e1ee:	68f9      	ldr	r1, [r7, #12]
 800e1f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	015a      	lsls	r2, r3, #5
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	4413      	add	r3, r2
 800e200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	0159      	lsls	r1, r3, #5
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	440b      	add	r3, r1
 800e20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e212:	4619      	mov	r1, r3
 800e214:	4b05      	ldr	r3, [pc, #20]	@ (800e22c <USB_DeactivateEndpoint+0x1b4>)
 800e216:	4013      	ands	r3, r2
 800e218:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr
 800e228:	ec337800 	.word	0xec337800
 800e22c:	eff37800 	.word	0xeff37800

0800e230 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08a      	sub	sp, #40	@ 0x28
 800e234:	af02      	add	r7, sp, #8
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	4613      	mov	r3, r2
 800e23c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	785b      	ldrb	r3, [r3, #1]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	f040 8181 	bne.w	800e554 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	691b      	ldr	r3, [r3, #16]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d132      	bne.n	800e2c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	015a      	lsls	r2, r3, #5
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	4413      	add	r3, r2
 800e262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e266:	691a      	ldr	r2, [r3, #16]
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	0159      	lsls	r1, r3, #5
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	440b      	add	r3, r1
 800e270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e274:	4619      	mov	r1, r3
 800e276:	4ba5      	ldr	r3, [pc, #660]	@ (800e50c <USB_EPStartXfer+0x2dc>)
 800e278:	4013      	ands	r3, r2
 800e27a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	015a      	lsls	r2, r3, #5
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	4413      	add	r3, r2
 800e284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	69ba      	ldr	r2, [r7, #24]
 800e28c:	0151      	lsls	r1, r2, #5
 800e28e:	69fa      	ldr	r2, [r7, #28]
 800e290:	440a      	add	r2, r1
 800e292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e296:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e29a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	015a      	lsls	r2, r3, #5
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2a8:	691a      	ldr	r2, [r3, #16]
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	0159      	lsls	r1, r3, #5
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	440b      	add	r3, r1
 800e2b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4b95      	ldr	r3, [pc, #596]	@ (800e510 <USB_EPStartXfer+0x2e0>)
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	610b      	str	r3, [r1, #16]
 800e2be:	e092      	b.n	800e3e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	015a      	lsls	r2, r3, #5
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2cc:	691a      	ldr	r2, [r3, #16]
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	0159      	lsls	r1, r3, #5
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	440b      	add	r3, r1
 800e2d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2da:	4619      	mov	r1, r3
 800e2dc:	4b8c      	ldr	r3, [pc, #560]	@ (800e510 <USB_EPStartXfer+0x2e0>)
 800e2de:	4013      	ands	r3, r2
 800e2e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	015a      	lsls	r2, r3, #5
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2ee:	691a      	ldr	r2, [r3, #16]
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	0159      	lsls	r1, r3, #5
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	440b      	add	r3, r1
 800e2f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4b83      	ldr	r3, [pc, #524]	@ (800e50c <USB_EPStartXfer+0x2dc>)
 800e300:	4013      	ands	r3, r2
 800e302:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d11a      	bne.n	800e340 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	691a      	ldr	r2, [r3, #16]
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	429a      	cmp	r2, r3
 800e314:	d903      	bls.n	800e31e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	689a      	ldr	r2, [r3, #8]
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	015a      	lsls	r2, r3, #5
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	4413      	add	r3, r2
 800e326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	69ba      	ldr	r2, [r7, #24]
 800e32e:	0151      	lsls	r1, r2, #5
 800e330:	69fa      	ldr	r2, [r7, #28]
 800e332:	440a      	add	r2, r1
 800e334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e338:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e33c:	6113      	str	r3, [r2, #16]
 800e33e:	e01b      	b.n	800e378 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	015a      	lsls	r2, r3, #5
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	4413      	add	r3, r2
 800e348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e34c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	6919      	ldr	r1, [r3, #16]
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	440b      	add	r3, r1
 800e358:	1e59      	subs	r1, r3, #1
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e362:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e364:	4b6b      	ldr	r3, [pc, #428]	@ (800e514 <USB_EPStartXfer+0x2e4>)
 800e366:	400b      	ands	r3, r1
 800e368:	69b9      	ldr	r1, [r7, #24]
 800e36a:	0148      	lsls	r0, r1, #5
 800e36c:	69f9      	ldr	r1, [r7, #28]
 800e36e:	4401      	add	r1, r0
 800e370:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e374:	4313      	orrs	r3, r2
 800e376:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	015a      	lsls	r2, r3, #5
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e384:	691a      	ldr	r2, [r3, #16]
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e38e:	69b9      	ldr	r1, [r7, #24]
 800e390:	0148      	lsls	r0, r1, #5
 800e392:	69f9      	ldr	r1, [r7, #28]
 800e394:	4401      	add	r1, r0
 800e396:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e39a:	4313      	orrs	r3, r2
 800e39c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	791b      	ldrb	r3, [r3, #4]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d11f      	bne.n	800e3e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	015a      	lsls	r2, r3, #5
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	69ba      	ldr	r2, [r7, #24]
 800e3b6:	0151      	lsls	r1, r2, #5
 800e3b8:	69fa      	ldr	r2, [r7, #28]
 800e3ba:	440a      	add	r2, r1
 800e3bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3c0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e3c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	015a      	lsls	r2, r3, #5
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	69ba      	ldr	r2, [r7, #24]
 800e3d6:	0151      	lsls	r1, r2, #5
 800e3d8:	69fa      	ldr	r2, [r7, #28]
 800e3da:	440a      	add	r2, r1
 800e3dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e3e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e3e6:	79fb      	ldrb	r3, [r7, #7]
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d14b      	bne.n	800e484 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	69db      	ldr	r3, [r3, #28]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d009      	beq.n	800e408 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	015a      	lsls	r2, r3, #5
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e400:	461a      	mov	r2, r3
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	69db      	ldr	r3, [r3, #28]
 800e406:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	791b      	ldrb	r3, [r3, #4]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d128      	bne.n	800e462 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d110      	bne.n	800e442 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	015a      	lsls	r2, r3, #5
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	4413      	add	r3, r2
 800e428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	69ba      	ldr	r2, [r7, #24]
 800e430:	0151      	lsls	r1, r2, #5
 800e432:	69fa      	ldr	r2, [r7, #28]
 800e434:	440a      	add	r2, r1
 800e436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e43a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e43e:	6013      	str	r3, [r2, #0]
 800e440:	e00f      	b.n	800e462 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	015a      	lsls	r2, r3, #5
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	4413      	add	r3, r2
 800e44a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	69ba      	ldr	r2, [r7, #24]
 800e452:	0151      	lsls	r1, r2, #5
 800e454:	69fa      	ldr	r2, [r7, #28]
 800e456:	440a      	add	r2, r1
 800e458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e45c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e460:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	015a      	lsls	r2, r3, #5
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	4413      	add	r3, r2
 800e46a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	69ba      	ldr	r2, [r7, #24]
 800e472:	0151      	lsls	r1, r2, #5
 800e474:	69fa      	ldr	r2, [r7, #28]
 800e476:	440a      	add	r2, r1
 800e478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e47c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e480:	6013      	str	r3, [r2, #0]
 800e482:	e16a      	b.n	800e75a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	015a      	lsls	r2, r3, #5
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	69ba      	ldr	r2, [r7, #24]
 800e494:	0151      	lsls	r1, r2, #5
 800e496:	69fa      	ldr	r2, [r7, #28]
 800e498:	440a      	add	r2, r1
 800e49a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e49e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e4a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	791b      	ldrb	r3, [r3, #4]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d015      	beq.n	800e4d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	691b      	ldr	r3, [r3, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f000 8152 	beq.w	800e75a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	f003 030f 	and.w	r3, r3, #15
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e4cc:	69f9      	ldr	r1, [r7, #28]
 800e4ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	634b      	str	r3, [r1, #52]	@ 0x34
 800e4d6:	e140      	b.n	800e75a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d117      	bne.n	800e518 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	015a      	lsls	r2, r3, #5
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	69ba      	ldr	r2, [r7, #24]
 800e4f8:	0151      	lsls	r1, r2, #5
 800e4fa:	69fa      	ldr	r2, [r7, #28]
 800e4fc:	440a      	add	r2, r1
 800e4fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e502:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e506:	6013      	str	r3, [r2, #0]
 800e508:	e016      	b.n	800e538 <USB_EPStartXfer+0x308>
 800e50a:	bf00      	nop
 800e50c:	e007ffff 	.word	0xe007ffff
 800e510:	fff80000 	.word	0xfff80000
 800e514:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	69ba      	ldr	r2, [r7, #24]
 800e528:	0151      	lsls	r1, r2, #5
 800e52a:	69fa      	ldr	r2, [r7, #28]
 800e52c:	440a      	add	r2, r1
 800e52e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e536:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	68d9      	ldr	r1, [r3, #12]
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	781a      	ldrb	r2, [r3, #0]
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	b298      	uxth	r0, r3
 800e546:	79fb      	ldrb	r3, [r7, #7]
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	4603      	mov	r3, r0
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 f9b9 	bl	800e8c4 <USB_WritePacket>
 800e552:	e102      	b.n	800e75a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	015a      	lsls	r2, r3, #5
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	4413      	add	r3, r2
 800e55c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e560:	691a      	ldr	r2, [r3, #16]
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	0159      	lsls	r1, r3, #5
 800e566:	69fb      	ldr	r3, [r7, #28]
 800e568:	440b      	add	r3, r1
 800e56a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e56e:	4619      	mov	r1, r3
 800e570:	4b7c      	ldr	r3, [pc, #496]	@ (800e764 <USB_EPStartXfer+0x534>)
 800e572:	4013      	ands	r3, r2
 800e574:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	015a      	lsls	r2, r3, #5
 800e57a:	69fb      	ldr	r3, [r7, #28]
 800e57c:	4413      	add	r3, r2
 800e57e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e582:	691a      	ldr	r2, [r3, #16]
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	0159      	lsls	r1, r3, #5
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	440b      	add	r3, r1
 800e58c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e590:	4619      	mov	r1, r3
 800e592:	4b75      	ldr	r3, [pc, #468]	@ (800e768 <USB_EPStartXfer+0x538>)
 800e594:	4013      	ands	r3, r2
 800e596:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d12f      	bne.n	800e5fe <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d003      	beq.n	800e5ae <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	689a      	ldr	r2, [r3, #8]
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	689a      	ldr	r2, [r3, #8]
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	015a      	lsls	r2, r3, #5
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	4413      	add	r3, r2
 800e5be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5c2:	691a      	ldr	r2, [r3, #16]
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	6a1b      	ldr	r3, [r3, #32]
 800e5c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5cc:	69b9      	ldr	r1, [r7, #24]
 800e5ce:	0148      	lsls	r0, r1, #5
 800e5d0:	69f9      	ldr	r1, [r7, #28]
 800e5d2:	4401      	add	r1, r0
 800e5d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	015a      	lsls	r2, r3, #5
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5e8:	691b      	ldr	r3, [r3, #16]
 800e5ea:	69ba      	ldr	r2, [r7, #24]
 800e5ec:	0151      	lsls	r1, r2, #5
 800e5ee:	69fa      	ldr	r2, [r7, #28]
 800e5f0:	440a      	add	r2, r1
 800e5f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e5fa:	6113      	str	r3, [r2, #16]
 800e5fc:	e05f      	b.n	800e6be <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	691b      	ldr	r3, [r3, #16]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d123      	bne.n	800e64e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	015a      	lsls	r2, r3, #5
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	4413      	add	r3, r2
 800e60e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e612:	691a      	ldr	r2, [r3, #16]
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e61c:	69b9      	ldr	r1, [r7, #24]
 800e61e:	0148      	lsls	r0, r1, #5
 800e620:	69f9      	ldr	r1, [r7, #28]
 800e622:	4401      	add	r1, r0
 800e624:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e628:	4313      	orrs	r3, r2
 800e62a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	015a      	lsls	r2, r3, #5
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	4413      	add	r3, r2
 800e634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	0151      	lsls	r1, r2, #5
 800e63e:	69fa      	ldr	r2, [r7, #28]
 800e640:	440a      	add	r2, r1
 800e642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e646:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e64a:	6113      	str	r3, [r2, #16]
 800e64c:	e037      	b.n	800e6be <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	691a      	ldr	r2, [r3, #16]
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	4413      	add	r3, r2
 800e658:	1e5a      	subs	r2, r3, #1
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e662:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	8afa      	ldrh	r2, [r7, #22]
 800e66a:	fb03 f202 	mul.w	r2, r3, r2
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	015a      	lsls	r2, r3, #5
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	4413      	add	r3, r2
 800e67a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e67e:	691a      	ldr	r2, [r3, #16]
 800e680:	8afb      	ldrh	r3, [r7, #22]
 800e682:	04d9      	lsls	r1, r3, #19
 800e684:	4b39      	ldr	r3, [pc, #228]	@ (800e76c <USB_EPStartXfer+0x53c>)
 800e686:	400b      	ands	r3, r1
 800e688:	69b9      	ldr	r1, [r7, #24]
 800e68a:	0148      	lsls	r0, r1, #5
 800e68c:	69f9      	ldr	r1, [r7, #28]
 800e68e:	4401      	add	r1, r0
 800e690:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e694:	4313      	orrs	r3, r2
 800e696:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	015a      	lsls	r2, r3, #5
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	4413      	add	r3, r2
 800e6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6a4:	691a      	ldr	r2, [r3, #16]
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	6a1b      	ldr	r3, [r3, #32]
 800e6aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e6ae:	69b9      	ldr	r1, [r7, #24]
 800e6b0:	0148      	lsls	r0, r1, #5
 800e6b2:	69f9      	ldr	r1, [r7, #28]
 800e6b4:	4401      	add	r1, r0
 800e6b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e6be:	79fb      	ldrb	r3, [r7, #7]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d10d      	bne.n	800e6e0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d009      	beq.n	800e6e0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	68d9      	ldr	r1, [r3, #12]
 800e6d0:	69bb      	ldr	r3, [r7, #24]
 800e6d2:	015a      	lsls	r2, r3, #5
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6dc:	460a      	mov	r2, r1
 800e6de:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	791b      	ldrb	r3, [r3, #4]
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d128      	bne.n	800e73a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d110      	bne.n	800e71a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	015a      	lsls	r2, r3, #5
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	4413      	add	r3, r2
 800e700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	69ba      	ldr	r2, [r7, #24]
 800e708:	0151      	lsls	r1, r2, #5
 800e70a:	69fa      	ldr	r2, [r7, #28]
 800e70c:	440a      	add	r2, r1
 800e70e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e712:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e716:	6013      	str	r3, [r2, #0]
 800e718:	e00f      	b.n	800e73a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	015a      	lsls	r2, r3, #5
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	4413      	add	r3, r2
 800e722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	69ba      	ldr	r2, [r7, #24]
 800e72a:	0151      	lsls	r1, r2, #5
 800e72c:	69fa      	ldr	r2, [r7, #28]
 800e72e:	440a      	add	r2, r1
 800e730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e738:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	015a      	lsls	r2, r3, #5
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	4413      	add	r3, r2
 800e742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	69ba      	ldr	r2, [r7, #24]
 800e74a:	0151      	lsls	r1, r2, #5
 800e74c:	69fa      	ldr	r2, [r7, #28]
 800e74e:	440a      	add	r2, r1
 800e750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e754:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e758:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3720      	adds	r7, #32
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	fff80000 	.word	0xfff80000
 800e768:	e007ffff 	.word	0xe007ffff
 800e76c:	1ff80000 	.word	0x1ff80000

0800e770 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e770:	b480      	push	{r7}
 800e772:	b087      	sub	sp, #28
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e77a:	2300      	movs	r3, #0
 800e77c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e77e:	2300      	movs	r3, #0
 800e780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	785b      	ldrb	r3, [r3, #1]
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d14a      	bne.n	800e824 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	015a      	lsls	r2, r3, #5
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	4413      	add	r3, r2
 800e798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e7a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e7a6:	f040 8086 	bne.w	800e8b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	683a      	ldr	r2, [r7, #0]
 800e7bc:	7812      	ldrb	r2, [r2, #0]
 800e7be:	0151      	lsls	r1, r2, #5
 800e7c0:	693a      	ldr	r2, [r7, #16]
 800e7c2:	440a      	add	r2, r1
 800e7c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e7cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	015a      	lsls	r2, r3, #5
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	7812      	ldrb	r2, [r2, #0]
 800e7e2:	0151      	lsls	r1, r2, #5
 800e7e4:	693a      	ldr	r2, [r7, #16]
 800e7e6:	440a      	add	r2, r1
 800e7e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d902      	bls.n	800e808 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e802:	2301      	movs	r3, #1
 800e804:	75fb      	strb	r3, [r7, #23]
          break;
 800e806:	e056      	b.n	800e8b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	015a      	lsls	r2, r3, #5
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	4413      	add	r3, r2
 800e812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e81c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e820:	d0e7      	beq.n	800e7f2 <USB_EPStopXfer+0x82>
 800e822:	e048      	b.n	800e8b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	015a      	lsls	r2, r3, #5
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	4413      	add	r3, r2
 800e82e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e838:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e83c:	d13b      	bne.n	800e8b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	015a      	lsls	r2, r3, #5
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	4413      	add	r3, r2
 800e848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	683a      	ldr	r2, [r7, #0]
 800e850:	7812      	ldrb	r2, [r2, #0]
 800e852:	0151      	lsls	r1, r2, #5
 800e854:	693a      	ldr	r2, [r7, #16]
 800e856:	440a      	add	r2, r1
 800e858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e85c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e860:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	015a      	lsls	r2, r3, #5
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	4413      	add	r3, r2
 800e86c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	7812      	ldrb	r2, [r2, #0]
 800e876:	0151      	lsls	r1, r2, #5
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	440a      	add	r2, r1
 800e87c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e880:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e884:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	3301      	adds	r3, #1
 800e88a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e892:	4293      	cmp	r3, r2
 800e894:	d902      	bls.n	800e89c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	75fb      	strb	r3, [r7, #23]
          break;
 800e89a:	e00c      	b.n	800e8b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	015a      	lsls	r2, r3, #5
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8b4:	d0e7      	beq.n	800e886 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	371c      	adds	r7, #28
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b089      	sub	sp, #36	@ 0x24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	4611      	mov	r1, r2
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	71fb      	strb	r3, [r7, #7]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e8e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d123      	bne.n	800e932 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e8ea:	88bb      	ldrh	r3, [r7, #4]
 800e8ec:	3303      	adds	r3, #3
 800e8ee:	089b      	lsrs	r3, r3, #2
 800e8f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	61bb      	str	r3, [r7, #24]
 800e8f6:	e018      	b.n	800e92a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	031a      	lsls	r2, r3, #12
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	4413      	add	r3, r2
 800e900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e904:	461a      	mov	r2, r3
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	3301      	adds	r3, #1
 800e910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	3301      	adds	r3, #1
 800e916:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	3301      	adds	r3, #1
 800e91c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	3301      	adds	r3, #1
 800e922:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	3301      	adds	r3, #1
 800e928:	61bb      	str	r3, [r7, #24]
 800e92a:	69ba      	ldr	r2, [r7, #24]
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d3e2      	bcc.n	800e8f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3724      	adds	r7, #36	@ 0x24
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e940:	b480      	push	{r7}
 800e942:	b08b      	sub	sp, #44	@ 0x2c
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	4613      	mov	r3, r2
 800e94c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e956:	88fb      	ldrh	r3, [r7, #6]
 800e958:	089b      	lsrs	r3, r3, #2
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e95e:	88fb      	ldrh	r3, [r7, #6]
 800e960:	f003 0303 	and.w	r3, r3, #3
 800e964:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e966:	2300      	movs	r3, #0
 800e968:	623b      	str	r3, [r7, #32]
 800e96a:	e014      	b.n	800e996 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e976:	601a      	str	r2, [r3, #0]
    pDest++;
 800e978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e97a:	3301      	adds	r3, #1
 800e97c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e980:	3301      	adds	r3, #1
 800e982:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e986:	3301      	adds	r3, #1
 800e988:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e98c:	3301      	adds	r3, #1
 800e98e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e990:	6a3b      	ldr	r3, [r7, #32]
 800e992:	3301      	adds	r3, #1
 800e994:	623b      	str	r3, [r7, #32]
 800e996:	6a3a      	ldr	r2, [r7, #32]
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d3e6      	bcc.n	800e96c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e99e:	8bfb      	ldrh	r3, [r7, #30]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d01e      	beq.n	800e9e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	f107 0310 	add.w	r3, r7, #16
 800e9b4:	6812      	ldr	r2, [r2, #0]
 800e9b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e9b8:	693a      	ldr	r2, [r7, #16]
 800e9ba:	6a3b      	ldr	r3, [r7, #32]
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	00db      	lsls	r3, r3, #3
 800e9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e9c4:	b2da      	uxtb	r2, r3
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c8:	701a      	strb	r2, [r3, #0]
      i++;
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e9d6:	8bfb      	ldrh	r3, [r7, #30]
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e9dc:	8bfb      	ldrh	r3, [r7, #30]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1ea      	bne.n	800e9b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	372c      	adds	r7, #44	@ 0x2c
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr

0800e9f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b085      	sub	sp, #20
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	785b      	ldrb	r3, [r3, #1]
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	d12c      	bne.n	800ea66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	015a      	lsls	r2, r3, #5
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	4413      	add	r3, r2
 800ea14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	db12      	blt.n	800ea44 <USB_EPSetStall+0x54>
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00f      	beq.n	800ea44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	015a      	lsls	r2, r3, #5
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	0151      	lsls	r1, r2, #5
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	440a      	add	r2, r1
 800ea3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ea42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	015a      	lsls	r2, r3, #5
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	68ba      	ldr	r2, [r7, #8]
 800ea54:	0151      	lsls	r1, r2, #5
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	440a      	add	r2, r1
 800ea5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ea62:	6013      	str	r3, [r2, #0]
 800ea64:	e02b      	b.n	800eabe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	015a      	lsls	r2, r3, #5
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	db12      	blt.n	800ea9e <USB_EPSetStall+0xae>
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00f      	beq.n	800ea9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	015a      	lsls	r2, r3, #5
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	4413      	add	r3, r2
 800ea86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	0151      	lsls	r1, r2, #5
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	440a      	add	r2, r1
 800ea94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ea9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	015a      	lsls	r2, r3, #5
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68ba      	ldr	r2, [r7, #8]
 800eaae:	0151      	lsls	r1, r2, #5
 800eab0:	68fa      	ldr	r2, [r7, #12]
 800eab2:	440a      	add	r2, r1
 800eab4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eabc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3714      	adds	r7, #20
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eacc:	b480      	push	{r7}
 800eace:	b085      	sub	sp, #20
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	785b      	ldrb	r3, [r3, #1]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d128      	bne.n	800eb3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	015a      	lsls	r2, r3, #5
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	4413      	add	r3, r2
 800eaf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	68ba      	ldr	r2, [r7, #8]
 800eaf8:	0151      	lsls	r1, r2, #5
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	440a      	add	r2, r1
 800eafe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eb06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	791b      	ldrb	r3, [r3, #4]
 800eb0c:	2b03      	cmp	r3, #3
 800eb0e:	d003      	beq.n	800eb18 <USB_EPClearStall+0x4c>
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	791b      	ldrb	r3, [r3, #4]
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d138      	bne.n	800eb8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	015a      	lsls	r2, r3, #5
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	4413      	add	r3, r2
 800eb20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	0151      	lsls	r1, r2, #5
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	440a      	add	r2, r1
 800eb2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb36:	6013      	str	r3, [r2, #0]
 800eb38:	e027      	b.n	800eb8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	015a      	lsls	r2, r3, #5
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	4413      	add	r3, r2
 800eb42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	0151      	lsls	r1, r2, #5
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	440a      	add	r2, r1
 800eb50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eb58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	791b      	ldrb	r3, [r3, #4]
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d003      	beq.n	800eb6a <USB_EPClearStall+0x9e>
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	791b      	ldrb	r3, [r3, #4]
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	d10f      	bne.n	800eb8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	015a      	lsls	r2, r3, #5
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	4413      	add	r3, r2
 800eb72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	0151      	lsls	r1, r2, #5
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	440a      	add	r2, r1
 800eb80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ebb6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ebba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	78fb      	ldrb	r3, [r7, #3]
 800ebc6:	011b      	lsls	r3, r3, #4
 800ebc8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ebcc:	68f9      	ldr	r1, [r7, #12]
 800ebce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3714      	adds	r7, #20
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	68fa      	ldr	r2, [r7, #12]
 800ebfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ebfe:	f023 0303 	bic.w	r3, r3, #3
 800ec02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec12:	f023 0302 	bic.w	r3, r3, #2
 800ec16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ec26:	b480      	push	{r7}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ec40:	f023 0303 	bic.w	r3, r3, #3
 800ec44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec54:	f043 0302 	orr.w	r3, r3, #2
 800ec58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3714      	adds	r7, #20
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	695b      	ldr	r3, [r3, #20]
 800ec74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	699b      	ldr	r3, [r3, #24]
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ec80:	68fb      	ldr	r3, [r7, #12]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3714      	adds	r7, #20
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr

0800ec8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec8e:	b480      	push	{r7}
 800ec90:	b085      	sub	sp, #20
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eca0:	699b      	ldr	r3, [r3, #24]
 800eca2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecaa:	69db      	ldr	r3, [r3, #28]
 800ecac:	68ba      	ldr	r2, [r7, #8]
 800ecae:	4013      	ands	r3, r2
 800ecb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	0c1b      	lsrs	r3, r3, #16
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3714      	adds	r7, #20
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr

0800ecc2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ecc2:	b480      	push	{r7}
 800ecc4:	b085      	sub	sp, #20
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecd4:	699b      	ldr	r3, [r3, #24]
 800ecd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecde:	69db      	ldr	r3, [r3, #28]
 800ece0:	68ba      	ldr	r2, [r7, #8]
 800ece2:	4013      	ands	r3, r2
 800ece4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	b29b      	uxth	r3, r3
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3714      	adds	r7, #20
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf4:	4770      	bx	lr

0800ecf6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ecf6:	b480      	push	{r7}
 800ecf8:	b085      	sub	sp, #20
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	460b      	mov	r3, r1
 800ed00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ed06:	78fb      	ldrb	r3, [r7, #3]
 800ed08:	015a      	lsls	r2, r3, #5
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed1c:	695b      	ldr	r3, [r3, #20]
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	4013      	ands	r3, r2
 800ed22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ed24:	68bb      	ldr	r3, [r7, #8]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3714      	adds	r7, #20
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr

0800ed32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ed32:	b480      	push	{r7}
 800ed34:	b087      	sub	sp, #28
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ed56:	78fb      	ldrb	r3, [r7, #3]
 800ed58:	f003 030f 	and.w	r3, r3, #15
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ed62:	01db      	lsls	r3, r3, #7
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	693a      	ldr	r2, [r7, #16]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ed6c:	78fb      	ldrb	r3, [r7, #3]
 800ed6e:	015a      	lsls	r2, r3, #5
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	4413      	add	r3, r2
 800ed74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	693a      	ldr	r2, [r7, #16]
 800ed7c:	4013      	ands	r3, r2
 800ed7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ed80:	68bb      	ldr	r3, [r7, #8]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	371c      	adds	r7, #28
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr

0800ed8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ed8e:	b480      	push	{r7}
 800ed90:	b083      	sub	sp, #12
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	695b      	ldr	r3, [r3, #20]
 800ed9a:	f003 0301 	and.w	r3, r3, #1
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	370c      	adds	r7, #12
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr
	...

0800edac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edc6:	4619      	mov	r1, r3
 800edc8:	4b09      	ldr	r3, [pc, #36]	@ (800edf0 <USB_ActivateSetup+0x44>)
 800edca:	4013      	ands	r3, r2
 800edcc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ede0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3714      	adds	r7, #20
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr
 800edf0:	fffff800 	.word	0xfffff800

0800edf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b087      	sub	sp, #28
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	460b      	mov	r3, r1
 800edfe:	607a      	str	r2, [r7, #4]
 800ee00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	333c      	adds	r3, #60	@ 0x3c
 800ee0a:	3304      	adds	r3, #4
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	4a26      	ldr	r2, [pc, #152]	@ (800eeac <USB_EP0_OutStart+0xb8>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d90a      	bls.n	800ee2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee28:	d101      	bne.n	800ee2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	e037      	b.n	800ee9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee34:	461a      	mov	r2, r3
 800ee36:	2300      	movs	r3, #0
 800ee38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee40:	691b      	ldr	r3, [r3, #16]
 800ee42:	697a      	ldr	r2, [r7, #20]
 800ee44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ee4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee5c:	f043 0318 	orr.w	r3, r3, #24
 800ee60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee68:	691b      	ldr	r3, [r3, #16]
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee70:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ee74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ee76:	7afb      	ldrb	r3, [r7, #11]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d10f      	bne.n	800ee9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee82:	461a      	mov	r2, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	697a      	ldr	r2, [r7, #20]
 800ee92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee96:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ee9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	371c      	adds	r7, #28
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	4f54300a 	.word	0x4f54300a

0800eeb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b085      	sub	sp, #20
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	3301      	adds	r3, #1
 800eec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	4a13      	ldr	r2, [pc, #76]	@ (800ef14 <USB_CoreReset+0x64>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d901      	bls.n	800eece <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800eeca:	2303      	movs	r3, #3
 800eecc:	e01b      	b.n	800ef06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	daf2      	bge.n	800eebc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800eed6:	2300      	movs	r3, #0
 800eed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	691b      	ldr	r3, [r3, #16]
 800eede:	f043 0201 	orr.w	r2, r3, #1
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	3301      	adds	r3, #1
 800eeea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	4a09      	ldr	r2, [pc, #36]	@ (800ef14 <USB_CoreReset+0x64>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d901      	bls.n	800eef8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eef4:	2303      	movs	r3, #3
 800eef6:	e006      	b.n	800ef06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	691b      	ldr	r3, [r3, #16]
 800eefc:	f003 0301 	and.w	r3, r3, #1
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d0f0      	beq.n	800eee6 <USB_CoreReset+0x36>

  return HAL_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3714      	adds	r7, #20
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	00030d40 	.word	0x00030d40

0800ef18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	460b      	mov	r3, r1
 800ef22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ef24:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ef28:	f003 f8a4 	bl	8012074 <USBD_static_malloc>
 800ef2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d109      	bne.n	800ef48 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	32b0      	adds	r2, #176	@ 0xb0
 800ef3e:	2100      	movs	r1, #0
 800ef40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ef44:	2302      	movs	r3, #2
 800ef46:	e0d4      	b.n	800f0f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ef48:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	68f8      	ldr	r0, [r7, #12]
 800ef50:	f003 ff77 	bl	8012e42 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	32b0      	adds	r2, #176	@ 0xb0
 800ef5e:	68f9      	ldr	r1, [r7, #12]
 800ef60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	32b0      	adds	r2, #176	@ 0xb0
 800ef6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	7c1b      	ldrb	r3, [r3, #16]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d138      	bne.n	800eff2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ef80:	4b5e      	ldr	r3, [pc, #376]	@ (800f0fc <USBD_CDC_Init+0x1e4>)
 800ef82:	7819      	ldrb	r1, [r3, #0]
 800ef84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef88:	2202      	movs	r2, #2
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f002 ff4f 	bl	8011e2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ef90:	4b5a      	ldr	r3, [pc, #360]	@ (800f0fc <USBD_CDC_Init+0x1e4>)
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	f003 020f 	and.w	r2, r3, #15
 800ef98:	6879      	ldr	r1, [r7, #4]
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	440b      	add	r3, r1
 800efa4:	3324      	adds	r3, #36	@ 0x24
 800efa6:	2201      	movs	r2, #1
 800efa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800efaa:	4b55      	ldr	r3, [pc, #340]	@ (800f100 <USBD_CDC_Init+0x1e8>)
 800efac:	7819      	ldrb	r1, [r3, #0]
 800efae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800efb2:	2202      	movs	r2, #2
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f002 ff3a 	bl	8011e2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800efba:	4b51      	ldr	r3, [pc, #324]	@ (800f100 <USBD_CDC_Init+0x1e8>)
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	f003 020f 	and.w	r2, r3, #15
 800efc2:	6879      	ldr	r1, [r7, #4]
 800efc4:	4613      	mov	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	4413      	add	r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	440b      	add	r3, r1
 800efce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800efd2:	2201      	movs	r2, #1
 800efd4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800efd6:	4b4b      	ldr	r3, [pc, #300]	@ (800f104 <USBD_CDC_Init+0x1ec>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	f003 020f 	and.w	r2, r3, #15
 800efde:	6879      	ldr	r1, [r7, #4]
 800efe0:	4613      	mov	r3, r2
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	4413      	add	r3, r2
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	440b      	add	r3, r1
 800efea:	3326      	adds	r3, #38	@ 0x26
 800efec:	2210      	movs	r2, #16
 800efee:	801a      	strh	r2, [r3, #0]
 800eff0:	e035      	b.n	800f05e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800eff2:	4b42      	ldr	r3, [pc, #264]	@ (800f0fc <USBD_CDC_Init+0x1e4>)
 800eff4:	7819      	ldrb	r1, [r3, #0]
 800eff6:	2340      	movs	r3, #64	@ 0x40
 800eff8:	2202      	movs	r2, #2
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f002 ff17 	bl	8011e2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f000:	4b3e      	ldr	r3, [pc, #248]	@ (800f0fc <USBD_CDC_Init+0x1e4>)
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	f003 020f 	and.w	r2, r3, #15
 800f008:	6879      	ldr	r1, [r7, #4]
 800f00a:	4613      	mov	r3, r2
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	4413      	add	r3, r2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	440b      	add	r3, r1
 800f014:	3324      	adds	r3, #36	@ 0x24
 800f016:	2201      	movs	r2, #1
 800f018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f01a:	4b39      	ldr	r3, [pc, #228]	@ (800f100 <USBD_CDC_Init+0x1e8>)
 800f01c:	7819      	ldrb	r1, [r3, #0]
 800f01e:	2340      	movs	r3, #64	@ 0x40
 800f020:	2202      	movs	r2, #2
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f002 ff03 	bl	8011e2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f028:	4b35      	ldr	r3, [pc, #212]	@ (800f100 <USBD_CDC_Init+0x1e8>)
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	f003 020f 	and.w	r2, r3, #15
 800f030:	6879      	ldr	r1, [r7, #4]
 800f032:	4613      	mov	r3, r2
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	4413      	add	r3, r2
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	440b      	add	r3, r1
 800f03c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f040:	2201      	movs	r2, #1
 800f042:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f044:	4b2f      	ldr	r3, [pc, #188]	@ (800f104 <USBD_CDC_Init+0x1ec>)
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	f003 020f 	and.w	r2, r3, #15
 800f04c:	6879      	ldr	r1, [r7, #4]
 800f04e:	4613      	mov	r3, r2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	009b      	lsls	r3, r3, #2
 800f056:	440b      	add	r3, r1
 800f058:	3326      	adds	r3, #38	@ 0x26
 800f05a:	2210      	movs	r2, #16
 800f05c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f05e:	4b29      	ldr	r3, [pc, #164]	@ (800f104 <USBD_CDC_Init+0x1ec>)
 800f060:	7819      	ldrb	r1, [r3, #0]
 800f062:	2308      	movs	r3, #8
 800f064:	2203      	movs	r2, #3
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f002 fee1 	bl	8011e2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f06c:	4b25      	ldr	r3, [pc, #148]	@ (800f104 <USBD_CDC_Init+0x1ec>)
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	f003 020f 	and.w	r2, r3, #15
 800f074:	6879      	ldr	r1, [r7, #4]
 800f076:	4613      	mov	r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	4413      	add	r3, r2
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	440b      	add	r3, r1
 800f080:	3324      	adds	r3, #36	@ 0x24
 800f082:	2201      	movs	r2, #1
 800f084:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2200      	movs	r2, #0
 800f08a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	33b0      	adds	r3, #176	@ 0xb0
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	4413      	add	r3, r2
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d101      	bne.n	800f0c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f0bc:	2302      	movs	r3, #2
 800f0be:	e018      	b.n	800f0f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	7c1b      	ldrb	r3, [r3, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d10a      	bne.n	800f0de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f0c8:	4b0d      	ldr	r3, [pc, #52]	@ (800f100 <USBD_CDC_Init+0x1e8>)
 800f0ca:	7819      	ldrb	r1, [r3, #0]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f0d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f002 ff98 	bl	801200c <USBD_LL_PrepareReceive>
 800f0dc:	e008      	b.n	800f0f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f0de:	4b08      	ldr	r3, [pc, #32]	@ (800f100 <USBD_CDC_Init+0x1e8>)
 800f0e0:	7819      	ldrb	r1, [r3, #0]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f0e8:	2340      	movs	r3, #64	@ 0x40
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f002 ff8e 	bl	801200c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	2400009b 	.word	0x2400009b
 800f100:	2400009c 	.word	0x2400009c
 800f104:	2400009d 	.word	0x2400009d

0800f108 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	460b      	mov	r3, r1
 800f112:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f114:	4b3a      	ldr	r3, [pc, #232]	@ (800f200 <USBD_CDC_DeInit+0xf8>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	4619      	mov	r1, r3
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f002 fead 	bl	8011e7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f120:	4b37      	ldr	r3, [pc, #220]	@ (800f200 <USBD_CDC_DeInit+0xf8>)
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	f003 020f 	and.w	r2, r3, #15
 800f128:	6879      	ldr	r1, [r7, #4]
 800f12a:	4613      	mov	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4413      	add	r3, r2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	440b      	add	r3, r1
 800f134:	3324      	adds	r3, #36	@ 0x24
 800f136:	2200      	movs	r2, #0
 800f138:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f13a:	4b32      	ldr	r3, [pc, #200]	@ (800f204 <USBD_CDC_DeInit+0xfc>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	4619      	mov	r1, r3
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f002 fe9a 	bl	8011e7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f146:	4b2f      	ldr	r3, [pc, #188]	@ (800f204 <USBD_CDC_DeInit+0xfc>)
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	f003 020f 	and.w	r2, r3, #15
 800f14e:	6879      	ldr	r1, [r7, #4]
 800f150:	4613      	mov	r3, r2
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	4413      	add	r3, r2
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	440b      	add	r3, r1
 800f15a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f15e:	2200      	movs	r2, #0
 800f160:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f162:	4b29      	ldr	r3, [pc, #164]	@ (800f208 <USBD_CDC_DeInit+0x100>)
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f002 fe86 	bl	8011e7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f16e:	4b26      	ldr	r3, [pc, #152]	@ (800f208 <USBD_CDC_DeInit+0x100>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	f003 020f 	and.w	r2, r3, #15
 800f176:	6879      	ldr	r1, [r7, #4]
 800f178:	4613      	mov	r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	4413      	add	r3, r2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	440b      	add	r3, r1
 800f182:	3324      	adds	r3, #36	@ 0x24
 800f184:	2200      	movs	r2, #0
 800f186:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f188:	4b1f      	ldr	r3, [pc, #124]	@ (800f208 <USBD_CDC_DeInit+0x100>)
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	f003 020f 	and.w	r2, r3, #15
 800f190:	6879      	ldr	r1, [r7, #4]
 800f192:	4613      	mov	r3, r2
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	4413      	add	r3, r2
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	440b      	add	r3, r1
 800f19c:	3326      	adds	r3, #38	@ 0x26
 800f19e:	2200      	movs	r2, #0
 800f1a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	32b0      	adds	r2, #176	@ 0xb0
 800f1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d01f      	beq.n	800f1f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	33b0      	adds	r3, #176	@ 0xb0
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	4413      	add	r3, r2
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	32b0      	adds	r2, #176	@ 0xb0
 800f1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f002 ff5a 	bl	8012090 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	32b0      	adds	r2, #176	@ 0xb0
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f1f4:	2300      	movs	r3, #0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	2400009b 	.word	0x2400009b
 800f204:	2400009c 	.word	0x2400009c
 800f208:	2400009d 	.word	0x2400009d

0800f20c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b086      	sub	sp, #24
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	32b0      	adds	r2, #176	@ 0xb0
 800f220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f224:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f226:	2300      	movs	r3, #0
 800f228:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f22a:	2300      	movs	r3, #0
 800f22c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f22e:	2300      	movs	r3, #0
 800f230:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d101      	bne.n	800f23c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f238:	2303      	movs	r3, #3
 800f23a:	e0bf      	b.n	800f3bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f244:	2b00      	cmp	r3, #0
 800f246:	d050      	beq.n	800f2ea <USBD_CDC_Setup+0xde>
 800f248:	2b20      	cmp	r3, #32
 800f24a:	f040 80af 	bne.w	800f3ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	88db      	ldrh	r3, [r3, #6]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d03a      	beq.n	800f2cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	b25b      	sxtb	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	da1b      	bge.n	800f298 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	33b0      	adds	r3, #176	@ 0xb0
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	4413      	add	r3, r2
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	683a      	ldr	r2, [r7, #0]
 800f274:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f276:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	88d2      	ldrh	r2, [r2, #6]
 800f27c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	88db      	ldrh	r3, [r3, #6]
 800f282:	2b07      	cmp	r3, #7
 800f284:	bf28      	it	cs
 800f286:	2307      	movcs	r3, #7
 800f288:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	89fa      	ldrh	r2, [r7, #14]
 800f28e:	4619      	mov	r1, r3
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f001 fdb1 	bl	8010df8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f296:	e090      	b.n	800f3ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	785a      	ldrb	r2, [r3, #1]
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	88db      	ldrh	r3, [r3, #6]
 800f2a6:	2b3f      	cmp	r3, #63	@ 0x3f
 800f2a8:	d803      	bhi.n	800f2b2 <USBD_CDC_Setup+0xa6>
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	88db      	ldrh	r3, [r3, #6]
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	e000      	b.n	800f2b4 <USBD_CDC_Setup+0xa8>
 800f2b2:	2240      	movs	r2, #64	@ 0x40
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f2ba:	6939      	ldr	r1, [r7, #16]
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f001 fdc3 	bl	8010e50 <USBD_CtlPrepareRx>
      break;
 800f2ca:	e076      	b.n	800f3ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	33b0      	adds	r3, #176	@ 0xb0
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	4413      	add	r3, r2
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	689b      	ldr	r3, [r3, #8]
 800f2de:	683a      	ldr	r2, [r7, #0]
 800f2e0:	7850      	ldrb	r0, [r2, #1]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	6839      	ldr	r1, [r7, #0]
 800f2e6:	4798      	blx	r3
      break;
 800f2e8:	e067      	b.n	800f3ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	785b      	ldrb	r3, [r3, #1]
 800f2ee:	2b0b      	cmp	r3, #11
 800f2f0:	d851      	bhi.n	800f396 <USBD_CDC_Setup+0x18a>
 800f2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2f8 <USBD_CDC_Setup+0xec>)
 800f2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f8:	0800f329 	.word	0x0800f329
 800f2fc:	0800f3a5 	.word	0x0800f3a5
 800f300:	0800f397 	.word	0x0800f397
 800f304:	0800f397 	.word	0x0800f397
 800f308:	0800f397 	.word	0x0800f397
 800f30c:	0800f397 	.word	0x0800f397
 800f310:	0800f397 	.word	0x0800f397
 800f314:	0800f397 	.word	0x0800f397
 800f318:	0800f397 	.word	0x0800f397
 800f31c:	0800f397 	.word	0x0800f397
 800f320:	0800f353 	.word	0x0800f353
 800f324:	0800f37d 	.word	0x0800f37d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b03      	cmp	r3, #3
 800f332:	d107      	bne.n	800f344 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f334:	f107 030a 	add.w	r3, r7, #10
 800f338:	2202      	movs	r2, #2
 800f33a:	4619      	mov	r1, r3
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f001 fd5b 	bl	8010df8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f342:	e032      	b.n	800f3aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f344:	6839      	ldr	r1, [r7, #0]
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f001 fce5 	bl	8010d16 <USBD_CtlError>
            ret = USBD_FAIL;
 800f34c:	2303      	movs	r3, #3
 800f34e:	75fb      	strb	r3, [r7, #23]
          break;
 800f350:	e02b      	b.n	800f3aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b03      	cmp	r3, #3
 800f35c:	d107      	bne.n	800f36e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f35e:	f107 030d 	add.w	r3, r7, #13
 800f362:	2201      	movs	r2, #1
 800f364:	4619      	mov	r1, r3
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f001 fd46 	bl	8010df8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f36c:	e01d      	b.n	800f3aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f36e:	6839      	ldr	r1, [r7, #0]
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f001 fcd0 	bl	8010d16 <USBD_CtlError>
            ret = USBD_FAIL;
 800f376:	2303      	movs	r3, #3
 800f378:	75fb      	strb	r3, [r7, #23]
          break;
 800f37a:	e016      	b.n	800f3aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f382:	b2db      	uxtb	r3, r3
 800f384:	2b03      	cmp	r3, #3
 800f386:	d00f      	beq.n	800f3a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f388:	6839      	ldr	r1, [r7, #0]
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f001 fcc3 	bl	8010d16 <USBD_CtlError>
            ret = USBD_FAIL;
 800f390:	2303      	movs	r3, #3
 800f392:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f394:	e008      	b.n	800f3a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f001 fcbc 	bl	8010d16 <USBD_CtlError>
          ret = USBD_FAIL;
 800f39e:	2303      	movs	r3, #3
 800f3a0:	75fb      	strb	r3, [r7, #23]
          break;
 800f3a2:	e002      	b.n	800f3aa <USBD_CDC_Setup+0x19e>
          break;
 800f3a4:	bf00      	nop
 800f3a6:	e008      	b.n	800f3ba <USBD_CDC_Setup+0x1ae>
          break;
 800f3a8:	bf00      	nop
      }
      break;
 800f3aa:	e006      	b.n	800f3ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f3ac:	6839      	ldr	r1, [r7, #0]
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f001 fcb1 	bl	8010d16 <USBD_CtlError>
      ret = USBD_FAIL;
 800f3b4:	2303      	movs	r3, #3
 800f3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800f3b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800f3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3718      	adds	r7, #24
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f3d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	32b0      	adds	r2, #176	@ 0xb0
 800f3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d101      	bne.n	800f3ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f3ea:	2303      	movs	r3, #3
 800f3ec:	e065      	b.n	800f4ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	32b0      	adds	r2, #176	@ 0xb0
 800f3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f3fe:	78fb      	ldrb	r3, [r7, #3]
 800f400:	f003 020f 	and.w	r2, r3, #15
 800f404:	6879      	ldr	r1, [r7, #4]
 800f406:	4613      	mov	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4413      	add	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	440b      	add	r3, r1
 800f410:	3318      	adds	r3, #24
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d02f      	beq.n	800f478 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f418:	78fb      	ldrb	r3, [r7, #3]
 800f41a:	f003 020f 	and.w	r2, r3, #15
 800f41e:	6879      	ldr	r1, [r7, #4]
 800f420:	4613      	mov	r3, r2
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	4413      	add	r3, r2
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	440b      	add	r3, r1
 800f42a:	3318      	adds	r3, #24
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	78fb      	ldrb	r3, [r7, #3]
 800f430:	f003 010f 	and.w	r1, r3, #15
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	460b      	mov	r3, r1
 800f438:	00db      	lsls	r3, r3, #3
 800f43a:	440b      	add	r3, r1
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	4403      	add	r3, r0
 800f440:	3344      	adds	r3, #68	@ 0x44
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	fbb2 f1f3 	udiv	r1, r2, r3
 800f448:	fb01 f303 	mul.w	r3, r1, r3
 800f44c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d112      	bne.n	800f478 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f452:	78fb      	ldrb	r3, [r7, #3]
 800f454:	f003 020f 	and.w	r2, r3, #15
 800f458:	6879      	ldr	r1, [r7, #4]
 800f45a:	4613      	mov	r3, r2
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	4413      	add	r3, r2
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	440b      	add	r3, r1
 800f464:	3318      	adds	r3, #24
 800f466:	2200      	movs	r2, #0
 800f468:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f46a:	78f9      	ldrb	r1, [r7, #3]
 800f46c:	2300      	movs	r3, #0
 800f46e:	2200      	movs	r2, #0
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f002 fdaa 	bl	8011fca <USBD_LL_Transmit>
 800f476:	e01f      	b.n	800f4b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	2200      	movs	r2, #0
 800f47c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	33b0      	adds	r3, #176	@ 0xb0
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	691b      	ldr	r3, [r3, #16]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d010      	beq.n	800f4b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	33b0      	adds	r3, #176	@ 0xb0
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	691b      	ldr	r3, [r3, #16]
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f4ae:	68ba      	ldr	r2, [r7, #8]
 800f4b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f4b4:	78fa      	ldrb	r2, [r7, #3]
 800f4b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f4b8:	2300      	movs	r3, #0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3710      	adds	r7, #16
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b084      	sub	sp, #16
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	32b0      	adds	r2, #176	@ 0xb0
 800f4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	32b0      	adds	r2, #176	@ 0xb0
 800f4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d101      	bne.n	800f4f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f4f0:	2303      	movs	r3, #3
 800f4f2:	e01a      	b.n	800f52a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f4f4:	78fb      	ldrb	r3, [r7, #3]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f002 fda8 	bl	801204e <USBD_LL_GetRxDataSize>
 800f4fe:	4602      	mov	r2, r0
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	33b0      	adds	r3, #176	@ 0xb0
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4413      	add	r3, r2
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f51e:	68fa      	ldr	r2, [r7, #12]
 800f520:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f524:	4611      	mov	r1, r2
 800f526:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b084      	sub	sp, #16
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	32b0      	adds	r2, #176	@ 0xb0
 800f544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f548:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d101      	bne.n	800f554 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f550:	2303      	movs	r3, #3
 800f552:	e024      	b.n	800f59e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	33b0      	adds	r3, #176	@ 0xb0
 800f55e:	009b      	lsls	r3, r3, #2
 800f560:	4413      	add	r3, r2
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d019      	beq.n	800f59c <USBD_CDC_EP0_RxReady+0x6a>
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f56e:	2bff      	cmp	r3, #255	@ 0xff
 800f570:	d014      	beq.n	800f59c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	33b0      	adds	r3, #176	@ 0xb0
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	4413      	add	r3, r2
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f58a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f58c:	68fa      	ldr	r2, [r7, #12]
 800f58e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f592:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	22ff      	movs	r2, #255	@ 0xff
 800f598:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f59c:	2300      	movs	r3, #0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
	...

0800f5a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b086      	sub	sp, #24
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f5b0:	2182      	movs	r1, #130	@ 0x82
 800f5b2:	4818      	ldr	r0, [pc, #96]	@ (800f614 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f5b4:	f000 fd4f 	bl	8010056 <USBD_GetEpDesc>
 800f5b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f5ba:	2101      	movs	r1, #1
 800f5bc:	4815      	ldr	r0, [pc, #84]	@ (800f614 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f5be:	f000 fd4a 	bl	8010056 <USBD_GetEpDesc>
 800f5c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f5c4:	2181      	movs	r1, #129	@ 0x81
 800f5c6:	4813      	ldr	r0, [pc, #76]	@ (800f614 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f5c8:	f000 fd45 	bl	8010056 <USBD_GetEpDesc>
 800f5cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	2210      	movs	r2, #16
 800f5d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d006      	beq.n	800f5ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f5e8:	711a      	strb	r2, [r3, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d006      	beq.n	800f602 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f5fc:	711a      	strb	r2, [r3, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2243      	movs	r2, #67	@ 0x43
 800f606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f608:	4b02      	ldr	r3, [pc, #8]	@ (800f614 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3718      	adds	r7, #24
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	24000058 	.word	0x24000058

0800f618 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b086      	sub	sp, #24
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f620:	2182      	movs	r1, #130	@ 0x82
 800f622:	4818      	ldr	r0, [pc, #96]	@ (800f684 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f624:	f000 fd17 	bl	8010056 <USBD_GetEpDesc>
 800f628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f62a:	2101      	movs	r1, #1
 800f62c:	4815      	ldr	r0, [pc, #84]	@ (800f684 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f62e:	f000 fd12 	bl	8010056 <USBD_GetEpDesc>
 800f632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f634:	2181      	movs	r1, #129	@ 0x81
 800f636:	4813      	ldr	r0, [pc, #76]	@ (800f684 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f638:	f000 fd0d 	bl	8010056 <USBD_GetEpDesc>
 800f63c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d002      	beq.n	800f64a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	2210      	movs	r2, #16
 800f648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d006      	beq.n	800f65e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	2200      	movs	r2, #0
 800f654:	711a      	strb	r2, [r3, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	f042 0202 	orr.w	r2, r2, #2
 800f65c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d006      	beq.n	800f672 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2200      	movs	r2, #0
 800f668:	711a      	strb	r2, [r3, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f042 0202 	orr.w	r2, r2, #2
 800f670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2243      	movs	r2, #67	@ 0x43
 800f676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f678:	4b02      	ldr	r3, [pc, #8]	@ (800f684 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3718      	adds	r7, #24
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	24000058 	.word	0x24000058

0800f688 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f690:	2182      	movs	r1, #130	@ 0x82
 800f692:	4818      	ldr	r0, [pc, #96]	@ (800f6f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f694:	f000 fcdf 	bl	8010056 <USBD_GetEpDesc>
 800f698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f69a:	2101      	movs	r1, #1
 800f69c:	4815      	ldr	r0, [pc, #84]	@ (800f6f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f69e:	f000 fcda 	bl	8010056 <USBD_GetEpDesc>
 800f6a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f6a4:	2181      	movs	r1, #129	@ 0x81
 800f6a6:	4813      	ldr	r0, [pc, #76]	@ (800f6f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f6a8:	f000 fcd5 	bl	8010056 <USBD_GetEpDesc>
 800f6ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d002      	beq.n	800f6ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	2210      	movs	r2, #16
 800f6b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d006      	beq.n	800f6ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f6c8:	711a      	strb	r2, [r3, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d006      	beq.n	800f6e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f6dc:	711a      	strb	r2, [r3, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2243      	movs	r2, #67	@ 0x43
 800f6e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f6e8:	4b02      	ldr	r3, [pc, #8]	@ (800f6f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3718      	adds	r7, #24
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	24000058 	.word	0x24000058

0800f6f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	220a      	movs	r2, #10
 800f704:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f706:	4b03      	ldr	r3, [pc, #12]	@ (800f714 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f708:	4618      	mov	r0, r3
 800f70a:	370c      	adds	r7, #12
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr
 800f714:	24000014 	.word	0x24000014

0800f718 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f718:	b480      	push	{r7}
 800f71a:	b083      	sub	sp, #12
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d101      	bne.n	800f72c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f728:	2303      	movs	r3, #3
 800f72a:	e009      	b.n	800f740 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	33b0      	adds	r3, #176	@ 0xb0
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	4413      	add	r3, r2
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b087      	sub	sp, #28
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	32b0      	adds	r2, #176	@ 0xb0
 800f762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f766:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d101      	bne.n	800f772 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f76e:	2303      	movs	r3, #3
 800f770:	e008      	b.n	800f784 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	68ba      	ldr	r2, [r7, #8]
 800f776:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f782:	2300      	movs	r3, #0
}
 800f784:	4618      	mov	r0, r3
 800f786:	371c      	adds	r7, #28
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f790:	b480      	push	{r7}
 800f792:	b085      	sub	sp, #20
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	32b0      	adds	r2, #176	@ 0xb0
 800f7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d101      	bne.n	800f7b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f7b0:	2303      	movs	r3, #3
 800f7b2:	e004      	b.n	800f7be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	683a      	ldr	r2, [r7, #0]
 800f7b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f7bc:	2300      	movs	r3, #0
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3714      	adds	r7, #20
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
	...

0800f7cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	32b0      	adds	r2, #176	@ 0xb0
 800f7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d101      	bne.n	800f7f2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f7ee:	2303      	movs	r3, #3
 800f7f0:	e025      	b.n	800f83e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d11f      	bne.n	800f83c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f804:	4b10      	ldr	r3, [pc, #64]	@ (800f848 <USBD_CDC_TransmitPacket+0x7c>)
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	f003 020f 	and.w	r2, r3, #15
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	4613      	mov	r3, r2
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	4413      	add	r3, r2
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	4403      	add	r3, r0
 800f81e:	3318      	adds	r3, #24
 800f820:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f822:	4b09      	ldr	r3, [pc, #36]	@ (800f848 <USBD_CDC_TransmitPacket+0x7c>)
 800f824:	7819      	ldrb	r1, [r3, #0]
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f002 fbc9 	bl	8011fca <USBD_LL_Transmit>

    ret = USBD_OK;
 800f838:	2300      	movs	r3, #0
 800f83a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	2400009b 	.word	0x2400009b

0800f84c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	32b0      	adds	r2, #176	@ 0xb0
 800f85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f862:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	32b0      	adds	r2, #176	@ 0xb0
 800f86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d101      	bne.n	800f87a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f876:	2303      	movs	r3, #3
 800f878:	e018      	b.n	800f8ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	7c1b      	ldrb	r3, [r3, #16]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d10a      	bne.n	800f898 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f882:	4b0c      	ldr	r3, [pc, #48]	@ (800f8b4 <USBD_CDC_ReceivePacket+0x68>)
 800f884:	7819      	ldrb	r1, [r3, #0]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f88c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f002 fbbb 	bl	801200c <USBD_LL_PrepareReceive>
 800f896:	e008      	b.n	800f8aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f898:	4b06      	ldr	r3, [pc, #24]	@ (800f8b4 <USBD_CDC_ReceivePacket+0x68>)
 800f89a:	7819      	ldrb	r1, [r3, #0]
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f8a2:	2340      	movs	r3, #64	@ 0x40
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f002 fbb1 	bl	801200c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f8aa:	2300      	movs	r3, #0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3710      	adds	r7, #16
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	2400009c 	.word	0x2400009c

0800f8b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b086      	sub	sp, #24
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d101      	bne.n	800f8d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f8cc:	2303      	movs	r3, #3
 800f8ce:	e01f      	b.n	800f910 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d003      	beq.n	800f8f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	68ba      	ldr	r2, [r7, #8]
 800f8f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	79fa      	ldrb	r2, [r7, #7]
 800f902:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f904:	68f8      	ldr	r0, [r7, #12]
 800f906:	f002 fa27 	bl	8011d58 <USBD_LL_Init>
 800f90a:	4603      	mov	r3, r0
 800f90c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f910:	4618      	mov	r0, r3
 800f912:	3718      	adds	r7, #24
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f922:	2300      	movs	r3, #0
 800f924:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d101      	bne.n	800f930 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f92c:	2303      	movs	r3, #3
 800f92e:	e025      	b.n	800f97c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	32ae      	adds	r2, #174	@ 0xae
 800f942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00f      	beq.n	800f96c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	32ae      	adds	r2, #174	@ 0xae
 800f956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f95c:	f107 020e 	add.w	r2, r7, #14
 800f960:	4610      	mov	r0, r2
 800f962:	4798      	blx	r3
 800f964:	4602      	mov	r2, r0
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f972:	1c5a      	adds	r2, r3, #1
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f97a:	2300      	movs	r3, #0
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f002 fa33 	bl	8011df8 <USBD_LL_Start>
 800f992:	4603      	mov	r3, r0
}
 800f994:	4618      	mov	r0, r3
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f9a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	370c      	adds	r7, #12
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr

0800f9b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f9b2:	b580      	push	{r7, lr}
 800f9b4:	b084      	sub	sp, #16
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	6078      	str	r0, [r7, #4]
 800f9ba:	460b      	mov	r3, r1
 800f9bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d009      	beq.n	800f9e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	78fa      	ldrb	r2, [r7, #3]
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	4798      	blx	r3
 800f9dc:	4603      	mov	r3, r0
 800f9de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b084      	sub	sp, #16
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	78fa      	ldrb	r2, [r7, #3]
 800fa04:	4611      	mov	r1, r2
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	4798      	blx	r3
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d001      	beq.n	800fa14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fa10:	2303      	movs	r3, #3
 800fa12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3710      	adds	r7, #16
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}

0800fa1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fa1e:	b580      	push	{r7, lr}
 800fa20:	b084      	sub	sp, #16
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fa2e:	6839      	ldr	r1, [r7, #0]
 800fa30:	4618      	mov	r0, r3
 800fa32:	f001 f936 	bl	8010ca2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2201      	movs	r2, #1
 800fa3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fa44:	461a      	mov	r2, r3
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fa52:	f003 031f 	and.w	r3, r3, #31
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	d01a      	beq.n	800fa90 <USBD_LL_SetupStage+0x72>
 800fa5a:	2b02      	cmp	r3, #2
 800fa5c:	d822      	bhi.n	800faa4 <USBD_LL_SetupStage+0x86>
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d002      	beq.n	800fa68 <USBD_LL_SetupStage+0x4a>
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d00a      	beq.n	800fa7c <USBD_LL_SetupStage+0x5e>
 800fa66:	e01d      	b.n	800faa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fa6e:	4619      	mov	r1, r3
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 fb63 	bl	801013c <USBD_StdDevReq>
 800fa76:	4603      	mov	r3, r0
 800fa78:	73fb      	strb	r3, [r7, #15]
      break;
 800fa7a:	e020      	b.n	800fabe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fa82:	4619      	mov	r1, r3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 fbcb 	bl	8010220 <USBD_StdItfReq>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	73fb      	strb	r3, [r7, #15]
      break;
 800fa8e:	e016      	b.n	800fabe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fa96:	4619      	mov	r1, r3
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 fc2d 	bl	80102f8 <USBD_StdEPReq>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	73fb      	strb	r3, [r7, #15]
      break;
 800faa2:	e00c      	b.n	800fabe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800faaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	4619      	mov	r1, r3
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f002 fa00 	bl	8011eb8 <USBD_LL_StallEP>
 800fab8:	4603      	mov	r3, r0
 800faba:	73fb      	strb	r3, [r7, #15]
      break;
 800fabc:	bf00      	nop
  }

  return ret;
 800fabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	460b      	mov	r3, r1
 800fad2:	607a      	str	r2, [r7, #4]
 800fad4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fad6:	2300      	movs	r3, #0
 800fad8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fada:	7afb      	ldrb	r3, [r7, #11]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d16e      	bne.n	800fbbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fae6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800faee:	2b03      	cmp	r3, #3
 800faf0:	f040 8098 	bne.w	800fc24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	689a      	ldr	r2, [r3, #8]
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d913      	bls.n	800fb28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	689a      	ldr	r2, [r3, #8]
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	1ad2      	subs	r2, r2, r3
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	68da      	ldr	r2, [r3, #12]
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	689b      	ldr	r3, [r3, #8]
 800fb16:	4293      	cmp	r3, r2
 800fb18:	bf28      	it	cs
 800fb1a:	4613      	movcs	r3, r2
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	6879      	ldr	r1, [r7, #4]
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f001 f9b2 	bl	8010e8a <USBD_CtlContinueRx>
 800fb26:	e07d      	b.n	800fc24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fb2e:	f003 031f 	and.w	r3, r3, #31
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d014      	beq.n	800fb60 <USBD_LL_DataOutStage+0x98>
 800fb36:	2b02      	cmp	r3, #2
 800fb38:	d81d      	bhi.n	800fb76 <USBD_LL_DataOutStage+0xae>
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d002      	beq.n	800fb44 <USBD_LL_DataOutStage+0x7c>
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d003      	beq.n	800fb4a <USBD_LL_DataOutStage+0x82>
 800fb42:	e018      	b.n	800fb76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fb44:	2300      	movs	r3, #0
 800fb46:	75bb      	strb	r3, [r7, #22]
            break;
 800fb48:	e018      	b.n	800fb7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	4619      	mov	r1, r3
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f000 fa64 	bl	8010022 <USBD_CoreFindIF>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	75bb      	strb	r3, [r7, #22]
            break;
 800fb5e:	e00d      	b.n	800fb7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	4619      	mov	r1, r3
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	f000 fa66 	bl	801003c <USBD_CoreFindEP>
 800fb70:	4603      	mov	r3, r0
 800fb72:	75bb      	strb	r3, [r7, #22]
            break;
 800fb74:	e002      	b.n	800fb7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fb76:	2300      	movs	r3, #0
 800fb78:	75bb      	strb	r3, [r7, #22]
            break;
 800fb7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fb7c:	7dbb      	ldrb	r3, [r7, #22]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d119      	bne.n	800fbb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d113      	bne.n	800fbb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fb8e:	7dba      	ldrb	r2, [r7, #22]
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	32ae      	adds	r2, #174	@ 0xae
 800fb94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00b      	beq.n	800fbb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fb9e:	7dba      	ldrb	r2, [r7, #22]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fba6:	7dba      	ldrb	r2, [r7, #22]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	32ae      	adds	r2, #174	@ 0xae
 800fbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb0:	691b      	ldr	r3, [r3, #16]
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fbb6:	68f8      	ldr	r0, [r7, #12]
 800fbb8:	f001 f978 	bl	8010eac <USBD_CtlSendStatus>
 800fbbc:	e032      	b.n	800fc24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fbbe:	7afb      	ldrb	r3, [r7, #11]
 800fbc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	f000 fa37 	bl	801003c <USBD_CoreFindEP>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fbd2:	7dbb      	ldrb	r3, [r7, #22]
 800fbd4:	2bff      	cmp	r3, #255	@ 0xff
 800fbd6:	d025      	beq.n	800fc24 <USBD_LL_DataOutStage+0x15c>
 800fbd8:	7dbb      	ldrb	r3, [r7, #22]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d122      	bne.n	800fc24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	2b03      	cmp	r3, #3
 800fbe8:	d117      	bne.n	800fc1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fbea:	7dba      	ldrb	r2, [r7, #22]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	32ae      	adds	r2, #174	@ 0xae
 800fbf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbf4:	699b      	ldr	r3, [r3, #24]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00f      	beq.n	800fc1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fbfa:	7dba      	ldrb	r2, [r7, #22]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fc02:	7dba      	ldrb	r2, [r7, #22]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	32ae      	adds	r2, #174	@ 0xae
 800fc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc0c:	699b      	ldr	r3, [r3, #24]
 800fc0e:	7afa      	ldrb	r2, [r7, #11]
 800fc10:	4611      	mov	r1, r2
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	4798      	blx	r3
 800fc16:	4603      	mov	r3, r0
 800fc18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fc1a:	7dfb      	ldrb	r3, [r7, #23]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d001      	beq.n	800fc24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fc20:	7dfb      	ldrb	r3, [r7, #23]
 800fc22:	e000      	b.n	800fc26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3718      	adds	r7, #24
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b086      	sub	sp, #24
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	60f8      	str	r0, [r7, #12]
 800fc36:	460b      	mov	r3, r1
 800fc38:	607a      	str	r2, [r7, #4]
 800fc3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fc3c:	7afb      	ldrb	r3, [r7, #11]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d16f      	bne.n	800fd22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	3314      	adds	r3, #20
 800fc46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fc4e:	2b02      	cmp	r3, #2
 800fc50:	d15a      	bne.n	800fd08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	689a      	ldr	r2, [r3, #8]
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d914      	bls.n	800fc88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	689a      	ldr	r2, [r3, #8]
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	1ad2      	subs	r2, r2, r3
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	461a      	mov	r2, r3
 800fc72:	6879      	ldr	r1, [r7, #4]
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f001 f8da 	bl	8010e2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	2100      	movs	r1, #0
 800fc80:	68f8      	ldr	r0, [r7, #12]
 800fc82:	f002 f9c3 	bl	801200c <USBD_LL_PrepareReceive>
 800fc86:	e03f      	b.n	800fd08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	68da      	ldr	r2, [r3, #12]
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d11c      	bne.n	800fcce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	685a      	ldr	r2, [r3, #4]
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d316      	bcc.n	800fcce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	685a      	ldr	r2, [r3, #4]
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d20f      	bcs.n	800fcce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fcae:	2200      	movs	r2, #0
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f001 f8bb 	bl	8010e2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	2100      	movs	r1, #0
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	f002 f9a0 	bl	801200c <USBD_LL_PrepareReceive>
 800fccc:	e01c      	b.n	800fd08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	2b03      	cmp	r3, #3
 800fcd8:	d10f      	bne.n	800fcfa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d009      	beq.n	800fcfa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2200      	movs	r2, #0
 800fcea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcfa:	2180      	movs	r1, #128	@ 0x80
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f002 f8db 	bl	8011eb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fd02:	68f8      	ldr	r0, [r7, #12]
 800fd04:	f001 f8e5 	bl	8010ed2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d03a      	beq.n	800fd88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f7ff fe42 	bl	800f99c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fd20:	e032      	b.n	800fd88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fd22:	7afb      	ldrb	r3, [r7, #11]
 800fd24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f000 f985 	bl	801003c <USBD_CoreFindEP>
 800fd32:	4603      	mov	r3, r0
 800fd34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fd36:	7dfb      	ldrb	r3, [r7, #23]
 800fd38:	2bff      	cmp	r3, #255	@ 0xff
 800fd3a:	d025      	beq.n	800fd88 <USBD_LL_DataInStage+0x15a>
 800fd3c:	7dfb      	ldrb	r3, [r7, #23]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d122      	bne.n	800fd88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b03      	cmp	r3, #3
 800fd4c:	d11c      	bne.n	800fd88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fd4e:	7dfa      	ldrb	r2, [r7, #23]
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	32ae      	adds	r2, #174	@ 0xae
 800fd54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd58:	695b      	ldr	r3, [r3, #20]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d014      	beq.n	800fd88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fd5e:	7dfa      	ldrb	r2, [r7, #23]
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fd66:	7dfa      	ldrb	r2, [r7, #23]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	32ae      	adds	r2, #174	@ 0xae
 800fd6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	7afa      	ldrb	r2, [r7, #11]
 800fd74:	4611      	mov	r1, r2
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	4798      	blx	r3
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fd7e:	7dbb      	ldrb	r3, [r7, #22]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fd84:	7dbb      	ldrb	r3, [r7, #22]
 800fd86:	e000      	b.n	800fd8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3718      	adds	r7, #24
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}

0800fd92 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b084      	sub	sp, #16
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2201      	movs	r2, #1
 800fda2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d014      	beq.n	800fdf8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d00e      	beq.n	800fdf8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	6852      	ldr	r2, [r2, #4]
 800fde6:	b2d2      	uxtb	r2, r2
 800fde8:	4611      	mov	r1, r2
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	4798      	blx	r3
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d001      	beq.n	800fdf8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fdf4:	2303      	movs	r3, #3
 800fdf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fdf8:	2340      	movs	r3, #64	@ 0x40
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f002 f815 	bl	8011e2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2201      	movs	r2, #1
 800fe08:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2240      	movs	r2, #64	@ 0x40
 800fe10:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe14:	2340      	movs	r3, #64	@ 0x40
 800fe16:	2200      	movs	r2, #0
 800fe18:	2180      	movs	r1, #128	@ 0x80
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f002 f807 	bl	8011e2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2201      	movs	r2, #1
 800fe24:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2240      	movs	r2, #64	@ 0x40
 800fe2a:	621a      	str	r2, [r3, #32]

  return ret;
 800fe2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3710      	adds	r7, #16
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fe36:	b480      	push	{r7}
 800fe38:	b083      	sub	sp, #12
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	6078      	str	r0, [r7, #4]
 800fe3e:	460b      	mov	r3, r1
 800fe40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	78fa      	ldrb	r2, [r7, #3]
 800fe46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fe48:	2300      	movs	r3, #0
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	370c      	adds	r7, #12
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe54:	4770      	bx	lr

0800fe56 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fe56:	b480      	push	{r7}
 800fe58:	b083      	sub	sp, #12
 800fe5a:	af00      	add	r7, sp, #0
 800fe5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b04      	cmp	r3, #4
 800fe68:	d006      	beq.n	800fe78 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2204      	movs	r2, #4
 800fe7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800fe80:	2300      	movs	r3, #0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	370c      	adds	r7, #12
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr

0800fe8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fe8e:	b480      	push	{r7}
 800fe90:	b083      	sub	sp, #12
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe9c:	b2db      	uxtb	r3, r3
 800fe9e:	2b04      	cmp	r3, #4
 800fea0:	d106      	bne.n	800feb0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	370c      	adds	r7, #12
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr

0800febe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b082      	sub	sp, #8
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	2b03      	cmp	r3, #3
 800fed0:	d110      	bne.n	800fef4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00b      	beq.n	800fef4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fee2:	69db      	ldr	r3, [r3, #28]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d005      	beq.n	800fef4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800feee:	69db      	ldr	r3, [r3, #28]
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3708      	adds	r7, #8
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}

0800fefe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fefe:	b580      	push	{r7, lr}
 800ff00:	b082      	sub	sp, #8
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	6078      	str	r0, [r7, #4]
 800ff06:	460b      	mov	r3, r1
 800ff08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	32ae      	adds	r2, #174	@ 0xae
 800ff14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	e01c      	b.n	800ff5a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b03      	cmp	r3, #3
 800ff2a:	d115      	bne.n	800ff58 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	32ae      	adds	r2, #174	@ 0xae
 800ff36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff3a:	6a1b      	ldr	r3, [r3, #32]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d00b      	beq.n	800ff58 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	32ae      	adds	r2, #174	@ 0xae
 800ff4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff4e:	6a1b      	ldr	r3, [r3, #32]
 800ff50:	78fa      	ldrb	r2, [r7, #3]
 800ff52:	4611      	mov	r1, r2
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b082      	sub	sp, #8
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
 800ff6a:	460b      	mov	r3, r1
 800ff6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	32ae      	adds	r2, #174	@ 0xae
 800ff78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d101      	bne.n	800ff84 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ff80:	2303      	movs	r3, #3
 800ff82:	e01c      	b.n	800ffbe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	2b03      	cmp	r3, #3
 800ff8e:	d115      	bne.n	800ffbc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	32ae      	adds	r2, #174	@ 0xae
 800ff9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d00b      	beq.n	800ffbc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	32ae      	adds	r2, #174	@ 0xae
 800ffae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb4:	78fa      	ldrb	r2, [r7, #3]
 800ffb6:	4611      	mov	r1, r2
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ffbc:	2300      	movs	r3, #0
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ffc6:	b480      	push	{r7}
 800ffc8:	b083      	sub	sp, #12
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2201      	movs	r2, #1
 800ffec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00e      	beq.n	8010018 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	687a      	ldr	r2, [r7, #4]
 8010004:	6852      	ldr	r2, [r2, #4]
 8010006:	b2d2      	uxtb	r2, r2
 8010008:	4611      	mov	r1, r2
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	4798      	blx	r3
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010014:	2303      	movs	r3, #3
 8010016:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010018:	7bfb      	ldrb	r3, [r7, #15]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010022:	b480      	push	{r7}
 8010024:	b083      	sub	sp, #12
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
 801002a:	460b      	mov	r3, r1
 801002c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801002e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010030:	4618      	mov	r0, r3
 8010032:	370c      	adds	r7, #12
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr

0801003c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	460b      	mov	r3, r1
 8010046:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010048:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801004a:	4618      	mov	r0, r3
 801004c:	370c      	adds	r7, #12
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr

08010056 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010056:	b580      	push	{r7, lr}
 8010058:	b086      	sub	sp, #24
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
 801005e:	460b      	mov	r3, r1
 8010060:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801006a:	2300      	movs	r3, #0
 801006c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	885b      	ldrh	r3, [r3, #2]
 8010072:	b29b      	uxth	r3, r3
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	7812      	ldrb	r2, [r2, #0]
 8010078:	4293      	cmp	r3, r2
 801007a:	d91f      	bls.n	80100bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010082:	e013      	b.n	80100ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010084:	f107 030a 	add.w	r3, r7, #10
 8010088:	4619      	mov	r1, r3
 801008a:	6978      	ldr	r0, [r7, #20]
 801008c:	f000 f81b 	bl	80100c6 <USBD_GetNextDesc>
 8010090:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	785b      	ldrb	r3, [r3, #1]
 8010096:	2b05      	cmp	r3, #5
 8010098:	d108      	bne.n	80100ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	789b      	ldrb	r3, [r3, #2]
 80100a2:	78fa      	ldrb	r2, [r7, #3]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d008      	beq.n	80100ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80100a8:	2300      	movs	r3, #0
 80100aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	885b      	ldrh	r3, [r3, #2]
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	897b      	ldrh	r3, [r7, #10]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d8e5      	bhi.n	8010084 <USBD_GetEpDesc+0x2e>
 80100b8:	e000      	b.n	80100bc <USBD_GetEpDesc+0x66>
          break;
 80100ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80100bc:	693b      	ldr	r3, [r7, #16]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3718      	adds	r7, #24
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80100c6:	b480      	push	{r7}
 80100c8:	b085      	sub	sp, #20
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
 80100ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	68fa      	ldr	r2, [r7, #12]
 80100da:	7812      	ldrb	r2, [r2, #0]
 80100dc:	4413      	add	r3, r2
 80100de:	b29a      	uxth	r2, r3
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	461a      	mov	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	4413      	add	r3, r2
 80100ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80100f0:	68fb      	ldr	r3, [r7, #12]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3714      	adds	r7, #20
 80100f6:	46bd      	mov	sp, r7
 80100f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fc:	4770      	bx	lr

080100fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80100fe:	b480      	push	{r7}
 8010100:	b087      	sub	sp, #28
 8010102:	af00      	add	r7, sp, #0
 8010104:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	3301      	adds	r3, #1
 8010114:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801011c:	8a3b      	ldrh	r3, [r7, #16]
 801011e:	021b      	lsls	r3, r3, #8
 8010120:	b21a      	sxth	r2, r3
 8010122:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010126:	4313      	orrs	r3, r2
 8010128:	b21b      	sxth	r3, r3
 801012a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801012c:	89fb      	ldrh	r3, [r7, #14]
}
 801012e:	4618      	mov	r0, r3
 8010130:	371c      	adds	r7, #28
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
	...

0801013c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010146:	2300      	movs	r3, #0
 8010148:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010152:	2b40      	cmp	r3, #64	@ 0x40
 8010154:	d005      	beq.n	8010162 <USBD_StdDevReq+0x26>
 8010156:	2b40      	cmp	r3, #64	@ 0x40
 8010158:	d857      	bhi.n	801020a <USBD_StdDevReq+0xce>
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00f      	beq.n	801017e <USBD_StdDevReq+0x42>
 801015e:	2b20      	cmp	r3, #32
 8010160:	d153      	bne.n	801020a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	32ae      	adds	r2, #174	@ 0xae
 801016c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010170:	689b      	ldr	r3, [r3, #8]
 8010172:	6839      	ldr	r1, [r7, #0]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	4798      	blx	r3
 8010178:	4603      	mov	r3, r0
 801017a:	73fb      	strb	r3, [r7, #15]
      break;
 801017c:	e04a      	b.n	8010214 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	785b      	ldrb	r3, [r3, #1]
 8010182:	2b09      	cmp	r3, #9
 8010184:	d83b      	bhi.n	80101fe <USBD_StdDevReq+0xc2>
 8010186:	a201      	add	r2, pc, #4	@ (adr r2, 801018c <USBD_StdDevReq+0x50>)
 8010188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801018c:	080101e1 	.word	0x080101e1
 8010190:	080101f5 	.word	0x080101f5
 8010194:	080101ff 	.word	0x080101ff
 8010198:	080101eb 	.word	0x080101eb
 801019c:	080101ff 	.word	0x080101ff
 80101a0:	080101bf 	.word	0x080101bf
 80101a4:	080101b5 	.word	0x080101b5
 80101a8:	080101ff 	.word	0x080101ff
 80101ac:	080101d7 	.word	0x080101d7
 80101b0:	080101c9 	.word	0x080101c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80101b4:	6839      	ldr	r1, [r7, #0]
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 fa3c 	bl	8010634 <USBD_GetDescriptor>
          break;
 80101bc:	e024      	b.n	8010208 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80101be:	6839      	ldr	r1, [r7, #0]
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 fbcb 	bl	801095c <USBD_SetAddress>
          break;
 80101c6:	e01f      	b.n	8010208 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80101c8:	6839      	ldr	r1, [r7, #0]
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 fc0a 	bl	80109e4 <USBD_SetConfig>
 80101d0:	4603      	mov	r3, r0
 80101d2:	73fb      	strb	r3, [r7, #15]
          break;
 80101d4:	e018      	b.n	8010208 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80101d6:	6839      	ldr	r1, [r7, #0]
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 fcad 	bl	8010b38 <USBD_GetConfig>
          break;
 80101de:	e013      	b.n	8010208 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80101e0:	6839      	ldr	r1, [r7, #0]
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 fcde 	bl	8010ba4 <USBD_GetStatus>
          break;
 80101e8:	e00e      	b.n	8010208 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80101ea:	6839      	ldr	r1, [r7, #0]
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 fd0d 	bl	8010c0c <USBD_SetFeature>
          break;
 80101f2:	e009      	b.n	8010208 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80101f4:	6839      	ldr	r1, [r7, #0]
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f000 fd31 	bl	8010c5e <USBD_ClrFeature>
          break;
 80101fc:	e004      	b.n	8010208 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80101fe:	6839      	ldr	r1, [r7, #0]
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 fd88 	bl	8010d16 <USBD_CtlError>
          break;
 8010206:	bf00      	nop
      }
      break;
 8010208:	e004      	b.n	8010214 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801020a:	6839      	ldr	r1, [r7, #0]
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f000 fd82 	bl	8010d16 <USBD_CtlError>
      break;
 8010212:	bf00      	nop
  }

  return ret;
 8010214:	7bfb      	ldrb	r3, [r7, #15]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3710      	adds	r7, #16
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop

08010220 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b084      	sub	sp, #16
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801022a:	2300      	movs	r3, #0
 801022c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010236:	2b40      	cmp	r3, #64	@ 0x40
 8010238:	d005      	beq.n	8010246 <USBD_StdItfReq+0x26>
 801023a:	2b40      	cmp	r3, #64	@ 0x40
 801023c:	d852      	bhi.n	80102e4 <USBD_StdItfReq+0xc4>
 801023e:	2b00      	cmp	r3, #0
 8010240:	d001      	beq.n	8010246 <USBD_StdItfReq+0x26>
 8010242:	2b20      	cmp	r3, #32
 8010244:	d14e      	bne.n	80102e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801024c:	b2db      	uxtb	r3, r3
 801024e:	3b01      	subs	r3, #1
 8010250:	2b02      	cmp	r3, #2
 8010252:	d840      	bhi.n	80102d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	889b      	ldrh	r3, [r3, #4]
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b01      	cmp	r3, #1
 801025c:	d836      	bhi.n	80102cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	889b      	ldrh	r3, [r3, #4]
 8010262:	b2db      	uxtb	r3, r3
 8010264:	4619      	mov	r1, r3
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f7ff fedb 	bl	8010022 <USBD_CoreFindIF>
 801026c:	4603      	mov	r3, r0
 801026e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010270:	7bbb      	ldrb	r3, [r7, #14]
 8010272:	2bff      	cmp	r3, #255	@ 0xff
 8010274:	d01d      	beq.n	80102b2 <USBD_StdItfReq+0x92>
 8010276:	7bbb      	ldrb	r3, [r7, #14]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d11a      	bne.n	80102b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801027c:	7bba      	ldrb	r2, [r7, #14]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	32ae      	adds	r2, #174	@ 0xae
 8010282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00f      	beq.n	80102ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801028c:	7bba      	ldrb	r2, [r7, #14]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010294:	7bba      	ldrb	r2, [r7, #14]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	32ae      	adds	r2, #174	@ 0xae
 801029a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	6839      	ldr	r1, [r7, #0]
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	4798      	blx	r3
 80102a6:	4603      	mov	r3, r0
 80102a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80102aa:	e004      	b.n	80102b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80102ac:	2303      	movs	r3, #3
 80102ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80102b0:	e001      	b.n	80102b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80102b2:	2303      	movs	r3, #3
 80102b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	88db      	ldrh	r3, [r3, #6]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d110      	bne.n	80102e0 <USBD_StdItfReq+0xc0>
 80102be:	7bfb      	ldrb	r3, [r7, #15]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d10d      	bne.n	80102e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fdf1 	bl	8010eac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80102ca:	e009      	b.n	80102e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80102cc:	6839      	ldr	r1, [r7, #0]
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 fd21 	bl	8010d16 <USBD_CtlError>
          break;
 80102d4:	e004      	b.n	80102e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80102d6:	6839      	ldr	r1, [r7, #0]
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 fd1c 	bl	8010d16 <USBD_CtlError>
          break;
 80102de:	e000      	b.n	80102e2 <USBD_StdItfReq+0xc2>
          break;
 80102e0:	bf00      	nop
      }
      break;
 80102e2:	e004      	b.n	80102ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80102e4:	6839      	ldr	r1, [r7, #0]
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 fd15 	bl	8010d16 <USBD_CtlError>
      break;
 80102ec:	bf00      	nop
  }

  return ret;
 80102ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3710      	adds	r7, #16
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010302:	2300      	movs	r3, #0
 8010304:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	889b      	ldrh	r3, [r3, #4]
 801030a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010314:	2b40      	cmp	r3, #64	@ 0x40
 8010316:	d007      	beq.n	8010328 <USBD_StdEPReq+0x30>
 8010318:	2b40      	cmp	r3, #64	@ 0x40
 801031a:	f200 817f 	bhi.w	801061c <USBD_StdEPReq+0x324>
 801031e:	2b00      	cmp	r3, #0
 8010320:	d02a      	beq.n	8010378 <USBD_StdEPReq+0x80>
 8010322:	2b20      	cmp	r3, #32
 8010324:	f040 817a 	bne.w	801061c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010328:	7bbb      	ldrb	r3, [r7, #14]
 801032a:	4619      	mov	r1, r3
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f7ff fe85 	bl	801003c <USBD_CoreFindEP>
 8010332:	4603      	mov	r3, r0
 8010334:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010336:	7b7b      	ldrb	r3, [r7, #13]
 8010338:	2bff      	cmp	r3, #255	@ 0xff
 801033a:	f000 8174 	beq.w	8010626 <USBD_StdEPReq+0x32e>
 801033e:	7b7b      	ldrb	r3, [r7, #13]
 8010340:	2b00      	cmp	r3, #0
 8010342:	f040 8170 	bne.w	8010626 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010346:	7b7a      	ldrb	r2, [r7, #13]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801034e:	7b7a      	ldrb	r2, [r7, #13]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	32ae      	adds	r2, #174	@ 0xae
 8010354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010358:	689b      	ldr	r3, [r3, #8]
 801035a:	2b00      	cmp	r3, #0
 801035c:	f000 8163 	beq.w	8010626 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010360:	7b7a      	ldrb	r2, [r7, #13]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	32ae      	adds	r2, #174	@ 0xae
 8010366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	6839      	ldr	r1, [r7, #0]
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	4798      	blx	r3
 8010372:	4603      	mov	r3, r0
 8010374:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010376:	e156      	b.n	8010626 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	785b      	ldrb	r3, [r3, #1]
 801037c:	2b03      	cmp	r3, #3
 801037e:	d008      	beq.n	8010392 <USBD_StdEPReq+0x9a>
 8010380:	2b03      	cmp	r3, #3
 8010382:	f300 8145 	bgt.w	8010610 <USBD_StdEPReq+0x318>
 8010386:	2b00      	cmp	r3, #0
 8010388:	f000 809b 	beq.w	80104c2 <USBD_StdEPReq+0x1ca>
 801038c:	2b01      	cmp	r3, #1
 801038e:	d03c      	beq.n	801040a <USBD_StdEPReq+0x112>
 8010390:	e13e      	b.n	8010610 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010398:	b2db      	uxtb	r3, r3
 801039a:	2b02      	cmp	r3, #2
 801039c:	d002      	beq.n	80103a4 <USBD_StdEPReq+0xac>
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d016      	beq.n	80103d0 <USBD_StdEPReq+0xd8>
 80103a2:	e02c      	b.n	80103fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80103a4:	7bbb      	ldrb	r3, [r7, #14]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00d      	beq.n	80103c6 <USBD_StdEPReq+0xce>
 80103aa:	7bbb      	ldrb	r3, [r7, #14]
 80103ac:	2b80      	cmp	r3, #128	@ 0x80
 80103ae:	d00a      	beq.n	80103c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80103b0:	7bbb      	ldrb	r3, [r7, #14]
 80103b2:	4619      	mov	r1, r3
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f001 fd7f 	bl	8011eb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80103ba:	2180      	movs	r1, #128	@ 0x80
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f001 fd7b 	bl	8011eb8 <USBD_LL_StallEP>
 80103c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80103c4:	e020      	b.n	8010408 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80103c6:	6839      	ldr	r1, [r7, #0]
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f000 fca4 	bl	8010d16 <USBD_CtlError>
              break;
 80103ce:	e01b      	b.n	8010408 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	885b      	ldrh	r3, [r3, #2]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10e      	bne.n	80103f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80103d8:	7bbb      	ldrb	r3, [r7, #14]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d00b      	beq.n	80103f6 <USBD_StdEPReq+0xfe>
 80103de:	7bbb      	ldrb	r3, [r7, #14]
 80103e0:	2b80      	cmp	r3, #128	@ 0x80
 80103e2:	d008      	beq.n	80103f6 <USBD_StdEPReq+0xfe>
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	88db      	ldrh	r3, [r3, #6]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d104      	bne.n	80103f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80103ec:	7bbb      	ldrb	r3, [r7, #14]
 80103ee:	4619      	mov	r1, r3
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f001 fd61 	bl	8011eb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 fd58 	bl	8010eac <USBD_CtlSendStatus>

              break;
 80103fc:	e004      	b.n	8010408 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80103fe:	6839      	ldr	r1, [r7, #0]
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f000 fc88 	bl	8010d16 <USBD_CtlError>
              break;
 8010406:	bf00      	nop
          }
          break;
 8010408:	e107      	b.n	801061a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010410:	b2db      	uxtb	r3, r3
 8010412:	2b02      	cmp	r3, #2
 8010414:	d002      	beq.n	801041c <USBD_StdEPReq+0x124>
 8010416:	2b03      	cmp	r3, #3
 8010418:	d016      	beq.n	8010448 <USBD_StdEPReq+0x150>
 801041a:	e04b      	b.n	80104b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801041c:	7bbb      	ldrb	r3, [r7, #14]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00d      	beq.n	801043e <USBD_StdEPReq+0x146>
 8010422:	7bbb      	ldrb	r3, [r7, #14]
 8010424:	2b80      	cmp	r3, #128	@ 0x80
 8010426:	d00a      	beq.n	801043e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010428:	7bbb      	ldrb	r3, [r7, #14]
 801042a:	4619      	mov	r1, r3
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f001 fd43 	bl	8011eb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010432:	2180      	movs	r1, #128	@ 0x80
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f001 fd3f 	bl	8011eb8 <USBD_LL_StallEP>
 801043a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801043c:	e040      	b.n	80104c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801043e:	6839      	ldr	r1, [r7, #0]
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f000 fc68 	bl	8010d16 <USBD_CtlError>
              break;
 8010446:	e03b      	b.n	80104c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	885b      	ldrh	r3, [r3, #2]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d136      	bne.n	80104be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010450:	7bbb      	ldrb	r3, [r7, #14]
 8010452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010456:	2b00      	cmp	r3, #0
 8010458:	d004      	beq.n	8010464 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801045a:	7bbb      	ldrb	r3, [r7, #14]
 801045c:	4619      	mov	r1, r3
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f001 fd49 	bl	8011ef6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 fd21 	bl	8010eac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801046a:	7bbb      	ldrb	r3, [r7, #14]
 801046c:	4619      	mov	r1, r3
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f7ff fde4 	bl	801003c <USBD_CoreFindEP>
 8010474:	4603      	mov	r3, r0
 8010476:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010478:	7b7b      	ldrb	r3, [r7, #13]
 801047a:	2bff      	cmp	r3, #255	@ 0xff
 801047c:	d01f      	beq.n	80104be <USBD_StdEPReq+0x1c6>
 801047e:	7b7b      	ldrb	r3, [r7, #13]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d11c      	bne.n	80104be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010484:	7b7a      	ldrb	r2, [r7, #13]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801048c:	7b7a      	ldrb	r2, [r7, #13]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	32ae      	adds	r2, #174	@ 0xae
 8010492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d010      	beq.n	80104be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801049c:	7b7a      	ldrb	r2, [r7, #13]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	32ae      	adds	r2, #174	@ 0xae
 80104a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104a6:	689b      	ldr	r3, [r3, #8]
 80104a8:	6839      	ldr	r1, [r7, #0]
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	4798      	blx	r3
 80104ae:	4603      	mov	r3, r0
 80104b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80104b2:	e004      	b.n	80104be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80104b4:	6839      	ldr	r1, [r7, #0]
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 fc2d 	bl	8010d16 <USBD_CtlError>
              break;
 80104bc:	e000      	b.n	80104c0 <USBD_StdEPReq+0x1c8>
              break;
 80104be:	bf00      	nop
          }
          break;
 80104c0:	e0ab      	b.n	801061a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	2b02      	cmp	r3, #2
 80104cc:	d002      	beq.n	80104d4 <USBD_StdEPReq+0x1dc>
 80104ce:	2b03      	cmp	r3, #3
 80104d0:	d032      	beq.n	8010538 <USBD_StdEPReq+0x240>
 80104d2:	e097      	b.n	8010604 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80104d4:	7bbb      	ldrb	r3, [r7, #14]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d007      	beq.n	80104ea <USBD_StdEPReq+0x1f2>
 80104da:	7bbb      	ldrb	r3, [r7, #14]
 80104dc:	2b80      	cmp	r3, #128	@ 0x80
 80104de:	d004      	beq.n	80104ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80104e0:	6839      	ldr	r1, [r7, #0]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 fc17 	bl	8010d16 <USBD_CtlError>
                break;
 80104e8:	e091      	b.n	801060e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	da0b      	bge.n	801050a <USBD_StdEPReq+0x212>
 80104f2:	7bbb      	ldrb	r3, [r7, #14]
 80104f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104f8:	4613      	mov	r3, r2
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	4413      	add	r3, r2
 80104fe:	009b      	lsls	r3, r3, #2
 8010500:	3310      	adds	r3, #16
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	4413      	add	r3, r2
 8010506:	3304      	adds	r3, #4
 8010508:	e00b      	b.n	8010522 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801050a:	7bbb      	ldrb	r3, [r7, #14]
 801050c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010510:	4613      	mov	r3, r2
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	4413      	add	r3, r2
 8010516:	009b      	lsls	r3, r3, #2
 8010518:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	4413      	add	r3, r2
 8010520:	3304      	adds	r3, #4
 8010522:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	2200      	movs	r2, #0
 8010528:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	2202      	movs	r2, #2
 801052e:	4619      	mov	r1, r3
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 fc61 	bl	8010df8 <USBD_CtlSendData>
              break;
 8010536:	e06a      	b.n	801060e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801053c:	2b00      	cmp	r3, #0
 801053e:	da11      	bge.n	8010564 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010540:	7bbb      	ldrb	r3, [r7, #14]
 8010542:	f003 020f 	and.w	r2, r3, #15
 8010546:	6879      	ldr	r1, [r7, #4]
 8010548:	4613      	mov	r3, r2
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	4413      	add	r3, r2
 801054e:	009b      	lsls	r3, r3, #2
 8010550:	440b      	add	r3, r1
 8010552:	3324      	adds	r3, #36	@ 0x24
 8010554:	881b      	ldrh	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d117      	bne.n	801058a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801055a:	6839      	ldr	r1, [r7, #0]
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 fbda 	bl	8010d16 <USBD_CtlError>
                  break;
 8010562:	e054      	b.n	801060e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010564:	7bbb      	ldrb	r3, [r7, #14]
 8010566:	f003 020f 	and.w	r2, r3, #15
 801056a:	6879      	ldr	r1, [r7, #4]
 801056c:	4613      	mov	r3, r2
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	4413      	add	r3, r2
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	440b      	add	r3, r1
 8010576:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801057a:	881b      	ldrh	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d104      	bne.n	801058a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010580:	6839      	ldr	r1, [r7, #0]
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 fbc7 	bl	8010d16 <USBD_CtlError>
                  break;
 8010588:	e041      	b.n	801060e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801058a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801058e:	2b00      	cmp	r3, #0
 8010590:	da0b      	bge.n	80105aa <USBD_StdEPReq+0x2b2>
 8010592:	7bbb      	ldrb	r3, [r7, #14]
 8010594:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010598:	4613      	mov	r3, r2
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	4413      	add	r3, r2
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	3310      	adds	r3, #16
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	4413      	add	r3, r2
 80105a6:	3304      	adds	r3, #4
 80105a8:	e00b      	b.n	80105c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80105aa:	7bbb      	ldrb	r3, [r7, #14]
 80105ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80105b0:	4613      	mov	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	4413      	add	r3, r2
 80105b6:	009b      	lsls	r3, r3, #2
 80105b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	4413      	add	r3, r2
 80105c0:	3304      	adds	r3, #4
 80105c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80105c4:	7bbb      	ldrb	r3, [r7, #14]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <USBD_StdEPReq+0x2d8>
 80105ca:	7bbb      	ldrb	r3, [r7, #14]
 80105cc:	2b80      	cmp	r3, #128	@ 0x80
 80105ce:	d103      	bne.n	80105d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	2200      	movs	r2, #0
 80105d4:	601a      	str	r2, [r3, #0]
 80105d6:	e00e      	b.n	80105f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80105d8:	7bbb      	ldrb	r3, [r7, #14]
 80105da:	4619      	mov	r1, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f001 fca9 	bl	8011f34 <USBD_LL_IsStallEP>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d003      	beq.n	80105f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	2201      	movs	r2, #1
 80105ec:	601a      	str	r2, [r3, #0]
 80105ee:	e002      	b.n	80105f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	2200      	movs	r2, #0
 80105f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	2202      	movs	r2, #2
 80105fa:	4619      	mov	r1, r3
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f000 fbfb 	bl	8010df8 <USBD_CtlSendData>
              break;
 8010602:	e004      	b.n	801060e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010604:	6839      	ldr	r1, [r7, #0]
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 fb85 	bl	8010d16 <USBD_CtlError>
              break;
 801060c:	bf00      	nop
          }
          break;
 801060e:	e004      	b.n	801061a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010610:	6839      	ldr	r1, [r7, #0]
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 fb7f 	bl	8010d16 <USBD_CtlError>
          break;
 8010618:	bf00      	nop
      }
      break;
 801061a:	e005      	b.n	8010628 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801061c:	6839      	ldr	r1, [r7, #0]
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f000 fb79 	bl	8010d16 <USBD_CtlError>
      break;
 8010624:	e000      	b.n	8010628 <USBD_StdEPReq+0x330>
      break;
 8010626:	bf00      	nop
  }

  return ret;
 8010628:	7bfb      	ldrb	r3, [r7, #15]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3710      	adds	r7, #16
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
	...

08010634 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801063e:	2300      	movs	r3, #0
 8010640:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010642:	2300      	movs	r3, #0
 8010644:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010646:	2300      	movs	r3, #0
 8010648:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	885b      	ldrh	r3, [r3, #2]
 801064e:	0a1b      	lsrs	r3, r3, #8
 8010650:	b29b      	uxth	r3, r3
 8010652:	3b01      	subs	r3, #1
 8010654:	2b0e      	cmp	r3, #14
 8010656:	f200 8152 	bhi.w	80108fe <USBD_GetDescriptor+0x2ca>
 801065a:	a201      	add	r2, pc, #4	@ (adr r2, 8010660 <USBD_GetDescriptor+0x2c>)
 801065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010660:	080106d1 	.word	0x080106d1
 8010664:	080106e9 	.word	0x080106e9
 8010668:	08010729 	.word	0x08010729
 801066c:	080108ff 	.word	0x080108ff
 8010670:	080108ff 	.word	0x080108ff
 8010674:	0801089f 	.word	0x0801089f
 8010678:	080108cb 	.word	0x080108cb
 801067c:	080108ff 	.word	0x080108ff
 8010680:	080108ff 	.word	0x080108ff
 8010684:	080108ff 	.word	0x080108ff
 8010688:	080108ff 	.word	0x080108ff
 801068c:	080108ff 	.word	0x080108ff
 8010690:	080108ff 	.word	0x080108ff
 8010694:	080108ff 	.word	0x080108ff
 8010698:	0801069d 	.word	0x0801069d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106a2:	69db      	ldr	r3, [r3, #28]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d00b      	beq.n	80106c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106ae:	69db      	ldr	r3, [r3, #28]
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	7c12      	ldrb	r2, [r2, #16]
 80106b4:	f107 0108 	add.w	r1, r7, #8
 80106b8:	4610      	mov	r0, r2
 80106ba:	4798      	blx	r3
 80106bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106be:	e126      	b.n	801090e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80106c0:	6839      	ldr	r1, [r7, #0]
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 fb27 	bl	8010d16 <USBD_CtlError>
        err++;
 80106c8:	7afb      	ldrb	r3, [r7, #11]
 80106ca:	3301      	adds	r3, #1
 80106cc:	72fb      	strb	r3, [r7, #11]
      break;
 80106ce:	e11e      	b.n	801090e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	7c12      	ldrb	r2, [r2, #16]
 80106dc:	f107 0108 	add.w	r1, r7, #8
 80106e0:	4610      	mov	r0, r2
 80106e2:	4798      	blx	r3
 80106e4:	60f8      	str	r0, [r7, #12]
      break;
 80106e6:	e112      	b.n	801090e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	7c1b      	ldrb	r3, [r3, #16]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d10d      	bne.n	801070c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106f8:	f107 0208 	add.w	r2, r7, #8
 80106fc:	4610      	mov	r0, r2
 80106fe:	4798      	blx	r3
 8010700:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	3301      	adds	r3, #1
 8010706:	2202      	movs	r2, #2
 8010708:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801070a:	e100      	b.n	801090e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010714:	f107 0208 	add.w	r2, r7, #8
 8010718:	4610      	mov	r0, r2
 801071a:	4798      	blx	r3
 801071c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	3301      	adds	r3, #1
 8010722:	2202      	movs	r2, #2
 8010724:	701a      	strb	r2, [r3, #0]
      break;
 8010726:	e0f2      	b.n	801090e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	885b      	ldrh	r3, [r3, #2]
 801072c:	b2db      	uxtb	r3, r3
 801072e:	2b05      	cmp	r3, #5
 8010730:	f200 80ac 	bhi.w	801088c <USBD_GetDescriptor+0x258>
 8010734:	a201      	add	r2, pc, #4	@ (adr r2, 801073c <USBD_GetDescriptor+0x108>)
 8010736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801073a:	bf00      	nop
 801073c:	08010755 	.word	0x08010755
 8010740:	08010789 	.word	0x08010789
 8010744:	080107bd 	.word	0x080107bd
 8010748:	080107f1 	.word	0x080107f1
 801074c:	08010825 	.word	0x08010825
 8010750:	08010859 	.word	0x08010859
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d00b      	beq.n	8010778 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	7c12      	ldrb	r2, [r2, #16]
 801076c:	f107 0108 	add.w	r1, r7, #8
 8010770:	4610      	mov	r0, r2
 8010772:	4798      	blx	r3
 8010774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010776:	e091      	b.n	801089c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010778:	6839      	ldr	r1, [r7, #0]
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f000 facb 	bl	8010d16 <USBD_CtlError>
            err++;
 8010780:	7afb      	ldrb	r3, [r7, #11]
 8010782:	3301      	adds	r3, #1
 8010784:	72fb      	strb	r3, [r7, #11]
          break;
 8010786:	e089      	b.n	801089c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801078e:	689b      	ldr	r3, [r3, #8]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d00b      	beq.n	80107ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801079a:	689b      	ldr	r3, [r3, #8]
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	7c12      	ldrb	r2, [r2, #16]
 80107a0:	f107 0108 	add.w	r1, r7, #8
 80107a4:	4610      	mov	r0, r2
 80107a6:	4798      	blx	r3
 80107a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80107aa:	e077      	b.n	801089c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80107ac:	6839      	ldr	r1, [r7, #0]
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f000 fab1 	bl	8010d16 <USBD_CtlError>
            err++;
 80107b4:	7afb      	ldrb	r3, [r7, #11]
 80107b6:	3301      	adds	r3, #1
 80107b8:	72fb      	strb	r3, [r7, #11]
          break;
 80107ba:	e06f      	b.n	801089c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d00b      	beq.n	80107e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	7c12      	ldrb	r2, [r2, #16]
 80107d4:	f107 0108 	add.w	r1, r7, #8
 80107d8:	4610      	mov	r0, r2
 80107da:	4798      	blx	r3
 80107dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80107de:	e05d      	b.n	801089c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80107e0:	6839      	ldr	r1, [r7, #0]
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fa97 	bl	8010d16 <USBD_CtlError>
            err++;
 80107e8:	7afb      	ldrb	r3, [r7, #11]
 80107ea:	3301      	adds	r3, #1
 80107ec:	72fb      	strb	r3, [r7, #11]
          break;
 80107ee:	e055      	b.n	801089c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107f6:	691b      	ldr	r3, [r3, #16]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d00b      	beq.n	8010814 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010802:	691b      	ldr	r3, [r3, #16]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	7c12      	ldrb	r2, [r2, #16]
 8010808:	f107 0108 	add.w	r1, r7, #8
 801080c:	4610      	mov	r0, r2
 801080e:	4798      	blx	r3
 8010810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010812:	e043      	b.n	801089c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010814:	6839      	ldr	r1, [r7, #0]
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 fa7d 	bl	8010d16 <USBD_CtlError>
            err++;
 801081c:	7afb      	ldrb	r3, [r7, #11]
 801081e:	3301      	adds	r3, #1
 8010820:	72fb      	strb	r3, [r7, #11]
          break;
 8010822:	e03b      	b.n	801089c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801082a:	695b      	ldr	r3, [r3, #20]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d00b      	beq.n	8010848 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010836:	695b      	ldr	r3, [r3, #20]
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	7c12      	ldrb	r2, [r2, #16]
 801083c:	f107 0108 	add.w	r1, r7, #8
 8010840:	4610      	mov	r0, r2
 8010842:	4798      	blx	r3
 8010844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010846:	e029      	b.n	801089c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010848:	6839      	ldr	r1, [r7, #0]
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 fa63 	bl	8010d16 <USBD_CtlError>
            err++;
 8010850:	7afb      	ldrb	r3, [r7, #11]
 8010852:	3301      	adds	r3, #1
 8010854:	72fb      	strb	r3, [r7, #11]
          break;
 8010856:	e021      	b.n	801089c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801085e:	699b      	ldr	r3, [r3, #24]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00b      	beq.n	801087c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801086a:	699b      	ldr	r3, [r3, #24]
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	7c12      	ldrb	r2, [r2, #16]
 8010870:	f107 0108 	add.w	r1, r7, #8
 8010874:	4610      	mov	r0, r2
 8010876:	4798      	blx	r3
 8010878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801087a:	e00f      	b.n	801089c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801087c:	6839      	ldr	r1, [r7, #0]
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f000 fa49 	bl	8010d16 <USBD_CtlError>
            err++;
 8010884:	7afb      	ldrb	r3, [r7, #11]
 8010886:	3301      	adds	r3, #1
 8010888:	72fb      	strb	r3, [r7, #11]
          break;
 801088a:	e007      	b.n	801089c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801088c:	6839      	ldr	r1, [r7, #0]
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 fa41 	bl	8010d16 <USBD_CtlError>
          err++;
 8010894:	7afb      	ldrb	r3, [r7, #11]
 8010896:	3301      	adds	r3, #1
 8010898:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801089a:	bf00      	nop
      }
      break;
 801089c:	e037      	b.n	801090e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	7c1b      	ldrb	r3, [r3, #16]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d109      	bne.n	80108ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108ae:	f107 0208 	add.w	r2, r7, #8
 80108b2:	4610      	mov	r0, r2
 80108b4:	4798      	blx	r3
 80108b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80108b8:	e029      	b.n	801090e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80108ba:	6839      	ldr	r1, [r7, #0]
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f000 fa2a 	bl	8010d16 <USBD_CtlError>
        err++;
 80108c2:	7afb      	ldrb	r3, [r7, #11]
 80108c4:	3301      	adds	r3, #1
 80108c6:	72fb      	strb	r3, [r7, #11]
      break;
 80108c8:	e021      	b.n	801090e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	7c1b      	ldrb	r3, [r3, #16]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d10d      	bne.n	80108ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108da:	f107 0208 	add.w	r2, r7, #8
 80108de:	4610      	mov	r0, r2
 80108e0:	4798      	blx	r3
 80108e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	3301      	adds	r3, #1
 80108e8:	2207      	movs	r2, #7
 80108ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80108ec:	e00f      	b.n	801090e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80108ee:	6839      	ldr	r1, [r7, #0]
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f000 fa10 	bl	8010d16 <USBD_CtlError>
        err++;
 80108f6:	7afb      	ldrb	r3, [r7, #11]
 80108f8:	3301      	adds	r3, #1
 80108fa:	72fb      	strb	r3, [r7, #11]
      break;
 80108fc:	e007      	b.n	801090e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80108fe:	6839      	ldr	r1, [r7, #0]
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 fa08 	bl	8010d16 <USBD_CtlError>
      err++;
 8010906:	7afb      	ldrb	r3, [r7, #11]
 8010908:	3301      	adds	r3, #1
 801090a:	72fb      	strb	r3, [r7, #11]
      break;
 801090c:	bf00      	nop
  }

  if (err != 0U)
 801090e:	7afb      	ldrb	r3, [r7, #11]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d11e      	bne.n	8010952 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	88db      	ldrh	r3, [r3, #6]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d016      	beq.n	801094a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801091c:	893b      	ldrh	r3, [r7, #8]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d00e      	beq.n	8010940 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	88da      	ldrh	r2, [r3, #6]
 8010926:	893b      	ldrh	r3, [r7, #8]
 8010928:	4293      	cmp	r3, r2
 801092a:	bf28      	it	cs
 801092c:	4613      	movcs	r3, r2
 801092e:	b29b      	uxth	r3, r3
 8010930:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010932:	893b      	ldrh	r3, [r7, #8]
 8010934:	461a      	mov	r2, r3
 8010936:	68f9      	ldr	r1, [r7, #12]
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 fa5d 	bl	8010df8 <USBD_CtlSendData>
 801093e:	e009      	b.n	8010954 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010940:	6839      	ldr	r1, [r7, #0]
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f000 f9e7 	bl	8010d16 <USBD_CtlError>
 8010948:	e004      	b.n	8010954 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f000 faae 	bl	8010eac <USBD_CtlSendStatus>
 8010950:	e000      	b.n	8010954 <USBD_GetDescriptor+0x320>
    return;
 8010952:	bf00      	nop
  }
}
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop

0801095c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	889b      	ldrh	r3, [r3, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d131      	bne.n	80109d2 <USBD_SetAddress+0x76>
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	88db      	ldrh	r3, [r3, #6]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d12d      	bne.n	80109d2 <USBD_SetAddress+0x76>
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	885b      	ldrh	r3, [r3, #2]
 801097a:	2b7f      	cmp	r3, #127	@ 0x7f
 801097c:	d829      	bhi.n	80109d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	885b      	ldrh	r3, [r3, #2]
 8010982:	b2db      	uxtb	r3, r3
 8010984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010988:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010990:	b2db      	uxtb	r3, r3
 8010992:	2b03      	cmp	r3, #3
 8010994:	d104      	bne.n	80109a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010996:	6839      	ldr	r1, [r7, #0]
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f9bc 	bl	8010d16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801099e:	e01d      	b.n	80109dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	7bfa      	ldrb	r2, [r7, #15]
 80109a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80109a8:	7bfb      	ldrb	r3, [r7, #15]
 80109aa:	4619      	mov	r1, r3
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f001 faed 	bl	8011f8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f000 fa7a 	bl	8010eac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d004      	beq.n	80109c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2202      	movs	r2, #2
 80109c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109c6:	e009      	b.n	80109dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2201      	movs	r2, #1
 80109cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109d0:	e004      	b.n	80109dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80109d2:	6839      	ldr	r1, [r7, #0]
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f000 f99e 	bl	8010d16 <USBD_CtlError>
  }
}
 80109da:	bf00      	nop
 80109dc:	bf00      	nop
 80109de:	3710      	adds	r7, #16
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80109ee:	2300      	movs	r3, #0
 80109f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	885b      	ldrh	r3, [r3, #2]
 80109f6:	b2da      	uxtb	r2, r3
 80109f8:	4b4e      	ldr	r3, [pc, #312]	@ (8010b34 <USBD_SetConfig+0x150>)
 80109fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80109fc:	4b4d      	ldr	r3, [pc, #308]	@ (8010b34 <USBD_SetConfig+0x150>)
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d905      	bls.n	8010a10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010a04:	6839      	ldr	r1, [r7, #0]
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 f985 	bl	8010d16 <USBD_CtlError>
    return USBD_FAIL;
 8010a0c:	2303      	movs	r3, #3
 8010a0e:	e08c      	b.n	8010b2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	2b02      	cmp	r3, #2
 8010a1a:	d002      	beq.n	8010a22 <USBD_SetConfig+0x3e>
 8010a1c:	2b03      	cmp	r3, #3
 8010a1e:	d029      	beq.n	8010a74 <USBD_SetConfig+0x90>
 8010a20:	e075      	b.n	8010b0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010a22:	4b44      	ldr	r3, [pc, #272]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d020      	beq.n	8010a6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010a2a:	4b42      	ldr	r3, [pc, #264]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	461a      	mov	r2, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010a34:	4b3f      	ldr	r3, [pc, #252]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f7fe ffb9 	bl	800f9b2 <USBD_SetClassConfig>
 8010a40:	4603      	mov	r3, r0
 8010a42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010a44:	7bfb      	ldrb	r3, [r7, #15]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d008      	beq.n	8010a5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010a4a:	6839      	ldr	r1, [r7, #0]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f000 f962 	bl	8010d16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2202      	movs	r2, #2
 8010a56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010a5a:	e065      	b.n	8010b28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 fa25 	bl	8010eac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2203      	movs	r2, #3
 8010a66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010a6a:	e05d      	b.n	8010b28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f000 fa1d 	bl	8010eac <USBD_CtlSendStatus>
      break;
 8010a72:	e059      	b.n	8010b28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010a74:	4b2f      	ldr	r3, [pc, #188]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d112      	bne.n	8010aa2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2202      	movs	r2, #2
 8010a80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010a84:	4b2b      	ldr	r3, [pc, #172]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	461a      	mov	r2, r3
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010a8e:	4b29      	ldr	r3, [pc, #164]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	4619      	mov	r1, r3
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f7fe ffa8 	bl	800f9ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 fa06 	bl	8010eac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010aa0:	e042      	b.n	8010b28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010aa2:	4b24      	ldr	r3, [pc, #144]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	685b      	ldr	r3, [r3, #4]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d02a      	beq.n	8010b06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7fe ff96 	bl	800f9ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010abe:	4b1d      	ldr	r3, [pc, #116]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	4619      	mov	r1, r3
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f7fe ff6f 	bl	800f9b2 <USBD_SetClassConfig>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010ad8:	7bfb      	ldrb	r3, [r7, #15]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d00f      	beq.n	8010afe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010ade:	6839      	ldr	r1, [r7, #0]
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f000 f918 	bl	8010d16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	4619      	mov	r1, r3
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7fe ff7b 	bl	800f9ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2202      	movs	r2, #2
 8010af8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010afc:	e014      	b.n	8010b28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 f9d4 	bl	8010eac <USBD_CtlSendStatus>
      break;
 8010b04:	e010      	b.n	8010b28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 f9d0 	bl	8010eac <USBD_CtlSendStatus>
      break;
 8010b0c:	e00c      	b.n	8010b28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010b0e:	6839      	ldr	r1, [r7, #0]
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f000 f900 	bl	8010d16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010b16:	4b07      	ldr	r3, [pc, #28]	@ (8010b34 <USBD_SetConfig+0x150>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f7fe ff64 	bl	800f9ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010b22:	2303      	movs	r3, #3
 8010b24:	73fb      	strb	r3, [r7, #15]
      break;
 8010b26:	bf00      	nop
  }

  return ret;
 8010b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3710      	adds	r7, #16
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	240006a8 	.word	0x240006a8

08010b38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	88db      	ldrh	r3, [r3, #6]
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d004      	beq.n	8010b54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010b4a:	6839      	ldr	r1, [r7, #0]
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 f8e2 	bl	8010d16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010b52:	e023      	b.n	8010b9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	dc02      	bgt.n	8010b66 <USBD_GetConfig+0x2e>
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	dc03      	bgt.n	8010b6c <USBD_GetConfig+0x34>
 8010b64:	e015      	b.n	8010b92 <USBD_GetConfig+0x5a>
 8010b66:	2b03      	cmp	r3, #3
 8010b68:	d00b      	beq.n	8010b82 <USBD_GetConfig+0x4a>
 8010b6a:	e012      	b.n	8010b92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	3308      	adds	r3, #8
 8010b76:	2201      	movs	r2, #1
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f000 f93c 	bl	8010df8 <USBD_CtlSendData>
        break;
 8010b80:	e00c      	b.n	8010b9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	3304      	adds	r3, #4
 8010b86:	2201      	movs	r2, #1
 8010b88:	4619      	mov	r1, r3
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f934 	bl	8010df8 <USBD_CtlSendData>
        break;
 8010b90:	e004      	b.n	8010b9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 f8be 	bl	8010d16 <USBD_CtlError>
        break;
 8010b9a:	bf00      	nop
}
 8010b9c:	bf00      	nop
 8010b9e:	3708      	adds	r7, #8
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	3b01      	subs	r3, #1
 8010bb8:	2b02      	cmp	r3, #2
 8010bba:	d81e      	bhi.n	8010bfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	88db      	ldrh	r3, [r3, #6]
 8010bc0:	2b02      	cmp	r3, #2
 8010bc2:	d004      	beq.n	8010bce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010bc4:	6839      	ldr	r1, [r7, #0]
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f000 f8a5 	bl	8010d16 <USBD_CtlError>
        break;
 8010bcc:	e01a      	b.n	8010c04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d005      	beq.n	8010bea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	68db      	ldr	r3, [r3, #12]
 8010be2:	f043 0202 	orr.w	r2, r3, #2
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	330c      	adds	r3, #12
 8010bee:	2202      	movs	r2, #2
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 f900 	bl	8010df8 <USBD_CtlSendData>
      break;
 8010bf8:	e004      	b.n	8010c04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010bfa:	6839      	ldr	r1, [r7, #0]
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f000 f88a 	bl	8010d16 <USBD_CtlError>
      break;
 8010c02:	bf00      	nop
  }
}
 8010c04:	bf00      	nop
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	885b      	ldrh	r3, [r3, #2]
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d107      	bne.n	8010c2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2201      	movs	r2, #1
 8010c22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f000 f940 	bl	8010eac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010c2c:	e013      	b.n	8010c56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	885b      	ldrh	r3, [r3, #2]
 8010c32:	2b02      	cmp	r3, #2
 8010c34:	d10b      	bne.n	8010c4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	889b      	ldrh	r3, [r3, #4]
 8010c3a:	0a1b      	lsrs	r3, r3, #8
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	b2da      	uxtb	r2, r3
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 f930 	bl	8010eac <USBD_CtlSendStatus>
}
 8010c4c:	e003      	b.n	8010c56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010c4e:	6839      	ldr	r1, [r7, #0]
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f000 f860 	bl	8010d16 <USBD_CtlError>
}
 8010c56:	bf00      	nop
 8010c58:	3708      	adds	r7, #8
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b082      	sub	sp, #8
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
 8010c66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	3b01      	subs	r3, #1
 8010c72:	2b02      	cmp	r3, #2
 8010c74:	d80b      	bhi.n	8010c8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	885b      	ldrh	r3, [r3, #2]
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d10c      	bne.n	8010c98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2200      	movs	r2, #0
 8010c82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 f910 	bl	8010eac <USBD_CtlSendStatus>
      }
      break;
 8010c8c:	e004      	b.n	8010c98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010c8e:	6839      	ldr	r1, [r7, #0]
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 f840 	bl	8010d16 <USBD_CtlError>
      break;
 8010c96:	e000      	b.n	8010c9a <USBD_ClrFeature+0x3c>
      break;
 8010c98:	bf00      	nop
  }
}
 8010c9a:	bf00      	nop
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b084      	sub	sp, #16
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
 8010caa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	781a      	ldrb	r2, [r3, #0]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	781a      	ldrb	r2, [r3, #0]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f7ff fa16 	bl	80100fe <SWAPBYTE>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010ce6:	68f8      	ldr	r0, [r7, #12]
 8010ce8:	f7ff fa09 	bl	80100fe <SWAPBYTE>
 8010cec:	4603      	mov	r3, r0
 8010cee:	461a      	mov	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	3301      	adds	r3, #1
 8010cfe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f7ff f9fc 	bl	80100fe <SWAPBYTE>
 8010d06:	4603      	mov	r3, r0
 8010d08:	461a      	mov	r2, r3
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	80da      	strh	r2, [r3, #6]
}
 8010d0e:	bf00      	nop
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}

08010d16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d16:	b580      	push	{r7, lr}
 8010d18:	b082      	sub	sp, #8
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
 8010d1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d20:	2180      	movs	r1, #128	@ 0x80
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f001 f8c8 	bl	8011eb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010d28:	2100      	movs	r1, #0
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f001 f8c4 	bl	8011eb8 <USBD_LL_StallEP>
}
 8010d30:	bf00      	nop
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b086      	sub	sp, #24
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	60b9      	str	r1, [r7, #8]
 8010d42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010d44:	2300      	movs	r3, #0
 8010d46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d036      	beq.n	8010dbc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010d52:	6938      	ldr	r0, [r7, #16]
 8010d54:	f000 f836 	bl	8010dc4 <USBD_GetLen>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	005b      	lsls	r3, r3, #1
 8010d60:	b29a      	uxth	r2, r3
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010d66:	7dfb      	ldrb	r3, [r7, #23]
 8010d68:	68ba      	ldr	r2, [r7, #8]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	7812      	ldrb	r2, [r2, #0]
 8010d70:	701a      	strb	r2, [r3, #0]
  idx++;
 8010d72:	7dfb      	ldrb	r3, [r7, #23]
 8010d74:	3301      	adds	r3, #1
 8010d76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010d78:	7dfb      	ldrb	r3, [r7, #23]
 8010d7a:	68ba      	ldr	r2, [r7, #8]
 8010d7c:	4413      	add	r3, r2
 8010d7e:	2203      	movs	r2, #3
 8010d80:	701a      	strb	r2, [r3, #0]
  idx++;
 8010d82:	7dfb      	ldrb	r3, [r7, #23]
 8010d84:	3301      	adds	r3, #1
 8010d86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010d88:	e013      	b.n	8010db2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010d8a:	7dfb      	ldrb	r3, [r7, #23]
 8010d8c:	68ba      	ldr	r2, [r7, #8]
 8010d8e:	4413      	add	r3, r2
 8010d90:	693a      	ldr	r2, [r7, #16]
 8010d92:	7812      	ldrb	r2, [r2, #0]
 8010d94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	3301      	adds	r3, #1
 8010d9a:	613b      	str	r3, [r7, #16]
    idx++;
 8010d9c:	7dfb      	ldrb	r3, [r7, #23]
 8010d9e:	3301      	adds	r3, #1
 8010da0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010da2:	7dfb      	ldrb	r3, [r7, #23]
 8010da4:	68ba      	ldr	r2, [r7, #8]
 8010da6:	4413      	add	r3, r2
 8010da8:	2200      	movs	r2, #0
 8010daa:	701a      	strb	r2, [r3, #0]
    idx++;
 8010dac:	7dfb      	ldrb	r3, [r7, #23]
 8010dae:	3301      	adds	r3, #1
 8010db0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d1e7      	bne.n	8010d8a <USBD_GetString+0x52>
 8010dba:	e000      	b.n	8010dbe <USBD_GetString+0x86>
    return;
 8010dbc:	bf00      	nop
  }
}
 8010dbe:	3718      	adds	r7, #24
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010dd4:	e005      	b.n	8010de2 <USBD_GetLen+0x1e>
  {
    len++;
 8010dd6:	7bfb      	ldrb	r3, [r7, #15]
 8010dd8:	3301      	adds	r3, #1
 8010dda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	3301      	adds	r3, #1
 8010de0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d1f5      	bne.n	8010dd6 <USBD_GetLen+0x12>
  }

  return len;
 8010dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3714      	adds	r7, #20
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	60b9      	str	r1, [r7, #8]
 8010e02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2202      	movs	r2, #2
 8010e08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	68ba      	ldr	r2, [r7, #8]
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	68f8      	ldr	r0, [r7, #12]
 8010e20:	f001 f8d3 	bl	8011fca <USBD_LL_Transmit>

  return USBD_OK;
 8010e24:	2300      	movs	r3, #0
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}

08010e2e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010e2e:	b580      	push	{r7, lr}
 8010e30:	b084      	sub	sp, #16
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	60f8      	str	r0, [r7, #12]
 8010e36:	60b9      	str	r1, [r7, #8]
 8010e38:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	68ba      	ldr	r2, [r7, #8]
 8010e3e:	2100      	movs	r1, #0
 8010e40:	68f8      	ldr	r0, [r7, #12]
 8010e42:	f001 f8c2 	bl	8011fca <USBD_LL_Transmit>

  return USBD_OK;
 8010e46:	2300      	movs	r3, #0
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2203      	movs	r2, #3
 8010e60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	68ba      	ldr	r2, [r7, #8]
 8010e78:	2100      	movs	r1, #0
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f001 f8c6 	bl	801200c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3710      	adds	r7, #16
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b084      	sub	sp, #16
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	60f8      	str	r0, [r7, #12]
 8010e92:	60b9      	str	r1, [r7, #8]
 8010e94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	68ba      	ldr	r2, [r7, #8]
 8010e9a:	2100      	movs	r1, #0
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f001 f8b5 	bl	801200c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ea2:	2300      	movs	r3, #0
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3710      	adds	r7, #16
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2204      	movs	r2, #4
 8010eb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f001 f881 	bl	8011fca <USBD_LL_Transmit>

  return USBD_OK;
 8010ec8:	2300      	movs	r3, #0
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3708      	adds	r7, #8
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}

08010ed2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2205      	movs	r2, #5
 8010ede:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	2100      	movs	r1, #0
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f001 f88f 	bl	801200c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c: I2C句柄
 * @param  error: 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b088      	sub	sp, #32
 8010efc:	af04      	add	r7, sp, #16
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	460b      	mov	r3, r1
 8010f02:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 8010f04:	2300      	movs	r3, #0
 8010f06:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 8010f0c:	2364      	movs	r3, #100	@ 0x64
 8010f0e:	9302      	str	r3, [sp, #8]
 8010f10:	2302      	movs	r3, #2
 8010f12:	9301      	str	r3, [sp, #4]
 8010f14:	f107 030c 	add.w	r3, r7, #12
 8010f18:	9300      	str	r3, [sp, #0]
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	2181      	movs	r1, #129	@ 0x81
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7f5 f987 	bl	8006234 <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 8010f26:	23f4      	movs	r3, #244	@ 0xf4
 8010f28:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 8010f2a:	2393      	movs	r3, #147	@ 0x93
 8010f2c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 8010f2e:	2364      	movs	r3, #100	@ 0x64
 8010f30:	9302      	str	r3, [sp, #8]
 8010f32:	2302      	movs	r3, #2
 8010f34:	9301      	str	r3, [sp, #4]
 8010f36:	f107 030c 	add.w	r3, r7, #12
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	2201      	movs	r2, #1
 8010f40:	2181      	movs	r1, #129	@ 0x81
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f7f5 f976 	bl	8006234 <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 8010f48:	230f      	movs	r3, #15
 8010f4a:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 8010f4c:	78fb      	ldrb	r3, [r7, #3]
 8010f4e:	3b60      	subs	r3, #96	@ 0x60
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 8010f54:	2364      	movs	r3, #100	@ 0x64
 8010f56:	9302      	str	r3, [sp, #8]
 8010f58:	2302      	movs	r3, #2
 8010f5a:	9301      	str	r3, [sp, #4]
 8010f5c:	f107 030c 	add.w	r3, r7, #12
 8010f60:	9300      	str	r3, [sp, #0]
 8010f62:	2301      	movs	r3, #1
 8010f64:	2202      	movs	r2, #2
 8010f66:	2181      	movs	r1, #129	@ 0x81
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7f5 f963 	bl	8006234 <HAL_I2C_Mem_Write>
}
 8010f6e:	bf00      	nop
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
	...

08010f78 <OLED_WR_Byte>:
//[7]0 1 2 3 ... 127
// 向SSD1306写入一个字节
// dat:要写入的数据/命令
// cmd:数据/命令标志 0，表示命令；1，表示数据
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	4603      	mov	r3, r0
 8010f80:	460a      	mov	r2, r1
 8010f82:	71fb      	strb	r3, [r7, #7]
 8010f84:	4613      	mov	r3, r2
 8010f86:	71bb      	strb	r3, [r7, #6]
	if (cmd)
 8010f88:	79bb      	ldrb	r3, [r7, #6]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d005      	beq.n	8010f9a <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set(); // 命令/数据标志位置为1，则表示传送的是命令字节
 8010f8e:	2201      	movs	r2, #1
 8010f90:	2140      	movs	r1, #64	@ 0x40
 8010f92:	4811      	ldr	r0, [pc, #68]	@ (8010fd8 <OLED_WR_Byte+0x60>)
 8010f94:	f7f5 f8a4 	bl	80060e0 <HAL_GPIO_WritePin>
 8010f98:	e004      	b.n	8010fa4 <OLED_WR_Byte+0x2c>
	}
	else
		OLED_DC_Clr();						 // 命令/数据标志位置为0，则表示传送的是数据字节
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	2140      	movs	r1, #64	@ 0x40
 8010f9e:	480e      	ldr	r0, [pc, #56]	@ (8010fd8 <OLED_WR_Byte+0x60>)
 8010fa0:	f7f5 f89e 	bl	80060e0 <HAL_GPIO_WritePin>
	OLED_CS_Clr();							 // 片选信号为低，表示选中OLED
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	2102      	movs	r1, #2
 8010fa8:	480c      	ldr	r0, [pc, #48]	@ (8010fdc <OLED_WR_Byte+0x64>)
 8010faa:	f7f5 f899 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000); // oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 8010fae:	1df9      	adds	r1, r7, #7
 8010fb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	480a      	ldr	r0, [pc, #40]	@ (8010fe0 <OLED_WR_Byte+0x68>)
 8010fb8:	f7fa fe82 	bl	800bcc0 <HAL_SPI_Transmit>
	OLED_CS_Set();
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	2102      	movs	r1, #2
 8010fc0:	4806      	ldr	r0, [pc, #24]	@ (8010fdc <OLED_WR_Byte+0x64>)
 8010fc2:	f7f5 f88d 	bl	80060e0 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	2140      	movs	r1, #64	@ 0x40
 8010fca:	4803      	ldr	r0, [pc, #12]	@ (8010fd8 <OLED_WR_Byte+0x60>)
 8010fcc:	f7f5 f888 	bl	80060e0 <HAL_GPIO_WritePin>
}
 8010fd0:	bf00      	nop
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	58022000 	.word	0x58022000
 8010fdc:	58020400 	.word	0x58020400
 8010fe0:	24000534 	.word	0x24000534

08010fe4 <OLED_Clear>:
	OLED_WR_Byte(0X10, OLED_CMD); // 关闭电荷泵
	OLED_WR_Byte(0XAE, OLED_CMD); // DISPLAY OFF
}
// 清屏函数，清完后整个屏幕都是黑色的，没有一点光亮
void OLED_Clear(void)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010fea:	2300      	movs	r3, #0
 8010fec:	71fb      	strb	r3, [r7, #7]
 8010fee:	e01f      	b.n	8011030 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置页地址
 8010ff0:	79fb      	ldrb	r3, [r7, #7]
 8010ff2:	3b50      	subs	r3, #80	@ 0x50
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7ff ffbd 	bl	8010f78 <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);	  // 设置起始列低地址
 8010ffe:	2100      	movs	r1, #0
 8011000:	2002      	movs	r0, #2
 8011002:	f7ff ffb9 	bl	8010f78 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置起始列高地址
 8011006:	2100      	movs	r1, #0
 8011008:	2010      	movs	r0, #16
 801100a:	f7ff ffb5 	bl	8010f78 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 801100e:	2300      	movs	r3, #0
 8011010:	71bb      	strb	r3, [r7, #6]
 8011012:	e006      	b.n	8011022 <OLED_Clear+0x3e>
			OLED_WR_Byte(0, OLED_DATA);
 8011014:	2101      	movs	r1, #1
 8011016:	2000      	movs	r0, #0
 8011018:	f7ff ffae 	bl	8010f78 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 801101c:	79bb      	ldrb	r3, [r7, #6]
 801101e:	3301      	adds	r3, #1
 8011020:	71bb      	strb	r3, [r7, #6]
 8011022:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011026:	2b00      	cmp	r3, #0
 8011028:	daf4      	bge.n	8011014 <OLED_Clear+0x30>
	for (i = 0; i < 8; i++)
 801102a:	79fb      	ldrb	r3, [r7, #7]
 801102c:	3301      	adds	r3, #1
 801102e:	71fb      	strb	r3, [r7, #7]
 8011030:	79fb      	ldrb	r3, [r7, #7]
 8011032:	2b07      	cmp	r3, #7
 8011034:	d9dc      	bls.n	8010ff0 <OLED_Clear+0xc>
	} // 更新显示
}
 8011036:	bf00      	nop
 8011038:	bf00      	nop
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <OLED_Init>:
	}
}

// 初始化SSD1306
void OLED_Init(void)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	af00      	add	r7, sp, #0
	// 复位OLED
	OLED_RST_Clr(); // 拉低复位引脚
 8011044:	2200      	movs	r2, #0
 8011046:	2120      	movs	r1, #32
 8011048:	4841      	ldr	r0, [pc, #260]	@ (8011150 <OLED_Init+0x110>)
 801104a:	f7f5 f849 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_Delay(200); // 延时200毫秒
 801104e:	20c8      	movs	r0, #200	@ 0xc8
 8011050:	f7f0 fde4 	bl	8001c1c <HAL_Delay>
	OLED_RST_Set(); // 拉高复位引脚
 8011054:	2201      	movs	r2, #1
 8011056:	2120      	movs	r1, #32
 8011058:	483d      	ldr	r0, [pc, #244]	@ (8011150 <OLED_Init+0x110>)
 801105a:	f7f5 f841 	bl	80060e0 <HAL_GPIO_WritePin>

	// 关闭OLED面板
	OLED_WR_Byte(0xAE, OLED_CMD); // 关闭面板指令
 801105e:	2100      	movs	r1, #0
 8011060:	20ae      	movs	r0, #174	@ 0xae
 8011062:	f7ff ff89 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // 设置低列地址
 8011066:	2100      	movs	r1, #0
 8011068:	2002      	movs	r0, #2
 801106a:	f7ff ff85 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址
 801106e:	2100      	movs	r1, #0
 8011070:	2010      	movs	r0, #16
 8011072:	f7ff ff81 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置起始行地址，映射RAM显示起始行（0x00~0x3F）
 8011076:	2100      	movs	r1, #0
 8011078:	2040      	movs	r0, #64	@ 0x40
 801107a:	f7ff ff7d 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); // 设置对比度控制寄存器
 801107e:	2100      	movs	r1, #0
 8011080:	2081      	movs	r0, #129	@ 0x81
 8011082:	f7ff ff79 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // 设置SEG输出电流亮度
 8011086:	2100      	movs	r1, #0
 8011088:	20cf      	movs	r0, #207	@ 0xcf
 801108a:	f7ff ff75 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // 设置SEG/列映射，0Xa0左右反置，0Xa1正常
 801108e:	2100      	movs	r1, #0
 8011090:	20a1      	movs	r0, #161	@ 0xa1
 8011092:	f7ff ff71 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // 设置COM/行扫描方向，0Xc0上下反置，0Xc8正常
 8011096:	2100      	movs	r1, #0
 8011098:	20c8      	movs	r0, #200	@ 0xc8
 801109a:	f7ff ff6d 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 设置正常显示
 801109e:	2100      	movs	r1, #0
 80110a0:	20a6      	movs	r0, #166	@ 0xa6
 80110a2:	f7ff ff69 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // 设置多路复用比（1到64）
 80110a6:	2100      	movs	r1, #0
 80110a8:	20a8      	movs	r0, #168	@ 0xa8
 80110aa:	f7ff ff65 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); // 1/64 duty
 80110ae:	2100      	movs	r1, #0
 80110b0:	203f      	movs	r0, #63	@ 0x3f
 80110b2:	f7ff ff61 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // 设置显示偏移，移动映射RAM计数器（0x00~0x3F）
 80110b6:	2100      	movs	r1, #0
 80110b8:	20d3      	movs	r0, #211	@ 0xd3
 80110ba:	f7ff ff5d 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); // 不偏移
 80110be:	2100      	movs	r1, #0
 80110c0:	2000      	movs	r0, #0
 80110c2:	f7ff ff59 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); // 设置显示时钟分频比/振荡器频率
 80110c6:	2100      	movs	r1, #0
 80110c8:	20d5      	movs	r0, #213	@ 0xd5
 80110ca:	f7ff ff55 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); // 设置分频比，设置时钟为100帧/秒
 80110ce:	2100      	movs	r1, #0
 80110d0:	2080      	movs	r0, #128	@ 0x80
 80110d2:	f7ff ff51 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // 设置预充电周期
 80110d6:	2100      	movs	r1, #0
 80110d8:	20d9      	movs	r0, #217	@ 0xd9
 80110da:	f7ff ff4d 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // 设置预充电为15个时钟，放电为1个时钟
 80110de:	2100      	movs	r1, #0
 80110e0:	20f1      	movs	r0, #241	@ 0xf1
 80110e2:	f7ff ff49 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // 设置COM引脚硬件配置
 80110e6:	2100      	movs	r1, #0
 80110e8:	20da      	movs	r0, #218	@ 0xda
 80110ea:	f7ff ff45 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 80110ee:	2100      	movs	r1, #0
 80110f0:	2012      	movs	r0, #18
 80110f2:	f7ff ff41 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // 设置vcomh
 80110f6:	2100      	movs	r1, #0
 80110f8:	20db      	movs	r0, #219	@ 0xdb
 80110fa:	f7ff ff3d 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置VCOM取消电平
 80110fe:	2100      	movs	r1, #0
 8011100:	2040      	movs	r0, #64	@ 0x40
 8011102:	f7ff ff39 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // 设置页面寻址模式（0x00/0x01/0x02）
 8011106:	2100      	movs	r1, #0
 8011108:	2020      	movs	r0, #32
 801110a:	f7ff ff35 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);
 801110e:	2100      	movs	r1, #0
 8011110:	2002      	movs	r0, #2
 8011112:	f7ff ff31 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); // 设置充电泵使能/禁用
 8011116:	2100      	movs	r1, #0
 8011118:	208d      	movs	r0, #141	@ 0x8d
 801111a:	f7ff ff2d 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // 设置（0x10）禁用
 801111e:	2100      	movs	r1, #0
 8011120:	2014      	movs	r0, #20
 8011122:	f7ff ff29 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // 禁用整个显示（0xa4/0xa5）
 8011126:	2100      	movs	r1, #0
 8011128:	20a4      	movs	r0, #164	@ 0xa4
 801112a:	f7ff ff25 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 禁用反相显示（0xa6/a7）
 801112e:	2100      	movs	r1, #0
 8011130:	20a6      	movs	r0, #166	@ 0xa6
 8011132:	f7ff ff21 	bl	8010f78 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // 打开OLED面板
 8011136:	2100      	movs	r1, #0
 8011138:	20af      	movs	r0, #175	@ 0xaf
 801113a:	f7ff ff1d 	bl	8010f78 <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*显示开*/
 801113e:	2100      	movs	r1, #0
 8011140:	20af      	movs	r0, #175	@ 0xaf
 8011142:	f7ff ff19 	bl	8010f78 <OLED_WR_Byte>
	OLED_Clear();				  // 清除显示
 8011146:	f7ff ff4d 	bl	8010fe4 <OLED_Clear>
}
 801114a:	bf00      	nop
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	58020800 	.word	0x58020800

08011154 <pll_Init>:
 * @param config: 配置指针
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 8011154:	b480      	push	{r7}
 8011156:	b085      	sub	sp, #20
 8011158:	af00      	add	r7, sp, #0
 801115a:	60f8      	str	r0, [r7, #12]
 801115c:	60b9      	str	r1, [r7, #8]
 801115e:	ed87 0a01 	vstr	s0, [r7, #4]
 8011162:	4613      	mov	r3, r2
 8011164:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	f04f 0200 	mov.w	r2, #0
 801116c:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f04f 0200 	mov.w	r2, #0
 8011174:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f04f 0200 	mov.w	r2, #0
 801117c:	609a      	str	r2, [r3, #8]

    signal->sogi_a_1 = 0.f;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	f04f 0200 	mov.w	r2, #0
 8011184:	611a      	str	r2, [r3, #16]
    signal->sogi_a_2 = 0.f;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f04f 0200 	mov.w	r2, #0
 801118c:	615a      	str	r2, [r3, #20]
    signal->sogi_b_1 = 0.f;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	f04f 0200 	mov.w	r2, #0
 8011194:	61da      	str	r2, [r3, #28]
    signal->sogi_b_2 = 0.f;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f04f 0200 	mov.w	r2, #0
 801119c:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f04f 0200 	mov.w	r2, #0
 80111a4:	635a      	str	r2, [r3, #52]	@ 0x34

    config->omiga = 2 * PI * f; // f典型值50
 80111a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80111aa:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011310 <pll_Init+0x1bc>
 80111ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 80111b8:	887b      	ldrh	r3, [r7, #2]
 80111ba:	ee07 3a90 	vmov	s15, r3
 80111be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80111c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80111c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	4a50      	ldr	r2, [pc, #320]	@ (8011314 <pll_Init+0x1c0>)
 80111d4:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	f04f 0200 	mov.w	r2, #0
 80111dc:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	edd3 7a00 	vldr	s15, [r3]
 80111e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80111e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80111f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8011202:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	edd3 7a00 	vldr	s15, [r3]
 801120c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	edd3 7a01 	vldr	s15, [r3, #4]
 8011216:	ee67 7a27 	vmul.f32	s15, s14, s15
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	ed93 7a00 	vldr	s14, [r3]
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	edd3 7a01 	vldr	s15, [r3, #4]
 801122c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	edd3 7a00 	vldr	s15, [r3]
 8011236:	ee27 7a27 	vmul.f32	s14, s14, s15
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801125c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011260:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8011264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011278:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801127c:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8011280:	ee77 6a67 	vsub.f32	s13, s14, s15
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011294:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8011298:	ee37 7a87 	vadd.f32	s14, s15, s14
 801129c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80112b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112b6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80112ba:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80112ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112ce:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80112d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	4a0d      	ldr	r2, [pc, #52]	@ (8011318 <pll_Init+0x1c4>)
 80112e4:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	4a0c      	ldr	r2, [pc, #48]	@ (801131c <pll_Init+0x1c8>)
 80112ea:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	f04f 0200 	mov.w	r2, #0
 80112f2:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	f04f 0200 	mov.w	r2, #0
 80112fa:	641a      	str	r2, [r3, #64]	@ 0x40
    signal->pid_out = 0.f;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	f04f 0200 	mov.w	r2, #0
 8011302:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8011304:	bf00      	nop
 8011306:	3714      	adds	r7, #20
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr
 8011310:	40c90fdb 	.word	0x40c90fdb
 8011314:	3fb4fdf4 	.word	0x3fb4fdf4
 8011318:	428d78c3 	.word	0x428d78c3
 801131c:	46758fb9 	.word	0x46758fb9

08011320 <pll_Control>:
 * @param signal_In: 信号指针
 * @param config: 配置指针
 * @param signal_Target: 目标信号指针
 */
void pll_Control(pll_Signal *signal_In, pll_Config *config, pll_Signal *signal_Target)
{
 8011320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011324:	ed2d 8b02 	vpush	{d8}
 8011328:	b090      	sub	sp, #64	@ 0x40
 801132a:	af00      	add	r7, sp, #0
 801132c:	60f8      	str	r0, [r7, #12]
 801132e:	60b9      	str	r1, [r7, #8]
 8011330:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_In);
 8011332:	68f8      	ldr	r0, [r7, #12]
 8011334:	f000 f932 	bl	801159c <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_In->sogi_a_0, signal_In->sogi_b_0 / 382 * 3, &signal_In->park_d, &signal_In->park_q, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	68de      	ldr	r6, [r3, #12]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	ed93 7a06 	vldr	s14, [r3, #24]
 8011342:	eddf 6a67 	vldr	s13, [pc, #412]	@ 80114e0 <pll_Control+0x1c0>
 8011346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801134a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801134e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8011364:	eeb0 0a67 	vmov.f32	s0, s15
 8011368:	f000 fec8 	bl	80120fc <arm_sin_f32>
 801136c:	eef0 8a40 	vmov.f32	s17, s0
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8011376:	eeb0 0a67 	vmov.f32	s0, s15
 801137a:	f000 ff05 	bl	8012188 <arm_cos_f32>
 801137e:	eef0 7a40 	vmov.f32	s15, s0
 8011382:	627e      	str	r6, [r7, #36]	@ 0x24
 8011384:	ed87 8a08 	vstr	s16, [r7, #32]
 8011388:	61fd      	str	r5, [r7, #28]
 801138a:	61bc      	str	r4, [r7, #24]
 801138c:	edc7 8a05 	vstr	s17, [r7, #20]
 8011390:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8011394:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011398:	edd7 7a04 	vldr	s15, [r7, #16]
 801139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113a0:	edd7 6a08 	vldr	s13, [r7, #32]
 80113a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80113a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80113b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80113ba:	eeb1 7a67 	vneg.f32	s14, s15
 80113be:	edd7 7a05 	vldr	s15, [r7, #20]
 80113c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113c6:	edd7 6a08 	vldr	s13, [r7, #32]
 80113ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80113ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	edc3 7a00 	vstr	s15, [r3]
  }
 80113dc:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_In, config);
 80113de:	68b9      	ldr	r1, [r7, #8]
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f000 f87f 	bl	80114e4 <pll_Pid>
    // 更新theta
    signal_In->theta += (signal_In->pid_out + config->omiga) * config->Ts;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	edd3 7a00 	vldr	s15, [r3]
 80113f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8011402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011406:	ee77 7a27 	vadd.f32	s15, s14, s15
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_In->theta = (float)fmod(signal_In->theta, 2 * PI);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8011416:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801141a:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 80114d8 <pll_Control+0x1b8>
 801141e:	eeb0 0b47 	vmov.f64	d0, d7
 8011422:	f003 fcb5 	bl	8014d90 <fmod>
 8011426:	eeb0 7b40 	vmov.f64	d7, d0
 801142a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 反park变换
    arm_inv_park_f32(signal_In->park_d, signal_In->park_q, &signal_In->park_inv_a, &signal_In->park_inv_b, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f103 052c 	add.w	r5, r3, #44	@ 0x2c
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8011450:	eeb0 0a67 	vmov.f32	s0, s15
 8011454:	f000 fe52 	bl	80120fc <arm_sin_f32>
 8011458:	eeb0 8a40 	vmov.f32	s16, s0
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8011462:	eeb0 0a67 	vmov.f32	s0, s15
 8011466:	f000 fe8f 	bl	8012188 <arm_cos_f32>
 801146a:	eef0 7a40 	vmov.f32	s15, s0
 801146e:	f8c7 803c 	str.w	r8, [r7, #60]	@ 0x3c
 8011472:	63be      	str	r6, [r7, #56]	@ 0x38
 8011474:	637d      	str	r5, [r7, #52]	@ 0x34
 8011476:	633c      	str	r4, [r7, #48]	@ 0x30
 8011478:	ed87 8a0b 	vstr	s16, [r7, #44]	@ 0x2c
 801147c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 8011480:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8011484:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011488:	ee27 7a27 	vmul.f32	s14, s14, s15
 801148c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8011490:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011498:	ee77 7a67 	vsub.f32	s15, s14, s15
 801149c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801149e:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 80114a2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80114a6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80114aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114ae:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80114b2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80114b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c0:	edc3 7a00 	vstr	s15, [r3]
  }
 80114c4:	bf00      	nop
}
 80114c6:	bf00      	nop
 80114c8:	3740      	adds	r7, #64	@ 0x40
 80114ca:	46bd      	mov	sp, r7
 80114cc:	ecbd 8b02 	vpop	{d8}
 80114d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114d4:	f3af 8000 	nop.w
 80114d8:	60000000 	.word	0x60000000
 80114dc:	401921fb 	.word	0x401921fb
 80114e0:	43bf0000 	.word	0x43bf0000

080114e4 <pll_Pid>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80114fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	edd3 6a04 	vldr	s13, [r3, #16]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801151c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8011520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	edd3 6a05 	vldr	s13, [r3, #20]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8011534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011538:	ee77 7a27 	vadd.f32	s15, s14, s15
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8011548:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801158c <pll_Pid+0xa8>
 801154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011554:	dd03      	ble.n	801155e <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4a0d      	ldr	r2, [pc, #52]	@ (8011590 <pll_Pid+0xac>)
 801155a:	639a      	str	r2, [r3, #56]	@ 0x38
 801155c:	e00c      	b.n	8011578 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8011564:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8011594 <pll_Pid+0xb0>
 8011568:	eef4 7ac7 	vcmpe.f32	s15, s14
 801156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011570:	d502      	bpl.n	8011578 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	4a08      	ldr	r2, [pc, #32]	@ (8011598 <pll_Pid+0xb4>)
 8011576:	639a      	str	r2, [r3, #56]	@ 0x38

    signal->pid_err[1] = signal->pid_err[0];
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8011580:	bf00      	nop
 8011582:	370c      	adds	r7, #12
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr
 801158c:	431d1463 	.word	0x431d1463
 8011590:	431d1463 	.word	0x431d1463
 8011594:	c27b53d2 	.word	0xc27b53d2
 8011598:	c27b53d2 	.word	0xc27b53d2

0801159c <pll_Sogi>:
 * @brief Sogi变换
 *
 * @param signal: 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 801159c:	b480      	push	{r7}
 801159e:	b083      	sub	sp, #12
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
    signal->sogi_a_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_a_1 + signal->a2 * signal->sogi_a_2;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	edd3 7a00 	vldr	s15, [r3]
 80115b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80115c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80115d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80115e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_b_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_b_1 + signal->a2 * signal->sogi_b_2;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	edd3 7a00 	vldr	s15, [r3]
 8011602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 801160c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	edd3 7a01 	vldr	s15, [r3, #4]
 8011616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801161a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	edd3 7a02 	vldr	s15, [r3, #8]
 801162a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801162e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	edd3 7a07 	vldr	s15, [r3, #28]
 801163e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	edd3 7a08 	vldr	s15, [r3, #32]
 8011652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011656:	ee77 7a27 	vadd.f32	s15, s14, s15
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	685a      	ldr	r2, [r3, #4]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	605a      	str	r2, [r3, #4]
    signal->sogi_a_2 = signal->sogi_a_1;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	691a      	ldr	r2, [r3, #16]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	615a      	str	r2, [r3, #20]
    signal->sogi_a_1 = signal->sogi_a_0;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	68da      	ldr	r2, [r3, #12]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	611a      	str	r2, [r3, #16]
    signal->sogi_b_2 = signal->sogi_b_1;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	69da      	ldr	r2, [r3, #28]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	621a      	str	r2, [r3, #32]
    signal->sogi_b_1 = signal->sogi_b_0;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	699a      	ldr	r2, [r3, #24]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	61da      	str	r2, [r3, #28]
}
 8011690:	bf00      	nop
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80116a0:	2200      	movs	r2, #0
 80116a2:	4913      	ldr	r1, [pc, #76]	@ (80116f0 <MX_USB_DEVICE_Init+0x54>)
 80116a4:	4813      	ldr	r0, [pc, #76]	@ (80116f4 <MX_USB_DEVICE_Init+0x58>)
 80116a6:	f7fe f907 	bl	800f8b8 <USBD_Init>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d001      	beq.n	80116b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80116b0:	f7ef fd7c 	bl	80011ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80116b4:	4910      	ldr	r1, [pc, #64]	@ (80116f8 <MX_USB_DEVICE_Init+0x5c>)
 80116b6:	480f      	ldr	r0, [pc, #60]	@ (80116f4 <MX_USB_DEVICE_Init+0x58>)
 80116b8:	f7fe f92e 	bl	800f918 <USBD_RegisterClass>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d001      	beq.n	80116c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80116c2:	f7ef fd73 	bl	80011ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80116c6:	490d      	ldr	r1, [pc, #52]	@ (80116fc <MX_USB_DEVICE_Init+0x60>)
 80116c8:	480a      	ldr	r0, [pc, #40]	@ (80116f4 <MX_USB_DEVICE_Init+0x58>)
 80116ca:	f7fe f825 	bl	800f718 <USBD_CDC_RegisterInterface>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d001      	beq.n	80116d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80116d4:	f7ef fd6a 	bl	80011ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80116d8:	4806      	ldr	r0, [pc, #24]	@ (80116f4 <MX_USB_DEVICE_Init+0x58>)
 80116da:	f7fe f953 	bl	800f984 <USBD_Start>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d001      	beq.n	80116e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80116e4:	f7ef fd62 	bl	80011ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80116e8:	f7f6 fca6 	bl	8008038 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80116ec:	bf00      	nop
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	240000b4 	.word	0x240000b4
 80116f4:	240006ac 	.word	0x240006ac
 80116f8:	24000020 	.word	0x24000020
 80116fc:	240000a0 	.word	0x240000a0

08011700 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011704:	2200      	movs	r2, #0
 8011706:	4905      	ldr	r1, [pc, #20]	@ (801171c <CDC_Init_FS+0x1c>)
 8011708:	4805      	ldr	r0, [pc, #20]	@ (8011720 <CDC_Init_FS+0x20>)
 801170a:	f7fe f81f 	bl	800f74c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801170e:	4905      	ldr	r1, [pc, #20]	@ (8011724 <CDC_Init_FS+0x24>)
 8011710:	4803      	ldr	r0, [pc, #12]	@ (8011720 <CDC_Init_FS+0x20>)
 8011712:	f7fe f83d 	bl	800f790 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011716:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011718:	4618      	mov	r0, r3
 801171a:	bd80      	pop	{r7, pc}
 801171c:	24001188 	.word	0x24001188
 8011720:	240006ac 	.word	0x240006ac
 8011724:	24000988 	.word	0x24000988

08011728 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011728:	b480      	push	{r7}
 801172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801172c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801172e:	4618      	mov	r0, r3
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	4603      	mov	r3, r0
 8011740:	6039      	str	r1, [r7, #0]
 8011742:	71fb      	strb	r3, [r7, #7]
 8011744:	4613      	mov	r3, r2
 8011746:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011748:	79fb      	ldrb	r3, [r7, #7]
 801174a:	2b23      	cmp	r3, #35	@ 0x23
 801174c:	d84a      	bhi.n	80117e4 <CDC_Control_FS+0xac>
 801174e:	a201      	add	r2, pc, #4	@ (adr r2, 8011754 <CDC_Control_FS+0x1c>)
 8011750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011754:	080117e5 	.word	0x080117e5
 8011758:	080117e5 	.word	0x080117e5
 801175c:	080117e5 	.word	0x080117e5
 8011760:	080117e5 	.word	0x080117e5
 8011764:	080117e5 	.word	0x080117e5
 8011768:	080117e5 	.word	0x080117e5
 801176c:	080117e5 	.word	0x080117e5
 8011770:	080117e5 	.word	0x080117e5
 8011774:	080117e5 	.word	0x080117e5
 8011778:	080117e5 	.word	0x080117e5
 801177c:	080117e5 	.word	0x080117e5
 8011780:	080117e5 	.word	0x080117e5
 8011784:	080117e5 	.word	0x080117e5
 8011788:	080117e5 	.word	0x080117e5
 801178c:	080117e5 	.word	0x080117e5
 8011790:	080117e5 	.word	0x080117e5
 8011794:	080117e5 	.word	0x080117e5
 8011798:	080117e5 	.word	0x080117e5
 801179c:	080117e5 	.word	0x080117e5
 80117a0:	080117e5 	.word	0x080117e5
 80117a4:	080117e5 	.word	0x080117e5
 80117a8:	080117e5 	.word	0x080117e5
 80117ac:	080117e5 	.word	0x080117e5
 80117b0:	080117e5 	.word	0x080117e5
 80117b4:	080117e5 	.word	0x080117e5
 80117b8:	080117e5 	.word	0x080117e5
 80117bc:	080117e5 	.word	0x080117e5
 80117c0:	080117e5 	.word	0x080117e5
 80117c4:	080117e5 	.word	0x080117e5
 80117c8:	080117e5 	.word	0x080117e5
 80117cc:	080117e5 	.word	0x080117e5
 80117d0:	080117e5 	.word	0x080117e5
 80117d4:	080117e5 	.word	0x080117e5
 80117d8:	080117e5 	.word	0x080117e5
 80117dc:	080117e5 	.word	0x080117e5
 80117e0:	080117e5 	.word	0x080117e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80117e4:	bf00      	nop
  }

  return (USBD_OK);
 80117e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80117fe:	6879      	ldr	r1, [r7, #4]
 8011800:	4805      	ldr	r0, [pc, #20]	@ (8011818 <CDC_Receive_FS+0x24>)
 8011802:	f7fd ffc5 	bl	800f790 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011806:	4804      	ldr	r0, [pc, #16]	@ (8011818 <CDC_Receive_FS+0x24>)
 8011808:	f7fe f820 	bl	800f84c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801180c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801180e:	4618      	mov	r0, r3
 8011810:	3708      	adds	r7, #8
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	240006ac 	.word	0x240006ac

0801181c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	460b      	mov	r3, r1
 8011826:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011828:	2300      	movs	r3, #0
 801182a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801182c:	4b0d      	ldr	r3, [pc, #52]	@ (8011864 <CDC_Transmit_FS+0x48>)
 801182e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011832:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801183e:	2301      	movs	r3, #1
 8011840:	e00b      	b.n	801185a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011842:	887b      	ldrh	r3, [r7, #2]
 8011844:	461a      	mov	r2, r3
 8011846:	6879      	ldr	r1, [r7, #4]
 8011848:	4806      	ldr	r0, [pc, #24]	@ (8011864 <CDC_Transmit_FS+0x48>)
 801184a:	f7fd ff7f 	bl	800f74c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801184e:	4805      	ldr	r0, [pc, #20]	@ (8011864 <CDC_Transmit_FS+0x48>)
 8011850:	f7fd ffbc 	bl	800f7cc <USBD_CDC_TransmitPacket>
 8011854:	4603      	mov	r3, r0
 8011856:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011858:	7bfb      	ldrb	r3, [r7, #15]
}
 801185a:	4618      	mov	r0, r3
 801185c:	3710      	adds	r7, #16
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	240006ac 	.word	0x240006ac

08011868 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011868:	b480      	push	{r7}
 801186a:	b087      	sub	sp, #28
 801186c:	af00      	add	r7, sp, #0
 801186e:	60f8      	str	r0, [r7, #12]
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	4613      	mov	r3, r2
 8011874:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011876:	2300      	movs	r3, #0
 8011878:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801187a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801187e:	4618      	mov	r0, r3
 8011880:	371c      	adds	r7, #28
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr
	...

0801188c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	4603      	mov	r3, r0
 8011894:	6039      	str	r1, [r7, #0]
 8011896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	2212      	movs	r2, #18
 801189c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801189e:	4b03      	ldr	r3, [pc, #12]	@ (80118ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	370c      	adds	r7, #12
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr
 80118ac:	240000d4 	.word	0x240000d4

080118b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	4603      	mov	r3, r0
 80118b8:	6039      	str	r1, [r7, #0]
 80118ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	2204      	movs	r2, #4
 80118c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80118c2:	4b03      	ldr	r3, [pc, #12]	@ (80118d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	370c      	adds	r7, #12
 80118c8:	46bd      	mov	sp, r7
 80118ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ce:	4770      	bx	lr
 80118d0:	240000e8 	.word	0x240000e8

080118d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	4603      	mov	r3, r0
 80118dc:	6039      	str	r1, [r7, #0]
 80118de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80118e0:	79fb      	ldrb	r3, [r7, #7]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d105      	bne.n	80118f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80118e6:	683a      	ldr	r2, [r7, #0]
 80118e8:	4907      	ldr	r1, [pc, #28]	@ (8011908 <USBD_FS_ProductStrDescriptor+0x34>)
 80118ea:	4808      	ldr	r0, [pc, #32]	@ (801190c <USBD_FS_ProductStrDescriptor+0x38>)
 80118ec:	f7ff fa24 	bl	8010d38 <USBD_GetString>
 80118f0:	e004      	b.n	80118fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80118f2:	683a      	ldr	r2, [r7, #0]
 80118f4:	4904      	ldr	r1, [pc, #16]	@ (8011908 <USBD_FS_ProductStrDescriptor+0x34>)
 80118f6:	4805      	ldr	r0, [pc, #20]	@ (801190c <USBD_FS_ProductStrDescriptor+0x38>)
 80118f8:	f7ff fa1e 	bl	8010d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80118fc:	4b02      	ldr	r3, [pc, #8]	@ (8011908 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3708      	adds	r7, #8
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
 8011906:	bf00      	nop
 8011908:	24001988 	.word	0x24001988
 801190c:	08015090 	.word	0x08015090

08011910 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	4603      	mov	r3, r0
 8011918:	6039      	str	r1, [r7, #0]
 801191a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801191c:	683a      	ldr	r2, [r7, #0]
 801191e:	4904      	ldr	r1, [pc, #16]	@ (8011930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011920:	4804      	ldr	r0, [pc, #16]	@ (8011934 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011922:	f7ff fa09 	bl	8010d38 <USBD_GetString>
  return USBD_StrDesc;
 8011926:	4b02      	ldr	r3, [pc, #8]	@ (8011930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011928:	4618      	mov	r0, r3
 801192a:	3708      	adds	r7, #8
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}
 8011930:	24001988 	.word	0x24001988
 8011934:	080150a8 	.word	0x080150a8

08011938 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	4603      	mov	r3, r0
 8011940:	6039      	str	r1, [r7, #0]
 8011942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	221a      	movs	r2, #26
 8011948:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801194a:	f000 f843 	bl	80119d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801194e:	4b02      	ldr	r3, [pc, #8]	@ (8011958 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011950:	4618      	mov	r0, r3
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	240000ec 	.word	0x240000ec

0801195c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	4603      	mov	r3, r0
 8011964:	6039      	str	r1, [r7, #0]
 8011966:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011968:	79fb      	ldrb	r3, [r7, #7]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d105      	bne.n	801197a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801196e:	683a      	ldr	r2, [r7, #0]
 8011970:	4907      	ldr	r1, [pc, #28]	@ (8011990 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011972:	4808      	ldr	r0, [pc, #32]	@ (8011994 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011974:	f7ff f9e0 	bl	8010d38 <USBD_GetString>
 8011978:	e004      	b.n	8011984 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	4904      	ldr	r1, [pc, #16]	@ (8011990 <USBD_FS_ConfigStrDescriptor+0x34>)
 801197e:	4805      	ldr	r0, [pc, #20]	@ (8011994 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011980:	f7ff f9da 	bl	8010d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011984:	4b02      	ldr	r3, [pc, #8]	@ (8011990 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011986:	4618      	mov	r0, r3
 8011988:	3708      	adds	r7, #8
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
 801198e:	bf00      	nop
 8011990:	24001988 	.word	0x24001988
 8011994:	080150bc 	.word	0x080150bc

08011998 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	4603      	mov	r3, r0
 80119a0:	6039      	str	r1, [r7, #0]
 80119a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80119a4:	79fb      	ldrb	r3, [r7, #7]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d105      	bne.n	80119b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	4907      	ldr	r1, [pc, #28]	@ (80119cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80119ae:	4808      	ldr	r0, [pc, #32]	@ (80119d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80119b0:	f7ff f9c2 	bl	8010d38 <USBD_GetString>
 80119b4:	e004      	b.n	80119c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80119b6:	683a      	ldr	r2, [r7, #0]
 80119b8:	4904      	ldr	r1, [pc, #16]	@ (80119cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80119ba:	4805      	ldr	r0, [pc, #20]	@ (80119d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80119bc:	f7ff f9bc 	bl	8010d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80119c0:	4b02      	ldr	r3, [pc, #8]	@ (80119cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3708      	adds	r7, #8
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	24001988 	.word	0x24001988
 80119d0:	080150c8 	.word	0x080150c8

080119d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	4413      	add	r3, r2
 80119e0:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d009      	beq.n	80119fc <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80119e8:	2208      	movs	r2, #8
 80119ea:	4906      	ldr	r1, [pc, #24]	@ (8011a04 <Get_SerialNum+0x30>)
 80119ec:	68f8      	ldr	r0, [r7, #12]
 80119ee:	f000 f80d 	bl	8011a0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80119f2:	2204      	movs	r2, #4
 80119f4:	4904      	ldr	r1, [pc, #16]	@ (8011a08 <Get_SerialNum+0x34>)
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f000 f808 	bl	8011a0c <IntToUnicode>
  }
}
 80119fc:	bf00      	nop
 80119fe:	3710      	adds	r7, #16
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	240000ee 	.word	0x240000ee
 8011a08:	240000fe 	.word	0x240000fe

08011a0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b087      	sub	sp, #28
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	4613      	mov	r3, r2
 8011a18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011a1e:	2300      	movs	r3, #0
 8011a20:	75fb      	strb	r3, [r7, #23]
 8011a22:	e027      	b.n	8011a74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	0f1b      	lsrs	r3, r3, #28
 8011a28:	2b09      	cmp	r3, #9
 8011a2a:	d80b      	bhi.n	8011a44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	0f1b      	lsrs	r3, r3, #28
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	7dfb      	ldrb	r3, [r7, #23]
 8011a34:	005b      	lsls	r3, r3, #1
 8011a36:	4619      	mov	r1, r3
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	440b      	add	r3, r1
 8011a3c:	3230      	adds	r2, #48	@ 0x30
 8011a3e:	b2d2      	uxtb	r2, r2
 8011a40:	701a      	strb	r2, [r3, #0]
 8011a42:	e00a      	b.n	8011a5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	0f1b      	lsrs	r3, r3, #28
 8011a48:	b2da      	uxtb	r2, r3
 8011a4a:	7dfb      	ldrb	r3, [r7, #23]
 8011a4c:	005b      	lsls	r3, r3, #1
 8011a4e:	4619      	mov	r1, r3
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	440b      	add	r3, r1
 8011a54:	3237      	adds	r2, #55	@ 0x37
 8011a56:	b2d2      	uxtb	r2, r2
 8011a58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	011b      	lsls	r3, r3, #4
 8011a5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011a60:	7dfb      	ldrb	r3, [r7, #23]
 8011a62:	005b      	lsls	r3, r3, #1
 8011a64:	3301      	adds	r3, #1
 8011a66:	68ba      	ldr	r2, [r7, #8]
 8011a68:	4413      	add	r3, r2
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011a6e:	7dfb      	ldrb	r3, [r7, #23]
 8011a70:	3301      	adds	r3, #1
 8011a72:	75fb      	strb	r3, [r7, #23]
 8011a74:	7dfa      	ldrb	r2, [r7, #23]
 8011a76:	79fb      	ldrb	r3, [r7, #7]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d3d3      	bcc.n	8011a24 <IntToUnicode+0x18>
  }
}
 8011a7c:	bf00      	nop
 8011a7e:	bf00      	nop
 8011a80:	371c      	adds	r7, #28
 8011a82:	46bd      	mov	sp, r7
 8011a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a88:	4770      	bx	lr
	...

08011a8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b0ba      	sub	sp, #232	@ 0xe8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011a98:	2200      	movs	r2, #0
 8011a9a:	601a      	str	r2, [r3, #0]
 8011a9c:	605a      	str	r2, [r3, #4]
 8011a9e:	609a      	str	r2, [r3, #8]
 8011aa0:	60da      	str	r2, [r3, #12]
 8011aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011aa4:	f107 0310 	add.w	r3, r7, #16
 8011aa8:	22c0      	movs	r2, #192	@ 0xc0
 8011aaa:	2100      	movs	r1, #0
 8011aac:	4618      	mov	r0, r3
 8011aae:	f001 f9c8 	bl	8012e42 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8011b68 <HAL_PCD_MspInit+0xdc>)
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d151      	bne.n	8011b60 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011abc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011ac0:	f04f 0300 	mov.w	r3, #0
 8011ac4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011ac8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011ad0:	f107 0310 	add.w	r3, r7, #16
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7f7 fad1 	bl	800907c <HAL_RCCEx_PeriphCLKConfig>
 8011ada:	4603      	mov	r3, r0
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d001      	beq.n	8011ae4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011ae0:	f7ef fb64 	bl	80011ac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011ae4:	f7f6 faa8 	bl	8008038 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ae8:	4b20      	ldr	r3, [pc, #128]	@ (8011b6c <HAL_PCD_MspInit+0xe0>)
 8011aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011aee:	4a1f      	ldr	r2, [pc, #124]	@ (8011b6c <HAL_PCD_MspInit+0xe0>)
 8011af0:	f043 0301 	orr.w	r3, r3, #1
 8011af4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011af8:	4b1c      	ldr	r3, [pc, #112]	@ (8011b6c <HAL_PCD_MspInit+0xe0>)
 8011afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011afe:	f003 0301 	and.w	r3, r3, #1
 8011b02:	60fb      	str	r3, [r7, #12]
 8011b04:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011b06:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b0e:	2302      	movs	r3, #2
 8011b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b14:	2300      	movs	r3, #0
 8011b16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011b20:	230a      	movs	r3, #10
 8011b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	4810      	ldr	r0, [pc, #64]	@ (8011b70 <HAL_PCD_MspInit+0xe4>)
 8011b2e:	f7f4 f927 	bl	8005d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011b32:	4b0e      	ldr	r3, [pc, #56]	@ (8011b6c <HAL_PCD_MspInit+0xe0>)
 8011b34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011b38:	4a0c      	ldr	r2, [pc, #48]	@ (8011b6c <HAL_PCD_MspInit+0xe0>)
 8011b3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011b3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011b42:	4b0a      	ldr	r3, [pc, #40]	@ (8011b6c <HAL_PCD_MspInit+0xe0>)
 8011b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011b4c:	60bb      	str	r3, [r7, #8]
 8011b4e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011b50:	2200      	movs	r2, #0
 8011b52:	2100      	movs	r1, #0
 8011b54:	2065      	movs	r0, #101	@ 0x65
 8011b56:	f7f1 fd51 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011b5a:	2065      	movs	r0, #101	@ 0x65
 8011b5c:	f7f1 fd68 	bl	8003630 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011b60:	bf00      	nop
 8011b62:	37e8      	adds	r7, #232	@ 0xe8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	40080000 	.word	0x40080000
 8011b6c:	58024400 	.word	0x58024400
 8011b70:	58020000 	.word	0x58020000

08011b74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b082      	sub	sp, #8
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011b88:	4619      	mov	r1, r3
 8011b8a:	4610      	mov	r0, r2
 8011b8c:	f7fd ff47 	bl	800fa1e <USBD_LL_SetupStage>
}
 8011b90:	bf00      	nop
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011baa:	78fa      	ldrb	r2, [r7, #3]
 8011bac:	6879      	ldr	r1, [r7, #4]
 8011bae:	4613      	mov	r3, r2
 8011bb0:	00db      	lsls	r3, r3, #3
 8011bb2:	4413      	add	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	440b      	add	r3, r1
 8011bb8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8011bbc:	681a      	ldr	r2, [r3, #0]
 8011bbe:	78fb      	ldrb	r3, [r7, #3]
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	f7fd ff81 	bl	800fac8 <USBD_LL_DataOutStage>
}
 8011bc6:	bf00      	nop
 8011bc8:	3708      	adds	r7, #8
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b082      	sub	sp, #8
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011be0:	78fa      	ldrb	r2, [r7, #3]
 8011be2:	6879      	ldr	r1, [r7, #4]
 8011be4:	4613      	mov	r3, r2
 8011be6:	00db      	lsls	r3, r3, #3
 8011be8:	4413      	add	r3, r2
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	440b      	add	r3, r1
 8011bee:	3348      	adds	r3, #72	@ 0x48
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	78fb      	ldrb	r3, [r7, #3]
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	f7fe f81a 	bl	800fc2e <USBD_LL_DataInStage>
}
 8011bfa:	bf00      	nop
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}

08011c02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c02:	b580      	push	{r7, lr}
 8011c04:	b082      	sub	sp, #8
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011c10:	4618      	mov	r0, r3
 8011c12:	f7fe f954 	bl	800febe <USBD_LL_SOF>
}
 8011c16:	bf00      	nop
 8011c18:	3708      	adds	r7, #8
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b084      	sub	sp, #16
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011c26:	2301      	movs	r3, #1
 8011c28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	691b      	ldr	r3, [r3, #16]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d102      	bne.n	8011c38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011c32:	2300      	movs	r3, #0
 8011c34:	73fb      	strb	r3, [r7, #15]
 8011c36:	e008      	b.n	8011c4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	691b      	ldr	r3, [r3, #16]
 8011c3c:	2b02      	cmp	r3, #2
 8011c3e:	d102      	bne.n	8011c46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011c40:	2301      	movs	r3, #1
 8011c42:	73fb      	strb	r3, [r7, #15]
 8011c44:	e001      	b.n	8011c4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011c46:	f7ef fab1 	bl	80011ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011c50:	7bfa      	ldrb	r2, [r7, #15]
 8011c52:	4611      	mov	r1, r2
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fe f8ee 	bl	800fe36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7fe f896 	bl	800fd92 <USBD_LL_Reset>
}
 8011c66:	bf00      	nop
 8011c68:	3710      	adds	r7, #16
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
	...

08011c70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7fe f8e9 	bl	800fe56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	6812      	ldr	r2, [r2, #0]
 8011c92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011c96:	f043 0301 	orr.w	r3, r3, #1
 8011c9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6a1b      	ldr	r3, [r3, #32]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d005      	beq.n	8011cb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ca4:	4b04      	ldr	r3, [pc, #16]	@ (8011cb8 <HAL_PCD_SuspendCallback+0x48>)
 8011ca6:	691b      	ldr	r3, [r3, #16]
 8011ca8:	4a03      	ldr	r2, [pc, #12]	@ (8011cb8 <HAL_PCD_SuspendCallback+0x48>)
 8011caa:	f043 0306 	orr.w	r3, r3, #6
 8011cae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011cb0:	bf00      	nop
 8011cb2:	3708      	adds	r7, #8
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	e000ed00 	.word	0xe000ed00

08011cbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7fe f8df 	bl	800fe8e <USBD_LL_Resume>
}
 8011cd0:	bf00      	nop
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011cea:	78fa      	ldrb	r2, [r7, #3]
 8011cec:	4611      	mov	r1, r2
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7fe f937 	bl	800ff62 <USBD_LL_IsoOUTIncomplete>
}
 8011cf4:	bf00      	nop
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	460b      	mov	r3, r1
 8011d06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d0e:	78fa      	ldrb	r2, [r7, #3]
 8011d10:	4611      	mov	r1, r2
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fe f8f3 	bl	800fefe <USBD_LL_IsoINIncomplete>
}
 8011d18:	bf00      	nop
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7fe f949 	bl	800ffc6 <USBD_LL_DevConnected>
}
 8011d34:	bf00      	nop
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7fe f946 	bl	800ffdc <USBD_LL_DevDisconnected>
}
 8011d50:	bf00      	nop
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	781b      	ldrb	r3, [r3, #0]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d13e      	bne.n	8011de6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011d68:	4a21      	ldr	r2, [pc, #132]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	4a1f      	ldr	r2, [pc, #124]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011d74:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011d78:	4b1d      	ldr	r3, [pc, #116]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8011df4 <USBD_LL_Init+0x9c>)
 8011d7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011d80:	2209      	movs	r2, #9
 8011d82:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011d84:	4b1a      	ldr	r3, [pc, #104]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011d86:	2202      	movs	r2, #2
 8011d88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011d8a:	4b19      	ldr	r3, [pc, #100]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011d90:	4b17      	ldr	r3, [pc, #92]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011d92:	2202      	movs	r2, #2
 8011d94:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011d96:	4b16      	ldr	r3, [pc, #88]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011d98:	2200      	movs	r2, #0
 8011d9a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011d9c:	4b14      	ldr	r3, [pc, #80]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011d9e:	2200      	movs	r2, #0
 8011da0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011da2:	4b13      	ldr	r3, [pc, #76]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011da4:	2200      	movs	r2, #0
 8011da6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011da8:	4b11      	ldr	r3, [pc, #68]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011daa:	2200      	movs	r2, #0
 8011dac:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011dae:	4b10      	ldr	r3, [pc, #64]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011db0:	2200      	movs	r2, #0
 8011db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011db4:	4b0e      	ldr	r3, [pc, #56]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011db6:	2200      	movs	r2, #0
 8011db8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011dba:	480d      	ldr	r0, [pc, #52]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011dbc:	f7f4 fe49 	bl	8006a52 <HAL_PCD_Init>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d001      	beq.n	8011dca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011dc6:	f7ef f9f1 	bl	80011ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011dca:	2180      	movs	r1, #128	@ 0x80
 8011dcc:	4808      	ldr	r0, [pc, #32]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011dce:	f7f6 f8b8 	bl	8007f42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011dd2:	2240      	movs	r2, #64	@ 0x40
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	4806      	ldr	r0, [pc, #24]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011dd8:	f7f6 f86c 	bl	8007eb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011ddc:	2280      	movs	r2, #128	@ 0x80
 8011dde:	2101      	movs	r1, #1
 8011de0:	4803      	ldr	r0, [pc, #12]	@ (8011df0 <USBD_LL_Init+0x98>)
 8011de2:	f7f6 f867 	bl	8007eb4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011de6:	2300      	movs	r3, #0
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3708      	adds	r7, #8
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}
 8011df0:	24001b88 	.word	0x24001b88
 8011df4:	40080000 	.word	0x40080000

08011df8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b084      	sub	sp, #16
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e00:	2300      	movs	r3, #0
 8011e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e04:	2300      	movs	r3, #0
 8011e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7f4 ff43 	bl	8006c9a <HAL_PCD_Start>
 8011e14:	4603      	mov	r3, r0
 8011e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e18:	7bfb      	ldrb	r3, [r7, #15]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f000 f942 	bl	80120a4 <USBD_Get_USB_Status>
 8011e20:	4603      	mov	r3, r0
 8011e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	3710      	adds	r7, #16
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}

08011e2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011e2e:	b580      	push	{r7, lr}
 8011e30:	b084      	sub	sp, #16
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	6078      	str	r0, [r7, #4]
 8011e36:	4608      	mov	r0, r1
 8011e38:	4611      	mov	r1, r2
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	70fb      	strb	r3, [r7, #3]
 8011e40:	460b      	mov	r3, r1
 8011e42:	70bb      	strb	r3, [r7, #2]
 8011e44:	4613      	mov	r3, r2
 8011e46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011e56:	78bb      	ldrb	r3, [r7, #2]
 8011e58:	883a      	ldrh	r2, [r7, #0]
 8011e5a:	78f9      	ldrb	r1, [r7, #3]
 8011e5c:	f7f5 fc43 	bl	80076e6 <HAL_PCD_EP_Open>
 8011e60:	4603      	mov	r3, r0
 8011e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e64:	7bfb      	ldrb	r3, [r7, #15]
 8011e66:	4618      	mov	r0, r3
 8011e68:	f000 f91c 	bl	80120a4 <USBD_Get_USB_Status>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b084      	sub	sp, #16
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
 8011e82:	460b      	mov	r3, r1
 8011e84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e86:	2300      	movs	r3, #0
 8011e88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e94:	78fa      	ldrb	r2, [r7, #3]
 8011e96:	4611      	mov	r1, r2
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7f5 fc8c 	bl	80077b6 <HAL_PCD_EP_Close>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ea2:	7bfb      	ldrb	r3, [r7, #15]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f000 f8fd 	bl	80120a4 <USBD_Get_USB_Status>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011eae:	7bbb      	ldrb	r3, [r7, #14]
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3710      	adds	r7, #16
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	460b      	mov	r3, r1
 8011ec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011ed2:	78fa      	ldrb	r2, [r7, #3]
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7f5 fd46 	bl	8007968 <HAL_PCD_EP_SetStall>
 8011edc:	4603      	mov	r3, r0
 8011ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ee0:	7bfb      	ldrb	r3, [r7, #15]
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f000 f8de 	bl	80120a4 <USBD_Get_USB_Status>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3710      	adds	r7, #16
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}

08011ef6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ef6:	b580      	push	{r7, lr}
 8011ef8:	b084      	sub	sp, #16
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
 8011efe:	460b      	mov	r3, r1
 8011f00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f02:	2300      	movs	r3, #0
 8011f04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f06:	2300      	movs	r3, #0
 8011f08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f10:	78fa      	ldrb	r2, [r7, #3]
 8011f12:	4611      	mov	r1, r2
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7f5 fd8b 	bl	8007a30 <HAL_PCD_EP_ClrStall>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f1e:	7bfb      	ldrb	r3, [r7, #15]
 8011f20:	4618      	mov	r0, r3
 8011f22:	f000 f8bf 	bl	80120a4 <USBD_Get_USB_Status>
 8011f26:	4603      	mov	r3, r0
 8011f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3710      	adds	r7, #16
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f34:	b480      	push	{r7}
 8011f36:	b085      	sub	sp, #20
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	da0b      	bge.n	8011f68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011f50:	78fb      	ldrb	r3, [r7, #3]
 8011f52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011f56:	68f9      	ldr	r1, [r7, #12]
 8011f58:	4613      	mov	r3, r2
 8011f5a:	00db      	lsls	r3, r3, #3
 8011f5c:	4413      	add	r3, r2
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	440b      	add	r3, r1
 8011f62:	333e      	adds	r3, #62	@ 0x3e
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	e00b      	b.n	8011f80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011f68:	78fb      	ldrb	r3, [r7, #3]
 8011f6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011f6e:	68f9      	ldr	r1, [r7, #12]
 8011f70:	4613      	mov	r3, r2
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	4413      	add	r3, r2
 8011f76:	009b      	lsls	r3, r3, #2
 8011f78:	440b      	add	r3, r1
 8011f7a:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8011f7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3714      	adds	r7, #20
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr

08011f8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b084      	sub	sp, #16
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	460b      	mov	r3, r1
 8011f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011fa6:	78fa      	ldrb	r2, [r7, #3]
 8011fa8:	4611      	mov	r1, r2
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7f5 fb76 	bl	800769c <HAL_PCD_SetAddress>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fb4:	7bfb      	ldrb	r3, [r7, #15]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f000 f874 	bl	80120a4 <USBD_Get_USB_Status>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b086      	sub	sp, #24
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	60f8      	str	r0, [r7, #12]
 8011fd2:	607a      	str	r2, [r7, #4]
 8011fd4:	603b      	str	r3, [r7, #0]
 8011fd6:	460b      	mov	r3, r1
 8011fd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011fe8:	7af9      	ldrb	r1, [r7, #11]
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	f7f5 fc80 	bl	80078f2 <HAL_PCD_EP_Transmit>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ff6:	7dfb      	ldrb	r3, [r7, #23]
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f000 f853 	bl	80120a4 <USBD_Get_USB_Status>
 8011ffe:	4603      	mov	r3, r0
 8012000:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012002:	7dbb      	ldrb	r3, [r7, #22]
}
 8012004:	4618      	mov	r0, r3
 8012006:	3718      	adds	r7, #24
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b086      	sub	sp, #24
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	607a      	str	r2, [r7, #4]
 8012016:	603b      	str	r3, [r7, #0]
 8012018:	460b      	mov	r3, r1
 801201a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801201c:	2300      	movs	r3, #0
 801201e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012020:	2300      	movs	r3, #0
 8012022:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801202a:	7af9      	ldrb	r1, [r7, #11]
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	687a      	ldr	r2, [r7, #4]
 8012030:	f7f5 fc0b 	bl	800784a <HAL_PCD_EP_Receive>
 8012034:	4603      	mov	r3, r0
 8012036:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012038:	7dfb      	ldrb	r3, [r7, #23]
 801203a:	4618      	mov	r0, r3
 801203c:	f000 f832 	bl	80120a4 <USBD_Get_USB_Status>
 8012040:	4603      	mov	r3, r0
 8012042:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012044:	7dbb      	ldrb	r3, [r7, #22]
}
 8012046:	4618      	mov	r0, r3
 8012048:	3718      	adds	r7, #24
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801204e:	b580      	push	{r7, lr}
 8012050:	b082      	sub	sp, #8
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
 8012056:	460b      	mov	r3, r1
 8012058:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012060:	78fa      	ldrb	r2, [r7, #3]
 8012062:	4611      	mov	r1, r2
 8012064:	4618      	mov	r0, r3
 8012066:	f7f5 fc2c 	bl	80078c2 <HAL_PCD_EP_GetRxCount>
 801206a:	4603      	mov	r3, r0
}
 801206c:	4618      	mov	r0, r3
 801206e:	3708      	adds	r7, #8
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012074:	b480      	push	{r7}
 8012076:	b083      	sub	sp, #12
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801207c:	4b03      	ldr	r3, [pc, #12]	@ (801208c <USBD_static_malloc+0x18>)
}
 801207e:	4618      	mov	r0, r3
 8012080:	370c      	adds	r7, #12
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr
 801208a:	bf00      	nop
 801208c:	24002094 	.word	0x24002094

08012090 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012098:	bf00      	nop
 801209a:	370c      	adds	r7, #12
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr

080120a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	4603      	mov	r3, r0
 80120ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120ae:	2300      	movs	r3, #0
 80120b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80120b2:	79fb      	ldrb	r3, [r7, #7]
 80120b4:	2b03      	cmp	r3, #3
 80120b6:	d817      	bhi.n	80120e8 <USBD_Get_USB_Status+0x44>
 80120b8:	a201      	add	r2, pc, #4	@ (adr r2, 80120c0 <USBD_Get_USB_Status+0x1c>)
 80120ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120be:	bf00      	nop
 80120c0:	080120d1 	.word	0x080120d1
 80120c4:	080120d7 	.word	0x080120d7
 80120c8:	080120dd 	.word	0x080120dd
 80120cc:	080120e3 	.word	0x080120e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80120d0:	2300      	movs	r3, #0
 80120d2:	73fb      	strb	r3, [r7, #15]
    break;
 80120d4:	e00b      	b.n	80120ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80120d6:	2303      	movs	r3, #3
 80120d8:	73fb      	strb	r3, [r7, #15]
    break;
 80120da:	e008      	b.n	80120ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80120dc:	2301      	movs	r3, #1
 80120de:	73fb      	strb	r3, [r7, #15]
    break;
 80120e0:	e005      	b.n	80120ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80120e2:	2303      	movs	r3, #3
 80120e4:	73fb      	strb	r3, [r7, #15]
    break;
 80120e6:	e002      	b.n	80120ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80120e8:	2303      	movs	r3, #3
 80120ea:	73fb      	strb	r3, [r7, #15]
    break;
 80120ec:	bf00      	nop
  }
  return usb_status;
 80120ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3714      	adds	r7, #20
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr

080120fc <arm_sin_f32>:
 80120fc:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 801217c <arm_sin_f32+0x80>
 8012100:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012104:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012108:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012110:	d504      	bpl.n	801211c <arm_sin_f32+0x20>
 8012112:	ee17 3a90 	vmov	r3, s15
 8012116:	3b01      	subs	r3, #1
 8012118:	ee07 3a90 	vmov	s15, r3
 801211c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012120:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012180 <arm_sin_f32+0x84>
 8012124:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012128:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801212c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012130:	ee17 3a10 	vmov	r3, s14
 8012134:	b29b      	uxth	r3, r3
 8012136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801213a:	d21a      	bcs.n	8012172 <arm_sin_f32+0x76>
 801213c:	ee07 3a10 	vmov	s14, r3
 8012140:	1c59      	adds	r1, r3, #1
 8012142:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8012146:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801214a:	4a0e      	ldr	r2, [pc, #56]	@ (8012184 <arm_sin_f32+0x88>)
 801214c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012150:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012154:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012158:	ee30 0a67 	vsub.f32	s0, s0, s15
 801215c:	edd3 6a00 	vldr	s13, [r3]
 8012160:	ed92 7a00 	vldr	s14, [r2]
 8012164:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012168:	ee67 7a87 	vmul.f32	s15, s15, s14
 801216c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012170:	4770      	bx	lr
 8012172:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012176:	2101      	movs	r1, #1
 8012178:	2300      	movs	r3, #0
 801217a:	e7e6      	b.n	801214a <arm_sin_f32+0x4e>
 801217c:	3e22f983 	.word	0x3e22f983
 8012180:	44000000 	.word	0x44000000
 8012184:	080150f0 	.word	0x080150f0

08012188 <arm_cos_f32>:
 8012188:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8012210 <arm_cos_f32+0x88>
 801218c:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8012190:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012194:	ee30 0a07 	vadd.f32	s0, s0, s14
 8012198:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801219c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80121a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a4:	d504      	bpl.n	80121b0 <arm_cos_f32+0x28>
 80121a6:	ee17 3a90 	vmov	r3, s15
 80121aa:	3b01      	subs	r3, #1
 80121ac:	ee07 3a90 	vmov	s15, r3
 80121b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121b4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012214 <arm_cos_f32+0x8c>
 80121b8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80121bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80121c0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80121c4:	ee17 3a10 	vmov	r3, s14
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121ce:	d21a      	bcs.n	8012206 <arm_cos_f32+0x7e>
 80121d0:	ee07 3a10 	vmov	s14, r3
 80121d4:	1c59      	adds	r1, r3, #1
 80121d6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80121da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80121de:	4a0e      	ldr	r2, [pc, #56]	@ (8012218 <arm_cos_f32+0x90>)
 80121e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80121e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121e8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80121ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 80121f0:	edd3 6a00 	vldr	s13, [r3]
 80121f4:	ed92 7a00 	vldr	s14, [r2]
 80121f8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80121fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012200:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012204:	4770      	bx	lr
 8012206:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801220a:	2101      	movs	r1, #1
 801220c:	2300      	movs	r3, #0
 801220e:	e7e6      	b.n	80121de <arm_cos_f32+0x56>
 8012210:	3e22f983 	.word	0x3e22f983
 8012214:	44000000 	.word	0x44000000
 8012218:	080150f0 	.word	0x080150f0

0801221c <malloc>:
 801221c:	4b02      	ldr	r3, [pc, #8]	@ (8012228 <malloc+0xc>)
 801221e:	4601      	mov	r1, r0
 8012220:	6818      	ldr	r0, [r3, #0]
 8012222:	f000 b825 	b.w	8012270 <_malloc_r>
 8012226:	bf00      	nop
 8012228:	24000114 	.word	0x24000114

0801222c <sbrk_aligned>:
 801222c:	b570      	push	{r4, r5, r6, lr}
 801222e:	4e0f      	ldr	r6, [pc, #60]	@ (801226c <sbrk_aligned+0x40>)
 8012230:	460c      	mov	r4, r1
 8012232:	6831      	ldr	r1, [r6, #0]
 8012234:	4605      	mov	r5, r0
 8012236:	b911      	cbnz	r1, 801223e <sbrk_aligned+0x12>
 8012238:	f000 fe44 	bl	8012ec4 <_sbrk_r>
 801223c:	6030      	str	r0, [r6, #0]
 801223e:	4621      	mov	r1, r4
 8012240:	4628      	mov	r0, r5
 8012242:	f000 fe3f 	bl	8012ec4 <_sbrk_r>
 8012246:	1c43      	adds	r3, r0, #1
 8012248:	d103      	bne.n	8012252 <sbrk_aligned+0x26>
 801224a:	f04f 34ff 	mov.w	r4, #4294967295
 801224e:	4620      	mov	r0, r4
 8012250:	bd70      	pop	{r4, r5, r6, pc}
 8012252:	1cc4      	adds	r4, r0, #3
 8012254:	f024 0403 	bic.w	r4, r4, #3
 8012258:	42a0      	cmp	r0, r4
 801225a:	d0f8      	beq.n	801224e <sbrk_aligned+0x22>
 801225c:	1a21      	subs	r1, r4, r0
 801225e:	4628      	mov	r0, r5
 8012260:	f000 fe30 	bl	8012ec4 <_sbrk_r>
 8012264:	3001      	adds	r0, #1
 8012266:	d1f2      	bne.n	801224e <sbrk_aligned+0x22>
 8012268:	e7ef      	b.n	801224a <sbrk_aligned+0x1e>
 801226a:	bf00      	nop
 801226c:	240022b4 	.word	0x240022b4

08012270 <_malloc_r>:
 8012270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012274:	1ccd      	adds	r5, r1, #3
 8012276:	f025 0503 	bic.w	r5, r5, #3
 801227a:	3508      	adds	r5, #8
 801227c:	2d0c      	cmp	r5, #12
 801227e:	bf38      	it	cc
 8012280:	250c      	movcc	r5, #12
 8012282:	2d00      	cmp	r5, #0
 8012284:	4606      	mov	r6, r0
 8012286:	db01      	blt.n	801228c <_malloc_r+0x1c>
 8012288:	42a9      	cmp	r1, r5
 801228a:	d904      	bls.n	8012296 <_malloc_r+0x26>
 801228c:	230c      	movs	r3, #12
 801228e:	6033      	str	r3, [r6, #0]
 8012290:	2000      	movs	r0, #0
 8012292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801236c <_malloc_r+0xfc>
 801229a:	f000 f869 	bl	8012370 <__malloc_lock>
 801229e:	f8d8 3000 	ldr.w	r3, [r8]
 80122a2:	461c      	mov	r4, r3
 80122a4:	bb44      	cbnz	r4, 80122f8 <_malloc_r+0x88>
 80122a6:	4629      	mov	r1, r5
 80122a8:	4630      	mov	r0, r6
 80122aa:	f7ff ffbf 	bl	801222c <sbrk_aligned>
 80122ae:	1c43      	adds	r3, r0, #1
 80122b0:	4604      	mov	r4, r0
 80122b2:	d158      	bne.n	8012366 <_malloc_r+0xf6>
 80122b4:	f8d8 4000 	ldr.w	r4, [r8]
 80122b8:	4627      	mov	r7, r4
 80122ba:	2f00      	cmp	r7, #0
 80122bc:	d143      	bne.n	8012346 <_malloc_r+0xd6>
 80122be:	2c00      	cmp	r4, #0
 80122c0:	d04b      	beq.n	801235a <_malloc_r+0xea>
 80122c2:	6823      	ldr	r3, [r4, #0]
 80122c4:	4639      	mov	r1, r7
 80122c6:	4630      	mov	r0, r6
 80122c8:	eb04 0903 	add.w	r9, r4, r3
 80122cc:	f000 fdfa 	bl	8012ec4 <_sbrk_r>
 80122d0:	4581      	cmp	r9, r0
 80122d2:	d142      	bne.n	801235a <_malloc_r+0xea>
 80122d4:	6821      	ldr	r1, [r4, #0]
 80122d6:	1a6d      	subs	r5, r5, r1
 80122d8:	4629      	mov	r1, r5
 80122da:	4630      	mov	r0, r6
 80122dc:	f7ff ffa6 	bl	801222c <sbrk_aligned>
 80122e0:	3001      	adds	r0, #1
 80122e2:	d03a      	beq.n	801235a <_malloc_r+0xea>
 80122e4:	6823      	ldr	r3, [r4, #0]
 80122e6:	442b      	add	r3, r5
 80122e8:	6023      	str	r3, [r4, #0]
 80122ea:	f8d8 3000 	ldr.w	r3, [r8]
 80122ee:	685a      	ldr	r2, [r3, #4]
 80122f0:	bb62      	cbnz	r2, 801234c <_malloc_r+0xdc>
 80122f2:	f8c8 7000 	str.w	r7, [r8]
 80122f6:	e00f      	b.n	8012318 <_malloc_r+0xa8>
 80122f8:	6822      	ldr	r2, [r4, #0]
 80122fa:	1b52      	subs	r2, r2, r5
 80122fc:	d420      	bmi.n	8012340 <_malloc_r+0xd0>
 80122fe:	2a0b      	cmp	r2, #11
 8012300:	d917      	bls.n	8012332 <_malloc_r+0xc2>
 8012302:	1961      	adds	r1, r4, r5
 8012304:	42a3      	cmp	r3, r4
 8012306:	6025      	str	r5, [r4, #0]
 8012308:	bf18      	it	ne
 801230a:	6059      	strne	r1, [r3, #4]
 801230c:	6863      	ldr	r3, [r4, #4]
 801230e:	bf08      	it	eq
 8012310:	f8c8 1000 	streq.w	r1, [r8]
 8012314:	5162      	str	r2, [r4, r5]
 8012316:	604b      	str	r3, [r1, #4]
 8012318:	4630      	mov	r0, r6
 801231a:	f000 f82f 	bl	801237c <__malloc_unlock>
 801231e:	f104 000b 	add.w	r0, r4, #11
 8012322:	1d23      	adds	r3, r4, #4
 8012324:	f020 0007 	bic.w	r0, r0, #7
 8012328:	1ac2      	subs	r2, r0, r3
 801232a:	bf1c      	itt	ne
 801232c:	1a1b      	subne	r3, r3, r0
 801232e:	50a3      	strne	r3, [r4, r2]
 8012330:	e7af      	b.n	8012292 <_malloc_r+0x22>
 8012332:	6862      	ldr	r2, [r4, #4]
 8012334:	42a3      	cmp	r3, r4
 8012336:	bf0c      	ite	eq
 8012338:	f8c8 2000 	streq.w	r2, [r8]
 801233c:	605a      	strne	r2, [r3, #4]
 801233e:	e7eb      	b.n	8012318 <_malloc_r+0xa8>
 8012340:	4623      	mov	r3, r4
 8012342:	6864      	ldr	r4, [r4, #4]
 8012344:	e7ae      	b.n	80122a4 <_malloc_r+0x34>
 8012346:	463c      	mov	r4, r7
 8012348:	687f      	ldr	r7, [r7, #4]
 801234a:	e7b6      	b.n	80122ba <_malloc_r+0x4a>
 801234c:	461a      	mov	r2, r3
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	42a3      	cmp	r3, r4
 8012352:	d1fb      	bne.n	801234c <_malloc_r+0xdc>
 8012354:	2300      	movs	r3, #0
 8012356:	6053      	str	r3, [r2, #4]
 8012358:	e7de      	b.n	8012318 <_malloc_r+0xa8>
 801235a:	230c      	movs	r3, #12
 801235c:	6033      	str	r3, [r6, #0]
 801235e:	4630      	mov	r0, r6
 8012360:	f000 f80c 	bl	801237c <__malloc_unlock>
 8012364:	e794      	b.n	8012290 <_malloc_r+0x20>
 8012366:	6005      	str	r5, [r0, #0]
 8012368:	e7d6      	b.n	8012318 <_malloc_r+0xa8>
 801236a:	bf00      	nop
 801236c:	240022b8 	.word	0x240022b8

08012370 <__malloc_lock>:
 8012370:	4801      	ldr	r0, [pc, #4]	@ (8012378 <__malloc_lock+0x8>)
 8012372:	f000 bdf4 	b.w	8012f5e <__retarget_lock_acquire_recursive>
 8012376:	bf00      	nop
 8012378:	240023fc 	.word	0x240023fc

0801237c <__malloc_unlock>:
 801237c:	4801      	ldr	r0, [pc, #4]	@ (8012384 <__malloc_unlock+0x8>)
 801237e:	f000 bdef 	b.w	8012f60 <__retarget_lock_release_recursive>
 8012382:	bf00      	nop
 8012384:	240023fc 	.word	0x240023fc

08012388 <__cvt>:
 8012388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238a:	ed2d 8b02 	vpush	{d8}
 801238e:	eeb0 8b40 	vmov.f64	d8, d0
 8012392:	b085      	sub	sp, #20
 8012394:	4617      	mov	r7, r2
 8012396:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012398:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801239a:	ee18 2a90 	vmov	r2, s17
 801239e:	f025 0520 	bic.w	r5, r5, #32
 80123a2:	2a00      	cmp	r2, #0
 80123a4:	bfb6      	itet	lt
 80123a6:	222d      	movlt	r2, #45	@ 0x2d
 80123a8:	2200      	movge	r2, #0
 80123aa:	eeb1 8b40 	vneglt.f64	d8, d0
 80123ae:	2d46      	cmp	r5, #70	@ 0x46
 80123b0:	460c      	mov	r4, r1
 80123b2:	701a      	strb	r2, [r3, #0]
 80123b4:	d004      	beq.n	80123c0 <__cvt+0x38>
 80123b6:	2d45      	cmp	r5, #69	@ 0x45
 80123b8:	d100      	bne.n	80123bc <__cvt+0x34>
 80123ba:	3401      	adds	r4, #1
 80123bc:	2102      	movs	r1, #2
 80123be:	e000      	b.n	80123c2 <__cvt+0x3a>
 80123c0:	2103      	movs	r1, #3
 80123c2:	ab03      	add	r3, sp, #12
 80123c4:	9301      	str	r3, [sp, #4]
 80123c6:	ab02      	add	r3, sp, #8
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	4622      	mov	r2, r4
 80123cc:	4633      	mov	r3, r6
 80123ce:	eeb0 0b48 	vmov.f64	d0, d8
 80123d2:	f000 fe51 	bl	8013078 <_dtoa_r>
 80123d6:	2d47      	cmp	r5, #71	@ 0x47
 80123d8:	d114      	bne.n	8012404 <__cvt+0x7c>
 80123da:	07fb      	lsls	r3, r7, #31
 80123dc:	d50a      	bpl.n	80123f4 <__cvt+0x6c>
 80123de:	1902      	adds	r2, r0, r4
 80123e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80123e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e8:	bf08      	it	eq
 80123ea:	9203      	streq	r2, [sp, #12]
 80123ec:	2130      	movs	r1, #48	@ 0x30
 80123ee:	9b03      	ldr	r3, [sp, #12]
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d319      	bcc.n	8012428 <__cvt+0xa0>
 80123f4:	9b03      	ldr	r3, [sp, #12]
 80123f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123f8:	1a1b      	subs	r3, r3, r0
 80123fa:	6013      	str	r3, [r2, #0]
 80123fc:	b005      	add	sp, #20
 80123fe:	ecbd 8b02 	vpop	{d8}
 8012402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012404:	2d46      	cmp	r5, #70	@ 0x46
 8012406:	eb00 0204 	add.w	r2, r0, r4
 801240a:	d1e9      	bne.n	80123e0 <__cvt+0x58>
 801240c:	7803      	ldrb	r3, [r0, #0]
 801240e:	2b30      	cmp	r3, #48	@ 0x30
 8012410:	d107      	bne.n	8012422 <__cvt+0x9a>
 8012412:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241a:	bf1c      	itt	ne
 801241c:	f1c4 0401 	rsbne	r4, r4, #1
 8012420:	6034      	strne	r4, [r6, #0]
 8012422:	6833      	ldr	r3, [r6, #0]
 8012424:	441a      	add	r2, r3
 8012426:	e7db      	b.n	80123e0 <__cvt+0x58>
 8012428:	1c5c      	adds	r4, r3, #1
 801242a:	9403      	str	r4, [sp, #12]
 801242c:	7019      	strb	r1, [r3, #0]
 801242e:	e7de      	b.n	80123ee <__cvt+0x66>

08012430 <__exponent>:
 8012430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012432:	2900      	cmp	r1, #0
 8012434:	bfba      	itte	lt
 8012436:	4249      	neglt	r1, r1
 8012438:	232d      	movlt	r3, #45	@ 0x2d
 801243a:	232b      	movge	r3, #43	@ 0x2b
 801243c:	2909      	cmp	r1, #9
 801243e:	7002      	strb	r2, [r0, #0]
 8012440:	7043      	strb	r3, [r0, #1]
 8012442:	dd29      	ble.n	8012498 <__exponent+0x68>
 8012444:	f10d 0307 	add.w	r3, sp, #7
 8012448:	461d      	mov	r5, r3
 801244a:	270a      	movs	r7, #10
 801244c:	461a      	mov	r2, r3
 801244e:	fbb1 f6f7 	udiv	r6, r1, r7
 8012452:	fb07 1416 	mls	r4, r7, r6, r1
 8012456:	3430      	adds	r4, #48	@ 0x30
 8012458:	f802 4c01 	strb.w	r4, [r2, #-1]
 801245c:	460c      	mov	r4, r1
 801245e:	2c63      	cmp	r4, #99	@ 0x63
 8012460:	f103 33ff 	add.w	r3, r3, #4294967295
 8012464:	4631      	mov	r1, r6
 8012466:	dcf1      	bgt.n	801244c <__exponent+0x1c>
 8012468:	3130      	adds	r1, #48	@ 0x30
 801246a:	1e94      	subs	r4, r2, #2
 801246c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012470:	1c41      	adds	r1, r0, #1
 8012472:	4623      	mov	r3, r4
 8012474:	42ab      	cmp	r3, r5
 8012476:	d30a      	bcc.n	801248e <__exponent+0x5e>
 8012478:	f10d 0309 	add.w	r3, sp, #9
 801247c:	1a9b      	subs	r3, r3, r2
 801247e:	42ac      	cmp	r4, r5
 8012480:	bf88      	it	hi
 8012482:	2300      	movhi	r3, #0
 8012484:	3302      	adds	r3, #2
 8012486:	4403      	add	r3, r0
 8012488:	1a18      	subs	r0, r3, r0
 801248a:	b003      	add	sp, #12
 801248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801248e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012492:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012496:	e7ed      	b.n	8012474 <__exponent+0x44>
 8012498:	2330      	movs	r3, #48	@ 0x30
 801249a:	3130      	adds	r1, #48	@ 0x30
 801249c:	7083      	strb	r3, [r0, #2]
 801249e:	70c1      	strb	r1, [r0, #3]
 80124a0:	1d03      	adds	r3, r0, #4
 80124a2:	e7f1      	b.n	8012488 <__exponent+0x58>
 80124a4:	0000      	movs	r0, r0
	...

080124a8 <_printf_float>:
 80124a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ac:	b08d      	sub	sp, #52	@ 0x34
 80124ae:	460c      	mov	r4, r1
 80124b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80124b4:	4616      	mov	r6, r2
 80124b6:	461f      	mov	r7, r3
 80124b8:	4605      	mov	r5, r0
 80124ba:	f000 fccb 	bl	8012e54 <_localeconv_r>
 80124be:	f8d0 b000 	ldr.w	fp, [r0]
 80124c2:	4658      	mov	r0, fp
 80124c4:	f7ed ff5c 	bl	8000380 <strlen>
 80124c8:	2300      	movs	r3, #0
 80124ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80124cc:	f8d8 3000 	ldr.w	r3, [r8]
 80124d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80124d4:	6822      	ldr	r2, [r4, #0]
 80124d6:	9005      	str	r0, [sp, #20]
 80124d8:	3307      	adds	r3, #7
 80124da:	f023 0307 	bic.w	r3, r3, #7
 80124de:	f103 0108 	add.w	r1, r3, #8
 80124e2:	f8c8 1000 	str.w	r1, [r8]
 80124e6:	ed93 0b00 	vldr	d0, [r3]
 80124ea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012748 <_printf_float+0x2a0>
 80124ee:	eeb0 7bc0 	vabs.f64	d7, d0
 80124f2:	eeb4 7b46 	vcmp.f64	d7, d6
 80124f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80124fe:	dd24      	ble.n	801254a <_printf_float+0xa2>
 8012500:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012508:	d502      	bpl.n	8012510 <_printf_float+0x68>
 801250a:	232d      	movs	r3, #45	@ 0x2d
 801250c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012510:	498f      	ldr	r1, [pc, #572]	@ (8012750 <_printf_float+0x2a8>)
 8012512:	4b90      	ldr	r3, [pc, #576]	@ (8012754 <_printf_float+0x2ac>)
 8012514:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012518:	bf94      	ite	ls
 801251a:	4688      	movls	r8, r1
 801251c:	4698      	movhi	r8, r3
 801251e:	f022 0204 	bic.w	r2, r2, #4
 8012522:	2303      	movs	r3, #3
 8012524:	6123      	str	r3, [r4, #16]
 8012526:	6022      	str	r2, [r4, #0]
 8012528:	f04f 0a00 	mov.w	sl, #0
 801252c:	9700      	str	r7, [sp, #0]
 801252e:	4633      	mov	r3, r6
 8012530:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012532:	4621      	mov	r1, r4
 8012534:	4628      	mov	r0, r5
 8012536:	f000 f9d1 	bl	80128dc <_printf_common>
 801253a:	3001      	adds	r0, #1
 801253c:	f040 8089 	bne.w	8012652 <_printf_float+0x1aa>
 8012540:	f04f 30ff 	mov.w	r0, #4294967295
 8012544:	b00d      	add	sp, #52	@ 0x34
 8012546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801254a:	eeb4 0b40 	vcmp.f64	d0, d0
 801254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012552:	d709      	bvc.n	8012568 <_printf_float+0xc0>
 8012554:	ee10 3a90 	vmov	r3, s1
 8012558:	2b00      	cmp	r3, #0
 801255a:	bfbc      	itt	lt
 801255c:	232d      	movlt	r3, #45	@ 0x2d
 801255e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012562:	497d      	ldr	r1, [pc, #500]	@ (8012758 <_printf_float+0x2b0>)
 8012564:	4b7d      	ldr	r3, [pc, #500]	@ (801275c <_printf_float+0x2b4>)
 8012566:	e7d5      	b.n	8012514 <_printf_float+0x6c>
 8012568:	6863      	ldr	r3, [r4, #4]
 801256a:	1c59      	adds	r1, r3, #1
 801256c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012570:	d139      	bne.n	80125e6 <_printf_float+0x13e>
 8012572:	2306      	movs	r3, #6
 8012574:	6063      	str	r3, [r4, #4]
 8012576:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801257a:	2300      	movs	r3, #0
 801257c:	6022      	str	r2, [r4, #0]
 801257e:	9303      	str	r3, [sp, #12]
 8012580:	ab0a      	add	r3, sp, #40	@ 0x28
 8012582:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012586:	ab09      	add	r3, sp, #36	@ 0x24
 8012588:	9300      	str	r3, [sp, #0]
 801258a:	6861      	ldr	r1, [r4, #4]
 801258c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012590:	4628      	mov	r0, r5
 8012592:	f7ff fef9 	bl	8012388 <__cvt>
 8012596:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801259a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801259c:	4680      	mov	r8, r0
 801259e:	d129      	bne.n	80125f4 <_printf_float+0x14c>
 80125a0:	1cc8      	adds	r0, r1, #3
 80125a2:	db02      	blt.n	80125aa <_printf_float+0x102>
 80125a4:	6863      	ldr	r3, [r4, #4]
 80125a6:	4299      	cmp	r1, r3
 80125a8:	dd41      	ble.n	801262e <_printf_float+0x186>
 80125aa:	f1a9 0902 	sub.w	r9, r9, #2
 80125ae:	fa5f f989 	uxtb.w	r9, r9
 80125b2:	3901      	subs	r1, #1
 80125b4:	464a      	mov	r2, r9
 80125b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80125ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80125bc:	f7ff ff38 	bl	8012430 <__exponent>
 80125c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80125c2:	1813      	adds	r3, r2, r0
 80125c4:	2a01      	cmp	r2, #1
 80125c6:	4682      	mov	sl, r0
 80125c8:	6123      	str	r3, [r4, #16]
 80125ca:	dc02      	bgt.n	80125d2 <_printf_float+0x12a>
 80125cc:	6822      	ldr	r2, [r4, #0]
 80125ce:	07d2      	lsls	r2, r2, #31
 80125d0:	d501      	bpl.n	80125d6 <_printf_float+0x12e>
 80125d2:	3301      	adds	r3, #1
 80125d4:	6123      	str	r3, [r4, #16]
 80125d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d0a6      	beq.n	801252c <_printf_float+0x84>
 80125de:	232d      	movs	r3, #45	@ 0x2d
 80125e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125e4:	e7a2      	b.n	801252c <_printf_float+0x84>
 80125e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80125ea:	d1c4      	bne.n	8012576 <_printf_float+0xce>
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d1c2      	bne.n	8012576 <_printf_float+0xce>
 80125f0:	2301      	movs	r3, #1
 80125f2:	e7bf      	b.n	8012574 <_printf_float+0xcc>
 80125f4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80125f8:	d9db      	bls.n	80125b2 <_printf_float+0x10a>
 80125fa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80125fe:	d118      	bne.n	8012632 <_printf_float+0x18a>
 8012600:	2900      	cmp	r1, #0
 8012602:	6863      	ldr	r3, [r4, #4]
 8012604:	dd0b      	ble.n	801261e <_printf_float+0x176>
 8012606:	6121      	str	r1, [r4, #16]
 8012608:	b913      	cbnz	r3, 8012610 <_printf_float+0x168>
 801260a:	6822      	ldr	r2, [r4, #0]
 801260c:	07d0      	lsls	r0, r2, #31
 801260e:	d502      	bpl.n	8012616 <_printf_float+0x16e>
 8012610:	3301      	adds	r3, #1
 8012612:	440b      	add	r3, r1
 8012614:	6123      	str	r3, [r4, #16]
 8012616:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012618:	f04f 0a00 	mov.w	sl, #0
 801261c:	e7db      	b.n	80125d6 <_printf_float+0x12e>
 801261e:	b913      	cbnz	r3, 8012626 <_printf_float+0x17e>
 8012620:	6822      	ldr	r2, [r4, #0]
 8012622:	07d2      	lsls	r2, r2, #31
 8012624:	d501      	bpl.n	801262a <_printf_float+0x182>
 8012626:	3302      	adds	r3, #2
 8012628:	e7f4      	b.n	8012614 <_printf_float+0x16c>
 801262a:	2301      	movs	r3, #1
 801262c:	e7f2      	b.n	8012614 <_printf_float+0x16c>
 801262e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012634:	4299      	cmp	r1, r3
 8012636:	db05      	blt.n	8012644 <_printf_float+0x19c>
 8012638:	6823      	ldr	r3, [r4, #0]
 801263a:	6121      	str	r1, [r4, #16]
 801263c:	07d8      	lsls	r0, r3, #31
 801263e:	d5ea      	bpl.n	8012616 <_printf_float+0x16e>
 8012640:	1c4b      	adds	r3, r1, #1
 8012642:	e7e7      	b.n	8012614 <_printf_float+0x16c>
 8012644:	2900      	cmp	r1, #0
 8012646:	bfd4      	ite	le
 8012648:	f1c1 0202 	rsble	r2, r1, #2
 801264c:	2201      	movgt	r2, #1
 801264e:	4413      	add	r3, r2
 8012650:	e7e0      	b.n	8012614 <_printf_float+0x16c>
 8012652:	6823      	ldr	r3, [r4, #0]
 8012654:	055a      	lsls	r2, r3, #21
 8012656:	d407      	bmi.n	8012668 <_printf_float+0x1c0>
 8012658:	6923      	ldr	r3, [r4, #16]
 801265a:	4642      	mov	r2, r8
 801265c:	4631      	mov	r1, r6
 801265e:	4628      	mov	r0, r5
 8012660:	47b8      	blx	r7
 8012662:	3001      	adds	r0, #1
 8012664:	d12a      	bne.n	80126bc <_printf_float+0x214>
 8012666:	e76b      	b.n	8012540 <_printf_float+0x98>
 8012668:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801266c:	f240 80e0 	bls.w	8012830 <_printf_float+0x388>
 8012670:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012674:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267c:	d133      	bne.n	80126e6 <_printf_float+0x23e>
 801267e:	4a38      	ldr	r2, [pc, #224]	@ (8012760 <_printf_float+0x2b8>)
 8012680:	2301      	movs	r3, #1
 8012682:	4631      	mov	r1, r6
 8012684:	4628      	mov	r0, r5
 8012686:	47b8      	blx	r7
 8012688:	3001      	adds	r0, #1
 801268a:	f43f af59 	beq.w	8012540 <_printf_float+0x98>
 801268e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012692:	4543      	cmp	r3, r8
 8012694:	db02      	blt.n	801269c <_printf_float+0x1f4>
 8012696:	6823      	ldr	r3, [r4, #0]
 8012698:	07d8      	lsls	r0, r3, #31
 801269a:	d50f      	bpl.n	80126bc <_printf_float+0x214>
 801269c:	9b05      	ldr	r3, [sp, #20]
 801269e:	465a      	mov	r2, fp
 80126a0:	4631      	mov	r1, r6
 80126a2:	4628      	mov	r0, r5
 80126a4:	47b8      	blx	r7
 80126a6:	3001      	adds	r0, #1
 80126a8:	f43f af4a 	beq.w	8012540 <_printf_float+0x98>
 80126ac:	f04f 0900 	mov.w	r9, #0
 80126b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80126b4:	f104 0a1a 	add.w	sl, r4, #26
 80126b8:	45c8      	cmp	r8, r9
 80126ba:	dc09      	bgt.n	80126d0 <_printf_float+0x228>
 80126bc:	6823      	ldr	r3, [r4, #0]
 80126be:	079b      	lsls	r3, r3, #30
 80126c0:	f100 8107 	bmi.w	80128d2 <_printf_float+0x42a>
 80126c4:	68e0      	ldr	r0, [r4, #12]
 80126c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126c8:	4298      	cmp	r0, r3
 80126ca:	bfb8      	it	lt
 80126cc:	4618      	movlt	r0, r3
 80126ce:	e739      	b.n	8012544 <_printf_float+0x9c>
 80126d0:	2301      	movs	r3, #1
 80126d2:	4652      	mov	r2, sl
 80126d4:	4631      	mov	r1, r6
 80126d6:	4628      	mov	r0, r5
 80126d8:	47b8      	blx	r7
 80126da:	3001      	adds	r0, #1
 80126dc:	f43f af30 	beq.w	8012540 <_printf_float+0x98>
 80126e0:	f109 0901 	add.w	r9, r9, #1
 80126e4:	e7e8      	b.n	80126b8 <_printf_float+0x210>
 80126e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	dc3b      	bgt.n	8012764 <_printf_float+0x2bc>
 80126ec:	4a1c      	ldr	r2, [pc, #112]	@ (8012760 <_printf_float+0x2b8>)
 80126ee:	2301      	movs	r3, #1
 80126f0:	4631      	mov	r1, r6
 80126f2:	4628      	mov	r0, r5
 80126f4:	47b8      	blx	r7
 80126f6:	3001      	adds	r0, #1
 80126f8:	f43f af22 	beq.w	8012540 <_printf_float+0x98>
 80126fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012700:	ea59 0303 	orrs.w	r3, r9, r3
 8012704:	d102      	bne.n	801270c <_printf_float+0x264>
 8012706:	6823      	ldr	r3, [r4, #0]
 8012708:	07d9      	lsls	r1, r3, #31
 801270a:	d5d7      	bpl.n	80126bc <_printf_float+0x214>
 801270c:	9b05      	ldr	r3, [sp, #20]
 801270e:	465a      	mov	r2, fp
 8012710:	4631      	mov	r1, r6
 8012712:	4628      	mov	r0, r5
 8012714:	47b8      	blx	r7
 8012716:	3001      	adds	r0, #1
 8012718:	f43f af12 	beq.w	8012540 <_printf_float+0x98>
 801271c:	f04f 0a00 	mov.w	sl, #0
 8012720:	f104 0b1a 	add.w	fp, r4, #26
 8012724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012726:	425b      	negs	r3, r3
 8012728:	4553      	cmp	r3, sl
 801272a:	dc01      	bgt.n	8012730 <_printf_float+0x288>
 801272c:	464b      	mov	r3, r9
 801272e:	e794      	b.n	801265a <_printf_float+0x1b2>
 8012730:	2301      	movs	r3, #1
 8012732:	465a      	mov	r2, fp
 8012734:	4631      	mov	r1, r6
 8012736:	4628      	mov	r0, r5
 8012738:	47b8      	blx	r7
 801273a:	3001      	adds	r0, #1
 801273c:	f43f af00 	beq.w	8012540 <_printf_float+0x98>
 8012740:	f10a 0a01 	add.w	sl, sl, #1
 8012744:	e7ee      	b.n	8012724 <_printf_float+0x27c>
 8012746:	bf00      	nop
 8012748:	ffffffff 	.word	0xffffffff
 801274c:	7fefffff 	.word	0x7fefffff
 8012750:	080158f4 	.word	0x080158f4
 8012754:	080158f8 	.word	0x080158f8
 8012758:	080158fc 	.word	0x080158fc
 801275c:	08015900 	.word	0x08015900
 8012760:	08015904 	.word	0x08015904
 8012764:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012766:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801276a:	4553      	cmp	r3, sl
 801276c:	bfa8      	it	ge
 801276e:	4653      	movge	r3, sl
 8012770:	2b00      	cmp	r3, #0
 8012772:	4699      	mov	r9, r3
 8012774:	dc37      	bgt.n	80127e6 <_printf_float+0x33e>
 8012776:	2300      	movs	r3, #0
 8012778:	9307      	str	r3, [sp, #28]
 801277a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801277e:	f104 021a 	add.w	r2, r4, #26
 8012782:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012784:	9907      	ldr	r1, [sp, #28]
 8012786:	9306      	str	r3, [sp, #24]
 8012788:	eba3 0309 	sub.w	r3, r3, r9
 801278c:	428b      	cmp	r3, r1
 801278e:	dc31      	bgt.n	80127f4 <_printf_float+0x34c>
 8012790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012792:	459a      	cmp	sl, r3
 8012794:	dc3b      	bgt.n	801280e <_printf_float+0x366>
 8012796:	6823      	ldr	r3, [r4, #0]
 8012798:	07da      	lsls	r2, r3, #31
 801279a:	d438      	bmi.n	801280e <_printf_float+0x366>
 801279c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801279e:	ebaa 0903 	sub.w	r9, sl, r3
 80127a2:	9b06      	ldr	r3, [sp, #24]
 80127a4:	ebaa 0303 	sub.w	r3, sl, r3
 80127a8:	4599      	cmp	r9, r3
 80127aa:	bfa8      	it	ge
 80127ac:	4699      	movge	r9, r3
 80127ae:	f1b9 0f00 	cmp.w	r9, #0
 80127b2:	dc34      	bgt.n	801281e <_printf_float+0x376>
 80127b4:	f04f 0800 	mov.w	r8, #0
 80127b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80127bc:	f104 0b1a 	add.w	fp, r4, #26
 80127c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127c2:	ebaa 0303 	sub.w	r3, sl, r3
 80127c6:	eba3 0309 	sub.w	r3, r3, r9
 80127ca:	4543      	cmp	r3, r8
 80127cc:	f77f af76 	ble.w	80126bc <_printf_float+0x214>
 80127d0:	2301      	movs	r3, #1
 80127d2:	465a      	mov	r2, fp
 80127d4:	4631      	mov	r1, r6
 80127d6:	4628      	mov	r0, r5
 80127d8:	47b8      	blx	r7
 80127da:	3001      	adds	r0, #1
 80127dc:	f43f aeb0 	beq.w	8012540 <_printf_float+0x98>
 80127e0:	f108 0801 	add.w	r8, r8, #1
 80127e4:	e7ec      	b.n	80127c0 <_printf_float+0x318>
 80127e6:	4642      	mov	r2, r8
 80127e8:	4631      	mov	r1, r6
 80127ea:	4628      	mov	r0, r5
 80127ec:	47b8      	blx	r7
 80127ee:	3001      	adds	r0, #1
 80127f0:	d1c1      	bne.n	8012776 <_printf_float+0x2ce>
 80127f2:	e6a5      	b.n	8012540 <_printf_float+0x98>
 80127f4:	2301      	movs	r3, #1
 80127f6:	4631      	mov	r1, r6
 80127f8:	4628      	mov	r0, r5
 80127fa:	9206      	str	r2, [sp, #24]
 80127fc:	47b8      	blx	r7
 80127fe:	3001      	adds	r0, #1
 8012800:	f43f ae9e 	beq.w	8012540 <_printf_float+0x98>
 8012804:	9b07      	ldr	r3, [sp, #28]
 8012806:	9a06      	ldr	r2, [sp, #24]
 8012808:	3301      	adds	r3, #1
 801280a:	9307      	str	r3, [sp, #28]
 801280c:	e7b9      	b.n	8012782 <_printf_float+0x2da>
 801280e:	9b05      	ldr	r3, [sp, #20]
 8012810:	465a      	mov	r2, fp
 8012812:	4631      	mov	r1, r6
 8012814:	4628      	mov	r0, r5
 8012816:	47b8      	blx	r7
 8012818:	3001      	adds	r0, #1
 801281a:	d1bf      	bne.n	801279c <_printf_float+0x2f4>
 801281c:	e690      	b.n	8012540 <_printf_float+0x98>
 801281e:	9a06      	ldr	r2, [sp, #24]
 8012820:	464b      	mov	r3, r9
 8012822:	4442      	add	r2, r8
 8012824:	4631      	mov	r1, r6
 8012826:	4628      	mov	r0, r5
 8012828:	47b8      	blx	r7
 801282a:	3001      	adds	r0, #1
 801282c:	d1c2      	bne.n	80127b4 <_printf_float+0x30c>
 801282e:	e687      	b.n	8012540 <_printf_float+0x98>
 8012830:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012834:	f1b9 0f01 	cmp.w	r9, #1
 8012838:	dc01      	bgt.n	801283e <_printf_float+0x396>
 801283a:	07db      	lsls	r3, r3, #31
 801283c:	d536      	bpl.n	80128ac <_printf_float+0x404>
 801283e:	2301      	movs	r3, #1
 8012840:	4642      	mov	r2, r8
 8012842:	4631      	mov	r1, r6
 8012844:	4628      	mov	r0, r5
 8012846:	47b8      	blx	r7
 8012848:	3001      	adds	r0, #1
 801284a:	f43f ae79 	beq.w	8012540 <_printf_float+0x98>
 801284e:	9b05      	ldr	r3, [sp, #20]
 8012850:	465a      	mov	r2, fp
 8012852:	4631      	mov	r1, r6
 8012854:	4628      	mov	r0, r5
 8012856:	47b8      	blx	r7
 8012858:	3001      	adds	r0, #1
 801285a:	f43f ae71 	beq.w	8012540 <_printf_float+0x98>
 801285e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012862:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286a:	f109 39ff 	add.w	r9, r9, #4294967295
 801286e:	d018      	beq.n	80128a2 <_printf_float+0x3fa>
 8012870:	464b      	mov	r3, r9
 8012872:	f108 0201 	add.w	r2, r8, #1
 8012876:	4631      	mov	r1, r6
 8012878:	4628      	mov	r0, r5
 801287a:	47b8      	blx	r7
 801287c:	3001      	adds	r0, #1
 801287e:	d10c      	bne.n	801289a <_printf_float+0x3f2>
 8012880:	e65e      	b.n	8012540 <_printf_float+0x98>
 8012882:	2301      	movs	r3, #1
 8012884:	465a      	mov	r2, fp
 8012886:	4631      	mov	r1, r6
 8012888:	4628      	mov	r0, r5
 801288a:	47b8      	blx	r7
 801288c:	3001      	adds	r0, #1
 801288e:	f43f ae57 	beq.w	8012540 <_printf_float+0x98>
 8012892:	f108 0801 	add.w	r8, r8, #1
 8012896:	45c8      	cmp	r8, r9
 8012898:	dbf3      	blt.n	8012882 <_printf_float+0x3da>
 801289a:	4653      	mov	r3, sl
 801289c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80128a0:	e6dc      	b.n	801265c <_printf_float+0x1b4>
 80128a2:	f04f 0800 	mov.w	r8, #0
 80128a6:	f104 0b1a 	add.w	fp, r4, #26
 80128aa:	e7f4      	b.n	8012896 <_printf_float+0x3ee>
 80128ac:	2301      	movs	r3, #1
 80128ae:	4642      	mov	r2, r8
 80128b0:	e7e1      	b.n	8012876 <_printf_float+0x3ce>
 80128b2:	2301      	movs	r3, #1
 80128b4:	464a      	mov	r2, r9
 80128b6:	4631      	mov	r1, r6
 80128b8:	4628      	mov	r0, r5
 80128ba:	47b8      	blx	r7
 80128bc:	3001      	adds	r0, #1
 80128be:	f43f ae3f 	beq.w	8012540 <_printf_float+0x98>
 80128c2:	f108 0801 	add.w	r8, r8, #1
 80128c6:	68e3      	ldr	r3, [r4, #12]
 80128c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80128ca:	1a5b      	subs	r3, r3, r1
 80128cc:	4543      	cmp	r3, r8
 80128ce:	dcf0      	bgt.n	80128b2 <_printf_float+0x40a>
 80128d0:	e6f8      	b.n	80126c4 <_printf_float+0x21c>
 80128d2:	f04f 0800 	mov.w	r8, #0
 80128d6:	f104 0919 	add.w	r9, r4, #25
 80128da:	e7f4      	b.n	80128c6 <_printf_float+0x41e>

080128dc <_printf_common>:
 80128dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128e0:	4616      	mov	r6, r2
 80128e2:	4698      	mov	r8, r3
 80128e4:	688a      	ldr	r2, [r1, #8]
 80128e6:	690b      	ldr	r3, [r1, #16]
 80128e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80128ec:	4293      	cmp	r3, r2
 80128ee:	bfb8      	it	lt
 80128f0:	4613      	movlt	r3, r2
 80128f2:	6033      	str	r3, [r6, #0]
 80128f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80128f8:	4607      	mov	r7, r0
 80128fa:	460c      	mov	r4, r1
 80128fc:	b10a      	cbz	r2, 8012902 <_printf_common+0x26>
 80128fe:	3301      	adds	r3, #1
 8012900:	6033      	str	r3, [r6, #0]
 8012902:	6823      	ldr	r3, [r4, #0]
 8012904:	0699      	lsls	r1, r3, #26
 8012906:	bf42      	ittt	mi
 8012908:	6833      	ldrmi	r3, [r6, #0]
 801290a:	3302      	addmi	r3, #2
 801290c:	6033      	strmi	r3, [r6, #0]
 801290e:	6825      	ldr	r5, [r4, #0]
 8012910:	f015 0506 	ands.w	r5, r5, #6
 8012914:	d106      	bne.n	8012924 <_printf_common+0x48>
 8012916:	f104 0a19 	add.w	sl, r4, #25
 801291a:	68e3      	ldr	r3, [r4, #12]
 801291c:	6832      	ldr	r2, [r6, #0]
 801291e:	1a9b      	subs	r3, r3, r2
 8012920:	42ab      	cmp	r3, r5
 8012922:	dc26      	bgt.n	8012972 <_printf_common+0x96>
 8012924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012928:	6822      	ldr	r2, [r4, #0]
 801292a:	3b00      	subs	r3, #0
 801292c:	bf18      	it	ne
 801292e:	2301      	movne	r3, #1
 8012930:	0692      	lsls	r2, r2, #26
 8012932:	d42b      	bmi.n	801298c <_printf_common+0xb0>
 8012934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012938:	4641      	mov	r1, r8
 801293a:	4638      	mov	r0, r7
 801293c:	47c8      	blx	r9
 801293e:	3001      	adds	r0, #1
 8012940:	d01e      	beq.n	8012980 <_printf_common+0xa4>
 8012942:	6823      	ldr	r3, [r4, #0]
 8012944:	6922      	ldr	r2, [r4, #16]
 8012946:	f003 0306 	and.w	r3, r3, #6
 801294a:	2b04      	cmp	r3, #4
 801294c:	bf02      	ittt	eq
 801294e:	68e5      	ldreq	r5, [r4, #12]
 8012950:	6833      	ldreq	r3, [r6, #0]
 8012952:	1aed      	subeq	r5, r5, r3
 8012954:	68a3      	ldr	r3, [r4, #8]
 8012956:	bf0c      	ite	eq
 8012958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801295c:	2500      	movne	r5, #0
 801295e:	4293      	cmp	r3, r2
 8012960:	bfc4      	itt	gt
 8012962:	1a9b      	subgt	r3, r3, r2
 8012964:	18ed      	addgt	r5, r5, r3
 8012966:	2600      	movs	r6, #0
 8012968:	341a      	adds	r4, #26
 801296a:	42b5      	cmp	r5, r6
 801296c:	d11a      	bne.n	80129a4 <_printf_common+0xc8>
 801296e:	2000      	movs	r0, #0
 8012970:	e008      	b.n	8012984 <_printf_common+0xa8>
 8012972:	2301      	movs	r3, #1
 8012974:	4652      	mov	r2, sl
 8012976:	4641      	mov	r1, r8
 8012978:	4638      	mov	r0, r7
 801297a:	47c8      	blx	r9
 801297c:	3001      	adds	r0, #1
 801297e:	d103      	bne.n	8012988 <_printf_common+0xac>
 8012980:	f04f 30ff 	mov.w	r0, #4294967295
 8012984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012988:	3501      	adds	r5, #1
 801298a:	e7c6      	b.n	801291a <_printf_common+0x3e>
 801298c:	18e1      	adds	r1, r4, r3
 801298e:	1c5a      	adds	r2, r3, #1
 8012990:	2030      	movs	r0, #48	@ 0x30
 8012992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012996:	4422      	add	r2, r4
 8012998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801299c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80129a0:	3302      	adds	r3, #2
 80129a2:	e7c7      	b.n	8012934 <_printf_common+0x58>
 80129a4:	2301      	movs	r3, #1
 80129a6:	4622      	mov	r2, r4
 80129a8:	4641      	mov	r1, r8
 80129aa:	4638      	mov	r0, r7
 80129ac:	47c8      	blx	r9
 80129ae:	3001      	adds	r0, #1
 80129b0:	d0e6      	beq.n	8012980 <_printf_common+0xa4>
 80129b2:	3601      	adds	r6, #1
 80129b4:	e7d9      	b.n	801296a <_printf_common+0x8e>
	...

080129b8 <_printf_i>:
 80129b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80129bc:	7e0f      	ldrb	r7, [r1, #24]
 80129be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80129c0:	2f78      	cmp	r7, #120	@ 0x78
 80129c2:	4691      	mov	r9, r2
 80129c4:	4680      	mov	r8, r0
 80129c6:	460c      	mov	r4, r1
 80129c8:	469a      	mov	sl, r3
 80129ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80129ce:	d807      	bhi.n	80129e0 <_printf_i+0x28>
 80129d0:	2f62      	cmp	r7, #98	@ 0x62
 80129d2:	d80a      	bhi.n	80129ea <_printf_i+0x32>
 80129d4:	2f00      	cmp	r7, #0
 80129d6:	f000 80d2 	beq.w	8012b7e <_printf_i+0x1c6>
 80129da:	2f58      	cmp	r7, #88	@ 0x58
 80129dc:	f000 80b9 	beq.w	8012b52 <_printf_i+0x19a>
 80129e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80129e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80129e8:	e03a      	b.n	8012a60 <_printf_i+0xa8>
 80129ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80129ee:	2b15      	cmp	r3, #21
 80129f0:	d8f6      	bhi.n	80129e0 <_printf_i+0x28>
 80129f2:	a101      	add	r1, pc, #4	@ (adr r1, 80129f8 <_printf_i+0x40>)
 80129f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80129f8:	08012a51 	.word	0x08012a51
 80129fc:	08012a65 	.word	0x08012a65
 8012a00:	080129e1 	.word	0x080129e1
 8012a04:	080129e1 	.word	0x080129e1
 8012a08:	080129e1 	.word	0x080129e1
 8012a0c:	080129e1 	.word	0x080129e1
 8012a10:	08012a65 	.word	0x08012a65
 8012a14:	080129e1 	.word	0x080129e1
 8012a18:	080129e1 	.word	0x080129e1
 8012a1c:	080129e1 	.word	0x080129e1
 8012a20:	080129e1 	.word	0x080129e1
 8012a24:	08012b65 	.word	0x08012b65
 8012a28:	08012a8f 	.word	0x08012a8f
 8012a2c:	08012b1f 	.word	0x08012b1f
 8012a30:	080129e1 	.word	0x080129e1
 8012a34:	080129e1 	.word	0x080129e1
 8012a38:	08012b87 	.word	0x08012b87
 8012a3c:	080129e1 	.word	0x080129e1
 8012a40:	08012a8f 	.word	0x08012a8f
 8012a44:	080129e1 	.word	0x080129e1
 8012a48:	080129e1 	.word	0x080129e1
 8012a4c:	08012b27 	.word	0x08012b27
 8012a50:	6833      	ldr	r3, [r6, #0]
 8012a52:	1d1a      	adds	r2, r3, #4
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	6032      	str	r2, [r6, #0]
 8012a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012a60:	2301      	movs	r3, #1
 8012a62:	e09d      	b.n	8012ba0 <_printf_i+0x1e8>
 8012a64:	6833      	ldr	r3, [r6, #0]
 8012a66:	6820      	ldr	r0, [r4, #0]
 8012a68:	1d19      	adds	r1, r3, #4
 8012a6a:	6031      	str	r1, [r6, #0]
 8012a6c:	0606      	lsls	r6, r0, #24
 8012a6e:	d501      	bpl.n	8012a74 <_printf_i+0xbc>
 8012a70:	681d      	ldr	r5, [r3, #0]
 8012a72:	e003      	b.n	8012a7c <_printf_i+0xc4>
 8012a74:	0645      	lsls	r5, r0, #25
 8012a76:	d5fb      	bpl.n	8012a70 <_printf_i+0xb8>
 8012a78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012a7c:	2d00      	cmp	r5, #0
 8012a7e:	da03      	bge.n	8012a88 <_printf_i+0xd0>
 8012a80:	232d      	movs	r3, #45	@ 0x2d
 8012a82:	426d      	negs	r5, r5
 8012a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a88:	4859      	ldr	r0, [pc, #356]	@ (8012bf0 <_printf_i+0x238>)
 8012a8a:	230a      	movs	r3, #10
 8012a8c:	e011      	b.n	8012ab2 <_printf_i+0xfa>
 8012a8e:	6821      	ldr	r1, [r4, #0]
 8012a90:	6833      	ldr	r3, [r6, #0]
 8012a92:	0608      	lsls	r0, r1, #24
 8012a94:	f853 5b04 	ldr.w	r5, [r3], #4
 8012a98:	d402      	bmi.n	8012aa0 <_printf_i+0xe8>
 8012a9a:	0649      	lsls	r1, r1, #25
 8012a9c:	bf48      	it	mi
 8012a9e:	b2ad      	uxthmi	r5, r5
 8012aa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8012aa2:	4853      	ldr	r0, [pc, #332]	@ (8012bf0 <_printf_i+0x238>)
 8012aa4:	6033      	str	r3, [r6, #0]
 8012aa6:	bf14      	ite	ne
 8012aa8:	230a      	movne	r3, #10
 8012aaa:	2308      	moveq	r3, #8
 8012aac:	2100      	movs	r1, #0
 8012aae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012ab2:	6866      	ldr	r6, [r4, #4]
 8012ab4:	60a6      	str	r6, [r4, #8]
 8012ab6:	2e00      	cmp	r6, #0
 8012ab8:	bfa2      	ittt	ge
 8012aba:	6821      	ldrge	r1, [r4, #0]
 8012abc:	f021 0104 	bicge.w	r1, r1, #4
 8012ac0:	6021      	strge	r1, [r4, #0]
 8012ac2:	b90d      	cbnz	r5, 8012ac8 <_printf_i+0x110>
 8012ac4:	2e00      	cmp	r6, #0
 8012ac6:	d04b      	beq.n	8012b60 <_printf_i+0x1a8>
 8012ac8:	4616      	mov	r6, r2
 8012aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ace:	fb03 5711 	mls	r7, r3, r1, r5
 8012ad2:	5dc7      	ldrb	r7, [r0, r7]
 8012ad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012ad8:	462f      	mov	r7, r5
 8012ada:	42bb      	cmp	r3, r7
 8012adc:	460d      	mov	r5, r1
 8012ade:	d9f4      	bls.n	8012aca <_printf_i+0x112>
 8012ae0:	2b08      	cmp	r3, #8
 8012ae2:	d10b      	bne.n	8012afc <_printf_i+0x144>
 8012ae4:	6823      	ldr	r3, [r4, #0]
 8012ae6:	07df      	lsls	r7, r3, #31
 8012ae8:	d508      	bpl.n	8012afc <_printf_i+0x144>
 8012aea:	6923      	ldr	r3, [r4, #16]
 8012aec:	6861      	ldr	r1, [r4, #4]
 8012aee:	4299      	cmp	r1, r3
 8012af0:	bfde      	ittt	le
 8012af2:	2330      	movle	r3, #48	@ 0x30
 8012af4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012af8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012afc:	1b92      	subs	r2, r2, r6
 8012afe:	6122      	str	r2, [r4, #16]
 8012b00:	f8cd a000 	str.w	sl, [sp]
 8012b04:	464b      	mov	r3, r9
 8012b06:	aa03      	add	r2, sp, #12
 8012b08:	4621      	mov	r1, r4
 8012b0a:	4640      	mov	r0, r8
 8012b0c:	f7ff fee6 	bl	80128dc <_printf_common>
 8012b10:	3001      	adds	r0, #1
 8012b12:	d14a      	bne.n	8012baa <_printf_i+0x1f2>
 8012b14:	f04f 30ff 	mov.w	r0, #4294967295
 8012b18:	b004      	add	sp, #16
 8012b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b1e:	6823      	ldr	r3, [r4, #0]
 8012b20:	f043 0320 	orr.w	r3, r3, #32
 8012b24:	6023      	str	r3, [r4, #0]
 8012b26:	4833      	ldr	r0, [pc, #204]	@ (8012bf4 <_printf_i+0x23c>)
 8012b28:	2778      	movs	r7, #120	@ 0x78
 8012b2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	6831      	ldr	r1, [r6, #0]
 8012b32:	061f      	lsls	r7, r3, #24
 8012b34:	f851 5b04 	ldr.w	r5, [r1], #4
 8012b38:	d402      	bmi.n	8012b40 <_printf_i+0x188>
 8012b3a:	065f      	lsls	r7, r3, #25
 8012b3c:	bf48      	it	mi
 8012b3e:	b2ad      	uxthmi	r5, r5
 8012b40:	6031      	str	r1, [r6, #0]
 8012b42:	07d9      	lsls	r1, r3, #31
 8012b44:	bf44      	itt	mi
 8012b46:	f043 0320 	orrmi.w	r3, r3, #32
 8012b4a:	6023      	strmi	r3, [r4, #0]
 8012b4c:	b11d      	cbz	r5, 8012b56 <_printf_i+0x19e>
 8012b4e:	2310      	movs	r3, #16
 8012b50:	e7ac      	b.n	8012aac <_printf_i+0xf4>
 8012b52:	4827      	ldr	r0, [pc, #156]	@ (8012bf0 <_printf_i+0x238>)
 8012b54:	e7e9      	b.n	8012b2a <_printf_i+0x172>
 8012b56:	6823      	ldr	r3, [r4, #0]
 8012b58:	f023 0320 	bic.w	r3, r3, #32
 8012b5c:	6023      	str	r3, [r4, #0]
 8012b5e:	e7f6      	b.n	8012b4e <_printf_i+0x196>
 8012b60:	4616      	mov	r6, r2
 8012b62:	e7bd      	b.n	8012ae0 <_printf_i+0x128>
 8012b64:	6833      	ldr	r3, [r6, #0]
 8012b66:	6825      	ldr	r5, [r4, #0]
 8012b68:	6961      	ldr	r1, [r4, #20]
 8012b6a:	1d18      	adds	r0, r3, #4
 8012b6c:	6030      	str	r0, [r6, #0]
 8012b6e:	062e      	lsls	r6, r5, #24
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	d501      	bpl.n	8012b78 <_printf_i+0x1c0>
 8012b74:	6019      	str	r1, [r3, #0]
 8012b76:	e002      	b.n	8012b7e <_printf_i+0x1c6>
 8012b78:	0668      	lsls	r0, r5, #25
 8012b7a:	d5fb      	bpl.n	8012b74 <_printf_i+0x1bc>
 8012b7c:	8019      	strh	r1, [r3, #0]
 8012b7e:	2300      	movs	r3, #0
 8012b80:	6123      	str	r3, [r4, #16]
 8012b82:	4616      	mov	r6, r2
 8012b84:	e7bc      	b.n	8012b00 <_printf_i+0x148>
 8012b86:	6833      	ldr	r3, [r6, #0]
 8012b88:	1d1a      	adds	r2, r3, #4
 8012b8a:	6032      	str	r2, [r6, #0]
 8012b8c:	681e      	ldr	r6, [r3, #0]
 8012b8e:	6862      	ldr	r2, [r4, #4]
 8012b90:	2100      	movs	r1, #0
 8012b92:	4630      	mov	r0, r6
 8012b94:	f7ed fba4 	bl	80002e0 <memchr>
 8012b98:	b108      	cbz	r0, 8012b9e <_printf_i+0x1e6>
 8012b9a:	1b80      	subs	r0, r0, r6
 8012b9c:	6060      	str	r0, [r4, #4]
 8012b9e:	6863      	ldr	r3, [r4, #4]
 8012ba0:	6123      	str	r3, [r4, #16]
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ba8:	e7aa      	b.n	8012b00 <_printf_i+0x148>
 8012baa:	6923      	ldr	r3, [r4, #16]
 8012bac:	4632      	mov	r2, r6
 8012bae:	4649      	mov	r1, r9
 8012bb0:	4640      	mov	r0, r8
 8012bb2:	47d0      	blx	sl
 8012bb4:	3001      	adds	r0, #1
 8012bb6:	d0ad      	beq.n	8012b14 <_printf_i+0x15c>
 8012bb8:	6823      	ldr	r3, [r4, #0]
 8012bba:	079b      	lsls	r3, r3, #30
 8012bbc:	d413      	bmi.n	8012be6 <_printf_i+0x22e>
 8012bbe:	68e0      	ldr	r0, [r4, #12]
 8012bc0:	9b03      	ldr	r3, [sp, #12]
 8012bc2:	4298      	cmp	r0, r3
 8012bc4:	bfb8      	it	lt
 8012bc6:	4618      	movlt	r0, r3
 8012bc8:	e7a6      	b.n	8012b18 <_printf_i+0x160>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	4632      	mov	r2, r6
 8012bce:	4649      	mov	r1, r9
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	47d0      	blx	sl
 8012bd4:	3001      	adds	r0, #1
 8012bd6:	d09d      	beq.n	8012b14 <_printf_i+0x15c>
 8012bd8:	3501      	adds	r5, #1
 8012bda:	68e3      	ldr	r3, [r4, #12]
 8012bdc:	9903      	ldr	r1, [sp, #12]
 8012bde:	1a5b      	subs	r3, r3, r1
 8012be0:	42ab      	cmp	r3, r5
 8012be2:	dcf2      	bgt.n	8012bca <_printf_i+0x212>
 8012be4:	e7eb      	b.n	8012bbe <_printf_i+0x206>
 8012be6:	2500      	movs	r5, #0
 8012be8:	f104 0619 	add.w	r6, r4, #25
 8012bec:	e7f5      	b.n	8012bda <_printf_i+0x222>
 8012bee:	bf00      	nop
 8012bf0:	08015906 	.word	0x08015906
 8012bf4:	08015917 	.word	0x08015917

08012bf8 <std>:
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	b510      	push	{r4, lr}
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8012c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c06:	6083      	str	r3, [r0, #8]
 8012c08:	8181      	strh	r1, [r0, #12]
 8012c0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8012c0c:	81c2      	strh	r2, [r0, #14]
 8012c0e:	6183      	str	r3, [r0, #24]
 8012c10:	4619      	mov	r1, r3
 8012c12:	2208      	movs	r2, #8
 8012c14:	305c      	adds	r0, #92	@ 0x5c
 8012c16:	f000 f914 	bl	8012e42 <memset>
 8012c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c50 <std+0x58>)
 8012c1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8012c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8012c54 <std+0x5c>)
 8012c20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012c22:	4b0d      	ldr	r3, [pc, #52]	@ (8012c58 <std+0x60>)
 8012c24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012c26:	4b0d      	ldr	r3, [pc, #52]	@ (8012c5c <std+0x64>)
 8012c28:	6323      	str	r3, [r4, #48]	@ 0x30
 8012c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c60 <std+0x68>)
 8012c2c:	6224      	str	r4, [r4, #32]
 8012c2e:	429c      	cmp	r4, r3
 8012c30:	d006      	beq.n	8012c40 <std+0x48>
 8012c32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012c36:	4294      	cmp	r4, r2
 8012c38:	d002      	beq.n	8012c40 <std+0x48>
 8012c3a:	33d0      	adds	r3, #208	@ 0xd0
 8012c3c:	429c      	cmp	r4, r3
 8012c3e:	d105      	bne.n	8012c4c <std+0x54>
 8012c40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c48:	f000 b988 	b.w	8012f5c <__retarget_lock_init_recursive>
 8012c4c:	bd10      	pop	{r4, pc}
 8012c4e:	bf00      	nop
 8012c50:	08012dbd 	.word	0x08012dbd
 8012c54:	08012ddf 	.word	0x08012ddf
 8012c58:	08012e17 	.word	0x08012e17
 8012c5c:	08012e3b 	.word	0x08012e3b
 8012c60:	240022bc 	.word	0x240022bc

08012c64 <stdio_exit_handler>:
 8012c64:	4a02      	ldr	r2, [pc, #8]	@ (8012c70 <stdio_exit_handler+0xc>)
 8012c66:	4903      	ldr	r1, [pc, #12]	@ (8012c74 <stdio_exit_handler+0x10>)
 8012c68:	4803      	ldr	r0, [pc, #12]	@ (8012c78 <stdio_exit_handler+0x14>)
 8012c6a:	f000 b869 	b.w	8012d40 <_fwalk_sglue>
 8012c6e:	bf00      	nop
 8012c70:	24000108 	.word	0x24000108
 8012c74:	08014675 	.word	0x08014675
 8012c78:	24000118 	.word	0x24000118

08012c7c <cleanup_stdio>:
 8012c7c:	6841      	ldr	r1, [r0, #4]
 8012c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8012cb0 <cleanup_stdio+0x34>)
 8012c80:	4299      	cmp	r1, r3
 8012c82:	b510      	push	{r4, lr}
 8012c84:	4604      	mov	r4, r0
 8012c86:	d001      	beq.n	8012c8c <cleanup_stdio+0x10>
 8012c88:	f001 fcf4 	bl	8014674 <_fflush_r>
 8012c8c:	68a1      	ldr	r1, [r4, #8]
 8012c8e:	4b09      	ldr	r3, [pc, #36]	@ (8012cb4 <cleanup_stdio+0x38>)
 8012c90:	4299      	cmp	r1, r3
 8012c92:	d002      	beq.n	8012c9a <cleanup_stdio+0x1e>
 8012c94:	4620      	mov	r0, r4
 8012c96:	f001 fced 	bl	8014674 <_fflush_r>
 8012c9a:	68e1      	ldr	r1, [r4, #12]
 8012c9c:	4b06      	ldr	r3, [pc, #24]	@ (8012cb8 <cleanup_stdio+0x3c>)
 8012c9e:	4299      	cmp	r1, r3
 8012ca0:	d004      	beq.n	8012cac <cleanup_stdio+0x30>
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ca8:	f001 bce4 	b.w	8014674 <_fflush_r>
 8012cac:	bd10      	pop	{r4, pc}
 8012cae:	bf00      	nop
 8012cb0:	240022bc 	.word	0x240022bc
 8012cb4:	24002324 	.word	0x24002324
 8012cb8:	2400238c 	.word	0x2400238c

08012cbc <global_stdio_init.part.0>:
 8012cbc:	b510      	push	{r4, lr}
 8012cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8012cec <global_stdio_init.part.0+0x30>)
 8012cc0:	4c0b      	ldr	r4, [pc, #44]	@ (8012cf0 <global_stdio_init.part.0+0x34>)
 8012cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8012cf4 <global_stdio_init.part.0+0x38>)
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	2200      	movs	r2, #0
 8012cca:	2104      	movs	r1, #4
 8012ccc:	f7ff ff94 	bl	8012bf8 <std>
 8012cd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	2109      	movs	r1, #9
 8012cd8:	f7ff ff8e 	bl	8012bf8 <std>
 8012cdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012ce0:	2202      	movs	r2, #2
 8012ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ce6:	2112      	movs	r1, #18
 8012ce8:	f7ff bf86 	b.w	8012bf8 <std>
 8012cec:	240023f4 	.word	0x240023f4
 8012cf0:	240022bc 	.word	0x240022bc
 8012cf4:	08012c65 	.word	0x08012c65

08012cf8 <__sfp_lock_acquire>:
 8012cf8:	4801      	ldr	r0, [pc, #4]	@ (8012d00 <__sfp_lock_acquire+0x8>)
 8012cfa:	f000 b930 	b.w	8012f5e <__retarget_lock_acquire_recursive>
 8012cfe:	bf00      	nop
 8012d00:	240023fd 	.word	0x240023fd

08012d04 <__sfp_lock_release>:
 8012d04:	4801      	ldr	r0, [pc, #4]	@ (8012d0c <__sfp_lock_release+0x8>)
 8012d06:	f000 b92b 	b.w	8012f60 <__retarget_lock_release_recursive>
 8012d0a:	bf00      	nop
 8012d0c:	240023fd 	.word	0x240023fd

08012d10 <__sinit>:
 8012d10:	b510      	push	{r4, lr}
 8012d12:	4604      	mov	r4, r0
 8012d14:	f7ff fff0 	bl	8012cf8 <__sfp_lock_acquire>
 8012d18:	6a23      	ldr	r3, [r4, #32]
 8012d1a:	b11b      	cbz	r3, 8012d24 <__sinit+0x14>
 8012d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d20:	f7ff bff0 	b.w	8012d04 <__sfp_lock_release>
 8012d24:	4b04      	ldr	r3, [pc, #16]	@ (8012d38 <__sinit+0x28>)
 8012d26:	6223      	str	r3, [r4, #32]
 8012d28:	4b04      	ldr	r3, [pc, #16]	@ (8012d3c <__sinit+0x2c>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d1f5      	bne.n	8012d1c <__sinit+0xc>
 8012d30:	f7ff ffc4 	bl	8012cbc <global_stdio_init.part.0>
 8012d34:	e7f2      	b.n	8012d1c <__sinit+0xc>
 8012d36:	bf00      	nop
 8012d38:	08012c7d 	.word	0x08012c7d
 8012d3c:	240023f4 	.word	0x240023f4

08012d40 <_fwalk_sglue>:
 8012d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d44:	4607      	mov	r7, r0
 8012d46:	4688      	mov	r8, r1
 8012d48:	4614      	mov	r4, r2
 8012d4a:	2600      	movs	r6, #0
 8012d4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d50:	f1b9 0901 	subs.w	r9, r9, #1
 8012d54:	d505      	bpl.n	8012d62 <_fwalk_sglue+0x22>
 8012d56:	6824      	ldr	r4, [r4, #0]
 8012d58:	2c00      	cmp	r4, #0
 8012d5a:	d1f7      	bne.n	8012d4c <_fwalk_sglue+0xc>
 8012d5c:	4630      	mov	r0, r6
 8012d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d62:	89ab      	ldrh	r3, [r5, #12]
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d907      	bls.n	8012d78 <_fwalk_sglue+0x38>
 8012d68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	d003      	beq.n	8012d78 <_fwalk_sglue+0x38>
 8012d70:	4629      	mov	r1, r5
 8012d72:	4638      	mov	r0, r7
 8012d74:	47c0      	blx	r8
 8012d76:	4306      	orrs	r6, r0
 8012d78:	3568      	adds	r5, #104	@ 0x68
 8012d7a:	e7e9      	b.n	8012d50 <_fwalk_sglue+0x10>

08012d7c <siprintf>:
 8012d7c:	b40e      	push	{r1, r2, r3}
 8012d7e:	b500      	push	{lr}
 8012d80:	b09c      	sub	sp, #112	@ 0x70
 8012d82:	ab1d      	add	r3, sp, #116	@ 0x74
 8012d84:	9002      	str	r0, [sp, #8]
 8012d86:	9006      	str	r0, [sp, #24]
 8012d88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012d8c:	4809      	ldr	r0, [pc, #36]	@ (8012db4 <siprintf+0x38>)
 8012d8e:	9107      	str	r1, [sp, #28]
 8012d90:	9104      	str	r1, [sp, #16]
 8012d92:	4909      	ldr	r1, [pc, #36]	@ (8012db8 <siprintf+0x3c>)
 8012d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d98:	9105      	str	r1, [sp, #20]
 8012d9a:	6800      	ldr	r0, [r0, #0]
 8012d9c:	9301      	str	r3, [sp, #4]
 8012d9e:	a902      	add	r1, sp, #8
 8012da0:	f001 fae8 	bl	8014374 <_svfiprintf_r>
 8012da4:	9b02      	ldr	r3, [sp, #8]
 8012da6:	2200      	movs	r2, #0
 8012da8:	701a      	strb	r2, [r3, #0]
 8012daa:	b01c      	add	sp, #112	@ 0x70
 8012dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012db0:	b003      	add	sp, #12
 8012db2:	4770      	bx	lr
 8012db4:	24000114 	.word	0x24000114
 8012db8:	ffff0208 	.word	0xffff0208

08012dbc <__sread>:
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	460c      	mov	r4, r1
 8012dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dc4:	f000 f86c 	bl	8012ea0 <_read_r>
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	bfab      	itete	ge
 8012dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012dce:	89a3      	ldrhlt	r3, [r4, #12]
 8012dd0:	181b      	addge	r3, r3, r0
 8012dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012dd6:	bfac      	ite	ge
 8012dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012dda:	81a3      	strhlt	r3, [r4, #12]
 8012ddc:	bd10      	pop	{r4, pc}

08012dde <__swrite>:
 8012dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de2:	461f      	mov	r7, r3
 8012de4:	898b      	ldrh	r3, [r1, #12]
 8012de6:	05db      	lsls	r3, r3, #23
 8012de8:	4605      	mov	r5, r0
 8012dea:	460c      	mov	r4, r1
 8012dec:	4616      	mov	r6, r2
 8012dee:	d505      	bpl.n	8012dfc <__swrite+0x1e>
 8012df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012df4:	2302      	movs	r3, #2
 8012df6:	2200      	movs	r2, #0
 8012df8:	f000 f840 	bl	8012e7c <_lseek_r>
 8012dfc:	89a3      	ldrh	r3, [r4, #12]
 8012dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012e06:	81a3      	strh	r3, [r4, #12]
 8012e08:	4632      	mov	r2, r6
 8012e0a:	463b      	mov	r3, r7
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e12:	f000 b867 	b.w	8012ee4 <_write_r>

08012e16 <__sseek>:
 8012e16:	b510      	push	{r4, lr}
 8012e18:	460c      	mov	r4, r1
 8012e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e1e:	f000 f82d 	bl	8012e7c <_lseek_r>
 8012e22:	1c43      	adds	r3, r0, #1
 8012e24:	89a3      	ldrh	r3, [r4, #12]
 8012e26:	bf15      	itete	ne
 8012e28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012e2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012e2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012e32:	81a3      	strheq	r3, [r4, #12]
 8012e34:	bf18      	it	ne
 8012e36:	81a3      	strhne	r3, [r4, #12]
 8012e38:	bd10      	pop	{r4, pc}

08012e3a <__sclose>:
 8012e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e3e:	f000 b80d 	b.w	8012e5c <_close_r>

08012e42 <memset>:
 8012e42:	4402      	add	r2, r0
 8012e44:	4603      	mov	r3, r0
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d100      	bne.n	8012e4c <memset+0xa>
 8012e4a:	4770      	bx	lr
 8012e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8012e50:	e7f9      	b.n	8012e46 <memset+0x4>
	...

08012e54 <_localeconv_r>:
 8012e54:	4800      	ldr	r0, [pc, #0]	@ (8012e58 <_localeconv_r+0x4>)
 8012e56:	4770      	bx	lr
 8012e58:	24000254 	.word	0x24000254

08012e5c <_close_r>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	4d06      	ldr	r5, [pc, #24]	@ (8012e78 <_close_r+0x1c>)
 8012e60:	2300      	movs	r3, #0
 8012e62:	4604      	mov	r4, r0
 8012e64:	4608      	mov	r0, r1
 8012e66:	602b      	str	r3, [r5, #0]
 8012e68:	f7ee fbe0 	bl	800162c <_close>
 8012e6c:	1c43      	adds	r3, r0, #1
 8012e6e:	d102      	bne.n	8012e76 <_close_r+0x1a>
 8012e70:	682b      	ldr	r3, [r5, #0]
 8012e72:	b103      	cbz	r3, 8012e76 <_close_r+0x1a>
 8012e74:	6023      	str	r3, [r4, #0]
 8012e76:	bd38      	pop	{r3, r4, r5, pc}
 8012e78:	240023f8 	.word	0x240023f8

08012e7c <_lseek_r>:
 8012e7c:	b538      	push	{r3, r4, r5, lr}
 8012e7e:	4d07      	ldr	r5, [pc, #28]	@ (8012e9c <_lseek_r+0x20>)
 8012e80:	4604      	mov	r4, r0
 8012e82:	4608      	mov	r0, r1
 8012e84:	4611      	mov	r1, r2
 8012e86:	2200      	movs	r2, #0
 8012e88:	602a      	str	r2, [r5, #0]
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	f7ee fbf5 	bl	800167a <_lseek>
 8012e90:	1c43      	adds	r3, r0, #1
 8012e92:	d102      	bne.n	8012e9a <_lseek_r+0x1e>
 8012e94:	682b      	ldr	r3, [r5, #0]
 8012e96:	b103      	cbz	r3, 8012e9a <_lseek_r+0x1e>
 8012e98:	6023      	str	r3, [r4, #0]
 8012e9a:	bd38      	pop	{r3, r4, r5, pc}
 8012e9c:	240023f8 	.word	0x240023f8

08012ea0 <_read_r>:
 8012ea0:	b538      	push	{r3, r4, r5, lr}
 8012ea2:	4d07      	ldr	r5, [pc, #28]	@ (8012ec0 <_read_r+0x20>)
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	4608      	mov	r0, r1
 8012ea8:	4611      	mov	r1, r2
 8012eaa:	2200      	movs	r2, #0
 8012eac:	602a      	str	r2, [r5, #0]
 8012eae:	461a      	mov	r2, r3
 8012eb0:	f7ee fb83 	bl	80015ba <_read>
 8012eb4:	1c43      	adds	r3, r0, #1
 8012eb6:	d102      	bne.n	8012ebe <_read_r+0x1e>
 8012eb8:	682b      	ldr	r3, [r5, #0]
 8012eba:	b103      	cbz	r3, 8012ebe <_read_r+0x1e>
 8012ebc:	6023      	str	r3, [r4, #0]
 8012ebe:	bd38      	pop	{r3, r4, r5, pc}
 8012ec0:	240023f8 	.word	0x240023f8

08012ec4 <_sbrk_r>:
 8012ec4:	b538      	push	{r3, r4, r5, lr}
 8012ec6:	4d06      	ldr	r5, [pc, #24]	@ (8012ee0 <_sbrk_r+0x1c>)
 8012ec8:	2300      	movs	r3, #0
 8012eca:	4604      	mov	r4, r0
 8012ecc:	4608      	mov	r0, r1
 8012ece:	602b      	str	r3, [r5, #0]
 8012ed0:	f7ee fbe0 	bl	8001694 <_sbrk>
 8012ed4:	1c43      	adds	r3, r0, #1
 8012ed6:	d102      	bne.n	8012ede <_sbrk_r+0x1a>
 8012ed8:	682b      	ldr	r3, [r5, #0]
 8012eda:	b103      	cbz	r3, 8012ede <_sbrk_r+0x1a>
 8012edc:	6023      	str	r3, [r4, #0]
 8012ede:	bd38      	pop	{r3, r4, r5, pc}
 8012ee0:	240023f8 	.word	0x240023f8

08012ee4 <_write_r>:
 8012ee4:	b538      	push	{r3, r4, r5, lr}
 8012ee6:	4d07      	ldr	r5, [pc, #28]	@ (8012f04 <_write_r+0x20>)
 8012ee8:	4604      	mov	r4, r0
 8012eea:	4608      	mov	r0, r1
 8012eec:	4611      	mov	r1, r2
 8012eee:	2200      	movs	r2, #0
 8012ef0:	602a      	str	r2, [r5, #0]
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	f7ee fb7e 	bl	80015f4 <_write>
 8012ef8:	1c43      	adds	r3, r0, #1
 8012efa:	d102      	bne.n	8012f02 <_write_r+0x1e>
 8012efc:	682b      	ldr	r3, [r5, #0]
 8012efe:	b103      	cbz	r3, 8012f02 <_write_r+0x1e>
 8012f00:	6023      	str	r3, [r4, #0]
 8012f02:	bd38      	pop	{r3, r4, r5, pc}
 8012f04:	240023f8 	.word	0x240023f8

08012f08 <__errno>:
 8012f08:	4b01      	ldr	r3, [pc, #4]	@ (8012f10 <__errno+0x8>)
 8012f0a:	6818      	ldr	r0, [r3, #0]
 8012f0c:	4770      	bx	lr
 8012f0e:	bf00      	nop
 8012f10:	24000114 	.word	0x24000114

08012f14 <__libc_init_array>:
 8012f14:	b570      	push	{r4, r5, r6, lr}
 8012f16:	4d0d      	ldr	r5, [pc, #52]	@ (8012f4c <__libc_init_array+0x38>)
 8012f18:	4c0d      	ldr	r4, [pc, #52]	@ (8012f50 <__libc_init_array+0x3c>)
 8012f1a:	1b64      	subs	r4, r4, r5
 8012f1c:	10a4      	asrs	r4, r4, #2
 8012f1e:	2600      	movs	r6, #0
 8012f20:	42a6      	cmp	r6, r4
 8012f22:	d109      	bne.n	8012f38 <__libc_init_array+0x24>
 8012f24:	4d0b      	ldr	r5, [pc, #44]	@ (8012f54 <__libc_init_array+0x40>)
 8012f26:	4c0c      	ldr	r4, [pc, #48]	@ (8012f58 <__libc_init_array+0x44>)
 8012f28:	f002 f862 	bl	8014ff0 <_init>
 8012f2c:	1b64      	subs	r4, r4, r5
 8012f2e:	10a4      	asrs	r4, r4, #2
 8012f30:	2600      	movs	r6, #0
 8012f32:	42a6      	cmp	r6, r4
 8012f34:	d105      	bne.n	8012f42 <__libc_init_array+0x2e>
 8012f36:	bd70      	pop	{r4, r5, r6, pc}
 8012f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f3c:	4798      	blx	r3
 8012f3e:	3601      	adds	r6, #1
 8012f40:	e7ee      	b.n	8012f20 <__libc_init_array+0xc>
 8012f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f46:	4798      	blx	r3
 8012f48:	3601      	adds	r6, #1
 8012f4a:	e7f2      	b.n	8012f32 <__libc_init_array+0x1e>
 8012f4c:	08015c80 	.word	0x08015c80
 8012f50:	08015c80 	.word	0x08015c80
 8012f54:	08015c80 	.word	0x08015c80
 8012f58:	08015c84 	.word	0x08015c84

08012f5c <__retarget_lock_init_recursive>:
 8012f5c:	4770      	bx	lr

08012f5e <__retarget_lock_acquire_recursive>:
 8012f5e:	4770      	bx	lr

08012f60 <__retarget_lock_release_recursive>:
 8012f60:	4770      	bx	lr

08012f62 <quorem>:
 8012f62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f66:	6903      	ldr	r3, [r0, #16]
 8012f68:	690c      	ldr	r4, [r1, #16]
 8012f6a:	42a3      	cmp	r3, r4
 8012f6c:	4607      	mov	r7, r0
 8012f6e:	db7e      	blt.n	801306e <quorem+0x10c>
 8012f70:	3c01      	subs	r4, #1
 8012f72:	f101 0814 	add.w	r8, r1, #20
 8012f76:	00a3      	lsls	r3, r4, #2
 8012f78:	f100 0514 	add.w	r5, r0, #20
 8012f7c:	9300      	str	r3, [sp, #0]
 8012f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012f82:	9301      	str	r3, [sp, #4]
 8012f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012f8c:	3301      	adds	r3, #1
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012f94:	fbb2 f6f3 	udiv	r6, r2, r3
 8012f98:	d32e      	bcc.n	8012ff8 <quorem+0x96>
 8012f9a:	f04f 0a00 	mov.w	sl, #0
 8012f9e:	46c4      	mov	ip, r8
 8012fa0:	46ae      	mov	lr, r5
 8012fa2:	46d3      	mov	fp, sl
 8012fa4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012fa8:	b298      	uxth	r0, r3
 8012faa:	fb06 a000 	mla	r0, r6, r0, sl
 8012fae:	0c02      	lsrs	r2, r0, #16
 8012fb0:	0c1b      	lsrs	r3, r3, #16
 8012fb2:	fb06 2303 	mla	r3, r6, r3, r2
 8012fb6:	f8de 2000 	ldr.w	r2, [lr]
 8012fba:	b280      	uxth	r0, r0
 8012fbc:	b292      	uxth	r2, r2
 8012fbe:	1a12      	subs	r2, r2, r0
 8012fc0:	445a      	add	r2, fp
 8012fc2:	f8de 0000 	ldr.w	r0, [lr]
 8012fc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012fd0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012fd4:	b292      	uxth	r2, r2
 8012fd6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012fda:	45e1      	cmp	r9, ip
 8012fdc:	f84e 2b04 	str.w	r2, [lr], #4
 8012fe0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012fe4:	d2de      	bcs.n	8012fa4 <quorem+0x42>
 8012fe6:	9b00      	ldr	r3, [sp, #0]
 8012fe8:	58eb      	ldr	r3, [r5, r3]
 8012fea:	b92b      	cbnz	r3, 8012ff8 <quorem+0x96>
 8012fec:	9b01      	ldr	r3, [sp, #4]
 8012fee:	3b04      	subs	r3, #4
 8012ff0:	429d      	cmp	r5, r3
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	d32f      	bcc.n	8013056 <quorem+0xf4>
 8012ff6:	613c      	str	r4, [r7, #16]
 8012ff8:	4638      	mov	r0, r7
 8012ffa:	f001 f857 	bl	80140ac <__mcmp>
 8012ffe:	2800      	cmp	r0, #0
 8013000:	db25      	blt.n	801304e <quorem+0xec>
 8013002:	4629      	mov	r1, r5
 8013004:	2000      	movs	r0, #0
 8013006:	f858 2b04 	ldr.w	r2, [r8], #4
 801300a:	f8d1 c000 	ldr.w	ip, [r1]
 801300e:	fa1f fe82 	uxth.w	lr, r2
 8013012:	fa1f f38c 	uxth.w	r3, ip
 8013016:	eba3 030e 	sub.w	r3, r3, lr
 801301a:	4403      	add	r3, r0
 801301c:	0c12      	lsrs	r2, r2, #16
 801301e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013022:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013026:	b29b      	uxth	r3, r3
 8013028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801302c:	45c1      	cmp	r9, r8
 801302e:	f841 3b04 	str.w	r3, [r1], #4
 8013032:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013036:	d2e6      	bcs.n	8013006 <quorem+0xa4>
 8013038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801303c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013040:	b922      	cbnz	r2, 801304c <quorem+0xea>
 8013042:	3b04      	subs	r3, #4
 8013044:	429d      	cmp	r5, r3
 8013046:	461a      	mov	r2, r3
 8013048:	d30b      	bcc.n	8013062 <quorem+0x100>
 801304a:	613c      	str	r4, [r7, #16]
 801304c:	3601      	adds	r6, #1
 801304e:	4630      	mov	r0, r6
 8013050:	b003      	add	sp, #12
 8013052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013056:	6812      	ldr	r2, [r2, #0]
 8013058:	3b04      	subs	r3, #4
 801305a:	2a00      	cmp	r2, #0
 801305c:	d1cb      	bne.n	8012ff6 <quorem+0x94>
 801305e:	3c01      	subs	r4, #1
 8013060:	e7c6      	b.n	8012ff0 <quorem+0x8e>
 8013062:	6812      	ldr	r2, [r2, #0]
 8013064:	3b04      	subs	r3, #4
 8013066:	2a00      	cmp	r2, #0
 8013068:	d1ef      	bne.n	801304a <quorem+0xe8>
 801306a:	3c01      	subs	r4, #1
 801306c:	e7ea      	b.n	8013044 <quorem+0xe2>
 801306e:	2000      	movs	r0, #0
 8013070:	e7ee      	b.n	8013050 <quorem+0xee>
 8013072:	0000      	movs	r0, r0
 8013074:	0000      	movs	r0, r0
	...

08013078 <_dtoa_r>:
 8013078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801307c:	ed2d 8b02 	vpush	{d8}
 8013080:	69c7      	ldr	r7, [r0, #28]
 8013082:	b091      	sub	sp, #68	@ 0x44
 8013084:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013088:	ec55 4b10 	vmov	r4, r5, d0
 801308c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801308e:	9107      	str	r1, [sp, #28]
 8013090:	4681      	mov	r9, r0
 8013092:	9209      	str	r2, [sp, #36]	@ 0x24
 8013094:	930d      	str	r3, [sp, #52]	@ 0x34
 8013096:	b97f      	cbnz	r7, 80130b8 <_dtoa_r+0x40>
 8013098:	2010      	movs	r0, #16
 801309a:	f7ff f8bf 	bl	801221c <malloc>
 801309e:	4602      	mov	r2, r0
 80130a0:	f8c9 001c 	str.w	r0, [r9, #28]
 80130a4:	b920      	cbnz	r0, 80130b0 <_dtoa_r+0x38>
 80130a6:	4ba0      	ldr	r3, [pc, #640]	@ (8013328 <_dtoa_r+0x2b0>)
 80130a8:	21ef      	movs	r1, #239	@ 0xef
 80130aa:	48a0      	ldr	r0, [pc, #640]	@ (801332c <_dtoa_r+0x2b4>)
 80130ac:	f001 fb32 	bl	8014714 <__assert_func>
 80130b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80130b4:	6007      	str	r7, [r0, #0]
 80130b6:	60c7      	str	r7, [r0, #12]
 80130b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80130bc:	6819      	ldr	r1, [r3, #0]
 80130be:	b159      	cbz	r1, 80130d8 <_dtoa_r+0x60>
 80130c0:	685a      	ldr	r2, [r3, #4]
 80130c2:	604a      	str	r2, [r1, #4]
 80130c4:	2301      	movs	r3, #1
 80130c6:	4093      	lsls	r3, r2
 80130c8:	608b      	str	r3, [r1, #8]
 80130ca:	4648      	mov	r0, r9
 80130cc:	f000 fdb4 	bl	8013c38 <_Bfree>
 80130d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80130d4:	2200      	movs	r2, #0
 80130d6:	601a      	str	r2, [r3, #0]
 80130d8:	1e2b      	subs	r3, r5, #0
 80130da:	bfbb      	ittet	lt
 80130dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80130e0:	9303      	strlt	r3, [sp, #12]
 80130e2:	2300      	movge	r3, #0
 80130e4:	2201      	movlt	r2, #1
 80130e6:	bfac      	ite	ge
 80130e8:	6033      	strge	r3, [r6, #0]
 80130ea:	6032      	strlt	r2, [r6, #0]
 80130ec:	4b90      	ldr	r3, [pc, #576]	@ (8013330 <_dtoa_r+0x2b8>)
 80130ee:	9e03      	ldr	r6, [sp, #12]
 80130f0:	43b3      	bics	r3, r6
 80130f2:	d110      	bne.n	8013116 <_dtoa_r+0x9e>
 80130f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80130f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80130fa:	6013      	str	r3, [r2, #0]
 80130fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013100:	4323      	orrs	r3, r4
 8013102:	f000 84de 	beq.w	8013ac2 <_dtoa_r+0xa4a>
 8013106:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013108:	4f8a      	ldr	r7, [pc, #552]	@ (8013334 <_dtoa_r+0x2bc>)
 801310a:	2b00      	cmp	r3, #0
 801310c:	f000 84e0 	beq.w	8013ad0 <_dtoa_r+0xa58>
 8013110:	1cfb      	adds	r3, r7, #3
 8013112:	f000 bcdb 	b.w	8013acc <_dtoa_r+0xa54>
 8013116:	ed9d 8b02 	vldr	d8, [sp, #8]
 801311a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013122:	d10a      	bne.n	801313a <_dtoa_r+0xc2>
 8013124:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013126:	2301      	movs	r3, #1
 8013128:	6013      	str	r3, [r2, #0]
 801312a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801312c:	b113      	cbz	r3, 8013134 <_dtoa_r+0xbc>
 801312e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013130:	4b81      	ldr	r3, [pc, #516]	@ (8013338 <_dtoa_r+0x2c0>)
 8013132:	6013      	str	r3, [r2, #0]
 8013134:	4f81      	ldr	r7, [pc, #516]	@ (801333c <_dtoa_r+0x2c4>)
 8013136:	f000 bccb 	b.w	8013ad0 <_dtoa_r+0xa58>
 801313a:	aa0e      	add	r2, sp, #56	@ 0x38
 801313c:	a90f      	add	r1, sp, #60	@ 0x3c
 801313e:	4648      	mov	r0, r9
 8013140:	eeb0 0b48 	vmov.f64	d0, d8
 8013144:	f001 f862 	bl	801420c <__d2b>
 8013148:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801314c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801314e:	9001      	str	r0, [sp, #4]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d045      	beq.n	80131e0 <_dtoa_r+0x168>
 8013154:	eeb0 7b48 	vmov.f64	d7, d8
 8013158:	ee18 1a90 	vmov	r1, s17
 801315c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013160:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8013164:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013168:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801316c:	2500      	movs	r5, #0
 801316e:	ee07 1a90 	vmov	s15, r1
 8013172:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8013176:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013310 <_dtoa_r+0x298>
 801317a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801317e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013318 <_dtoa_r+0x2a0>
 8013182:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013186:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013320 <_dtoa_r+0x2a8>
 801318a:	ee07 3a90 	vmov	s15, r3
 801318e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013192:	eeb0 7b46 	vmov.f64	d7, d6
 8013196:	eea4 7b05 	vfma.f64	d7, d4, d5
 801319a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801319e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80131a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a6:	ee16 8a90 	vmov	r8, s13
 80131aa:	d508      	bpl.n	80131be <_dtoa_r+0x146>
 80131ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80131b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80131b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b8:	bf18      	it	ne
 80131ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 80131be:	f1b8 0f16 	cmp.w	r8, #22
 80131c2:	d82b      	bhi.n	801321c <_dtoa_r+0x1a4>
 80131c4:	495e      	ldr	r1, [pc, #376]	@ (8013340 <_dtoa_r+0x2c8>)
 80131c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80131ca:	ed91 7b00 	vldr	d7, [r1]
 80131ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80131d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d6:	d501      	bpl.n	80131dc <_dtoa_r+0x164>
 80131d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80131dc:	2100      	movs	r1, #0
 80131de:	e01e      	b.n	801321e <_dtoa_r+0x1a6>
 80131e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131e2:	4413      	add	r3, r2
 80131e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80131e8:	2920      	cmp	r1, #32
 80131ea:	bfc1      	itttt	gt
 80131ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80131f0:	408e      	lslgt	r6, r1
 80131f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80131f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80131fa:	bfd6      	itet	le
 80131fc:	f1c1 0120 	rsble	r1, r1, #32
 8013200:	4331      	orrgt	r1, r6
 8013202:	fa04 f101 	lslle.w	r1, r4, r1
 8013206:	ee07 1a90 	vmov	s15, r1
 801320a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801320e:	3b01      	subs	r3, #1
 8013210:	ee17 1a90 	vmov	r1, s15
 8013214:	2501      	movs	r5, #1
 8013216:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801321a:	e7a8      	b.n	801316e <_dtoa_r+0xf6>
 801321c:	2101      	movs	r1, #1
 801321e:	1ad2      	subs	r2, r2, r3
 8013220:	1e53      	subs	r3, r2, #1
 8013222:	9306      	str	r3, [sp, #24]
 8013224:	bf45      	ittet	mi
 8013226:	f1c2 0301 	rsbmi	r3, r2, #1
 801322a:	9305      	strmi	r3, [sp, #20]
 801322c:	2300      	movpl	r3, #0
 801322e:	2300      	movmi	r3, #0
 8013230:	bf4c      	ite	mi
 8013232:	9306      	strmi	r3, [sp, #24]
 8013234:	9305      	strpl	r3, [sp, #20]
 8013236:	f1b8 0f00 	cmp.w	r8, #0
 801323a:	910c      	str	r1, [sp, #48]	@ 0x30
 801323c:	db18      	blt.n	8013270 <_dtoa_r+0x1f8>
 801323e:	9b06      	ldr	r3, [sp, #24]
 8013240:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013244:	4443      	add	r3, r8
 8013246:	9306      	str	r3, [sp, #24]
 8013248:	2300      	movs	r3, #0
 801324a:	9a07      	ldr	r2, [sp, #28]
 801324c:	2a09      	cmp	r2, #9
 801324e:	d849      	bhi.n	80132e4 <_dtoa_r+0x26c>
 8013250:	2a05      	cmp	r2, #5
 8013252:	bfc4      	itt	gt
 8013254:	3a04      	subgt	r2, #4
 8013256:	9207      	strgt	r2, [sp, #28]
 8013258:	9a07      	ldr	r2, [sp, #28]
 801325a:	f1a2 0202 	sub.w	r2, r2, #2
 801325e:	bfcc      	ite	gt
 8013260:	2400      	movgt	r4, #0
 8013262:	2401      	movle	r4, #1
 8013264:	2a03      	cmp	r2, #3
 8013266:	d848      	bhi.n	80132fa <_dtoa_r+0x282>
 8013268:	e8df f002 	tbb	[pc, r2]
 801326c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013270:	9b05      	ldr	r3, [sp, #20]
 8013272:	2200      	movs	r2, #0
 8013274:	eba3 0308 	sub.w	r3, r3, r8
 8013278:	9305      	str	r3, [sp, #20]
 801327a:	920a      	str	r2, [sp, #40]	@ 0x28
 801327c:	f1c8 0300 	rsb	r3, r8, #0
 8013280:	e7e3      	b.n	801324a <_dtoa_r+0x1d2>
 8013282:	2200      	movs	r2, #0
 8013284:	9208      	str	r2, [sp, #32]
 8013286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013288:	2a00      	cmp	r2, #0
 801328a:	dc39      	bgt.n	8013300 <_dtoa_r+0x288>
 801328c:	f04f 0b01 	mov.w	fp, #1
 8013290:	46da      	mov	sl, fp
 8013292:	465a      	mov	r2, fp
 8013294:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013298:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801329c:	2100      	movs	r1, #0
 801329e:	2004      	movs	r0, #4
 80132a0:	f100 0614 	add.w	r6, r0, #20
 80132a4:	4296      	cmp	r6, r2
 80132a6:	d930      	bls.n	801330a <_dtoa_r+0x292>
 80132a8:	6079      	str	r1, [r7, #4]
 80132aa:	4648      	mov	r0, r9
 80132ac:	9304      	str	r3, [sp, #16]
 80132ae:	f000 fc83 	bl	8013bb8 <_Balloc>
 80132b2:	9b04      	ldr	r3, [sp, #16]
 80132b4:	4607      	mov	r7, r0
 80132b6:	2800      	cmp	r0, #0
 80132b8:	d146      	bne.n	8013348 <_dtoa_r+0x2d0>
 80132ba:	4b22      	ldr	r3, [pc, #136]	@ (8013344 <_dtoa_r+0x2cc>)
 80132bc:	4602      	mov	r2, r0
 80132be:	f240 11af 	movw	r1, #431	@ 0x1af
 80132c2:	e6f2      	b.n	80130aa <_dtoa_r+0x32>
 80132c4:	2201      	movs	r2, #1
 80132c6:	e7dd      	b.n	8013284 <_dtoa_r+0x20c>
 80132c8:	2200      	movs	r2, #0
 80132ca:	9208      	str	r2, [sp, #32]
 80132cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132ce:	eb08 0b02 	add.w	fp, r8, r2
 80132d2:	f10b 0a01 	add.w	sl, fp, #1
 80132d6:	4652      	mov	r2, sl
 80132d8:	2a01      	cmp	r2, #1
 80132da:	bfb8      	it	lt
 80132dc:	2201      	movlt	r2, #1
 80132de:	e7db      	b.n	8013298 <_dtoa_r+0x220>
 80132e0:	2201      	movs	r2, #1
 80132e2:	e7f2      	b.n	80132ca <_dtoa_r+0x252>
 80132e4:	2401      	movs	r4, #1
 80132e6:	2200      	movs	r2, #0
 80132e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80132ec:	f04f 3bff 	mov.w	fp, #4294967295
 80132f0:	2100      	movs	r1, #0
 80132f2:	46da      	mov	sl, fp
 80132f4:	2212      	movs	r2, #18
 80132f6:	9109      	str	r1, [sp, #36]	@ 0x24
 80132f8:	e7ce      	b.n	8013298 <_dtoa_r+0x220>
 80132fa:	2201      	movs	r2, #1
 80132fc:	9208      	str	r2, [sp, #32]
 80132fe:	e7f5      	b.n	80132ec <_dtoa_r+0x274>
 8013300:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8013304:	46da      	mov	sl, fp
 8013306:	465a      	mov	r2, fp
 8013308:	e7c6      	b.n	8013298 <_dtoa_r+0x220>
 801330a:	3101      	adds	r1, #1
 801330c:	0040      	lsls	r0, r0, #1
 801330e:	e7c7      	b.n	80132a0 <_dtoa_r+0x228>
 8013310:	636f4361 	.word	0x636f4361
 8013314:	3fd287a7 	.word	0x3fd287a7
 8013318:	8b60c8b3 	.word	0x8b60c8b3
 801331c:	3fc68a28 	.word	0x3fc68a28
 8013320:	509f79fb 	.word	0x509f79fb
 8013324:	3fd34413 	.word	0x3fd34413
 8013328:	08015935 	.word	0x08015935
 801332c:	0801594c 	.word	0x0801594c
 8013330:	7ff00000 	.word	0x7ff00000
 8013334:	08015931 	.word	0x08015931
 8013338:	08015905 	.word	0x08015905
 801333c:	08015904 	.word	0x08015904
 8013340:	08015a48 	.word	0x08015a48
 8013344:	080159a4 	.word	0x080159a4
 8013348:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801334c:	f1ba 0f0e 	cmp.w	sl, #14
 8013350:	6010      	str	r0, [r2, #0]
 8013352:	d86f      	bhi.n	8013434 <_dtoa_r+0x3bc>
 8013354:	2c00      	cmp	r4, #0
 8013356:	d06d      	beq.n	8013434 <_dtoa_r+0x3bc>
 8013358:	f1b8 0f00 	cmp.w	r8, #0
 801335c:	f340 80c2 	ble.w	80134e4 <_dtoa_r+0x46c>
 8013360:	4aca      	ldr	r2, [pc, #808]	@ (801368c <_dtoa_r+0x614>)
 8013362:	f008 010f 	and.w	r1, r8, #15
 8013366:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801336a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801336e:	ed92 7b00 	vldr	d7, [r2]
 8013372:	ea4f 1128 	mov.w	r1, r8, asr #4
 8013376:	f000 80a9 	beq.w	80134cc <_dtoa_r+0x454>
 801337a:	4ac5      	ldr	r2, [pc, #788]	@ (8013690 <_dtoa_r+0x618>)
 801337c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013380:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013384:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013388:	f001 010f 	and.w	r1, r1, #15
 801338c:	2203      	movs	r2, #3
 801338e:	48c0      	ldr	r0, [pc, #768]	@ (8013690 <_dtoa_r+0x618>)
 8013390:	2900      	cmp	r1, #0
 8013392:	f040 809d 	bne.w	80134d0 <_dtoa_r+0x458>
 8013396:	ed9d 6b02 	vldr	d6, [sp, #8]
 801339a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801339e:	ed8d 7b02 	vstr	d7, [sp, #8]
 80133a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80133a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80133a8:	2900      	cmp	r1, #0
 80133aa:	f000 80c1 	beq.w	8013530 <_dtoa_r+0x4b8>
 80133ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80133b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80133b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ba:	f140 80b9 	bpl.w	8013530 <_dtoa_r+0x4b8>
 80133be:	f1ba 0f00 	cmp.w	sl, #0
 80133c2:	f000 80b5 	beq.w	8013530 <_dtoa_r+0x4b8>
 80133c6:	f1bb 0f00 	cmp.w	fp, #0
 80133ca:	dd31      	ble.n	8013430 <_dtoa_r+0x3b8>
 80133cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80133d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80133d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80133d8:	f108 31ff 	add.w	r1, r8, #4294967295
 80133dc:	9104      	str	r1, [sp, #16]
 80133de:	3201      	adds	r2, #1
 80133e0:	465c      	mov	r4, fp
 80133e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80133e6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80133ea:	ee07 2a90 	vmov	s15, r2
 80133ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80133f2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80133f6:	ee15 2a90 	vmov	r2, s11
 80133fa:	ec51 0b15 	vmov	r0, r1, d5
 80133fe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8013402:	2c00      	cmp	r4, #0
 8013404:	f040 8098 	bne.w	8013538 <_dtoa_r+0x4c0>
 8013408:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801340c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013410:	ec41 0b17 	vmov	d7, r0, r1
 8013414:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341c:	f300 8261 	bgt.w	80138e2 <_dtoa_r+0x86a>
 8013420:	eeb1 7b47 	vneg.f64	d7, d7
 8013424:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801342c:	f100 80f5 	bmi.w	801361a <_dtoa_r+0x5a2>
 8013430:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013434:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013436:	2a00      	cmp	r2, #0
 8013438:	f2c0 812c 	blt.w	8013694 <_dtoa_r+0x61c>
 801343c:	f1b8 0f0e 	cmp.w	r8, #14
 8013440:	f300 8128 	bgt.w	8013694 <_dtoa_r+0x61c>
 8013444:	4b91      	ldr	r3, [pc, #580]	@ (801368c <_dtoa_r+0x614>)
 8013446:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801344a:	ed93 6b00 	vldr	d6, [r3]
 801344e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013450:	2b00      	cmp	r3, #0
 8013452:	da03      	bge.n	801345c <_dtoa_r+0x3e4>
 8013454:	f1ba 0f00 	cmp.w	sl, #0
 8013458:	f340 80d2 	ble.w	8013600 <_dtoa_r+0x588>
 801345c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013460:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013464:	463e      	mov	r6, r7
 8013466:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801346a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801346e:	ee15 3a10 	vmov	r3, s10
 8013472:	3330      	adds	r3, #48	@ 0x30
 8013474:	f806 3b01 	strb.w	r3, [r6], #1
 8013478:	1bf3      	subs	r3, r6, r7
 801347a:	459a      	cmp	sl, r3
 801347c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013480:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013484:	f040 80f8 	bne.w	8013678 <_dtoa_r+0x600>
 8013488:	ee37 7b07 	vadd.f64	d7, d7, d7
 801348c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013494:	f300 80dd 	bgt.w	8013652 <_dtoa_r+0x5da>
 8013498:	eeb4 7b46 	vcmp.f64	d7, d6
 801349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a0:	d104      	bne.n	80134ac <_dtoa_r+0x434>
 80134a2:	ee15 3a10 	vmov	r3, s10
 80134a6:	07db      	lsls	r3, r3, #31
 80134a8:	f100 80d3 	bmi.w	8013652 <_dtoa_r+0x5da>
 80134ac:	9901      	ldr	r1, [sp, #4]
 80134ae:	4648      	mov	r0, r9
 80134b0:	f000 fbc2 	bl	8013c38 <_Bfree>
 80134b4:	2300      	movs	r3, #0
 80134b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80134b8:	7033      	strb	r3, [r6, #0]
 80134ba:	f108 0301 	add.w	r3, r8, #1
 80134be:	6013      	str	r3, [r2, #0]
 80134c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	f000 8304 	beq.w	8013ad0 <_dtoa_r+0xa58>
 80134c8:	601e      	str	r6, [r3, #0]
 80134ca:	e301      	b.n	8013ad0 <_dtoa_r+0xa58>
 80134cc:	2202      	movs	r2, #2
 80134ce:	e75e      	b.n	801338e <_dtoa_r+0x316>
 80134d0:	07cc      	lsls	r4, r1, #31
 80134d2:	d504      	bpl.n	80134de <_dtoa_r+0x466>
 80134d4:	ed90 6b00 	vldr	d6, [r0]
 80134d8:	3201      	adds	r2, #1
 80134da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80134de:	1049      	asrs	r1, r1, #1
 80134e0:	3008      	adds	r0, #8
 80134e2:	e755      	b.n	8013390 <_dtoa_r+0x318>
 80134e4:	d022      	beq.n	801352c <_dtoa_r+0x4b4>
 80134e6:	f1c8 0100 	rsb	r1, r8, #0
 80134ea:	4a68      	ldr	r2, [pc, #416]	@ (801368c <_dtoa_r+0x614>)
 80134ec:	f001 000f 	and.w	r0, r1, #15
 80134f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80134f4:	ed92 7b00 	vldr	d7, [r2]
 80134f8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80134fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013500:	4863      	ldr	r0, [pc, #396]	@ (8013690 <_dtoa_r+0x618>)
 8013502:	1109      	asrs	r1, r1, #4
 8013504:	2400      	movs	r4, #0
 8013506:	2202      	movs	r2, #2
 8013508:	b929      	cbnz	r1, 8013516 <_dtoa_r+0x49e>
 801350a:	2c00      	cmp	r4, #0
 801350c:	f43f af49 	beq.w	80133a2 <_dtoa_r+0x32a>
 8013510:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013514:	e745      	b.n	80133a2 <_dtoa_r+0x32a>
 8013516:	07ce      	lsls	r6, r1, #31
 8013518:	d505      	bpl.n	8013526 <_dtoa_r+0x4ae>
 801351a:	ed90 6b00 	vldr	d6, [r0]
 801351e:	3201      	adds	r2, #1
 8013520:	2401      	movs	r4, #1
 8013522:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013526:	1049      	asrs	r1, r1, #1
 8013528:	3008      	adds	r0, #8
 801352a:	e7ed      	b.n	8013508 <_dtoa_r+0x490>
 801352c:	2202      	movs	r2, #2
 801352e:	e738      	b.n	80133a2 <_dtoa_r+0x32a>
 8013530:	f8cd 8010 	str.w	r8, [sp, #16]
 8013534:	4654      	mov	r4, sl
 8013536:	e754      	b.n	80133e2 <_dtoa_r+0x36a>
 8013538:	4a54      	ldr	r2, [pc, #336]	@ (801368c <_dtoa_r+0x614>)
 801353a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801353e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013542:	9a08      	ldr	r2, [sp, #32]
 8013544:	ec41 0b17 	vmov	d7, r0, r1
 8013548:	443c      	add	r4, r7
 801354a:	b34a      	cbz	r2, 80135a0 <_dtoa_r+0x528>
 801354c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013550:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8013554:	463e      	mov	r6, r7
 8013556:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801355a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801355e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013562:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013566:	ee14 2a90 	vmov	r2, s9
 801356a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801356e:	3230      	adds	r2, #48	@ 0x30
 8013570:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013574:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801357c:	f806 2b01 	strb.w	r2, [r6], #1
 8013580:	d438      	bmi.n	80135f4 <_dtoa_r+0x57c>
 8013582:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013586:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801358e:	d462      	bmi.n	8013656 <_dtoa_r+0x5de>
 8013590:	42a6      	cmp	r6, r4
 8013592:	f43f af4d 	beq.w	8013430 <_dtoa_r+0x3b8>
 8013596:	ee27 7b03 	vmul.f64	d7, d7, d3
 801359a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801359e:	e7e0      	b.n	8013562 <_dtoa_r+0x4ea>
 80135a0:	4621      	mov	r1, r4
 80135a2:	463e      	mov	r6, r7
 80135a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80135a8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80135ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80135b0:	ee14 2a90 	vmov	r2, s9
 80135b4:	3230      	adds	r2, #48	@ 0x30
 80135b6:	f806 2b01 	strb.w	r2, [r6], #1
 80135ba:	42a6      	cmp	r6, r4
 80135bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80135c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80135c4:	d119      	bne.n	80135fa <_dtoa_r+0x582>
 80135c6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80135ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80135ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80135d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d6:	dc3e      	bgt.n	8013656 <_dtoa_r+0x5de>
 80135d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80135dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80135e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e4:	f57f af24 	bpl.w	8013430 <_dtoa_r+0x3b8>
 80135e8:	460e      	mov	r6, r1
 80135ea:	3901      	subs	r1, #1
 80135ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80135f0:	2b30      	cmp	r3, #48	@ 0x30
 80135f2:	d0f9      	beq.n	80135e8 <_dtoa_r+0x570>
 80135f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80135f8:	e758      	b.n	80134ac <_dtoa_r+0x434>
 80135fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80135fe:	e7d5      	b.n	80135ac <_dtoa_r+0x534>
 8013600:	d10b      	bne.n	801361a <_dtoa_r+0x5a2>
 8013602:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013606:	ee26 6b07 	vmul.f64	d6, d6, d7
 801360a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801360e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013616:	f2c0 8161 	blt.w	80138dc <_dtoa_r+0x864>
 801361a:	2400      	movs	r4, #0
 801361c:	4625      	mov	r5, r4
 801361e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013620:	43db      	mvns	r3, r3
 8013622:	9304      	str	r3, [sp, #16]
 8013624:	463e      	mov	r6, r7
 8013626:	f04f 0800 	mov.w	r8, #0
 801362a:	4621      	mov	r1, r4
 801362c:	4648      	mov	r0, r9
 801362e:	f000 fb03 	bl	8013c38 <_Bfree>
 8013632:	2d00      	cmp	r5, #0
 8013634:	d0de      	beq.n	80135f4 <_dtoa_r+0x57c>
 8013636:	f1b8 0f00 	cmp.w	r8, #0
 801363a:	d005      	beq.n	8013648 <_dtoa_r+0x5d0>
 801363c:	45a8      	cmp	r8, r5
 801363e:	d003      	beq.n	8013648 <_dtoa_r+0x5d0>
 8013640:	4641      	mov	r1, r8
 8013642:	4648      	mov	r0, r9
 8013644:	f000 faf8 	bl	8013c38 <_Bfree>
 8013648:	4629      	mov	r1, r5
 801364a:	4648      	mov	r0, r9
 801364c:	f000 faf4 	bl	8013c38 <_Bfree>
 8013650:	e7d0      	b.n	80135f4 <_dtoa_r+0x57c>
 8013652:	f8cd 8010 	str.w	r8, [sp, #16]
 8013656:	4633      	mov	r3, r6
 8013658:	461e      	mov	r6, r3
 801365a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801365e:	2a39      	cmp	r2, #57	@ 0x39
 8013660:	d106      	bne.n	8013670 <_dtoa_r+0x5f8>
 8013662:	429f      	cmp	r7, r3
 8013664:	d1f8      	bne.n	8013658 <_dtoa_r+0x5e0>
 8013666:	9a04      	ldr	r2, [sp, #16]
 8013668:	3201      	adds	r2, #1
 801366a:	9204      	str	r2, [sp, #16]
 801366c:	2230      	movs	r2, #48	@ 0x30
 801366e:	703a      	strb	r2, [r7, #0]
 8013670:	781a      	ldrb	r2, [r3, #0]
 8013672:	3201      	adds	r2, #1
 8013674:	701a      	strb	r2, [r3, #0]
 8013676:	e7bd      	b.n	80135f4 <_dtoa_r+0x57c>
 8013678:	ee27 7b04 	vmul.f64	d7, d7, d4
 801367c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013684:	f47f aeef 	bne.w	8013466 <_dtoa_r+0x3ee>
 8013688:	e710      	b.n	80134ac <_dtoa_r+0x434>
 801368a:	bf00      	nop
 801368c:	08015a48 	.word	0x08015a48
 8013690:	08015a20 	.word	0x08015a20
 8013694:	9908      	ldr	r1, [sp, #32]
 8013696:	2900      	cmp	r1, #0
 8013698:	f000 80e3 	beq.w	8013862 <_dtoa_r+0x7ea>
 801369c:	9907      	ldr	r1, [sp, #28]
 801369e:	2901      	cmp	r1, #1
 80136a0:	f300 80c8 	bgt.w	8013834 <_dtoa_r+0x7bc>
 80136a4:	2d00      	cmp	r5, #0
 80136a6:	f000 80c1 	beq.w	801382c <_dtoa_r+0x7b4>
 80136aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80136ae:	9e05      	ldr	r6, [sp, #20]
 80136b0:	461c      	mov	r4, r3
 80136b2:	9304      	str	r3, [sp, #16]
 80136b4:	9b05      	ldr	r3, [sp, #20]
 80136b6:	4413      	add	r3, r2
 80136b8:	9305      	str	r3, [sp, #20]
 80136ba:	9b06      	ldr	r3, [sp, #24]
 80136bc:	2101      	movs	r1, #1
 80136be:	4413      	add	r3, r2
 80136c0:	4648      	mov	r0, r9
 80136c2:	9306      	str	r3, [sp, #24]
 80136c4:	f000 fb6c 	bl	8013da0 <__i2b>
 80136c8:	9b04      	ldr	r3, [sp, #16]
 80136ca:	4605      	mov	r5, r0
 80136cc:	b166      	cbz	r6, 80136e8 <_dtoa_r+0x670>
 80136ce:	9a06      	ldr	r2, [sp, #24]
 80136d0:	2a00      	cmp	r2, #0
 80136d2:	dd09      	ble.n	80136e8 <_dtoa_r+0x670>
 80136d4:	42b2      	cmp	r2, r6
 80136d6:	9905      	ldr	r1, [sp, #20]
 80136d8:	bfa8      	it	ge
 80136da:	4632      	movge	r2, r6
 80136dc:	1a89      	subs	r1, r1, r2
 80136de:	9105      	str	r1, [sp, #20]
 80136e0:	9906      	ldr	r1, [sp, #24]
 80136e2:	1ab6      	subs	r6, r6, r2
 80136e4:	1a8a      	subs	r2, r1, r2
 80136e6:	9206      	str	r2, [sp, #24]
 80136e8:	b1fb      	cbz	r3, 801372a <_dtoa_r+0x6b2>
 80136ea:	9a08      	ldr	r2, [sp, #32]
 80136ec:	2a00      	cmp	r2, #0
 80136ee:	f000 80bc 	beq.w	801386a <_dtoa_r+0x7f2>
 80136f2:	b19c      	cbz	r4, 801371c <_dtoa_r+0x6a4>
 80136f4:	4629      	mov	r1, r5
 80136f6:	4622      	mov	r2, r4
 80136f8:	4648      	mov	r0, r9
 80136fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136fc:	f000 fc10 	bl	8013f20 <__pow5mult>
 8013700:	9a01      	ldr	r2, [sp, #4]
 8013702:	4601      	mov	r1, r0
 8013704:	4605      	mov	r5, r0
 8013706:	4648      	mov	r0, r9
 8013708:	f000 fb60 	bl	8013dcc <__multiply>
 801370c:	9901      	ldr	r1, [sp, #4]
 801370e:	9004      	str	r0, [sp, #16]
 8013710:	4648      	mov	r0, r9
 8013712:	f000 fa91 	bl	8013c38 <_Bfree>
 8013716:	9a04      	ldr	r2, [sp, #16]
 8013718:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801371a:	9201      	str	r2, [sp, #4]
 801371c:	1b1a      	subs	r2, r3, r4
 801371e:	d004      	beq.n	801372a <_dtoa_r+0x6b2>
 8013720:	9901      	ldr	r1, [sp, #4]
 8013722:	4648      	mov	r0, r9
 8013724:	f000 fbfc 	bl	8013f20 <__pow5mult>
 8013728:	9001      	str	r0, [sp, #4]
 801372a:	2101      	movs	r1, #1
 801372c:	4648      	mov	r0, r9
 801372e:	f000 fb37 	bl	8013da0 <__i2b>
 8013732:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013734:	4604      	mov	r4, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	f000 81d0 	beq.w	8013adc <_dtoa_r+0xa64>
 801373c:	461a      	mov	r2, r3
 801373e:	4601      	mov	r1, r0
 8013740:	4648      	mov	r0, r9
 8013742:	f000 fbed 	bl	8013f20 <__pow5mult>
 8013746:	9b07      	ldr	r3, [sp, #28]
 8013748:	2b01      	cmp	r3, #1
 801374a:	4604      	mov	r4, r0
 801374c:	f300 8095 	bgt.w	801387a <_dtoa_r+0x802>
 8013750:	9b02      	ldr	r3, [sp, #8]
 8013752:	2b00      	cmp	r3, #0
 8013754:	f040 808b 	bne.w	801386e <_dtoa_r+0x7f6>
 8013758:	9b03      	ldr	r3, [sp, #12]
 801375a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801375e:	2a00      	cmp	r2, #0
 8013760:	f040 8087 	bne.w	8013872 <_dtoa_r+0x7fa>
 8013764:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013768:	0d12      	lsrs	r2, r2, #20
 801376a:	0512      	lsls	r2, r2, #20
 801376c:	2a00      	cmp	r2, #0
 801376e:	f000 8082 	beq.w	8013876 <_dtoa_r+0x7fe>
 8013772:	9b05      	ldr	r3, [sp, #20]
 8013774:	3301      	adds	r3, #1
 8013776:	9305      	str	r3, [sp, #20]
 8013778:	9b06      	ldr	r3, [sp, #24]
 801377a:	3301      	adds	r3, #1
 801377c:	9306      	str	r3, [sp, #24]
 801377e:	2301      	movs	r3, #1
 8013780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013784:	2b00      	cmp	r3, #0
 8013786:	f000 81af 	beq.w	8013ae8 <_dtoa_r+0xa70>
 801378a:	6922      	ldr	r2, [r4, #16]
 801378c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013790:	6910      	ldr	r0, [r2, #16]
 8013792:	f000 fab9 	bl	8013d08 <__hi0bits>
 8013796:	f1c0 0020 	rsb	r0, r0, #32
 801379a:	9b06      	ldr	r3, [sp, #24]
 801379c:	4418      	add	r0, r3
 801379e:	f010 001f 	ands.w	r0, r0, #31
 80137a2:	d076      	beq.n	8013892 <_dtoa_r+0x81a>
 80137a4:	f1c0 0220 	rsb	r2, r0, #32
 80137a8:	2a04      	cmp	r2, #4
 80137aa:	dd69      	ble.n	8013880 <_dtoa_r+0x808>
 80137ac:	9b05      	ldr	r3, [sp, #20]
 80137ae:	f1c0 001c 	rsb	r0, r0, #28
 80137b2:	4403      	add	r3, r0
 80137b4:	9305      	str	r3, [sp, #20]
 80137b6:	9b06      	ldr	r3, [sp, #24]
 80137b8:	4406      	add	r6, r0
 80137ba:	4403      	add	r3, r0
 80137bc:	9306      	str	r3, [sp, #24]
 80137be:	9b05      	ldr	r3, [sp, #20]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	dd05      	ble.n	80137d0 <_dtoa_r+0x758>
 80137c4:	9901      	ldr	r1, [sp, #4]
 80137c6:	461a      	mov	r2, r3
 80137c8:	4648      	mov	r0, r9
 80137ca:	f000 fc03 	bl	8013fd4 <__lshift>
 80137ce:	9001      	str	r0, [sp, #4]
 80137d0:	9b06      	ldr	r3, [sp, #24]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	dd05      	ble.n	80137e2 <_dtoa_r+0x76a>
 80137d6:	4621      	mov	r1, r4
 80137d8:	461a      	mov	r2, r3
 80137da:	4648      	mov	r0, r9
 80137dc:	f000 fbfa 	bl	8013fd4 <__lshift>
 80137e0:	4604      	mov	r4, r0
 80137e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d056      	beq.n	8013896 <_dtoa_r+0x81e>
 80137e8:	9801      	ldr	r0, [sp, #4]
 80137ea:	4621      	mov	r1, r4
 80137ec:	f000 fc5e 	bl	80140ac <__mcmp>
 80137f0:	2800      	cmp	r0, #0
 80137f2:	da50      	bge.n	8013896 <_dtoa_r+0x81e>
 80137f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80137f8:	9304      	str	r3, [sp, #16]
 80137fa:	9901      	ldr	r1, [sp, #4]
 80137fc:	2300      	movs	r3, #0
 80137fe:	220a      	movs	r2, #10
 8013800:	4648      	mov	r0, r9
 8013802:	f000 fa3b 	bl	8013c7c <__multadd>
 8013806:	9b08      	ldr	r3, [sp, #32]
 8013808:	9001      	str	r0, [sp, #4]
 801380a:	2b00      	cmp	r3, #0
 801380c:	f000 816e 	beq.w	8013aec <_dtoa_r+0xa74>
 8013810:	4629      	mov	r1, r5
 8013812:	2300      	movs	r3, #0
 8013814:	220a      	movs	r2, #10
 8013816:	4648      	mov	r0, r9
 8013818:	f000 fa30 	bl	8013c7c <__multadd>
 801381c:	f1bb 0f00 	cmp.w	fp, #0
 8013820:	4605      	mov	r5, r0
 8013822:	dc64      	bgt.n	80138ee <_dtoa_r+0x876>
 8013824:	9b07      	ldr	r3, [sp, #28]
 8013826:	2b02      	cmp	r3, #2
 8013828:	dc3e      	bgt.n	80138a8 <_dtoa_r+0x830>
 801382a:	e060      	b.n	80138ee <_dtoa_r+0x876>
 801382c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801382e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013832:	e73c      	b.n	80136ae <_dtoa_r+0x636>
 8013834:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013838:	42a3      	cmp	r3, r4
 801383a:	bfbf      	itttt	lt
 801383c:	1ae2      	sublt	r2, r4, r3
 801383e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013840:	189b      	addlt	r3, r3, r2
 8013842:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8013844:	bfae      	itee	ge
 8013846:	1b1c      	subge	r4, r3, r4
 8013848:	4623      	movlt	r3, r4
 801384a:	2400      	movlt	r4, #0
 801384c:	f1ba 0f00 	cmp.w	sl, #0
 8013850:	bfb5      	itete	lt
 8013852:	9a05      	ldrlt	r2, [sp, #20]
 8013854:	9e05      	ldrge	r6, [sp, #20]
 8013856:	eba2 060a 	sublt.w	r6, r2, sl
 801385a:	4652      	movge	r2, sl
 801385c:	bfb8      	it	lt
 801385e:	2200      	movlt	r2, #0
 8013860:	e727      	b.n	80136b2 <_dtoa_r+0x63a>
 8013862:	9e05      	ldr	r6, [sp, #20]
 8013864:	9d08      	ldr	r5, [sp, #32]
 8013866:	461c      	mov	r4, r3
 8013868:	e730      	b.n	80136cc <_dtoa_r+0x654>
 801386a:	461a      	mov	r2, r3
 801386c:	e758      	b.n	8013720 <_dtoa_r+0x6a8>
 801386e:	2300      	movs	r3, #0
 8013870:	e786      	b.n	8013780 <_dtoa_r+0x708>
 8013872:	9b02      	ldr	r3, [sp, #8]
 8013874:	e784      	b.n	8013780 <_dtoa_r+0x708>
 8013876:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013878:	e783      	b.n	8013782 <_dtoa_r+0x70a>
 801387a:	2300      	movs	r3, #0
 801387c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801387e:	e784      	b.n	801378a <_dtoa_r+0x712>
 8013880:	d09d      	beq.n	80137be <_dtoa_r+0x746>
 8013882:	9b05      	ldr	r3, [sp, #20]
 8013884:	321c      	adds	r2, #28
 8013886:	4413      	add	r3, r2
 8013888:	9305      	str	r3, [sp, #20]
 801388a:	9b06      	ldr	r3, [sp, #24]
 801388c:	4416      	add	r6, r2
 801388e:	4413      	add	r3, r2
 8013890:	e794      	b.n	80137bc <_dtoa_r+0x744>
 8013892:	4602      	mov	r2, r0
 8013894:	e7f5      	b.n	8013882 <_dtoa_r+0x80a>
 8013896:	f1ba 0f00 	cmp.w	sl, #0
 801389a:	f8cd 8010 	str.w	r8, [sp, #16]
 801389e:	46d3      	mov	fp, sl
 80138a0:	dc21      	bgt.n	80138e6 <_dtoa_r+0x86e>
 80138a2:	9b07      	ldr	r3, [sp, #28]
 80138a4:	2b02      	cmp	r3, #2
 80138a6:	dd1e      	ble.n	80138e6 <_dtoa_r+0x86e>
 80138a8:	f1bb 0f00 	cmp.w	fp, #0
 80138ac:	f47f aeb7 	bne.w	801361e <_dtoa_r+0x5a6>
 80138b0:	4621      	mov	r1, r4
 80138b2:	465b      	mov	r3, fp
 80138b4:	2205      	movs	r2, #5
 80138b6:	4648      	mov	r0, r9
 80138b8:	f000 f9e0 	bl	8013c7c <__multadd>
 80138bc:	4601      	mov	r1, r0
 80138be:	4604      	mov	r4, r0
 80138c0:	9801      	ldr	r0, [sp, #4]
 80138c2:	f000 fbf3 	bl	80140ac <__mcmp>
 80138c6:	2800      	cmp	r0, #0
 80138c8:	f77f aea9 	ble.w	801361e <_dtoa_r+0x5a6>
 80138cc:	463e      	mov	r6, r7
 80138ce:	2331      	movs	r3, #49	@ 0x31
 80138d0:	f806 3b01 	strb.w	r3, [r6], #1
 80138d4:	9b04      	ldr	r3, [sp, #16]
 80138d6:	3301      	adds	r3, #1
 80138d8:	9304      	str	r3, [sp, #16]
 80138da:	e6a4      	b.n	8013626 <_dtoa_r+0x5ae>
 80138dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80138e0:	4654      	mov	r4, sl
 80138e2:	4625      	mov	r5, r4
 80138e4:	e7f2      	b.n	80138cc <_dtoa_r+0x854>
 80138e6:	9b08      	ldr	r3, [sp, #32]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	f000 8103 	beq.w	8013af4 <_dtoa_r+0xa7c>
 80138ee:	2e00      	cmp	r6, #0
 80138f0:	dd05      	ble.n	80138fe <_dtoa_r+0x886>
 80138f2:	4629      	mov	r1, r5
 80138f4:	4632      	mov	r2, r6
 80138f6:	4648      	mov	r0, r9
 80138f8:	f000 fb6c 	bl	8013fd4 <__lshift>
 80138fc:	4605      	mov	r5, r0
 80138fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013900:	2b00      	cmp	r3, #0
 8013902:	d058      	beq.n	80139b6 <_dtoa_r+0x93e>
 8013904:	6869      	ldr	r1, [r5, #4]
 8013906:	4648      	mov	r0, r9
 8013908:	f000 f956 	bl	8013bb8 <_Balloc>
 801390c:	4606      	mov	r6, r0
 801390e:	b928      	cbnz	r0, 801391c <_dtoa_r+0x8a4>
 8013910:	4b82      	ldr	r3, [pc, #520]	@ (8013b1c <_dtoa_r+0xaa4>)
 8013912:	4602      	mov	r2, r0
 8013914:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013918:	f7ff bbc7 	b.w	80130aa <_dtoa_r+0x32>
 801391c:	692a      	ldr	r2, [r5, #16]
 801391e:	3202      	adds	r2, #2
 8013920:	0092      	lsls	r2, r2, #2
 8013922:	f105 010c 	add.w	r1, r5, #12
 8013926:	300c      	adds	r0, #12
 8013928:	f000 fee6 	bl	80146f8 <memcpy>
 801392c:	2201      	movs	r2, #1
 801392e:	4631      	mov	r1, r6
 8013930:	4648      	mov	r0, r9
 8013932:	f000 fb4f 	bl	8013fd4 <__lshift>
 8013936:	1c7b      	adds	r3, r7, #1
 8013938:	9305      	str	r3, [sp, #20]
 801393a:	eb07 030b 	add.w	r3, r7, fp
 801393e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013940:	9b02      	ldr	r3, [sp, #8]
 8013942:	f003 0301 	and.w	r3, r3, #1
 8013946:	46a8      	mov	r8, r5
 8013948:	9308      	str	r3, [sp, #32]
 801394a:	4605      	mov	r5, r0
 801394c:	9b05      	ldr	r3, [sp, #20]
 801394e:	9801      	ldr	r0, [sp, #4]
 8013950:	4621      	mov	r1, r4
 8013952:	f103 3bff 	add.w	fp, r3, #4294967295
 8013956:	f7ff fb04 	bl	8012f62 <quorem>
 801395a:	4641      	mov	r1, r8
 801395c:	9002      	str	r0, [sp, #8]
 801395e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013962:	9801      	ldr	r0, [sp, #4]
 8013964:	f000 fba2 	bl	80140ac <__mcmp>
 8013968:	462a      	mov	r2, r5
 801396a:	9006      	str	r0, [sp, #24]
 801396c:	4621      	mov	r1, r4
 801396e:	4648      	mov	r0, r9
 8013970:	f000 fbb8 	bl	80140e4 <__mdiff>
 8013974:	68c2      	ldr	r2, [r0, #12]
 8013976:	4606      	mov	r6, r0
 8013978:	b9fa      	cbnz	r2, 80139ba <_dtoa_r+0x942>
 801397a:	4601      	mov	r1, r0
 801397c:	9801      	ldr	r0, [sp, #4]
 801397e:	f000 fb95 	bl	80140ac <__mcmp>
 8013982:	4602      	mov	r2, r0
 8013984:	4631      	mov	r1, r6
 8013986:	4648      	mov	r0, r9
 8013988:	920a      	str	r2, [sp, #40]	@ 0x28
 801398a:	f000 f955 	bl	8013c38 <_Bfree>
 801398e:	9b07      	ldr	r3, [sp, #28]
 8013990:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013992:	9e05      	ldr	r6, [sp, #20]
 8013994:	ea43 0102 	orr.w	r1, r3, r2
 8013998:	9b08      	ldr	r3, [sp, #32]
 801399a:	4319      	orrs	r1, r3
 801399c:	d10f      	bne.n	80139be <_dtoa_r+0x946>
 801399e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80139a2:	d028      	beq.n	80139f6 <_dtoa_r+0x97e>
 80139a4:	9b06      	ldr	r3, [sp, #24]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	dd02      	ble.n	80139b0 <_dtoa_r+0x938>
 80139aa:	9b02      	ldr	r3, [sp, #8]
 80139ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80139b0:	f88b a000 	strb.w	sl, [fp]
 80139b4:	e639      	b.n	801362a <_dtoa_r+0x5b2>
 80139b6:	4628      	mov	r0, r5
 80139b8:	e7bd      	b.n	8013936 <_dtoa_r+0x8be>
 80139ba:	2201      	movs	r2, #1
 80139bc:	e7e2      	b.n	8013984 <_dtoa_r+0x90c>
 80139be:	9b06      	ldr	r3, [sp, #24]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	db04      	blt.n	80139ce <_dtoa_r+0x956>
 80139c4:	9907      	ldr	r1, [sp, #28]
 80139c6:	430b      	orrs	r3, r1
 80139c8:	9908      	ldr	r1, [sp, #32]
 80139ca:	430b      	orrs	r3, r1
 80139cc:	d120      	bne.n	8013a10 <_dtoa_r+0x998>
 80139ce:	2a00      	cmp	r2, #0
 80139d0:	ddee      	ble.n	80139b0 <_dtoa_r+0x938>
 80139d2:	9901      	ldr	r1, [sp, #4]
 80139d4:	2201      	movs	r2, #1
 80139d6:	4648      	mov	r0, r9
 80139d8:	f000 fafc 	bl	8013fd4 <__lshift>
 80139dc:	4621      	mov	r1, r4
 80139de:	9001      	str	r0, [sp, #4]
 80139e0:	f000 fb64 	bl	80140ac <__mcmp>
 80139e4:	2800      	cmp	r0, #0
 80139e6:	dc03      	bgt.n	80139f0 <_dtoa_r+0x978>
 80139e8:	d1e2      	bne.n	80139b0 <_dtoa_r+0x938>
 80139ea:	f01a 0f01 	tst.w	sl, #1
 80139ee:	d0df      	beq.n	80139b0 <_dtoa_r+0x938>
 80139f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80139f4:	d1d9      	bne.n	80139aa <_dtoa_r+0x932>
 80139f6:	2339      	movs	r3, #57	@ 0x39
 80139f8:	f88b 3000 	strb.w	r3, [fp]
 80139fc:	4633      	mov	r3, r6
 80139fe:	461e      	mov	r6, r3
 8013a00:	3b01      	subs	r3, #1
 8013a02:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013a06:	2a39      	cmp	r2, #57	@ 0x39
 8013a08:	d053      	beq.n	8013ab2 <_dtoa_r+0xa3a>
 8013a0a:	3201      	adds	r2, #1
 8013a0c:	701a      	strb	r2, [r3, #0]
 8013a0e:	e60c      	b.n	801362a <_dtoa_r+0x5b2>
 8013a10:	2a00      	cmp	r2, #0
 8013a12:	dd07      	ble.n	8013a24 <_dtoa_r+0x9ac>
 8013a14:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013a18:	d0ed      	beq.n	80139f6 <_dtoa_r+0x97e>
 8013a1a:	f10a 0301 	add.w	r3, sl, #1
 8013a1e:	f88b 3000 	strb.w	r3, [fp]
 8013a22:	e602      	b.n	801362a <_dtoa_r+0x5b2>
 8013a24:	9b05      	ldr	r3, [sp, #20]
 8013a26:	9a05      	ldr	r2, [sp, #20]
 8013a28:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a2e:	4293      	cmp	r3, r2
 8013a30:	d029      	beq.n	8013a86 <_dtoa_r+0xa0e>
 8013a32:	9901      	ldr	r1, [sp, #4]
 8013a34:	2300      	movs	r3, #0
 8013a36:	220a      	movs	r2, #10
 8013a38:	4648      	mov	r0, r9
 8013a3a:	f000 f91f 	bl	8013c7c <__multadd>
 8013a3e:	45a8      	cmp	r8, r5
 8013a40:	9001      	str	r0, [sp, #4]
 8013a42:	f04f 0300 	mov.w	r3, #0
 8013a46:	f04f 020a 	mov.w	r2, #10
 8013a4a:	4641      	mov	r1, r8
 8013a4c:	4648      	mov	r0, r9
 8013a4e:	d107      	bne.n	8013a60 <_dtoa_r+0x9e8>
 8013a50:	f000 f914 	bl	8013c7c <__multadd>
 8013a54:	4680      	mov	r8, r0
 8013a56:	4605      	mov	r5, r0
 8013a58:	9b05      	ldr	r3, [sp, #20]
 8013a5a:	3301      	adds	r3, #1
 8013a5c:	9305      	str	r3, [sp, #20]
 8013a5e:	e775      	b.n	801394c <_dtoa_r+0x8d4>
 8013a60:	f000 f90c 	bl	8013c7c <__multadd>
 8013a64:	4629      	mov	r1, r5
 8013a66:	4680      	mov	r8, r0
 8013a68:	2300      	movs	r3, #0
 8013a6a:	220a      	movs	r2, #10
 8013a6c:	4648      	mov	r0, r9
 8013a6e:	f000 f905 	bl	8013c7c <__multadd>
 8013a72:	4605      	mov	r5, r0
 8013a74:	e7f0      	b.n	8013a58 <_dtoa_r+0x9e0>
 8013a76:	f1bb 0f00 	cmp.w	fp, #0
 8013a7a:	bfcc      	ite	gt
 8013a7c:	465e      	movgt	r6, fp
 8013a7e:	2601      	movle	r6, #1
 8013a80:	443e      	add	r6, r7
 8013a82:	f04f 0800 	mov.w	r8, #0
 8013a86:	9901      	ldr	r1, [sp, #4]
 8013a88:	2201      	movs	r2, #1
 8013a8a:	4648      	mov	r0, r9
 8013a8c:	f000 faa2 	bl	8013fd4 <__lshift>
 8013a90:	4621      	mov	r1, r4
 8013a92:	9001      	str	r0, [sp, #4]
 8013a94:	f000 fb0a 	bl	80140ac <__mcmp>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	dcaf      	bgt.n	80139fc <_dtoa_r+0x984>
 8013a9c:	d102      	bne.n	8013aa4 <_dtoa_r+0xa2c>
 8013a9e:	f01a 0f01 	tst.w	sl, #1
 8013aa2:	d1ab      	bne.n	80139fc <_dtoa_r+0x984>
 8013aa4:	4633      	mov	r3, r6
 8013aa6:	461e      	mov	r6, r3
 8013aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013aac:	2a30      	cmp	r2, #48	@ 0x30
 8013aae:	d0fa      	beq.n	8013aa6 <_dtoa_r+0xa2e>
 8013ab0:	e5bb      	b.n	801362a <_dtoa_r+0x5b2>
 8013ab2:	429f      	cmp	r7, r3
 8013ab4:	d1a3      	bne.n	80139fe <_dtoa_r+0x986>
 8013ab6:	9b04      	ldr	r3, [sp, #16]
 8013ab8:	3301      	adds	r3, #1
 8013aba:	9304      	str	r3, [sp, #16]
 8013abc:	2331      	movs	r3, #49	@ 0x31
 8013abe:	703b      	strb	r3, [r7, #0]
 8013ac0:	e5b3      	b.n	801362a <_dtoa_r+0x5b2>
 8013ac2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013ac4:	4f16      	ldr	r7, [pc, #88]	@ (8013b20 <_dtoa_r+0xaa8>)
 8013ac6:	b11b      	cbz	r3, 8013ad0 <_dtoa_r+0xa58>
 8013ac8:	f107 0308 	add.w	r3, r7, #8
 8013acc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013ace:	6013      	str	r3, [r2, #0]
 8013ad0:	4638      	mov	r0, r7
 8013ad2:	b011      	add	sp, #68	@ 0x44
 8013ad4:	ecbd 8b02 	vpop	{d8}
 8013ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013adc:	9b07      	ldr	r3, [sp, #28]
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	f77f ae36 	ble.w	8013750 <_dtoa_r+0x6d8>
 8013ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ae6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ae8:	2001      	movs	r0, #1
 8013aea:	e656      	b.n	801379a <_dtoa_r+0x722>
 8013aec:	f1bb 0f00 	cmp.w	fp, #0
 8013af0:	f77f aed7 	ble.w	80138a2 <_dtoa_r+0x82a>
 8013af4:	463e      	mov	r6, r7
 8013af6:	9801      	ldr	r0, [sp, #4]
 8013af8:	4621      	mov	r1, r4
 8013afa:	f7ff fa32 	bl	8012f62 <quorem>
 8013afe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013b02:	f806 ab01 	strb.w	sl, [r6], #1
 8013b06:	1bf2      	subs	r2, r6, r7
 8013b08:	4593      	cmp	fp, r2
 8013b0a:	ddb4      	ble.n	8013a76 <_dtoa_r+0x9fe>
 8013b0c:	9901      	ldr	r1, [sp, #4]
 8013b0e:	2300      	movs	r3, #0
 8013b10:	220a      	movs	r2, #10
 8013b12:	4648      	mov	r0, r9
 8013b14:	f000 f8b2 	bl	8013c7c <__multadd>
 8013b18:	9001      	str	r0, [sp, #4]
 8013b1a:	e7ec      	b.n	8013af6 <_dtoa_r+0xa7e>
 8013b1c:	080159a4 	.word	0x080159a4
 8013b20:	08015928 	.word	0x08015928

08013b24 <_free_r>:
 8013b24:	b538      	push	{r3, r4, r5, lr}
 8013b26:	4605      	mov	r5, r0
 8013b28:	2900      	cmp	r1, #0
 8013b2a:	d041      	beq.n	8013bb0 <_free_r+0x8c>
 8013b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b30:	1f0c      	subs	r4, r1, #4
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	bfb8      	it	lt
 8013b36:	18e4      	addlt	r4, r4, r3
 8013b38:	f7fe fc1a 	bl	8012370 <__malloc_lock>
 8013b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8013bb4 <_free_r+0x90>)
 8013b3e:	6813      	ldr	r3, [r2, #0]
 8013b40:	b933      	cbnz	r3, 8013b50 <_free_r+0x2c>
 8013b42:	6063      	str	r3, [r4, #4]
 8013b44:	6014      	str	r4, [r2, #0]
 8013b46:	4628      	mov	r0, r5
 8013b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b4c:	f7fe bc16 	b.w	801237c <__malloc_unlock>
 8013b50:	42a3      	cmp	r3, r4
 8013b52:	d908      	bls.n	8013b66 <_free_r+0x42>
 8013b54:	6820      	ldr	r0, [r4, #0]
 8013b56:	1821      	adds	r1, r4, r0
 8013b58:	428b      	cmp	r3, r1
 8013b5a:	bf01      	itttt	eq
 8013b5c:	6819      	ldreq	r1, [r3, #0]
 8013b5e:	685b      	ldreq	r3, [r3, #4]
 8013b60:	1809      	addeq	r1, r1, r0
 8013b62:	6021      	streq	r1, [r4, #0]
 8013b64:	e7ed      	b.n	8013b42 <_free_r+0x1e>
 8013b66:	461a      	mov	r2, r3
 8013b68:	685b      	ldr	r3, [r3, #4]
 8013b6a:	b10b      	cbz	r3, 8013b70 <_free_r+0x4c>
 8013b6c:	42a3      	cmp	r3, r4
 8013b6e:	d9fa      	bls.n	8013b66 <_free_r+0x42>
 8013b70:	6811      	ldr	r1, [r2, #0]
 8013b72:	1850      	adds	r0, r2, r1
 8013b74:	42a0      	cmp	r0, r4
 8013b76:	d10b      	bne.n	8013b90 <_free_r+0x6c>
 8013b78:	6820      	ldr	r0, [r4, #0]
 8013b7a:	4401      	add	r1, r0
 8013b7c:	1850      	adds	r0, r2, r1
 8013b7e:	4283      	cmp	r3, r0
 8013b80:	6011      	str	r1, [r2, #0]
 8013b82:	d1e0      	bne.n	8013b46 <_free_r+0x22>
 8013b84:	6818      	ldr	r0, [r3, #0]
 8013b86:	685b      	ldr	r3, [r3, #4]
 8013b88:	6053      	str	r3, [r2, #4]
 8013b8a:	4408      	add	r0, r1
 8013b8c:	6010      	str	r0, [r2, #0]
 8013b8e:	e7da      	b.n	8013b46 <_free_r+0x22>
 8013b90:	d902      	bls.n	8013b98 <_free_r+0x74>
 8013b92:	230c      	movs	r3, #12
 8013b94:	602b      	str	r3, [r5, #0]
 8013b96:	e7d6      	b.n	8013b46 <_free_r+0x22>
 8013b98:	6820      	ldr	r0, [r4, #0]
 8013b9a:	1821      	adds	r1, r4, r0
 8013b9c:	428b      	cmp	r3, r1
 8013b9e:	bf04      	itt	eq
 8013ba0:	6819      	ldreq	r1, [r3, #0]
 8013ba2:	685b      	ldreq	r3, [r3, #4]
 8013ba4:	6063      	str	r3, [r4, #4]
 8013ba6:	bf04      	itt	eq
 8013ba8:	1809      	addeq	r1, r1, r0
 8013baa:	6021      	streq	r1, [r4, #0]
 8013bac:	6054      	str	r4, [r2, #4]
 8013bae:	e7ca      	b.n	8013b46 <_free_r+0x22>
 8013bb0:	bd38      	pop	{r3, r4, r5, pc}
 8013bb2:	bf00      	nop
 8013bb4:	240022b8 	.word	0x240022b8

08013bb8 <_Balloc>:
 8013bb8:	b570      	push	{r4, r5, r6, lr}
 8013bba:	69c6      	ldr	r6, [r0, #28]
 8013bbc:	4604      	mov	r4, r0
 8013bbe:	460d      	mov	r5, r1
 8013bc0:	b976      	cbnz	r6, 8013be0 <_Balloc+0x28>
 8013bc2:	2010      	movs	r0, #16
 8013bc4:	f7fe fb2a 	bl	801221c <malloc>
 8013bc8:	4602      	mov	r2, r0
 8013bca:	61e0      	str	r0, [r4, #28]
 8013bcc:	b920      	cbnz	r0, 8013bd8 <_Balloc+0x20>
 8013bce:	4b18      	ldr	r3, [pc, #96]	@ (8013c30 <_Balloc+0x78>)
 8013bd0:	4818      	ldr	r0, [pc, #96]	@ (8013c34 <_Balloc+0x7c>)
 8013bd2:	216b      	movs	r1, #107	@ 0x6b
 8013bd4:	f000 fd9e 	bl	8014714 <__assert_func>
 8013bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013bdc:	6006      	str	r6, [r0, #0]
 8013bde:	60c6      	str	r6, [r0, #12]
 8013be0:	69e6      	ldr	r6, [r4, #28]
 8013be2:	68f3      	ldr	r3, [r6, #12]
 8013be4:	b183      	cbz	r3, 8013c08 <_Balloc+0x50>
 8013be6:	69e3      	ldr	r3, [r4, #28]
 8013be8:	68db      	ldr	r3, [r3, #12]
 8013bea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013bee:	b9b8      	cbnz	r0, 8013c20 <_Balloc+0x68>
 8013bf0:	2101      	movs	r1, #1
 8013bf2:	fa01 f605 	lsl.w	r6, r1, r5
 8013bf6:	1d72      	adds	r2, r6, #5
 8013bf8:	0092      	lsls	r2, r2, #2
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	f000 fda8 	bl	8014750 <_calloc_r>
 8013c00:	b160      	cbz	r0, 8013c1c <_Balloc+0x64>
 8013c02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013c06:	e00e      	b.n	8013c26 <_Balloc+0x6e>
 8013c08:	2221      	movs	r2, #33	@ 0x21
 8013c0a:	2104      	movs	r1, #4
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	f000 fd9f 	bl	8014750 <_calloc_r>
 8013c12:	69e3      	ldr	r3, [r4, #28]
 8013c14:	60f0      	str	r0, [r6, #12]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d1e4      	bne.n	8013be6 <_Balloc+0x2e>
 8013c1c:	2000      	movs	r0, #0
 8013c1e:	bd70      	pop	{r4, r5, r6, pc}
 8013c20:	6802      	ldr	r2, [r0, #0]
 8013c22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013c26:	2300      	movs	r3, #0
 8013c28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013c2c:	e7f7      	b.n	8013c1e <_Balloc+0x66>
 8013c2e:	bf00      	nop
 8013c30:	08015935 	.word	0x08015935
 8013c34:	080159b5 	.word	0x080159b5

08013c38 <_Bfree>:
 8013c38:	b570      	push	{r4, r5, r6, lr}
 8013c3a:	69c6      	ldr	r6, [r0, #28]
 8013c3c:	4605      	mov	r5, r0
 8013c3e:	460c      	mov	r4, r1
 8013c40:	b976      	cbnz	r6, 8013c60 <_Bfree+0x28>
 8013c42:	2010      	movs	r0, #16
 8013c44:	f7fe faea 	bl	801221c <malloc>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	61e8      	str	r0, [r5, #28]
 8013c4c:	b920      	cbnz	r0, 8013c58 <_Bfree+0x20>
 8013c4e:	4b09      	ldr	r3, [pc, #36]	@ (8013c74 <_Bfree+0x3c>)
 8013c50:	4809      	ldr	r0, [pc, #36]	@ (8013c78 <_Bfree+0x40>)
 8013c52:	218f      	movs	r1, #143	@ 0x8f
 8013c54:	f000 fd5e 	bl	8014714 <__assert_func>
 8013c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c5c:	6006      	str	r6, [r0, #0]
 8013c5e:	60c6      	str	r6, [r0, #12]
 8013c60:	b13c      	cbz	r4, 8013c72 <_Bfree+0x3a>
 8013c62:	69eb      	ldr	r3, [r5, #28]
 8013c64:	6862      	ldr	r2, [r4, #4]
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013c6c:	6021      	str	r1, [r4, #0]
 8013c6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013c72:	bd70      	pop	{r4, r5, r6, pc}
 8013c74:	08015935 	.word	0x08015935
 8013c78:	080159b5 	.word	0x080159b5

08013c7c <__multadd>:
 8013c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c80:	690d      	ldr	r5, [r1, #16]
 8013c82:	4607      	mov	r7, r0
 8013c84:	460c      	mov	r4, r1
 8013c86:	461e      	mov	r6, r3
 8013c88:	f101 0c14 	add.w	ip, r1, #20
 8013c8c:	2000      	movs	r0, #0
 8013c8e:	f8dc 3000 	ldr.w	r3, [ip]
 8013c92:	b299      	uxth	r1, r3
 8013c94:	fb02 6101 	mla	r1, r2, r1, r6
 8013c98:	0c1e      	lsrs	r6, r3, #16
 8013c9a:	0c0b      	lsrs	r3, r1, #16
 8013c9c:	fb02 3306 	mla	r3, r2, r6, r3
 8013ca0:	b289      	uxth	r1, r1
 8013ca2:	3001      	adds	r0, #1
 8013ca4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013ca8:	4285      	cmp	r5, r0
 8013caa:	f84c 1b04 	str.w	r1, [ip], #4
 8013cae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013cb2:	dcec      	bgt.n	8013c8e <__multadd+0x12>
 8013cb4:	b30e      	cbz	r6, 8013cfa <__multadd+0x7e>
 8013cb6:	68a3      	ldr	r3, [r4, #8]
 8013cb8:	42ab      	cmp	r3, r5
 8013cba:	dc19      	bgt.n	8013cf0 <__multadd+0x74>
 8013cbc:	6861      	ldr	r1, [r4, #4]
 8013cbe:	4638      	mov	r0, r7
 8013cc0:	3101      	adds	r1, #1
 8013cc2:	f7ff ff79 	bl	8013bb8 <_Balloc>
 8013cc6:	4680      	mov	r8, r0
 8013cc8:	b928      	cbnz	r0, 8013cd6 <__multadd+0x5a>
 8013cca:	4602      	mov	r2, r0
 8013ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8013d00 <__multadd+0x84>)
 8013cce:	480d      	ldr	r0, [pc, #52]	@ (8013d04 <__multadd+0x88>)
 8013cd0:	21ba      	movs	r1, #186	@ 0xba
 8013cd2:	f000 fd1f 	bl	8014714 <__assert_func>
 8013cd6:	6922      	ldr	r2, [r4, #16]
 8013cd8:	3202      	adds	r2, #2
 8013cda:	f104 010c 	add.w	r1, r4, #12
 8013cde:	0092      	lsls	r2, r2, #2
 8013ce0:	300c      	adds	r0, #12
 8013ce2:	f000 fd09 	bl	80146f8 <memcpy>
 8013ce6:	4621      	mov	r1, r4
 8013ce8:	4638      	mov	r0, r7
 8013cea:	f7ff ffa5 	bl	8013c38 <_Bfree>
 8013cee:	4644      	mov	r4, r8
 8013cf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013cf4:	3501      	adds	r5, #1
 8013cf6:	615e      	str	r6, [r3, #20]
 8013cf8:	6125      	str	r5, [r4, #16]
 8013cfa:	4620      	mov	r0, r4
 8013cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d00:	080159a4 	.word	0x080159a4
 8013d04:	080159b5 	.word	0x080159b5

08013d08 <__hi0bits>:
 8013d08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	bf36      	itet	cc
 8013d10:	0403      	lslcc	r3, r0, #16
 8013d12:	2000      	movcs	r0, #0
 8013d14:	2010      	movcc	r0, #16
 8013d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013d1a:	bf3c      	itt	cc
 8013d1c:	021b      	lslcc	r3, r3, #8
 8013d1e:	3008      	addcc	r0, #8
 8013d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d24:	bf3c      	itt	cc
 8013d26:	011b      	lslcc	r3, r3, #4
 8013d28:	3004      	addcc	r0, #4
 8013d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d2e:	bf3c      	itt	cc
 8013d30:	009b      	lslcc	r3, r3, #2
 8013d32:	3002      	addcc	r0, #2
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	db05      	blt.n	8013d44 <__hi0bits+0x3c>
 8013d38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013d3c:	f100 0001 	add.w	r0, r0, #1
 8013d40:	bf08      	it	eq
 8013d42:	2020      	moveq	r0, #32
 8013d44:	4770      	bx	lr

08013d46 <__lo0bits>:
 8013d46:	6803      	ldr	r3, [r0, #0]
 8013d48:	4602      	mov	r2, r0
 8013d4a:	f013 0007 	ands.w	r0, r3, #7
 8013d4e:	d00b      	beq.n	8013d68 <__lo0bits+0x22>
 8013d50:	07d9      	lsls	r1, r3, #31
 8013d52:	d421      	bmi.n	8013d98 <__lo0bits+0x52>
 8013d54:	0798      	lsls	r0, r3, #30
 8013d56:	bf49      	itett	mi
 8013d58:	085b      	lsrmi	r3, r3, #1
 8013d5a:	089b      	lsrpl	r3, r3, #2
 8013d5c:	2001      	movmi	r0, #1
 8013d5e:	6013      	strmi	r3, [r2, #0]
 8013d60:	bf5c      	itt	pl
 8013d62:	6013      	strpl	r3, [r2, #0]
 8013d64:	2002      	movpl	r0, #2
 8013d66:	4770      	bx	lr
 8013d68:	b299      	uxth	r1, r3
 8013d6a:	b909      	cbnz	r1, 8013d70 <__lo0bits+0x2a>
 8013d6c:	0c1b      	lsrs	r3, r3, #16
 8013d6e:	2010      	movs	r0, #16
 8013d70:	b2d9      	uxtb	r1, r3
 8013d72:	b909      	cbnz	r1, 8013d78 <__lo0bits+0x32>
 8013d74:	3008      	adds	r0, #8
 8013d76:	0a1b      	lsrs	r3, r3, #8
 8013d78:	0719      	lsls	r1, r3, #28
 8013d7a:	bf04      	itt	eq
 8013d7c:	091b      	lsreq	r3, r3, #4
 8013d7e:	3004      	addeq	r0, #4
 8013d80:	0799      	lsls	r1, r3, #30
 8013d82:	bf04      	itt	eq
 8013d84:	089b      	lsreq	r3, r3, #2
 8013d86:	3002      	addeq	r0, #2
 8013d88:	07d9      	lsls	r1, r3, #31
 8013d8a:	d403      	bmi.n	8013d94 <__lo0bits+0x4e>
 8013d8c:	085b      	lsrs	r3, r3, #1
 8013d8e:	f100 0001 	add.w	r0, r0, #1
 8013d92:	d003      	beq.n	8013d9c <__lo0bits+0x56>
 8013d94:	6013      	str	r3, [r2, #0]
 8013d96:	4770      	bx	lr
 8013d98:	2000      	movs	r0, #0
 8013d9a:	4770      	bx	lr
 8013d9c:	2020      	movs	r0, #32
 8013d9e:	4770      	bx	lr

08013da0 <__i2b>:
 8013da0:	b510      	push	{r4, lr}
 8013da2:	460c      	mov	r4, r1
 8013da4:	2101      	movs	r1, #1
 8013da6:	f7ff ff07 	bl	8013bb8 <_Balloc>
 8013daa:	4602      	mov	r2, r0
 8013dac:	b928      	cbnz	r0, 8013dba <__i2b+0x1a>
 8013dae:	4b05      	ldr	r3, [pc, #20]	@ (8013dc4 <__i2b+0x24>)
 8013db0:	4805      	ldr	r0, [pc, #20]	@ (8013dc8 <__i2b+0x28>)
 8013db2:	f240 1145 	movw	r1, #325	@ 0x145
 8013db6:	f000 fcad 	bl	8014714 <__assert_func>
 8013dba:	2301      	movs	r3, #1
 8013dbc:	6144      	str	r4, [r0, #20]
 8013dbe:	6103      	str	r3, [r0, #16]
 8013dc0:	bd10      	pop	{r4, pc}
 8013dc2:	bf00      	nop
 8013dc4:	080159a4 	.word	0x080159a4
 8013dc8:	080159b5 	.word	0x080159b5

08013dcc <__multiply>:
 8013dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd0:	4614      	mov	r4, r2
 8013dd2:	690a      	ldr	r2, [r1, #16]
 8013dd4:	6923      	ldr	r3, [r4, #16]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	bfa8      	it	ge
 8013dda:	4623      	movge	r3, r4
 8013ddc:	460f      	mov	r7, r1
 8013dde:	bfa4      	itt	ge
 8013de0:	460c      	movge	r4, r1
 8013de2:	461f      	movge	r7, r3
 8013de4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013de8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013dec:	68a3      	ldr	r3, [r4, #8]
 8013dee:	6861      	ldr	r1, [r4, #4]
 8013df0:	eb0a 0609 	add.w	r6, sl, r9
 8013df4:	42b3      	cmp	r3, r6
 8013df6:	b085      	sub	sp, #20
 8013df8:	bfb8      	it	lt
 8013dfa:	3101      	addlt	r1, #1
 8013dfc:	f7ff fedc 	bl	8013bb8 <_Balloc>
 8013e00:	b930      	cbnz	r0, 8013e10 <__multiply+0x44>
 8013e02:	4602      	mov	r2, r0
 8013e04:	4b44      	ldr	r3, [pc, #272]	@ (8013f18 <__multiply+0x14c>)
 8013e06:	4845      	ldr	r0, [pc, #276]	@ (8013f1c <__multiply+0x150>)
 8013e08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013e0c:	f000 fc82 	bl	8014714 <__assert_func>
 8013e10:	f100 0514 	add.w	r5, r0, #20
 8013e14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013e18:	462b      	mov	r3, r5
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	4543      	cmp	r3, r8
 8013e1e:	d321      	bcc.n	8013e64 <__multiply+0x98>
 8013e20:	f107 0114 	add.w	r1, r7, #20
 8013e24:	f104 0214 	add.w	r2, r4, #20
 8013e28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013e2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013e30:	9302      	str	r3, [sp, #8]
 8013e32:	1b13      	subs	r3, r2, r4
 8013e34:	3b15      	subs	r3, #21
 8013e36:	f023 0303 	bic.w	r3, r3, #3
 8013e3a:	3304      	adds	r3, #4
 8013e3c:	f104 0715 	add.w	r7, r4, #21
 8013e40:	42ba      	cmp	r2, r7
 8013e42:	bf38      	it	cc
 8013e44:	2304      	movcc	r3, #4
 8013e46:	9301      	str	r3, [sp, #4]
 8013e48:	9b02      	ldr	r3, [sp, #8]
 8013e4a:	9103      	str	r1, [sp, #12]
 8013e4c:	428b      	cmp	r3, r1
 8013e4e:	d80c      	bhi.n	8013e6a <__multiply+0x9e>
 8013e50:	2e00      	cmp	r6, #0
 8013e52:	dd03      	ble.n	8013e5c <__multiply+0x90>
 8013e54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d05b      	beq.n	8013f14 <__multiply+0x148>
 8013e5c:	6106      	str	r6, [r0, #16]
 8013e5e:	b005      	add	sp, #20
 8013e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e64:	f843 2b04 	str.w	r2, [r3], #4
 8013e68:	e7d8      	b.n	8013e1c <__multiply+0x50>
 8013e6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013e6e:	f1ba 0f00 	cmp.w	sl, #0
 8013e72:	d024      	beq.n	8013ebe <__multiply+0xf2>
 8013e74:	f104 0e14 	add.w	lr, r4, #20
 8013e78:	46a9      	mov	r9, r5
 8013e7a:	f04f 0c00 	mov.w	ip, #0
 8013e7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013e82:	f8d9 3000 	ldr.w	r3, [r9]
 8013e86:	fa1f fb87 	uxth.w	fp, r7
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013e90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013e94:	f8d9 7000 	ldr.w	r7, [r9]
 8013e98:	4463      	add	r3, ip
 8013e9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013e9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8013ea2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013ea6:	b29b      	uxth	r3, r3
 8013ea8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013eac:	4572      	cmp	r2, lr
 8013eae:	f849 3b04 	str.w	r3, [r9], #4
 8013eb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013eb6:	d8e2      	bhi.n	8013e7e <__multiply+0xb2>
 8013eb8:	9b01      	ldr	r3, [sp, #4]
 8013eba:	f845 c003 	str.w	ip, [r5, r3]
 8013ebe:	9b03      	ldr	r3, [sp, #12]
 8013ec0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013ec4:	3104      	adds	r1, #4
 8013ec6:	f1b9 0f00 	cmp.w	r9, #0
 8013eca:	d021      	beq.n	8013f10 <__multiply+0x144>
 8013ecc:	682b      	ldr	r3, [r5, #0]
 8013ece:	f104 0c14 	add.w	ip, r4, #20
 8013ed2:	46ae      	mov	lr, r5
 8013ed4:	f04f 0a00 	mov.w	sl, #0
 8013ed8:	f8bc b000 	ldrh.w	fp, [ip]
 8013edc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013ee0:	fb09 770b 	mla	r7, r9, fp, r7
 8013ee4:	4457      	add	r7, sl
 8013ee6:	b29b      	uxth	r3, r3
 8013ee8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013eec:	f84e 3b04 	str.w	r3, [lr], #4
 8013ef0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ef4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ef8:	f8be 3000 	ldrh.w	r3, [lr]
 8013efc:	fb09 330a 	mla	r3, r9, sl, r3
 8013f00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013f04:	4562      	cmp	r2, ip
 8013f06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013f0a:	d8e5      	bhi.n	8013ed8 <__multiply+0x10c>
 8013f0c:	9f01      	ldr	r7, [sp, #4]
 8013f0e:	51eb      	str	r3, [r5, r7]
 8013f10:	3504      	adds	r5, #4
 8013f12:	e799      	b.n	8013e48 <__multiply+0x7c>
 8013f14:	3e01      	subs	r6, #1
 8013f16:	e79b      	b.n	8013e50 <__multiply+0x84>
 8013f18:	080159a4 	.word	0x080159a4
 8013f1c:	080159b5 	.word	0x080159b5

08013f20 <__pow5mult>:
 8013f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f24:	4615      	mov	r5, r2
 8013f26:	f012 0203 	ands.w	r2, r2, #3
 8013f2a:	4607      	mov	r7, r0
 8013f2c:	460e      	mov	r6, r1
 8013f2e:	d007      	beq.n	8013f40 <__pow5mult+0x20>
 8013f30:	4c25      	ldr	r4, [pc, #148]	@ (8013fc8 <__pow5mult+0xa8>)
 8013f32:	3a01      	subs	r2, #1
 8013f34:	2300      	movs	r3, #0
 8013f36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f3a:	f7ff fe9f 	bl	8013c7c <__multadd>
 8013f3e:	4606      	mov	r6, r0
 8013f40:	10ad      	asrs	r5, r5, #2
 8013f42:	d03d      	beq.n	8013fc0 <__pow5mult+0xa0>
 8013f44:	69fc      	ldr	r4, [r7, #28]
 8013f46:	b97c      	cbnz	r4, 8013f68 <__pow5mult+0x48>
 8013f48:	2010      	movs	r0, #16
 8013f4a:	f7fe f967 	bl	801221c <malloc>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	61f8      	str	r0, [r7, #28]
 8013f52:	b928      	cbnz	r0, 8013f60 <__pow5mult+0x40>
 8013f54:	4b1d      	ldr	r3, [pc, #116]	@ (8013fcc <__pow5mult+0xac>)
 8013f56:	481e      	ldr	r0, [pc, #120]	@ (8013fd0 <__pow5mult+0xb0>)
 8013f58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013f5c:	f000 fbda 	bl	8014714 <__assert_func>
 8013f60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f64:	6004      	str	r4, [r0, #0]
 8013f66:	60c4      	str	r4, [r0, #12]
 8013f68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013f6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013f70:	b94c      	cbnz	r4, 8013f86 <__pow5mult+0x66>
 8013f72:	f240 2171 	movw	r1, #625	@ 0x271
 8013f76:	4638      	mov	r0, r7
 8013f78:	f7ff ff12 	bl	8013da0 <__i2b>
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f82:	4604      	mov	r4, r0
 8013f84:	6003      	str	r3, [r0, #0]
 8013f86:	f04f 0900 	mov.w	r9, #0
 8013f8a:	07eb      	lsls	r3, r5, #31
 8013f8c:	d50a      	bpl.n	8013fa4 <__pow5mult+0x84>
 8013f8e:	4631      	mov	r1, r6
 8013f90:	4622      	mov	r2, r4
 8013f92:	4638      	mov	r0, r7
 8013f94:	f7ff ff1a 	bl	8013dcc <__multiply>
 8013f98:	4631      	mov	r1, r6
 8013f9a:	4680      	mov	r8, r0
 8013f9c:	4638      	mov	r0, r7
 8013f9e:	f7ff fe4b 	bl	8013c38 <_Bfree>
 8013fa2:	4646      	mov	r6, r8
 8013fa4:	106d      	asrs	r5, r5, #1
 8013fa6:	d00b      	beq.n	8013fc0 <__pow5mult+0xa0>
 8013fa8:	6820      	ldr	r0, [r4, #0]
 8013faa:	b938      	cbnz	r0, 8013fbc <__pow5mult+0x9c>
 8013fac:	4622      	mov	r2, r4
 8013fae:	4621      	mov	r1, r4
 8013fb0:	4638      	mov	r0, r7
 8013fb2:	f7ff ff0b 	bl	8013dcc <__multiply>
 8013fb6:	6020      	str	r0, [r4, #0]
 8013fb8:	f8c0 9000 	str.w	r9, [r0]
 8013fbc:	4604      	mov	r4, r0
 8013fbe:	e7e4      	b.n	8013f8a <__pow5mult+0x6a>
 8013fc0:	4630      	mov	r0, r6
 8013fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fc6:	bf00      	nop
 8013fc8:	08015a10 	.word	0x08015a10
 8013fcc:	08015935 	.word	0x08015935
 8013fd0:	080159b5 	.word	0x080159b5

08013fd4 <__lshift>:
 8013fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fd8:	460c      	mov	r4, r1
 8013fda:	6849      	ldr	r1, [r1, #4]
 8013fdc:	6923      	ldr	r3, [r4, #16]
 8013fde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013fe2:	68a3      	ldr	r3, [r4, #8]
 8013fe4:	4607      	mov	r7, r0
 8013fe6:	4691      	mov	r9, r2
 8013fe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013fec:	f108 0601 	add.w	r6, r8, #1
 8013ff0:	42b3      	cmp	r3, r6
 8013ff2:	db0b      	blt.n	801400c <__lshift+0x38>
 8013ff4:	4638      	mov	r0, r7
 8013ff6:	f7ff fddf 	bl	8013bb8 <_Balloc>
 8013ffa:	4605      	mov	r5, r0
 8013ffc:	b948      	cbnz	r0, 8014012 <__lshift+0x3e>
 8013ffe:	4602      	mov	r2, r0
 8014000:	4b28      	ldr	r3, [pc, #160]	@ (80140a4 <__lshift+0xd0>)
 8014002:	4829      	ldr	r0, [pc, #164]	@ (80140a8 <__lshift+0xd4>)
 8014004:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014008:	f000 fb84 	bl	8014714 <__assert_func>
 801400c:	3101      	adds	r1, #1
 801400e:	005b      	lsls	r3, r3, #1
 8014010:	e7ee      	b.n	8013ff0 <__lshift+0x1c>
 8014012:	2300      	movs	r3, #0
 8014014:	f100 0114 	add.w	r1, r0, #20
 8014018:	f100 0210 	add.w	r2, r0, #16
 801401c:	4618      	mov	r0, r3
 801401e:	4553      	cmp	r3, sl
 8014020:	db33      	blt.n	801408a <__lshift+0xb6>
 8014022:	6920      	ldr	r0, [r4, #16]
 8014024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014028:	f104 0314 	add.w	r3, r4, #20
 801402c:	f019 091f 	ands.w	r9, r9, #31
 8014030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014034:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014038:	d02b      	beq.n	8014092 <__lshift+0xbe>
 801403a:	f1c9 0e20 	rsb	lr, r9, #32
 801403e:	468a      	mov	sl, r1
 8014040:	2200      	movs	r2, #0
 8014042:	6818      	ldr	r0, [r3, #0]
 8014044:	fa00 f009 	lsl.w	r0, r0, r9
 8014048:	4310      	orrs	r0, r2
 801404a:	f84a 0b04 	str.w	r0, [sl], #4
 801404e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014052:	459c      	cmp	ip, r3
 8014054:	fa22 f20e 	lsr.w	r2, r2, lr
 8014058:	d8f3      	bhi.n	8014042 <__lshift+0x6e>
 801405a:	ebac 0304 	sub.w	r3, ip, r4
 801405e:	3b15      	subs	r3, #21
 8014060:	f023 0303 	bic.w	r3, r3, #3
 8014064:	3304      	adds	r3, #4
 8014066:	f104 0015 	add.w	r0, r4, #21
 801406a:	4584      	cmp	ip, r0
 801406c:	bf38      	it	cc
 801406e:	2304      	movcc	r3, #4
 8014070:	50ca      	str	r2, [r1, r3]
 8014072:	b10a      	cbz	r2, 8014078 <__lshift+0xa4>
 8014074:	f108 0602 	add.w	r6, r8, #2
 8014078:	3e01      	subs	r6, #1
 801407a:	4638      	mov	r0, r7
 801407c:	612e      	str	r6, [r5, #16]
 801407e:	4621      	mov	r1, r4
 8014080:	f7ff fdda 	bl	8013c38 <_Bfree>
 8014084:	4628      	mov	r0, r5
 8014086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801408a:	f842 0f04 	str.w	r0, [r2, #4]!
 801408e:	3301      	adds	r3, #1
 8014090:	e7c5      	b.n	801401e <__lshift+0x4a>
 8014092:	3904      	subs	r1, #4
 8014094:	f853 2b04 	ldr.w	r2, [r3], #4
 8014098:	f841 2f04 	str.w	r2, [r1, #4]!
 801409c:	459c      	cmp	ip, r3
 801409e:	d8f9      	bhi.n	8014094 <__lshift+0xc0>
 80140a0:	e7ea      	b.n	8014078 <__lshift+0xa4>
 80140a2:	bf00      	nop
 80140a4:	080159a4 	.word	0x080159a4
 80140a8:	080159b5 	.word	0x080159b5

080140ac <__mcmp>:
 80140ac:	690a      	ldr	r2, [r1, #16]
 80140ae:	4603      	mov	r3, r0
 80140b0:	6900      	ldr	r0, [r0, #16]
 80140b2:	1a80      	subs	r0, r0, r2
 80140b4:	b530      	push	{r4, r5, lr}
 80140b6:	d10e      	bne.n	80140d6 <__mcmp+0x2a>
 80140b8:	3314      	adds	r3, #20
 80140ba:	3114      	adds	r1, #20
 80140bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80140c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80140c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80140c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80140cc:	4295      	cmp	r5, r2
 80140ce:	d003      	beq.n	80140d8 <__mcmp+0x2c>
 80140d0:	d205      	bcs.n	80140de <__mcmp+0x32>
 80140d2:	f04f 30ff 	mov.w	r0, #4294967295
 80140d6:	bd30      	pop	{r4, r5, pc}
 80140d8:	42a3      	cmp	r3, r4
 80140da:	d3f3      	bcc.n	80140c4 <__mcmp+0x18>
 80140dc:	e7fb      	b.n	80140d6 <__mcmp+0x2a>
 80140de:	2001      	movs	r0, #1
 80140e0:	e7f9      	b.n	80140d6 <__mcmp+0x2a>
	...

080140e4 <__mdiff>:
 80140e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e8:	4689      	mov	r9, r1
 80140ea:	4606      	mov	r6, r0
 80140ec:	4611      	mov	r1, r2
 80140ee:	4648      	mov	r0, r9
 80140f0:	4614      	mov	r4, r2
 80140f2:	f7ff ffdb 	bl	80140ac <__mcmp>
 80140f6:	1e05      	subs	r5, r0, #0
 80140f8:	d112      	bne.n	8014120 <__mdiff+0x3c>
 80140fa:	4629      	mov	r1, r5
 80140fc:	4630      	mov	r0, r6
 80140fe:	f7ff fd5b 	bl	8013bb8 <_Balloc>
 8014102:	4602      	mov	r2, r0
 8014104:	b928      	cbnz	r0, 8014112 <__mdiff+0x2e>
 8014106:	4b3f      	ldr	r3, [pc, #252]	@ (8014204 <__mdiff+0x120>)
 8014108:	f240 2137 	movw	r1, #567	@ 0x237
 801410c:	483e      	ldr	r0, [pc, #248]	@ (8014208 <__mdiff+0x124>)
 801410e:	f000 fb01 	bl	8014714 <__assert_func>
 8014112:	2301      	movs	r3, #1
 8014114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014118:	4610      	mov	r0, r2
 801411a:	b003      	add	sp, #12
 801411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014120:	bfbc      	itt	lt
 8014122:	464b      	movlt	r3, r9
 8014124:	46a1      	movlt	r9, r4
 8014126:	4630      	mov	r0, r6
 8014128:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801412c:	bfba      	itte	lt
 801412e:	461c      	movlt	r4, r3
 8014130:	2501      	movlt	r5, #1
 8014132:	2500      	movge	r5, #0
 8014134:	f7ff fd40 	bl	8013bb8 <_Balloc>
 8014138:	4602      	mov	r2, r0
 801413a:	b918      	cbnz	r0, 8014144 <__mdiff+0x60>
 801413c:	4b31      	ldr	r3, [pc, #196]	@ (8014204 <__mdiff+0x120>)
 801413e:	f240 2145 	movw	r1, #581	@ 0x245
 8014142:	e7e3      	b.n	801410c <__mdiff+0x28>
 8014144:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014148:	6926      	ldr	r6, [r4, #16]
 801414a:	60c5      	str	r5, [r0, #12]
 801414c:	f109 0310 	add.w	r3, r9, #16
 8014150:	f109 0514 	add.w	r5, r9, #20
 8014154:	f104 0e14 	add.w	lr, r4, #20
 8014158:	f100 0b14 	add.w	fp, r0, #20
 801415c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014160:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014164:	9301      	str	r3, [sp, #4]
 8014166:	46d9      	mov	r9, fp
 8014168:	f04f 0c00 	mov.w	ip, #0
 801416c:	9b01      	ldr	r3, [sp, #4]
 801416e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014172:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014176:	9301      	str	r3, [sp, #4]
 8014178:	fa1f f38a 	uxth.w	r3, sl
 801417c:	4619      	mov	r1, r3
 801417e:	b283      	uxth	r3, r0
 8014180:	1acb      	subs	r3, r1, r3
 8014182:	0c00      	lsrs	r0, r0, #16
 8014184:	4463      	add	r3, ip
 8014186:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801418a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801418e:	b29b      	uxth	r3, r3
 8014190:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014194:	4576      	cmp	r6, lr
 8014196:	f849 3b04 	str.w	r3, [r9], #4
 801419a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801419e:	d8e5      	bhi.n	801416c <__mdiff+0x88>
 80141a0:	1b33      	subs	r3, r6, r4
 80141a2:	3b15      	subs	r3, #21
 80141a4:	f023 0303 	bic.w	r3, r3, #3
 80141a8:	3415      	adds	r4, #21
 80141aa:	3304      	adds	r3, #4
 80141ac:	42a6      	cmp	r6, r4
 80141ae:	bf38      	it	cc
 80141b0:	2304      	movcc	r3, #4
 80141b2:	441d      	add	r5, r3
 80141b4:	445b      	add	r3, fp
 80141b6:	461e      	mov	r6, r3
 80141b8:	462c      	mov	r4, r5
 80141ba:	4544      	cmp	r4, r8
 80141bc:	d30e      	bcc.n	80141dc <__mdiff+0xf8>
 80141be:	f108 0103 	add.w	r1, r8, #3
 80141c2:	1b49      	subs	r1, r1, r5
 80141c4:	f021 0103 	bic.w	r1, r1, #3
 80141c8:	3d03      	subs	r5, #3
 80141ca:	45a8      	cmp	r8, r5
 80141cc:	bf38      	it	cc
 80141ce:	2100      	movcc	r1, #0
 80141d0:	440b      	add	r3, r1
 80141d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80141d6:	b191      	cbz	r1, 80141fe <__mdiff+0x11a>
 80141d8:	6117      	str	r7, [r2, #16]
 80141da:	e79d      	b.n	8014118 <__mdiff+0x34>
 80141dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80141e0:	46e6      	mov	lr, ip
 80141e2:	0c08      	lsrs	r0, r1, #16
 80141e4:	fa1c fc81 	uxtah	ip, ip, r1
 80141e8:	4471      	add	r1, lr
 80141ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80141ee:	b289      	uxth	r1, r1
 80141f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80141f4:	f846 1b04 	str.w	r1, [r6], #4
 80141f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80141fc:	e7dd      	b.n	80141ba <__mdiff+0xd6>
 80141fe:	3f01      	subs	r7, #1
 8014200:	e7e7      	b.n	80141d2 <__mdiff+0xee>
 8014202:	bf00      	nop
 8014204:	080159a4 	.word	0x080159a4
 8014208:	080159b5 	.word	0x080159b5

0801420c <__d2b>:
 801420c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014210:	460f      	mov	r7, r1
 8014212:	2101      	movs	r1, #1
 8014214:	ec59 8b10 	vmov	r8, r9, d0
 8014218:	4616      	mov	r6, r2
 801421a:	f7ff fccd 	bl	8013bb8 <_Balloc>
 801421e:	4604      	mov	r4, r0
 8014220:	b930      	cbnz	r0, 8014230 <__d2b+0x24>
 8014222:	4602      	mov	r2, r0
 8014224:	4b23      	ldr	r3, [pc, #140]	@ (80142b4 <__d2b+0xa8>)
 8014226:	4824      	ldr	r0, [pc, #144]	@ (80142b8 <__d2b+0xac>)
 8014228:	f240 310f 	movw	r1, #783	@ 0x30f
 801422c:	f000 fa72 	bl	8014714 <__assert_func>
 8014230:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014234:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014238:	b10d      	cbz	r5, 801423e <__d2b+0x32>
 801423a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801423e:	9301      	str	r3, [sp, #4]
 8014240:	f1b8 0300 	subs.w	r3, r8, #0
 8014244:	d023      	beq.n	801428e <__d2b+0x82>
 8014246:	4668      	mov	r0, sp
 8014248:	9300      	str	r3, [sp, #0]
 801424a:	f7ff fd7c 	bl	8013d46 <__lo0bits>
 801424e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014252:	b1d0      	cbz	r0, 801428a <__d2b+0x7e>
 8014254:	f1c0 0320 	rsb	r3, r0, #32
 8014258:	fa02 f303 	lsl.w	r3, r2, r3
 801425c:	430b      	orrs	r3, r1
 801425e:	40c2      	lsrs	r2, r0
 8014260:	6163      	str	r3, [r4, #20]
 8014262:	9201      	str	r2, [sp, #4]
 8014264:	9b01      	ldr	r3, [sp, #4]
 8014266:	61a3      	str	r3, [r4, #24]
 8014268:	2b00      	cmp	r3, #0
 801426a:	bf0c      	ite	eq
 801426c:	2201      	moveq	r2, #1
 801426e:	2202      	movne	r2, #2
 8014270:	6122      	str	r2, [r4, #16]
 8014272:	b1a5      	cbz	r5, 801429e <__d2b+0x92>
 8014274:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014278:	4405      	add	r5, r0
 801427a:	603d      	str	r5, [r7, #0]
 801427c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014280:	6030      	str	r0, [r6, #0]
 8014282:	4620      	mov	r0, r4
 8014284:	b003      	add	sp, #12
 8014286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801428a:	6161      	str	r1, [r4, #20]
 801428c:	e7ea      	b.n	8014264 <__d2b+0x58>
 801428e:	a801      	add	r0, sp, #4
 8014290:	f7ff fd59 	bl	8013d46 <__lo0bits>
 8014294:	9b01      	ldr	r3, [sp, #4]
 8014296:	6163      	str	r3, [r4, #20]
 8014298:	3020      	adds	r0, #32
 801429a:	2201      	movs	r2, #1
 801429c:	e7e8      	b.n	8014270 <__d2b+0x64>
 801429e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80142a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80142a6:	6038      	str	r0, [r7, #0]
 80142a8:	6918      	ldr	r0, [r3, #16]
 80142aa:	f7ff fd2d 	bl	8013d08 <__hi0bits>
 80142ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80142b2:	e7e5      	b.n	8014280 <__d2b+0x74>
 80142b4:	080159a4 	.word	0x080159a4
 80142b8:	080159b5 	.word	0x080159b5

080142bc <__ssputs_r>:
 80142bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142c0:	688e      	ldr	r6, [r1, #8]
 80142c2:	461f      	mov	r7, r3
 80142c4:	42be      	cmp	r6, r7
 80142c6:	680b      	ldr	r3, [r1, #0]
 80142c8:	4682      	mov	sl, r0
 80142ca:	460c      	mov	r4, r1
 80142cc:	4690      	mov	r8, r2
 80142ce:	d82d      	bhi.n	801432c <__ssputs_r+0x70>
 80142d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80142d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80142d8:	d026      	beq.n	8014328 <__ssputs_r+0x6c>
 80142da:	6965      	ldr	r5, [r4, #20]
 80142dc:	6909      	ldr	r1, [r1, #16]
 80142de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142e2:	eba3 0901 	sub.w	r9, r3, r1
 80142e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80142ea:	1c7b      	adds	r3, r7, #1
 80142ec:	444b      	add	r3, r9
 80142ee:	106d      	asrs	r5, r5, #1
 80142f0:	429d      	cmp	r5, r3
 80142f2:	bf38      	it	cc
 80142f4:	461d      	movcc	r5, r3
 80142f6:	0553      	lsls	r3, r2, #21
 80142f8:	d527      	bpl.n	801434a <__ssputs_r+0x8e>
 80142fa:	4629      	mov	r1, r5
 80142fc:	f7fd ffb8 	bl	8012270 <_malloc_r>
 8014300:	4606      	mov	r6, r0
 8014302:	b360      	cbz	r0, 801435e <__ssputs_r+0xa2>
 8014304:	6921      	ldr	r1, [r4, #16]
 8014306:	464a      	mov	r2, r9
 8014308:	f000 f9f6 	bl	80146f8 <memcpy>
 801430c:	89a3      	ldrh	r3, [r4, #12]
 801430e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014316:	81a3      	strh	r3, [r4, #12]
 8014318:	6126      	str	r6, [r4, #16]
 801431a:	6165      	str	r5, [r4, #20]
 801431c:	444e      	add	r6, r9
 801431e:	eba5 0509 	sub.w	r5, r5, r9
 8014322:	6026      	str	r6, [r4, #0]
 8014324:	60a5      	str	r5, [r4, #8]
 8014326:	463e      	mov	r6, r7
 8014328:	42be      	cmp	r6, r7
 801432a:	d900      	bls.n	801432e <__ssputs_r+0x72>
 801432c:	463e      	mov	r6, r7
 801432e:	6820      	ldr	r0, [r4, #0]
 8014330:	4632      	mov	r2, r6
 8014332:	4641      	mov	r1, r8
 8014334:	f000 f9c6 	bl	80146c4 <memmove>
 8014338:	68a3      	ldr	r3, [r4, #8]
 801433a:	1b9b      	subs	r3, r3, r6
 801433c:	60a3      	str	r3, [r4, #8]
 801433e:	6823      	ldr	r3, [r4, #0]
 8014340:	4433      	add	r3, r6
 8014342:	6023      	str	r3, [r4, #0]
 8014344:	2000      	movs	r0, #0
 8014346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801434a:	462a      	mov	r2, r5
 801434c:	f000 fa26 	bl	801479c <_realloc_r>
 8014350:	4606      	mov	r6, r0
 8014352:	2800      	cmp	r0, #0
 8014354:	d1e0      	bne.n	8014318 <__ssputs_r+0x5c>
 8014356:	6921      	ldr	r1, [r4, #16]
 8014358:	4650      	mov	r0, sl
 801435a:	f7ff fbe3 	bl	8013b24 <_free_r>
 801435e:	230c      	movs	r3, #12
 8014360:	f8ca 3000 	str.w	r3, [sl]
 8014364:	89a3      	ldrh	r3, [r4, #12]
 8014366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801436a:	81a3      	strh	r3, [r4, #12]
 801436c:	f04f 30ff 	mov.w	r0, #4294967295
 8014370:	e7e9      	b.n	8014346 <__ssputs_r+0x8a>
	...

08014374 <_svfiprintf_r>:
 8014374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014378:	4698      	mov	r8, r3
 801437a:	898b      	ldrh	r3, [r1, #12]
 801437c:	061b      	lsls	r3, r3, #24
 801437e:	b09d      	sub	sp, #116	@ 0x74
 8014380:	4607      	mov	r7, r0
 8014382:	460d      	mov	r5, r1
 8014384:	4614      	mov	r4, r2
 8014386:	d510      	bpl.n	80143aa <_svfiprintf_r+0x36>
 8014388:	690b      	ldr	r3, [r1, #16]
 801438a:	b973      	cbnz	r3, 80143aa <_svfiprintf_r+0x36>
 801438c:	2140      	movs	r1, #64	@ 0x40
 801438e:	f7fd ff6f 	bl	8012270 <_malloc_r>
 8014392:	6028      	str	r0, [r5, #0]
 8014394:	6128      	str	r0, [r5, #16]
 8014396:	b930      	cbnz	r0, 80143a6 <_svfiprintf_r+0x32>
 8014398:	230c      	movs	r3, #12
 801439a:	603b      	str	r3, [r7, #0]
 801439c:	f04f 30ff 	mov.w	r0, #4294967295
 80143a0:	b01d      	add	sp, #116	@ 0x74
 80143a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a6:	2340      	movs	r3, #64	@ 0x40
 80143a8:	616b      	str	r3, [r5, #20]
 80143aa:	2300      	movs	r3, #0
 80143ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80143ae:	2320      	movs	r3, #32
 80143b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80143b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80143b8:	2330      	movs	r3, #48	@ 0x30
 80143ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014558 <_svfiprintf_r+0x1e4>
 80143be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80143c2:	f04f 0901 	mov.w	r9, #1
 80143c6:	4623      	mov	r3, r4
 80143c8:	469a      	mov	sl, r3
 80143ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143ce:	b10a      	cbz	r2, 80143d4 <_svfiprintf_r+0x60>
 80143d0:	2a25      	cmp	r2, #37	@ 0x25
 80143d2:	d1f9      	bne.n	80143c8 <_svfiprintf_r+0x54>
 80143d4:	ebba 0b04 	subs.w	fp, sl, r4
 80143d8:	d00b      	beq.n	80143f2 <_svfiprintf_r+0x7e>
 80143da:	465b      	mov	r3, fp
 80143dc:	4622      	mov	r2, r4
 80143de:	4629      	mov	r1, r5
 80143e0:	4638      	mov	r0, r7
 80143e2:	f7ff ff6b 	bl	80142bc <__ssputs_r>
 80143e6:	3001      	adds	r0, #1
 80143e8:	f000 80a7 	beq.w	801453a <_svfiprintf_r+0x1c6>
 80143ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143ee:	445a      	add	r2, fp
 80143f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80143f2:	f89a 3000 	ldrb.w	r3, [sl]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	f000 809f 	beq.w	801453a <_svfiprintf_r+0x1c6>
 80143fc:	2300      	movs	r3, #0
 80143fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014406:	f10a 0a01 	add.w	sl, sl, #1
 801440a:	9304      	str	r3, [sp, #16]
 801440c:	9307      	str	r3, [sp, #28]
 801440e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014412:	931a      	str	r3, [sp, #104]	@ 0x68
 8014414:	4654      	mov	r4, sl
 8014416:	2205      	movs	r2, #5
 8014418:	f814 1b01 	ldrb.w	r1, [r4], #1
 801441c:	484e      	ldr	r0, [pc, #312]	@ (8014558 <_svfiprintf_r+0x1e4>)
 801441e:	f7eb ff5f 	bl	80002e0 <memchr>
 8014422:	9a04      	ldr	r2, [sp, #16]
 8014424:	b9d8      	cbnz	r0, 801445e <_svfiprintf_r+0xea>
 8014426:	06d0      	lsls	r0, r2, #27
 8014428:	bf44      	itt	mi
 801442a:	2320      	movmi	r3, #32
 801442c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014430:	0711      	lsls	r1, r2, #28
 8014432:	bf44      	itt	mi
 8014434:	232b      	movmi	r3, #43	@ 0x2b
 8014436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801443a:	f89a 3000 	ldrb.w	r3, [sl]
 801443e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014440:	d015      	beq.n	801446e <_svfiprintf_r+0xfa>
 8014442:	9a07      	ldr	r2, [sp, #28]
 8014444:	4654      	mov	r4, sl
 8014446:	2000      	movs	r0, #0
 8014448:	f04f 0c0a 	mov.w	ip, #10
 801444c:	4621      	mov	r1, r4
 801444e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014452:	3b30      	subs	r3, #48	@ 0x30
 8014454:	2b09      	cmp	r3, #9
 8014456:	d94b      	bls.n	80144f0 <_svfiprintf_r+0x17c>
 8014458:	b1b0      	cbz	r0, 8014488 <_svfiprintf_r+0x114>
 801445a:	9207      	str	r2, [sp, #28]
 801445c:	e014      	b.n	8014488 <_svfiprintf_r+0x114>
 801445e:	eba0 0308 	sub.w	r3, r0, r8
 8014462:	fa09 f303 	lsl.w	r3, r9, r3
 8014466:	4313      	orrs	r3, r2
 8014468:	9304      	str	r3, [sp, #16]
 801446a:	46a2      	mov	sl, r4
 801446c:	e7d2      	b.n	8014414 <_svfiprintf_r+0xa0>
 801446e:	9b03      	ldr	r3, [sp, #12]
 8014470:	1d19      	adds	r1, r3, #4
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	9103      	str	r1, [sp, #12]
 8014476:	2b00      	cmp	r3, #0
 8014478:	bfbb      	ittet	lt
 801447a:	425b      	neglt	r3, r3
 801447c:	f042 0202 	orrlt.w	r2, r2, #2
 8014480:	9307      	strge	r3, [sp, #28]
 8014482:	9307      	strlt	r3, [sp, #28]
 8014484:	bfb8      	it	lt
 8014486:	9204      	strlt	r2, [sp, #16]
 8014488:	7823      	ldrb	r3, [r4, #0]
 801448a:	2b2e      	cmp	r3, #46	@ 0x2e
 801448c:	d10a      	bne.n	80144a4 <_svfiprintf_r+0x130>
 801448e:	7863      	ldrb	r3, [r4, #1]
 8014490:	2b2a      	cmp	r3, #42	@ 0x2a
 8014492:	d132      	bne.n	80144fa <_svfiprintf_r+0x186>
 8014494:	9b03      	ldr	r3, [sp, #12]
 8014496:	1d1a      	adds	r2, r3, #4
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	9203      	str	r2, [sp, #12]
 801449c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80144a0:	3402      	adds	r4, #2
 80144a2:	9305      	str	r3, [sp, #20]
 80144a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014568 <_svfiprintf_r+0x1f4>
 80144a8:	7821      	ldrb	r1, [r4, #0]
 80144aa:	2203      	movs	r2, #3
 80144ac:	4650      	mov	r0, sl
 80144ae:	f7eb ff17 	bl	80002e0 <memchr>
 80144b2:	b138      	cbz	r0, 80144c4 <_svfiprintf_r+0x150>
 80144b4:	9b04      	ldr	r3, [sp, #16]
 80144b6:	eba0 000a 	sub.w	r0, r0, sl
 80144ba:	2240      	movs	r2, #64	@ 0x40
 80144bc:	4082      	lsls	r2, r0
 80144be:	4313      	orrs	r3, r2
 80144c0:	3401      	adds	r4, #1
 80144c2:	9304      	str	r3, [sp, #16]
 80144c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144c8:	4824      	ldr	r0, [pc, #144]	@ (801455c <_svfiprintf_r+0x1e8>)
 80144ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80144ce:	2206      	movs	r2, #6
 80144d0:	f7eb ff06 	bl	80002e0 <memchr>
 80144d4:	2800      	cmp	r0, #0
 80144d6:	d036      	beq.n	8014546 <_svfiprintf_r+0x1d2>
 80144d8:	4b21      	ldr	r3, [pc, #132]	@ (8014560 <_svfiprintf_r+0x1ec>)
 80144da:	bb1b      	cbnz	r3, 8014524 <_svfiprintf_r+0x1b0>
 80144dc:	9b03      	ldr	r3, [sp, #12]
 80144de:	3307      	adds	r3, #7
 80144e0:	f023 0307 	bic.w	r3, r3, #7
 80144e4:	3308      	adds	r3, #8
 80144e6:	9303      	str	r3, [sp, #12]
 80144e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144ea:	4433      	add	r3, r6
 80144ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80144ee:	e76a      	b.n	80143c6 <_svfiprintf_r+0x52>
 80144f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80144f4:	460c      	mov	r4, r1
 80144f6:	2001      	movs	r0, #1
 80144f8:	e7a8      	b.n	801444c <_svfiprintf_r+0xd8>
 80144fa:	2300      	movs	r3, #0
 80144fc:	3401      	adds	r4, #1
 80144fe:	9305      	str	r3, [sp, #20]
 8014500:	4619      	mov	r1, r3
 8014502:	f04f 0c0a 	mov.w	ip, #10
 8014506:	4620      	mov	r0, r4
 8014508:	f810 2b01 	ldrb.w	r2, [r0], #1
 801450c:	3a30      	subs	r2, #48	@ 0x30
 801450e:	2a09      	cmp	r2, #9
 8014510:	d903      	bls.n	801451a <_svfiprintf_r+0x1a6>
 8014512:	2b00      	cmp	r3, #0
 8014514:	d0c6      	beq.n	80144a4 <_svfiprintf_r+0x130>
 8014516:	9105      	str	r1, [sp, #20]
 8014518:	e7c4      	b.n	80144a4 <_svfiprintf_r+0x130>
 801451a:	fb0c 2101 	mla	r1, ip, r1, r2
 801451e:	4604      	mov	r4, r0
 8014520:	2301      	movs	r3, #1
 8014522:	e7f0      	b.n	8014506 <_svfiprintf_r+0x192>
 8014524:	ab03      	add	r3, sp, #12
 8014526:	9300      	str	r3, [sp, #0]
 8014528:	462a      	mov	r2, r5
 801452a:	4b0e      	ldr	r3, [pc, #56]	@ (8014564 <_svfiprintf_r+0x1f0>)
 801452c:	a904      	add	r1, sp, #16
 801452e:	4638      	mov	r0, r7
 8014530:	f7fd ffba 	bl	80124a8 <_printf_float>
 8014534:	1c42      	adds	r2, r0, #1
 8014536:	4606      	mov	r6, r0
 8014538:	d1d6      	bne.n	80144e8 <_svfiprintf_r+0x174>
 801453a:	89ab      	ldrh	r3, [r5, #12]
 801453c:	065b      	lsls	r3, r3, #25
 801453e:	f53f af2d 	bmi.w	801439c <_svfiprintf_r+0x28>
 8014542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014544:	e72c      	b.n	80143a0 <_svfiprintf_r+0x2c>
 8014546:	ab03      	add	r3, sp, #12
 8014548:	9300      	str	r3, [sp, #0]
 801454a:	462a      	mov	r2, r5
 801454c:	4b05      	ldr	r3, [pc, #20]	@ (8014564 <_svfiprintf_r+0x1f0>)
 801454e:	a904      	add	r1, sp, #16
 8014550:	4638      	mov	r0, r7
 8014552:	f7fe fa31 	bl	80129b8 <_printf_i>
 8014556:	e7ed      	b.n	8014534 <_svfiprintf_r+0x1c0>
 8014558:	08015b10 	.word	0x08015b10
 801455c:	08015b1a 	.word	0x08015b1a
 8014560:	080124a9 	.word	0x080124a9
 8014564:	080142bd 	.word	0x080142bd
 8014568:	08015b16 	.word	0x08015b16

0801456c <__sflush_r>:
 801456c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014574:	0716      	lsls	r6, r2, #28
 8014576:	4605      	mov	r5, r0
 8014578:	460c      	mov	r4, r1
 801457a:	d454      	bmi.n	8014626 <__sflush_r+0xba>
 801457c:	684b      	ldr	r3, [r1, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	dc02      	bgt.n	8014588 <__sflush_r+0x1c>
 8014582:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014584:	2b00      	cmp	r3, #0
 8014586:	dd48      	ble.n	801461a <__sflush_r+0xae>
 8014588:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801458a:	2e00      	cmp	r6, #0
 801458c:	d045      	beq.n	801461a <__sflush_r+0xae>
 801458e:	2300      	movs	r3, #0
 8014590:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014594:	682f      	ldr	r7, [r5, #0]
 8014596:	6a21      	ldr	r1, [r4, #32]
 8014598:	602b      	str	r3, [r5, #0]
 801459a:	d030      	beq.n	80145fe <__sflush_r+0x92>
 801459c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801459e:	89a3      	ldrh	r3, [r4, #12]
 80145a0:	0759      	lsls	r1, r3, #29
 80145a2:	d505      	bpl.n	80145b0 <__sflush_r+0x44>
 80145a4:	6863      	ldr	r3, [r4, #4]
 80145a6:	1ad2      	subs	r2, r2, r3
 80145a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80145aa:	b10b      	cbz	r3, 80145b0 <__sflush_r+0x44>
 80145ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80145ae:	1ad2      	subs	r2, r2, r3
 80145b0:	2300      	movs	r3, #0
 80145b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80145b4:	6a21      	ldr	r1, [r4, #32]
 80145b6:	4628      	mov	r0, r5
 80145b8:	47b0      	blx	r6
 80145ba:	1c43      	adds	r3, r0, #1
 80145bc:	89a3      	ldrh	r3, [r4, #12]
 80145be:	d106      	bne.n	80145ce <__sflush_r+0x62>
 80145c0:	6829      	ldr	r1, [r5, #0]
 80145c2:	291d      	cmp	r1, #29
 80145c4:	d82b      	bhi.n	801461e <__sflush_r+0xb2>
 80145c6:	4a2a      	ldr	r2, [pc, #168]	@ (8014670 <__sflush_r+0x104>)
 80145c8:	410a      	asrs	r2, r1
 80145ca:	07d6      	lsls	r6, r2, #31
 80145cc:	d427      	bmi.n	801461e <__sflush_r+0xb2>
 80145ce:	2200      	movs	r2, #0
 80145d0:	6062      	str	r2, [r4, #4]
 80145d2:	04d9      	lsls	r1, r3, #19
 80145d4:	6922      	ldr	r2, [r4, #16]
 80145d6:	6022      	str	r2, [r4, #0]
 80145d8:	d504      	bpl.n	80145e4 <__sflush_r+0x78>
 80145da:	1c42      	adds	r2, r0, #1
 80145dc:	d101      	bne.n	80145e2 <__sflush_r+0x76>
 80145de:	682b      	ldr	r3, [r5, #0]
 80145e0:	b903      	cbnz	r3, 80145e4 <__sflush_r+0x78>
 80145e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80145e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145e6:	602f      	str	r7, [r5, #0]
 80145e8:	b1b9      	cbz	r1, 801461a <__sflush_r+0xae>
 80145ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80145ee:	4299      	cmp	r1, r3
 80145f0:	d002      	beq.n	80145f8 <__sflush_r+0x8c>
 80145f2:	4628      	mov	r0, r5
 80145f4:	f7ff fa96 	bl	8013b24 <_free_r>
 80145f8:	2300      	movs	r3, #0
 80145fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80145fc:	e00d      	b.n	801461a <__sflush_r+0xae>
 80145fe:	2301      	movs	r3, #1
 8014600:	4628      	mov	r0, r5
 8014602:	47b0      	blx	r6
 8014604:	4602      	mov	r2, r0
 8014606:	1c50      	adds	r0, r2, #1
 8014608:	d1c9      	bne.n	801459e <__sflush_r+0x32>
 801460a:	682b      	ldr	r3, [r5, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d0c6      	beq.n	801459e <__sflush_r+0x32>
 8014610:	2b1d      	cmp	r3, #29
 8014612:	d001      	beq.n	8014618 <__sflush_r+0xac>
 8014614:	2b16      	cmp	r3, #22
 8014616:	d11e      	bne.n	8014656 <__sflush_r+0xea>
 8014618:	602f      	str	r7, [r5, #0]
 801461a:	2000      	movs	r0, #0
 801461c:	e022      	b.n	8014664 <__sflush_r+0xf8>
 801461e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014622:	b21b      	sxth	r3, r3
 8014624:	e01b      	b.n	801465e <__sflush_r+0xf2>
 8014626:	690f      	ldr	r7, [r1, #16]
 8014628:	2f00      	cmp	r7, #0
 801462a:	d0f6      	beq.n	801461a <__sflush_r+0xae>
 801462c:	0793      	lsls	r3, r2, #30
 801462e:	680e      	ldr	r6, [r1, #0]
 8014630:	bf08      	it	eq
 8014632:	694b      	ldreq	r3, [r1, #20]
 8014634:	600f      	str	r7, [r1, #0]
 8014636:	bf18      	it	ne
 8014638:	2300      	movne	r3, #0
 801463a:	eba6 0807 	sub.w	r8, r6, r7
 801463e:	608b      	str	r3, [r1, #8]
 8014640:	f1b8 0f00 	cmp.w	r8, #0
 8014644:	dde9      	ble.n	801461a <__sflush_r+0xae>
 8014646:	6a21      	ldr	r1, [r4, #32]
 8014648:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801464a:	4643      	mov	r3, r8
 801464c:	463a      	mov	r2, r7
 801464e:	4628      	mov	r0, r5
 8014650:	47b0      	blx	r6
 8014652:	2800      	cmp	r0, #0
 8014654:	dc08      	bgt.n	8014668 <__sflush_r+0xfc>
 8014656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801465a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801465e:	81a3      	strh	r3, [r4, #12]
 8014660:	f04f 30ff 	mov.w	r0, #4294967295
 8014664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014668:	4407      	add	r7, r0
 801466a:	eba8 0800 	sub.w	r8, r8, r0
 801466e:	e7e7      	b.n	8014640 <__sflush_r+0xd4>
 8014670:	dfbffffe 	.word	0xdfbffffe

08014674 <_fflush_r>:
 8014674:	b538      	push	{r3, r4, r5, lr}
 8014676:	690b      	ldr	r3, [r1, #16]
 8014678:	4605      	mov	r5, r0
 801467a:	460c      	mov	r4, r1
 801467c:	b913      	cbnz	r3, 8014684 <_fflush_r+0x10>
 801467e:	2500      	movs	r5, #0
 8014680:	4628      	mov	r0, r5
 8014682:	bd38      	pop	{r3, r4, r5, pc}
 8014684:	b118      	cbz	r0, 801468e <_fflush_r+0x1a>
 8014686:	6a03      	ldr	r3, [r0, #32]
 8014688:	b90b      	cbnz	r3, 801468e <_fflush_r+0x1a>
 801468a:	f7fe fb41 	bl	8012d10 <__sinit>
 801468e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d0f3      	beq.n	801467e <_fflush_r+0xa>
 8014696:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014698:	07d0      	lsls	r0, r2, #31
 801469a:	d404      	bmi.n	80146a6 <_fflush_r+0x32>
 801469c:	0599      	lsls	r1, r3, #22
 801469e:	d402      	bmi.n	80146a6 <_fflush_r+0x32>
 80146a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146a2:	f7fe fc5c 	bl	8012f5e <__retarget_lock_acquire_recursive>
 80146a6:	4628      	mov	r0, r5
 80146a8:	4621      	mov	r1, r4
 80146aa:	f7ff ff5f 	bl	801456c <__sflush_r>
 80146ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146b0:	07da      	lsls	r2, r3, #31
 80146b2:	4605      	mov	r5, r0
 80146b4:	d4e4      	bmi.n	8014680 <_fflush_r+0xc>
 80146b6:	89a3      	ldrh	r3, [r4, #12]
 80146b8:	059b      	lsls	r3, r3, #22
 80146ba:	d4e1      	bmi.n	8014680 <_fflush_r+0xc>
 80146bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146be:	f7fe fc4f 	bl	8012f60 <__retarget_lock_release_recursive>
 80146c2:	e7dd      	b.n	8014680 <_fflush_r+0xc>

080146c4 <memmove>:
 80146c4:	4288      	cmp	r0, r1
 80146c6:	b510      	push	{r4, lr}
 80146c8:	eb01 0402 	add.w	r4, r1, r2
 80146cc:	d902      	bls.n	80146d4 <memmove+0x10>
 80146ce:	4284      	cmp	r4, r0
 80146d0:	4623      	mov	r3, r4
 80146d2:	d807      	bhi.n	80146e4 <memmove+0x20>
 80146d4:	1e43      	subs	r3, r0, #1
 80146d6:	42a1      	cmp	r1, r4
 80146d8:	d008      	beq.n	80146ec <memmove+0x28>
 80146da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80146de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80146e2:	e7f8      	b.n	80146d6 <memmove+0x12>
 80146e4:	4402      	add	r2, r0
 80146e6:	4601      	mov	r1, r0
 80146e8:	428a      	cmp	r2, r1
 80146ea:	d100      	bne.n	80146ee <memmove+0x2a>
 80146ec:	bd10      	pop	{r4, pc}
 80146ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80146f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80146f6:	e7f7      	b.n	80146e8 <memmove+0x24>

080146f8 <memcpy>:
 80146f8:	440a      	add	r2, r1
 80146fa:	4291      	cmp	r1, r2
 80146fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8014700:	d100      	bne.n	8014704 <memcpy+0xc>
 8014702:	4770      	bx	lr
 8014704:	b510      	push	{r4, lr}
 8014706:	f811 4b01 	ldrb.w	r4, [r1], #1
 801470a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801470e:	4291      	cmp	r1, r2
 8014710:	d1f9      	bne.n	8014706 <memcpy+0xe>
 8014712:	bd10      	pop	{r4, pc}

08014714 <__assert_func>:
 8014714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014716:	4614      	mov	r4, r2
 8014718:	461a      	mov	r2, r3
 801471a:	4b09      	ldr	r3, [pc, #36]	@ (8014740 <__assert_func+0x2c>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	4605      	mov	r5, r0
 8014720:	68d8      	ldr	r0, [r3, #12]
 8014722:	b954      	cbnz	r4, 801473a <__assert_func+0x26>
 8014724:	4b07      	ldr	r3, [pc, #28]	@ (8014744 <__assert_func+0x30>)
 8014726:	461c      	mov	r4, r3
 8014728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801472c:	9100      	str	r1, [sp, #0]
 801472e:	462b      	mov	r3, r5
 8014730:	4905      	ldr	r1, [pc, #20]	@ (8014748 <__assert_func+0x34>)
 8014732:	f000 f86f 	bl	8014814 <fiprintf>
 8014736:	f000 f87f 	bl	8014838 <abort>
 801473a:	4b04      	ldr	r3, [pc, #16]	@ (801474c <__assert_func+0x38>)
 801473c:	e7f4      	b.n	8014728 <__assert_func+0x14>
 801473e:	bf00      	nop
 8014740:	24000114 	.word	0x24000114
 8014744:	08015b66 	.word	0x08015b66
 8014748:	08015b38 	.word	0x08015b38
 801474c:	08015b2b 	.word	0x08015b2b

08014750 <_calloc_r>:
 8014750:	b570      	push	{r4, r5, r6, lr}
 8014752:	fba1 5402 	umull	r5, r4, r1, r2
 8014756:	b93c      	cbnz	r4, 8014768 <_calloc_r+0x18>
 8014758:	4629      	mov	r1, r5
 801475a:	f7fd fd89 	bl	8012270 <_malloc_r>
 801475e:	4606      	mov	r6, r0
 8014760:	b928      	cbnz	r0, 801476e <_calloc_r+0x1e>
 8014762:	2600      	movs	r6, #0
 8014764:	4630      	mov	r0, r6
 8014766:	bd70      	pop	{r4, r5, r6, pc}
 8014768:	220c      	movs	r2, #12
 801476a:	6002      	str	r2, [r0, #0]
 801476c:	e7f9      	b.n	8014762 <_calloc_r+0x12>
 801476e:	462a      	mov	r2, r5
 8014770:	4621      	mov	r1, r4
 8014772:	f7fe fb66 	bl	8012e42 <memset>
 8014776:	e7f5      	b.n	8014764 <_calloc_r+0x14>

08014778 <__ascii_mbtowc>:
 8014778:	b082      	sub	sp, #8
 801477a:	b901      	cbnz	r1, 801477e <__ascii_mbtowc+0x6>
 801477c:	a901      	add	r1, sp, #4
 801477e:	b142      	cbz	r2, 8014792 <__ascii_mbtowc+0x1a>
 8014780:	b14b      	cbz	r3, 8014796 <__ascii_mbtowc+0x1e>
 8014782:	7813      	ldrb	r3, [r2, #0]
 8014784:	600b      	str	r3, [r1, #0]
 8014786:	7812      	ldrb	r2, [r2, #0]
 8014788:	1e10      	subs	r0, r2, #0
 801478a:	bf18      	it	ne
 801478c:	2001      	movne	r0, #1
 801478e:	b002      	add	sp, #8
 8014790:	4770      	bx	lr
 8014792:	4610      	mov	r0, r2
 8014794:	e7fb      	b.n	801478e <__ascii_mbtowc+0x16>
 8014796:	f06f 0001 	mvn.w	r0, #1
 801479a:	e7f8      	b.n	801478e <__ascii_mbtowc+0x16>

0801479c <_realloc_r>:
 801479c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147a0:	4680      	mov	r8, r0
 80147a2:	4615      	mov	r5, r2
 80147a4:	460c      	mov	r4, r1
 80147a6:	b921      	cbnz	r1, 80147b2 <_realloc_r+0x16>
 80147a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147ac:	4611      	mov	r1, r2
 80147ae:	f7fd bd5f 	b.w	8012270 <_malloc_r>
 80147b2:	b92a      	cbnz	r2, 80147c0 <_realloc_r+0x24>
 80147b4:	f7ff f9b6 	bl	8013b24 <_free_r>
 80147b8:	2400      	movs	r4, #0
 80147ba:	4620      	mov	r0, r4
 80147bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147c0:	f000 f841 	bl	8014846 <_malloc_usable_size_r>
 80147c4:	4285      	cmp	r5, r0
 80147c6:	4606      	mov	r6, r0
 80147c8:	d802      	bhi.n	80147d0 <_realloc_r+0x34>
 80147ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80147ce:	d8f4      	bhi.n	80147ba <_realloc_r+0x1e>
 80147d0:	4629      	mov	r1, r5
 80147d2:	4640      	mov	r0, r8
 80147d4:	f7fd fd4c 	bl	8012270 <_malloc_r>
 80147d8:	4607      	mov	r7, r0
 80147da:	2800      	cmp	r0, #0
 80147dc:	d0ec      	beq.n	80147b8 <_realloc_r+0x1c>
 80147de:	42b5      	cmp	r5, r6
 80147e0:	462a      	mov	r2, r5
 80147e2:	4621      	mov	r1, r4
 80147e4:	bf28      	it	cs
 80147e6:	4632      	movcs	r2, r6
 80147e8:	f7ff ff86 	bl	80146f8 <memcpy>
 80147ec:	4621      	mov	r1, r4
 80147ee:	4640      	mov	r0, r8
 80147f0:	f7ff f998 	bl	8013b24 <_free_r>
 80147f4:	463c      	mov	r4, r7
 80147f6:	e7e0      	b.n	80147ba <_realloc_r+0x1e>

080147f8 <__ascii_wctomb>:
 80147f8:	4603      	mov	r3, r0
 80147fa:	4608      	mov	r0, r1
 80147fc:	b141      	cbz	r1, 8014810 <__ascii_wctomb+0x18>
 80147fe:	2aff      	cmp	r2, #255	@ 0xff
 8014800:	d904      	bls.n	801480c <__ascii_wctomb+0x14>
 8014802:	228a      	movs	r2, #138	@ 0x8a
 8014804:	601a      	str	r2, [r3, #0]
 8014806:	f04f 30ff 	mov.w	r0, #4294967295
 801480a:	4770      	bx	lr
 801480c:	700a      	strb	r2, [r1, #0]
 801480e:	2001      	movs	r0, #1
 8014810:	4770      	bx	lr
	...

08014814 <fiprintf>:
 8014814:	b40e      	push	{r1, r2, r3}
 8014816:	b503      	push	{r0, r1, lr}
 8014818:	4601      	mov	r1, r0
 801481a:	ab03      	add	r3, sp, #12
 801481c:	4805      	ldr	r0, [pc, #20]	@ (8014834 <fiprintf+0x20>)
 801481e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014822:	6800      	ldr	r0, [r0, #0]
 8014824:	9301      	str	r3, [sp, #4]
 8014826:	f000 f83f 	bl	80148a8 <_vfiprintf_r>
 801482a:	b002      	add	sp, #8
 801482c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014830:	b003      	add	sp, #12
 8014832:	4770      	bx	lr
 8014834:	24000114 	.word	0x24000114

08014838 <abort>:
 8014838:	b508      	push	{r3, lr}
 801483a:	2006      	movs	r0, #6
 801483c:	f000 fa08 	bl	8014c50 <raise>
 8014840:	2001      	movs	r0, #1
 8014842:	f7ec feaf 	bl	80015a4 <_exit>

08014846 <_malloc_usable_size_r>:
 8014846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801484a:	1f18      	subs	r0, r3, #4
 801484c:	2b00      	cmp	r3, #0
 801484e:	bfbc      	itt	lt
 8014850:	580b      	ldrlt	r3, [r1, r0]
 8014852:	18c0      	addlt	r0, r0, r3
 8014854:	4770      	bx	lr

08014856 <__sfputc_r>:
 8014856:	6893      	ldr	r3, [r2, #8]
 8014858:	3b01      	subs	r3, #1
 801485a:	2b00      	cmp	r3, #0
 801485c:	b410      	push	{r4}
 801485e:	6093      	str	r3, [r2, #8]
 8014860:	da08      	bge.n	8014874 <__sfputc_r+0x1e>
 8014862:	6994      	ldr	r4, [r2, #24]
 8014864:	42a3      	cmp	r3, r4
 8014866:	db01      	blt.n	801486c <__sfputc_r+0x16>
 8014868:	290a      	cmp	r1, #10
 801486a:	d103      	bne.n	8014874 <__sfputc_r+0x1e>
 801486c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014870:	f000 b932 	b.w	8014ad8 <__swbuf_r>
 8014874:	6813      	ldr	r3, [r2, #0]
 8014876:	1c58      	adds	r0, r3, #1
 8014878:	6010      	str	r0, [r2, #0]
 801487a:	7019      	strb	r1, [r3, #0]
 801487c:	4608      	mov	r0, r1
 801487e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014882:	4770      	bx	lr

08014884 <__sfputs_r>:
 8014884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014886:	4606      	mov	r6, r0
 8014888:	460f      	mov	r7, r1
 801488a:	4614      	mov	r4, r2
 801488c:	18d5      	adds	r5, r2, r3
 801488e:	42ac      	cmp	r4, r5
 8014890:	d101      	bne.n	8014896 <__sfputs_r+0x12>
 8014892:	2000      	movs	r0, #0
 8014894:	e007      	b.n	80148a6 <__sfputs_r+0x22>
 8014896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801489a:	463a      	mov	r2, r7
 801489c:	4630      	mov	r0, r6
 801489e:	f7ff ffda 	bl	8014856 <__sfputc_r>
 80148a2:	1c43      	adds	r3, r0, #1
 80148a4:	d1f3      	bne.n	801488e <__sfputs_r+0xa>
 80148a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148a8 <_vfiprintf_r>:
 80148a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ac:	460d      	mov	r5, r1
 80148ae:	b09d      	sub	sp, #116	@ 0x74
 80148b0:	4614      	mov	r4, r2
 80148b2:	4698      	mov	r8, r3
 80148b4:	4606      	mov	r6, r0
 80148b6:	b118      	cbz	r0, 80148c0 <_vfiprintf_r+0x18>
 80148b8:	6a03      	ldr	r3, [r0, #32]
 80148ba:	b90b      	cbnz	r3, 80148c0 <_vfiprintf_r+0x18>
 80148bc:	f7fe fa28 	bl	8012d10 <__sinit>
 80148c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148c2:	07d9      	lsls	r1, r3, #31
 80148c4:	d405      	bmi.n	80148d2 <_vfiprintf_r+0x2a>
 80148c6:	89ab      	ldrh	r3, [r5, #12]
 80148c8:	059a      	lsls	r2, r3, #22
 80148ca:	d402      	bmi.n	80148d2 <_vfiprintf_r+0x2a>
 80148cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148ce:	f7fe fb46 	bl	8012f5e <__retarget_lock_acquire_recursive>
 80148d2:	89ab      	ldrh	r3, [r5, #12]
 80148d4:	071b      	lsls	r3, r3, #28
 80148d6:	d501      	bpl.n	80148dc <_vfiprintf_r+0x34>
 80148d8:	692b      	ldr	r3, [r5, #16]
 80148da:	b99b      	cbnz	r3, 8014904 <_vfiprintf_r+0x5c>
 80148dc:	4629      	mov	r1, r5
 80148de:	4630      	mov	r0, r6
 80148e0:	f000 f938 	bl	8014b54 <__swsetup_r>
 80148e4:	b170      	cbz	r0, 8014904 <_vfiprintf_r+0x5c>
 80148e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148e8:	07dc      	lsls	r4, r3, #31
 80148ea:	d504      	bpl.n	80148f6 <_vfiprintf_r+0x4e>
 80148ec:	f04f 30ff 	mov.w	r0, #4294967295
 80148f0:	b01d      	add	sp, #116	@ 0x74
 80148f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f6:	89ab      	ldrh	r3, [r5, #12]
 80148f8:	0598      	lsls	r0, r3, #22
 80148fa:	d4f7      	bmi.n	80148ec <_vfiprintf_r+0x44>
 80148fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148fe:	f7fe fb2f 	bl	8012f60 <__retarget_lock_release_recursive>
 8014902:	e7f3      	b.n	80148ec <_vfiprintf_r+0x44>
 8014904:	2300      	movs	r3, #0
 8014906:	9309      	str	r3, [sp, #36]	@ 0x24
 8014908:	2320      	movs	r3, #32
 801490a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801490e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014912:	2330      	movs	r3, #48	@ 0x30
 8014914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ac4 <_vfiprintf_r+0x21c>
 8014918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801491c:	f04f 0901 	mov.w	r9, #1
 8014920:	4623      	mov	r3, r4
 8014922:	469a      	mov	sl, r3
 8014924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014928:	b10a      	cbz	r2, 801492e <_vfiprintf_r+0x86>
 801492a:	2a25      	cmp	r2, #37	@ 0x25
 801492c:	d1f9      	bne.n	8014922 <_vfiprintf_r+0x7a>
 801492e:	ebba 0b04 	subs.w	fp, sl, r4
 8014932:	d00b      	beq.n	801494c <_vfiprintf_r+0xa4>
 8014934:	465b      	mov	r3, fp
 8014936:	4622      	mov	r2, r4
 8014938:	4629      	mov	r1, r5
 801493a:	4630      	mov	r0, r6
 801493c:	f7ff ffa2 	bl	8014884 <__sfputs_r>
 8014940:	3001      	adds	r0, #1
 8014942:	f000 80a7 	beq.w	8014a94 <_vfiprintf_r+0x1ec>
 8014946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014948:	445a      	add	r2, fp
 801494a:	9209      	str	r2, [sp, #36]	@ 0x24
 801494c:	f89a 3000 	ldrb.w	r3, [sl]
 8014950:	2b00      	cmp	r3, #0
 8014952:	f000 809f 	beq.w	8014a94 <_vfiprintf_r+0x1ec>
 8014956:	2300      	movs	r3, #0
 8014958:	f04f 32ff 	mov.w	r2, #4294967295
 801495c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014960:	f10a 0a01 	add.w	sl, sl, #1
 8014964:	9304      	str	r3, [sp, #16]
 8014966:	9307      	str	r3, [sp, #28]
 8014968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801496c:	931a      	str	r3, [sp, #104]	@ 0x68
 801496e:	4654      	mov	r4, sl
 8014970:	2205      	movs	r2, #5
 8014972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014976:	4853      	ldr	r0, [pc, #332]	@ (8014ac4 <_vfiprintf_r+0x21c>)
 8014978:	f7eb fcb2 	bl	80002e0 <memchr>
 801497c:	9a04      	ldr	r2, [sp, #16]
 801497e:	b9d8      	cbnz	r0, 80149b8 <_vfiprintf_r+0x110>
 8014980:	06d1      	lsls	r1, r2, #27
 8014982:	bf44      	itt	mi
 8014984:	2320      	movmi	r3, #32
 8014986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801498a:	0713      	lsls	r3, r2, #28
 801498c:	bf44      	itt	mi
 801498e:	232b      	movmi	r3, #43	@ 0x2b
 8014990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014994:	f89a 3000 	ldrb.w	r3, [sl]
 8014998:	2b2a      	cmp	r3, #42	@ 0x2a
 801499a:	d015      	beq.n	80149c8 <_vfiprintf_r+0x120>
 801499c:	9a07      	ldr	r2, [sp, #28]
 801499e:	4654      	mov	r4, sl
 80149a0:	2000      	movs	r0, #0
 80149a2:	f04f 0c0a 	mov.w	ip, #10
 80149a6:	4621      	mov	r1, r4
 80149a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149ac:	3b30      	subs	r3, #48	@ 0x30
 80149ae:	2b09      	cmp	r3, #9
 80149b0:	d94b      	bls.n	8014a4a <_vfiprintf_r+0x1a2>
 80149b2:	b1b0      	cbz	r0, 80149e2 <_vfiprintf_r+0x13a>
 80149b4:	9207      	str	r2, [sp, #28]
 80149b6:	e014      	b.n	80149e2 <_vfiprintf_r+0x13a>
 80149b8:	eba0 0308 	sub.w	r3, r0, r8
 80149bc:	fa09 f303 	lsl.w	r3, r9, r3
 80149c0:	4313      	orrs	r3, r2
 80149c2:	9304      	str	r3, [sp, #16]
 80149c4:	46a2      	mov	sl, r4
 80149c6:	e7d2      	b.n	801496e <_vfiprintf_r+0xc6>
 80149c8:	9b03      	ldr	r3, [sp, #12]
 80149ca:	1d19      	adds	r1, r3, #4
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	9103      	str	r1, [sp, #12]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	bfbb      	ittet	lt
 80149d4:	425b      	neglt	r3, r3
 80149d6:	f042 0202 	orrlt.w	r2, r2, #2
 80149da:	9307      	strge	r3, [sp, #28]
 80149dc:	9307      	strlt	r3, [sp, #28]
 80149de:	bfb8      	it	lt
 80149e0:	9204      	strlt	r2, [sp, #16]
 80149e2:	7823      	ldrb	r3, [r4, #0]
 80149e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80149e6:	d10a      	bne.n	80149fe <_vfiprintf_r+0x156>
 80149e8:	7863      	ldrb	r3, [r4, #1]
 80149ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80149ec:	d132      	bne.n	8014a54 <_vfiprintf_r+0x1ac>
 80149ee:	9b03      	ldr	r3, [sp, #12]
 80149f0:	1d1a      	adds	r2, r3, #4
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	9203      	str	r2, [sp, #12]
 80149f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80149fa:	3402      	adds	r4, #2
 80149fc:	9305      	str	r3, [sp, #20]
 80149fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014ad4 <_vfiprintf_r+0x22c>
 8014a02:	7821      	ldrb	r1, [r4, #0]
 8014a04:	2203      	movs	r2, #3
 8014a06:	4650      	mov	r0, sl
 8014a08:	f7eb fc6a 	bl	80002e0 <memchr>
 8014a0c:	b138      	cbz	r0, 8014a1e <_vfiprintf_r+0x176>
 8014a0e:	9b04      	ldr	r3, [sp, #16]
 8014a10:	eba0 000a 	sub.w	r0, r0, sl
 8014a14:	2240      	movs	r2, #64	@ 0x40
 8014a16:	4082      	lsls	r2, r0
 8014a18:	4313      	orrs	r3, r2
 8014a1a:	3401      	adds	r4, #1
 8014a1c:	9304      	str	r3, [sp, #16]
 8014a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a22:	4829      	ldr	r0, [pc, #164]	@ (8014ac8 <_vfiprintf_r+0x220>)
 8014a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014a28:	2206      	movs	r2, #6
 8014a2a:	f7eb fc59 	bl	80002e0 <memchr>
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	d03f      	beq.n	8014ab2 <_vfiprintf_r+0x20a>
 8014a32:	4b26      	ldr	r3, [pc, #152]	@ (8014acc <_vfiprintf_r+0x224>)
 8014a34:	bb1b      	cbnz	r3, 8014a7e <_vfiprintf_r+0x1d6>
 8014a36:	9b03      	ldr	r3, [sp, #12]
 8014a38:	3307      	adds	r3, #7
 8014a3a:	f023 0307 	bic.w	r3, r3, #7
 8014a3e:	3308      	adds	r3, #8
 8014a40:	9303      	str	r3, [sp, #12]
 8014a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a44:	443b      	add	r3, r7
 8014a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a48:	e76a      	b.n	8014920 <_vfiprintf_r+0x78>
 8014a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a4e:	460c      	mov	r4, r1
 8014a50:	2001      	movs	r0, #1
 8014a52:	e7a8      	b.n	80149a6 <_vfiprintf_r+0xfe>
 8014a54:	2300      	movs	r3, #0
 8014a56:	3401      	adds	r4, #1
 8014a58:	9305      	str	r3, [sp, #20]
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	f04f 0c0a 	mov.w	ip, #10
 8014a60:	4620      	mov	r0, r4
 8014a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a66:	3a30      	subs	r2, #48	@ 0x30
 8014a68:	2a09      	cmp	r2, #9
 8014a6a:	d903      	bls.n	8014a74 <_vfiprintf_r+0x1cc>
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d0c6      	beq.n	80149fe <_vfiprintf_r+0x156>
 8014a70:	9105      	str	r1, [sp, #20]
 8014a72:	e7c4      	b.n	80149fe <_vfiprintf_r+0x156>
 8014a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a78:	4604      	mov	r4, r0
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	e7f0      	b.n	8014a60 <_vfiprintf_r+0x1b8>
 8014a7e:	ab03      	add	r3, sp, #12
 8014a80:	9300      	str	r3, [sp, #0]
 8014a82:	462a      	mov	r2, r5
 8014a84:	4b12      	ldr	r3, [pc, #72]	@ (8014ad0 <_vfiprintf_r+0x228>)
 8014a86:	a904      	add	r1, sp, #16
 8014a88:	4630      	mov	r0, r6
 8014a8a:	f7fd fd0d 	bl	80124a8 <_printf_float>
 8014a8e:	4607      	mov	r7, r0
 8014a90:	1c78      	adds	r0, r7, #1
 8014a92:	d1d6      	bne.n	8014a42 <_vfiprintf_r+0x19a>
 8014a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a96:	07d9      	lsls	r1, r3, #31
 8014a98:	d405      	bmi.n	8014aa6 <_vfiprintf_r+0x1fe>
 8014a9a:	89ab      	ldrh	r3, [r5, #12]
 8014a9c:	059a      	lsls	r2, r3, #22
 8014a9e:	d402      	bmi.n	8014aa6 <_vfiprintf_r+0x1fe>
 8014aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014aa2:	f7fe fa5d 	bl	8012f60 <__retarget_lock_release_recursive>
 8014aa6:	89ab      	ldrh	r3, [r5, #12]
 8014aa8:	065b      	lsls	r3, r3, #25
 8014aaa:	f53f af1f 	bmi.w	80148ec <_vfiprintf_r+0x44>
 8014aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ab0:	e71e      	b.n	80148f0 <_vfiprintf_r+0x48>
 8014ab2:	ab03      	add	r3, sp, #12
 8014ab4:	9300      	str	r3, [sp, #0]
 8014ab6:	462a      	mov	r2, r5
 8014ab8:	4b05      	ldr	r3, [pc, #20]	@ (8014ad0 <_vfiprintf_r+0x228>)
 8014aba:	a904      	add	r1, sp, #16
 8014abc:	4630      	mov	r0, r6
 8014abe:	f7fd ff7b 	bl	80129b8 <_printf_i>
 8014ac2:	e7e4      	b.n	8014a8e <_vfiprintf_r+0x1e6>
 8014ac4:	08015b10 	.word	0x08015b10
 8014ac8:	08015b1a 	.word	0x08015b1a
 8014acc:	080124a9 	.word	0x080124a9
 8014ad0:	08014885 	.word	0x08014885
 8014ad4:	08015b16 	.word	0x08015b16

08014ad8 <__swbuf_r>:
 8014ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ada:	460e      	mov	r6, r1
 8014adc:	4614      	mov	r4, r2
 8014ade:	4605      	mov	r5, r0
 8014ae0:	b118      	cbz	r0, 8014aea <__swbuf_r+0x12>
 8014ae2:	6a03      	ldr	r3, [r0, #32]
 8014ae4:	b90b      	cbnz	r3, 8014aea <__swbuf_r+0x12>
 8014ae6:	f7fe f913 	bl	8012d10 <__sinit>
 8014aea:	69a3      	ldr	r3, [r4, #24]
 8014aec:	60a3      	str	r3, [r4, #8]
 8014aee:	89a3      	ldrh	r3, [r4, #12]
 8014af0:	071a      	lsls	r2, r3, #28
 8014af2:	d501      	bpl.n	8014af8 <__swbuf_r+0x20>
 8014af4:	6923      	ldr	r3, [r4, #16]
 8014af6:	b943      	cbnz	r3, 8014b0a <__swbuf_r+0x32>
 8014af8:	4621      	mov	r1, r4
 8014afa:	4628      	mov	r0, r5
 8014afc:	f000 f82a 	bl	8014b54 <__swsetup_r>
 8014b00:	b118      	cbz	r0, 8014b0a <__swbuf_r+0x32>
 8014b02:	f04f 37ff 	mov.w	r7, #4294967295
 8014b06:	4638      	mov	r0, r7
 8014b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b0a:	6823      	ldr	r3, [r4, #0]
 8014b0c:	6922      	ldr	r2, [r4, #16]
 8014b0e:	1a98      	subs	r0, r3, r2
 8014b10:	6963      	ldr	r3, [r4, #20]
 8014b12:	b2f6      	uxtb	r6, r6
 8014b14:	4283      	cmp	r3, r0
 8014b16:	4637      	mov	r7, r6
 8014b18:	dc05      	bgt.n	8014b26 <__swbuf_r+0x4e>
 8014b1a:	4621      	mov	r1, r4
 8014b1c:	4628      	mov	r0, r5
 8014b1e:	f7ff fda9 	bl	8014674 <_fflush_r>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d1ed      	bne.n	8014b02 <__swbuf_r+0x2a>
 8014b26:	68a3      	ldr	r3, [r4, #8]
 8014b28:	3b01      	subs	r3, #1
 8014b2a:	60a3      	str	r3, [r4, #8]
 8014b2c:	6823      	ldr	r3, [r4, #0]
 8014b2e:	1c5a      	adds	r2, r3, #1
 8014b30:	6022      	str	r2, [r4, #0]
 8014b32:	701e      	strb	r6, [r3, #0]
 8014b34:	6962      	ldr	r2, [r4, #20]
 8014b36:	1c43      	adds	r3, r0, #1
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d004      	beq.n	8014b46 <__swbuf_r+0x6e>
 8014b3c:	89a3      	ldrh	r3, [r4, #12]
 8014b3e:	07db      	lsls	r3, r3, #31
 8014b40:	d5e1      	bpl.n	8014b06 <__swbuf_r+0x2e>
 8014b42:	2e0a      	cmp	r6, #10
 8014b44:	d1df      	bne.n	8014b06 <__swbuf_r+0x2e>
 8014b46:	4621      	mov	r1, r4
 8014b48:	4628      	mov	r0, r5
 8014b4a:	f7ff fd93 	bl	8014674 <_fflush_r>
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d0d9      	beq.n	8014b06 <__swbuf_r+0x2e>
 8014b52:	e7d6      	b.n	8014b02 <__swbuf_r+0x2a>

08014b54 <__swsetup_r>:
 8014b54:	b538      	push	{r3, r4, r5, lr}
 8014b56:	4b29      	ldr	r3, [pc, #164]	@ (8014bfc <__swsetup_r+0xa8>)
 8014b58:	4605      	mov	r5, r0
 8014b5a:	6818      	ldr	r0, [r3, #0]
 8014b5c:	460c      	mov	r4, r1
 8014b5e:	b118      	cbz	r0, 8014b68 <__swsetup_r+0x14>
 8014b60:	6a03      	ldr	r3, [r0, #32]
 8014b62:	b90b      	cbnz	r3, 8014b68 <__swsetup_r+0x14>
 8014b64:	f7fe f8d4 	bl	8012d10 <__sinit>
 8014b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b6c:	0719      	lsls	r1, r3, #28
 8014b6e:	d422      	bmi.n	8014bb6 <__swsetup_r+0x62>
 8014b70:	06da      	lsls	r2, r3, #27
 8014b72:	d407      	bmi.n	8014b84 <__swsetup_r+0x30>
 8014b74:	2209      	movs	r2, #9
 8014b76:	602a      	str	r2, [r5, #0]
 8014b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b7c:	81a3      	strh	r3, [r4, #12]
 8014b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b82:	e033      	b.n	8014bec <__swsetup_r+0x98>
 8014b84:	0758      	lsls	r0, r3, #29
 8014b86:	d512      	bpl.n	8014bae <__swsetup_r+0x5a>
 8014b88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b8a:	b141      	cbz	r1, 8014b9e <__swsetup_r+0x4a>
 8014b8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b90:	4299      	cmp	r1, r3
 8014b92:	d002      	beq.n	8014b9a <__swsetup_r+0x46>
 8014b94:	4628      	mov	r0, r5
 8014b96:	f7fe ffc5 	bl	8013b24 <_free_r>
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b9e:	89a3      	ldrh	r3, [r4, #12]
 8014ba0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014ba4:	81a3      	strh	r3, [r4, #12]
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	6063      	str	r3, [r4, #4]
 8014baa:	6923      	ldr	r3, [r4, #16]
 8014bac:	6023      	str	r3, [r4, #0]
 8014bae:	89a3      	ldrh	r3, [r4, #12]
 8014bb0:	f043 0308 	orr.w	r3, r3, #8
 8014bb4:	81a3      	strh	r3, [r4, #12]
 8014bb6:	6923      	ldr	r3, [r4, #16]
 8014bb8:	b94b      	cbnz	r3, 8014bce <__swsetup_r+0x7a>
 8014bba:	89a3      	ldrh	r3, [r4, #12]
 8014bbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bc4:	d003      	beq.n	8014bce <__swsetup_r+0x7a>
 8014bc6:	4621      	mov	r1, r4
 8014bc8:	4628      	mov	r0, r5
 8014bca:	f000 f883 	bl	8014cd4 <__smakebuf_r>
 8014bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bd2:	f013 0201 	ands.w	r2, r3, #1
 8014bd6:	d00a      	beq.n	8014bee <__swsetup_r+0x9a>
 8014bd8:	2200      	movs	r2, #0
 8014bda:	60a2      	str	r2, [r4, #8]
 8014bdc:	6962      	ldr	r2, [r4, #20]
 8014bde:	4252      	negs	r2, r2
 8014be0:	61a2      	str	r2, [r4, #24]
 8014be2:	6922      	ldr	r2, [r4, #16]
 8014be4:	b942      	cbnz	r2, 8014bf8 <__swsetup_r+0xa4>
 8014be6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014bea:	d1c5      	bne.n	8014b78 <__swsetup_r+0x24>
 8014bec:	bd38      	pop	{r3, r4, r5, pc}
 8014bee:	0799      	lsls	r1, r3, #30
 8014bf0:	bf58      	it	pl
 8014bf2:	6962      	ldrpl	r2, [r4, #20]
 8014bf4:	60a2      	str	r2, [r4, #8]
 8014bf6:	e7f4      	b.n	8014be2 <__swsetup_r+0x8e>
 8014bf8:	2000      	movs	r0, #0
 8014bfa:	e7f7      	b.n	8014bec <__swsetup_r+0x98>
 8014bfc:	24000114 	.word	0x24000114

08014c00 <_raise_r>:
 8014c00:	291f      	cmp	r1, #31
 8014c02:	b538      	push	{r3, r4, r5, lr}
 8014c04:	4605      	mov	r5, r0
 8014c06:	460c      	mov	r4, r1
 8014c08:	d904      	bls.n	8014c14 <_raise_r+0x14>
 8014c0a:	2316      	movs	r3, #22
 8014c0c:	6003      	str	r3, [r0, #0]
 8014c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c12:	bd38      	pop	{r3, r4, r5, pc}
 8014c14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014c16:	b112      	cbz	r2, 8014c1e <_raise_r+0x1e>
 8014c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c1c:	b94b      	cbnz	r3, 8014c32 <_raise_r+0x32>
 8014c1e:	4628      	mov	r0, r5
 8014c20:	f000 f830 	bl	8014c84 <_getpid_r>
 8014c24:	4622      	mov	r2, r4
 8014c26:	4601      	mov	r1, r0
 8014c28:	4628      	mov	r0, r5
 8014c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c2e:	f000 b817 	b.w	8014c60 <_kill_r>
 8014c32:	2b01      	cmp	r3, #1
 8014c34:	d00a      	beq.n	8014c4c <_raise_r+0x4c>
 8014c36:	1c59      	adds	r1, r3, #1
 8014c38:	d103      	bne.n	8014c42 <_raise_r+0x42>
 8014c3a:	2316      	movs	r3, #22
 8014c3c:	6003      	str	r3, [r0, #0]
 8014c3e:	2001      	movs	r0, #1
 8014c40:	e7e7      	b.n	8014c12 <_raise_r+0x12>
 8014c42:	2100      	movs	r1, #0
 8014c44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014c48:	4620      	mov	r0, r4
 8014c4a:	4798      	blx	r3
 8014c4c:	2000      	movs	r0, #0
 8014c4e:	e7e0      	b.n	8014c12 <_raise_r+0x12>

08014c50 <raise>:
 8014c50:	4b02      	ldr	r3, [pc, #8]	@ (8014c5c <raise+0xc>)
 8014c52:	4601      	mov	r1, r0
 8014c54:	6818      	ldr	r0, [r3, #0]
 8014c56:	f7ff bfd3 	b.w	8014c00 <_raise_r>
 8014c5a:	bf00      	nop
 8014c5c:	24000114 	.word	0x24000114

08014c60 <_kill_r>:
 8014c60:	b538      	push	{r3, r4, r5, lr}
 8014c62:	4d07      	ldr	r5, [pc, #28]	@ (8014c80 <_kill_r+0x20>)
 8014c64:	2300      	movs	r3, #0
 8014c66:	4604      	mov	r4, r0
 8014c68:	4608      	mov	r0, r1
 8014c6a:	4611      	mov	r1, r2
 8014c6c:	602b      	str	r3, [r5, #0]
 8014c6e:	f7ec fc89 	bl	8001584 <_kill>
 8014c72:	1c43      	adds	r3, r0, #1
 8014c74:	d102      	bne.n	8014c7c <_kill_r+0x1c>
 8014c76:	682b      	ldr	r3, [r5, #0]
 8014c78:	b103      	cbz	r3, 8014c7c <_kill_r+0x1c>
 8014c7a:	6023      	str	r3, [r4, #0]
 8014c7c:	bd38      	pop	{r3, r4, r5, pc}
 8014c7e:	bf00      	nop
 8014c80:	240023f8 	.word	0x240023f8

08014c84 <_getpid_r>:
 8014c84:	f7ec bc76 	b.w	8001574 <_getpid>

08014c88 <__swhatbuf_r>:
 8014c88:	b570      	push	{r4, r5, r6, lr}
 8014c8a:	460c      	mov	r4, r1
 8014c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c90:	2900      	cmp	r1, #0
 8014c92:	b096      	sub	sp, #88	@ 0x58
 8014c94:	4615      	mov	r5, r2
 8014c96:	461e      	mov	r6, r3
 8014c98:	da0d      	bge.n	8014cb6 <__swhatbuf_r+0x2e>
 8014c9a:	89a3      	ldrh	r3, [r4, #12]
 8014c9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014ca0:	f04f 0100 	mov.w	r1, #0
 8014ca4:	bf14      	ite	ne
 8014ca6:	2340      	movne	r3, #64	@ 0x40
 8014ca8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014cac:	2000      	movs	r0, #0
 8014cae:	6031      	str	r1, [r6, #0]
 8014cb0:	602b      	str	r3, [r5, #0]
 8014cb2:	b016      	add	sp, #88	@ 0x58
 8014cb4:	bd70      	pop	{r4, r5, r6, pc}
 8014cb6:	466a      	mov	r2, sp
 8014cb8:	f000 f848 	bl	8014d4c <_fstat_r>
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	dbec      	blt.n	8014c9a <__swhatbuf_r+0x12>
 8014cc0:	9901      	ldr	r1, [sp, #4]
 8014cc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014cc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014cca:	4259      	negs	r1, r3
 8014ccc:	4159      	adcs	r1, r3
 8014cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014cd2:	e7eb      	b.n	8014cac <__swhatbuf_r+0x24>

08014cd4 <__smakebuf_r>:
 8014cd4:	898b      	ldrh	r3, [r1, #12]
 8014cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cd8:	079d      	lsls	r5, r3, #30
 8014cda:	4606      	mov	r6, r0
 8014cdc:	460c      	mov	r4, r1
 8014cde:	d507      	bpl.n	8014cf0 <__smakebuf_r+0x1c>
 8014ce0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014ce4:	6023      	str	r3, [r4, #0]
 8014ce6:	6123      	str	r3, [r4, #16]
 8014ce8:	2301      	movs	r3, #1
 8014cea:	6163      	str	r3, [r4, #20]
 8014cec:	b003      	add	sp, #12
 8014cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cf0:	ab01      	add	r3, sp, #4
 8014cf2:	466a      	mov	r2, sp
 8014cf4:	f7ff ffc8 	bl	8014c88 <__swhatbuf_r>
 8014cf8:	9f00      	ldr	r7, [sp, #0]
 8014cfa:	4605      	mov	r5, r0
 8014cfc:	4639      	mov	r1, r7
 8014cfe:	4630      	mov	r0, r6
 8014d00:	f7fd fab6 	bl	8012270 <_malloc_r>
 8014d04:	b948      	cbnz	r0, 8014d1a <__smakebuf_r+0x46>
 8014d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d0a:	059a      	lsls	r2, r3, #22
 8014d0c:	d4ee      	bmi.n	8014cec <__smakebuf_r+0x18>
 8014d0e:	f023 0303 	bic.w	r3, r3, #3
 8014d12:	f043 0302 	orr.w	r3, r3, #2
 8014d16:	81a3      	strh	r3, [r4, #12]
 8014d18:	e7e2      	b.n	8014ce0 <__smakebuf_r+0xc>
 8014d1a:	89a3      	ldrh	r3, [r4, #12]
 8014d1c:	6020      	str	r0, [r4, #0]
 8014d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d22:	81a3      	strh	r3, [r4, #12]
 8014d24:	9b01      	ldr	r3, [sp, #4]
 8014d26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014d2a:	b15b      	cbz	r3, 8014d44 <__smakebuf_r+0x70>
 8014d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d30:	4630      	mov	r0, r6
 8014d32:	f000 f81d 	bl	8014d70 <_isatty_r>
 8014d36:	b128      	cbz	r0, 8014d44 <__smakebuf_r+0x70>
 8014d38:	89a3      	ldrh	r3, [r4, #12]
 8014d3a:	f023 0303 	bic.w	r3, r3, #3
 8014d3e:	f043 0301 	orr.w	r3, r3, #1
 8014d42:	81a3      	strh	r3, [r4, #12]
 8014d44:	89a3      	ldrh	r3, [r4, #12]
 8014d46:	431d      	orrs	r5, r3
 8014d48:	81a5      	strh	r5, [r4, #12]
 8014d4a:	e7cf      	b.n	8014cec <__smakebuf_r+0x18>

08014d4c <_fstat_r>:
 8014d4c:	b538      	push	{r3, r4, r5, lr}
 8014d4e:	4d07      	ldr	r5, [pc, #28]	@ (8014d6c <_fstat_r+0x20>)
 8014d50:	2300      	movs	r3, #0
 8014d52:	4604      	mov	r4, r0
 8014d54:	4608      	mov	r0, r1
 8014d56:	4611      	mov	r1, r2
 8014d58:	602b      	str	r3, [r5, #0]
 8014d5a:	f7ec fc73 	bl	8001644 <_fstat>
 8014d5e:	1c43      	adds	r3, r0, #1
 8014d60:	d102      	bne.n	8014d68 <_fstat_r+0x1c>
 8014d62:	682b      	ldr	r3, [r5, #0]
 8014d64:	b103      	cbz	r3, 8014d68 <_fstat_r+0x1c>
 8014d66:	6023      	str	r3, [r4, #0]
 8014d68:	bd38      	pop	{r3, r4, r5, pc}
 8014d6a:	bf00      	nop
 8014d6c:	240023f8 	.word	0x240023f8

08014d70 <_isatty_r>:
 8014d70:	b538      	push	{r3, r4, r5, lr}
 8014d72:	4d06      	ldr	r5, [pc, #24]	@ (8014d8c <_isatty_r+0x1c>)
 8014d74:	2300      	movs	r3, #0
 8014d76:	4604      	mov	r4, r0
 8014d78:	4608      	mov	r0, r1
 8014d7a:	602b      	str	r3, [r5, #0]
 8014d7c:	f7ec fc72 	bl	8001664 <_isatty>
 8014d80:	1c43      	adds	r3, r0, #1
 8014d82:	d102      	bne.n	8014d8a <_isatty_r+0x1a>
 8014d84:	682b      	ldr	r3, [r5, #0]
 8014d86:	b103      	cbz	r3, 8014d8a <_isatty_r+0x1a>
 8014d88:	6023      	str	r3, [r4, #0]
 8014d8a:	bd38      	pop	{r3, r4, r5, pc}
 8014d8c:	240023f8 	.word	0x240023f8

08014d90 <fmod>:
 8014d90:	b508      	push	{r3, lr}
 8014d92:	ed2d 8b04 	vpush	{d8-d9}
 8014d96:	eeb0 9b40 	vmov.f64	d9, d0
 8014d9a:	eeb0 8b41 	vmov.f64	d8, d1
 8014d9e:	f000 f81b 	bl	8014dd8 <__ieee754_fmod>
 8014da2:	eeb4 9b48 	vcmp.f64	d9, d8
 8014da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014daa:	d60c      	bvs.n	8014dc6 <fmod+0x36>
 8014dac:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014dd0 <fmod+0x40>
 8014db0:	eeb4 8b49 	vcmp.f64	d8, d9
 8014db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014db8:	d105      	bne.n	8014dc6 <fmod+0x36>
 8014dba:	f7fe f8a5 	bl	8012f08 <__errno>
 8014dbe:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014dc2:	2321      	movs	r3, #33	@ 0x21
 8014dc4:	6003      	str	r3, [r0, #0]
 8014dc6:	ecbd 8b04 	vpop	{d8-d9}
 8014dca:	bd08      	pop	{r3, pc}
 8014dcc:	f3af 8000 	nop.w
	...

08014dd8 <__ieee754_fmod>:
 8014dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ddc:	ed8d 1b00 	vstr	d1, [sp]
 8014de0:	e9dd 6500 	ldrd	r6, r5, [sp]
 8014de4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8014de8:	ea56 0307 	orrs.w	r3, r6, r7
 8014dec:	46b6      	mov	lr, r6
 8014dee:	d00d      	beq.n	8014e0c <__ieee754_fmod+0x34>
 8014df0:	ee10 ca90 	vmov	ip, s1
 8014df4:	4b78      	ldr	r3, [pc, #480]	@ (8014fd8 <__ieee754_fmod+0x200>)
 8014df6:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8014dfa:	4598      	cmp	r8, r3
 8014dfc:	d806      	bhi.n	8014e0c <__ieee754_fmod+0x34>
 8014dfe:	4273      	negs	r3, r6
 8014e00:	4a76      	ldr	r2, [pc, #472]	@ (8014fdc <__ieee754_fmod+0x204>)
 8014e02:	4333      	orrs	r3, r6
 8014e04:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8014e08:	4293      	cmp	r3, r2
 8014e0a:	d908      	bls.n	8014e1e <__ieee754_fmod+0x46>
 8014e0c:	ed9d 7b00 	vldr	d7, [sp]
 8014e10:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014e14:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014e18:	b003      	add	sp, #12
 8014e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e1e:	ee10 9a10 	vmov	r9, s0
 8014e22:	45b8      	cmp	r8, r7
 8014e24:	4649      	mov	r1, r9
 8014e26:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014e2a:	dc09      	bgt.n	8014e40 <__ieee754_fmod+0x68>
 8014e2c:	dbf4      	blt.n	8014e18 <__ieee754_fmod+0x40>
 8014e2e:	454e      	cmp	r6, r9
 8014e30:	d8f2      	bhi.n	8014e18 <__ieee754_fmod+0x40>
 8014e32:	d105      	bne.n	8014e40 <__ieee754_fmod+0x68>
 8014e34:	4b6a      	ldr	r3, [pc, #424]	@ (8014fe0 <__ieee754_fmod+0x208>)
 8014e36:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014e3a:	ed93 0b00 	vldr	d0, [r3]
 8014e3e:	e7eb      	b.n	8014e18 <__ieee754_fmod+0x40>
 8014e40:	4a66      	ldr	r2, [pc, #408]	@ (8014fdc <__ieee754_fmod+0x204>)
 8014e42:	ea1c 0f02 	tst.w	ip, r2
 8014e46:	d14a      	bne.n	8014ede <__ieee754_fmod+0x106>
 8014e48:	f1b8 0f00 	cmp.w	r8, #0
 8014e4c:	d13f      	bne.n	8014ece <__ieee754_fmod+0xf6>
 8014e4e:	4865      	ldr	r0, [pc, #404]	@ (8014fe4 <__ieee754_fmod+0x20c>)
 8014e50:	464b      	mov	r3, r9
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	dc38      	bgt.n	8014ec8 <__ieee754_fmod+0xf0>
 8014e56:	4215      	tst	r5, r2
 8014e58:	d150      	bne.n	8014efc <__ieee754_fmod+0x124>
 8014e5a:	2f00      	cmp	r7, #0
 8014e5c:	d147      	bne.n	8014eee <__ieee754_fmod+0x116>
 8014e5e:	4a61      	ldr	r2, [pc, #388]	@ (8014fe4 <__ieee754_fmod+0x20c>)
 8014e60:	4633      	mov	r3, r6
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	dc40      	bgt.n	8014ee8 <__ieee754_fmod+0x110>
 8014e66:	4b60      	ldr	r3, [pc, #384]	@ (8014fe8 <__ieee754_fmod+0x210>)
 8014e68:	4298      	cmp	r0, r3
 8014e6a:	db4b      	blt.n	8014f04 <__ieee754_fmod+0x12c>
 8014e6c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8014e70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014e74:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8014fe8 <__ieee754_fmod+0x210>
 8014e78:	4562      	cmp	r2, ip
 8014e7a:	db58      	blt.n	8014f2e <__ieee754_fmod+0x156>
 8014e7c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014e80:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014e84:	1a80      	subs	r0, r0, r2
 8014e86:	1b5e      	subs	r6, r3, r5
 8014e88:	eba1 070e 	sub.w	r7, r1, lr
 8014e8c:	2800      	cmp	r0, #0
 8014e8e:	d164      	bne.n	8014f5a <__ieee754_fmod+0x182>
 8014e90:	4571      	cmp	r1, lr
 8014e92:	bf38      	it	cc
 8014e94:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014e98:	2e00      	cmp	r6, #0
 8014e9a:	bfa4      	itt	ge
 8014e9c:	4639      	movge	r1, r7
 8014e9e:	4633      	movge	r3, r6
 8014ea0:	ea53 0001 	orrs.w	r0, r3, r1
 8014ea4:	d0c6      	beq.n	8014e34 <__ieee754_fmod+0x5c>
 8014ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014eaa:	db6b      	blt.n	8014f84 <__ieee754_fmod+0x1ac>
 8014eac:	484e      	ldr	r0, [pc, #312]	@ (8014fe8 <__ieee754_fmod+0x210>)
 8014eae:	4282      	cmp	r2, r0
 8014eb0:	db6e      	blt.n	8014f90 <__ieee754_fmod+0x1b8>
 8014eb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014eb6:	4323      	orrs	r3, r4
 8014eb8:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8014ebc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ec0:	460c      	mov	r4, r1
 8014ec2:	ec45 4b10 	vmov	d0, r4, r5
 8014ec6:	e7a7      	b.n	8014e18 <__ieee754_fmod+0x40>
 8014ec8:	3801      	subs	r0, #1
 8014eca:	005b      	lsls	r3, r3, #1
 8014ecc:	e7c1      	b.n	8014e52 <__ieee754_fmod+0x7a>
 8014ece:	4846      	ldr	r0, [pc, #280]	@ (8014fe8 <__ieee754_fmod+0x210>)
 8014ed0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	ddbe      	ble.n	8014e56 <__ieee754_fmod+0x7e>
 8014ed8:	3801      	subs	r0, #1
 8014eda:	005b      	lsls	r3, r3, #1
 8014edc:	e7fa      	b.n	8014ed4 <__ieee754_fmod+0xfc>
 8014ede:	ea4f 5028 	mov.w	r0, r8, asr #20
 8014ee2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8014ee6:	e7b6      	b.n	8014e56 <__ieee754_fmod+0x7e>
 8014ee8:	3a01      	subs	r2, #1
 8014eea:	005b      	lsls	r3, r3, #1
 8014eec:	e7b9      	b.n	8014e62 <__ieee754_fmod+0x8a>
 8014eee:	4a3e      	ldr	r2, [pc, #248]	@ (8014fe8 <__ieee754_fmod+0x210>)
 8014ef0:	02fb      	lsls	r3, r7, #11
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	ddb7      	ble.n	8014e66 <__ieee754_fmod+0x8e>
 8014ef6:	3a01      	subs	r2, #1
 8014ef8:	005b      	lsls	r3, r3, #1
 8014efa:	e7fa      	b.n	8014ef2 <__ieee754_fmod+0x11a>
 8014efc:	153a      	asrs	r2, r7, #20
 8014efe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014f02:	e7b0      	b.n	8014e66 <__ieee754_fmod+0x8e>
 8014f04:	eba3 0c00 	sub.w	ip, r3, r0
 8014f08:	f1bc 0f1f 	cmp.w	ip, #31
 8014f0c:	dc09      	bgt.n	8014f22 <__ieee754_fmod+0x14a>
 8014f0e:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8014f12:	fa08 f10c 	lsl.w	r1, r8, ip
 8014f16:	fa29 f303 	lsr.w	r3, r9, r3
 8014f1a:	430b      	orrs	r3, r1
 8014f1c:	fa09 f10c 	lsl.w	r1, r9, ip
 8014f20:	e7a8      	b.n	8014e74 <__ieee754_fmod+0x9c>
 8014f22:	4b32      	ldr	r3, [pc, #200]	@ (8014fec <__ieee754_fmod+0x214>)
 8014f24:	1a1b      	subs	r3, r3, r0
 8014f26:	fa09 f303 	lsl.w	r3, r9, r3
 8014f2a:	2100      	movs	r1, #0
 8014f2c:	e7a2      	b.n	8014e74 <__ieee754_fmod+0x9c>
 8014f2e:	ebac 0c02 	sub.w	ip, ip, r2
 8014f32:	f1bc 0f1f 	cmp.w	ip, #31
 8014f36:	dc09      	bgt.n	8014f4c <__ieee754_fmod+0x174>
 8014f38:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8014f3c:	fa07 f70c 	lsl.w	r7, r7, ip
 8014f40:	fa26 f505 	lsr.w	r5, r6, r5
 8014f44:	433d      	orrs	r5, r7
 8014f46:	fa06 fe0c 	lsl.w	lr, r6, ip
 8014f4a:	e79b      	b.n	8014e84 <__ieee754_fmod+0xac>
 8014f4c:	4d27      	ldr	r5, [pc, #156]	@ (8014fec <__ieee754_fmod+0x214>)
 8014f4e:	1aad      	subs	r5, r5, r2
 8014f50:	fa06 f505 	lsl.w	r5, r6, r5
 8014f54:	f04f 0e00 	mov.w	lr, #0
 8014f58:	e794      	b.n	8014e84 <__ieee754_fmod+0xac>
 8014f5a:	4571      	cmp	r1, lr
 8014f5c:	bf38      	it	cc
 8014f5e:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014f62:	2e00      	cmp	r6, #0
 8014f64:	da05      	bge.n	8014f72 <__ieee754_fmod+0x19a>
 8014f66:	0fce      	lsrs	r6, r1, #31
 8014f68:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8014f6c:	0049      	lsls	r1, r1, #1
 8014f6e:	3801      	subs	r0, #1
 8014f70:	e789      	b.n	8014e86 <__ieee754_fmod+0xae>
 8014f72:	ea56 0307 	orrs.w	r3, r6, r7
 8014f76:	f43f af5d 	beq.w	8014e34 <__ieee754_fmod+0x5c>
 8014f7a:	0ffb      	lsrs	r3, r7, #31
 8014f7c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8014f80:	0079      	lsls	r1, r7, #1
 8014f82:	e7f4      	b.n	8014f6e <__ieee754_fmod+0x196>
 8014f84:	0fc8      	lsrs	r0, r1, #31
 8014f86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014f8a:	0049      	lsls	r1, r1, #1
 8014f8c:	3a01      	subs	r2, #1
 8014f8e:	e78a      	b.n	8014ea6 <__ieee754_fmod+0xce>
 8014f90:	1a80      	subs	r0, r0, r2
 8014f92:	2814      	cmp	r0, #20
 8014f94:	dc0c      	bgt.n	8014fb0 <__ieee754_fmod+0x1d8>
 8014f96:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014f9a:	fa03 f202 	lsl.w	r2, r3, r2
 8014f9e:	40c1      	lsrs	r1, r0
 8014fa0:	430a      	orrs	r2, r1
 8014fa2:	4103      	asrs	r3, r0
 8014fa4:	ea43 0104 	orr.w	r1, r3, r4
 8014fa8:	4610      	mov	r0, r2
 8014faa:	ec41 0b10 	vmov	d0, r0, r1
 8014fae:	e733      	b.n	8014e18 <__ieee754_fmod+0x40>
 8014fb0:	281f      	cmp	r0, #31
 8014fb2:	dc07      	bgt.n	8014fc4 <__ieee754_fmod+0x1ec>
 8014fb4:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014fb8:	40c1      	lsrs	r1, r0
 8014fba:	fa03 f202 	lsl.w	r2, r3, r2
 8014fbe:	430a      	orrs	r2, r1
 8014fc0:	4623      	mov	r3, r4
 8014fc2:	e7ef      	b.n	8014fa4 <__ieee754_fmod+0x1cc>
 8014fc4:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8014fc8:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8014fcc:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8014fd0:	32e2      	adds	r2, #226	@ 0xe2
 8014fd2:	fa43 f202 	asr.w	r2, r3, r2
 8014fd6:	e7f3      	b.n	8014fc0 <__ieee754_fmod+0x1e8>
 8014fd8:	7fefffff 	.word	0x7fefffff
 8014fdc:	7ff00000 	.word	0x7ff00000
 8014fe0:	08015c68 	.word	0x08015c68
 8014fe4:	fffffbed 	.word	0xfffffbed
 8014fe8:	fffffc02 	.word	0xfffffc02
 8014fec:	fffffbe2 	.word	0xfffffbe2

08014ff0 <_init>:
 8014ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ff2:	bf00      	nop
 8014ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ff6:	bc08      	pop	{r3}
 8014ff8:	469e      	mov	lr, r3
 8014ffa:	4770      	bx	lr

08014ffc <_fini>:
 8014ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ffe:	bf00      	nop
 8015000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015002:	bc08      	pop	{r3}
 8015004:	469e      	mov	lr, r3
 8015006:	4770      	bx	lr
