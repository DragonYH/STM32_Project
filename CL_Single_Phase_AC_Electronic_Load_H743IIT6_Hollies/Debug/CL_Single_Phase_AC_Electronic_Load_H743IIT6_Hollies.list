
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001572c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002400  080159d0  080159d0  000169d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017dd0  08017dd0  00018dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017dd8  08017dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017ddc  08017ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  08017de0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002664  240002d0  080180b0  000192d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002934  080180b0  00019934  2**0
                  ALLOC
  9 ._D3_Area     00000008  38000000  38000000  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 ._DTCM_Area   00000010  20000000  20000000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  0001b008  2**0
                  CONTENTS, READONLY
 12 .debug_line   000332af  00000000  00000000  0001b036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000081  00000000  00000000  0004e2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00031b66  00000000  00000000  0004e366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000068be  00000000  00000000  0007fecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002230  00000000  00000000  00086790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d97a  00000000  00000000  000889c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000019e6  00000000  00000000  0020633a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003fee2  00000000  00000000  00207d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  00247c02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009ea8  00000000  00000000  00247cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  00251b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00251d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080159b4 	.word	0x080159b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	080159b4 	.word	0x080159b4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f011 fc0a 	bl	8011bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003be:	f013 fa77 	bl	80138b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f010 fe1f 	bl	8011004 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80003cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80003d0:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 80003d4:	08017de0 	.word	0x08017de0
  ldr r2, =_sbss
 80003d8:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 80003dc:	24002934 	.word	0x24002934

080003e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC3_IRQHandler>
	...

080003e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ea:	2003      	movs	r0, #3
 80003ec:	f001 fd47 	bl	8001e7e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80003f0:	f007 fa18 	bl	8007824 <HAL_RCC_GetSysClockFreq>
 80003f4:	4602      	mov	r2, r0
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_Init+0x68>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	0a1b      	lsrs	r3, r3, #8
 80003fc:	f003 030f 	and.w	r3, r3, #15
 8000400:	4913      	ldr	r1, [pc, #76]	@ (8000450 <HAL_Init+0x6c>)
 8000402:	5ccb      	ldrb	r3, [r1, r3]
 8000404:	f003 031f 	and.w	r3, r3, #31
 8000408:	fa22 f303 	lsr.w	r3, r2, r3
 800040c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_Init+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 030f 	and.w	r3, r3, #15
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <HAL_Init+0x6c>)
 8000418:	5cd3      	ldrb	r3, [r2, r3]
 800041a:	f003 031f 	and.w	r3, r3, #31
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	fa22 f303 	lsr.w	r3, r2, r3
 8000424:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <HAL_Init+0x70>)
 8000426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000428:	4a0b      	ldr	r2, [pc, #44]	@ (8000458 <HAL_Init+0x74>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800042e:	200f      	movs	r0, #15
 8000430:	f011 fae4 	bl	80119fc <HAL_InitTick>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800043a:	2301      	movs	r3, #1
 800043c:	e002      	b.n	8000444 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800043e:	f011 fac3 	bl	80119c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	58024400 	.word	0x58024400
 8000450:	0801723c 	.word	0x0801723c
 8000454:	2400009c 	.word	0x2400009c
 8000458:	24000098 	.word	0x24000098

0800045c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_IncTick+0x20>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <HAL_IncTick+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4413      	add	r3, r2
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <HAL_IncTick+0x24>)
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	24000004 	.word	0x24000004
 8000480:	240002ec 	.word	0x240002ec

08000484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  return uwTick;
 8000488:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <HAL_GetTick+0x14>)
 800048a:	681b      	ldr	r3, [r3, #0]
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	240002ec 	.word	0x240002ec

0800049c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a4:	f7ff ffee 	bl	8000484 <HAL_GetTick>
 80004a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b4:	d005      	beq.n	80004c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b6:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <HAL_Delay+0x44>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	4413      	add	r3, r2
 80004c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c2:	bf00      	nop
 80004c4:	f7ff ffde 	bl	8000484 <HAL_GetTick>
 80004c8:	4602      	mov	r2, r0
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d8f7      	bhi.n	80004c4 <HAL_Delay+0x28>
  {
  }
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000004 	.word	0x24000004

080004e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <HAL_GetREVID+0x14>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	0c1b      	lsrs	r3, r3, #16
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	5c001000 	.word	0x5c001000

080004fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	609a      	str	r2, [r3, #8]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	431a      	orrs	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000564:	b480      	push	{r7}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3360      	adds	r3, #96	@ 0x60
 8000576:	461a      	mov	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	430b      	orrs	r3, r1
 8000592:	431a      	orrs	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000598:	bf00      	nop
 800059a:	371c      	adds	r7, #28
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	f003 031f 	and.w	r3, r3, #31
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	431a      	orrs	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	611a      	str	r2, [r3, #16]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b087      	sub	sp, #28
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3360      	adds	r3, #96	@ 0x60
 80005e6:	461a      	mov	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	431a      	orrs	r2, r3
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	601a      	str	r2, [r3, #0]
  }
}
 8000600:	bf00      	nop
 8000602:	371c      	adds	r7, #28
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800061c:	2b00      	cmp	r3, #0
 800061e:	d101      	bne.n	8000624 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000620:	2301      	movs	r3, #1
 8000622:	e000      	b.n	8000626 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000632:	b480      	push	{r7}
 8000634:	b087      	sub	sp, #28
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3330      	adds	r3, #48	@ 0x30
 8000642:	461a      	mov	r2, r3
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	0a1b      	lsrs	r3, r3, #8
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	f003 030c 	and.w	r3, r3, #12
 800064e:	4413      	add	r3, r2
 8000650:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	211f      	movs	r1, #31
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	401a      	ands	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	0e9b      	lsrs	r3, r3, #26
 800066a:	f003 011f 	and.w	r1, r3, #31
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	f003 031f 	and.w	r3, r3, #31
 8000674:	fa01 f303 	lsl.w	r3, r1, r3
 8000678:	431a      	orrs	r2, r3
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800067e:	bf00      	nop
 8000680:	371c      	adds	r7, #28
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	f023 0203 	bic.w	r2, r3, #3
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	60da      	str	r2, [r3, #12]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3314      	adds	r3, #20
 80006c0:	461a      	mov	r2, r3
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	0e5b      	lsrs	r3, r3, #25
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	4413      	add	r3, r2
 80006ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	0d1b      	lsrs	r3, r3, #20
 80006d8:	f003 031f 	and.w	r3, r3, #31
 80006dc:	2107      	movs	r1, #7
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	43db      	mvns	r3, r3
 80006e4:	401a      	ands	r2, r3
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	0d1b      	lsrs	r3, r3, #20
 80006ea:	f003 031f 	and.w	r3, r3, #31
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	431a      	orrs	r2, r3
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80006fa:	bf00      	nop
 80006fc:	371c      	adds	r7, #28
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000720:	43db      	mvns	r3, r3
 8000722:	401a      	ands	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0318 	and.w	r3, r3, #24
 800072a:	4908      	ldr	r1, [pc, #32]	@ (800074c <LL_ADC_SetChannelSingleDiff+0x44>)
 800072c:	40d9      	lsrs	r1, r3
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	400b      	ands	r3, r1
 8000732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000736:	431a      	orrs	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	000fffff 	.word	0x000fffff

08000750 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f003 031f 	and.w	r3, r3, #31
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <LL_ADC_DisableDeepPowerDown+0x20>)
 800077a:	4013      	ands	r3, r2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	6093      	str	r3, [r2, #8]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	5fffffc0 	.word	0x5fffffc0

08000790 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80007a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007a4:	d101      	bne.n	80007aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80007a6:	2301      	movs	r3, #1
 80007a8:	e000      	b.n	80007ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <LL_ADC_EnableInternalRegulator+0x24>)
 80007c6:	4013      	ands	r3, r2
 80007c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	6fffffc0 	.word	0x6fffffc0

080007e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80007f4:	d101      	bne.n	80007fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e000      	b.n	80007fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <LL_ADC_Enable+0x24>)
 8000816:	4013      	ands	r3, r2
 8000818:	f043 0201 	orr.w	r2, r3, #1
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	7fffffc0 	.word	0x7fffffc0

08000830 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <LL_ADC_Disable+0x24>)
 800083e:	4013      	ands	r3, r2
 8000840:	f043 0202 	orr.w	r2, r3, #2
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	7fffffc0 	.word	0x7fffffc0

08000858 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	2b01      	cmp	r3, #1
 800086a:	d101      	bne.n	8000870 <LL_ADC_IsEnabled+0x18>
 800086c:	2301      	movs	r3, #1
 800086e:	e000      	b.n	8000872 <LL_ADC_IsEnabled+0x1a>
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b02      	cmp	r3, #2
 8000890:	d101      	bne.n	8000896 <LL_ADC_IsDisableOngoing+0x18>
 8000892:	2301      	movs	r3, #1
 8000894:	e000      	b.n	8000898 <LL_ADC_IsDisableOngoing+0x1a>
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <LL_ADC_REG_StartConversion+0x24>)
 80008b2:	4013      	ands	r3, r2
 80008b4:	f043 0204 	orr.w	r2, r3, #4
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	7fffffc0 	.word	0x7fffffc0

080008cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d101      	bne.n	80008e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	2b08      	cmp	r3, #8
 8000904:	d101      	bne.n	800090a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b089      	sub	sp, #36	@ 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e18f      	b.n	8000c52 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800093c:	2b00      	cmp	r3, #0
 800093e:	d109      	bne.n	8000954 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f00f ff8f 	bl	8010864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff19 	bl	8000790 <LL_ADC_IsDeepPowerDownEnabled>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d004      	beq.n	800096e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff feff 	bl	800076c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff34 	bl	80007e0 <LL_ADC_IsInternalRegulatorEnabled>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d114      	bne.n	80009a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff18 	bl	80007b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000988:	4b87      	ldr	r3, [pc, #540]	@ (8000ba8 <HAL_ADC_Init+0x290>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	099b      	lsrs	r3, r3, #6
 800098e:	4a87      	ldr	r2, [pc, #540]	@ (8000bac <HAL_ADC_Init+0x294>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	099b      	lsrs	r3, r3, #6
 8000996:	3301      	adds	r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800099a:	e002      	b.n	80009a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	3b01      	subs	r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1f9      	bne.n	800099c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff17 	bl	80007e0 <LL_ADC_IsInternalRegulatorEnabled>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10d      	bne.n	80009d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009bc:	f043 0210 	orr.w	r2, r3, #16
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c8:	f043 0201 	orr.w	r2, r3, #1
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff77 	bl	80008cc <LL_ADC_REG_IsConversionOngoing>
 80009de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009e4:	f003 0310 	and.w	r3, r3, #16
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f040 8129 	bne.w	8000c40 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f040 8125 	bne.w	8000c40 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009fa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80009fe:	f043 0202 	orr.w	r2, r3, #2
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff24 	bl	8000858 <LL_ADC_IsEnabled>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d136      	bne.n	8000a84 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a65      	ldr	r2, [pc, #404]	@ (8000bb0 <HAL_ADC_Init+0x298>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d004      	beq.n	8000a2a <HAL_ADC_Init+0x112>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a63      	ldr	r2, [pc, #396]	@ (8000bb4 <HAL_ADC_Init+0x29c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10e      	bne.n	8000a48 <HAL_ADC_Init+0x130>
 8000a2a:	4861      	ldr	r0, [pc, #388]	@ (8000bb0 <HAL_ADC_Init+0x298>)
 8000a2c:	f7ff ff14 	bl	8000858 <LL_ADC_IsEnabled>
 8000a30:	4604      	mov	r4, r0
 8000a32:	4860      	ldr	r0, [pc, #384]	@ (8000bb4 <HAL_ADC_Init+0x29c>)
 8000a34:	f7ff ff10 	bl	8000858 <LL_ADC_IsEnabled>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4323      	orrs	r3, r4
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf0c      	ite	eq
 8000a40:	2301      	moveq	r3, #1
 8000a42:	2300      	movne	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	e008      	b.n	8000a5a <HAL_ADC_Init+0x142>
 8000a48:	485b      	ldr	r0, [pc, #364]	@ (8000bb8 <HAL_ADC_Init+0x2a0>)
 8000a4a:	f7ff ff05 	bl	8000858 <LL_ADC_IsEnabled>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf0c      	ite	eq
 8000a54:	2301      	moveq	r3, #1
 8000a56:	2300      	movne	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d012      	beq.n	8000a84 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a53      	ldr	r2, [pc, #332]	@ (8000bb0 <HAL_ADC_Init+0x298>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d004      	beq.n	8000a72 <HAL_ADC_Init+0x15a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a51      	ldr	r2, [pc, #324]	@ (8000bb4 <HAL_ADC_Init+0x29c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_ADC_Init+0x15e>
 8000a72:	4a52      	ldr	r2, [pc, #328]	@ (8000bbc <HAL_ADC_Init+0x2a4>)
 8000a74:	e000      	b.n	8000a78 <HAL_ADC_Init+0x160>
 8000a76:	4a52      	ldr	r2, [pc, #328]	@ (8000bc0 <HAL_ADC_Init+0x2a8>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4610      	mov	r0, r2
 8000a80:	f7ff fd3c 	bl	80004fc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000a84:	f7ff fd2e 	bl	80004e4 <HAL_GetREVID>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d914      	bls.n	8000abc <HAL_ADC_Init+0x1a4>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2b10      	cmp	r3, #16
 8000a98:	d110      	bne.n	8000abc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7d5b      	ldrb	r3, [r3, #21]
 8000a9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000aa4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000aaa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7f1b      	ldrb	r3, [r3, #28]
 8000ab0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000ab2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ab4:	f043 030c 	orr.w	r3, r3, #12
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	e00d      	b.n	8000ad8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7d5b      	ldrb	r3, [r3, #21]
 8000ac0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ac6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000acc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7f1b      	ldrb	r3, [r3, #28]
 8000ad2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7f1b      	ldrb	r3, [r3, #28]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d106      	bne.n	8000aee <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a1b      	ldr	r3, [r3, #32]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	045b      	lsls	r3, r3, #17
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d009      	beq.n	8000b0a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000afa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b02:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <HAL_ADC_Init+0x2ac>)
 8000b12:	4013      	ands	r3, r2
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	69b9      	ldr	r1, [r7, #24]
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fed2 	bl	80008cc <LL_ADC_REG_IsConversionOngoing>
 8000b28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fedf 	bl	80008f2 <LL_ADC_INJ_IsConversionOngoing>
 8000b34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d15f      	bne.n	8000bfc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d15c      	bne.n	8000bfc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7d1b      	ldrb	r3, [r3, #20]
 8000b46:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <HAL_ADC_Init+0x2b0>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	6812      	ldr	r2, [r2, #0]
 8000b5e:	69b9      	ldr	r1, [r7, #24]
 8000b60:	430b      	orrs	r3, r1
 8000b62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d130      	bne.n	8000bd0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	691a      	ldr	r2, [r3, #16]
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_ADC_Init+0x2b4>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000b82:	3a01      	subs	r2, #1
 8000b84:	0411      	lsls	r1, r2, #16
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000b90:	4311      	orrs	r1, r2
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000b96:	430a      	orrs	r2, r1
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f042 0201 	orr.w	r2, r2, #1
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	e01c      	b.n	8000be0 <HAL_ADC_Init+0x2c8>
 8000ba6:	bf00      	nop
 8000ba8:	24000098 	.word	0x24000098
 8000bac:	053e2d63 	.word	0x053e2d63
 8000bb0:	40022000 	.word	0x40022000
 8000bb4:	40022100 	.word	0x40022100
 8000bb8:	58026000 	.word	0x58026000
 8000bbc:	40022300 	.word	0x40022300
 8000bc0:	58026300 	.word	0x58026300
 8000bc4:	fff0c003 	.word	0xfff0c003
 8000bc8:	ffffbffc 	.word	0xffffbffc
 8000bcc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 0201 	bic.w	r2, r2, #1
 8000bde:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 fdec 	bl	80017d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d10c      	bne.n	8000c1e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f023 010f 	bic.w	r1, r3, #15
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c1c:	e007      	b.n	8000c2e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 020f 	bic.w	r2, r2, #15
 8000c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c32:	f023 0303 	bic.w	r3, r3, #3
 8000c36:	f043 0201 	orr.w	r2, r3, #1
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c3e:	e007      	b.n	8000c50 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c44:	f043 0210 	orr.w	r2, r3, #16
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	bf00      	nop

08000c5c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a55      	ldr	r2, [pc, #340]	@ (8000dc4 <HAL_ADC_Start_DMA+0x168>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d004      	beq.n	8000c7c <HAL_ADC_Start_DMA+0x20>
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a54      	ldr	r2, [pc, #336]	@ (8000dc8 <HAL_ADC_Start_DMA+0x16c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <HAL_ADC_Start_DMA+0x24>
 8000c7c:	4b53      	ldr	r3, [pc, #332]	@ (8000dcc <HAL_ADC_Start_DMA+0x170>)
 8000c7e:	e000      	b.n	8000c82 <HAL_ADC_Start_DMA+0x26>
 8000c80:	4b53      	ldr	r3, [pc, #332]	@ (8000dd0 <HAL_ADC_Start_DMA+0x174>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd64 	bl	8000750 <LL_ADC_GetMultimode>
 8000c88:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fe1c 	bl	80008cc <LL_ADC_REG_IsConversionOngoing>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 808c 	bne.w	8000db4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d101      	bne.n	8000caa <HAL_ADC_Start_DMA+0x4e>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	e087      	b.n	8000dba <HAL_ADC_Start_DMA+0x15e>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2201      	movs	r2, #1
 8000cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	2b05      	cmp	r3, #5
 8000cbc:	d002      	beq.n	8000cc4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	2b09      	cmp	r3, #9
 8000cc2:	d170      	bne.n	8000da6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f000 fc07 	bl	80014d8 <ADC_Enable>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d163      	bne.n	8000d9c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd4 <HAL_ADC_Start_DMA+0x178>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a37      	ldr	r2, [pc, #220]	@ (8000dc8 <HAL_ADC_Start_DMA+0x16c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d002      	beq.n	8000cf4 <HAL_ADC_Start_DMA+0x98>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	e000      	b.n	8000cf6 <HAL_ADC_Start_DMA+0x9a>
 8000cf4:	4b33      	ldr	r3, [pc, #204]	@ (8000dc4 <HAL_ADC_Start_DMA+0x168>)
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d002      	beq.n	8000d04 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d105      	bne.n	8000d10 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d20:	f023 0206 	bic.w	r2, r3, #6
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d28:	e002      	b.n	8000d30 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d34:	4a28      	ldr	r2, [pc, #160]	@ (8000dd8 <HAL_ADC_Start_DMA+0x17c>)
 8000d36:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	4a27      	ldr	r2, [pc, #156]	@ (8000ddc <HAL_ADC_Start_DMA+0x180>)
 8000d3e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	4a26      	ldr	r2, [pc, #152]	@ (8000de0 <HAL_ADC_Start_DMA+0x184>)
 8000d46:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	221c      	movs	r2, #28
 8000d4e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0210 	orr.w	r2, r2, #16
 8000d66:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4610      	mov	r0, r2
 8000d74:	f7ff fc89 	bl	800068a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3340      	adds	r3, #64	@ 0x40
 8000d82:	4619      	mov	r1, r3
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f001 fed0 	bl	8002b2c <HAL_DMA_Start_IT>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd85 	bl	80008a4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000d9a:	e00d      	b.n	8000db8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8000da4:	e008      	b.n	8000db8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000db2:	e001      	b.n	8000db8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000db4:	2302      	movs	r3, #2
 8000db6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40022000 	.word	0x40022000
 8000dc8:	40022100 	.word	0x40022100
 8000dcc:	40022300 	.word	0x40022300
 8000dd0:	58026300 	.word	0x58026300
 8000dd4:	fffff0fe 	.word	0xfffff0fe
 8000dd8:	080016ab 	.word	0x080016ab
 8000ddc:	08001783 	.word	0x08001783
 8000de0:	0800179f 	.word	0x0800179f

08000de4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b0a1      	sub	sp, #132	@ 0x84
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	4a65      	ldr	r2, [pc, #404]	@ (8000fd0 <HAL_ADC_ConfigChannel+0x1b0>)
 8000e3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d101      	bne.n	8000e4a <HAL_ADC_ConfigChannel+0x2a>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e32e      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x688>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fd38 	bl	80008cc <LL_ADC_REG_IsConversionOngoing>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8313 	bne.w	800148a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db2c      	blt.n	8000ec6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d108      	bne.n	8000e8a <HAL_ADC_ConfigChannel+0x6a>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0e9b      	lsrs	r3, r3, #26
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	2201      	movs	r2, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	e016      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x98>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e9a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	e003      	b.n	8000eae <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8000ea6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ea8:	fab3 f383 	clz	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f003 031f 	and.w	r3, r3, #31
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	69d1      	ldr	r1, [r2, #28]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	430b      	orrs	r3, r1
 8000ec4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	6859      	ldr	r1, [r3, #4]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f7ff fbad 	bl	8000632 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fcf5 	bl	80008cc <LL_ADC_REG_IsConversionOngoing>
 8000ee2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fd02 	bl	80008f2 <LL_ADC_INJ_IsConversionOngoing>
 8000eee:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f040 80b8 	bne.w	8001068 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ef8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f040 80b4 	bne.w	8001068 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	6819      	ldr	r1, [r3, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f7ff fbcf 	bl	80006b0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000f12:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <HAL_ADC_ConfigChannel+0x1b4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f1e:	d10b      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x118>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	e01d      	b.n	8000f74 <HAL_ADC_ConfigChannel+0x154>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10b      	bne.n	8000f5e <HAL_ADC_ConfigChannel+0x13e>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	695a      	ldr	r2, [r3, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	e00a      	b.n	8000f74 <HAL_ADC_ConfigChannel+0x154>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d02c      	beq.n	8000fd8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	6919      	ldr	r1, [r3, #16]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f8c:	f7ff faea 	bl	8000564 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	6919      	ldr	r1, [r3, #16]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	7e5b      	ldrb	r3, [r3, #25]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d102      	bne.n	8000fa6 <HAL_ADC_ConfigChannel+0x186>
 8000fa0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000fa4:	e000      	b.n	8000fa8 <HAL_ADC_ConfigChannel+0x188>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f7ff fb14 	bl	80005d6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	6919      	ldr	r1, [r3, #16]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	7e1b      	ldrb	r3, [r3, #24]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d102      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1a4>
 8000fbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fc2:	e000      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x1a6>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f7ff faec 	bl	80005a4 <LL_ADC_SetDataRightShift>
 8000fcc:	e04c      	b.n	8001068 <HAL_ADC_ConfigChannel+0x248>
 8000fce:	bf00      	nop
 8000fd0:	47ff0000 	.word	0x47ff0000
 8000fd4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	069b      	lsls	r3, r3, #26
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d107      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000ffa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001002:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	069b      	lsls	r3, r3, #26
 800100c:	429a      	cmp	r2, r3
 800100e:	d107      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800101e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001026:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	069b      	lsls	r3, r3, #26
 8001030:	429a      	cmp	r2, r3
 8001032:	d107      	bne.n	8001044 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001042:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800104a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	069b      	lsls	r3, r3, #26
 8001054:	429a      	cmp	r2, r3
 8001056:	d107      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001066:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fbf3 	bl	8000858 <LL_ADC_IsEnabled>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	f040 8211 	bne.w	800149c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6819      	ldr	r1, [r3, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	461a      	mov	r2, r3
 8001088:	f7ff fb3e 	bl	8000708 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4aa1      	ldr	r2, [pc, #644]	@ (8001318 <HAL_ADC_ConfigChannel+0x4f8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	f040 812e 	bne.w	80012f4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x2a0>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0e9b      	lsrs	r3, r3, #26
 80010ae:	3301      	adds	r3, #1
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	2b09      	cmp	r3, #9
 80010b6:	bf94      	ite	ls
 80010b8:	2301      	movls	r3, #1
 80010ba:	2300      	movhi	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	e019      	b.n	80010f4 <HAL_ADC_ConfigChannel+0x2d4>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80010ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80010d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80010d8:	2320      	movs	r3, #32
 80010da:	e003      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80010dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	2b09      	cmp	r3, #9
 80010ec:	bf94      	ite	ls
 80010ee:	2301      	movls	r3, #1
 80010f0:	2300      	movhi	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d079      	beq.n	80011ec <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001100:	2b00      	cmp	r3, #0
 8001102:	d107      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x2f4>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0e9b      	lsrs	r3, r3, #26
 800110a:	3301      	adds	r3, #1
 800110c:	069b      	lsls	r3, r3, #26
 800110e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001112:	e015      	b.n	8001140 <HAL_ADC_ConfigChannel+0x320>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001124:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800112c:	2320      	movs	r3, #32
 800112e:	e003      	b.n	8001138 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	069b      	lsls	r3, r3, #26
 800113c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001148:	2b00      	cmp	r3, #0
 800114a:	d109      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x340>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0e9b      	lsrs	r3, r3, #26
 8001152:	3301      	adds	r3, #1
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	2101      	movs	r1, #1
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	e017      	b.n	8001190 <HAL_ADC_ConfigChannel+0x370>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800116e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001170:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001178:	2320      	movs	r3, #32
 800117a:	e003      	b.n	8001184 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800117c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	ea42 0103 	orr.w	r1, r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10a      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x396>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0e9b      	lsrs	r3, r3, #26
 80011a6:	3301      	adds	r3, #1
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	051b      	lsls	r3, r3, #20
 80011b4:	e018      	b.n	80011e8 <HAL_ADC_ConfigChannel+0x3c8>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80011c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80011c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80011ce:	2320      	movs	r3, #32
 80011d0:	e003      	b.n	80011da <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80011d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011d4:	fab3 f383 	clz	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	3301      	adds	r3, #1
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011e8:	430b      	orrs	r3, r1
 80011ea:	e07e      	b.n	80012ea <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d107      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x3e8>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0e9b      	lsrs	r3, r3, #26
 80011fe:	3301      	adds	r3, #1
 8001200:	069b      	lsls	r3, r3, #26
 8001202:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001206:	e015      	b.n	8001234 <HAL_ADC_ConfigChannel+0x414>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001210:	fa93 f3a3 	rbit	r3, r3
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800121a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8001220:	2320      	movs	r3, #32
 8001222:	e003      	b.n	800122c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	3301      	adds	r3, #1
 800122e:	069b      	lsls	r3, r3, #26
 8001230:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x434>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0e9b      	lsrs	r3, r3, #26
 8001246:	3301      	adds	r3, #1
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2101      	movs	r1, #1
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	e017      	b.n	8001284 <HAL_ADC_ConfigChannel+0x464>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	61bb      	str	r3, [r7, #24]
  return result;
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800126c:	2320      	movs	r3, #32
 800126e:	e003      	b.n	8001278 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	fab3 f383 	clz	r3, r3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	3301      	adds	r3, #1
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	ea42 0103 	orr.w	r1, r2, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10d      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x490>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0e9b      	lsrs	r3, r3, #26
 800129a:	3301      	adds	r3, #1
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	3b1e      	subs	r3, #30
 80012a8:	051b      	lsls	r3, r3, #20
 80012aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ae:	e01b      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x4c8>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	60fb      	str	r3, [r7, #12]
  return result;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80012c8:	2320      	movs	r3, #32
 80012ca:	e003      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	f003 021f 	and.w	r2, r3, #31
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	3b1e      	subs	r3, #30
 80012e2:	051b      	lsls	r3, r3, #20
 80012e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012e8:	430b      	orrs	r3, r1
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	6892      	ldr	r2, [r2, #8]
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff f9de 	bl	80006b0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f280 80cf 	bge.w	800149c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a06      	ldr	r2, [pc, #24]	@ (800131c <HAL_ADC_ConfigChannel+0x4fc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d004      	beq.n	8001312 <HAL_ADC_ConfigChannel+0x4f2>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_ADC_ConfigChannel+0x500>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10a      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x508>
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <HAL_ADC_ConfigChannel+0x504>)
 8001314:	e009      	b.n	800132a <HAL_ADC_ConfigChannel+0x50a>
 8001316:	bf00      	nop
 8001318:	47ff0000 	.word	0x47ff0000
 800131c:	40022000 	.word	0x40022000
 8001320:	40022100 	.word	0x40022100
 8001324:	40022300 	.word	0x40022300
 8001328:	4b61      	ldr	r3, [pc, #388]	@ (80014b0 <HAL_ADC_ConfigChannel+0x690>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f90c 	bl	8000548 <LL_ADC_GetCommonPathInternalCh>
 8001330:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a5f      	ldr	r2, [pc, #380]	@ (80014b4 <HAL_ADC_ConfigChannel+0x694>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d004      	beq.n	8001346 <HAL_ADC_ConfigChannel+0x526>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a5d      	ldr	r2, [pc, #372]	@ (80014b8 <HAL_ADC_ConfigChannel+0x698>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10e      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x544>
 8001346:	485b      	ldr	r0, [pc, #364]	@ (80014b4 <HAL_ADC_ConfigChannel+0x694>)
 8001348:	f7ff fa86 	bl	8000858 <LL_ADC_IsEnabled>
 800134c:	4604      	mov	r4, r0
 800134e:	485a      	ldr	r0, [pc, #360]	@ (80014b8 <HAL_ADC_ConfigChannel+0x698>)
 8001350:	f7ff fa82 	bl	8000858 <LL_ADC_IsEnabled>
 8001354:	4603      	mov	r3, r0
 8001356:	4323      	orrs	r3, r4
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	e008      	b.n	8001376 <HAL_ADC_ConfigChannel+0x556>
 8001364:	4855      	ldr	r0, [pc, #340]	@ (80014bc <HAL_ADC_ConfigChannel+0x69c>)
 8001366:	f7ff fa77 	bl	8000858 <LL_ADC_IsEnabled>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf0c      	ite	eq
 8001370:	2301      	moveq	r3, #1
 8001372:	2300      	movne	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d07d      	beq.n	8001476 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a50      	ldr	r2, [pc, #320]	@ (80014c0 <HAL_ADC_ConfigChannel+0x6a0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d130      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x5c6>
 8001384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001386:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d12b      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a4a      	ldr	r2, [pc, #296]	@ (80014bc <HAL_ADC_ConfigChannel+0x69c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	f040 8081 	bne.w	800149c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a45      	ldr	r2, [pc, #276]	@ (80014b4 <HAL_ADC_ConfigChannel+0x694>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d004      	beq.n	80013ae <HAL_ADC_ConfigChannel+0x58e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a43      	ldr	r2, [pc, #268]	@ (80014b8 <HAL_ADC_ConfigChannel+0x698>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x592>
 80013ae:	4a45      	ldr	r2, [pc, #276]	@ (80014c4 <HAL_ADC_ConfigChannel+0x6a4>)
 80013b0:	e000      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x594>
 80013b2:	4a3f      	ldr	r2, [pc, #252]	@ (80014b0 <HAL_ADC_ConfigChannel+0x690>)
 80013b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f7ff f8b0 	bl	8000522 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013c2:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <HAL_ADC_ConfigChannel+0x6a8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	099b      	lsrs	r3, r3, #6
 80013c8:	4a40      	ldr	r2, [pc, #256]	@ (80014cc <HAL_ADC_ConfigChannel+0x6ac>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	099b      	lsrs	r3, r3, #6
 80013d0:	3301      	adds	r3, #1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80013d6:	e002      	b.n	80013de <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3b01      	subs	r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f9      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80013e4:	e05a      	b.n	800149c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a39      	ldr	r2, [pc, #228]	@ (80014d0 <HAL_ADC_ConfigChannel+0x6b0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d11e      	bne.n	800142e <HAL_ADC_ConfigChannel+0x60e>
 80013f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d119      	bne.n	800142e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2f      	ldr	r2, [pc, #188]	@ (80014bc <HAL_ADC_ConfigChannel+0x69c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d14b      	bne.n	800149c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a2a      	ldr	r2, [pc, #168]	@ (80014b4 <HAL_ADC_ConfigChannel+0x694>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d004      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x5f8>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a29      	ldr	r2, [pc, #164]	@ (80014b8 <HAL_ADC_ConfigChannel+0x698>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_ADC_ConfigChannel+0x5fc>
 8001418:	4a2a      	ldr	r2, [pc, #168]	@ (80014c4 <HAL_ADC_ConfigChannel+0x6a4>)
 800141a:	e000      	b.n	800141e <HAL_ADC_ConfigChannel+0x5fe>
 800141c:	4a24      	ldr	r2, [pc, #144]	@ (80014b0 <HAL_ADC_ConfigChannel+0x690>)
 800141e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001420:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f7ff f87b 	bl	8000522 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800142c:	e036      	b.n	800149c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a28      	ldr	r2, [pc, #160]	@ (80014d4 <HAL_ADC_ConfigChannel+0x6b4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d131      	bne.n	800149c <HAL_ADC_ConfigChannel+0x67c>
 8001438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800143a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d12c      	bne.n	800149c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1d      	ldr	r2, [pc, #116]	@ (80014bc <HAL_ADC_ConfigChannel+0x69c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d127      	bne.n	800149c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a18      	ldr	r2, [pc, #96]	@ (80014b4 <HAL_ADC_ConfigChannel+0x694>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d004      	beq.n	8001460 <HAL_ADC_ConfigChannel+0x640>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <HAL_ADC_ConfigChannel+0x698>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d101      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x644>
 8001460:	4a18      	ldr	r2, [pc, #96]	@ (80014c4 <HAL_ADC_ConfigChannel+0x6a4>)
 8001462:	e000      	b.n	8001466 <HAL_ADC_ConfigChannel+0x646>
 8001464:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <HAL_ADC_ConfigChannel+0x690>)
 8001466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001468:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f7ff f857 	bl	8000522 <LL_ADC_SetCommonPathInternalCh>
 8001474:	e012      	b.n	800149c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147a:	f043 0220 	orr.w	r2, r3, #32
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001488:	e008      	b.n	800149c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800148e:	f043 0220 	orr.w	r2, r3, #32
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80014a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3784      	adds	r7, #132	@ 0x84
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	58026300 	.word	0x58026300
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40022100 	.word	0x40022100
 80014bc:	58026000 	.word	0x58026000
 80014c0:	cb840000 	.word	0xcb840000
 80014c4:	40022300 	.word	0x40022300
 80014c8:	24000098 	.word	0x24000098
 80014cc:	053e2d63 	.word	0x053e2d63
 80014d0:	c7520000 	.word	0xc7520000
 80014d4:	cfb80000 	.word	0xcfb80000

080014d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f9b7 	bl	8000858 <LL_ADC_IsEnabled>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d16e      	bne.n	80015ce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <ADC_Enable+0x100>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00d      	beq.n	800151a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001502:	f043 0210 	orr.w	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e05a      	b.n	80015d0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f972 	bl	8000808 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001524:	f7fe ffae 	bl	8000484 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a2b      	ldr	r2, [pc, #172]	@ (80015dc <ADC_Enable+0x104>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d004      	beq.n	800153e <ADC_Enable+0x66>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a29      	ldr	r2, [pc, #164]	@ (80015e0 <ADC_Enable+0x108>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <ADC_Enable+0x6a>
 800153e:	4b29      	ldr	r3, [pc, #164]	@ (80015e4 <ADC_Enable+0x10c>)
 8001540:	e000      	b.n	8001544 <ADC_Enable+0x6c>
 8001542:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <ADC_Enable+0x110>)
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f903 	bl	8000750 <LL_ADC_GetMultimode>
 800154a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <ADC_Enable+0x108>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d002      	beq.n	800155c <ADC_Enable+0x84>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	e000      	b.n	800155e <ADC_Enable+0x86>
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <ADC_Enable+0x104>)
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	4293      	cmp	r3, r2
 8001564:	d02c      	beq.n	80015c0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d130      	bne.n	80015ce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800156c:	e028      	b.n	80015c0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f970 	bl	8000858 <LL_ADC_IsEnabled>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d104      	bne.n	8001588 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff f940 	bl	8000808 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001588:	f7fe ff7c 	bl	8000484 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d914      	bls.n	80015c0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d00d      	beq.n	80015c0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a8:	f043 0210 	orr.w	r2, r3, #16
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e007      	b.n	80015d0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d1cf      	bne.n	800156e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	8000003f 	.word	0x8000003f
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40022100 	.word	0x40022100
 80015e4:	40022300 	.word	0x40022300
 80015e8:	58026300 	.word	0x58026300

080015ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff f940 	bl	800087e <LL_ADC_IsDisableOngoing>
 80015fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff f927 	bl	8000858 <LL_ADC_IsEnabled>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d047      	beq.n	80016a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d144      	bne.n	80016a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030d 	and.w	r3, r3, #13
 8001620:	2b01      	cmp	r3, #1
 8001622:	d10c      	bne.n	800163e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f901 	bl	8000830 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2203      	movs	r2, #3
 8001634:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001636:	f7fe ff25 	bl	8000484 <HAL_GetTick>
 800163a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800163c:	e029      	b.n	8001692 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001642:	f043 0210 	orr.w	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164e:	f043 0201 	orr.w	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e023      	b.n	80016a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800165a:	f7fe ff13 	bl	8000484 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d914      	bls.n	8001692 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00d      	beq.n	8001692 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167a:	f043 0210 	orr.w	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001686:	f043 0201 	orr.w	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e007      	b.n	80016a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1dc      	bne.n	800165a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d14b      	bne.n	800175c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d021      	beq.n	8001722 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff92 	bl	800060c <LL_ADC_REG_IsTriggerSourceSWStart>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d032      	beq.n	8001754 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d12b      	bne.n	8001754 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001700:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d11f      	bne.n	8001754 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001720:	e018      	b.n	8001754 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d111      	bne.n	8001754 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174c:	f043 0201 	orr.w	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff fb45 	bl	8000de4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800175a:	e00e      	b.n	800177a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fb4f 	bl	8000e0c <HAL_ADC_ErrorCallback>
}
 800176e:	e004      	b.n	800177a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f7ff fb31 	bl	8000df8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	f043 0204 	orr.w	r2, r3, #4
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fb21 	bl	8000e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a7a      	ldr	r2, [pc, #488]	@ (80019cc <ADC_ConfigureBoostMode+0x1f8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d004      	beq.n	80017f0 <ADC_ConfigureBoostMode+0x1c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a79      	ldr	r2, [pc, #484]	@ (80019d0 <ADC_ConfigureBoostMode+0x1fc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d109      	bne.n	8001804 <ADC_ConfigureBoostMode+0x30>
 80017f0:	4b78      	ldr	r3, [pc, #480]	@ (80019d4 <ADC_ConfigureBoostMode+0x200>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	e008      	b.n	8001816 <ADC_ConfigureBoostMode+0x42>
 8001804:	4b74      	ldr	r3, [pc, #464]	@ (80019d8 <ADC_ConfigureBoostMode+0x204>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d01c      	beq.n	8001854 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800181a:	f006 f97d 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 800181e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001828:	d010      	beq.n	800184c <ADC_ConfigureBoostMode+0x78>
 800182a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800182e:	d873      	bhi.n	8001918 <ADC_ConfigureBoostMode+0x144>
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001834:	d002      	beq.n	800183c <ADC_ConfigureBoostMode+0x68>
 8001836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800183a:	d16d      	bne.n	8001918 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	60fb      	str	r3, [r7, #12]
        break;
 800184a:	e068      	b.n	800191e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	60fb      	str	r3, [r7, #12]
        break;
 8001852:	e064      	b.n	800191e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001854:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	f007 fbee 	bl	800903c <HAL_RCCEx_GetPeriphCLKFreq>
 8001860:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800186a:	d051      	beq.n	8001910 <ADC_ConfigureBoostMode+0x13c>
 800186c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001870:	d854      	bhi.n	800191c <ADC_ConfigureBoostMode+0x148>
 8001872:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001876:	d047      	beq.n	8001908 <ADC_ConfigureBoostMode+0x134>
 8001878:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800187c:	d84e      	bhi.n	800191c <ADC_ConfigureBoostMode+0x148>
 800187e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001882:	d03d      	beq.n	8001900 <ADC_ConfigureBoostMode+0x12c>
 8001884:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001888:	d848      	bhi.n	800191c <ADC_ConfigureBoostMode+0x148>
 800188a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800188e:	d033      	beq.n	80018f8 <ADC_ConfigureBoostMode+0x124>
 8001890:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001894:	d842      	bhi.n	800191c <ADC_ConfigureBoostMode+0x148>
 8001896:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800189a:	d029      	beq.n	80018f0 <ADC_ConfigureBoostMode+0x11c>
 800189c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80018a0:	d83c      	bhi.n	800191c <ADC_ConfigureBoostMode+0x148>
 80018a2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80018a6:	d01a      	beq.n	80018de <ADC_ConfigureBoostMode+0x10a>
 80018a8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80018ac:	d836      	bhi.n	800191c <ADC_ConfigureBoostMode+0x148>
 80018ae:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80018b2:	d014      	beq.n	80018de <ADC_ConfigureBoostMode+0x10a>
 80018b4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80018b8:	d830      	bhi.n	800191c <ADC_ConfigureBoostMode+0x148>
 80018ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018be:	d00e      	beq.n	80018de <ADC_ConfigureBoostMode+0x10a>
 80018c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018c4:	d82a      	bhi.n	800191c <ADC_ConfigureBoostMode+0x148>
 80018c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80018ca:	d008      	beq.n	80018de <ADC_ConfigureBoostMode+0x10a>
 80018cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80018d0:	d824      	bhi.n	800191c <ADC_ConfigureBoostMode+0x148>
 80018d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018d6:	d002      	beq.n	80018de <ADC_ConfigureBoostMode+0x10a>
 80018d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80018dc:	d11e      	bne.n	800191c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0c9b      	lsrs	r3, r3, #18
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	60fb      	str	r3, [r7, #12]
        break;
 80018ee:	e016      	b.n	800191e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	60fb      	str	r3, [r7, #12]
        break;
 80018f6:	e012      	b.n	800191e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	60fb      	str	r3, [r7, #12]
        break;
 80018fe:	e00e      	b.n	800191e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	099b      	lsrs	r3, r3, #6
 8001904:	60fb      	str	r3, [r7, #12]
        break;
 8001906:	e00a      	b.n	800191e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	09db      	lsrs	r3, r3, #7
 800190c:	60fb      	str	r3, [r7, #12]
        break;
 800190e:	e006      	b.n	800191e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	60fb      	str	r3, [r7, #12]
        break;
 8001916:	e002      	b.n	800191e <ADC_ConfigureBoostMode+0x14a>
        break;
 8001918:	bf00      	nop
 800191a:	e000      	b.n	800191e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800191c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800191e:	f7fe fde1 	bl	80004e4 <HAL_GetREVID>
 8001922:	4603      	mov	r3, r0
 8001924:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001928:	4293      	cmp	r3, r2
 800192a:	d815      	bhi.n	8001958 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4a2b      	ldr	r2, [pc, #172]	@ (80019dc <ADC_ConfigureBoostMode+0x208>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d908      	bls.n	8001946 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001942:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001944:	e03e      	b.n	80019c4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001954:	609a      	str	r2, [r3, #8]
}
 8001956:	e035      	b.n	80019c4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <ADC_ConfigureBoostMode+0x20c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d808      	bhi.n	8001978 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001974:	609a      	str	r2, [r3, #8]
}
 8001976:	e025      	b.n	80019c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <ADC_ConfigureBoostMode+0x210>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d80a      	bhi.n	8001996 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001992:	609a      	str	r2, [r3, #8]
}
 8001994:	e016      	b.n	80019c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4a13      	ldr	r2, [pc, #76]	@ (80019e8 <ADC_ConfigureBoostMode+0x214>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d80a      	bhi.n	80019b4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019b0:	609a      	str	r2, [r3, #8]
}
 80019b2:	e007      	b.n	80019c4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80019c2:	609a      	str	r2, [r3, #8]
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40022100 	.word	0x40022100
 80019d4:	40022300 	.word	0x40022300
 80019d8:	58026300 	.word	0x58026300
 80019dc:	01312d00 	.word	0x01312d00
 80019e0:	005f5e10 	.word	0x005f5e10
 80019e4:	00bebc20 	.word	0x00bebc20
 80019e8:	017d7840 	.word	0x017d7840

080019ec <LL_ADC_IsEnabled>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <LL_ADC_IsEnabled+0x18>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <LL_ADC_IsEnabled+0x1a>
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <LL_ADC_StartCalibration>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <LL_ADC_StartCalibration+0x38>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a34:	430a      	orrs	r2, r1
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	3ffeffc0 	.word	0x3ffeffc0

08001a50 <LL_ADC_IsCalibrationOnGoing>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a64:	d101      	bne.n	8001a6a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_REG_IsConversionOngoing>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d101      	bne.n	8001a90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_ADCEx_Calibration_Start+0x1e>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e04c      	b.n	8001b58 <HAL_ADCEx_Calibration_Start+0xb8>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff fd90 	bl	80015ec <ADC_Disable>
 8001acc:	4603      	mov	r3, r0
 8001ace:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d135      	bne.n	8001b42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ada:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <HAL_ADCEx_Calibration_Start+0xc0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	f043 0202 	orr.w	r2, r3, #2
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff90 	bl	8001a14 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001af4:	e014      	b.n	8001b20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	3301      	adds	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4a19      	ldr	r2, [pc, #100]	@ (8001b64 <HAL_ADCEx_Calibration_Start+0xc4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d30d      	bcc.n	8001b20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b08:	f023 0312 	bic.w	r3, r3, #18
 8001b0c:	f043 0210 	orr.w	r2, r3, #16
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e01b      	b.n	8001b58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff93 	bl	8001a50 <LL_ADC_IsCalibrationOnGoing>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e2      	bne.n	8001af6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b34:	f023 0303 	bic.w	r3, r3, #3
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b40:	e005      	b.n	8001b4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b46:	f043 0210 	orr.w	r2, r3, #16
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	ffffeefd 	.word	0xffffeefd
 8001b64:	25c3f800 	.word	0x25c3f800

08001b68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b09f      	sub	sp, #124	@ 0x7c
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e0be      	b.n	8001d04 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a5c      	ldr	r2, [pc, #368]	@ (8001d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d102      	bne.n	8001ba6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	e001      	b.n	8001baa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10b      	bne.n	8001bc8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb4:	f043 0220 	orr.w	r2, r3, #32
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e09d      	b.n	8001d04 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff54 	bl	8001a78 <LL_ADC_REG_IsConversionOngoing>
 8001bd0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff4e 	bl	8001a78 <LL_ADC_REG_IsConversionOngoing>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d17f      	bne.n	8001ce2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d17c      	bne.n	8001ce2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a47      	ldr	r2, [pc, #284]	@ (8001d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a46      	ldr	r2, [pc, #280]	@ (8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001bfc:	4b45      	ldr	r3, [pc, #276]	@ (8001d14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001bfe:	e000      	b.n	8001c02 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001c00:	4b45      	ldr	r3, [pc, #276]	@ (8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001c02:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d039      	beq.n	8001c80 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c1c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a3a      	ldr	r2, [pc, #232]	@ (8001d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d004      	beq.n	8001c32 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a38      	ldr	r2, [pc, #224]	@ (8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10e      	bne.n	8001c50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001c32:	4836      	ldr	r0, [pc, #216]	@ (8001d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001c34:	f7ff feda 	bl	80019ec <LL_ADC_IsEnabled>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	4835      	ldr	r0, [pc, #212]	@ (8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001c3c:	f7ff fed6 	bl	80019ec <LL_ADC_IsEnabled>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4323      	orrs	r3, r4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e008      	b.n	8001c62 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8001c50:	4832      	ldr	r0, [pc, #200]	@ (8001d1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001c52:	f7ff fecb 	bl	80019ec <LL_ADC_IsEnabled>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d047      	beq.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	6811      	ldr	r1, [r2, #0]
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	6892      	ldr	r2, [r2, #8]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c7c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c7e:	e03a      	b.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c8a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d10e      	bne.n	8001cbe <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8001ca0:	481a      	ldr	r0, [pc, #104]	@ (8001d0c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001ca2:	f7ff fea3 	bl	80019ec <LL_ADC_IsEnabled>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	4819      	ldr	r0, [pc, #100]	@ (8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001caa:	f7ff fe9f 	bl	80019ec <LL_ADC_IsEnabled>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4323      	orrs	r3, r4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	e008      	b.n	8001cd0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001cbe:	4817      	ldr	r0, [pc, #92]	@ (8001d1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001cc0:	f7ff fe94 	bl	80019ec <LL_ADC_IsEnabled>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001cde:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ce0:	e009      	b.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce6:	f043 0220 	orr.w	r2, r3, #32
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001cf4:	e000      	b.n	8001cf8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cf6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d00:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	377c      	adds	r7, #124	@ 0x7c
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40022100 	.word	0x40022100
 8001d14:	40022300 	.word	0x40022300
 8001d18:	58026300 	.word	0x58026300
 8001d1c:	58026000 	.word	0x58026000
 8001d20:	fffff0e0 	.word	0xfffff0e0

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x40>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x40>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	05fa0000 	.word	0x05fa0000

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	@ (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	@ (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	@ 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ff4c 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea2:	f7ff ff63 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001ea6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	6978      	ldr	r0, [r7, #20]
 8001eae:	f7ff ffb3 	bl	8001e18 <NVIC_EncodePriority>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff82 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001ec0:	bf00      	nop
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff56 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001ee8:	f3bf 8f5f 	dmb	sy
}
 8001eec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001eee:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <HAL_MPU_Disable+0x28>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	4a06      	ldr	r2, [pc, #24]	@ (8001f0c <HAL_MPU_Disable+0x28>)
 8001ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_MPU_Disable+0x2c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	e000ed90 	.word	0xe000ed90

08001f14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_MPU_Enable+0x38>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_MPU_Enable+0x3c>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <HAL_MPU_Enable+0x3c>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f32:	f3bf 8f4f 	dsb	sy
}
 8001f36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f38:	f3bf 8f6f 	isb	sy
}
 8001f3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed90 	.word	0xe000ed90
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	785a      	ldrb	r2, [r3, #1]
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_MPU_ConfigRegion+0x7c>)
 8001f62:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f64:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <HAL_MPU_ConfigRegion+0x7c>)
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	4a19      	ldr	r2, [pc, #100]	@ (8001fd0 <HAL_MPU_ConfigRegion+0x7c>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f70:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <HAL_MPU_ConfigRegion+0x7c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7b1b      	ldrb	r3, [r3, #12]
 8001f7c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7adb      	ldrb	r3, [r3, #11]
 8001f82:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7a9b      	ldrb	r3, [r3, #10]
 8001f8a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7b5b      	ldrb	r3, [r3, #13]
 8001f92:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7b9b      	ldrb	r3, [r3, #14]
 8001f9a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7bdb      	ldrb	r3, [r3, #15]
 8001fa2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7a5b      	ldrb	r3, [r3, #9]
 8001faa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7a1b      	ldrb	r3, [r3, #8]
 8001fb2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fb4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fbc:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fbe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fc0:	6113      	str	r3, [r2, #16]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed90 	.word	0xe000ed90

08001fd4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e014      	b.n	8002010 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f00e fd30 	bl	8010a5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e046      	b.n	80020ba <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	795b      	ldrb	r3, [r3, #5]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_DAC_Start+0x20>
 8002034:	2302      	movs	r3, #2
 8002036:	e040      	b.n	80020ba <HAL_DAC_Start+0xa2>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2201      	movs	r2, #1
 8002052:	409a      	lsls	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800206c:	2b02      	cmp	r3, #2
 800206e:	d11d      	bne.n	80020ac <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	e014      	b.n	80020ac <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2102      	movs	r1, #2
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0202 	orr.w	r2, r2, #2
 80020aa:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020dc:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01d      	beq.n	8002124 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d018      	beq.n	8002124 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2204      	movs	r2, #4
 80020f6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800210c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800211c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f851 	bl	80021c6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d01d      	beq.n	800216a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d018      	beq.n	800216a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2204      	movs	r2, #4
 800213c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f043 0202 	orr.w	r2, r3, #2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002162:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f97b 	bl	8002460 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002172:	b480      	push	{r7}
 8002174:	b087      	sub	sp, #28
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e015      	b.n	80021ba <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	3308      	adds	r3, #8
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e004      	b.n	80021b0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	3314      	adds	r3, #20
 80021ae:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	461a      	mov	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_DAC_ConfigChannel+0x1e>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e12a      	b.n	8002454 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	795b      	ldrb	r3, [r3, #5]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_DAC_ConfigChannel+0x2e>
 8002206:	2302      	movs	r3, #2
 8002208:	e124      	b.n	8002454 <HAL_DAC_ConfigChannel+0x278>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2202      	movs	r2, #2
 8002214:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d17a      	bne.n	8002314 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800221e:	f7fe f931 	bl	8000484 <HAL_GetTick>
 8002222:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d13d      	bne.n	80022a6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800222a:	e018      	b.n	800225e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800222c:	f7fe f92a 	bl	8000484 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d911      	bls.n	800225e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002240:	4b86      	ldr	r3, [pc, #536]	@ (800245c <HAL_DAC_ConfigChannel+0x280>)
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f043 0208 	orr.w	r2, r3, #8
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2203      	movs	r2, #3
 8002258:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0fa      	b.n	8002454 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002264:	4b7d      	ldr	r3, [pc, #500]	@ (800245c <HAL_DAC_ConfigChannel+0x280>)
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1df      	bne.n	800222c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	6992      	ldr	r2, [r2, #24]
 8002274:	641a      	str	r2, [r3, #64]	@ 0x40
 8002276:	e020      	b.n	80022ba <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002278:	f7fe f904 	bl	8000484 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d90f      	bls.n	80022a6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228c:	2b00      	cmp	r3, #0
 800228e:	da0a      	bge.n	80022a6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f043 0208 	orr.w	r2, r3, #8
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2203      	movs	r2, #3
 80022a0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0d6      	b.n	8002454 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	dbe3      	blt.n	8002278 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	6992      	ldr	r2, [r2, #24]
 80022b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	ea02 0103 	and.w	r1, r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	21ff      	movs	r1, #255	@ 0xff
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	ea02 0103 	and.w	r1, r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d11d      	bne.n	8002358 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002322:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	221f      	movs	r2, #31
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2207      	movs	r2, #7
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d102      	bne.n	8002382 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002380:	e00f      	b.n	80023a2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d102      	bne.n	8002390 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800238a:	2301      	movs	r3, #1
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
 800238e:	e008      	b.n	80023a2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002398:	2301      	movs	r3, #1
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
 800239c:	e001      	b.n	80023a2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43da      	mvns	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	400a      	ands	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	22c0      	movs	r2, #192	@ 0xc0
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	400a      	ands	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002450:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002454:	4618      	mov	r0, r3
 8002456:	3728      	adds	r7, #40	@ 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20008000 	.word	0x20008000

08002460 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7fe f802 	bl	8000484 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e316      	b.n	8002aba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a66      	ldr	r2, [pc, #408]	@ (800262c <HAL_DMA_Init+0x1b8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d04a      	beq.n	800252c <HAL_DMA_Init+0xb8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a65      	ldr	r2, [pc, #404]	@ (8002630 <HAL_DMA_Init+0x1bc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d045      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a63      	ldr	r2, [pc, #396]	@ (8002634 <HAL_DMA_Init+0x1c0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d040      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a62      	ldr	r2, [pc, #392]	@ (8002638 <HAL_DMA_Init+0x1c4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d03b      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a60      	ldr	r2, [pc, #384]	@ (800263c <HAL_DMA_Init+0x1c8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d036      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002640 <HAL_DMA_Init+0x1cc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d031      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002644 <HAL_DMA_Init+0x1d0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02c      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002648 <HAL_DMA_Init+0x1d4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d027      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5a      	ldr	r2, [pc, #360]	@ (800264c <HAL_DMA_Init+0x1d8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d022      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a59      	ldr	r2, [pc, #356]	@ (8002650 <HAL_DMA_Init+0x1dc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d01d      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a57      	ldr	r2, [pc, #348]	@ (8002654 <HAL_DMA_Init+0x1e0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d018      	beq.n	800252c <HAL_DMA_Init+0xb8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a56      	ldr	r2, [pc, #344]	@ (8002658 <HAL_DMA_Init+0x1e4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d013      	beq.n	800252c <HAL_DMA_Init+0xb8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a54      	ldr	r2, [pc, #336]	@ (800265c <HAL_DMA_Init+0x1e8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00e      	beq.n	800252c <HAL_DMA_Init+0xb8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a53      	ldr	r2, [pc, #332]	@ (8002660 <HAL_DMA_Init+0x1ec>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d009      	beq.n	800252c <HAL_DMA_Init+0xb8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a51      	ldr	r2, [pc, #324]	@ (8002664 <HAL_DMA_Init+0x1f0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_DMA_Init+0xb8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a50      	ldr	r2, [pc, #320]	@ (8002668 <HAL_DMA_Init+0x1f4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d101      	bne.n	8002530 <HAL_DMA_Init+0xbc>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_DMA_Init+0xbe>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 813b 	beq.w	80027ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a37      	ldr	r2, [pc, #220]	@ (800262c <HAL_DMA_Init+0x1b8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d04a      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a36      	ldr	r2, [pc, #216]	@ (8002630 <HAL_DMA_Init+0x1bc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d045      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a34      	ldr	r2, [pc, #208]	@ (8002634 <HAL_DMA_Init+0x1c0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d040      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a33      	ldr	r2, [pc, #204]	@ (8002638 <HAL_DMA_Init+0x1c4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d03b      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a31      	ldr	r2, [pc, #196]	@ (800263c <HAL_DMA_Init+0x1c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d036      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a30      	ldr	r2, [pc, #192]	@ (8002640 <HAL_DMA_Init+0x1cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d031      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2e      	ldr	r2, [pc, #184]	@ (8002644 <HAL_DMA_Init+0x1d0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d02c      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2d      	ldr	r2, [pc, #180]	@ (8002648 <HAL_DMA_Init+0x1d4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d027      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2b      	ldr	r2, [pc, #172]	@ (800264c <HAL_DMA_Init+0x1d8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d022      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002650 <HAL_DMA_Init+0x1dc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d01d      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a28      	ldr	r2, [pc, #160]	@ (8002654 <HAL_DMA_Init+0x1e0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d018      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a27      	ldr	r2, [pc, #156]	@ (8002658 <HAL_DMA_Init+0x1e4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d013      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a25      	ldr	r2, [pc, #148]	@ (800265c <HAL_DMA_Init+0x1e8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00e      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a24      	ldr	r2, [pc, #144]	@ (8002660 <HAL_DMA_Init+0x1ec>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <HAL_DMA_Init+0x1f0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_DMA_Init+0x174>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a21      	ldr	r2, [pc, #132]	@ (8002668 <HAL_DMA_Init+0x1f4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <HAL_DMA_Init+0x186>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e007      	b.n	800260a <HAL_DMA_Init+0x196>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800260a:	e02f      	b.n	800266c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260c:	f7fd ff3a 	bl	8000484 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b05      	cmp	r3, #5
 8002618:	d928      	bls.n	800266c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2203      	movs	r2, #3
 8002624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e246      	b.n	8002aba <HAL_DMA_Init+0x646>
 800262c:	40020010 	.word	0x40020010
 8002630:	40020028 	.word	0x40020028
 8002634:	40020040 	.word	0x40020040
 8002638:	40020058 	.word	0x40020058
 800263c:	40020070 	.word	0x40020070
 8002640:	40020088 	.word	0x40020088
 8002644:	400200a0 	.word	0x400200a0
 8002648:	400200b8 	.word	0x400200b8
 800264c:	40020410 	.word	0x40020410
 8002650:	40020428 	.word	0x40020428
 8002654:	40020440 	.word	0x40020440
 8002658:	40020458 	.word	0x40020458
 800265c:	40020470 	.word	0x40020470
 8002660:	40020488 	.word	0x40020488
 8002664:	400204a0 	.word	0x400204a0
 8002668:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1c8      	bne.n	800260c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4b83      	ldr	r3, [pc, #524]	@ (8002894 <HAL_DMA_Init+0x420>)
 8002686:	4013      	ands	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002692:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d107      	bne.n	80026d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	4313      	orrs	r3, r2
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026d0:	4b71      	ldr	r3, [pc, #452]	@ (8002898 <HAL_DMA_Init+0x424>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b71      	ldr	r3, [pc, #452]	@ (800289c <HAL_DMA_Init+0x428>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026dc:	d328      	bcc.n	8002730 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b28      	cmp	r3, #40	@ 0x28
 80026e4:	d903      	bls.n	80026ee <HAL_DMA_Init+0x27a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80026ec:	d917      	bls.n	800271e <HAL_DMA_Init+0x2aa>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80026f4:	d903      	bls.n	80026fe <HAL_DMA_Init+0x28a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b42      	cmp	r3, #66	@ 0x42
 80026fc:	d90f      	bls.n	800271e <HAL_DMA_Init+0x2aa>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b46      	cmp	r3, #70	@ 0x46
 8002704:	d903      	bls.n	800270e <HAL_DMA_Init+0x29a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b48      	cmp	r3, #72	@ 0x48
 800270c:	d907      	bls.n	800271e <HAL_DMA_Init+0x2aa>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b4e      	cmp	r3, #78	@ 0x4e
 8002714:	d905      	bls.n	8002722 <HAL_DMA_Init+0x2ae>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b52      	cmp	r3, #82	@ 0x52
 800271c:	d801      	bhi.n	8002722 <HAL_DMA_Init+0x2ae>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_DMA_Init+0x2b0>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800272e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f023 0307 	bic.w	r3, r3, #7
 8002746:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	2b04      	cmp	r3, #4
 8002758:	d117      	bne.n	800278a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00e      	beq.n	800278a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f001 fdcf 	bl	8004310 <DMA_CheckFifoParam>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2240      	movs	r2, #64	@ 0x40
 800277c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e197      	b.n	8002aba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f001 fd0a 	bl	80041ac <DMA_CalcBaseAndBitshift>
 8002798:	4603      	mov	r3, r0
 800279a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	223f      	movs	r2, #63	@ 0x3f
 80027a6:	409a      	lsls	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e0cd      	b.n	800294a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3b      	ldr	r2, [pc, #236]	@ (80028a0 <HAL_DMA_Init+0x42c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d022      	beq.n	80027fe <HAL_DMA_Init+0x38a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a39      	ldr	r2, [pc, #228]	@ (80028a4 <HAL_DMA_Init+0x430>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01d      	beq.n	80027fe <HAL_DMA_Init+0x38a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a38      	ldr	r2, [pc, #224]	@ (80028a8 <HAL_DMA_Init+0x434>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d018      	beq.n	80027fe <HAL_DMA_Init+0x38a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a36      	ldr	r2, [pc, #216]	@ (80028ac <HAL_DMA_Init+0x438>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_DMA_Init+0x38a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a35      	ldr	r2, [pc, #212]	@ (80028b0 <HAL_DMA_Init+0x43c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00e      	beq.n	80027fe <HAL_DMA_Init+0x38a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a33      	ldr	r2, [pc, #204]	@ (80028b4 <HAL_DMA_Init+0x440>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d009      	beq.n	80027fe <HAL_DMA_Init+0x38a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a32      	ldr	r2, [pc, #200]	@ (80028b8 <HAL_DMA_Init+0x444>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d004      	beq.n	80027fe <HAL_DMA_Init+0x38a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a30      	ldr	r2, [pc, #192]	@ (80028bc <HAL_DMA_Init+0x448>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_DMA_Init+0x38e>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_DMA_Init+0x390>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8097 	beq.w	8002938 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a24      	ldr	r2, [pc, #144]	@ (80028a0 <HAL_DMA_Init+0x42c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d021      	beq.n	8002858 <HAL_DMA_Init+0x3e4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a22      	ldr	r2, [pc, #136]	@ (80028a4 <HAL_DMA_Init+0x430>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01c      	beq.n	8002858 <HAL_DMA_Init+0x3e4>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a21      	ldr	r2, [pc, #132]	@ (80028a8 <HAL_DMA_Init+0x434>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d017      	beq.n	8002858 <HAL_DMA_Init+0x3e4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <HAL_DMA_Init+0x438>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d012      	beq.n	8002858 <HAL_DMA_Init+0x3e4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1e      	ldr	r2, [pc, #120]	@ (80028b0 <HAL_DMA_Init+0x43c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00d      	beq.n	8002858 <HAL_DMA_Init+0x3e4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <HAL_DMA_Init+0x440>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d008      	beq.n	8002858 <HAL_DMA_Init+0x3e4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1b      	ldr	r2, [pc, #108]	@ (80028b8 <HAL_DMA_Init+0x444>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <HAL_DMA_Init+0x3e4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a19      	ldr	r2, [pc, #100]	@ (80028bc <HAL_DMA_Init+0x448>)
 8002856:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <HAL_DMA_Init+0x44c>)
 8002874:	4013      	ands	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b40      	cmp	r3, #64	@ 0x40
 800287e:	d021      	beq.n	80028c4 <HAL_DMA_Init+0x450>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b80      	cmp	r3, #128	@ 0x80
 8002886:	d102      	bne.n	800288e <HAL_DMA_Init+0x41a>
 8002888:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800288c:	e01b      	b.n	80028c6 <HAL_DMA_Init+0x452>
 800288e:	2300      	movs	r3, #0
 8002890:	e019      	b.n	80028c6 <HAL_DMA_Init+0x452>
 8002892:	bf00      	nop
 8002894:	fe10803f 	.word	0xfe10803f
 8002898:	5c001000 	.word	0x5c001000
 800289c:	ffff0000 	.word	0xffff0000
 80028a0:	58025408 	.word	0x58025408
 80028a4:	5802541c 	.word	0x5802541c
 80028a8:	58025430 	.word	0x58025430
 80028ac:	58025444 	.word	0x58025444
 80028b0:	58025458 	.word	0x58025458
 80028b4:	5802546c 	.word	0x5802546c
 80028b8:	58025480 	.word	0x58025480
 80028bc:	58025494 	.word	0x58025494
 80028c0:	fffe000f 	.word	0xfffe000f
 80028c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ac4 <HAL_DMA_Init+0x650>)
 800290c:	4413      	add	r3, r2
 800290e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac8 <HAL_DMA_Init+0x654>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f001 fc45 	bl	80041ac <DMA_CalcBaseAndBitshift>
 8002922:	4603      	mov	r3, r0
 8002924:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2201      	movs	r2, #1
 8002930:	409a      	lsls	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	e008      	b.n	800294a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2240      	movs	r2, #64	@ 0x40
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2203      	movs	r2, #3
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0b7      	b.n	8002aba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5f      	ldr	r2, [pc, #380]	@ (8002acc <HAL_DMA_Init+0x658>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d072      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad0 <HAL_DMA_Init+0x65c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d06d      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a5c      	ldr	r2, [pc, #368]	@ (8002ad4 <HAL_DMA_Init+0x660>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d068      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ad8 <HAL_DMA_Init+0x664>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d063      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a59      	ldr	r2, [pc, #356]	@ (8002adc <HAL_DMA_Init+0x668>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d05e      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a57      	ldr	r2, [pc, #348]	@ (8002ae0 <HAL_DMA_Init+0x66c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d059      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a56      	ldr	r2, [pc, #344]	@ (8002ae4 <HAL_DMA_Init+0x670>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d054      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a54      	ldr	r2, [pc, #336]	@ (8002ae8 <HAL_DMA_Init+0x674>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d04f      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a53      	ldr	r2, [pc, #332]	@ (8002aec <HAL_DMA_Init+0x678>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d04a      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a51      	ldr	r2, [pc, #324]	@ (8002af0 <HAL_DMA_Init+0x67c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d045      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a50      	ldr	r2, [pc, #320]	@ (8002af4 <HAL_DMA_Init+0x680>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d040      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a4e      	ldr	r2, [pc, #312]	@ (8002af8 <HAL_DMA_Init+0x684>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d03b      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a4d      	ldr	r2, [pc, #308]	@ (8002afc <HAL_DMA_Init+0x688>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d036      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b00 <HAL_DMA_Init+0x68c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a4a      	ldr	r2, [pc, #296]	@ (8002b04 <HAL_DMA_Init+0x690>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d02c      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a48      	ldr	r2, [pc, #288]	@ (8002b08 <HAL_DMA_Init+0x694>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d027      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a47      	ldr	r2, [pc, #284]	@ (8002b0c <HAL_DMA_Init+0x698>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d022      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a45      	ldr	r2, [pc, #276]	@ (8002b10 <HAL_DMA_Init+0x69c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01d      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a44      	ldr	r2, [pc, #272]	@ (8002b14 <HAL_DMA_Init+0x6a0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d018      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a42      	ldr	r2, [pc, #264]	@ (8002b18 <HAL_DMA_Init+0x6a4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a41      	ldr	r2, [pc, #260]	@ (8002b1c <HAL_DMA_Init+0x6a8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a3f      	ldr	r2, [pc, #252]	@ (8002b20 <HAL_DMA_Init+0x6ac>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b24 <HAL_DMA_Init+0x6b0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_DMA_Init+0x5c6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3c      	ldr	r2, [pc, #240]	@ (8002b28 <HAL_DMA_Init+0x6b4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_DMA_Init+0x5ca>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_DMA_Init+0x5cc>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d032      	beq.n	8002aaa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f001 fcdf 	bl	8004408 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b80      	cmp	r3, #128	@ 0x80
 8002a50:	d102      	bne.n	8002a58 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a6c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <HAL_DMA_Init+0x624>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d80c      	bhi.n	8002a98 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f001 fd5c 	bl	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	e008      	b.n	8002aaa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	a7fdabf8 	.word	0xa7fdabf8
 8002ac8:	cccccccd 	.word	0xcccccccd
 8002acc:	40020010 	.word	0x40020010
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020040 	.word	0x40020040
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	40020070 	.word	0x40020070
 8002ae0:	40020088 	.word	0x40020088
 8002ae4:	400200a0 	.word	0x400200a0
 8002ae8:	400200b8 	.word	0x400200b8
 8002aec:	40020410 	.word	0x40020410
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40020440 	.word	0x40020440
 8002af8:	40020458 	.word	0x40020458
 8002afc:	40020470 	.word	0x40020470
 8002b00:	40020488 	.word	0x40020488
 8002b04:	400204a0 	.word	0x400204a0
 8002b08:	400204b8 	.word	0x400204b8
 8002b0c:	58025408 	.word	0x58025408
 8002b10:	5802541c 	.word	0x5802541c
 8002b14:	58025430 	.word	0x58025430
 8002b18:	58025444 	.word	0x58025444
 8002b1c:	58025458 	.word	0x58025458
 8002b20:	5802546c 	.word	0x5802546c
 8002b24:	58025480 	.word	0x58025480
 8002b28:	58025494 	.word	0x58025494

08002b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e226      	b.n	8002f96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_DMA_Start_IT+0x2a>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e21f      	b.n	8002f96 <HAL_DMA_Start_IT+0x46a>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f040 820a 	bne.w	8002f80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a68      	ldr	r2, [pc, #416]	@ (8002d20 <HAL_DMA_Start_IT+0x1f4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d04a      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a66      	ldr	r2, [pc, #408]	@ (8002d24 <HAL_DMA_Start_IT+0x1f8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d045      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a65      	ldr	r2, [pc, #404]	@ (8002d28 <HAL_DMA_Start_IT+0x1fc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d040      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a63      	ldr	r2, [pc, #396]	@ (8002d2c <HAL_DMA_Start_IT+0x200>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d03b      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a62      	ldr	r2, [pc, #392]	@ (8002d30 <HAL_DMA_Start_IT+0x204>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d036      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a60      	ldr	r2, [pc, #384]	@ (8002d34 <HAL_DMA_Start_IT+0x208>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d031      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5f      	ldr	r2, [pc, #380]	@ (8002d38 <HAL_DMA_Start_IT+0x20c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d02c      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d3c <HAL_DMA_Start_IT+0x210>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d027      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5c      	ldr	r2, [pc, #368]	@ (8002d40 <HAL_DMA_Start_IT+0x214>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d44 <HAL_DMA_Start_IT+0x218>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01d      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a59      	ldr	r2, [pc, #356]	@ (8002d48 <HAL_DMA_Start_IT+0x21c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d018      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a57      	ldr	r2, [pc, #348]	@ (8002d4c <HAL_DMA_Start_IT+0x220>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a56      	ldr	r2, [pc, #344]	@ (8002d50 <HAL_DMA_Start_IT+0x224>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a54      	ldr	r2, [pc, #336]	@ (8002d54 <HAL_DMA_Start_IT+0x228>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a53      	ldr	r2, [pc, #332]	@ (8002d58 <HAL_DMA_Start_IT+0x22c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a51      	ldr	r2, [pc, #324]	@ (8002d5c <HAL_DMA_Start_IT+0x230>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <HAL_DMA_Start_IT+0x100>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e007      	b.n	8002c3c <HAL_DMA_Start_IT+0x110>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f001 f906 	bl	8003e54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a34      	ldr	r2, [pc, #208]	@ (8002d20 <HAL_DMA_Start_IT+0x1f4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d04a      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a33      	ldr	r2, [pc, #204]	@ (8002d24 <HAL_DMA_Start_IT+0x1f8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d045      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a31      	ldr	r2, [pc, #196]	@ (8002d28 <HAL_DMA_Start_IT+0x1fc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d040      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a30      	ldr	r2, [pc, #192]	@ (8002d2c <HAL_DMA_Start_IT+0x200>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d03b      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2e      	ldr	r2, [pc, #184]	@ (8002d30 <HAL_DMA_Start_IT+0x204>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d036      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d34 <HAL_DMA_Start_IT+0x208>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d031      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2b      	ldr	r2, [pc, #172]	@ (8002d38 <HAL_DMA_Start_IT+0x20c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02c      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2a      	ldr	r2, [pc, #168]	@ (8002d3c <HAL_DMA_Start_IT+0x210>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d027      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a28      	ldr	r2, [pc, #160]	@ (8002d40 <HAL_DMA_Start_IT+0x214>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d022      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a27      	ldr	r2, [pc, #156]	@ (8002d44 <HAL_DMA_Start_IT+0x218>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d01d      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a25      	ldr	r2, [pc, #148]	@ (8002d48 <HAL_DMA_Start_IT+0x21c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d018      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a24      	ldr	r2, [pc, #144]	@ (8002d4c <HAL_DMA_Start_IT+0x220>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a22      	ldr	r2, [pc, #136]	@ (8002d50 <HAL_DMA_Start_IT+0x224>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00e      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a21      	ldr	r2, [pc, #132]	@ (8002d54 <HAL_DMA_Start_IT+0x228>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d58 <HAL_DMA_Start_IT+0x22c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d5c <HAL_DMA_Start_IT+0x230>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_DMA_Start_IT+0x1c0>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_DMA_Start_IT+0x1c2>
 8002cec:	2300      	movs	r3, #0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d036      	beq.n	8002d60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 021e 	bic.w	r2, r3, #30
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0216 	orr.w	r2, r2, #22
 8002d04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d03e      	beq.n	8002d8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0208 	orr.w	r2, r2, #8
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e035      	b.n	8002d8c <HAL_DMA_Start_IT+0x260>
 8002d20:	40020010 	.word	0x40020010
 8002d24:	40020028 	.word	0x40020028
 8002d28:	40020040 	.word	0x40020040
 8002d2c:	40020058 	.word	0x40020058
 8002d30:	40020070 	.word	0x40020070
 8002d34:	40020088 	.word	0x40020088
 8002d38:	400200a0 	.word	0x400200a0
 8002d3c:	400200b8 	.word	0x400200b8
 8002d40:	40020410 	.word	0x40020410
 8002d44:	40020428 	.word	0x40020428
 8002d48:	40020440 	.word	0x40020440
 8002d4c:	40020458 	.word	0x40020458
 8002d50:	40020470 	.word	0x40020470
 8002d54:	40020488 	.word	0x40020488
 8002d58:	400204a0 	.word	0x400204a0
 8002d5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 020e 	bic.w	r2, r3, #14
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 020a 	orr.w	r2, r2, #10
 8002d72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0204 	orr.w	r2, r2, #4
 8002d8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a83      	ldr	r2, [pc, #524]	@ (8002fa0 <HAL_DMA_Start_IT+0x474>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d072      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a82      	ldr	r2, [pc, #520]	@ (8002fa4 <HAL_DMA_Start_IT+0x478>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d06d      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a80      	ldr	r2, [pc, #512]	@ (8002fa8 <HAL_DMA_Start_IT+0x47c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d068      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7f      	ldr	r2, [pc, #508]	@ (8002fac <HAL_DMA_Start_IT+0x480>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d063      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a7d      	ldr	r2, [pc, #500]	@ (8002fb0 <HAL_DMA_Start_IT+0x484>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d05e      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fb4 <HAL_DMA_Start_IT+0x488>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d059      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a7a      	ldr	r2, [pc, #488]	@ (8002fb8 <HAL_DMA_Start_IT+0x48c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d054      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a79      	ldr	r2, [pc, #484]	@ (8002fbc <HAL_DMA_Start_IT+0x490>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d04f      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a77      	ldr	r2, [pc, #476]	@ (8002fc0 <HAL_DMA_Start_IT+0x494>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d04a      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a76      	ldr	r2, [pc, #472]	@ (8002fc4 <HAL_DMA_Start_IT+0x498>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d045      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a74      	ldr	r2, [pc, #464]	@ (8002fc8 <HAL_DMA_Start_IT+0x49c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d040      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a73      	ldr	r2, [pc, #460]	@ (8002fcc <HAL_DMA_Start_IT+0x4a0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d03b      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a71      	ldr	r2, [pc, #452]	@ (8002fd0 <HAL_DMA_Start_IT+0x4a4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d036      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a70      	ldr	r2, [pc, #448]	@ (8002fd4 <HAL_DMA_Start_IT+0x4a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d031      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd8 <HAL_DMA_Start_IT+0x4ac>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02c      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6d      	ldr	r2, [pc, #436]	@ (8002fdc <HAL_DMA_Start_IT+0x4b0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d027      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe0 <HAL_DMA_Start_IT+0x4b4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d022      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe4 <HAL_DMA_Start_IT+0x4b8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d01d      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a68      	ldr	r2, [pc, #416]	@ (8002fe8 <HAL_DMA_Start_IT+0x4bc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d018      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a67      	ldr	r2, [pc, #412]	@ (8002fec <HAL_DMA_Start_IT+0x4c0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a65      	ldr	r2, [pc, #404]	@ (8002ff0 <HAL_DMA_Start_IT+0x4c4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00e      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a64      	ldr	r2, [pc, #400]	@ (8002ff4 <HAL_DMA_Start_IT+0x4c8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a62      	ldr	r2, [pc, #392]	@ (8002ff8 <HAL_DMA_Start_IT+0x4cc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a61      	ldr	r2, [pc, #388]	@ (8002ffc <HAL_DMA_Start_IT+0x4d0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <HAL_DMA_Start_IT+0x354>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_DMA_Start_IT+0x356>
 8002e80:	2300      	movs	r3, #0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01a      	beq.n	8002ebc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ea2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d007      	beq.n	8002ebc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a37      	ldr	r2, [pc, #220]	@ (8002fa0 <HAL_DMA_Start_IT+0x474>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d04a      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a36      	ldr	r2, [pc, #216]	@ (8002fa4 <HAL_DMA_Start_IT+0x478>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d045      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a34      	ldr	r2, [pc, #208]	@ (8002fa8 <HAL_DMA_Start_IT+0x47c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d040      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a33      	ldr	r2, [pc, #204]	@ (8002fac <HAL_DMA_Start_IT+0x480>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d03b      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a31      	ldr	r2, [pc, #196]	@ (8002fb0 <HAL_DMA_Start_IT+0x484>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d036      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a30      	ldr	r2, [pc, #192]	@ (8002fb4 <HAL_DMA_Start_IT+0x488>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d031      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb8 <HAL_DMA_Start_IT+0x48c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d02c      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2d      	ldr	r2, [pc, #180]	@ (8002fbc <HAL_DMA_Start_IT+0x490>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d027      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc0 <HAL_DMA_Start_IT+0x494>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d022      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc4 <HAL_DMA_Start_IT+0x498>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d01d      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a28      	ldr	r2, [pc, #160]	@ (8002fc8 <HAL_DMA_Start_IT+0x49c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d018      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a27      	ldr	r2, [pc, #156]	@ (8002fcc <HAL_DMA_Start_IT+0x4a0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a25      	ldr	r2, [pc, #148]	@ (8002fd0 <HAL_DMA_Start_IT+0x4a4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00e      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a24      	ldr	r2, [pc, #144]	@ (8002fd4 <HAL_DMA_Start_IT+0x4a8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a22      	ldr	r2, [pc, #136]	@ (8002fd8 <HAL_DMA_Start_IT+0x4ac>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d004      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a21      	ldr	r2, [pc, #132]	@ (8002fdc <HAL_DMA_Start_IT+0x4b0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d108      	bne.n	8002f6e <HAL_DMA_Start_IT+0x442>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e012      	b.n	8002f94 <HAL_DMA_Start_IT+0x468>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e009      	b.n	8002f94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40020010 	.word	0x40020010
 8002fa4:	40020028 	.word	0x40020028
 8002fa8:	40020040 	.word	0x40020040
 8002fac:	40020058 	.word	0x40020058
 8002fb0:	40020070 	.word	0x40020070
 8002fb4:	40020088 	.word	0x40020088
 8002fb8:	400200a0 	.word	0x400200a0
 8002fbc:	400200b8 	.word	0x400200b8
 8002fc0:	40020410 	.word	0x40020410
 8002fc4:	40020428 	.word	0x40020428
 8002fc8:	40020440 	.word	0x40020440
 8002fcc:	40020458 	.word	0x40020458
 8002fd0:	40020470 	.word	0x40020470
 8002fd4:	40020488 	.word	0x40020488
 8002fd8:	400204a0 	.word	0x400204a0
 8002fdc:	400204b8 	.word	0x400204b8
 8002fe0:	58025408 	.word	0x58025408
 8002fe4:	5802541c 	.word	0x5802541c
 8002fe8:	58025430 	.word	0x58025430
 8002fec:	58025444 	.word	0x58025444
 8002ff0:	58025458 	.word	0x58025458
 8002ff4:	5802546c 	.word	0x5802546c
 8002ff8:	58025480 	.word	0x58025480
 8002ffc:	58025494 	.word	0x58025494

08003000 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	@ 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800300c:	4b67      	ldr	r3, [pc, #412]	@ (80031ac <HAL_DMA_IRQHandler+0x1ac>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a67      	ldr	r2, [pc, #412]	@ (80031b0 <HAL_DMA_IRQHandler+0x1b0>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0a9b      	lsrs	r3, r3, #10
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5f      	ldr	r2, [pc, #380]	@ (80031b4 <HAL_DMA_IRQHandler+0x1b4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04a      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5d      	ldr	r2, [pc, #372]	@ (80031b8 <HAL_DMA_IRQHandler+0x1b8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d045      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5c      	ldr	r2, [pc, #368]	@ (80031bc <HAL_DMA_IRQHandler+0x1bc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d040      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5a      	ldr	r2, [pc, #360]	@ (80031c0 <HAL_DMA_IRQHandler+0x1c0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d03b      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a59      	ldr	r2, [pc, #356]	@ (80031c4 <HAL_DMA_IRQHandler+0x1c4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d036      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a57      	ldr	r2, [pc, #348]	@ (80031c8 <HAL_DMA_IRQHandler+0x1c8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d031      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a56      	ldr	r2, [pc, #344]	@ (80031cc <HAL_DMA_IRQHandler+0x1cc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d02c      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a54      	ldr	r2, [pc, #336]	@ (80031d0 <HAL_DMA_IRQHandler+0x1d0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d027      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a53      	ldr	r2, [pc, #332]	@ (80031d4 <HAL_DMA_IRQHandler+0x1d4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a51      	ldr	r2, [pc, #324]	@ (80031d8 <HAL_DMA_IRQHandler+0x1d8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01d      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a50      	ldr	r2, [pc, #320]	@ (80031dc <HAL_DMA_IRQHandler+0x1dc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d018      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a4e      	ldr	r2, [pc, #312]	@ (80031e0 <HAL_DMA_IRQHandler+0x1e0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a4d      	ldr	r2, [pc, #308]	@ (80031e4 <HAL_DMA_IRQHandler+0x1e4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00e      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a4b      	ldr	r2, [pc, #300]	@ (80031e8 <HAL_DMA_IRQHandler+0x1e8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a4a      	ldr	r2, [pc, #296]	@ (80031ec <HAL_DMA_IRQHandler+0x1ec>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a48      	ldr	r2, [pc, #288]	@ (80031f0 <HAL_DMA_IRQHandler+0x1f0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_DMA_IRQHandler+0xd6>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_DMA_IRQHandler+0xd8>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 842b 	beq.w	8003934 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2208      	movs	r2, #8
 80030e8:	409a      	lsls	r2, r3
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80a2 	beq.w	8003238 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2e      	ldr	r2, [pc, #184]	@ (80031b4 <HAL_DMA_IRQHandler+0x1b4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d04a      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2d      	ldr	r2, [pc, #180]	@ (80031b8 <HAL_DMA_IRQHandler+0x1b8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d045      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2b      	ldr	r2, [pc, #172]	@ (80031bc <HAL_DMA_IRQHandler+0x1bc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d040      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2a      	ldr	r2, [pc, #168]	@ (80031c0 <HAL_DMA_IRQHandler+0x1c0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d03b      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a28      	ldr	r2, [pc, #160]	@ (80031c4 <HAL_DMA_IRQHandler+0x1c4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d036      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a27      	ldr	r2, [pc, #156]	@ (80031c8 <HAL_DMA_IRQHandler+0x1c8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d031      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a25      	ldr	r2, [pc, #148]	@ (80031cc <HAL_DMA_IRQHandler+0x1cc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02c      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a24      	ldr	r2, [pc, #144]	@ (80031d0 <HAL_DMA_IRQHandler+0x1d0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d027      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a22      	ldr	r2, [pc, #136]	@ (80031d4 <HAL_DMA_IRQHandler+0x1d4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d022      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a21      	ldr	r2, [pc, #132]	@ (80031d8 <HAL_DMA_IRQHandler+0x1d8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d01d      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1f      	ldr	r2, [pc, #124]	@ (80031dc <HAL_DMA_IRQHandler+0x1dc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d018      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1e      	ldr	r2, [pc, #120]	@ (80031e0 <HAL_DMA_IRQHandler+0x1e0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1c      	ldr	r2, [pc, #112]	@ (80031e4 <HAL_DMA_IRQHandler+0x1e4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1b      	ldr	r2, [pc, #108]	@ (80031e8 <HAL_DMA_IRQHandler+0x1e8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a19      	ldr	r2, [pc, #100]	@ (80031ec <HAL_DMA_IRQHandler+0x1ec>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a18      	ldr	r2, [pc, #96]	@ (80031f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d12f      	bne.n	80031f4 <HAL_DMA_IRQHandler+0x1f4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	e02e      	b.n	8003208 <HAL_DMA_IRQHandler+0x208>
 80031aa:	bf00      	nop
 80031ac:	24000098 	.word	0x24000098
 80031b0:	1b4e81b5 	.word	0x1b4e81b5
 80031b4:	40020010 	.word	0x40020010
 80031b8:	40020028 	.word	0x40020028
 80031bc:	40020040 	.word	0x40020040
 80031c0:	40020058 	.word	0x40020058
 80031c4:	40020070 	.word	0x40020070
 80031c8:	40020088 	.word	0x40020088
 80031cc:	400200a0 	.word	0x400200a0
 80031d0:	400200b8 	.word	0x400200b8
 80031d4:	40020410 	.word	0x40020410
 80031d8:	40020428 	.word	0x40020428
 80031dc:	40020440 	.word	0x40020440
 80031e0:	40020458 	.word	0x40020458
 80031e4:	40020470 	.word	0x40020470
 80031e8:	40020488 	.word	0x40020488
 80031ec:	400204a0 	.word	0x400204a0
 80031f0:	400204b8 	.word	0x400204b8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0204 	bic.w	r2, r2, #4
 800321a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2208      	movs	r2, #8
 8003226:	409a      	lsls	r2, r3
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d06e      	beq.n	800332c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a69      	ldr	r2, [pc, #420]	@ (80033f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d04a      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a67      	ldr	r2, [pc, #412]	@ (80033fc <HAL_DMA_IRQHandler+0x3fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d045      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a66      	ldr	r2, [pc, #408]	@ (8003400 <HAL_DMA_IRQHandler+0x400>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d040      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a64      	ldr	r2, [pc, #400]	@ (8003404 <HAL_DMA_IRQHandler+0x404>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d03b      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a63      	ldr	r2, [pc, #396]	@ (8003408 <HAL_DMA_IRQHandler+0x408>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d036      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a61      	ldr	r2, [pc, #388]	@ (800340c <HAL_DMA_IRQHandler+0x40c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a60      	ldr	r2, [pc, #384]	@ (8003410 <HAL_DMA_IRQHandler+0x410>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5e      	ldr	r2, [pc, #376]	@ (8003414 <HAL_DMA_IRQHandler+0x414>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d027      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003418 <HAL_DMA_IRQHandler+0x418>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5b      	ldr	r2, [pc, #364]	@ (800341c <HAL_DMA_IRQHandler+0x41c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003420 <HAL_DMA_IRQHandler+0x420>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d018      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a58      	ldr	r2, [pc, #352]	@ (8003424 <HAL_DMA_IRQHandler+0x424>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a57      	ldr	r2, [pc, #348]	@ (8003428 <HAL_DMA_IRQHandler+0x428>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a55      	ldr	r2, [pc, #340]	@ (800342c <HAL_DMA_IRQHandler+0x42c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a54      	ldr	r2, [pc, #336]	@ (8003430 <HAL_DMA_IRQHandler+0x430>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a52      	ldr	r2, [pc, #328]	@ (8003434 <HAL_DMA_IRQHandler+0x434>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10a      	bne.n	8003304 <HAL_DMA_IRQHandler+0x304>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e003      	b.n	800330c <HAL_DMA_IRQHandler+0x30c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2201      	movs	r2, #1
 800331a:	409a      	lsls	r2, r3
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003324:	f043 0202 	orr.w	r2, r3, #2
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2204      	movs	r2, #4
 8003336:	409a      	lsls	r2, r3
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 808f 	beq.w	8003460 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2c      	ldr	r2, [pc, #176]	@ (80033f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04a      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2a      	ldr	r2, [pc, #168]	@ (80033fc <HAL_DMA_IRQHandler+0x3fc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a29      	ldr	r2, [pc, #164]	@ (8003400 <HAL_DMA_IRQHandler+0x400>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d040      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a27      	ldr	r2, [pc, #156]	@ (8003404 <HAL_DMA_IRQHandler+0x404>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d03b      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a26      	ldr	r2, [pc, #152]	@ (8003408 <HAL_DMA_IRQHandler+0x408>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d036      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a24      	ldr	r2, [pc, #144]	@ (800340c <HAL_DMA_IRQHandler+0x40c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a23      	ldr	r2, [pc, #140]	@ (8003410 <HAL_DMA_IRQHandler+0x410>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d02c      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a21      	ldr	r2, [pc, #132]	@ (8003414 <HAL_DMA_IRQHandler+0x414>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a20      	ldr	r2, [pc, #128]	@ (8003418 <HAL_DMA_IRQHandler+0x418>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	@ (800341c <HAL_DMA_IRQHandler+0x41c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003420 <HAL_DMA_IRQHandler+0x420>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003424 <HAL_DMA_IRQHandler+0x424>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1a      	ldr	r2, [pc, #104]	@ (8003428 <HAL_DMA_IRQHandler+0x428>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a18      	ldr	r2, [pc, #96]	@ (800342c <HAL_DMA_IRQHandler+0x42c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a17      	ldr	r2, [pc, #92]	@ (8003430 <HAL_DMA_IRQHandler+0x430>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a15      	ldr	r2, [pc, #84]	@ (8003434 <HAL_DMA_IRQHandler+0x434>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d12a      	bne.n	8003438 <HAL_DMA_IRQHandler+0x438>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e023      	b.n	8003440 <HAL_DMA_IRQHandler+0x440>
 80033f8:	40020010 	.word	0x40020010
 80033fc:	40020028 	.word	0x40020028
 8003400:	40020040 	.word	0x40020040
 8003404:	40020058 	.word	0x40020058
 8003408:	40020070 	.word	0x40020070
 800340c:	40020088 	.word	0x40020088
 8003410:	400200a0 	.word	0x400200a0
 8003414:	400200b8 	.word	0x400200b8
 8003418:	40020410 	.word	0x40020410
 800341c:	40020428 	.word	0x40020428
 8003420:	40020440 	.word	0x40020440
 8003424:	40020458 	.word	0x40020458
 8003428:	40020470 	.word	0x40020470
 800342c:	40020488 	.word	0x40020488
 8003430:	400204a0 	.word	0x400204a0
 8003434:	400204b8 	.word	0x400204b8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2204      	movs	r2, #4
 800344e:	409a      	lsls	r2, r3
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2210      	movs	r2, #16
 800346a:	409a      	lsls	r2, r3
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a6 	beq.w	80035c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a85      	ldr	r2, [pc, #532]	@ (8003690 <HAL_DMA_IRQHandler+0x690>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04a      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a83      	ldr	r2, [pc, #524]	@ (8003694 <HAL_DMA_IRQHandler+0x694>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a82      	ldr	r2, [pc, #520]	@ (8003698 <HAL_DMA_IRQHandler+0x698>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a80      	ldr	r2, [pc, #512]	@ (800369c <HAL_DMA_IRQHandler+0x69c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7f      	ldr	r2, [pc, #508]	@ (80036a0 <HAL_DMA_IRQHandler+0x6a0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a7d      	ldr	r2, [pc, #500]	@ (80036a4 <HAL_DMA_IRQHandler+0x6a4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7c      	ldr	r2, [pc, #496]	@ (80036a8 <HAL_DMA_IRQHandler+0x6a8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a7a      	ldr	r2, [pc, #488]	@ (80036ac <HAL_DMA_IRQHandler+0x6ac>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a79      	ldr	r2, [pc, #484]	@ (80036b0 <HAL_DMA_IRQHandler+0x6b0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a77      	ldr	r2, [pc, #476]	@ (80036b4 <HAL_DMA_IRQHandler+0x6b4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a76      	ldr	r2, [pc, #472]	@ (80036b8 <HAL_DMA_IRQHandler+0x6b8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a74      	ldr	r2, [pc, #464]	@ (80036bc <HAL_DMA_IRQHandler+0x6bc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a73      	ldr	r2, [pc, #460]	@ (80036c0 <HAL_DMA_IRQHandler+0x6c0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a71      	ldr	r2, [pc, #452]	@ (80036c4 <HAL_DMA_IRQHandler+0x6c4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a70      	ldr	r2, [pc, #448]	@ (80036c8 <HAL_DMA_IRQHandler+0x6c8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6e      	ldr	r2, [pc, #440]	@ (80036cc <HAL_DMA_IRQHandler+0x6cc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10a      	bne.n	800352c <HAL_DMA_IRQHandler+0x52c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e009      	b.n	8003540 <HAL_DMA_IRQHandler+0x540>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03e      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2210      	movs	r2, #16
 800354e:	409a      	lsls	r2, r3
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d018      	beq.n	8003594 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d024      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
 8003580:	e01f      	b.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01b      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	e016      	b.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0208 	bic.w	r2, r2, #8
 80035b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2220      	movs	r2, #32
 80035cc:	409a      	lsls	r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8110 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003690 <HAL_DMA_IRQHandler+0x690>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d04a      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003694 <HAL_DMA_IRQHandler+0x694>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d045      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a29      	ldr	r2, [pc, #164]	@ (8003698 <HAL_DMA_IRQHandler+0x698>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d040      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a28      	ldr	r2, [pc, #160]	@ (800369c <HAL_DMA_IRQHandler+0x69c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d03b      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a26      	ldr	r2, [pc, #152]	@ (80036a0 <HAL_DMA_IRQHandler+0x6a0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d036      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a25      	ldr	r2, [pc, #148]	@ (80036a4 <HAL_DMA_IRQHandler+0x6a4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d031      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a23      	ldr	r2, [pc, #140]	@ (80036a8 <HAL_DMA_IRQHandler+0x6a8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02c      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a22      	ldr	r2, [pc, #136]	@ (80036ac <HAL_DMA_IRQHandler+0x6ac>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d027      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a20      	ldr	r2, [pc, #128]	@ (80036b0 <HAL_DMA_IRQHandler+0x6b0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1f      	ldr	r2, [pc, #124]	@ (80036b4 <HAL_DMA_IRQHandler+0x6b4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1d      	ldr	r2, [pc, #116]	@ (80036b8 <HAL_DMA_IRQHandler+0x6b8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1c      	ldr	r2, [pc, #112]	@ (80036bc <HAL_DMA_IRQHandler+0x6bc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1a      	ldr	r2, [pc, #104]	@ (80036c0 <HAL_DMA_IRQHandler+0x6c0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a19      	ldr	r2, [pc, #100]	@ (80036c4 <HAL_DMA_IRQHandler+0x6c4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a17      	ldr	r2, [pc, #92]	@ (80036c8 <HAL_DMA_IRQHandler+0x6c8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a16      	ldr	r2, [pc, #88]	@ (80036cc <HAL_DMA_IRQHandler+0x6cc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d12b      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x6d0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e02a      	b.n	80036e4 <HAL_DMA_IRQHandler+0x6e4>
 800368e:	bf00      	nop
 8003690:	40020010 	.word	0x40020010
 8003694:	40020028 	.word	0x40020028
 8003698:	40020040 	.word	0x40020040
 800369c:	40020058 	.word	0x40020058
 80036a0:	40020070 	.word	0x40020070
 80036a4:	40020088 	.word	0x40020088
 80036a8:	400200a0 	.word	0x400200a0
 80036ac:	400200b8 	.word	0x400200b8
 80036b0:	40020410 	.word	0x40020410
 80036b4:	40020428 	.word	0x40020428
 80036b8:	40020440 	.word	0x40020440
 80036bc:	40020458 	.word	0x40020458
 80036c0:	40020470 	.word	0x40020470
 80036c4:	40020488 	.word	0x40020488
 80036c8:	400204a0 	.word	0x400204a0
 80036cc:	400204b8 	.word	0x400204b8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8087 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2220      	movs	r2, #32
 80036f4:	409a      	lsls	r2, r3
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b04      	cmp	r3, #4
 8003704:	d139      	bne.n	800377a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0216 	bic.w	r2, r2, #22
 8003714:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003724:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_DMA_IRQHandler+0x736>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0208 	bic.w	r2, r2, #8
 8003744:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	223f      	movs	r2, #63	@ 0x3f
 8003750:	409a      	lsls	r2, r3
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 834a 	beq.w	8003e04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
          }
          return;
 8003778:	e344      	b.n	8003e04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d018      	beq.n	80037ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02c      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
 80037a6:	e027      	b.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e01e      	b.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0210 	bic.w	r2, r2, #16
 80037d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8306 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8088 	beq.w	8003920 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2204      	movs	r2, #4
 8003814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a08 <HAL_DMA_IRQHandler+0xa08>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d04a      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a79      	ldr	r2, [pc, #484]	@ (8003a0c <HAL_DMA_IRQHandler+0xa0c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d045      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a77      	ldr	r2, [pc, #476]	@ (8003a10 <HAL_DMA_IRQHandler+0xa10>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d040      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a76      	ldr	r2, [pc, #472]	@ (8003a14 <HAL_DMA_IRQHandler+0xa14>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d03b      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a74      	ldr	r2, [pc, #464]	@ (8003a18 <HAL_DMA_IRQHandler+0xa18>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d036      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a73      	ldr	r2, [pc, #460]	@ (8003a1c <HAL_DMA_IRQHandler+0xa1c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d031      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a71      	ldr	r2, [pc, #452]	@ (8003a20 <HAL_DMA_IRQHandler+0xa20>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02c      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a70      	ldr	r2, [pc, #448]	@ (8003a24 <HAL_DMA_IRQHandler+0xa24>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d027      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6e      	ldr	r2, [pc, #440]	@ (8003a28 <HAL_DMA_IRQHandler+0xa28>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d022      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6d      	ldr	r2, [pc, #436]	@ (8003a2c <HAL_DMA_IRQHandler+0xa2c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d01d      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6b      	ldr	r2, [pc, #428]	@ (8003a30 <HAL_DMA_IRQHandler+0xa30>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d018      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6a      	ldr	r2, [pc, #424]	@ (8003a34 <HAL_DMA_IRQHandler+0xa34>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <HAL_DMA_IRQHandler+0xa38>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a67      	ldr	r2, [pc, #412]	@ (8003a3c <HAL_DMA_IRQHandler+0xa3c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <HAL_DMA_IRQHandler+0xa40>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a64      	ldr	r2, [pc, #400]	@ (8003a44 <HAL_DMA_IRQHandler+0xa44>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <HAL_DMA_IRQHandler+0x8ca>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e007      	b.n	80038da <HAL_DMA_IRQHandler+0x8da>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0201 	bic.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3301      	adds	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d307      	bcc.n	80038f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f2      	bne.n	80038da <HAL_DMA_IRQHandler+0x8da>
 80038f4:	e000      	b.n	80038f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2203      	movs	r2, #3
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800390e:	e003      	b.n	8003918 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8272 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e26c      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a43      	ldr	r2, [pc, #268]	@ (8003a48 <HAL_DMA_IRQHandler+0xa48>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d022      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a42      	ldr	r2, [pc, #264]	@ (8003a4c <HAL_DMA_IRQHandler+0xa4c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d01d      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a40      	ldr	r2, [pc, #256]	@ (8003a50 <HAL_DMA_IRQHandler+0xa50>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d018      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3f      	ldr	r2, [pc, #252]	@ (8003a54 <HAL_DMA_IRQHandler+0xa54>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3d      	ldr	r2, [pc, #244]	@ (8003a58 <HAL_DMA_IRQHandler+0xa58>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a3c      	ldr	r2, [pc, #240]	@ (8003a5c <HAL_DMA_IRQHandler+0xa5c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a3a      	ldr	r2, [pc, #232]	@ (8003a60 <HAL_DMA_IRQHandler+0xa60>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a39      	ldr	r2, [pc, #228]	@ (8003a64 <HAL_DMA_IRQHandler+0xa64>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_DMA_IRQHandler+0x988>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_DMA_IRQHandler+0x98a>
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 823f 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2204      	movs	r2, #4
 80039a2:	409a      	lsls	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80cd 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xb48>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80c7 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2204      	movs	r2, #4
 80039c4:	409a      	lsls	r2, r3
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d049      	beq.n	8003a68 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8210 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f0:	e20a      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8206 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a04:	e200      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe08>
 8003a06:	bf00      	nop
 8003a08:	40020010 	.word	0x40020010
 8003a0c:	40020028 	.word	0x40020028
 8003a10:	40020040 	.word	0x40020040
 8003a14:	40020058 	.word	0x40020058
 8003a18:	40020070 	.word	0x40020070
 8003a1c:	40020088 	.word	0x40020088
 8003a20:	400200a0 	.word	0x400200a0
 8003a24:	400200b8 	.word	0x400200b8
 8003a28:	40020410 	.word	0x40020410
 8003a2c:	40020428 	.word	0x40020428
 8003a30:	40020440 	.word	0x40020440
 8003a34:	40020458 	.word	0x40020458
 8003a38:	40020470 	.word	0x40020470
 8003a3c:	40020488 	.word	0x40020488
 8003a40:	400204a0 	.word	0x400204a0
 8003a44:	400204b8 	.word	0x400204b8
 8003a48:	58025408 	.word	0x58025408
 8003a4c:	5802541c 	.word	0x5802541c
 8003a50:	58025430 	.word	0x58025430
 8003a54:	58025444 	.word	0x58025444
 8003a58:	58025458 	.word	0x58025458
 8003a5c:	5802546c 	.word	0x5802546c
 8003a60:	58025480 	.word	0x58025480
 8003a64:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d160      	bne.n	8003b34 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7f      	ldr	r2, [pc, #508]	@ (8003c74 <HAL_DMA_IRQHandler+0xc74>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d04a      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7d      	ldr	r2, [pc, #500]	@ (8003c78 <HAL_DMA_IRQHandler+0xc78>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d045      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c7c <HAL_DMA_IRQHandler+0xc7c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d040      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a7a      	ldr	r2, [pc, #488]	@ (8003c80 <HAL_DMA_IRQHandler+0xc80>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d03b      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a79      	ldr	r2, [pc, #484]	@ (8003c84 <HAL_DMA_IRQHandler+0xc84>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d036      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a77      	ldr	r2, [pc, #476]	@ (8003c88 <HAL_DMA_IRQHandler+0xc88>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d031      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a76      	ldr	r2, [pc, #472]	@ (8003c8c <HAL_DMA_IRQHandler+0xc8c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d02c      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a74      	ldr	r2, [pc, #464]	@ (8003c90 <HAL_DMA_IRQHandler+0xc90>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d027      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a73      	ldr	r2, [pc, #460]	@ (8003c94 <HAL_DMA_IRQHandler+0xc94>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a71      	ldr	r2, [pc, #452]	@ (8003c98 <HAL_DMA_IRQHandler+0xc98>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01d      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a70      	ldr	r2, [pc, #448]	@ (8003c9c <HAL_DMA_IRQHandler+0xc9c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d018      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca0 <HAL_DMA_IRQHandler+0xca0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6d      	ldr	r2, [pc, #436]	@ (8003ca4 <HAL_DMA_IRQHandler+0xca4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a6b      	ldr	r2, [pc, #428]	@ (8003ca8 <HAL_DMA_IRQHandler+0xca8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6a      	ldr	r2, [pc, #424]	@ (8003cac <HAL_DMA_IRQHandler+0xcac>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a68      	ldr	r2, [pc, #416]	@ (8003cb0 <HAL_DMA_IRQHandler+0xcb0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <HAL_DMA_IRQHandler+0xb24>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0208 	bic.w	r2, r2, #8
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e007      	b.n	8003b34 <HAL_DMA_IRQHandler+0xb34>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8165 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b46:	e15f      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2202      	movs	r2, #2
 8003b52:	409a      	lsls	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80c5 	beq.w	8003ce8 <HAL_DMA_IRQHandler+0xce8>
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80bf 	beq.w	8003ce8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	2202      	movs	r2, #2
 8003b74:	409a      	lsls	r2, r3
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d018      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 813a 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba0:	e134      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8130 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb4:	e12a      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 8089 	bne.w	8003cd4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c74 <HAL_DMA_IRQHandler+0xc74>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d04a      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	@ (8003c78 <HAL_DMA_IRQHandler+0xc78>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d045      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a28      	ldr	r2, [pc, #160]	@ (8003c7c <HAL_DMA_IRQHandler+0xc7c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d040      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a26      	ldr	r2, [pc, #152]	@ (8003c80 <HAL_DMA_IRQHandler+0xc80>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d03b      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a25      	ldr	r2, [pc, #148]	@ (8003c84 <HAL_DMA_IRQHandler+0xc84>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d036      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	@ (8003c88 <HAL_DMA_IRQHandler+0xc88>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <HAL_DMA_IRQHandler+0xc8c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d02c      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	@ (8003c90 <HAL_DMA_IRQHandler+0xc90>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d027      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1f      	ldr	r2, [pc, #124]	@ (8003c94 <HAL_DMA_IRQHandler+0xc94>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	@ (8003c98 <HAL_DMA_IRQHandler+0xc98>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c9c <HAL_DMA_IRQHandler+0xc9c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca0 <HAL_DMA_IRQHandler+0xca0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a19      	ldr	r2, [pc, #100]	@ (8003ca4 <HAL_DMA_IRQHandler+0xca4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a17      	ldr	r2, [pc, #92]	@ (8003ca8 <HAL_DMA_IRQHandler+0xca8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a16      	ldr	r2, [pc, #88]	@ (8003cac <HAL_DMA_IRQHandler+0xcac>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a14      	ldr	r2, [pc, #80]	@ (8003cb0 <HAL_DMA_IRQHandler+0xcb0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d128      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0xcb4>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0214 	bic.w	r2, r2, #20
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	e027      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xcc4>
 8003c74:	40020010 	.word	0x40020010
 8003c78:	40020028 	.word	0x40020028
 8003c7c:	40020040 	.word	0x40020040
 8003c80:	40020058 	.word	0x40020058
 8003c84:	40020070 	.word	0x40020070
 8003c88:	40020088 	.word	0x40020088
 8003c8c:	400200a0 	.word	0x400200a0
 8003c90:	400200b8 	.word	0x400200b8
 8003c94:	40020410 	.word	0x40020410
 8003c98:	40020428 	.word	0x40020428
 8003c9c:	40020440 	.word	0x40020440
 8003ca0:	40020458 	.word	0x40020458
 8003ca4:	40020470 	.word	0x40020470
 8003ca8:	40020488 	.word	0x40020488
 8003cac:	400204a0 	.word	0x400204a0
 8003cb0:	400204b8 	.word	0x400204b8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 020a 	bic.w	r2, r2, #10
 8003cc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8097 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce6:	e091      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8088 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8082 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	@ (8003e14 <HAL_DMA_IRQHandler+0xe14>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d04a      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3f      	ldr	r2, [pc, #252]	@ (8003e18 <HAL_DMA_IRQHandler+0xe18>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d045      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3e      	ldr	r2, [pc, #248]	@ (8003e1c <HAL_DMA_IRQHandler+0xe1c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d040      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e20 <HAL_DMA_IRQHandler+0xe20>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d03b      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a3b      	ldr	r2, [pc, #236]	@ (8003e24 <HAL_DMA_IRQHandler+0xe24>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d036      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a39      	ldr	r2, [pc, #228]	@ (8003e28 <HAL_DMA_IRQHandler+0xe28>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d031      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a38      	ldr	r2, [pc, #224]	@ (8003e2c <HAL_DMA_IRQHandler+0xe2c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d02c      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a36      	ldr	r2, [pc, #216]	@ (8003e30 <HAL_DMA_IRQHandler+0xe30>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d027      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a35      	ldr	r2, [pc, #212]	@ (8003e34 <HAL_DMA_IRQHandler+0xe34>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a33      	ldr	r2, [pc, #204]	@ (8003e38 <HAL_DMA_IRQHandler+0xe38>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a32      	ldr	r2, [pc, #200]	@ (8003e3c <HAL_DMA_IRQHandler+0xe3c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a30      	ldr	r2, [pc, #192]	@ (8003e40 <HAL_DMA_IRQHandler+0xe40>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2f      	ldr	r2, [pc, #188]	@ (8003e44 <HAL_DMA_IRQHandler+0xe44>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2d      	ldr	r2, [pc, #180]	@ (8003e48 <HAL_DMA_IRQHandler+0xe48>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e4c <HAL_DMA_IRQHandler+0xe4c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e50 <HAL_DMA_IRQHandler+0xe50>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <HAL_DMA_IRQHandler+0xdbc>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 021c 	bic.w	r2, r2, #28
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e007      	b.n	8003dcc <HAL_DMA_IRQHandler+0xdcc>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 020e 	bic.w	r2, r2, #14
 8003dca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
 8003e02:	e004      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e04:	bf00      	nop
 8003e06:	e002      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e08:	bf00      	nop
 8003e0a:	e000      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e0e:	3728      	adds	r7, #40	@ 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8

08003e54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7f      	ldr	r2, [pc, #508]	@ (8004070 <DMA_SetConfig+0x21c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d072      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a7d      	ldr	r2, [pc, #500]	@ (8004074 <DMA_SetConfig+0x220>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d06d      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7c      	ldr	r2, [pc, #496]	@ (8004078 <DMA_SetConfig+0x224>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d068      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a7a      	ldr	r2, [pc, #488]	@ (800407c <DMA_SetConfig+0x228>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d063      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a79      	ldr	r2, [pc, #484]	@ (8004080 <DMA_SetConfig+0x22c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d05e      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a77      	ldr	r2, [pc, #476]	@ (8004084 <DMA_SetConfig+0x230>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d059      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a76      	ldr	r2, [pc, #472]	@ (8004088 <DMA_SetConfig+0x234>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d054      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a74      	ldr	r2, [pc, #464]	@ (800408c <DMA_SetConfig+0x238>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d04f      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a73      	ldr	r2, [pc, #460]	@ (8004090 <DMA_SetConfig+0x23c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d04a      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a71      	ldr	r2, [pc, #452]	@ (8004094 <DMA_SetConfig+0x240>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d045      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a70      	ldr	r2, [pc, #448]	@ (8004098 <DMA_SetConfig+0x244>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d040      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800409c <DMA_SetConfig+0x248>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d03b      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a6d      	ldr	r2, [pc, #436]	@ (80040a0 <DMA_SetConfig+0x24c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d036      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80040a4 <DMA_SetConfig+0x250>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d031      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a6a      	ldr	r2, [pc, #424]	@ (80040a8 <DMA_SetConfig+0x254>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d02c      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a68      	ldr	r2, [pc, #416]	@ (80040ac <DMA_SetConfig+0x258>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d027      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a67      	ldr	r2, [pc, #412]	@ (80040b0 <DMA_SetConfig+0x25c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d022      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a65      	ldr	r2, [pc, #404]	@ (80040b4 <DMA_SetConfig+0x260>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01d      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a64      	ldr	r2, [pc, #400]	@ (80040b8 <DMA_SetConfig+0x264>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d018      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a62      	ldr	r2, [pc, #392]	@ (80040bc <DMA_SetConfig+0x268>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a61      	ldr	r2, [pc, #388]	@ (80040c0 <DMA_SetConfig+0x26c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5f      	ldr	r2, [pc, #380]	@ (80040c4 <DMA_SetConfig+0x270>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a5e      	ldr	r2, [pc, #376]	@ (80040c8 <DMA_SetConfig+0x274>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5c      	ldr	r2, [pc, #368]	@ (80040cc <DMA_SetConfig+0x278>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <DMA_SetConfig+0x10e>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <DMA_SetConfig+0x110>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a39      	ldr	r2, [pc, #228]	@ (8004070 <DMA_SetConfig+0x21c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d04a      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a38      	ldr	r2, [pc, #224]	@ (8004074 <DMA_SetConfig+0x220>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d045      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a36      	ldr	r2, [pc, #216]	@ (8004078 <DMA_SetConfig+0x224>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d040      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a35      	ldr	r2, [pc, #212]	@ (800407c <DMA_SetConfig+0x228>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d03b      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a33      	ldr	r2, [pc, #204]	@ (8004080 <DMA_SetConfig+0x22c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d036      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a32      	ldr	r2, [pc, #200]	@ (8004084 <DMA_SetConfig+0x230>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d031      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a30      	ldr	r2, [pc, #192]	@ (8004088 <DMA_SetConfig+0x234>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d02c      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2f      	ldr	r2, [pc, #188]	@ (800408c <DMA_SetConfig+0x238>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d027      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004090 <DMA_SetConfig+0x23c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d022      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8004094 <DMA_SetConfig+0x240>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d01d      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2a      	ldr	r2, [pc, #168]	@ (8004098 <DMA_SetConfig+0x244>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d018      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a29      	ldr	r2, [pc, #164]	@ (800409c <DMA_SetConfig+0x248>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a27      	ldr	r2, [pc, #156]	@ (80040a0 <DMA_SetConfig+0x24c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a26      	ldr	r2, [pc, #152]	@ (80040a4 <DMA_SetConfig+0x250>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a24      	ldr	r2, [pc, #144]	@ (80040a8 <DMA_SetConfig+0x254>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a23      	ldr	r2, [pc, #140]	@ (80040ac <DMA_SetConfig+0x258>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <DMA_SetConfig+0x1d4>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <DMA_SetConfig+0x1d6>
 8004028:	2300      	movs	r3, #0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d059      	beq.n	80040e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	223f      	movs	r2, #63	@ 0x3f
 8004038:	409a      	lsls	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800404c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b40      	cmp	r3, #64	@ 0x40
 800405c:	d138      	bne.n	80040d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800406e:	e086      	b.n	800417e <DMA_SetConfig+0x32a>
 8004070:	40020010 	.word	0x40020010
 8004074:	40020028 	.word	0x40020028
 8004078:	40020040 	.word	0x40020040
 800407c:	40020058 	.word	0x40020058
 8004080:	40020070 	.word	0x40020070
 8004084:	40020088 	.word	0x40020088
 8004088:	400200a0 	.word	0x400200a0
 800408c:	400200b8 	.word	0x400200b8
 8004090:	40020410 	.word	0x40020410
 8004094:	40020428 	.word	0x40020428
 8004098:	40020440 	.word	0x40020440
 800409c:	40020458 	.word	0x40020458
 80040a0:	40020470 	.word	0x40020470
 80040a4:	40020488 	.word	0x40020488
 80040a8:	400204a0 	.word	0x400204a0
 80040ac:	400204b8 	.word	0x400204b8
 80040b0:	58025408 	.word	0x58025408
 80040b4:	5802541c 	.word	0x5802541c
 80040b8:	58025430 	.word	0x58025430
 80040bc:	58025444 	.word	0x58025444
 80040c0:	58025458 	.word	0x58025458
 80040c4:	5802546c 	.word	0x5802546c
 80040c8:	58025480 	.word	0x58025480
 80040cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]
}
 80040e0:	e04d      	b.n	800417e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a29      	ldr	r2, [pc, #164]	@ (800418c <DMA_SetConfig+0x338>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <DMA_SetConfig+0x2de>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a27      	ldr	r2, [pc, #156]	@ (8004190 <DMA_SetConfig+0x33c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01d      	beq.n	8004132 <DMA_SetConfig+0x2de>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a26      	ldr	r2, [pc, #152]	@ (8004194 <DMA_SetConfig+0x340>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <DMA_SetConfig+0x2de>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a24      	ldr	r2, [pc, #144]	@ (8004198 <DMA_SetConfig+0x344>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <DMA_SetConfig+0x2de>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a23      	ldr	r2, [pc, #140]	@ (800419c <DMA_SetConfig+0x348>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <DMA_SetConfig+0x2de>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a21      	ldr	r2, [pc, #132]	@ (80041a0 <DMA_SetConfig+0x34c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <DMA_SetConfig+0x2de>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a20      	ldr	r2, [pc, #128]	@ (80041a4 <DMA_SetConfig+0x350>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <DMA_SetConfig+0x2de>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <DMA_SetConfig+0x354>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <DMA_SetConfig+0x2e2>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <DMA_SetConfig+0x2e4>
 8004136:	2300      	movs	r3, #0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2201      	movs	r2, #1
 8004146:	409a      	lsls	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b40      	cmp	r3, #64	@ 0x40
 800415a:	d108      	bne.n	800416e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	60da      	str	r2, [r3, #12]
}
 800416c:	e007      	b.n	800417e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	60da      	str	r2, [r3, #12]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	58025408 	.word	0x58025408
 8004190:	5802541c 	.word	0x5802541c
 8004194:	58025430 	.word	0x58025430
 8004198:	58025444 	.word	0x58025444
 800419c:	58025458 	.word	0x58025458
 80041a0:	5802546c 	.word	0x5802546c
 80041a4:	58025480 	.word	0x58025480
 80041a8:	58025494 	.word	0x58025494

080041ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a42      	ldr	r2, [pc, #264]	@ (80042c4 <DMA_CalcBaseAndBitshift+0x118>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d04a      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a41      	ldr	r2, [pc, #260]	@ (80042c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d045      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a3f      	ldr	r2, [pc, #252]	@ (80042cc <DMA_CalcBaseAndBitshift+0x120>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d040      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a3e      	ldr	r2, [pc, #248]	@ (80042d0 <DMA_CalcBaseAndBitshift+0x124>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d03b      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a3c      	ldr	r2, [pc, #240]	@ (80042d4 <DMA_CalcBaseAndBitshift+0x128>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d036      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a3b      	ldr	r2, [pc, #236]	@ (80042d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d031      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a39      	ldr	r2, [pc, #228]	@ (80042dc <DMA_CalcBaseAndBitshift+0x130>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d02c      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a38      	ldr	r2, [pc, #224]	@ (80042e0 <DMA_CalcBaseAndBitshift+0x134>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d027      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a36      	ldr	r2, [pc, #216]	@ (80042e4 <DMA_CalcBaseAndBitshift+0x138>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d022      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a35      	ldr	r2, [pc, #212]	@ (80042e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d01d      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a33      	ldr	r2, [pc, #204]	@ (80042ec <DMA_CalcBaseAndBitshift+0x140>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d018      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a32      	ldr	r2, [pc, #200]	@ (80042f0 <DMA_CalcBaseAndBitshift+0x144>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a30      	ldr	r2, [pc, #192]	@ (80042f4 <DMA_CalcBaseAndBitshift+0x148>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2f      	ldr	r2, [pc, #188]	@ (80042f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d009      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2d      	ldr	r2, [pc, #180]	@ (80042fc <DMA_CalcBaseAndBitshift+0x150>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2c      	ldr	r2, [pc, #176]	@ (8004300 <DMA_CalcBaseAndBitshift+0x154>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <DMA_CalcBaseAndBitshift+0xac>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <DMA_CalcBaseAndBitshift+0xae>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d024      	beq.n	80042a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3b10      	subs	r3, #16
 8004266:	4a27      	ldr	r2, [pc, #156]	@ (8004304 <DMA_CalcBaseAndBitshift+0x158>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	4a24      	ldr	r2, [pc, #144]	@ (8004308 <DMA_CalcBaseAndBitshift+0x15c>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d908      	bls.n	8004298 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	4b1f      	ldr	r3, [pc, #124]	@ (800430c <DMA_CalcBaseAndBitshift+0x160>)
 800428e:	4013      	ands	r3, r2
 8004290:	1d1a      	adds	r2, r3, #4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	659a      	str	r2, [r3, #88]	@ 0x58
 8004296:	e00d      	b.n	80042b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	4b1b      	ldr	r3, [pc, #108]	@ (800430c <DMA_CalcBaseAndBitshift+0x160>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a6:	e005      	b.n	80042b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40020010 	.word	0x40020010
 80042c8:	40020028 	.word	0x40020028
 80042cc:	40020040 	.word	0x40020040
 80042d0:	40020058 	.word	0x40020058
 80042d4:	40020070 	.word	0x40020070
 80042d8:	40020088 	.word	0x40020088
 80042dc:	400200a0 	.word	0x400200a0
 80042e0:	400200b8 	.word	0x400200b8
 80042e4:	40020410 	.word	0x40020410
 80042e8:	40020428 	.word	0x40020428
 80042ec:	40020440 	.word	0x40020440
 80042f0:	40020458 	.word	0x40020458
 80042f4:	40020470 	.word	0x40020470
 80042f8:	40020488 	.word	0x40020488
 80042fc:	400204a0 	.word	0x400204a0
 8004300:	400204b8 	.word	0x400204b8
 8004304:	aaaaaaab 	.word	0xaaaaaaab
 8004308:	08015a74 	.word	0x08015a74
 800430c:	fffffc00 	.word	0xfffffc00

08004310 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d120      	bne.n	8004366 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	2b03      	cmp	r3, #3
 800432a:	d858      	bhi.n	80043de <DMA_CheckFifoParam+0xce>
 800432c:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <DMA_CheckFifoParam+0x24>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004345 	.word	0x08004345
 8004338:	08004357 	.word	0x08004357
 800433c:	08004345 	.word	0x08004345
 8004340:	080043df 	.word	0x080043df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d048      	beq.n	80043e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004354:	e045      	b.n	80043e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800435e:	d142      	bne.n	80043e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004364:	e03f      	b.n	80043e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800436e:	d123      	bne.n	80043b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	2b03      	cmp	r3, #3
 8004376:	d838      	bhi.n	80043ea <DMA_CheckFifoParam+0xda>
 8004378:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <DMA_CheckFifoParam+0x70>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004391 	.word	0x08004391
 8004384:	08004397 	.word	0x08004397
 8004388:	08004391 	.word	0x08004391
 800438c:	080043a9 	.word	0x080043a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
        break;
 8004394:	e030      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d025      	beq.n	80043ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043a6:	e022      	b.n	80043ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043b0:	d11f      	bne.n	80043f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043b6:	e01c      	b.n	80043f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d902      	bls.n	80043c6 <DMA_CheckFifoParam+0xb6>
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d003      	beq.n	80043cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043c4:	e018      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
        break;
 80043ca:	e015      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
    break;
 80043dc:	e00b      	b.n	80043f6 <DMA_CheckFifoParam+0xe6>
        break;
 80043de:	bf00      	nop
 80043e0:	e00a      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043e2:	bf00      	nop
 80043e4:	e008      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043e6:	bf00      	nop
 80043e8:	e006      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043ea:	bf00      	nop
 80043ec:	e004      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
    break;
 80043f6:	bf00      	nop
    }
  }

  return status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop

08004408 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a38      	ldr	r2, [pc, #224]	@ (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a36      	ldr	r2, [pc, #216]	@ (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01d      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a35      	ldr	r2, [pc, #212]	@ (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d018      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a33      	ldr	r2, [pc, #204]	@ (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a32      	ldr	r2, [pc, #200]	@ (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a30      	ldr	r2, [pc, #192]	@ (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2f      	ldr	r2, [pc, #188]	@ (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2d      	ldr	r2, [pc, #180]	@ (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d101      	bne.n	800446a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01a      	beq.n	80044a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3b08      	subs	r3, #8
 8004478:	4a28      	ldr	r2, [pc, #160]	@ (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4b26      	ldr	r3, [pc, #152]	@ (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a24      	ldr	r2, [pc, #144]	@ (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004494:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2201      	movs	r2, #1
 800449e:	409a      	lsls	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044a4:	e024      	b.n	80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	3b10      	subs	r3, #16
 80044ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	091b      	lsrs	r3, r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	@ (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d806      	bhi.n	80044ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d902      	bls.n	80044ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3308      	adds	r3, #8
 80044cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4b18      	ldr	r3, [pc, #96]	@ (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	461a      	mov	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a16      	ldr	r2, [pc, #88]	@ (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2201      	movs	r2, #1
 80044ea:	409a      	lsls	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	58025408 	.word	0x58025408
 8004500:	5802541c 	.word	0x5802541c
 8004504:	58025430 	.word	0x58025430
 8004508:	58025444 	.word	0x58025444
 800450c:	58025458 	.word	0x58025458
 8004510:	5802546c 	.word	0x5802546c
 8004514:	58025480 	.word	0x58025480
 8004518:	58025494 	.word	0x58025494
 800451c:	cccccccd 	.word	0xcccccccd
 8004520:	16009600 	.word	0x16009600
 8004524:	58025880 	.word	0x58025880
 8004528:	aaaaaaab 	.word	0xaaaaaaab
 800452c:	400204b8 	.word	0x400204b8
 8004530:	4002040f 	.word	0x4002040f
 8004534:	10008200 	.word	0x10008200
 8004538:	40020880 	.word	0x40020880

0800453c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d04a      	beq.n	80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d847      	bhi.n	80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a25      	ldr	r2, [pc, #148]	@ (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d022      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a24      	ldr	r2, [pc, #144]	@ (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d01d      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a22      	ldr	r2, [pc, #136]	@ (80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a21      	ldr	r2, [pc, #132]	@ (8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1f      	ldr	r2, [pc, #124]	@ (8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1c      	ldr	r2, [pc, #112]	@ (800460c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d101      	bne.n	80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045ac:	2300      	movs	r3, #0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4b17      	ldr	r3, [pc, #92]	@ (8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a15      	ldr	r2, [pc, #84]	@ (8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80045c6:	e009      	b.n	80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4b14      	ldr	r3, [pc, #80]	@ (800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	461a      	mov	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a11      	ldr	r2, [pc, #68]	@ (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045da:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3b01      	subs	r3, #1
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	58025408 	.word	0x58025408
 80045f8:	5802541c 	.word	0x5802541c
 80045fc:	58025430 	.word	0x58025430
 8004600:	58025444 	.word	0x58025444
 8004604:	58025458 	.word	0x58025458
 8004608:	5802546c 	.word	0x5802546c
 800460c:	58025480 	.word	0x58025480
 8004610:	58025494 	.word	0x58025494
 8004614:	1600963f 	.word	0x1600963f
 8004618:	58025940 	.word	0x58025940
 800461c:	1000823f 	.word	0x1000823f
 8004620:	40020940 	.word	0x40020940

08004624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	@ 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004632:	4b89      	ldr	r3, [pc, #548]	@ (8004858 <HAL_GPIO_Init+0x234>)
 8004634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004636:	e194      	b.n	8004962 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8186 	beq.w	800495c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d005      	beq.n	8004668 <HAL_GPIO_Init+0x44>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d130      	bne.n	80046ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	2203      	movs	r2, #3
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800469e:	2201      	movs	r2, #1
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0201 	and.w	r2, r3, #1
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d017      	beq.n	8004706 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	2203      	movs	r2, #3
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d123      	bne.n	800475a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	08da      	lsrs	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3208      	adds	r2, #8
 800471a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	220f      	movs	r2, #15
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	08da      	lsrs	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3208      	adds	r2, #8
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	2203      	movs	r2, #3
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0203 	and.w	r2, r3, #3
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80e0 	beq.w	800495c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479c:	4b2f      	ldr	r3, [pc, #188]	@ (800485c <HAL_GPIO_Init+0x238>)
 800479e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047a2:	4a2e      	ldr	r2, [pc, #184]	@ (800485c <HAL_GPIO_Init+0x238>)
 80047a4:	f043 0302 	orr.w	r3, r3, #2
 80047a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80047ac:	4b2b      	ldr	r3, [pc, #172]	@ (800485c <HAL_GPIO_Init+0x238>)
 80047ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ba:	4a29      	ldr	r2, [pc, #164]	@ (8004860 <HAL_GPIO_Init+0x23c>)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	3302      	adds	r3, #2
 80047c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	220f      	movs	r2, #15
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43db      	mvns	r3, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4013      	ands	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a20      	ldr	r2, [pc, #128]	@ (8004864 <HAL_GPIO_Init+0x240>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d052      	beq.n	800488c <HAL_GPIO_Init+0x268>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004868 <HAL_GPIO_Init+0x244>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d031      	beq.n	8004852 <HAL_GPIO_Init+0x22e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a1e      	ldr	r2, [pc, #120]	@ (800486c <HAL_GPIO_Init+0x248>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d02b      	beq.n	800484e <HAL_GPIO_Init+0x22a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <HAL_GPIO_Init+0x24c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d025      	beq.n	800484a <HAL_GPIO_Init+0x226>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1c      	ldr	r2, [pc, #112]	@ (8004874 <HAL_GPIO_Init+0x250>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01f      	beq.n	8004846 <HAL_GPIO_Init+0x222>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1b      	ldr	r2, [pc, #108]	@ (8004878 <HAL_GPIO_Init+0x254>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d019      	beq.n	8004842 <HAL_GPIO_Init+0x21e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1a      	ldr	r2, [pc, #104]	@ (800487c <HAL_GPIO_Init+0x258>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_GPIO_Init+0x21a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a19      	ldr	r2, [pc, #100]	@ (8004880 <HAL_GPIO_Init+0x25c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00d      	beq.n	800483a <HAL_GPIO_Init+0x216>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a18      	ldr	r2, [pc, #96]	@ (8004884 <HAL_GPIO_Init+0x260>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <HAL_GPIO_Init+0x212>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a17      	ldr	r2, [pc, #92]	@ (8004888 <HAL_GPIO_Init+0x264>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <HAL_GPIO_Init+0x20e>
 800482e:	2309      	movs	r3, #9
 8004830:	e02d      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004832:	230a      	movs	r3, #10
 8004834:	e02b      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004836:	2308      	movs	r3, #8
 8004838:	e029      	b.n	800488e <HAL_GPIO_Init+0x26a>
 800483a:	2307      	movs	r3, #7
 800483c:	e027      	b.n	800488e <HAL_GPIO_Init+0x26a>
 800483e:	2306      	movs	r3, #6
 8004840:	e025      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004842:	2305      	movs	r3, #5
 8004844:	e023      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004846:	2304      	movs	r3, #4
 8004848:	e021      	b.n	800488e <HAL_GPIO_Init+0x26a>
 800484a:	2303      	movs	r3, #3
 800484c:	e01f      	b.n	800488e <HAL_GPIO_Init+0x26a>
 800484e:	2302      	movs	r3, #2
 8004850:	e01d      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004852:	2301      	movs	r3, #1
 8004854:	e01b      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004856:	bf00      	nop
 8004858:	58000080 	.word	0x58000080
 800485c:	58024400 	.word	0x58024400
 8004860:	58000400 	.word	0x58000400
 8004864:	58020000 	.word	0x58020000
 8004868:	58020400 	.word	0x58020400
 800486c:	58020800 	.word	0x58020800
 8004870:	58020c00 	.word	0x58020c00
 8004874:	58021000 	.word	0x58021000
 8004878:	58021400 	.word	0x58021400
 800487c:	58021800 	.word	0x58021800
 8004880:	58021c00 	.word	0x58021c00
 8004884:	58022000 	.word	0x58022000
 8004888:	58022400 	.word	0x58022400
 800488c:	2300      	movs	r3, #0
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	f002 0203 	and.w	r2, r2, #3
 8004894:	0092      	lsls	r2, r2, #2
 8004896:	4093      	lsls	r3, r2
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800489e:	4938      	ldr	r1, [pc, #224]	@ (8004980 <HAL_GPIO_Init+0x35c>)
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	3302      	adds	r3, #2
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	3301      	adds	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	f47f ae63 	bne.w	8004638 <HAL_GPIO_Init+0x14>
  }
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	3724      	adds	r7, #36	@ 0x24
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	58000400 	.word	0x58000400

08004984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
 8004990:	4613      	mov	r3, r2
 8004992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004994:	787b      	ldrb	r3, [r7, #1]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800499a:	887a      	ldrh	r2, [r7, #2]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049a0:	e003      	b.n	80049aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049a2:	887b      	ldrh	r3, [r7, #2]
 80049a4:	041a      	lsls	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	619a      	str	r2, [r3, #24]
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049c8:	887a      	ldrh	r2, [r7, #2]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4013      	ands	r3, r2
 80049ce:	041a      	lsls	r2, r3, #16
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	43d9      	mvns	r1, r3
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	400b      	ands	r3, r1
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	619a      	str	r2, [r3, #24]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e08b      	b.n	8004b16 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f00c f9a2 	bl	8010d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2224      	movs	r2, #36	@ 0x24
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d107      	bne.n	8004a66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	e006      	b.n	8004a74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004a72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d108      	bne.n	8004a8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a8a:	605a      	str	r2, [r3, #4]
 8004a8c:	e007      	b.n	8004a9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b20 <HAL_I2C_Init+0x134>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004abc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69d9      	ldr	r1, [r3, #28]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	02008000 	.word	0x02008000

08004b24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	817b      	strh	r3, [r7, #10]
 8004b36:	460b      	mov	r3, r1
 8004b38:	813b      	strh	r3, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	f040 80f9 	bne.w	8004d3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_I2C_Mem_Write+0x34>
 8004b52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0ed      	b.n	8004d40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_I2C_Mem_Write+0x4e>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e0e6      	b.n	8004d40 <HAL_I2C_Mem_Write+0x21c>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b7a:	f7fb fc83 	bl	8000484 <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	2319      	movs	r3, #25
 8004b86:	2201      	movs	r2, #1
 8004b88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fac3 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0d1      	b.n	8004d40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2221      	movs	r2, #33	@ 0x21
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2240      	movs	r2, #64	@ 0x40
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a3a      	ldr	r2, [r7, #32]
 8004bb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bc4:	88f8      	ldrh	r0, [r7, #6]
 8004bc6:	893a      	ldrh	r2, [r7, #8]
 8004bc8:	8979      	ldrh	r1, [r7, #10]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f9d3 	bl	8004f80 <I2C_RequestMemoryWrite>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0a9      	b.n	8004d40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2bff      	cmp	r3, #255	@ 0xff
 8004bf4:	d90e      	bls.n	8004c14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	22ff      	movs	r2, #255	@ 0xff
 8004bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	8979      	ldrh	r1, [r7, #10]
 8004c04:	2300      	movs	r3, #0
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fc47 	bl	80054a0 <I2C_TransferConfig>
 8004c12:	e00f      	b.n	8004c34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	8979      	ldrh	r1, [r7, #10]
 8004c26:	2300      	movs	r3, #0
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fc36 	bl	80054a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fac6 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e07b      	b.n	8004d40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d034      	beq.n	8004cec <HAL_I2C_Mem_Write+0x1c8>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d130      	bne.n	8004cec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	2200      	movs	r2, #0
 8004c92:	2180      	movs	r1, #128	@ 0x80
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fa3f 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e04d      	b.n	8004d40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2bff      	cmp	r3, #255	@ 0xff
 8004cac:	d90e      	bls.n	8004ccc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	22ff      	movs	r2, #255	@ 0xff
 8004cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	8979      	ldrh	r1, [r7, #10]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fbeb 	bl	80054a0 <I2C_TransferConfig>
 8004cca:	e00f      	b.n	8004cec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	8979      	ldrh	r1, [r7, #10]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fbda 	bl	80054a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d19e      	bne.n	8004c34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 faac 	bl	8005258 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e01a      	b.n	8004d40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6859      	ldr	r1, [r3, #4]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <HAL_I2C_Mem_Write+0x224>)
 8004d1e:	400b      	ands	r3, r1
 8004d20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e000      	b.n	8004d40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d3e:	2302      	movs	r3, #2
  }
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	fe00e800 	.word	0xfe00e800

08004d4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	817b      	strh	r3, [r7, #10]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	813b      	strh	r3, [r7, #8]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	f040 80fd 	bne.w	8004f6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_I2C_Mem_Read+0x34>
 8004d7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d105      	bne.n	8004d8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0f1      	b.n	8004f70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_I2C_Mem_Read+0x4e>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e0ea      	b.n	8004f70 <HAL_I2C_Mem_Read+0x224>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004da2:	f7fb fb6f 	bl	8000484 <HAL_GetTick>
 8004da6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	2319      	movs	r3, #25
 8004dae:	2201      	movs	r2, #1
 8004db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f9af 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0d5      	b.n	8004f70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2222      	movs	r2, #34	@ 0x22
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2240      	movs	r2, #64	@ 0x40
 8004dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dec:	88f8      	ldrh	r0, [r7, #6]
 8004dee:	893a      	ldrh	r2, [r7, #8]
 8004df0:	8979      	ldrh	r1, [r7, #10]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f913 	bl	8005028 <I2C_RequestMemoryRead>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0ad      	b.n	8004f70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2bff      	cmp	r3, #255	@ 0xff
 8004e1c:	d90e      	bls.n	8004e3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	22ff      	movs	r2, #255	@ 0xff
 8004e22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	8979      	ldrh	r1, [r7, #10]
 8004e2c:	4b52      	ldr	r3, [pc, #328]	@ (8004f78 <HAL_I2C_Mem_Read+0x22c>)
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fb33 	bl	80054a0 <I2C_TransferConfig>
 8004e3a:	e00f      	b.n	8004e5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	8979      	ldrh	r1, [r7, #10]
 8004e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f78 <HAL_I2C_Mem_Read+0x22c>)
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fb22 	bl	80054a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	2200      	movs	r2, #0
 8004e64:	2104      	movs	r1, #4
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f956 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e07c      	b.n	8004f70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d034      	beq.n	8004f1c <HAL_I2C_Mem_Read+0x1d0>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d130      	bne.n	8004f1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2180      	movs	r1, #128	@ 0x80
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f927 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e04d      	b.n	8004f70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2bff      	cmp	r3, #255	@ 0xff
 8004edc:	d90e      	bls.n	8004efc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	22ff      	movs	r2, #255	@ 0xff
 8004ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	8979      	ldrh	r1, [r7, #10]
 8004eec:	2300      	movs	r3, #0
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fad3 	bl	80054a0 <I2C_TransferConfig>
 8004efa:	e00f      	b.n	8004f1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	8979      	ldrh	r1, [r7, #10]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fac2 	bl	80054a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d19a      	bne.n	8004e5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f994 	bl	8005258 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e01a      	b.n	8004f70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6859      	ldr	r1, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_I2C_Mem_Read+0x230>)
 8004f4e:	400b      	ands	r3, r1
 8004f50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e000      	b.n	8004f70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
  }
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	80002400 	.word	0x80002400
 8004f7c:	fe00e800 	.word	0xfe00e800

08004f80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	4608      	mov	r0, r1
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4603      	mov	r3, r0
 8004f90:	817b      	strh	r3, [r7, #10]
 8004f92:	460b      	mov	r3, r1
 8004f94:	813b      	strh	r3, [r7, #8]
 8004f96:	4613      	mov	r3, r2
 8004f98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	8979      	ldrh	r1, [r7, #10]
 8004fa0:	4b20      	ldr	r3, [pc, #128]	@ (8005024 <I2C_RequestMemoryWrite+0xa4>)
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fa79 	bl	80054a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	69b9      	ldr	r1, [r7, #24]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f909 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e02c      	b.n	800501c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d105      	bne.n	8004fd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc8:	893b      	ldrh	r3, [r7, #8]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fd2:	e015      	b.n	8005000 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fd4:	893b      	ldrh	r3, [r7, #8]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	69b9      	ldr	r1, [r7, #24]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f8ef 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e012      	b.n	800501c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff6:	893b      	ldrh	r3, [r7, #8]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2200      	movs	r2, #0
 8005008:	2180      	movs	r1, #128	@ 0x80
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f884 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	80002000 	.word	0x80002000

08005028 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	461a      	mov	r2, r3
 8005036:	4603      	mov	r3, r0
 8005038:	817b      	strh	r3, [r7, #10]
 800503a:	460b      	mov	r3, r1
 800503c:	813b      	strh	r3, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	b2da      	uxtb	r2, r3
 8005046:	8979      	ldrh	r1, [r7, #10]
 8005048:	4b20      	ldr	r3, [pc, #128]	@ (80050cc <I2C_RequestMemoryRead+0xa4>)
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	2300      	movs	r3, #0
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fa26 	bl	80054a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	69b9      	ldr	r1, [r7, #24]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f8b6 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e02c      	b.n	80050c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d105      	bne.n	800507a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800506e:	893b      	ldrh	r3, [r7, #8]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	629a      	str	r2, [r3, #40]	@ 0x28
 8005078:	e015      	b.n	80050a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800507a:	893b      	ldrh	r3, [r7, #8]
 800507c:	0a1b      	lsrs	r3, r3, #8
 800507e:	b29b      	uxth	r3, r3
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	69b9      	ldr	r1, [r7, #24]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f89c 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e012      	b.n	80050c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800509c:	893b      	ldrh	r3, [r7, #8]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2140      	movs	r1, #64	@ 0x40
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f831 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	80002000 	.word	0x80002000

080050d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d103      	bne.n	80050ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d007      	beq.n	800510c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	619a      	str	r2, [r3, #24]
  }
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005128:	e03b      	b.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f8d6 	bl	80052e0 <I2C_IsErrorOccurred>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e041      	b.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d02d      	beq.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fb f99d 	bl	8000484 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d122      	bne.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	429a      	cmp	r2, r3
 8005178:	d113      	bne.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e00f      	b.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699a      	ldr	r2, [r3, #24]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4013      	ands	r3, r2
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d0b4      	beq.n	800512a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051d6:	e033      	b.n	8005240 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f87f 	bl	80052e0 <I2C_IsErrorOccurred>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e031      	b.n	8005250 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d025      	beq.n	8005240 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f4:	f7fb f946 	bl	8000484 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	d302      	bcc.n	800520a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d11a      	bne.n	8005240 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d013      	beq.n	8005240 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521c:	f043 0220 	orr.w	r2, r3, #32
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e007      	b.n	8005250 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b02      	cmp	r3, #2
 800524c:	d1c4      	bne.n	80051d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005264:	e02f      	b.n	80052c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f838 	bl	80052e0 <I2C_IsErrorOccurred>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e02d      	b.n	80052d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7fb f903 	bl	8000484 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d11a      	bne.n	80052c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b20      	cmp	r3, #32
 800529c:	d013      	beq.n	80052c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e007      	b.n	80052d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d1c8      	bne.n	8005266 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	@ 0x28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	d068      	beq.n	80053de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2210      	movs	r2, #16
 8005312:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005314:	e049      	b.n	80053aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d045      	beq.n	80053aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800531e:	f7fb f8b1 	bl	8000484 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	d302      	bcc.n	8005334 <I2C_IsErrorOccurred+0x54>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d13a      	bne.n	80053aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800533e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005346:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005356:	d121      	bne.n	800539c <I2C_IsErrorOccurred+0xbc>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800535e:	d01d      	beq.n	800539c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	2b20      	cmp	r3, #32
 8005364:	d01a      	beq.n	800539c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005374:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005376:	f7fb f885 	bl	8000484 <HAL_GetTick>
 800537a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800537c:	e00e      	b.n	800539c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800537e:	f7fb f881 	bl	8000484 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b19      	cmp	r3, #25
 800538a:	d907      	bls.n	800539c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	f043 0320 	orr.w	r3, r3, #32
 8005392:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800539a:	e006      	b.n	80053aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d1e9      	bne.n	800537e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d003      	beq.n	80053c0 <I2C_IsErrorOccurred+0xe0>
 80053b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0aa      	beq.n	8005316 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80053c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2220      	movs	r2, #32
 80053ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005400:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f043 0308 	orr.w	r3, r3, #8
 8005418:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005422:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	f043 0302 	orr.w	r3, r3, #2
 800543a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005444:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800544c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01c      	beq.n	800548e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff fe3b 	bl	80050d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6859      	ldr	r1, [r3, #4]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	4b0d      	ldr	r3, [pc, #52]	@ (800549c <I2C_IsErrorOccurred+0x1bc>)
 8005466:	400b      	ands	r3, r1
 8005468:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	431a      	orrs	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800548e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005492:	4618      	mov	r0, r3
 8005494:	3728      	adds	r7, #40	@ 0x28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	fe00e800 	.word	0xfe00e800

080054a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	607b      	str	r3, [r7, #4]
 80054aa:	460b      	mov	r3, r1
 80054ac:	817b      	strh	r3, [r7, #10]
 80054ae:	4613      	mov	r3, r2
 80054b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054b2:	897b      	ldrh	r3, [r7, #10]
 80054b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054b8:	7a7b      	ldrb	r3, [r7, #9]
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	0d5b      	lsrs	r3, r3, #21
 80054da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80054de:	4b08      	ldr	r3, [pc, #32]	@ (8005500 <I2C_TransferConfig+0x60>)
 80054e0:	430b      	orrs	r3, r1
 80054e2:	43db      	mvns	r3, r3
 80054e4:	ea02 0103 	and.w	r1, r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	03ff63ff 	.word	0x03ff63ff

08005504 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b20      	cmp	r3, #32
 8005518:	d138      	bne.n	800558c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005524:	2302      	movs	r3, #2
 8005526:	e032      	b.n	800558e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2224      	movs	r2, #36	@ 0x24
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005556:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6819      	ldr	r1, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	e000      	b.n	800558e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800558c:	2302      	movs	r3, #2
  }
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d139      	bne.n	8005624 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e033      	b.n	8005626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2224      	movs	r2, #36	@ 0x24
 80055ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af02      	add	r7, sp, #8
 8005638:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0fe      	b.n	8005842 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f00c fded 	bl	8012238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2203      	movs	r2, #3
 8005662:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f006 ffdf 	bl	800c62e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	7c1a      	ldrb	r2, [r3, #16]
 8005678:	f88d 2000 	strb.w	r2, [sp]
 800567c:	3304      	adds	r3, #4
 800567e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005680:	f006 feb0 	bl	800c3e4 <USB_CoreInit>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e0d5      	b.n	8005842 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f006 ffd7 	bl	800c650 <USB_SetCurrentMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0c6      	b.n	8005842 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	e04a      	b.n	8005750 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056ba:	7bfa      	ldrb	r2, [r7, #15]
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	3315      	adds	r3, #21
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3314      	adds	r3, #20
 80056de:	7bfa      	ldrb	r2, [r7, #15]
 80056e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056e2:	7bfa      	ldrb	r2, [r7, #15]
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	b298      	uxth	r0, r3
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	332e      	adds	r3, #46	@ 0x2e
 80056f6:	4602      	mov	r2, r0
 80056f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056fa:	7bfa      	ldrb	r2, [r7, #15]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	3318      	adds	r3, #24
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800570e:	7bfa      	ldrb	r2, [r7, #15]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	331c      	adds	r3, #28
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	3320      	adds	r3, #32
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	3324      	adds	r3, #36	@ 0x24
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	3301      	adds	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	791b      	ldrb	r3, [r3, #4]
 8005754:	7bfa      	ldrb	r2, [r7, #15]
 8005756:	429a      	cmp	r2, r3
 8005758:	d3af      	bcc.n	80056ba <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]
 800575e:	e044      	b.n	80057ea <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005760:	7bfa      	ldrb	r2, [r7, #15]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005788:	7bfa      	ldrb	r2, [r7, #15]
 800578a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057b8:	7bfa      	ldrb	r2, [r7, #15]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057ce:	7bfa      	ldrb	r2, [r7, #15]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	3301      	adds	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	791b      	ldrb	r3, [r3, #4]
 80057ee:	7bfa      	ldrb	r2, [r7, #15]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d3b5      	bcc.n	8005760 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	7c1a      	ldrb	r2, [r3, #16]
 80057fc:	f88d 2000 	strb.w	r2, [sp]
 8005800:	3304      	adds	r3, #4
 8005802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005804:	f006 ff70 	bl	800c6e8 <USB_DevInit>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e013      	b.n	8005842 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	7b1b      	ldrb	r3, [r3, #12]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d102      	bne.n	8005836 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 f96d 	bl	8006b10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f007 ffaf 	bl	800d79e <USB_DevDisconnect>

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_PCD_Start+0x1c>
 8005862:	2302      	movs	r3, #2
 8005864:	e022      	b.n	80058ac <HAL_PCD_Start+0x62>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800587e:	2b01      	cmp	r3, #1
 8005880:	d105      	bne.n	800588e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005886:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f006 feba 	bl	800c60c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f007 ff5d 	bl	800d75c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b08d      	sub	sp, #52	@ 0x34
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f008 f81b 	bl	800d906 <USB_GetMode>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f040 84b9 	bne.w	800624a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f007 ff7f 	bl	800d7e0 <USB_ReadInterrupts>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 84af 	beq.w	8006248 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	0a1b      	lsrs	r3, r3, #8
 80058f4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f007 ff6c 	bl	800d7e0 <USB_ReadInterrupts>
 8005908:	4603      	mov	r3, r0
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d107      	bne.n	8005922 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695a      	ldr	r2, [r3, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f002 0202 	and.w	r2, r2, #2
 8005920:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f007 ff5a 	bl	800d7e0 <USB_ReadInterrupts>
 800592c:	4603      	mov	r3, r0
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b10      	cmp	r3, #16
 8005934:	d161      	bne.n	80059fa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0210 	bic.w	r2, r2, #16
 8005944:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	4613      	mov	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	3304      	adds	r3, #4
 8005964:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	0c5b      	lsrs	r3, r3, #17
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	2b02      	cmp	r3, #2
 8005970:	d124      	bne.n	80059bc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d035      	beq.n	80059ea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005988:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	6a38      	ldr	r0, [r7, #32]
 8005992:	f007 fd91 	bl	800d4b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059a2:	441a      	add	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b4:	441a      	add	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	615a      	str	r2, [r3, #20]
 80059ba:	e016      	b.n	80059ea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	0c5b      	lsrs	r3, r3, #17
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d110      	bne.n	80059ea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059ce:	2208      	movs	r2, #8
 80059d0:	4619      	mov	r1, r3
 80059d2:	6a38      	ldr	r0, [r7, #32]
 80059d4:	f007 fd70 	bl	800d4b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	695a      	ldr	r2, [r3, #20]
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	091b      	lsrs	r3, r3, #4
 80059e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e4:	441a      	add	r2, r3
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0210 	orr.w	r2, r2, #16
 80059f8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f007 feee 	bl	800d7e0 <USB_ReadInterrupts>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a0a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a0e:	f040 80a7 	bne.w	8005b60 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f007 fef3 	bl	800d806 <USB_ReadDevAllOutEpInterrupt>
 8005a20:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005a22:	e099      	b.n	8005b58 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 808e 	beq.w	8005b4c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f007 ff17 	bl	800d86e <USB_ReadDevOutEPInterrupt>
 8005a40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fecf 	bl	8006804 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00c      	beq.n	8005a8a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2308      	movs	r3, #8
 8005a80:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 ffa5 	bl	80069d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2310      	movs	r3, #16
 8005aa4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d030      	beq.n	8005b12 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab8:	2b80      	cmp	r3, #128	@ 0x80
 8005aba:	d109      	bne.n	8005ad0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ace:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	78db      	ldrb	r3, [r3, #3]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d108      	bne.n	8005b00 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2200      	movs	r2, #0
 8005af2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f00c fcc2 	bl	8012484 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2302      	movs	r3, #2
 8005b10:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d008      	beq.n	8005b2e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2320      	movs	r3, #32
 8005b2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b44:	461a      	mov	r2, r3
 8005b46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b4a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	3301      	adds	r3, #1
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f47f af62 	bne.w	8005a24 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f007 fe3b 	bl	800d7e0 <USB_ReadInterrupts>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b74:	f040 80db 	bne.w	8005d2e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f007 fe5c 	bl	800d83a <USB_ReadDevAllInEpInterrupt>
 8005b82:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005b88:	e0cd      	b.n	8005d26 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80c2 	beq.w	8005d1a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f007 fe82 	bl	800d8aa <USB_ReadDevInEPInterrupt>
 8005ba6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d057      	beq.n	8005c62 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2201      	movs	r2, #1
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	69f9      	ldr	r1, [r7, #28]
 8005bce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be2:	461a      	mov	r2, r3
 8005be4:	2301      	movs	r3, #1
 8005be6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	799b      	ldrb	r3, [r3, #6]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d132      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	3320      	adds	r3, #32
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c06:	4613      	mov	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4403      	add	r3, r0
 8005c10:	331c      	adds	r3, #28
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4419      	add	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4403      	add	r3, r0
 8005c24:	3320      	adds	r3, #32
 8005c26:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d113      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x3a2>
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c32:	4613      	mov	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	3324      	adds	r3, #36	@ 0x24
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d108      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2101      	movs	r1, #1
 8005c52:	f007 fe8b 	bl	800d96c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f00c fb8c 	bl	801237a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c94:	461a      	mov	r2, r3
 8005c96:	2310      	movs	r3, #16
 8005c98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2340      	movs	r3, #64	@ 0x40
 8005cb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d023      	beq.n	8005d08 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005cc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cc2:	6a38      	ldr	r0, [r7, #32]
 8005cc4:	f006 fe6e 	bl	800c9a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cca:	4613      	mov	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	3310      	adds	r3, #16
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3304      	adds	r3, #4
 8005cda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	78db      	ldrb	r3, [r3, #3]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d108      	bne.n	8005cf6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f00c fbd9 	bl	80124a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d02:	461a      	mov	r2, r3
 8005d04:	2302      	movs	r3, #2
 8005d06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fce8 	bl	80066ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f47f af2e 	bne.w	8005b8a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f007 fd54 	bl	800d7e0 <USB_ReadInterrupts>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d42:	d122      	bne.n	8005d8a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d108      	bne.n	8005d74 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fef3 	bl	8006b58 <HAL_PCDEx_LPM_Callback>
 8005d72:	e002      	b.n	8005d7a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f00c fb77 	bl	8012468 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f007 fd26 	bl	800d7e0 <USB_ReadInterrupts>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d9e:	d112      	bne.n	8005dc6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d102      	bne.n	8005db6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f00c fb33 	bl	801241c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695a      	ldr	r2, [r3, #20]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f007 fd08 	bl	800d7e0 <USB_ReadInterrupts>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dda:	d121      	bne.n	8005e20 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005dea:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d111      	bne.n	8005e1a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e04:	089b      	lsrs	r3, r3, #2
 8005e06:	f003 020f 	and.w	r2, r3, #15
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e10:	2101      	movs	r1, #1
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fea0 	bl	8006b58 <HAL_PCDEx_LPM_Callback>
 8005e18:	e002      	b.n	8005e20 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f00c fafe 	bl	801241c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f007 fcdb 	bl	800d7e0 <USB_ReadInterrupts>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e34:	f040 80b7 	bne.w	8005fa6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e46:	f023 0301 	bic.w	r3, r3, #1
 8005e4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2110      	movs	r1, #16
 8005e52:	4618      	mov	r0, r3
 8005e54:	f006 fda6 	bl	800c9a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e5c:	e046      	b.n	8005eec <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ea4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ec4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ee4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee8:	3301      	adds	r3, #1
 8005eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	791b      	ldrb	r3, [r3, #4]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d3b2      	bcc.n	8005e5e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f06:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005f0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	7bdb      	ldrb	r3, [r3, #15]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f24:	f043 030b 	orr.w	r3, r3, #11
 8005f28:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f3a:	f043 030b 	orr.w	r3, r3, #11
 8005f3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f40:	e015      	b.n	8005f6e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f50:	4619      	mov	r1, r3
 8005f52:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005f56:	4313      	orrs	r3, r2
 8005f58:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f68:	f043 030b 	orr.w	r3, r3, #11
 8005f6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f7c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f90:	461a      	mov	r2, r3
 8005f92:	f007 fceb 	bl	800d96c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695a      	ldr	r2, [r3, #20]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f007 fc18 	bl	800d7e0 <USB_ReadInterrupts>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fba:	d123      	bne.n	8006004 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f007 fcaf 	bl	800d924 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f006 fd63 	bl	800ca96 <USB_GetDevSpeed>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681c      	ldr	r4, [r3, #0]
 8005fdc:	f001 fd9c 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f006 fa6d 	bl	800c4c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f00c f9eb 	bl	80123ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006002:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f007 fbe9 	bl	800d7e0 <USB_ReadInterrupts>
 800600e:	4603      	mov	r3, r0
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b08      	cmp	r3, #8
 8006016:	d10a      	bne.n	800602e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f00c f9c8 	bl	80123ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695a      	ldr	r2, [r3, #20]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f002 0208 	and.w	r2, r2, #8
 800602c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f007 fbd4 	bl	800d7e0 <USB_ReadInterrupts>
 8006038:	4603      	mov	r3, r0
 800603a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603e:	2b80      	cmp	r3, #128	@ 0x80
 8006040:	d123      	bne.n	800608a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800604e:	2301      	movs	r3, #1
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
 8006052:	e014      	b.n	800607e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006058:	4613      	mov	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d105      	bne.n	8006078 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	b2db      	uxtb	r3, r3
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fb08 	bl	8006688 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	3301      	adds	r3, #1
 800607c:	627b      	str	r3, [r7, #36]	@ 0x24
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	791b      	ldrb	r3, [r3, #4]
 8006082:	461a      	mov	r2, r3
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	4293      	cmp	r3, r2
 8006088:	d3e4      	bcc.n	8006054 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f007 fba6 	bl	800d7e0 <USB_ReadInterrupts>
 8006094:	4603      	mov	r3, r0
 8006096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800609a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800609e:	d13c      	bne.n	800611a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060a0:	2301      	movs	r3, #1
 80060a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a4:	e02b      	b.n	80060fe <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3318      	adds	r3, #24
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d115      	bne.n	80060f8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80060cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	da12      	bge.n	80060f8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	3317      	adds	r3, #23
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fac8 	bl	8006688 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	3301      	adds	r3, #1
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	791b      	ldrb	r3, [r3, #4]
 8006102:	461a      	mov	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	4293      	cmp	r3, r2
 8006108:	d3cd      	bcc.n	80060a6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f007 fb5e 	bl	800d7e0 <USB_ReadInterrupts>
 8006124:	4603      	mov	r3, r0
 8006126:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800612a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800612e:	d156      	bne.n	80061de <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006130:	2301      	movs	r3, #1
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
 8006134:	e045      	b.n	80061c2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800614a:	4613      	mov	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d12e      	bne.n	80061bc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800615e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006160:	2b00      	cmp	r3, #0
 8006162:	da2b      	bge.n	80061bc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006170:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006174:	429a      	cmp	r2, r3
 8006176:	d121      	bne.n	80061bc <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800617c:	4613      	mov	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800618a:	2201      	movs	r2, #1
 800618c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061b8:	6053      	str	r3, [r2, #4]
            break;
 80061ba:	e008      	b.n	80061ce <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	3301      	adds	r3, #1
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	791b      	ldrb	r3, [r3, #4]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d3b3      	bcc.n	8006136 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695a      	ldr	r2, [r3, #20]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80061dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f007 fafc 	bl	800d7e0 <USB_ReadInterrupts>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f2:	d10a      	bne.n	800620a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f00c f969 	bl	80124cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f007 fae6 	bl	800d7e0 <USB_ReadInterrupts>
 8006214:	4603      	mov	r3, r0
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b04      	cmp	r3, #4
 800621c:	d115      	bne.n	800624a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f00c f959 	bl	80124e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6859      	ldr	r1, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	e000      	b.n	800624a <HAL_PCD_IRQHandler+0x996>
      return;
 8006248:	bf00      	nop
    }
  }
}
 800624a:	3734      	adds	r7, #52	@ 0x34
 800624c:	46bd      	mov	sp, r7
 800624e:	bd90      	pop	{r4, r7, pc}

08006250 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_PCD_SetAddress+0x1a>
 8006266:	2302      	movs	r3, #2
 8006268:	e012      	b.n	8006290 <HAL_PCD_SetAddress+0x40>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	78fa      	ldrb	r2, [r7, #3]
 8006276:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f007 fa45 	bl	800d710 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	70fb      	strb	r3, [r7, #3]
 80062aa:	460b      	mov	r3, r1
 80062ac:	803b      	strh	r3, [r7, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da0f      	bge.n	80062de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	f003 020f 	and.w	r2, r3, #15
 80062c4:	4613      	mov	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	3310      	adds	r3, #16
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	4413      	add	r3, r2
 80062d2:	3304      	adds	r3, #4
 80062d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	705a      	strb	r2, [r3, #1]
 80062dc:	e00f      	b.n	80062fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	f003 020f 	and.w	r2, r3, #15
 80062e4:	4613      	mov	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4413      	add	r3, r2
 80062f4:	3304      	adds	r3, #4
 80062f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	b2da      	uxtb	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800630a:	883a      	ldrh	r2, [r7, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	78ba      	ldrb	r2, [r7, #2]
 8006314:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006328:	78bb      	ldrb	r3, [r7, #2]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d102      	bne.n	8006334 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_PCD_EP_Open+0xaa>
 800633e:	2302      	movs	r3, #2
 8006340:	e00e      	b.n	8006360 <HAL_PCD_EP_Open+0xc8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68f9      	ldr	r1, [r7, #12]
 8006350:	4618      	mov	r0, r3
 8006352:	f006 fbc5 	bl	800cae0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800635e:	7afb      	ldrb	r3, [r7, #11]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006378:	2b00      	cmp	r3, #0
 800637a:	da0f      	bge.n	800639c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	f003 020f 	and.w	r2, r3, #15
 8006382:	4613      	mov	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	3310      	adds	r3, #16
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	4413      	add	r3, r2
 8006390:	3304      	adds	r3, #4
 8006392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	705a      	strb	r2, [r3, #1]
 800639a:	e00f      	b.n	80063bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4413      	add	r3, r2
 80063b2:	3304      	adds	r3, #4
 80063b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_PCD_EP_Close+0x6e>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e00e      	b.n	80063f4 <HAL_PCD_EP_Close+0x8c>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68f9      	ldr	r1, [r7, #12]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f006 fc03 	bl	800cbf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	460b      	mov	r3, r1
 800640a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	f003 020f 	and.w	r2, r3, #15
 8006412:	4613      	mov	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	3304      	adds	r3, #4
 8006424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2200      	movs	r2, #0
 8006436:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2200      	movs	r2, #0
 800643c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	b2da      	uxtb	r2, r3
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	799b      	ldrb	r3, [r3, #6]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d102      	bne.n	8006458 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	799b      	ldrb	r3, [r3, #6]
 8006460:	461a      	mov	r2, r3
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	f006 fca0 	bl	800cda8 <USB_EPStartXfer>

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	f003 020f 	and.w	r2, r3, #15
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006494:	681b      	ldr	r3, [r3, #0]
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
 80064ae:	460b      	mov	r3, r1
 80064b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064b2:	7afb      	ldrb	r3, [r7, #11]
 80064b4:	f003 020f 	and.w	r2, r3, #15
 80064b8:	4613      	mov	r3, r2
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	3310      	adds	r3, #16
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	3304      	adds	r3, #4
 80064c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2201      	movs	r2, #1
 80064e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	799b      	ldrb	r3, [r3, #6]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d102      	bne.n	80064fc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	799b      	ldrb	r3, [r3, #6]
 8006504:	461a      	mov	r2, r3
 8006506:	6979      	ldr	r1, [r7, #20]
 8006508:	f006 fc4e 	bl	800cda8 <USB_EPStartXfer>

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	7912      	ldrb	r2, [r2, #4]
 800652c:	4293      	cmp	r3, r2
 800652e:	d901      	bls.n	8006534 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e04f      	b.n	80065d4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006538:	2b00      	cmp	r3, #0
 800653a:	da0f      	bge.n	800655c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	f003 020f 	and.w	r2, r3, #15
 8006542:	4613      	mov	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	3310      	adds	r3, #16
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	4413      	add	r3, r2
 8006550:	3304      	adds	r3, #4
 8006552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	705a      	strb	r2, [r3, #1]
 800655a:	e00d      	b.n	8006578 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800655c:	78fa      	ldrb	r2, [r7, #3]
 800655e:	4613      	mov	r3, r2
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	4413      	add	r3, r2
 800656e:	3304      	adds	r3, #4
 8006570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	b2da      	uxtb	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_PCD_EP_SetStall+0x82>
 8006594:	2302      	movs	r3, #2
 8006596:	e01d      	b.n	80065d4 <HAL_PCD_EP_SetStall+0xbe>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68f9      	ldr	r1, [r7, #12]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f006 ffde 	bl	800d568 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7999      	ldrb	r1, [r3, #6]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065c4:	461a      	mov	r2, r3
 80065c6:	f007 f9d1 	bl	800d96c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	7912      	ldrb	r2, [r2, #4]
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d901      	bls.n	80065fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e042      	b.n	8006680 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da0f      	bge.n	8006622 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	f003 020f 	and.w	r2, r3, #15
 8006608:	4613      	mov	r3, r2
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	3310      	adds	r3, #16
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4413      	add	r3, r2
 8006616:	3304      	adds	r3, #4
 8006618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	705a      	strb	r2, [r3, #1]
 8006620:	e00f      	b.n	8006642 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	f003 020f 	and.w	r2, r3, #15
 8006628:	4613      	mov	r3, r2
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	4413      	add	r3, r2
 8006638:	3304      	adds	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	b2da      	uxtb	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800665a:	2b01      	cmp	r3, #1
 800665c:	d101      	bne.n	8006662 <HAL_PCD_EP_ClrStall+0x86>
 800665e:	2302      	movs	r3, #2
 8006660:	e00e      	b.n	8006680 <HAL_PCD_EP_ClrStall+0xa4>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	4618      	mov	r0, r3
 8006672:	f006 ffe7 	bl	800d644 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006698:	2b00      	cmp	r3, #0
 800669a:	da0c      	bge.n	80066b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	f003 020f 	and.w	r2, r3, #15
 80066a2:	4613      	mov	r3, r2
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	3310      	adds	r3, #16
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	4413      	add	r3, r2
 80066b0:	3304      	adds	r3, #4
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	e00c      	b.n	80066d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	f003 020f 	and.w	r2, r3, #15
 80066bc:	4613      	mov	r3, r2
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4413      	add	r3, r2
 80066cc:	3304      	adds	r3, #4
 80066ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68f9      	ldr	r1, [r7, #12]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f006 fe06 	bl	800d2e8 <USB_EPStopXfer>
 80066dc:	4603      	mov	r3, r0
 80066de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80066e0:	7afb      	ldrb	r3, [r7, #11]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b08a      	sub	sp, #40	@ 0x28
 80066ee:	af02      	add	r7, sp, #8
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	3310      	adds	r3, #16
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	3304      	adds	r3, #4
 8006710:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	695a      	ldr	r2, [r3, #20]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	429a      	cmp	r2, r3
 800671c:	d901      	bls.n	8006722 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e06b      	b.n	80067fa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	429a      	cmp	r2, r3
 8006736:	d902      	bls.n	800673e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3303      	adds	r3, #3
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006746:	e02a      	b.n	800679e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	429a      	cmp	r2, r3
 800675c:	d902      	bls.n	8006764 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	3303      	adds	r3, #3
 8006768:	089b      	lsrs	r3, r3, #2
 800676a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	68d9      	ldr	r1, [r3, #12]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	4603      	mov	r3, r0
 8006780:	6978      	ldr	r0, [r7, #20]
 8006782:	f006 fe5b 	bl	800d43c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	441a      	add	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	441a      	add	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d809      	bhi.n	80067c8 <PCD_WriteEmptyTxFifo+0xde>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	695a      	ldr	r2, [r3, #20]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067bc:	429a      	cmp	r2, r3
 80067be:	d203      	bcs.n	80067c8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1bf      	bne.n	8006748 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d811      	bhi.n	80067f8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	2201      	movs	r2, #1
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	6939      	ldr	r1, [r7, #16]
 80067f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067f4:	4013      	ands	r3, r2
 80067f6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	333c      	adds	r3, #60	@ 0x3c
 800681c:	3304      	adds	r3, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	799b      	ldrb	r3, [r3, #6]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d17b      	bne.n	8006932 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d015      	beq.n	8006870 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4a61      	ldr	r2, [pc, #388]	@ (80069cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	f240 80b9 	bls.w	80069c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80b3 	beq.w	80069c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006866:	461a      	mov	r2, r3
 8006868:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800686c:	6093      	str	r3, [r2, #8]
 800686e:	e0a7      	b.n	80069c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006886:	461a      	mov	r2, r3
 8006888:	2320      	movs	r3, #32
 800688a:	6093      	str	r3, [r2, #8]
 800688c:	e098      	b.n	80069c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006894:	2b00      	cmp	r3, #0
 8006896:	f040 8093 	bne.w	80069c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	4a4b      	ldr	r2, [pc, #300]	@ (80069cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d90f      	bls.n	80068c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b8:	461a      	mov	r2, r3
 80068ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068be:	6093      	str	r3, [r2, #8]
 80068c0:	e07e      	b.n	80069c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4413      	add	r3, r2
 80068d4:	3304      	adds	r3, #4
 80068d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1a      	ldr	r2, [r3, #32]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	0159      	lsls	r1, r3, #5
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	440b      	add	r3, r1
 80068e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d114      	bne.n	8006924 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800690c:	461a      	mov	r2, r3
 800690e:	2101      	movs	r1, #1
 8006910:	f007 f82c 	bl	800d96c <USB_EP0_OutStart>
 8006914:	e006      	b.n	8006924 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	441a      	add	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f00b fd0a 	bl	8012344 <HAL_PCD_DataOutStageCallback>
 8006930:	e046      	b.n	80069c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	4a26      	ldr	r2, [pc, #152]	@ (80069d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d124      	bne.n	8006984 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006950:	461a      	mov	r2, r3
 8006952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006956:	6093      	str	r3, [r2, #8]
 8006958:	e032      	b.n	80069c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006970:	461a      	mov	r2, r3
 8006972:	2320      	movs	r3, #32
 8006974:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f00b fce1 	bl	8012344 <HAL_PCD_DataOutStageCallback>
 8006982:	e01d      	b.n	80069c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d114      	bne.n	80069b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	4613      	mov	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d108      	bne.n	80069b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069ac:	461a      	mov	r2, r3
 80069ae:	2100      	movs	r1, #0
 80069b0:	f006 ffdc 	bl	800d96c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f00b fcc2 	bl	8012344 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	4f54300a 	.word	0x4f54300a
 80069d0:	4f54310a 	.word	0x4f54310a

080069d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	333c      	adds	r3, #60	@ 0x3c
 80069ec:	3304      	adds	r3, #4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4a15      	ldr	r2, [pc, #84]	@ (8006a5c <PCD_EP_OutSetupPacket_int+0x88>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d90e      	bls.n	8006a28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a20:	461a      	mov	r2, r3
 8006a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f00b fc79 	bl	8012320 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a0a      	ldr	r2, [pc, #40]	@ (8006a5c <PCD_EP_OutSetupPacket_int+0x88>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d90c      	bls.n	8006a50 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	799b      	ldrb	r3, [r3, #6]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d108      	bne.n	8006a50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a48:	461a      	mov	r2, r3
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	f006 ff8e 	bl	800d96c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	4f54300a 	.word	0x4f54300a

08006a60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d107      	bne.n	8006a8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a7e:	883b      	ldrh	r3, [r7, #0]
 8006a80:	0419      	lsls	r1, r3, #16
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a8c:	e028      	b.n	8006ae0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	0c1b      	lsrs	r3, r3, #16
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	4413      	add	r3, r2
 8006a9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
 8006aa0:	e00d      	b.n	8006abe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	3340      	adds	r3, #64	@ 0x40
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	0c1b      	lsrs	r3, r3, #16
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	3301      	adds	r3, #1
 8006abc:	73fb      	strb	r3, [r7, #15]
 8006abe:	7bfa      	ldrb	r2, [r7, #15]
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d3ec      	bcc.n	8006aa2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ac8:	883b      	ldrh	r3, [r7, #0]
 8006aca:	0418      	lsls	r0, r3, #16
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	4302      	orrs	r2, r0
 8006ad8:	3340      	adds	r3, #64	@ 0x40
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	460b      	mov	r3, r1
 8006af8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	887a      	ldrh	r2, [r7, #2]
 8006b00:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b3e:	4b05      	ldr	r3, [pc, #20]	@ (8006b54 <HAL_PCDEx_ActivateLPM+0x44>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	10000003 	.word	0x10000003

08006b58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b78:	4b19      	ldr	r3, [pc, #100]	@ (8006be0 <HAL_PWREx_ConfigSupply+0x70>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d00a      	beq.n	8006b9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b84:	4b16      	ldr	r3, [pc, #88]	@ (8006be0 <HAL_PWREx_ConfigSupply+0x70>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d001      	beq.n	8006b96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e01f      	b.n	8006bd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	e01d      	b.n	8006bd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b9a:	4b11      	ldr	r3, [pc, #68]	@ (8006be0 <HAL_PWREx_ConfigSupply+0x70>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f023 0207 	bic.w	r2, r3, #7
 8006ba2:	490f      	ldr	r1, [pc, #60]	@ (8006be0 <HAL_PWREx_ConfigSupply+0x70>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006baa:	f7f9 fc6b 	bl	8000484 <HAL_GetTick>
 8006bae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bb0:	e009      	b.n	8006bc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bb2:	f7f9 fc67 	bl	8000484 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bc0:	d901      	bls.n	8006bc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e007      	b.n	8006bd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bc6:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <HAL_PWREx_ConfigSupply+0x70>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bd2:	d1ee      	bne.n	8006bb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	58024800 	.word	0x58024800

08006be4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006be8:	4b05      	ldr	r3, [pc, #20]	@ (8006c00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4a04      	ldr	r2, [pc, #16]	@ (8006c00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bf2:	60d3      	str	r3, [r2, #12]
}
 8006bf4:	bf00      	nop
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	58024800 	.word	0x58024800

08006c04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08c      	sub	sp, #48	@ 0x30
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f000 bc48 	b.w	80074a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8088 	beq.w	8006d36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c26:	4b99      	ldr	r3, [pc, #612]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c30:	4b96      	ldr	r3, [pc, #600]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c38:	2b10      	cmp	r3, #16
 8006c3a:	d007      	beq.n	8006c4c <HAL_RCC_OscConfig+0x48>
 8006c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3e:	2b18      	cmp	r3, #24
 8006c40:	d111      	bne.n	8006c66 <HAL_RCC_OscConfig+0x62>
 8006c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d10c      	bne.n	8006c66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c4c:	4b8f      	ldr	r3, [pc, #572]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d06d      	beq.n	8006d34 <HAL_RCC_OscConfig+0x130>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d169      	bne.n	8006d34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	f000 bc21 	b.w	80074a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c6e:	d106      	bne.n	8006c7e <HAL_RCC_OscConfig+0x7a>
 8006c70:	4b86      	ldr	r3, [pc, #536]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a85      	ldr	r2, [pc, #532]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	e02e      	b.n	8006cdc <HAL_RCC_OscConfig+0xd8>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10c      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x9c>
 8006c86:	4b81      	ldr	r3, [pc, #516]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a80      	ldr	r2, [pc, #512]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	4b7e      	ldr	r3, [pc, #504]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a7d      	ldr	r2, [pc, #500]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	e01d      	b.n	8006cdc <HAL_RCC_OscConfig+0xd8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ca8:	d10c      	bne.n	8006cc4 <HAL_RCC_OscConfig+0xc0>
 8006caa:	4b78      	ldr	r3, [pc, #480]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a77      	ldr	r2, [pc, #476]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	4b75      	ldr	r3, [pc, #468]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a74      	ldr	r2, [pc, #464]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	e00b      	b.n	8006cdc <HAL_RCC_OscConfig+0xd8>
 8006cc4:	4b71      	ldr	r3, [pc, #452]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a70      	ldr	r2, [pc, #448]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	4b6e      	ldr	r3, [pc, #440]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a6d      	ldr	r2, [pc, #436]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d013      	beq.n	8006d0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce4:	f7f9 fbce 	bl	8000484 <HAL_GetTick>
 8006ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cea:	e008      	b.n	8006cfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cec:	f7f9 fbca 	bl	8000484 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b64      	cmp	r3, #100	@ 0x64
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e3d4      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cfe:	4b63      	ldr	r3, [pc, #396]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f0      	beq.n	8006cec <HAL_RCC_OscConfig+0xe8>
 8006d0a:	e014      	b.n	8006d36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0c:	f7f9 fbba 	bl	8000484 <HAL_GetTick>
 8006d10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d14:	f7f9 fbb6 	bl	8000484 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b64      	cmp	r3, #100	@ 0x64
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e3c0      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d26:	4b59      	ldr	r3, [pc, #356]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f0      	bne.n	8006d14 <HAL_RCC_OscConfig+0x110>
 8006d32:	e000      	b.n	8006d36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 80ca 	beq.w	8006ed8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d44:	4b51      	ldr	r3, [pc, #324]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <HAL_RCC_OscConfig+0x166>
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	2b18      	cmp	r3, #24
 8006d5e:	d156      	bne.n	8006e0e <HAL_RCC_OscConfig+0x20a>
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d151      	bne.n	8006e0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d6a:	4b48      	ldr	r3, [pc, #288]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_RCC_OscConfig+0x17e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e392      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d82:	4b42      	ldr	r3, [pc, #264]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 0219 	bic.w	r2, r3, #25
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	493f      	ldr	r1, [pc, #252]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7f9 fb76 	bl	8000484 <HAL_GetTick>
 8006d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d9c:	f7f9 fb72 	bl	8000484 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e37c      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dae:	4b37      	ldr	r3, [pc, #220]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dba:	f7f9 fb93 	bl	80004e4 <HAL_GetREVID>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d817      	bhi.n	8006df8 <HAL_RCC_OscConfig+0x1f4>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b40      	cmp	r3, #64	@ 0x40
 8006dce:	d108      	bne.n	8006de2 <HAL_RCC_OscConfig+0x1de>
 8006dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006de0:	e07a      	b.n	8006ed8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de2:	4b2a      	ldr	r3, [pc, #168]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	031b      	lsls	r3, r3, #12
 8006df0:	4926      	ldr	r1, [pc, #152]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006df6:	e06f      	b.n	8006ed8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df8:	4b24      	ldr	r3, [pc, #144]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	061b      	lsls	r3, r3, #24
 8006e06:	4921      	ldr	r1, [pc, #132]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e0c:	e064      	b.n	8006ed8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d047      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e16:	4b1d      	ldr	r3, [pc, #116]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f023 0219 	bic.w	r2, r3, #25
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	491a      	ldr	r1, [pc, #104]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e28:	f7f9 fb2c 	bl	8000484 <HAL_GetTick>
 8006e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e30:	f7f9 fb28 	bl	8000484 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e332      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e42:	4b12      	ldr	r3, [pc, #72]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4e:	f7f9 fb49 	bl	80004e4 <HAL_GetREVID>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d819      	bhi.n	8006e90 <HAL_RCC_OscConfig+0x28c>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b40      	cmp	r3, #64	@ 0x40
 8006e62:	d108      	bne.n	8006e76 <HAL_RCC_OscConfig+0x272>
 8006e64:	4b09      	ldr	r3, [pc, #36]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006e6c:	4a07      	ldr	r2, [pc, #28]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e72:	6053      	str	r3, [r2, #4]
 8006e74:	e030      	b.n	8006ed8 <HAL_RCC_OscConfig+0x2d4>
 8006e76:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	031b      	lsls	r3, r3, #12
 8006e84:	4901      	ldr	r1, [pc, #4]	@ (8006e8c <HAL_RCC_OscConfig+0x288>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	604b      	str	r3, [r1, #4]
 8006e8a:	e025      	b.n	8006ed8 <HAL_RCC_OscConfig+0x2d4>
 8006e8c:	58024400 	.word	0x58024400
 8006e90:	4b9a      	ldr	r3, [pc, #616]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	061b      	lsls	r3, r3, #24
 8006e9e:	4997      	ldr	r1, [pc, #604]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	604b      	str	r3, [r1, #4]
 8006ea4:	e018      	b.n	8006ed8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ea6:	4b95      	ldr	r3, [pc, #596]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a94      	ldr	r2, [pc, #592]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb2:	f7f9 fae7 	bl	8000484 <HAL_GetTick>
 8006eb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006eb8:	e008      	b.n	8006ecc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eba:	f7f9 fae3 	bl	8000484 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e2ed      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ecc:	4b8b      	ldr	r3, [pc, #556]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f0      	bne.n	8006eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0310 	and.w	r3, r3, #16
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 80a9 	beq.w	8007038 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ee6:	4b85      	ldr	r3, [pc, #532]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ef0:	4b82      	ldr	r3, [pc, #520]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d007      	beq.n	8006f0c <HAL_RCC_OscConfig+0x308>
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b18      	cmp	r3, #24
 8006f00:	d13a      	bne.n	8006f78 <HAL_RCC_OscConfig+0x374>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d135      	bne.n	8006f78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCC_OscConfig+0x320>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	2b80      	cmp	r3, #128	@ 0x80
 8006f1e:	d001      	beq.n	8006f24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e2c1      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f24:	f7f9 fade 	bl	80004e4 <HAL_GetREVID>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d817      	bhi.n	8006f62 <HAL_RCC_OscConfig+0x35e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d108      	bne.n	8006f4c <HAL_RCC_OscConfig+0x348>
 8006f3a:	4b70      	ldr	r3, [pc, #448]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006f42:	4a6e      	ldr	r2, [pc, #440]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006f44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f4a:	e075      	b.n	8007038 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f4c:	4b6b      	ldr	r3, [pc, #428]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	069b      	lsls	r3, r3, #26
 8006f5a:	4968      	ldr	r1, [pc, #416]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f60:	e06a      	b.n	8007038 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f62:	4b66      	ldr	r3, [pc, #408]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	061b      	lsls	r3, r3, #24
 8006f70:	4962      	ldr	r1, [pc, #392]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f76:	e05f      	b.n	8007038 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d042      	beq.n	8007006 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f80:	4b5e      	ldr	r3, [pc, #376]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a5d      	ldr	r2, [pc, #372]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8c:	f7f9 fa7a 	bl	8000484 <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f94:	f7f9 fa76 	bl	8000484 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e280      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fa6:	4b55      	ldr	r3, [pc, #340]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0f0      	beq.n	8006f94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fb2:	f7f9 fa97 	bl	80004e4 <HAL_GetREVID>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d817      	bhi.n	8006ff0 <HAL_RCC_OscConfig+0x3ec>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d108      	bne.n	8006fda <HAL_RCC_OscConfig+0x3d6>
 8006fc8:	4b4c      	ldr	r3, [pc, #304]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006fd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fd6:	6053      	str	r3, [r2, #4]
 8006fd8:	e02e      	b.n	8007038 <HAL_RCC_OscConfig+0x434>
 8006fda:	4b48      	ldr	r3, [pc, #288]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	069b      	lsls	r3, r3, #26
 8006fe8:	4944      	ldr	r1, [pc, #272]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	604b      	str	r3, [r1, #4]
 8006fee:	e023      	b.n	8007038 <HAL_RCC_OscConfig+0x434>
 8006ff0:	4b42      	ldr	r3, [pc, #264]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	061b      	lsls	r3, r3, #24
 8006ffe:	493f      	ldr	r1, [pc, #252]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8007000:	4313      	orrs	r3, r2
 8007002:	60cb      	str	r3, [r1, #12]
 8007004:	e018      	b.n	8007038 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007006:	4b3d      	ldr	r3, [pc, #244]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a3c      	ldr	r2, [pc, #240]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 800700c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007012:	f7f9 fa37 	bl	8000484 <HAL_GetTick>
 8007016:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800701a:	f7f9 fa33 	bl	8000484 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e23d      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800702c:	4b33      	ldr	r3, [pc, #204]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f0      	bne.n	800701a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d036      	beq.n	80070b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d019      	beq.n	8007080 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800704c:	4b2b      	ldr	r3, [pc, #172]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 800704e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007050:	4a2a      	ldr	r2, [pc, #168]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8007052:	f043 0301 	orr.w	r3, r3, #1
 8007056:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007058:	f7f9 fa14 	bl	8000484 <HAL_GetTick>
 800705c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007060:	f7f9 fa10 	bl	8000484 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e21a      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007072:	4b22      	ldr	r3, [pc, #136]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8007074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0f0      	beq.n	8007060 <HAL_RCC_OscConfig+0x45c>
 800707e:	e018      	b.n	80070b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007080:	4b1e      	ldr	r3, [pc, #120]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8007082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007084:	4a1d      	ldr	r2, [pc, #116]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708c:	f7f9 f9fa 	bl	8000484 <HAL_GetTick>
 8007090:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007094:	f7f9 f9f6 	bl	8000484 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e200      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070a6:	4b15      	ldr	r3, [pc, #84]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 80070a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1f0      	bne.n	8007094 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d039      	beq.n	8007132 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01c      	beq.n	8007100 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070c6:	4b0d      	ldr	r3, [pc, #52]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a0c      	ldr	r2, [pc, #48]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 80070cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80070d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070d2:	f7f9 f9d7 	bl	8000484 <HAL_GetTick>
 80070d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070da:	f7f9 f9d3 	bl	8000484 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e1dd      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070ec:	4b03      	ldr	r3, [pc, #12]	@ (80070fc <HAL_RCC_OscConfig+0x4f8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <HAL_RCC_OscConfig+0x4d6>
 80070f8:	e01b      	b.n	8007132 <HAL_RCC_OscConfig+0x52e>
 80070fa:	bf00      	nop
 80070fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007100:	4b9b      	ldr	r3, [pc, #620]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a9a      	ldr	r2, [pc, #616]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007106:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800710a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800710c:	f7f9 f9ba 	bl	8000484 <HAL_GetTick>
 8007110:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007114:	f7f9 f9b6 	bl	8000484 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e1c0      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007126:	4b92      	ldr	r3, [pc, #584]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f0      	bne.n	8007114 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 8081 	beq.w	8007242 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007140:	4b8c      	ldr	r3, [pc, #560]	@ (8007374 <HAL_RCC_OscConfig+0x770>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a8b      	ldr	r2, [pc, #556]	@ (8007374 <HAL_RCC_OscConfig+0x770>)
 8007146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800714a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800714c:	f7f9 f99a 	bl	8000484 <HAL_GetTick>
 8007150:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007154:	f7f9 f996 	bl	8000484 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b64      	cmp	r3, #100	@ 0x64
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e1a0      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007166:	4b83      	ldr	r3, [pc, #524]	@ (8007374 <HAL_RCC_OscConfig+0x770>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0f0      	beq.n	8007154 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d106      	bne.n	8007188 <HAL_RCC_OscConfig+0x584>
 800717a:	4b7d      	ldr	r3, [pc, #500]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800717c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717e:	4a7c      	ldr	r2, [pc, #496]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	6713      	str	r3, [r2, #112]	@ 0x70
 8007186:	e02d      	b.n	80071e4 <HAL_RCC_OscConfig+0x5e0>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10c      	bne.n	80071aa <HAL_RCC_OscConfig+0x5a6>
 8007190:	4b77      	ldr	r3, [pc, #476]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007194:	4a76      	ldr	r2, [pc, #472]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	6713      	str	r3, [r2, #112]	@ 0x70
 800719c:	4b74      	ldr	r3, [pc, #464]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800719e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a0:	4a73      	ldr	r2, [pc, #460]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80071a2:	f023 0304 	bic.w	r3, r3, #4
 80071a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80071a8:	e01c      	b.n	80071e4 <HAL_RCC_OscConfig+0x5e0>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	2b05      	cmp	r3, #5
 80071b0:	d10c      	bne.n	80071cc <HAL_RCC_OscConfig+0x5c8>
 80071b2:	4b6f      	ldr	r3, [pc, #444]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80071b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b6:	4a6e      	ldr	r2, [pc, #440]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80071b8:	f043 0304 	orr.w	r3, r3, #4
 80071bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80071be:	4b6c      	ldr	r3, [pc, #432]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80071c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c2:	4a6b      	ldr	r2, [pc, #428]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80071c4:	f043 0301 	orr.w	r3, r3, #1
 80071c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80071ca:	e00b      	b.n	80071e4 <HAL_RCC_OscConfig+0x5e0>
 80071cc:	4b68      	ldr	r3, [pc, #416]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80071ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d0:	4a67      	ldr	r2, [pc, #412]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80071d2:	f023 0301 	bic.w	r3, r3, #1
 80071d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80071d8:	4b65      	ldr	r3, [pc, #404]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80071da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071dc:	4a64      	ldr	r2, [pc, #400]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80071de:	f023 0304 	bic.w	r3, r3, #4
 80071e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d015      	beq.n	8007218 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ec:	f7f9 f94a 	bl	8000484 <HAL_GetTick>
 80071f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071f2:	e00a      	b.n	800720a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f4:	f7f9 f946 	bl	8000484 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007202:	4293      	cmp	r3, r2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e14e      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800720a:	4b59      	ldr	r3, [pc, #356]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0ee      	beq.n	80071f4 <HAL_RCC_OscConfig+0x5f0>
 8007216:	e014      	b.n	8007242 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007218:	f7f9 f934 	bl	8000484 <HAL_GetTick>
 800721c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800721e:	e00a      	b.n	8007236 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007220:	f7f9 f930 	bl	8000484 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800722e:	4293      	cmp	r3, r2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e138      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007236:	4b4e      	ldr	r3, [pc, #312]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1ee      	bne.n	8007220 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 812d 	beq.w	80074a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800724c:	4b48      	ldr	r3, [pc, #288]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007254:	2b18      	cmp	r3, #24
 8007256:	f000 80bd 	beq.w	80073d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725e:	2b02      	cmp	r3, #2
 8007260:	f040 809e 	bne.w	80073a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007264:	4b42      	ldr	r3, [pc, #264]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a41      	ldr	r2, [pc, #260]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800726a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800726e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7f9 f908 	bl	8000484 <HAL_GetTick>
 8007274:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007278:	f7f9 f904 	bl	8000484 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e10e      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800728a:	4b39      	ldr	r3, [pc, #228]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007296:	4b36      	ldr	r3, [pc, #216]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007298:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800729a:	4b37      	ldr	r3, [pc, #220]	@ (8007378 <HAL_RCC_OscConfig+0x774>)
 800729c:	4013      	ands	r3, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80072a6:	0112      	lsls	r2, r2, #4
 80072a8:	430a      	orrs	r2, r1
 80072aa:	4931      	ldr	r1, [pc, #196]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b4:	3b01      	subs	r3, #1
 80072b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072be:	3b01      	subs	r3, #1
 80072c0:	025b      	lsls	r3, r3, #9
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	3b01      	subs	r3, #1
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80072d2:	431a      	orrs	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d8:	3b01      	subs	r3, #1
 80072da:	061b      	lsls	r3, r3, #24
 80072dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80072e0:	4923      	ldr	r1, [pc, #140]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80072e6:	4b22      	ldr	r3, [pc, #136]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80072e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ea:	4a21      	ldr	r2, [pc, #132]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 80072f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072f6:	4b21      	ldr	r3, [pc, #132]	@ (800737c <HAL_RCC_OscConfig+0x778>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80072fe:	00d2      	lsls	r2, r2, #3
 8007300:	491b      	ldr	r1, [pc, #108]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007302:	4313      	orrs	r3, r2
 8007304:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007306:	4b1a      	ldr	r3, [pc, #104]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	f023 020c 	bic.w	r2, r3, #12
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	4917      	ldr	r1, [pc, #92]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007314:	4313      	orrs	r3, r2
 8007316:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007318:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	f023 0202 	bic.w	r2, r3, #2
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007324:	4912      	ldr	r1, [pc, #72]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007326:	4313      	orrs	r3, r2
 8007328:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800732a:	4b11      	ldr	r3, [pc, #68]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	4a10      	ldr	r2, [pc, #64]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007334:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007336:	4b0e      	ldr	r3, [pc, #56]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733a:	4a0d      	ldr	r2, [pc, #52]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800733c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007340:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007342:	4b0b      	ldr	r3, [pc, #44]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007346:	4a0a      	ldr	r2, [pc, #40]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800734c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800734e:	4b08      	ldr	r3, [pc, #32]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007352:	4a07      	ldr	r2, [pc, #28]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007354:	f043 0301 	orr.w	r3, r3, #1
 8007358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800735a:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a04      	ldr	r2, [pc, #16]	@ (8007370 <HAL_RCC_OscConfig+0x76c>)
 8007360:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007366:	f7f9 f88d 	bl	8000484 <HAL_GetTick>
 800736a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800736c:	e011      	b.n	8007392 <HAL_RCC_OscConfig+0x78e>
 800736e:	bf00      	nop
 8007370:	58024400 	.word	0x58024400
 8007374:	58024800 	.word	0x58024800
 8007378:	fffffc0c 	.word	0xfffffc0c
 800737c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007380:	f7f9 f880 	bl	8000484 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e08a      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007392:	4b47      	ldr	r3, [pc, #284]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCC_OscConfig+0x77c>
 800739e:	e082      	b.n	80074a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a0:	4b43      	ldr	r3, [pc, #268]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a42      	ldr	r2, [pc, #264]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 80073a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ac:	f7f9 f86a 	bl	8000484 <HAL_GetTick>
 80073b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b4:	f7f9 f866 	bl	8000484 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e070      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073c6:	4b3a      	ldr	r3, [pc, #232]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f0      	bne.n	80073b4 <HAL_RCC_OscConfig+0x7b0>
 80073d2:	e068      	b.n	80074a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80073d4:	4b36      	ldr	r3, [pc, #216]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 80073d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80073da:	4b35      	ldr	r3, [pc, #212]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 80073dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d031      	beq.n	800744c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f003 0203 	and.w	r2, r3, #3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d12a      	bne.n	800744c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	091b      	lsrs	r3, r3, #4
 80073fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007402:	429a      	cmp	r2, r3
 8007404:	d122      	bne.n	800744c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007410:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007412:	429a      	cmp	r2, r3
 8007414:	d11a      	bne.n	800744c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	0a5b      	lsrs	r3, r3, #9
 800741a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007422:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007424:	429a      	cmp	r2, r3
 8007426:	d111      	bne.n	800744c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007434:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007436:	429a      	cmp	r2, r3
 8007438:	d108      	bne.n	800744c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	0e1b      	lsrs	r3, r3, #24
 800743e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007446:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007448:	429a      	cmp	r2, r3
 800744a:	d001      	beq.n	8007450 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e02b      	b.n	80074a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007450:	4b17      	ldr	r3, [pc, #92]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 8007452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007454:	08db      	lsrs	r3, r3, #3
 8007456:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800745a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	d01f      	beq.n	80074a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007466:	4b12      	ldr	r3, [pc, #72]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	4a11      	ldr	r2, [pc, #68]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 800746c:	f023 0301 	bic.w	r3, r3, #1
 8007470:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007472:	f7f9 f807 	bl	8000484 <HAL_GetTick>
 8007476:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007478:	bf00      	nop
 800747a:	f7f9 f803 	bl	8000484 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007482:	4293      	cmp	r3, r2
 8007484:	d0f9      	beq.n	800747a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007486:	4b0a      	ldr	r3, [pc, #40]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 8007488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800748a:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <HAL_RCC_OscConfig+0x8b0>)
 800748c:	4013      	ands	r3, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007492:	00d2      	lsls	r2, r2, #3
 8007494:	4906      	ldr	r1, [pc, #24]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 8007496:	4313      	orrs	r3, r2
 8007498:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800749a:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 800749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749e:	4a04      	ldr	r2, [pc, #16]	@ (80074b0 <HAL_RCC_OscConfig+0x8ac>)
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3730      	adds	r7, #48	@ 0x30
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	58024400 	.word	0x58024400
 80074b4:	ffff0007 	.word	0xffff0007

080074b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e19c      	b.n	8007806 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074cc:	4b8a      	ldr	r3, [pc, #552]	@ (80076f8 <HAL_RCC_ClockConfig+0x240>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d910      	bls.n	80074fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074da:	4b87      	ldr	r3, [pc, #540]	@ (80076f8 <HAL_RCC_ClockConfig+0x240>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f023 020f 	bic.w	r2, r3, #15
 80074e2:	4985      	ldr	r1, [pc, #532]	@ (80076f8 <HAL_RCC_ClockConfig+0x240>)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ea:	4b83      	ldr	r3, [pc, #524]	@ (80076f8 <HAL_RCC_ClockConfig+0x240>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d001      	beq.n	80074fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e184      	b.n	8007806 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d010      	beq.n	800752a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	4b7b      	ldr	r3, [pc, #492]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007514:	429a      	cmp	r2, r3
 8007516:	d908      	bls.n	800752a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007518:	4b78      	ldr	r3, [pc, #480]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	4975      	ldr	r1, [pc, #468]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 8007526:	4313      	orrs	r3, r2
 8007528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d010      	beq.n	8007558 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695a      	ldr	r2, [r3, #20]
 800753a:	4b70      	ldr	r3, [pc, #448]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007542:	429a      	cmp	r2, r3
 8007544:	d908      	bls.n	8007558 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007546:	4b6d      	ldr	r3, [pc, #436]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	496a      	ldr	r1, [pc, #424]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 8007554:	4313      	orrs	r3, r2
 8007556:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b00      	cmp	r3, #0
 8007562:	d010      	beq.n	8007586 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	4b64      	ldr	r3, [pc, #400]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007570:	429a      	cmp	r2, r3
 8007572:	d908      	bls.n	8007586 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007574:	4b61      	ldr	r3, [pc, #388]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	495e      	ldr	r1, [pc, #376]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 8007582:	4313      	orrs	r3, r2
 8007584:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d010      	beq.n	80075b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	69da      	ldr	r2, [r3, #28]
 8007596:	4b59      	ldr	r3, [pc, #356]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800759e:	429a      	cmp	r2, r3
 80075a0:	d908      	bls.n	80075b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80075a2:	4b56      	ldr	r3, [pc, #344]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	4953      	ldr	r1, [pc, #332]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d010      	beq.n	80075e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	4b4d      	ldr	r3, [pc, #308]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d908      	bls.n	80075e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d0:	4b4a      	ldr	r3, [pc, #296]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f023 020f 	bic.w	r2, r3, #15
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4947      	ldr	r1, [pc, #284]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d055      	beq.n	800769a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80075ee:	4b43      	ldr	r3, [pc, #268]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	4940      	ldr	r1, [pc, #256]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d107      	bne.n	8007618 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007608:	4b3c      	ldr	r3, [pc, #240]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d121      	bne.n	8007658 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e0f6      	b.n	8007806 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b03      	cmp	r3, #3
 800761e:	d107      	bne.n	8007630 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007620:	4b36      	ldr	r3, [pc, #216]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d115      	bne.n	8007658 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e0ea      	b.n	8007806 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d107      	bne.n	8007648 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007638:	4b30      	ldr	r3, [pc, #192]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e0de      	b.n	8007806 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007648:	4b2c      	ldr	r3, [pc, #176]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e0d6      	b.n	8007806 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007658:	4b28      	ldr	r3, [pc, #160]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f023 0207 	bic.w	r2, r3, #7
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	4925      	ldr	r1, [pc, #148]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 8007666:	4313      	orrs	r3, r2
 8007668:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766a:	f7f8 ff0b 	bl	8000484 <HAL_GetTick>
 800766e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007670:	e00a      	b.n	8007688 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007672:	f7f8 ff07 	bl	8000484 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007680:	4293      	cmp	r3, r2
 8007682:	d901      	bls.n	8007688 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e0be      	b.n	8007806 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007688:	4b1c      	ldr	r3, [pc, #112]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	429a      	cmp	r2, r3
 8007698:	d1eb      	bne.n	8007672 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d010      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	4b14      	ldr	r3, [pc, #80]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d208      	bcs.n	80076c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076b6:	4b11      	ldr	r3, [pc, #68]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	f023 020f 	bic.w	r2, r3, #15
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	490e      	ldr	r1, [pc, #56]	@ (80076fc <HAL_RCC_ClockConfig+0x244>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076c8:	4b0b      	ldr	r3, [pc, #44]	@ (80076f8 <HAL_RCC_ClockConfig+0x240>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d214      	bcs.n	8007700 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d6:	4b08      	ldr	r3, [pc, #32]	@ (80076f8 <HAL_RCC_ClockConfig+0x240>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f023 020f 	bic.w	r2, r3, #15
 80076de:	4906      	ldr	r1, [pc, #24]	@ (80076f8 <HAL_RCC_ClockConfig+0x240>)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e6:	4b04      	ldr	r3, [pc, #16]	@ (80076f8 <HAL_RCC_ClockConfig+0x240>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d005      	beq.n	8007700 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e086      	b.n	8007806 <HAL_RCC_ClockConfig+0x34e>
 80076f8:	52002000 	.word	0x52002000
 80076fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d010      	beq.n	800772e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	4b3f      	ldr	r3, [pc, #252]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007718:	429a      	cmp	r2, r3
 800771a:	d208      	bcs.n	800772e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800771c:	4b3c      	ldr	r3, [pc, #240]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	4939      	ldr	r1, [pc, #228]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 800772a:	4313      	orrs	r3, r2
 800772c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d010      	beq.n	800775c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	4b34      	ldr	r3, [pc, #208]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007746:	429a      	cmp	r2, r3
 8007748:	d208      	bcs.n	800775c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800774a:	4b31      	ldr	r3, [pc, #196]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	492e      	ldr	r1, [pc, #184]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 8007758:	4313      	orrs	r3, r2
 800775a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d010      	beq.n	800778a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699a      	ldr	r2, [r3, #24]
 800776c:	4b28      	ldr	r3, [pc, #160]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007774:	429a      	cmp	r2, r3
 8007776:	d208      	bcs.n	800778a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007778:	4b25      	ldr	r3, [pc, #148]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	4922      	ldr	r1, [pc, #136]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 8007786:	4313      	orrs	r3, r2
 8007788:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d010      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	69da      	ldr	r2, [r3, #28]
 800779a:	4b1d      	ldr	r3, [pc, #116]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d208      	bcs.n	80077b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	4917      	ldr	r1, [pc, #92]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077b8:	f000 f834 	bl	8007824 <HAL_RCC_GetSysClockFreq>
 80077bc:	4602      	mov	r2, r0
 80077be:	4b14      	ldr	r3, [pc, #80]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	0a1b      	lsrs	r3, r3, #8
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	4912      	ldr	r1, [pc, #72]	@ (8007814 <HAL_RCC_ClockConfig+0x35c>)
 80077ca:	5ccb      	ldrb	r3, [r1, r3]
 80077cc:	f003 031f 	and.w	r3, r3, #31
 80077d0:	fa22 f303 	lsr.w	r3, r2, r3
 80077d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007810 <HAL_RCC_ClockConfig+0x358>)
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	4a0d      	ldr	r2, [pc, #52]	@ (8007814 <HAL_RCC_ClockConfig+0x35c>)
 80077e0:	5cd3      	ldrb	r3, [r2, r3]
 80077e2:	f003 031f 	and.w	r3, r3, #31
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	fa22 f303 	lsr.w	r3, r2, r3
 80077ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007818 <HAL_RCC_ClockConfig+0x360>)
 80077ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077f0:	4a0a      	ldr	r2, [pc, #40]	@ (800781c <HAL_RCC_ClockConfig+0x364>)
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80077f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007820 <HAL_RCC_ClockConfig+0x368>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f00a f8fe 	bl	80119fc <HAL_InitTick>
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	58024400 	.word	0x58024400
 8007814:	0801723c 	.word	0x0801723c
 8007818:	2400009c 	.word	0x2400009c
 800781c:	24000098 	.word	0x24000098
 8007820:	24000000 	.word	0x24000000

08007824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007824:	b480      	push	{r7}
 8007826:	b089      	sub	sp, #36	@ 0x24
 8007828:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800782a:	4bb3      	ldr	r3, [pc, #716]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007832:	2b18      	cmp	r3, #24
 8007834:	f200 8155 	bhi.w	8007ae2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007838:	a201      	add	r2, pc, #4	@ (adr r2, 8007840 <HAL_RCC_GetSysClockFreq+0x1c>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	080078a5 	.word	0x080078a5
 8007844:	08007ae3 	.word	0x08007ae3
 8007848:	08007ae3 	.word	0x08007ae3
 800784c:	08007ae3 	.word	0x08007ae3
 8007850:	08007ae3 	.word	0x08007ae3
 8007854:	08007ae3 	.word	0x08007ae3
 8007858:	08007ae3 	.word	0x08007ae3
 800785c:	08007ae3 	.word	0x08007ae3
 8007860:	080078cb 	.word	0x080078cb
 8007864:	08007ae3 	.word	0x08007ae3
 8007868:	08007ae3 	.word	0x08007ae3
 800786c:	08007ae3 	.word	0x08007ae3
 8007870:	08007ae3 	.word	0x08007ae3
 8007874:	08007ae3 	.word	0x08007ae3
 8007878:	08007ae3 	.word	0x08007ae3
 800787c:	08007ae3 	.word	0x08007ae3
 8007880:	080078d1 	.word	0x080078d1
 8007884:	08007ae3 	.word	0x08007ae3
 8007888:	08007ae3 	.word	0x08007ae3
 800788c:	08007ae3 	.word	0x08007ae3
 8007890:	08007ae3 	.word	0x08007ae3
 8007894:	08007ae3 	.word	0x08007ae3
 8007898:	08007ae3 	.word	0x08007ae3
 800789c:	08007ae3 	.word	0x08007ae3
 80078a0:	080078d7 	.word	0x080078d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078a4:	4b94      	ldr	r3, [pc, #592]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d009      	beq.n	80078c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078b0:	4b91      	ldr	r3, [pc, #580]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	08db      	lsrs	r3, r3, #3
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	4a90      	ldr	r2, [pc, #576]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
 80078c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80078c2:	e111      	b.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80078c4:	4b8d      	ldr	r3, [pc, #564]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078c6:	61bb      	str	r3, [r7, #24]
      break;
 80078c8:	e10e      	b.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80078ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007b00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078cc:	61bb      	str	r3, [r7, #24]
      break;
 80078ce:	e10b      	b.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80078d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80078d2:	61bb      	str	r3, [r7, #24]
      break;
 80078d4:	e108      	b.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078d6:	4b88      	ldr	r3, [pc, #544]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80078e0:	4b85      	ldr	r3, [pc, #532]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e4:	091b      	lsrs	r3, r3, #4
 80078e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80078ec:	4b82      	ldr	r3, [pc, #520]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078f6:	4b80      	ldr	r3, [pc, #512]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078fa:	08db      	lsrs	r3, r3, #3
 80078fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	fb02 f303 	mul.w	r3, r2, r3
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 80e1 	beq.w	8007adc <HAL_RCC_GetSysClockFreq+0x2b8>
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b02      	cmp	r3, #2
 800791e:	f000 8083 	beq.w	8007a28 <HAL_RCC_GetSysClockFreq+0x204>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b02      	cmp	r3, #2
 8007926:	f200 80a1 	bhi.w	8007a6c <HAL_RCC_GetSysClockFreq+0x248>
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <HAL_RCC_GetSysClockFreq+0x114>
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d056      	beq.n	80079e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007936:	e099      	b.n	8007a6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007938:	4b6f      	ldr	r3, [pc, #444]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d02d      	beq.n	80079a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007944:	4b6c      	ldr	r3, [pc, #432]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	08db      	lsrs	r3, r3, #3
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	4a6b      	ldr	r2, [pc, #428]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
 8007954:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	ee07 3a90 	vmov	s15, r3
 800795c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796e:	4b62      	ldr	r3, [pc, #392]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007982:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800799e:	e087      	b.n	8007ab0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007b0c <HAL_RCC_GetSysClockFreq+0x2e8>
 80079ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b2:	4b51      	ldr	r3, [pc, #324]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80079c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079e2:	e065      	b.n	8007ab0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	ee07 3a90 	vmov	s15, r3
 80079ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007b10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80079f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f6:	4b40      	ldr	r3, [pc, #256]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fe:	ee07 3a90 	vmov	s15, r3
 8007a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a0a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a26:	e043      	b.n	8007ab0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a32:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007b14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a4e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a6a:	e021      	b.n	8007ab0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007b10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a92:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007aae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007ab0:	4b11      	ldr	r3, [pc, #68]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab4:	0a5b      	lsrs	r3, r3, #9
 8007ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aba:	3301      	adds	r3, #1
 8007abc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	ee07 3a90 	vmov	s15, r3
 8007ac4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad4:	ee17 3a90 	vmov	r3, s15
 8007ad8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007ada:	e005      	b.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	61bb      	str	r3, [r7, #24]
      break;
 8007ae0:	e002      	b.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ae2:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ae4:	61bb      	str	r3, [r7, #24]
      break;
 8007ae6:	bf00      	nop
  }

  return sysclockfreq;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3724      	adds	r7, #36	@ 0x24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	58024400 	.word	0x58024400
 8007afc:	03d09000 	.word	0x03d09000
 8007b00:	003d0900 	.word	0x003d0900
 8007b04:	017d7840 	.word	0x017d7840
 8007b08:	46000000 	.word	0x46000000
 8007b0c:	4c742400 	.word	0x4c742400
 8007b10:	4a742400 	.word	0x4a742400
 8007b14:	4bbebc20 	.word	0x4bbebc20

08007b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b1e:	f7ff fe81 	bl	8007824 <HAL_RCC_GetSysClockFreq>
 8007b22:	4602      	mov	r2, r0
 8007b24:	4b10      	ldr	r3, [pc, #64]	@ (8007b68 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	0a1b      	lsrs	r3, r3, #8
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	490f      	ldr	r1, [pc, #60]	@ (8007b6c <HAL_RCC_GetHCLKFreq+0x54>)
 8007b30:	5ccb      	ldrb	r3, [r1, r3]
 8007b32:	f003 031f 	and.w	r3, r3, #31
 8007b36:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b68 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f003 030f 	and.w	r3, r3, #15
 8007b44:	4a09      	ldr	r2, [pc, #36]	@ (8007b6c <HAL_RCC_GetHCLKFreq+0x54>)
 8007b46:	5cd3      	ldrb	r3, [r2, r3]
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b52:	4a07      	ldr	r2, [pc, #28]	@ (8007b70 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b56:	4a07      	ldr	r2, [pc, #28]	@ (8007b74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b5c:	4b04      	ldr	r3, [pc, #16]	@ (8007b70 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	58024400 	.word	0x58024400
 8007b6c:	0801723c 	.word	0x0801723c
 8007b70:	2400009c 	.word	0x2400009c
 8007b74:	24000098 	.word	0x24000098

08007b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b7c:	f7ff ffcc 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8007b80:	4602      	mov	r2, r0
 8007b82:	4b06      	ldr	r3, [pc, #24]	@ (8007b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	091b      	lsrs	r3, r3, #4
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	4904      	ldr	r1, [pc, #16]	@ (8007ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b8e:	5ccb      	ldrb	r3, [r1, r3]
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	0801723c 	.word	0x0801723c

08007ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	223f      	movs	r2, #63	@ 0x3f
 8007bb2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c20 <HAL_RCC_GetClockConfig+0x7c>)
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f003 0207 	and.w	r2, r3, #7
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007bc0:	4b17      	ldr	r3, [pc, #92]	@ (8007c20 <HAL_RCC_GetClockConfig+0x7c>)
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007bcc:	4b14      	ldr	r3, [pc, #80]	@ (8007c20 <HAL_RCC_GetClockConfig+0x7c>)
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	f003 020f 	and.w	r2, r3, #15
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007bd8:	4b11      	ldr	r3, [pc, #68]	@ (8007c20 <HAL_RCC_GetClockConfig+0x7c>)
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007be4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c20 <HAL_RCC_GetClockConfig+0x7c>)
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8007c20 <HAL_RCC_GetClockConfig+0x7c>)
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007bfc:	4b08      	ldr	r3, [pc, #32]	@ (8007c20 <HAL_RCC_GetClockConfig+0x7c>)
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c08:	4b06      	ldr	r3, [pc, #24]	@ (8007c24 <HAL_RCC_GetClockConfig+0x80>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	58024400 	.word	0x58024400
 8007c24:	52002000 	.word	0x52002000

08007c28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c2c:	b0ca      	sub	sp, #296	@ 0x128
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007c4c:	2500      	movs	r5, #0
 8007c4e:	ea54 0305 	orrs.w	r3, r4, r5
 8007c52:	d049      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c5e:	d02f      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007c60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c64:	d828      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c6a:	d01a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c70:	d822      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c7a:	d007      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007c7c:	e01c      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c7e:	4bb8      	ldr	r3, [pc, #736]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c82:	4ab7      	ldr	r2, [pc, #732]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007c8a:	e01a      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c90:	3308      	adds	r3, #8
 8007c92:	2102      	movs	r1, #2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f002 fb61 	bl	800a35c <RCCEx_PLL2_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ca0:	e00f      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca6:	3328      	adds	r3, #40	@ 0x28
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f002 fc08 	bl	800a4c0 <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cb6:	e004      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cbe:	e000      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007cca:	4ba5      	ldr	r3, [pc, #660]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cd8:	4aa1      	ldr	r2, [pc, #644]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cde:	e003      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007cf4:	f04f 0900 	mov.w	r9, #0
 8007cf8:	ea58 0309 	orrs.w	r3, r8, r9
 8007cfc:	d047      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d82a      	bhi.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d08:	a201      	add	r2, pc, #4	@ (adr r2, 8007d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d25 	.word	0x08007d25
 8007d14:	08007d33 	.word	0x08007d33
 8007d18:	08007d49 	.word	0x08007d49
 8007d1c:	08007d67 	.word	0x08007d67
 8007d20:	08007d67 	.word	0x08007d67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d24:	4b8e      	ldr	r3, [pc, #568]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d28:	4a8d      	ldr	r2, [pc, #564]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d30:	e01a      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d36:	3308      	adds	r3, #8
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f002 fb0e 	bl	800a35c <RCCEx_PLL2_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d46:	e00f      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4c:	3328      	adds	r3, #40	@ 0x28
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f002 fbb5 	bl	800a4c0 <RCCEx_PLL3_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d5c:	e004      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d64:	e000      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d70:	4b7b      	ldr	r3, [pc, #492]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d74:	f023 0107 	bic.w	r1, r3, #7
 8007d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d7e:	4a78      	ldr	r2, [pc, #480]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d80:	430b      	orrs	r3, r1
 8007d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d84:	e003      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007d9a:	f04f 0b00 	mov.w	fp, #0
 8007d9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007da2:	d04c      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dae:	d030      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007db4:	d829      	bhi.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007db6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007db8:	d02d      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007dba:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dbc:	d825      	bhi.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007dbe:	2b80      	cmp	r3, #128	@ 0x80
 8007dc0:	d018      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007dc2:	2b80      	cmp	r3, #128	@ 0x80
 8007dc4:	d821      	bhi.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007dca:	2b40      	cmp	r3, #64	@ 0x40
 8007dcc:	d007      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007dce:	e01c      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd0:	4b63      	ldr	r3, [pc, #396]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd4:	4a62      	ldr	r2, [pc, #392]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ddc:	e01c      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de2:	3308      	adds	r3, #8
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f002 fab8 	bl	800a35c <RCCEx_PLL2_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007df2:	e011      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df8:	3328      	adds	r3, #40	@ 0x28
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f002 fb5f 	bl	800a4c0 <RCCEx_PLL3_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e08:	e006      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e10:	e002      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e20:	4b4f      	ldr	r3, [pc, #316]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e24:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e2e:	4a4c      	ldr	r2, [pc, #304]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e30:	430b      	orrs	r3, r1
 8007e32:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e34:	e003      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007e4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007e54:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	d053      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e6a:	d035      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e70:	d82e      	bhi.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007e72:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e76:	d031      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007e78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e7c:	d828      	bhi.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007e7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e82:	d01a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e88:	d822      	bhi.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007e8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e92:	d007      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007e94:	e01c      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e96:	4b32      	ldr	r3, [pc, #200]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9a:	4a31      	ldr	r2, [pc, #196]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ea2:	e01c      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	2100      	movs	r1, #0
 8007eac:	4618      	mov	r0, r3
 8007eae:	f002 fa55 	bl	800a35c <RCCEx_PLL2_Config>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007eb8:	e011      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ebe:	3328      	adds	r3, #40	@ 0x28
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f002 fafc 	bl	800a4c0 <RCCEx_PLL3_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ece:	e006      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ed6:	e002      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ed8:	bf00      	nop
 8007eda:	e000      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10b      	bne.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8007efc:	e003      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007f12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f16:	2300      	movs	r3, #0
 8007f18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007f1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007f20:	460b      	mov	r3, r1
 8007f22:	4313      	orrs	r3, r2
 8007f24:	d056      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007f2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f32:	d038      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007f34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f38:	d831      	bhi.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f3e:	d034      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007f40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f44:	d82b      	bhi.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f4a:	d01d      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f50:	d825      	bhi.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d006      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007f56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f5a:	d00a      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f5c:	e01f      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f5e:	bf00      	nop
 8007f60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f64:	4ba2      	ldr	r3, [pc, #648]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f68:	4aa1      	ldr	r2, [pc, #644]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f70:	e01c      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f76:	3308      	adds	r3, #8
 8007f78:	2100      	movs	r1, #0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f002 f9ee 	bl	800a35c <RCCEx_PLL2_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007f86:	e011      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8c:	3328      	adds	r3, #40	@ 0x28
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4618      	mov	r0, r3
 8007f92:	f002 fa95 	bl	800a4c0 <RCCEx_PLL3_Config>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f9c:	e006      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fa4:	e002      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007fa6:	bf00      	nop
 8007fa8:	e000      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10b      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fb4:	4b8e      	ldr	r3, [pc, #568]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fc4:	4a8a      	ldr	r2, [pc, #552]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fca:	e003      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007fea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	d03a      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ffa:	2b30      	cmp	r3, #48	@ 0x30
 8007ffc:	d01f      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007ffe:	2b30      	cmp	r3, #48	@ 0x30
 8008000:	d819      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008002:	2b20      	cmp	r3, #32
 8008004:	d00c      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008006:	2b20      	cmp	r3, #32
 8008008:	d815      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d019      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800800e:	2b10      	cmp	r3, #16
 8008010:	d111      	bne.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008012:	4b77      	ldr	r3, [pc, #476]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008016:	4a76      	ldr	r2, [pc, #472]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800801c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800801e:	e011      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008024:	3308      	adds	r3, #8
 8008026:	2102      	movs	r1, #2
 8008028:	4618      	mov	r0, r3
 800802a:	f002 f997 	bl	800a35c <RCCEx_PLL2_Config>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008034:	e006      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800803c:	e002      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800803e:	bf00      	nop
 8008040:	e000      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800804c:	4b68      	ldr	r3, [pc, #416]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800804e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008050:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800805a:	4a65      	ldr	r2, [pc, #404]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800805c:	430b      	orrs	r3, r1
 800805e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008060:	e003      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008076:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800807a:	2300      	movs	r3, #0
 800807c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008080:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008084:	460b      	mov	r3, r1
 8008086:	4313      	orrs	r3, r2
 8008088:	d051      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008090:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008094:	d035      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800809a:	d82e      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800809c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080a0:	d031      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80080a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080a6:	d828      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ac:	d01a      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80080ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080b2:	d822      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80080b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080bc:	d007      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80080be:	e01c      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c0:	4b4b      	ldr	r3, [pc, #300]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c4:	4a4a      	ldr	r2, [pc, #296]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080cc:	e01c      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	3308      	adds	r3, #8
 80080d4:	2100      	movs	r1, #0
 80080d6:	4618      	mov	r0, r3
 80080d8:	f002 f940 	bl	800a35c <RCCEx_PLL2_Config>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080e2:	e011      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e8:	3328      	adds	r3, #40	@ 0x28
 80080ea:	2100      	movs	r1, #0
 80080ec:	4618      	mov	r0, r3
 80080ee:	f002 f9e7 	bl	800a4c0 <RCCEx_PLL3_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080f8:	e006      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008100:	e002      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008102:	bf00      	nop
 8008104:	e000      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008110:	4b37      	ldr	r3, [pc, #220]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008114:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800811e:	4a34      	ldr	r2, [pc, #208]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008120:	430b      	orrs	r3, r1
 8008122:	6513      	str	r3, [r2, #80]	@ 0x50
 8008124:	e003      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800812e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800813a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800813e:	2300      	movs	r3, #0
 8008140:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008144:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008148:	460b      	mov	r3, r1
 800814a:	4313      	orrs	r3, r2
 800814c:	d056      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800814e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008158:	d033      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800815a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800815e:	d82c      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008160:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008164:	d02f      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008166:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800816a:	d826      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800816c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008170:	d02b      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008172:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008176:	d820      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800817c:	d012      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800817e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008182:	d81a      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d022      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800818c:	d115      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008192:	3308      	adds	r3, #8
 8008194:	2101      	movs	r1, #1
 8008196:	4618      	mov	r0, r3
 8008198:	f002 f8e0 	bl	800a35c <RCCEx_PLL2_Config>
 800819c:	4603      	mov	r3, r0
 800819e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081a2:	e015      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a8:	3328      	adds	r3, #40	@ 0x28
 80081aa:	2101      	movs	r1, #1
 80081ac:	4618      	mov	r0, r3
 80081ae:	f002 f987 	bl	800a4c0 <RCCEx_PLL3_Config>
 80081b2:	4603      	mov	r3, r0
 80081b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081b8:	e00a      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081c0:	e006      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081c2:	bf00      	nop
 80081c4:	e004      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081c6:	bf00      	nop
 80081c8:	e002      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081ca:	bf00      	nop
 80081cc:	e000      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10d      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081d8:	4b05      	ldr	r3, [pc, #20]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80081e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081e6:	4a02      	ldr	r2, [pc, #8]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081e8:	430b      	orrs	r3, r1
 80081ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80081ec:	e006      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80081ee:	bf00      	nop
 80081f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800820c:	2300      	movs	r3, #0
 800820e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008212:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008216:	460b      	mov	r3, r1
 8008218:	4313      	orrs	r3, r2
 800821a:	d055      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800821c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008224:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008228:	d033      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800822a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800822e:	d82c      	bhi.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008234:	d02f      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823a:	d826      	bhi.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800823c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008240:	d02b      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008242:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008246:	d820      	bhi.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800824c:	d012      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800824e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008252:	d81a      	bhi.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d022      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800825c:	d115      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008262:	3308      	adds	r3, #8
 8008264:	2101      	movs	r1, #1
 8008266:	4618      	mov	r0, r3
 8008268:	f002 f878 	bl	800a35c <RCCEx_PLL2_Config>
 800826c:	4603      	mov	r3, r0
 800826e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008272:	e015      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008278:	3328      	adds	r3, #40	@ 0x28
 800827a:	2101      	movs	r1, #1
 800827c:	4618      	mov	r0, r3
 800827e:	f002 f91f 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008282:	4603      	mov	r3, r0
 8008284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008288:	e00a      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008290:	e006      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008292:	bf00      	nop
 8008294:	e004      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008296:	bf00      	nop
 8008298:	e002      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800829a:	bf00      	nop
 800829c:	e000      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800829e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10b      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082a8:	4ba3      	ldr	r3, [pc, #652]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082b8:	4a9f      	ldr	r2, [pc, #636]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082ba:	430b      	orrs	r3, r1
 80082bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80082be:	e003      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80082d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082d8:	2300      	movs	r3, #0
 80082da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082e2:	460b      	mov	r3, r1
 80082e4:	4313      	orrs	r3, r2
 80082e6:	d037      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80082e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082f2:	d00e      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80082f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082f8:	d816      	bhi.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d018      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80082fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008302:	d111      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008304:	4b8c      	ldr	r3, [pc, #560]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	4a8b      	ldr	r2, [pc, #556]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800830a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800830e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008310:	e00f      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008316:	3308      	adds	r3, #8
 8008318:	2101      	movs	r1, #1
 800831a:	4618      	mov	r0, r3
 800831c:	f002 f81e 	bl	800a35c <RCCEx_PLL2_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008326:	e004      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800832e:	e000      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800833a:	4b7f      	ldr	r3, [pc, #508]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800833c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800833e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008348:	4a7b      	ldr	r2, [pc, #492]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800834a:	430b      	orrs	r3, r1
 800834c:	6513      	str	r3, [r2, #80]	@ 0x50
 800834e:	e003      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008368:	2300      	movs	r3, #0
 800836a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800836e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008372:	460b      	mov	r3, r1
 8008374:	4313      	orrs	r3, r2
 8008376:	d039      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800837e:	2b03      	cmp	r3, #3
 8008380:	d81c      	bhi.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008382:	a201      	add	r2, pc, #4	@ (adr r2, 8008388 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	080083c5 	.word	0x080083c5
 800838c:	08008399 	.word	0x08008399
 8008390:	080083a7 	.word	0x080083a7
 8008394:	080083c5 	.word	0x080083c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008398:	4b67      	ldr	r3, [pc, #412]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800839a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839c:	4a66      	ldr	r2, [pc, #408]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800839e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083a4:	e00f      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083aa:	3308      	adds	r3, #8
 80083ac:	2102      	movs	r1, #2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 ffd4 	bl	800a35c <RCCEx_PLL2_Config>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083ba:	e004      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083c2:	e000      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80083c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083ce:	4b5a      	ldr	r3, [pc, #360]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d2:	f023 0103 	bic.w	r1, r3, #3
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083dc:	4a56      	ldr	r2, [pc, #344]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083de:	430b      	orrs	r3, r1
 80083e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083e2:	e003      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80083f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083fc:	2300      	movs	r3, #0
 80083fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008402:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008406:	460b      	mov	r3, r1
 8008408:	4313      	orrs	r3, r2
 800840a:	f000 809f 	beq.w	800854c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800840e:	4b4b      	ldr	r3, [pc, #300]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a4a      	ldr	r2, [pc, #296]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800841a:	f7f8 f833 	bl	8000484 <HAL_GetTick>
 800841e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008422:	e00b      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008424:	f7f8 f82e 	bl	8000484 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b64      	cmp	r3, #100	@ 0x64
 8008432:	d903      	bls.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800843a:	e005      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800843c:	4b3f      	ldr	r3, [pc, #252]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0ed      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800844c:	2b00      	cmp	r3, #0
 800844e:	d179      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008450:	4b39      	ldr	r3, [pc, #228]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008452:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008458:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800845c:	4053      	eors	r3, r2
 800845e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008462:	2b00      	cmp	r3, #0
 8008464:	d015      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008466:	4b34      	ldr	r3, [pc, #208]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800846a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800846e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008472:	4b31      	ldr	r3, [pc, #196]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008476:	4a30      	ldr	r2, [pc, #192]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800847c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800847e:	4b2e      	ldr	r3, [pc, #184]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008482:	4a2d      	ldr	r2, [pc, #180]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008488:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800848a:	4a2b      	ldr	r2, [pc, #172]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800848c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008490:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800849a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800849e:	d118      	bne.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a0:	f7f7 fff0 	bl	8000484 <HAL_GetTick>
 80084a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084a8:	e00d      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084aa:	f7f7 ffeb 	bl	8000484 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80084b4:	1ad2      	subs	r2, r2, r3
 80084b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d903      	bls.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80084c4:	e005      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084c6:	4b1c      	ldr	r3, [pc, #112]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0eb      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80084d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d129      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084ea:	d10e      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80084ec:	4b12      	ldr	r3, [pc, #72]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80084f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084fc:	091a      	lsrs	r2, r3, #4
 80084fe:	4b10      	ldr	r3, [pc, #64]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008500:	4013      	ands	r3, r2
 8008502:	4a0d      	ldr	r2, [pc, #52]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008504:	430b      	orrs	r3, r1
 8008506:	6113      	str	r3, [r2, #16]
 8008508:	e005      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800850a:	4b0b      	ldr	r3, [pc, #44]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	4a0a      	ldr	r2, [pc, #40]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008510:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008514:	6113      	str	r3, [r2, #16]
 8008516:	4b08      	ldr	r3, [pc, #32]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008518:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008526:	4a04      	ldr	r2, [pc, #16]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008528:	430b      	orrs	r3, r1
 800852a:	6713      	str	r3, [r2, #112]	@ 0x70
 800852c:	e00e      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800852e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008536:	e009      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008538:	58024400 	.word	0x58024400
 800853c:	58024800 	.word	0x58024800
 8008540:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800854c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	f002 0301 	and.w	r3, r2, #1
 8008558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800855c:	2300      	movs	r3, #0
 800855e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008562:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008566:	460b      	mov	r3, r1
 8008568:	4313      	orrs	r3, r2
 800856a:	f000 8089 	beq.w	8008680 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008574:	2b28      	cmp	r3, #40	@ 0x28
 8008576:	d86b      	bhi.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008578:	a201      	add	r2, pc, #4	@ (adr r2, 8008580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	08008659 	.word	0x08008659
 8008584:	08008651 	.word	0x08008651
 8008588:	08008651 	.word	0x08008651
 800858c:	08008651 	.word	0x08008651
 8008590:	08008651 	.word	0x08008651
 8008594:	08008651 	.word	0x08008651
 8008598:	08008651 	.word	0x08008651
 800859c:	08008651 	.word	0x08008651
 80085a0:	08008625 	.word	0x08008625
 80085a4:	08008651 	.word	0x08008651
 80085a8:	08008651 	.word	0x08008651
 80085ac:	08008651 	.word	0x08008651
 80085b0:	08008651 	.word	0x08008651
 80085b4:	08008651 	.word	0x08008651
 80085b8:	08008651 	.word	0x08008651
 80085bc:	08008651 	.word	0x08008651
 80085c0:	0800863b 	.word	0x0800863b
 80085c4:	08008651 	.word	0x08008651
 80085c8:	08008651 	.word	0x08008651
 80085cc:	08008651 	.word	0x08008651
 80085d0:	08008651 	.word	0x08008651
 80085d4:	08008651 	.word	0x08008651
 80085d8:	08008651 	.word	0x08008651
 80085dc:	08008651 	.word	0x08008651
 80085e0:	08008659 	.word	0x08008659
 80085e4:	08008651 	.word	0x08008651
 80085e8:	08008651 	.word	0x08008651
 80085ec:	08008651 	.word	0x08008651
 80085f0:	08008651 	.word	0x08008651
 80085f4:	08008651 	.word	0x08008651
 80085f8:	08008651 	.word	0x08008651
 80085fc:	08008651 	.word	0x08008651
 8008600:	08008659 	.word	0x08008659
 8008604:	08008651 	.word	0x08008651
 8008608:	08008651 	.word	0x08008651
 800860c:	08008651 	.word	0x08008651
 8008610:	08008651 	.word	0x08008651
 8008614:	08008651 	.word	0x08008651
 8008618:	08008651 	.word	0x08008651
 800861c:	08008651 	.word	0x08008651
 8008620:	08008659 	.word	0x08008659
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008628:	3308      	adds	r3, #8
 800862a:	2101      	movs	r1, #1
 800862c:	4618      	mov	r0, r3
 800862e:	f001 fe95 	bl	800a35c <RCCEx_PLL2_Config>
 8008632:	4603      	mov	r3, r0
 8008634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008638:	e00f      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863e:	3328      	adds	r3, #40	@ 0x28
 8008640:	2101      	movs	r1, #1
 8008642:	4618      	mov	r0, r3
 8008644:	f001 ff3c 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800864e:	e004      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008656:	e000      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800865a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008662:	4bbf      	ldr	r3, [pc, #764]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008666:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008670:	4abb      	ldr	r2, [pc, #748]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008672:	430b      	orrs	r3, r1
 8008674:	6553      	str	r3, [r2, #84]	@ 0x54
 8008676:	e003      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800867c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f002 0302 	and.w	r3, r2, #2
 800868c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008690:	2300      	movs	r3, #0
 8008692:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008696:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800869a:	460b      	mov	r3, r1
 800869c:	4313      	orrs	r3, r2
 800869e:	d041      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80086a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086a6:	2b05      	cmp	r3, #5
 80086a8:	d824      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80086aa:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086fd 	.word	0x080086fd
 80086b4:	080086c9 	.word	0x080086c9
 80086b8:	080086df 	.word	0x080086df
 80086bc:	080086fd 	.word	0x080086fd
 80086c0:	080086fd 	.word	0x080086fd
 80086c4:	080086fd 	.word	0x080086fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086cc:	3308      	adds	r3, #8
 80086ce:	2101      	movs	r1, #1
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 fe43 	bl	800a35c <RCCEx_PLL2_Config>
 80086d6:	4603      	mov	r3, r0
 80086d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086dc:	e00f      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e2:	3328      	adds	r3, #40	@ 0x28
 80086e4:	2101      	movs	r1, #1
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 feea 	bl	800a4c0 <RCCEx_PLL3_Config>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086f2:	e004      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086fa:	e000      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80086fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008706:	4b96      	ldr	r3, [pc, #600]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870a:	f023 0107 	bic.w	r1, r3, #7
 800870e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008714:	4a92      	ldr	r2, [pc, #584]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008716:	430b      	orrs	r3, r1
 8008718:	6553      	str	r3, [r2, #84]	@ 0x54
 800871a:	e003      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	f002 0304 	and.w	r3, r2, #4
 8008730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008734:	2300      	movs	r3, #0
 8008736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800873a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800873e:	460b      	mov	r3, r1
 8008740:	4313      	orrs	r3, r2
 8008742:	d044      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800874c:	2b05      	cmp	r3, #5
 800874e:	d825      	bhi.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008750:	a201      	add	r2, pc, #4	@ (adr r2, 8008758 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	080087a5 	.word	0x080087a5
 800875c:	08008771 	.word	0x08008771
 8008760:	08008787 	.word	0x08008787
 8008764:	080087a5 	.word	0x080087a5
 8008768:	080087a5 	.word	0x080087a5
 800876c:	080087a5 	.word	0x080087a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008774:	3308      	adds	r3, #8
 8008776:	2101      	movs	r1, #1
 8008778:	4618      	mov	r0, r3
 800877a:	f001 fdef 	bl	800a35c <RCCEx_PLL2_Config>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008784:	e00f      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878a:	3328      	adds	r3, #40	@ 0x28
 800878c:	2101      	movs	r1, #1
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fe96 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008794:	4603      	mov	r3, r0
 8008796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800879a:	e004      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087a2:	e000      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80087a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10b      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087ae:	4b6c      	ldr	r3, [pc, #432]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087b2:	f023 0107 	bic.w	r1, r3, #7
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087be:	4a68      	ldr	r2, [pc, #416]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087c0:	430b      	orrs	r3, r1
 80087c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80087c4:	e003      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f002 0320 	and.w	r3, r2, #32
 80087da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087de:	2300      	movs	r3, #0
 80087e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087e8:	460b      	mov	r3, r1
 80087ea:	4313      	orrs	r3, r2
 80087ec:	d055      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087fa:	d033      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80087fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008800:	d82c      	bhi.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008806:	d02f      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800880c:	d826      	bhi.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800880e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008812:	d02b      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008814:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008818:	d820      	bhi.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800881a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800881e:	d012      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008824:	d81a      	bhi.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d022      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800882a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800882e:	d115      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008834:	3308      	adds	r3, #8
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f001 fd8f 	bl	800a35c <RCCEx_PLL2_Config>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008844:	e015      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884a:	3328      	adds	r3, #40	@ 0x28
 800884c:	2102      	movs	r1, #2
 800884e:	4618      	mov	r0, r3
 8008850:	f001 fe36 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008854:	4603      	mov	r3, r0
 8008856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800885a:	e00a      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008862:	e006      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008864:	bf00      	nop
 8008866:	e004      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008868:	bf00      	nop
 800886a:	e002      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800887a:	4b39      	ldr	r3, [pc, #228]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800887c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800887e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800888a:	4a35      	ldr	r2, [pc, #212]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800888c:	430b      	orrs	r3, r1
 800888e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008890:	e003      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800889a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80088a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80088aa:	2300      	movs	r3, #0
 80088ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4313      	orrs	r3, r2
 80088b8:	d058      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80088ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088c6:	d033      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80088c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088cc:	d82c      	bhi.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d2:	d02f      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80088d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d8:	d826      	bhi.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088de:	d02b      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80088e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088e4:	d820      	bhi.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088ea:	d012      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80088ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f0:	d81a      	bhi.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d022      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80088f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088fa:	d115      	bne.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008900:	3308      	adds	r3, #8
 8008902:	2100      	movs	r1, #0
 8008904:	4618      	mov	r0, r3
 8008906:	f001 fd29 	bl	800a35c <RCCEx_PLL2_Config>
 800890a:	4603      	mov	r3, r0
 800890c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008910:	e015      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008916:	3328      	adds	r3, #40	@ 0x28
 8008918:	2102      	movs	r1, #2
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fdd0 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008926:	e00a      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800892e:	e006      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008930:	bf00      	nop
 8008932:	e004      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008934:	bf00      	nop
 8008936:	e002      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008938:	bf00      	nop
 800893a:	e000      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800893c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800893e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10e      	bne.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008946:	4b06      	ldr	r3, [pc, #24]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800894a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800894e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008952:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008956:	4a02      	ldr	r2, [pc, #8]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008958:	430b      	orrs	r3, r1
 800895a:	6593      	str	r3, [r2, #88]	@ 0x58
 800895c:	e006      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800895e:	bf00      	nop
 8008960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800896c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800897c:	2300      	movs	r3, #0
 800897e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008982:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008986:	460b      	mov	r3, r1
 8008988:	4313      	orrs	r3, r2
 800898a:	d055      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800898c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008990:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008994:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008998:	d033      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800899a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800899e:	d82c      	bhi.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089a4:	d02f      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80089a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089aa:	d826      	bhi.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089b0:	d02b      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80089b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089b6:	d820      	bhi.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089bc:	d012      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80089be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089c2:	d81a      	bhi.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d022      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80089c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089cc:	d115      	bne.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d2:	3308      	adds	r3, #8
 80089d4:	2100      	movs	r1, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 fcc0 	bl	800a35c <RCCEx_PLL2_Config>
 80089dc:	4603      	mov	r3, r0
 80089de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089e2:	e015      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e8:	3328      	adds	r3, #40	@ 0x28
 80089ea:	2102      	movs	r1, #2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 fd67 	bl	800a4c0 <RCCEx_PLL3_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089f8:	e00a      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a00:	e006      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a02:	bf00      	nop
 8008a04:	e004      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a06:	bf00      	nop
 8008a08:	e002      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a0a:	bf00      	nop
 8008a0c:	e000      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10b      	bne.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a18:	4ba1      	ldr	r3, [pc, #644]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a28:	4a9d      	ldr	r2, [pc, #628]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a2a:	430b      	orrs	r3, r1
 8008a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a2e:	e003      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	f002 0308 	and.w	r3, r2, #8
 8008a44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008a52:	460b      	mov	r3, r1
 8008a54:	4313      	orrs	r3, r2
 8008a56:	d01e      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a64:	d10c      	bne.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6a:	3328      	adds	r3, #40	@ 0x28
 8008a6c:	2102      	movs	r1, #2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 fd26 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a80:	4b87      	ldr	r3, [pc, #540]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a90:	4a83      	ldr	r2, [pc, #524]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a92:	430b      	orrs	r3, r1
 8008a94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f002 0310 	and.w	r3, r2, #16
 8008aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008aac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	d01e      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac2:	d10c      	bne.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac8:	3328      	adds	r3, #40	@ 0x28
 8008aca:	2102      	movs	r1, #2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 fcf7 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ade:	4b70      	ldr	r3, [pc, #448]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008aee:	4a6c      	ldr	r2, [pc, #432]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008af0:	430b      	orrs	r3, r1
 8008af2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b04:	2300      	movs	r3, #0
 8008b06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4313      	orrs	r3, r2
 8008b12:	d03e      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b20:	d022      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008b22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b26:	d81b      	bhi.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b30:	d00b      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008b32:	e015      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b38:	3308      	adds	r3, #8
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 fc0d 	bl	800a35c <RCCEx_PLL2_Config>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b48:	e00f      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4e:	3328      	adds	r3, #40	@ 0x28
 8008b50:	2102      	movs	r1, #2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f001 fcb4 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b5e:	e004      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b66:	e000      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b72:	4b4b      	ldr	r3, [pc, #300]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b82:	4a47      	ldr	r2, [pc, #284]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b84:	430b      	orrs	r3, r1
 8008b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b88:	e003      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ba4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4313      	orrs	r3, r2
 8008bac:	d03b      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bba:	d01f      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008bbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bc0:	d818      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bc6:	d003      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008bc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bcc:	d007      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008bce:	e011      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd0:	4b33      	ldr	r3, [pc, #204]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd4:	4a32      	ldr	r2, [pc, #200]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bdc:	e00f      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be2:	3328      	adds	r3, #40	@ 0x28
 8008be4:	2101      	movs	r1, #1
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 fc6a 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bf2:	e004      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bfa:	e000      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10b      	bne.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c06:	4b26      	ldr	r3, [pc, #152]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c16:	4a22      	ldr	r2, [pc, #136]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c1c:	e003      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008c32:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c34:	2300      	movs	r3, #0
 8008c36:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	d034      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c50:	d007      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008c52:	e011      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c54:	4b12      	ldr	r3, [pc, #72]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c58:	4a11      	ldr	r2, [pc, #68]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c60:	e00e      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c66:	3308      	adds	r3, #8
 8008c68:	2102      	movs	r1, #2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 fb76 	bl	800a35c <RCCEx_PLL2_Config>
 8008c70:	4603      	mov	r3, r0
 8008c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c76:	e003      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10d      	bne.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c88:	4b05      	ldr	r3, [pc, #20]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c96:	4a02      	ldr	r2, [pc, #8]	@ (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c9c:	e006      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008c9e:	bf00      	nop
 8008ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cba:	2300      	movs	r3, #0
 8008cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cbe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	d00c      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ccc:	3328      	adds	r3, #40	@ 0x28
 8008cce:	2102      	movs	r1, #2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f001 fbf5 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008cee:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cf4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	d038      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d0a:	d018      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d10:	d811      	bhi.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d16:	d014      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d1c:	d80b      	bhi.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d011      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d26:	d106      	bne.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d28:	4bc3      	ldr	r3, [pc, #780]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2c:	4ac2      	ldr	r2, [pc, #776]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d34:	e008      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d3c:	e004      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d3e:	bf00      	nop
 8008d40:	e002      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d42:	bf00      	nop
 8008d44:	e000      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10b      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d50:	4bb9      	ldr	r3, [pc, #740]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d60:	4ab5      	ldr	r2, [pc, #724]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d62:	430b      	orrs	r3, r1
 8008d64:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d66:	e003      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d7e:	2300      	movs	r3, #0
 8008d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008d86:	460b      	mov	r3, r1
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	d009      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d8c:	4baa      	ldr	r3, [pc, #680]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d9a:	4aa7      	ldr	r2, [pc, #668]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008dac:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dae:	2300      	movs	r3, #0
 8008db0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008db2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008db6:	460b      	mov	r3, r1
 8008db8:	4313      	orrs	r3, r2
 8008dba:	d00a      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008dbc:	4b9e      	ldr	r3, [pc, #632]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008dcc:	4a9a      	ldr	r2, [pc, #616]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008de0:	2300      	movs	r3, #0
 8008de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008de4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008de8:	460b      	mov	r3, r1
 8008dea:	4313      	orrs	r3, r2
 8008dec:	d009      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008dee:	4b92      	ldr	r3, [pc, #584]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dfc:	4a8e      	ldr	r2, [pc, #568]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dfe:	430b      	orrs	r3, r1
 8008e00:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008e0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e10:	2300      	movs	r3, #0
 8008e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	d00e      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e1e:	4b86      	ldr	r3, [pc, #536]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	4a85      	ldr	r2, [pc, #532]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e28:	6113      	str	r3, [r2, #16]
 8008e2a:	4b83      	ldr	r3, [pc, #524]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e2c:	6919      	ldr	r1, [r3, #16]
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e36:	4a80      	ldr	r2, [pc, #512]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008e48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e52:	460b      	mov	r3, r1
 8008e54:	4313      	orrs	r3, r2
 8008e56:	d009      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e58:	4b77      	ldr	r3, [pc, #476]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e5c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e66:	4a74      	ldr	r2, [pc, #464]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008e82:	460b      	mov	r3, r1
 8008e84:	4313      	orrs	r3, r2
 8008e86:	d00a      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e88:	4b6b      	ldr	r3, [pc, #428]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e8c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e98:	4a67      	ldr	r2, [pc, #412]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e9a:	430b      	orrs	r3, r1
 8008e9c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	d011      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f001 fa4a 	bl	800a35c <RCCEx_PLL2_Config>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	6239      	str	r1, [r7, #32]
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ef0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	d011      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efe:	3308      	adds	r3, #8
 8008f00:	2101      	movs	r1, #1
 8008f02:	4618      	mov	r0, r3
 8008f04:	f001 fa2a 	bl	800a35c <RCCEx_PLL2_Config>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	2100      	movs	r1, #0
 8008f28:	61b9      	str	r1, [r7, #24]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	61fb      	str	r3, [r7, #28]
 8008f30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f34:	460b      	mov	r3, r1
 8008f36:	4313      	orrs	r3, r2
 8008f38:	d011      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3e:	3308      	adds	r3, #8
 8008f40:	2102      	movs	r1, #2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 fa0a 	bl	800a35c <RCCEx_PLL2_Config>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	2100      	movs	r1, #0
 8008f68:	6139      	str	r1, [r7, #16]
 8008f6a:	f003 0308 	and.w	r3, r3, #8
 8008f6e:	617b      	str	r3, [r7, #20]
 8008f70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f74:	460b      	mov	r3, r1
 8008f76:	4313      	orrs	r3, r2
 8008f78:	d011      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7e:	3328      	adds	r3, #40	@ 0x28
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 fa9c 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	f003 0310 	and.w	r3, r3, #16
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	d011      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fbe:	3328      	adds	r3, #40	@ 0x28
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f001 fa7c 	bl	800a4c0 <RCCEx_PLL3_Config>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	f003 0320 	and.w	r3, r3, #32
 8008fee:	607b      	str	r3, [r7, #4]
 8008ff0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	d011      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ffe:	3328      	adds	r3, #40	@ 0x28
 8009000:	2102      	movs	r1, #2
 8009002:	4618      	mov	r0, r3
 8009004:	f001 fa5c 	bl	800a4c0 <RCCEx_PLL3_Config>
 8009008:	4603      	mov	r3, r0
 800900a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800900e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800901a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800901e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	e000      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
}
 800902c:	4618      	mov	r0, r3
 800902e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009032:	46bd      	mov	sp, r7
 8009034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009038:	58024400 	.word	0x58024400

0800903c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b090      	sub	sp, #64	@ 0x40
 8009040:	af00      	add	r7, sp, #0
 8009042:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800904a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800904e:	430b      	orrs	r3, r1
 8009050:	f040 8094 	bne.w	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009054:	4b9e      	ldr	r3, [pc, #632]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	2b04      	cmp	r3, #4
 8009062:	f200 8087 	bhi.w	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009066:	a201      	add	r2, pc, #4	@ (adr r2, 800906c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	08009081 	.word	0x08009081
 8009070:	080090a9 	.word	0x080090a9
 8009074:	080090d1 	.word	0x080090d1
 8009078:	0800916d 	.word	0x0800916d
 800907c:	080090f9 	.word	0x080090f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009080:	4b93      	ldr	r3, [pc, #588]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009088:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800908c:	d108      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800908e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009092:	4618      	mov	r0, r3
 8009094:	f001 f810 	bl	800a0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800909c:	f000 bd45 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a4:	f000 bd41 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090a8:	4b89      	ldr	r3, [pc, #548]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090b4:	d108      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090b6:	f107 0318 	add.w	r3, r7, #24
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 fd54 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090c4:	f000 bd31 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090cc:	f000 bd2d 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090d0:	4b7f      	ldr	r3, [pc, #508]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090dc:	d108      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090de:	f107 030c 	add.w	r3, r7, #12
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fe94 	bl	8009e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090ec:	f000 bd1d 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090f4:	f000 bd19 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090f8:	4b75      	ldr	r3, [pc, #468]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009100:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009102:	4b73      	ldr	r3, [pc, #460]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	2b04      	cmp	r3, #4
 800910c:	d10c      	bne.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800910e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009110:	2b00      	cmp	r3, #0
 8009112:	d109      	bne.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009114:	4b6e      	ldr	r3, [pc, #440]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	08db      	lsrs	r3, r3, #3
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	4a6d      	ldr	r2, [pc, #436]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
 8009124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009126:	e01f      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009128:	4b69      	ldr	r3, [pc, #420]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009134:	d106      	bne.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800913c:	d102      	bne.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800913e:	4b66      	ldr	r3, [pc, #408]	@ (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009142:	e011      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009144:	4b62      	ldr	r3, [pc, #392]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800914c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009150:	d106      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009158:	d102      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800915a:	4b60      	ldr	r3, [pc, #384]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800915c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800915e:	e003      	b.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009164:	f000 bce1 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009168:	f000 bcdf 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800916c:	4b5c      	ldr	r3, [pc, #368]	@ (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009170:	f000 bcdb 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009178:	f000 bcd7 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800917c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009180:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009184:	430b      	orrs	r3, r1
 8009186:	f040 80ad 	bne.w	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800918a:	4b51      	ldr	r3, [pc, #324]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800918c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800918e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009192:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800919a:	d056      	beq.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091a2:	f200 8090 	bhi.w	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80091aa:	f000 8088 	beq.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80091ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80091b2:	f200 8088 	bhi.w	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80091b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b8:	2b80      	cmp	r3, #128	@ 0x80
 80091ba:	d032      	beq.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80091bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091be:	2b80      	cmp	r3, #128	@ 0x80
 80091c0:	f200 8081 	bhi.w	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	2b40      	cmp	r3, #64	@ 0x40
 80091ce:	d014      	beq.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80091d0:	e079      	b.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091d2:	4b3f      	ldr	r3, [pc, #252]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091de:	d108      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 ff67 	bl	800a0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ee:	f000 bc9c 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f6:	f000 bc98 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091fa:	4b35      	ldr	r3, [pc, #212]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009206:	d108      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009208:	f107 0318 	add.w	r3, r7, #24
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fcab 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009216:	f000 bc88 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921e:	f000 bc84 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009222:	4b2b      	ldr	r3, [pc, #172]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800922a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800922e:	d108      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fdeb 	bl	8009e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800923e:	f000 bc74 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009246:	f000 bc70 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800924a:	4b21      	ldr	r3, [pc, #132]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800924c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800924e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009252:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009254:	4b1e      	ldr	r3, [pc, #120]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b04      	cmp	r3, #4
 800925e:	d10c      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009266:	4b1a      	ldr	r3, [pc, #104]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	08db      	lsrs	r3, r3, #3
 800926c:	f003 0303 	and.w	r3, r3, #3
 8009270:	4a18      	ldr	r2, [pc, #96]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009272:	fa22 f303 	lsr.w	r3, r2, r3
 8009276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009278:	e01f      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800927a:	4b15      	ldr	r3, [pc, #84]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009286:	d106      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800928e:	d102      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009290:	4b11      	ldr	r3, [pc, #68]	@ (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009294:	e011      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009296:	4b0e      	ldr	r3, [pc, #56]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800929e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092a2:	d106      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80092a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092aa:	d102      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092ac:	4b0b      	ldr	r3, [pc, #44]	@ (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092b0:	e003      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80092b6:	f000 bc38 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092ba:	f000 bc36 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092be:	4b08      	ldr	r3, [pc, #32]	@ (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80092c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c2:	f000 bc32 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ca:	f000 bc2e 	b.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092ce:	bf00      	nop
 80092d0:	58024400 	.word	0x58024400
 80092d4:	03d09000 	.word	0x03d09000
 80092d8:	003d0900 	.word	0x003d0900
 80092dc:	017d7840 	.word	0x017d7840
 80092e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80092e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80092ec:	430b      	orrs	r3, r1
 80092ee:	f040 809c 	bne.w	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80092f2:	4b9e      	ldr	r3, [pc, #632]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80092fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009302:	d054      	beq.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009306:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800930a:	f200 808b 	bhi.w	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009314:	f000 8083 	beq.w	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800931e:	f200 8081 	bhi.w	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009328:	d02f      	beq.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009330:	d878      	bhi.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	2b00      	cmp	r3, #0
 8009336:	d004      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800933e:	d012      	beq.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009340:	e070      	b.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009342:	4b8a      	ldr	r3, [pc, #552]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800934a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800934e:	d107      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009354:	4618      	mov	r0, r3
 8009356:	f000 feaf 	bl	800a0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800935a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800935e:	e3e4      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009364:	e3e1      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009366:	4b81      	ldr	r3, [pc, #516]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800936e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009372:	d107      	bne.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009374:	f107 0318 	add.w	r3, r7, #24
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fbf5 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009382:	e3d2      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009388:	e3cf      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800938a:	4b78      	ldr	r3, [pc, #480]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009396:	d107      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009398:	f107 030c 	add.w	r3, r7, #12
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fd37 	bl	8009e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093a6:	e3c0      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ac:	e3bd      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093ae:	4b6f      	ldr	r3, [pc, #444]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80093b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093b8:	4b6c      	ldr	r3, [pc, #432]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d10c      	bne.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80093c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d109      	bne.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093ca:	4b68      	ldr	r3, [pc, #416]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	08db      	lsrs	r3, r3, #3
 80093d0:	f003 0303 	and.w	r3, r3, #3
 80093d4:	4a66      	ldr	r2, [pc, #408]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80093d6:	fa22 f303 	lsr.w	r3, r2, r3
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093dc:	e01e      	b.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093de:	4b63      	ldr	r3, [pc, #396]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ea:	d106      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80093ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093f2:	d102      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093f4:	4b5f      	ldr	r3, [pc, #380]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093f8:	e010      	b.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093fa:	4b5c      	ldr	r3, [pc, #368]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009406:	d106      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800940e:	d102      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009410:	4b59      	ldr	r3, [pc, #356]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009414:	e002      	b.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800941a:	e386      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800941c:	e385      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800941e:	4b57      	ldr	r3, [pc, #348]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009422:	e382      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009424:	2300      	movs	r3, #0
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009428:	e37f      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800942a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800942e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009432:	430b      	orrs	r3, r1
 8009434:	f040 80a7 	bne.w	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009438:	4b4c      	ldr	r3, [pc, #304]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800943a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800943c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009440:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009448:	d055      	beq.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009450:	f200 8096 	bhi.w	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009456:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800945a:	f000 8084 	beq.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009464:	f200 808c 	bhi.w	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800946e:	d030      	beq.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009476:	f200 8083 	bhi.w	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	2b00      	cmp	r3, #0
 800947e:	d004      	beq.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009486:	d012      	beq.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009488:	e07a      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800948a:	4b38      	ldr	r3, [pc, #224]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009496:	d107      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fe0b 	bl	800a0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a6:	e340      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ac:	e33d      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094ae:	4b2f      	ldr	r3, [pc, #188]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094ba:	d107      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094bc:	f107 0318 	add.w	r3, r7, #24
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fb51 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ca:	e32e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d0:	e32b      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094d2:	4b26      	ldr	r3, [pc, #152]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094de:	d107      	bne.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094e0:	f107 030c 	add.w	r3, r7, #12
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 fc93 	bl	8009e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ee:	e31c      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f4:	e319      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094f6:	4b1d      	ldr	r3, [pc, #116]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009500:	4b1a      	ldr	r3, [pc, #104]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	2b04      	cmp	r3, #4
 800950a:	d10c      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800950c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950e:	2b00      	cmp	r3, #0
 8009510:	d109      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009512:	4b16      	ldr	r3, [pc, #88]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	08db      	lsrs	r3, r3, #3
 8009518:	f003 0303 	and.w	r3, r3, #3
 800951c:	4a14      	ldr	r2, [pc, #80]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800951e:	fa22 f303 	lsr.w	r3, r2, r3
 8009522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009524:	e01e      	b.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009526:	4b11      	ldr	r3, [pc, #68]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800952e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009532:	d106      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800953a:	d102      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800953c:	4b0d      	ldr	r3, [pc, #52]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009540:	e010      	b.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009542:	4b0a      	ldr	r3, [pc, #40]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800954a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800954e:	d106      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009556:	d102      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009558:	4b07      	ldr	r3, [pc, #28]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800955a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800955c:	e002      	b.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009562:	e2e2      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009564:	e2e1      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009566:	4b05      	ldr	r3, [pc, #20]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800956a:	e2de      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800956c:	58024400 	.word	0x58024400
 8009570:	03d09000 	.word	0x03d09000
 8009574:	003d0900 	.word	0x003d0900
 8009578:	017d7840 	.word	0x017d7840
 800957c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009584:	e2d1      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800958a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800958e:	430b      	orrs	r3, r1
 8009590:	f040 809c 	bne.w	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009594:	4b93      	ldr	r3, [pc, #588]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009598:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800959c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800959e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095a4:	d054      	beq.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80095a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095ac:	f200 808b 	bhi.w	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095b6:	f000 8083 	beq.w	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80095ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095c0:	f200 8081 	bhi.w	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80095c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ca:	d02f      	beq.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80095cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095d2:	d878      	bhi.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80095d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d004      	beq.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095e0:	d012      	beq.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80095e2:	e070      	b.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095e4:	4b7f      	ldr	r3, [pc, #508]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095f0:	d107      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fd5e 	bl	800a0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009600:	e293      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009606:	e290      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009608:	4b76      	ldr	r3, [pc, #472]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009614:	d107      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009616:	f107 0318 	add.w	r3, r7, #24
 800961a:	4618      	mov	r0, r3
 800961c:	f000 faa4 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009624:	e281      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962a:	e27e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800962c:	4b6d      	ldr	r3, [pc, #436]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009638:	d107      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800963a:	f107 030c 	add.w	r3, r7, #12
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fbe6 	bl	8009e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009648:	e26f      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964e:	e26c      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009650:	4b64      	ldr	r3, [pc, #400]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009654:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009658:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800965a:	4b62      	ldr	r3, [pc, #392]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0304 	and.w	r3, r3, #4
 8009662:	2b04      	cmp	r3, #4
 8009664:	d10c      	bne.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800966c:	4b5d      	ldr	r3, [pc, #372]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	08db      	lsrs	r3, r3, #3
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	4a5c      	ldr	r2, [pc, #368]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009678:	fa22 f303 	lsr.w	r3, r2, r3
 800967c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800967e:	e01e      	b.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009680:	4b58      	ldr	r3, [pc, #352]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800968c:	d106      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800968e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009694:	d102      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009696:	4b55      	ldr	r3, [pc, #340]	@ (80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800969a:	e010      	b.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800969c:	4b51      	ldr	r3, [pc, #324]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096a8:	d106      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80096aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096b0:	d102      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096b2:	4b4f      	ldr	r3, [pc, #316]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80096b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b6:	e002      	b.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096bc:	e235      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096be:	e234      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096c0:	4b4c      	ldr	r3, [pc, #304]	@ (80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c4:	e231      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ca:	e22e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80096cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096d0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80096d4:	430b      	orrs	r3, r1
 80096d6:	f040 808f 	bne.w	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80096da:	4b42      	ldr	r3, [pc, #264]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096de:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80096e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80096e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096ea:	d06b      	beq.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80096ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096f2:	d874      	bhi.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80096f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096fa:	d056      	beq.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80096fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009702:	d86c      	bhi.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009706:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800970a:	d03b      	beq.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800970c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009712:	d864      	bhi.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800971a:	d021      	beq.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800971c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009722:	d85c      	bhi.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009730:	d004      	beq.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009732:	e054      	b.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009734:	f7fe fa20 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 8009738:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800973a:	e1f6      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800973c:	4b29      	ldr	r3, [pc, #164]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009748:	d107      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800974a:	f107 0318 	add.w	r3, r7, #24
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fa0a 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009758:	e1e7      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800975e:	e1e4      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009760:	4b20      	ldr	r3, [pc, #128]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800976c:	d107      	bne.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800976e:	f107 030c 	add.w	r3, r7, #12
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fb4c 	bl	8009e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800977c:	e1d5      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009782:	e1d2      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009784:	4b17      	ldr	r3, [pc, #92]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	2b04      	cmp	r3, #4
 800978e:	d109      	bne.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009790:	4b14      	ldr	r3, [pc, #80]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	08db      	lsrs	r3, r3, #3
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	4a13      	ldr	r2, [pc, #76]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
 80097a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a2:	e1c2      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a8:	e1bf      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80097aa:	4b0e      	ldr	r3, [pc, #56]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097b6:	d102      	bne.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80097b8:	4b0c      	ldr	r3, [pc, #48]	@ (80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097bc:	e1b5      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c2:	e1b2      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097c4:	4b07      	ldr	r3, [pc, #28]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097d0:	d102      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80097d2:	4b07      	ldr	r3, [pc, #28]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80097d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097d6:	e1a8      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097dc:	e1a5      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e2:	e1a2      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097e4:	58024400 	.word	0x58024400
 80097e8:	03d09000 	.word	0x03d09000
 80097ec:	003d0900 	.word	0x003d0900
 80097f0:	017d7840 	.word	0x017d7840
 80097f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80097f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097fc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009800:	430b      	orrs	r3, r1
 8009802:	d173      	bne.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009804:	4b9c      	ldr	r3, [pc, #624]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800980c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800980e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009814:	d02f      	beq.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800981c:	d863      	bhi.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800981e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009820:	2b00      	cmp	r3, #0
 8009822:	d004      	beq.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800982a:	d012      	beq.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800982c:	e05b      	b.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800982e:	4b92      	ldr	r3, [pc, #584]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800983a:	d107      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800983c:	f107 0318 	add.w	r3, r7, #24
 8009840:	4618      	mov	r0, r3
 8009842:	f000 f991 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984a:	e16e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009850:	e16b      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009852:	4b89      	ldr	r3, [pc, #548]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800985a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800985e:	d107      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009860:	f107 030c 	add.w	r3, r7, #12
 8009864:	4618      	mov	r0, r3
 8009866:	f000 fad3 	bl	8009e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800986e:	e15c      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009874:	e159      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009876:	4b80      	ldr	r3, [pc, #512]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800987a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800987e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009880:	4b7d      	ldr	r3, [pc, #500]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0304 	and.w	r3, r3, #4
 8009888:	2b04      	cmp	r3, #4
 800988a:	d10c      	bne.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800988c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988e:	2b00      	cmp	r3, #0
 8009890:	d109      	bne.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009892:	4b79      	ldr	r3, [pc, #484]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	08db      	lsrs	r3, r3, #3
 8009898:	f003 0303 	and.w	r3, r3, #3
 800989c:	4a77      	ldr	r2, [pc, #476]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800989e:	fa22 f303 	lsr.w	r3, r2, r3
 80098a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098a4:	e01e      	b.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098a6:	4b74      	ldr	r3, [pc, #464]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b2:	d106      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80098b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098ba:	d102      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098bc:	4b70      	ldr	r3, [pc, #448]	@ (8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80098be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098c0:	e010      	b.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098c2:	4b6d      	ldr	r3, [pc, #436]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098ce:	d106      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80098d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098d6:	d102      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098d8:	4b6a      	ldr	r3, [pc, #424]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098dc:	e002      	b.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80098e2:	e122      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098e4:	e121      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ea:	e11e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80098ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098f0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80098f4:	430b      	orrs	r3, r1
 80098f6:	d133      	bne.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80098f8:	4b5f      	ldr	r3, [pc, #380]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009900:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009904:	2b00      	cmp	r3, #0
 8009906:	d004      	beq.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800990e:	d012      	beq.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009910:	e023      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009912:	4b59      	ldr	r3, [pc, #356]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800991a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800991e:	d107      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fbc7 	bl	800a0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800992e:	e0fc      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009934:	e0f9      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009936:	4b50      	ldr	r3, [pc, #320]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800993e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009942:	d107      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009944:	f107 0318 	add.w	r3, r7, #24
 8009948:	4618      	mov	r0, r3
 800994a:	f000 f90d 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009952:	e0ea      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009958:	e0e7      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995e:	e0e4      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009964:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009968:	430b      	orrs	r3, r1
 800996a:	f040 808d 	bne.w	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800996e:	4b42      	ldr	r3, [pc, #264]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009972:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009976:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800997e:	d06b      	beq.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009986:	d874      	bhi.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800998e:	d056      	beq.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009996:	d86c      	bhi.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800999e:	d03b      	beq.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80099a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099a6:	d864      	bhi.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80099a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099ae:	d021      	beq.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099b6:	d85c      	bhi.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d004      	beq.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80099be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099c4:	d004      	beq.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80099c6:	e054      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80099c8:	f000 f8b8 	bl	8009b3c <HAL_RCCEx_GetD3PCLK1Freq>
 80099cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099ce:	e0ac      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099d0:	4b29      	ldr	r3, [pc, #164]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099dc:	d107      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099de:	f107 0318 	add.w	r3, r7, #24
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f8c0 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ec:	e09d      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f2:	e09a      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099f4:	4b20      	ldr	r3, [pc, #128]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a00:	d107      	bne.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a02:	f107 030c 	add.w	r3, r7, #12
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fa02 	bl	8009e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a10:	e08b      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a16:	e088      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a18:	4b17      	ldr	r3, [pc, #92]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d109      	bne.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a24:	4b14      	ldr	r3, [pc, #80]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	08db      	lsrs	r3, r3, #3
 8009a2a:	f003 0303 	and.w	r3, r3, #3
 8009a2e:	4a13      	ldr	r2, [pc, #76]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009a30:	fa22 f303 	lsr.w	r3, r2, r3
 8009a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a36:	e078      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a3c:	e075      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a4a:	d102      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a50:	e06b      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a56:	e068      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a58:	4b07      	ldr	r3, [pc, #28]	@ (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a64:	d102      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009a66:	4b07      	ldr	r3, [pc, #28]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a6a:	e05e      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a70:	e05b      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a76:	e058      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a78:	58024400 	.word	0x58024400
 8009a7c:	03d09000 	.word	0x03d09000
 8009a80:	003d0900 	.word	0x003d0900
 8009a84:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a8c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009a90:	430b      	orrs	r3, r1
 8009a92:	d148      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009a94:	4b27      	ldr	r3, [pc, #156]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009aa4:	d02a      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009aac:	d838      	bhi.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d004      	beq.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aba:	d00d      	beq.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009abc:	e030      	b.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009abe:	4b1d      	ldr	r3, [pc, #116]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aca:	d102      	bne.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009acc:	4b1a      	ldr	r3, [pc, #104]	@ (8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ad0:	e02b      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad6:	e028      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ad8:	4b16      	ldr	r3, [pc, #88]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ae4:	d107      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fae4 	bl	800a0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009af4:	e019      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afa:	e016      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009afc:	4b0d      	ldr	r3, [pc, #52]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b08:	d107      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b0a:	f107 0318 	add.w	r3, r7, #24
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f82a 	bl	8009b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b18:	e007      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1e:	e004      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b24:	e001      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3740      	adds	r7, #64	@ 0x40
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	58024400 	.word	0x58024400
 8009b38:	017d7840 	.word	0x017d7840

08009b3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b40:	f7fd ffea 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8009b44:	4602      	mov	r2, r0
 8009b46:	4b06      	ldr	r3, [pc, #24]	@ (8009b60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	091b      	lsrs	r3, r3, #4
 8009b4c:	f003 0307 	and.w	r3, r3, #7
 8009b50:	4904      	ldr	r1, [pc, #16]	@ (8009b64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b52:	5ccb      	ldrb	r3, [r1, r3]
 8009b54:	f003 031f 	and.w	r3, r3, #31
 8009b58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	58024400 	.word	0x58024400
 8009b64:	0801723c 	.word	0x0801723c

08009b68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b089      	sub	sp, #36	@ 0x24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b70:	4ba1      	ldr	r3, [pc, #644]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b74:	f003 0303 	and.w	r3, r3, #3
 8009b78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009b7a:	4b9f      	ldr	r3, [pc, #636]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b7e:	0b1b      	lsrs	r3, r3, #12
 8009b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b86:	4b9c      	ldr	r3, [pc, #624]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8a:	091b      	lsrs	r3, r3, #4
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009b92:	4b99      	ldr	r3, [pc, #612]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b96:	08db      	lsrs	r3, r3, #3
 8009b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 8111 	beq.w	8009dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	f000 8083 	beq.w	8009cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	f200 80a1 	bhi.w	8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d056      	beq.n	8009c80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009bd2:	e099      	b.n	8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bd4:	4b88      	ldr	r3, [pc, #544]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0320 	and.w	r3, r3, #32
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d02d      	beq.n	8009c3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009be0:	4b85      	ldr	r3, [pc, #532]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	08db      	lsrs	r3, r3, #3
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	4a84      	ldr	r2, [pc, #528]	@ (8009dfc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009bec:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	ee07 3a90 	vmov	s15, r3
 8009bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0a:	4b7b      	ldr	r3, [pc, #492]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c3a:	e087      	b.n	8009d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009e04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c7e:	e065      	b.n	8009d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c92:	4b59      	ldr	r3, [pc, #356]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9a:	ee07 3a90 	vmov	s15, r3
 8009c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ca6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cc2:	e043      	b.n	8009d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	ee07 3a90 	vmov	s15, r3
 8009cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd6:	4b48      	ldr	r3, [pc, #288]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d06:	e021      	b.n	8009d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	ee07 3a90 	vmov	s15, r3
 8009d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d1a:	4b37      	ldr	r3, [pc, #220]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d50:	0a5b      	lsrs	r3, r3, #9
 8009d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d56:	ee07 3a90 	vmov	s15, r3
 8009d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d72:	ee17 2a90 	vmov	r2, s15
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7e:	0c1b      	lsrs	r3, r3, #16
 8009d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d84:	ee07 3a90 	vmov	s15, r3
 8009d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009da0:	ee17 2a90 	vmov	r2, s15
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009da8:	4b13      	ldr	r3, [pc, #76]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dac:	0e1b      	lsrs	r3, r3, #24
 8009dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dce:	ee17 2a90 	vmov	r2, s15
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009dd6:	e008      	b.n	8009dea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	609a      	str	r2, [r3, #8]
}
 8009dea:	bf00      	nop
 8009dec:	3724      	adds	r7, #36	@ 0x24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	58024400 	.word	0x58024400
 8009dfc:	03d09000 	.word	0x03d09000
 8009e00:	46000000 	.word	0x46000000
 8009e04:	4c742400 	.word	0x4c742400
 8009e08:	4a742400 	.word	0x4a742400
 8009e0c:	4bbebc20 	.word	0x4bbebc20

08009e10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b089      	sub	sp, #36	@ 0x24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e18:	4ba1      	ldr	r3, [pc, #644]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1c:	f003 0303 	and.w	r3, r3, #3
 8009e20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009e22:	4b9f      	ldr	r3, [pc, #636]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e26:	0d1b      	lsrs	r3, r3, #20
 8009e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e2e:	4b9c      	ldr	r3, [pc, #624]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009e3a:	4b99      	ldr	r3, [pc, #612]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e3e:	08db      	lsrs	r3, r3, #3
 8009e40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	fb02 f303 	mul.w	r3, r2, r3
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 8111 	beq.w	800a080 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	f000 8083 	beq.w	8009f6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	f200 80a1 	bhi.w	8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d056      	beq.n	8009f28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e7a:	e099      	b.n	8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e7c:	4b88      	ldr	r3, [pc, #544]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0320 	and.w	r3, r3, #32
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d02d      	beq.n	8009ee4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e88:	4b85      	ldr	r3, [pc, #532]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	08db      	lsrs	r3, r3, #3
 8009e8e:	f003 0303 	and.w	r3, r3, #3
 8009e92:	4a84      	ldr	r2, [pc, #528]	@ (800a0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e94:	fa22 f303 	lsr.w	r3, r2, r3
 8009e98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	ee07 3a90 	vmov	s15, r3
 8009ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb2:	4b7b      	ldr	r3, [pc, #492]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eba:	ee07 3a90 	vmov	s15, r3
 8009ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ec6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ede:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ee2:	e087      	b.n	8009ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	ee07 3a90 	vmov	s15, r3
 8009eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a0ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef6:	4b6a      	ldr	r3, [pc, #424]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f26:	e065      	b.n	8009ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f3a:	4b59      	ldr	r3, [pc, #356]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f6a:	e043      	b.n	8009ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	ee07 3a90 	vmov	s15, r3
 8009f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7e:	4b48      	ldr	r3, [pc, #288]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fae:	e021      	b.n	8009ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc2:	4b37      	ldr	r3, [pc, #220]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ff2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009ff4:	4b2a      	ldr	r3, [pc, #168]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff8:	0a5b      	lsrs	r3, r3, #9
 8009ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a00a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a00e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a01a:	ee17 2a90 	vmov	r2, s15
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a022:	4b1f      	ldr	r3, [pc, #124]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a026:	0c1b      	lsrs	r3, r3, #16
 800a028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a02c:	ee07 3a90 	vmov	s15, r3
 800a030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a034:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a03c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a048:	ee17 2a90 	vmov	r2, s15
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a050:	4b13      	ldr	r3, [pc, #76]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a054:	0e1b      	lsrs	r3, r3, #24
 800a056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a05a:	ee07 3a90 	vmov	s15, r3
 800a05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a06a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a06e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a076:	ee17 2a90 	vmov	r2, s15
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a07e:	e008      	b.n	800a092 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	609a      	str	r2, [r3, #8]
}
 800a092:	bf00      	nop
 800a094:	3724      	adds	r7, #36	@ 0x24
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	58024400 	.word	0x58024400
 800a0a4:	03d09000 	.word	0x03d09000
 800a0a8:	46000000 	.word	0x46000000
 800a0ac:	4c742400 	.word	0x4c742400
 800a0b0:	4a742400 	.word	0x4a742400
 800a0b4:	4bbebc20 	.word	0x4bbebc20

0800a0b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b089      	sub	sp, #36	@ 0x24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0c0:	4ba0      	ldr	r3, [pc, #640]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c4:	f003 0303 	and.w	r3, r3, #3
 800a0c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a0ca:	4b9e      	ldr	r3, [pc, #632]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ce:	091b      	lsrs	r3, r3, #4
 800a0d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a0d6:	4b9b      	ldr	r3, [pc, #620]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a0e0:	4b98      	ldr	r3, [pc, #608]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e4:	08db      	lsrs	r3, r3, #3
 800a0e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	fb02 f303 	mul.w	r3, r2, r3
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 8111 	beq.w	800a326 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	2b02      	cmp	r3, #2
 800a108:	f000 8083 	beq.w	800a212 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	f200 80a1 	bhi.w	800a256 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d056      	beq.n	800a1ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a120:	e099      	b.n	800a256 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a122:	4b88      	ldr	r3, [pc, #544]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0320 	and.w	r3, r3, #32
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d02d      	beq.n	800a18a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a12e:	4b85      	ldr	r3, [pc, #532]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	08db      	lsrs	r3, r3, #3
 800a134:	f003 0303 	and.w	r3, r3, #3
 800a138:	4a83      	ldr	r2, [pc, #524]	@ (800a348 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a13a:	fa22 f303 	lsr.w	r3, r2, r3
 800a13e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	ee07 3a90 	vmov	s15, r3
 800a150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a158:	4b7a      	ldr	r3, [pc, #488]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a15a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a160:	ee07 3a90 	vmov	s15, r3
 800a164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a168:	ed97 6a03 	vldr	s12, [r7, #12]
 800a16c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a184:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a188:	e087      	b.n	800a29a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	ee07 3a90 	vmov	s15, r3
 800a190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a194:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a350 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19c:	4b69      	ldr	r3, [pc, #420]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a19e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a4:	ee07 3a90 	vmov	s15, r3
 800a1a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1cc:	e065      	b.n	800a29a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	ee07 3a90 	vmov	s15, r3
 800a1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a354 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a1dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e0:	4b58      	ldr	r3, [pc, #352]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e8:	ee07 3a90 	vmov	s15, r3
 800a1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a200:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a210:	e043      	b.n	800a29a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	ee07 3a90 	vmov	s15, r3
 800a218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a358 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a224:	4b47      	ldr	r3, [pc, #284]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22c:	ee07 3a90 	vmov	s15, r3
 800a230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a234:	ed97 6a03 	vldr	s12, [r7, #12]
 800a238:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a23c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a244:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a254:	e021      	b.n	800a29a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	ee07 3a90 	vmov	s15, r3
 800a25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a260:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a350 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a268:	4b36      	ldr	r3, [pc, #216]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a26a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a270:	ee07 3a90 	vmov	s15, r3
 800a274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a278:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a28c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a298:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a29a:	4b2a      	ldr	r3, [pc, #168]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a29e:	0a5b      	lsrs	r3, r3, #9
 800a2a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2a4:	ee07 3a90 	vmov	s15, r3
 800a2a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2c0:	ee17 2a90 	vmov	r2, s15
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a2c8:	4b1e      	ldr	r3, [pc, #120]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2cc:	0c1b      	lsrs	r3, r3, #16
 800a2ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2d2:	ee07 3a90 	vmov	s15, r3
 800a2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ee:	ee17 2a90 	vmov	r2, s15
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a2f6:	4b13      	ldr	r3, [pc, #76]	@ (800a344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2fa:	0e1b      	lsrs	r3, r3, #24
 800a2fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a308:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a30c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a310:	edd7 6a07 	vldr	s13, [r7, #28]
 800a314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a31c:	ee17 2a90 	vmov	r2, s15
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a324:	e008      	b.n	800a338 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	609a      	str	r2, [r3, #8]
}
 800a338:	bf00      	nop
 800a33a:	3724      	adds	r7, #36	@ 0x24
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	58024400 	.word	0x58024400
 800a348:	03d09000 	.word	0x03d09000
 800a34c:	46000000 	.word	0x46000000
 800a350:	4c742400 	.word	0x4c742400
 800a354:	4a742400 	.word	0x4a742400
 800a358:	4bbebc20 	.word	0x4bbebc20

0800a35c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a36a:	4b53      	ldr	r3, [pc, #332]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	2b03      	cmp	r3, #3
 800a374:	d101      	bne.n	800a37a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e099      	b.n	800a4ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a37a:	4b4f      	ldr	r3, [pc, #316]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a4e      	ldr	r2, [pc, #312]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a380:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a386:	f7f6 f87d 	bl	8000484 <HAL_GetTick>
 800a38a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a38c:	e008      	b.n	800a3a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a38e:	f7f6 f879 	bl	8000484 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d901      	bls.n	800a3a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e086      	b.n	800a4ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3a0:	4b45      	ldr	r3, [pc, #276]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f0      	bne.n	800a38e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a3ac:	4b42      	ldr	r3, [pc, #264]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	031b      	lsls	r3, r3, #12
 800a3ba:	493f      	ldr	r1, [pc, #252]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	628b      	str	r3, [r1, #40]	@ 0x28
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	025b      	lsls	r3, r3, #9
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	041b      	lsls	r3, r3, #16
 800a3de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	061b      	lsls	r3, r3, #24
 800a3ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a3f0:	4931      	ldr	r1, [pc, #196]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a3f6:	4b30      	ldr	r3, [pc, #192]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	492d      	ldr	r1, [pc, #180]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a404:	4313      	orrs	r3, r2
 800a406:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a408:	4b2b      	ldr	r3, [pc, #172]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40c:	f023 0220 	bic.w	r2, r3, #32
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	4928      	ldr	r1, [pc, #160]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a416:	4313      	orrs	r3, r2
 800a418:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a41a:	4b27      	ldr	r3, [pc, #156]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41e:	4a26      	ldr	r2, [pc, #152]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a420:	f023 0310 	bic.w	r3, r3, #16
 800a424:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a426:	4b24      	ldr	r3, [pc, #144]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a42a:	4b24      	ldr	r3, [pc, #144]	@ (800a4bc <RCCEx_PLL2_Config+0x160>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	69d2      	ldr	r2, [r2, #28]
 800a432:	00d2      	lsls	r2, r2, #3
 800a434:	4920      	ldr	r1, [pc, #128]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a436:	4313      	orrs	r3, r2
 800a438:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a43a:	4b1f      	ldr	r3, [pc, #124]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43e:	4a1e      	ldr	r2, [pc, #120]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a440:	f043 0310 	orr.w	r3, r3, #16
 800a444:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d106      	bne.n	800a45a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a44c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a450:	4a19      	ldr	r2, [pc, #100]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a452:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a456:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a458:	e00f      	b.n	800a47a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d106      	bne.n	800a46e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a460:	4b15      	ldr	r3, [pc, #84]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a464:	4a14      	ldr	r2, [pc, #80]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a46a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a46c:	e005      	b.n	800a47a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a46e:	4b12      	ldr	r3, [pc, #72]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a472:	4a11      	ldr	r2, [pc, #68]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a474:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a478:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a47a:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a0e      	ldr	r2, [pc, #56]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a480:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a486:	f7f5 fffd 	bl	8000484 <HAL_GetTick>
 800a48a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a48c:	e008      	b.n	800a4a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a48e:	f7f5 fff9 	bl	8000484 <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d901      	bls.n	800a4a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e006      	b.n	800a4ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4a0:	4b05      	ldr	r3, [pc, #20]	@ (800a4b8 <RCCEx_PLL2_Config+0x15c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d0f0      	beq.n	800a48e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	58024400 	.word	0x58024400
 800a4bc:	ffff0007 	.word	0xffff0007

0800a4c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4ce:	4b53      	ldr	r3, [pc, #332]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d2:	f003 0303 	and.w	r3, r3, #3
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d101      	bne.n	800a4de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e099      	b.n	800a612 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a4de:	4b4f      	ldr	r3, [pc, #316]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a4e      	ldr	r2, [pc, #312]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a4e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ea:	f7f5 ffcb 	bl	8000484 <HAL_GetTick>
 800a4ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4f0:	e008      	b.n	800a504 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4f2:	f7f5 ffc7 	bl	8000484 <HAL_GetTick>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d901      	bls.n	800a504 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a500:	2303      	movs	r3, #3
 800a502:	e086      	b.n	800a612 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a504:	4b45      	ldr	r3, [pc, #276]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1f0      	bne.n	800a4f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a510:	4b42      	ldr	r3, [pc, #264]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a514:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	051b      	lsls	r3, r3, #20
 800a51e:	493f      	ldr	r1, [pc, #252]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a520:	4313      	orrs	r3, r2
 800a522:	628b      	str	r3, [r1, #40]	@ 0x28
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	3b01      	subs	r3, #1
 800a52a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	3b01      	subs	r3, #1
 800a534:	025b      	lsls	r3, r3, #9
 800a536:	b29b      	uxth	r3, r3
 800a538:	431a      	orrs	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	3b01      	subs	r3, #1
 800a540:	041b      	lsls	r3, r3, #16
 800a542:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a546:	431a      	orrs	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	061b      	lsls	r3, r3, #24
 800a550:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a554:	4931      	ldr	r1, [pc, #196]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a556:	4313      	orrs	r3, r2
 800a558:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a55a:	4b30      	ldr	r3, [pc, #192]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	492d      	ldr	r1, [pc, #180]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a56c:	4b2b      	ldr	r3, [pc, #172]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a570:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	4928      	ldr	r1, [pc, #160]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a57e:	4b27      	ldr	r3, [pc, #156]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a582:	4a26      	ldr	r2, [pc, #152]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a58a:	4b24      	ldr	r3, [pc, #144]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a58c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a58e:	4b24      	ldr	r3, [pc, #144]	@ (800a620 <RCCEx_PLL3_Config+0x160>)
 800a590:	4013      	ands	r3, r2
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	69d2      	ldr	r2, [r2, #28]
 800a596:	00d2      	lsls	r2, r2, #3
 800a598:	4920      	ldr	r1, [pc, #128]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a59e:	4b1f      	ldr	r3, [pc, #124]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a2:	4a1e      	ldr	r2, [pc, #120]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d106      	bne.n	800a5be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a5b0:	4b1a      	ldr	r3, [pc, #104]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b4:	4a19      	ldr	r2, [pc, #100]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a5ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5bc:	e00f      	b.n	800a5de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d106      	bne.n	800a5d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a5c4:	4b15      	ldr	r3, [pc, #84]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c8:	4a14      	ldr	r2, [pc, #80]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a5ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5d0:	e005      	b.n	800a5de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a5d2:	4b12      	ldr	r3, [pc, #72]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d6:	4a11      	ldr	r2, [pc, #68]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a5dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a5de:	4b0f      	ldr	r3, [pc, #60]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a0e      	ldr	r2, [pc, #56]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a5e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5ea:	f7f5 ff4b 	bl	8000484 <HAL_GetTick>
 800a5ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5f0:	e008      	b.n	800a604 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a5f2:	f7f5 ff47 	bl	8000484 <HAL_GetTick>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d901      	bls.n	800a604 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a600:	2303      	movs	r3, #3
 800a602:	e006      	b.n	800a612 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a604:	4b05      	ldr	r3, [pc, #20]	@ (800a61c <RCCEx_PLL3_Config+0x15c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d0f0      	beq.n	800a5f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a610:	7bfb      	ldrb	r3, [r7, #15]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	58024400 	.word	0x58024400
 800a620:	ffff0007 	.word	0xffff0007

0800a624 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d101      	bne.n	800a636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e10f      	b.n	800a856 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a87      	ldr	r2, [pc, #540]	@ (800a860 <HAL_SPI_Init+0x23c>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d00f      	beq.n	800a666 <HAL_SPI_Init+0x42>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a86      	ldr	r2, [pc, #536]	@ (800a864 <HAL_SPI_Init+0x240>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d00a      	beq.n	800a666 <HAL_SPI_Init+0x42>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a84      	ldr	r2, [pc, #528]	@ (800a868 <HAL_SPI_Init+0x244>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d005      	beq.n	800a666 <HAL_SPI_Init+0x42>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	2b0f      	cmp	r3, #15
 800a660:	d901      	bls.n	800a666 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e0f7      	b.n	800a856 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fbbc 	bl	800ade4 <SPI_GetPacketSize>
 800a66c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a7b      	ldr	r2, [pc, #492]	@ (800a860 <HAL_SPI_Init+0x23c>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d00c      	beq.n	800a692 <HAL_SPI_Init+0x6e>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a79      	ldr	r2, [pc, #484]	@ (800a864 <HAL_SPI_Init+0x240>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d007      	beq.n	800a692 <HAL_SPI_Init+0x6e>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a78      	ldr	r2, [pc, #480]	@ (800a868 <HAL_SPI_Init+0x244>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d002      	beq.n	800a692 <HAL_SPI_Init+0x6e>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2b08      	cmp	r3, #8
 800a690:	d811      	bhi.n	800a6b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a696:	4a72      	ldr	r2, [pc, #456]	@ (800a860 <HAL_SPI_Init+0x23c>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d009      	beq.n	800a6b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a70      	ldr	r2, [pc, #448]	@ (800a864 <HAL_SPI_Init+0x240>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d004      	beq.n	800a6b0 <HAL_SPI_Init+0x8c>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a6f      	ldr	r2, [pc, #444]	@ (800a868 <HAL_SPI_Init+0x244>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d104      	bne.n	800a6ba <HAL_SPI_Init+0x96>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b10      	cmp	r3, #16
 800a6b4:	d901      	bls.n	800a6ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e0cd      	b.n	800a856 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d106      	bne.n	800a6d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f007 f8f8 	bl	80118c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f022 0201 	bic.w	r2, r2, #1
 800a6ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a6f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a700:	d119      	bne.n	800a736 <HAL_SPI_Init+0x112>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a70a:	d103      	bne.n	800a714 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a710:	2b00      	cmp	r3, #0
 800a712:	d008      	beq.n	800a726 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10c      	bne.n	800a736 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a724:	d107      	bne.n	800a736 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a734:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00f      	beq.n	800a762 <HAL_SPI_Init+0x13e>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	2b06      	cmp	r3, #6
 800a748:	d90b      	bls.n	800a762 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	430a      	orrs	r2, r1
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	e007      	b.n	800a772 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a770:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	69da      	ldr	r2, [r3, #28]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77a:	431a      	orrs	r2, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	431a      	orrs	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a784:	ea42 0103 	orr.w	r1, r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	430a      	orrs	r2, r1
 800a792:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a79c:	431a      	orrs	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	431a      	orrs	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	431a      	orrs	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7c6:	431a      	orrs	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	431a      	orrs	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7d2:	ea42 0103 	orr.w	r1, r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d113      	bne.n	800a812 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a810:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f022 0201 	bic.w	r2, r2, #1
 800a820:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	430a      	orrs	r2, r1
 800a842:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	40013000 	.word	0x40013000
 800a864:	40003800 	.word	0x40003800
 800a868:	40003c00 	.word	0x40003c00

0800a86c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af02      	add	r7, sp, #8
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	603b      	str	r3, [r7, #0]
 800a878:	4613      	mov	r3, r2
 800a87a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3320      	adds	r3, #32
 800a882:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a884:	f7f5 fdfe 	bl	8000484 <HAL_GetTick>
 800a888:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b01      	cmp	r3, #1
 800a894:	d001      	beq.n	800a89a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a896:	2302      	movs	r3, #2
 800a898:	e1d1      	b.n	800ac3e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <HAL_SPI_Transmit+0x3a>
 800a8a0:	88fb      	ldrh	r3, [r7, #6]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e1c9      	b.n	800ac3e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d101      	bne.n	800a8b8 <HAL_SPI_Transmit+0x4c>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	e1c2      	b.n	800ac3e <HAL_SPI_Transmit+0x3d2>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2203      	movs	r2, #3
 800a8c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	88fa      	ldrh	r2, [r7, #6]
 800a8da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	88fa      	ldrh	r2, [r7, #6]
 800a8e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a910:	d108      	bne.n	800a924 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	e009      	b.n	800a938 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a936:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	4b96      	ldr	r3, [pc, #600]	@ (800ab98 <HAL_SPI_Transmit+0x32c>)
 800a940:	4013      	ands	r3, r2
 800a942:	88f9      	ldrh	r1, [r7, #6]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	6812      	ldr	r2, [r2, #0]
 800a948:	430b      	orrs	r3, r1
 800a94a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0201 	orr.w	r2, r2, #1
 800a95a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a964:	d107      	bne.n	800a976 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a974:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	2b0f      	cmp	r3, #15
 800a97c:	d947      	bls.n	800aa0e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a97e:	e03f      	b.n	800aa00 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	f003 0302 	and.w	r3, r3, #2
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d114      	bne.n	800a9b8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6812      	ldr	r2, [r2, #0]
 800a998:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a99e:	1d1a      	adds	r2, r3, #4
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a9b6:	e023      	b.n	800aa00 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9b8:	f7f5 fd64 	bl	8000484 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d803      	bhi.n	800a9d0 <HAL_SPI_Transmit+0x164>
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ce:	d102      	bne.n	800a9d6 <HAL_SPI_Transmit+0x16a>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d114      	bne.n	800aa00 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f000 f936 	bl	800ac48 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e11e      	b.n	800ac3e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1b9      	bne.n	800a980 <HAL_SPI_Transmit+0x114>
 800aa0c:	e0f1      	b.n	800abf2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	2b07      	cmp	r3, #7
 800aa14:	f240 80e6 	bls.w	800abe4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aa18:	e05d      	b.n	800aad6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d132      	bne.n	800aa8e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d918      	bls.n	800aa66 <HAL_SPI_Transmit+0x1fa>
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d014      	beq.n	800aa66 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6812      	ldr	r2, [r2, #0]
 800aa46:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa4c:	1d1a      	adds	r2, r3, #4
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	3b02      	subs	r3, #2
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aa64:	e037      	b.n	800aad6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa6a:	881a      	ldrh	r2, [r3, #0]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa74:	1c9a      	adds	r2, r3, #2
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	3b01      	subs	r3, #1
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aa8c:	e023      	b.n	800aad6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa8e:	f7f5 fcf9 	bl	8000484 <HAL_GetTick>
 800aa92:	4602      	mov	r2, r0
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d803      	bhi.n	800aaa6 <HAL_SPI_Transmit+0x23a>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa4:	d102      	bne.n	800aaac <HAL_SPI_Transmit+0x240>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d114      	bne.n	800aad6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 f8cb 	bl	800ac48 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aab8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e0b3      	b.n	800ac3e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aadc:	b29b      	uxth	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d19b      	bne.n	800aa1a <HAL_SPI_Transmit+0x1ae>
 800aae2:	e086      	b.n	800abf2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d154      	bne.n	800ab9c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d918      	bls.n	800ab30 <HAL_SPI_Transmit+0x2c4>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab02:	2b40      	cmp	r3, #64	@ 0x40
 800ab04:	d914      	bls.n	800ab30 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6812      	ldr	r2, [r2, #0]
 800ab10:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab16:	1d1a      	adds	r2, r3, #4
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	3b04      	subs	r3, #4
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ab2e:	e059      	b.n	800abe4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d917      	bls.n	800ab6c <HAL_SPI_Transmit+0x300>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d013      	beq.n	800ab6c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab48:	881a      	ldrh	r2, [r3, #0]
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab52:	1c9a      	adds	r2, r3, #2
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	3b02      	subs	r3, #2
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ab6a:	e03b      	b.n	800abe4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3320      	adds	r3, #32
 800ab76:	7812      	ldrb	r2, [r2, #0]
 800ab78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab7e:	1c5a      	adds	r2, r3, #1
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ab96:	e025      	b.n	800abe4 <HAL_SPI_Transmit+0x378>
 800ab98:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab9c:	f7f5 fc72 	bl	8000484 <HAL_GetTick>
 800aba0:	4602      	mov	r2, r0
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d803      	bhi.n	800abb4 <HAL_SPI_Transmit+0x348>
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb2:	d102      	bne.n	800abba <HAL_SPI_Transmit+0x34e>
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d114      	bne.n	800abe4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f000 f844 	bl	800ac48 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e02c      	b.n	800ac3e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800abea:	b29b      	uxth	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	f47f af79 	bne.w	800aae4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2200      	movs	r2, #0
 800abfa:	2108      	movs	r1, #8
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 f8c3 	bl	800ad88 <SPI_WaitOnFlagUntilTimeout>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d007      	beq.n	800ac18 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac0e:	f043 0220 	orr.w	r2, r3, #32
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f815 	bl	800ac48 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e000      	b.n	800ac3e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
  }
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3718      	adds	r7, #24
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop

0800ac48 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	699a      	ldr	r2, [r3, #24]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f042 0208 	orr.w	r2, r2, #8
 800ac66:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699a      	ldr	r2, [r3, #24]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0210 	orr.w	r2, r2, #16
 800ac76:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 0201 	bic.w	r2, r2, #1
 800ac86:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6919      	ldr	r1, [r3, #16]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	4b3c      	ldr	r3, [pc, #240]	@ (800ad84 <SPI_CloseTransfer+0x13c>)
 800ac94:	400b      	ands	r3, r1
 800ac96:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aca6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b04      	cmp	r3, #4
 800acb2:	d014      	beq.n	800acde <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f003 0320 	and.w	r3, r3, #32
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00f      	beq.n	800acde <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	699a      	ldr	r2, [r3, #24]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f042 0220 	orr.w	r2, r2, #32
 800acdc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d014      	beq.n	800ad14 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00f      	beq.n	800ad14 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acfa:	f043 0204 	orr.w	r2, r3, #4
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	699a      	ldr	r2, [r3, #24]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad12:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00f      	beq.n	800ad3e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad24:	f043 0201 	orr.w	r2, r3, #1
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	699a      	ldr	r2, [r3, #24]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad3c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00f      	beq.n	800ad68 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad4e:	f043 0208 	orr.w	r2, r3, #8
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	699a      	ldr	r2, [r3, #24]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad66:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ad78:	bf00      	nop
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	fffffc90 	.word	0xfffffc90

0800ad88 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	603b      	str	r3, [r7, #0]
 800ad94:	4613      	mov	r3, r2
 800ad96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ad98:	e010      	b.n	800adbc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad9a:	f7f5 fb73 	bl	8000484 <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d803      	bhi.n	800adb2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb0:	d102      	bne.n	800adb8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e00f      	b.n	800addc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	695a      	ldr	r2, [r3, #20]
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	4013      	ands	r3, r2
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	429a      	cmp	r2, r3
 800adca:	bf0c      	ite	eq
 800adcc:	2301      	moveq	r3, #1
 800adce:	2300      	movne	r3, #0
 800add0:	b2db      	uxtb	r3, r3
 800add2:	461a      	mov	r2, r3
 800add4:	79fb      	ldrb	r3, [r7, #7]
 800add6:	429a      	cmp	r2, r3
 800add8:	d0df      	beq.n	800ad9a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adf0:	095b      	lsrs	r3, r3, #5
 800adf2:	3301      	adds	r3, #1
 800adf4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	3301      	adds	r3, #1
 800adfc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	3307      	adds	r3, #7
 800ae02:	08db      	lsrs	r3, r3, #3
 800ae04:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e049      	b.n	800aec0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f007 f891 	bl	8011f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3304      	adds	r3, #4
 800ae56:	4619      	mov	r1, r3
 800ae58:	4610      	mov	r0, r2
 800ae5a:	f000 fd59 	bl	800b910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d001      	beq.n	800aee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e054      	b.n	800af8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2202      	movs	r2, #2
 800aee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68da      	ldr	r2, [r3, #12]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f042 0201 	orr.w	r2, r2, #1
 800aef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a26      	ldr	r2, [pc, #152]	@ (800af98 <HAL_TIM_Base_Start_IT+0xd0>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d022      	beq.n	800af48 <HAL_TIM_Base_Start_IT+0x80>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af0a:	d01d      	beq.n	800af48 <HAL_TIM_Base_Start_IT+0x80>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a22      	ldr	r2, [pc, #136]	@ (800af9c <HAL_TIM_Base_Start_IT+0xd4>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d018      	beq.n	800af48 <HAL_TIM_Base_Start_IT+0x80>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a21      	ldr	r2, [pc, #132]	@ (800afa0 <HAL_TIM_Base_Start_IT+0xd8>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d013      	beq.n	800af48 <HAL_TIM_Base_Start_IT+0x80>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a1f      	ldr	r2, [pc, #124]	@ (800afa4 <HAL_TIM_Base_Start_IT+0xdc>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d00e      	beq.n	800af48 <HAL_TIM_Base_Start_IT+0x80>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a1e      	ldr	r2, [pc, #120]	@ (800afa8 <HAL_TIM_Base_Start_IT+0xe0>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d009      	beq.n	800af48 <HAL_TIM_Base_Start_IT+0x80>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a1c      	ldr	r2, [pc, #112]	@ (800afac <HAL_TIM_Base_Start_IT+0xe4>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d004      	beq.n	800af48 <HAL_TIM_Base_Start_IT+0x80>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a1b      	ldr	r2, [pc, #108]	@ (800afb0 <HAL_TIM_Base_Start_IT+0xe8>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d115      	bne.n	800af74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689a      	ldr	r2, [r3, #8]
 800af4e:	4b19      	ldr	r3, [pc, #100]	@ (800afb4 <HAL_TIM_Base_Start_IT+0xec>)
 800af50:	4013      	ands	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b06      	cmp	r3, #6
 800af58:	d015      	beq.n	800af86 <HAL_TIM_Base_Start_IT+0xbe>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af60:	d011      	beq.n	800af86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f042 0201 	orr.w	r2, r2, #1
 800af70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af72:	e008      	b.n	800af86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f042 0201 	orr.w	r2, r2, #1
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	e000      	b.n	800af88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	40010000 	.word	0x40010000
 800af9c:	40000400 	.word	0x40000400
 800afa0:	40000800 	.word	0x40000800
 800afa4:	40000c00 	.word	0x40000c00
 800afa8:	40010400 	.word	0x40010400
 800afac:	40001800 	.word	0x40001800
 800afb0:	40014000 	.word	0x40014000
 800afb4:	00010007 	.word	0x00010007

0800afb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e049      	b.n	800b05e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d106      	bne.n	800afe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f841 	bl	800b066 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3304      	adds	r3, #4
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f000 fc8a 	bl	800b910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b066:	b480      	push	{r7}
 800b068:	b083      	sub	sp, #12
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b06e:	bf00      	nop
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
	...

0800b07c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d109      	bne.n	800b0a0 <HAL_TIM_PWM_Start+0x24>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b01      	cmp	r3, #1
 800b096:	bf14      	ite	ne
 800b098:	2301      	movne	r3, #1
 800b09a:	2300      	moveq	r3, #0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	e03c      	b.n	800b11a <HAL_TIM_PWM_Start+0x9e>
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d109      	bne.n	800b0ba <HAL_TIM_PWM_Start+0x3e>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	bf14      	ite	ne
 800b0b2:	2301      	movne	r3, #1
 800b0b4:	2300      	moveq	r3, #0
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	e02f      	b.n	800b11a <HAL_TIM_PWM_Start+0x9e>
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	2b08      	cmp	r3, #8
 800b0be:	d109      	bne.n	800b0d4 <HAL_TIM_PWM_Start+0x58>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	bf14      	ite	ne
 800b0cc:	2301      	movne	r3, #1
 800b0ce:	2300      	moveq	r3, #0
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	e022      	b.n	800b11a <HAL_TIM_PWM_Start+0x9e>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b0c      	cmp	r3, #12
 800b0d8:	d109      	bne.n	800b0ee <HAL_TIM_PWM_Start+0x72>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	bf14      	ite	ne
 800b0e6:	2301      	movne	r3, #1
 800b0e8:	2300      	moveq	r3, #0
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	e015      	b.n	800b11a <HAL_TIM_PWM_Start+0x9e>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	2b10      	cmp	r3, #16
 800b0f2:	d109      	bne.n	800b108 <HAL_TIM_PWM_Start+0x8c>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	bf14      	ite	ne
 800b100:	2301      	movne	r3, #1
 800b102:	2300      	moveq	r3, #0
 800b104:	b2db      	uxtb	r3, r3
 800b106:	e008      	b.n	800b11a <HAL_TIM_PWM_Start+0x9e>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b01      	cmp	r3, #1
 800b112:	bf14      	ite	ne
 800b114:	2301      	movne	r3, #1
 800b116:	2300      	moveq	r3, #0
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e0a1      	b.n	800b266 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d104      	bne.n	800b132 <HAL_TIM_PWM_Start+0xb6>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b130:	e023      	b.n	800b17a <HAL_TIM_PWM_Start+0xfe>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b04      	cmp	r3, #4
 800b136:	d104      	bne.n	800b142 <HAL_TIM_PWM_Start+0xc6>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b140:	e01b      	b.n	800b17a <HAL_TIM_PWM_Start+0xfe>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b08      	cmp	r3, #8
 800b146:	d104      	bne.n	800b152 <HAL_TIM_PWM_Start+0xd6>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b150:	e013      	b.n	800b17a <HAL_TIM_PWM_Start+0xfe>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b0c      	cmp	r3, #12
 800b156:	d104      	bne.n	800b162 <HAL_TIM_PWM_Start+0xe6>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b160:	e00b      	b.n	800b17a <HAL_TIM_PWM_Start+0xfe>
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b10      	cmp	r3, #16
 800b166:	d104      	bne.n	800b172 <HAL_TIM_PWM_Start+0xf6>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2202      	movs	r2, #2
 800b16c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b170:	e003      	b.n	800b17a <HAL_TIM_PWM_Start+0xfe>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2202      	movs	r2, #2
 800b176:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2201      	movs	r2, #1
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	4618      	mov	r0, r3
 800b184:	f000 ffde 	bl	800c144 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a38      	ldr	r2, [pc, #224]	@ (800b270 <HAL_TIM_PWM_Start+0x1f4>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d013      	beq.n	800b1ba <HAL_TIM_PWM_Start+0x13e>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a37      	ldr	r2, [pc, #220]	@ (800b274 <HAL_TIM_PWM_Start+0x1f8>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d00e      	beq.n	800b1ba <HAL_TIM_PWM_Start+0x13e>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a35      	ldr	r2, [pc, #212]	@ (800b278 <HAL_TIM_PWM_Start+0x1fc>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d009      	beq.n	800b1ba <HAL_TIM_PWM_Start+0x13e>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a34      	ldr	r2, [pc, #208]	@ (800b27c <HAL_TIM_PWM_Start+0x200>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d004      	beq.n	800b1ba <HAL_TIM_PWM_Start+0x13e>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a32      	ldr	r2, [pc, #200]	@ (800b280 <HAL_TIM_PWM_Start+0x204>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d101      	bne.n	800b1be <HAL_TIM_PWM_Start+0x142>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e000      	b.n	800b1c0 <HAL_TIM_PWM_Start+0x144>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d007      	beq.n	800b1d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b1d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a25      	ldr	r2, [pc, #148]	@ (800b270 <HAL_TIM_PWM_Start+0x1f4>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d022      	beq.n	800b224 <HAL_TIM_PWM_Start+0x1a8>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1e6:	d01d      	beq.n	800b224 <HAL_TIM_PWM_Start+0x1a8>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a25      	ldr	r2, [pc, #148]	@ (800b284 <HAL_TIM_PWM_Start+0x208>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d018      	beq.n	800b224 <HAL_TIM_PWM_Start+0x1a8>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a24      	ldr	r2, [pc, #144]	@ (800b288 <HAL_TIM_PWM_Start+0x20c>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d013      	beq.n	800b224 <HAL_TIM_PWM_Start+0x1a8>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a22      	ldr	r2, [pc, #136]	@ (800b28c <HAL_TIM_PWM_Start+0x210>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d00e      	beq.n	800b224 <HAL_TIM_PWM_Start+0x1a8>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a1a      	ldr	r2, [pc, #104]	@ (800b274 <HAL_TIM_PWM_Start+0x1f8>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d009      	beq.n	800b224 <HAL_TIM_PWM_Start+0x1a8>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a1e      	ldr	r2, [pc, #120]	@ (800b290 <HAL_TIM_PWM_Start+0x214>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d004      	beq.n	800b224 <HAL_TIM_PWM_Start+0x1a8>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a16      	ldr	r2, [pc, #88]	@ (800b278 <HAL_TIM_PWM_Start+0x1fc>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d115      	bne.n	800b250 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	689a      	ldr	r2, [r3, #8]
 800b22a:	4b1a      	ldr	r3, [pc, #104]	@ (800b294 <HAL_TIM_PWM_Start+0x218>)
 800b22c:	4013      	ands	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b06      	cmp	r3, #6
 800b234:	d015      	beq.n	800b262 <HAL_TIM_PWM_Start+0x1e6>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b23c:	d011      	beq.n	800b262 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f042 0201 	orr.w	r2, r2, #1
 800b24c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b24e:	e008      	b.n	800b262 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0201 	orr.w	r2, r2, #1
 800b25e:	601a      	str	r2, [r3, #0]
 800b260:	e000      	b.n	800b264 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	40010000 	.word	0x40010000
 800b274:	40010400 	.word	0x40010400
 800b278:	40014000 	.word	0x40014000
 800b27c:	40014400 	.word	0x40014400
 800b280:	40014800 	.word	0x40014800
 800b284:	40000400 	.word	0x40000400
 800b288:	40000800 	.word	0x40000800
 800b28c:	40000c00 	.word	0x40000c00
 800b290:	40001800 	.word	0x40001800
 800b294:	00010007 	.word	0x00010007

0800b298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d020      	beq.n	800b2fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f003 0302 	and.w	r3, r3, #2
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d01b      	beq.n	800b2fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f06f 0202 	mvn.w	r2, #2
 800b2cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 faf6 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b2e8:	e005      	b.n	800b2f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fae8 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 faf9 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	f003 0304 	and.w	r3, r3, #4
 800b302:	2b00      	cmp	r3, #0
 800b304:	d020      	beq.n	800b348 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d01b      	beq.n	800b348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f06f 0204 	mvn.w	r2, #4
 800b318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2202      	movs	r2, #2
 800b31e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fad0 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b334:	e005      	b.n	800b342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fac2 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fad3 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	f003 0308 	and.w	r3, r3, #8
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d020      	beq.n	800b394 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f003 0308 	and.w	r3, r3, #8
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d01b      	beq.n	800b394 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f06f 0208 	mvn.w	r2, #8
 800b364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2204      	movs	r2, #4
 800b36a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	69db      	ldr	r3, [r3, #28]
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 faaa 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b380:	e005      	b.n	800b38e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa9c 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 faad 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	f003 0310 	and.w	r3, r3, #16
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d020      	beq.n	800b3e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f003 0310 	and.w	r3, r3, #16
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d01b      	beq.n	800b3e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f06f 0210 	mvn.w	r2, #16
 800b3b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2208      	movs	r2, #8
 800b3b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa84 	bl	800b8d4 <HAL_TIM_IC_CaptureCallback>
 800b3cc:	e005      	b.n	800b3da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fa76 	bl	800b8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fa87 	bl	800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f003 0301 	and.w	r3, r3, #1
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00c      	beq.n	800b404 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f003 0301 	and.w	r3, r3, #1
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d007      	beq.n	800b404 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f06f 0201 	mvn.w	r2, #1
 800b3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f006 f854 	bl	80114ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d104      	bne.n	800b418 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00c      	beq.n	800b432 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d007      	beq.n	800b432 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 ffc5 	bl	800c3bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00c      	beq.n	800b456 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b442:	2b00      	cmp	r3, #0
 800b444:	d007      	beq.n	800b456 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b44e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 ffbd 	bl	800c3d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00c      	beq.n	800b47a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b466:	2b00      	cmp	r3, #0
 800b468:	d007      	beq.n	800b47a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fa41 	bl	800b8fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	f003 0320 	and.w	r3, r3, #32
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00c      	beq.n	800b49e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f003 0320 	and.w	r3, r3, #32
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d007      	beq.n	800b49e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f06f 0220 	mvn.w	r2, #32
 800b496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 ff85 	bl	800c3a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b49e:	bf00      	nop
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d101      	bne.n	800b4c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	e0ff      	b.n	800b6c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b14      	cmp	r3, #20
 800b4d2:	f200 80f0 	bhi.w	800b6b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4dc:	0800b531 	.word	0x0800b531
 800b4e0:	0800b6b7 	.word	0x0800b6b7
 800b4e4:	0800b6b7 	.word	0x0800b6b7
 800b4e8:	0800b6b7 	.word	0x0800b6b7
 800b4ec:	0800b571 	.word	0x0800b571
 800b4f0:	0800b6b7 	.word	0x0800b6b7
 800b4f4:	0800b6b7 	.word	0x0800b6b7
 800b4f8:	0800b6b7 	.word	0x0800b6b7
 800b4fc:	0800b5b3 	.word	0x0800b5b3
 800b500:	0800b6b7 	.word	0x0800b6b7
 800b504:	0800b6b7 	.word	0x0800b6b7
 800b508:	0800b6b7 	.word	0x0800b6b7
 800b50c:	0800b5f3 	.word	0x0800b5f3
 800b510:	0800b6b7 	.word	0x0800b6b7
 800b514:	0800b6b7 	.word	0x0800b6b7
 800b518:	0800b6b7 	.word	0x0800b6b7
 800b51c:	0800b635 	.word	0x0800b635
 800b520:	0800b6b7 	.word	0x0800b6b7
 800b524:	0800b6b7 	.word	0x0800b6b7
 800b528:	0800b6b7 	.word	0x0800b6b7
 800b52c:	0800b675 	.word	0x0800b675
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68b9      	ldr	r1, [r7, #8]
 800b536:	4618      	mov	r0, r3
 800b538:	f000 fa90 	bl	800ba5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	699a      	ldr	r2, [r3, #24]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f042 0208 	orr.w	r2, r2, #8
 800b54a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699a      	ldr	r2, [r3, #24]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f022 0204 	bic.w	r2, r2, #4
 800b55a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6999      	ldr	r1, [r3, #24]
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	691a      	ldr	r2, [r3, #16]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	430a      	orrs	r2, r1
 800b56c:	619a      	str	r2, [r3, #24]
      break;
 800b56e:	e0a5      	b.n	800b6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68b9      	ldr	r1, [r7, #8]
 800b576:	4618      	mov	r0, r3
 800b578:	f000 fb00 	bl	800bb7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	699a      	ldr	r2, [r3, #24]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b58a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	699a      	ldr	r2, [r3, #24]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b59a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6999      	ldr	r1, [r3, #24]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	021a      	lsls	r2, r3, #8
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	430a      	orrs	r2, r1
 800b5ae:	619a      	str	r2, [r3, #24]
      break;
 800b5b0:	e084      	b.n	800b6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 fb69 	bl	800bc90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	69da      	ldr	r2, [r3, #28]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f042 0208 	orr.w	r2, r2, #8
 800b5cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	69da      	ldr	r2, [r3, #28]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f022 0204 	bic.w	r2, r2, #4
 800b5dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	69d9      	ldr	r1, [r3, #28]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	691a      	ldr	r2, [r3, #16]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	430a      	orrs	r2, r1
 800b5ee:	61da      	str	r2, [r3, #28]
      break;
 800b5f0:	e064      	b.n	800b6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 fbd1 	bl	800bda0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69da      	ldr	r2, [r3, #28]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b60c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	69da      	ldr	r2, [r3, #28]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b61c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	69d9      	ldr	r1, [r3, #28]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	021a      	lsls	r2, r3, #8
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	430a      	orrs	r2, r1
 800b630:	61da      	str	r2, [r3, #28]
      break;
 800b632:	e043      	b.n	800b6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68b9      	ldr	r1, [r7, #8]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 fc1a 	bl	800be74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f042 0208 	orr.w	r2, r2, #8
 800b64e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f022 0204 	bic.w	r2, r2, #4
 800b65e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	691a      	ldr	r2, [r3, #16]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	430a      	orrs	r2, r1
 800b670:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b672:	e023      	b.n	800b6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68b9      	ldr	r1, [r7, #8]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fc5e 	bl	800bf3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b68e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b69e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	021a      	lsls	r2, r3, #8
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	430a      	orrs	r2, r1
 800b6b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b6b4:	e002      	b.n	800b6bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b6ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3718      	adds	r7, #24
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop

0800b6d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d101      	bne.n	800b6ec <HAL_TIM_ConfigClockSource+0x1c>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e0dc      	b.n	800b8a6 <HAL_TIM_ConfigClockSource+0x1d6>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	4b6a      	ldr	r3, [pc, #424]	@ (800b8b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b708:	4013      	ands	r3, r2
 800b70a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a64      	ldr	r2, [pc, #400]	@ (800b8b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b722:	4293      	cmp	r3, r2
 800b724:	f000 80a9 	beq.w	800b87a <HAL_TIM_ConfigClockSource+0x1aa>
 800b728:	4a62      	ldr	r2, [pc, #392]	@ (800b8b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	f200 80ae 	bhi.w	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b730:	4a61      	ldr	r2, [pc, #388]	@ (800b8b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b732:	4293      	cmp	r3, r2
 800b734:	f000 80a1 	beq.w	800b87a <HAL_TIM_ConfigClockSource+0x1aa>
 800b738:	4a5f      	ldr	r2, [pc, #380]	@ (800b8b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	f200 80a6 	bhi.w	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b740:	4a5e      	ldr	r2, [pc, #376]	@ (800b8bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800b742:	4293      	cmp	r3, r2
 800b744:	f000 8099 	beq.w	800b87a <HAL_TIM_ConfigClockSource+0x1aa>
 800b748:	4a5c      	ldr	r2, [pc, #368]	@ (800b8bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	f200 809e 	bhi.w	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b750:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b754:	f000 8091 	beq.w	800b87a <HAL_TIM_ConfigClockSource+0x1aa>
 800b758:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b75c:	f200 8096 	bhi.w	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b760:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b764:	f000 8089 	beq.w	800b87a <HAL_TIM_ConfigClockSource+0x1aa>
 800b768:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b76c:	f200 808e 	bhi.w	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b774:	d03e      	beq.n	800b7f4 <HAL_TIM_ConfigClockSource+0x124>
 800b776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b77a:	f200 8087 	bhi.w	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b77e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b782:	f000 8086 	beq.w	800b892 <HAL_TIM_ConfigClockSource+0x1c2>
 800b786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b78a:	d87f      	bhi.n	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b78c:	2b70      	cmp	r3, #112	@ 0x70
 800b78e:	d01a      	beq.n	800b7c6 <HAL_TIM_ConfigClockSource+0xf6>
 800b790:	2b70      	cmp	r3, #112	@ 0x70
 800b792:	d87b      	bhi.n	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b794:	2b60      	cmp	r3, #96	@ 0x60
 800b796:	d050      	beq.n	800b83a <HAL_TIM_ConfigClockSource+0x16a>
 800b798:	2b60      	cmp	r3, #96	@ 0x60
 800b79a:	d877      	bhi.n	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b79c:	2b50      	cmp	r3, #80	@ 0x50
 800b79e:	d03c      	beq.n	800b81a <HAL_TIM_ConfigClockSource+0x14a>
 800b7a0:	2b50      	cmp	r3, #80	@ 0x50
 800b7a2:	d873      	bhi.n	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b7a4:	2b40      	cmp	r3, #64	@ 0x40
 800b7a6:	d058      	beq.n	800b85a <HAL_TIM_ConfigClockSource+0x18a>
 800b7a8:	2b40      	cmp	r3, #64	@ 0x40
 800b7aa:	d86f      	bhi.n	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b7ac:	2b30      	cmp	r3, #48	@ 0x30
 800b7ae:	d064      	beq.n	800b87a <HAL_TIM_ConfigClockSource+0x1aa>
 800b7b0:	2b30      	cmp	r3, #48	@ 0x30
 800b7b2:	d86b      	bhi.n	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b7b4:	2b20      	cmp	r3, #32
 800b7b6:	d060      	beq.n	800b87a <HAL_TIM_ConfigClockSource+0x1aa>
 800b7b8:	2b20      	cmp	r3, #32
 800b7ba:	d867      	bhi.n	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d05c      	beq.n	800b87a <HAL_TIM_ConfigClockSource+0x1aa>
 800b7c0:	2b10      	cmp	r3, #16
 800b7c2:	d05a      	beq.n	800b87a <HAL_TIM_ConfigClockSource+0x1aa>
 800b7c4:	e062      	b.n	800b88c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7d6:	f000 fc95 	bl	800c104 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b7e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	609a      	str	r2, [r3, #8]
      break;
 800b7f2:	e04f      	b.n	800b894 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b804:	f000 fc7e 	bl	800c104 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	689a      	ldr	r2, [r3, #8]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b816:	609a      	str	r2, [r3, #8]
      break;
 800b818:	e03c      	b.n	800b894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b826:	461a      	mov	r2, r3
 800b828:	f000 fbee 	bl	800c008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2150      	movs	r1, #80	@ 0x50
 800b832:	4618      	mov	r0, r3
 800b834:	f000 fc48 	bl	800c0c8 <TIM_ITRx_SetConfig>
      break;
 800b838:	e02c      	b.n	800b894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b846:	461a      	mov	r2, r3
 800b848:	f000 fc0d 	bl	800c066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2160      	movs	r1, #96	@ 0x60
 800b852:	4618      	mov	r0, r3
 800b854:	f000 fc38 	bl	800c0c8 <TIM_ITRx_SetConfig>
      break;
 800b858:	e01c      	b.n	800b894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b866:	461a      	mov	r2, r3
 800b868:	f000 fbce 	bl	800c008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2140      	movs	r1, #64	@ 0x40
 800b872:	4618      	mov	r0, r3
 800b874:	f000 fc28 	bl	800c0c8 <TIM_ITRx_SetConfig>
      break;
 800b878:	e00c      	b.n	800b894 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4619      	mov	r1, r3
 800b884:	4610      	mov	r0, r2
 800b886:	f000 fc1f 	bl	800c0c8 <TIM_ITRx_SetConfig>
      break;
 800b88a:	e003      	b.n	800b894 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	73fb      	strb	r3, [r7, #15]
      break;
 800b890:	e000      	b.n	800b894 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	ffceff88 	.word	0xffceff88
 800b8b4:	00100040 	.word	0x00100040
 800b8b8:	00100030 	.word	0x00100030
 800b8bc:	00100020 	.word	0x00100020

0800b8c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a46      	ldr	r2, [pc, #280]	@ (800ba3c <TIM_Base_SetConfig+0x12c>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d013      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b92e:	d00f      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a43      	ldr	r2, [pc, #268]	@ (800ba40 <TIM_Base_SetConfig+0x130>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d00b      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a42      	ldr	r2, [pc, #264]	@ (800ba44 <TIM_Base_SetConfig+0x134>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d007      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a41      	ldr	r2, [pc, #260]	@ (800ba48 <TIM_Base_SetConfig+0x138>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d003      	beq.n	800b950 <TIM_Base_SetConfig+0x40>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a40      	ldr	r2, [pc, #256]	@ (800ba4c <TIM_Base_SetConfig+0x13c>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d108      	bne.n	800b962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a35      	ldr	r2, [pc, #212]	@ (800ba3c <TIM_Base_SetConfig+0x12c>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d01f      	beq.n	800b9aa <TIM_Base_SetConfig+0x9a>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b970:	d01b      	beq.n	800b9aa <TIM_Base_SetConfig+0x9a>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a32      	ldr	r2, [pc, #200]	@ (800ba40 <TIM_Base_SetConfig+0x130>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d017      	beq.n	800b9aa <TIM_Base_SetConfig+0x9a>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a31      	ldr	r2, [pc, #196]	@ (800ba44 <TIM_Base_SetConfig+0x134>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d013      	beq.n	800b9aa <TIM_Base_SetConfig+0x9a>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a30      	ldr	r2, [pc, #192]	@ (800ba48 <TIM_Base_SetConfig+0x138>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d00f      	beq.n	800b9aa <TIM_Base_SetConfig+0x9a>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a2f      	ldr	r2, [pc, #188]	@ (800ba4c <TIM_Base_SetConfig+0x13c>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d00b      	beq.n	800b9aa <TIM_Base_SetConfig+0x9a>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a2e      	ldr	r2, [pc, #184]	@ (800ba50 <TIM_Base_SetConfig+0x140>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d007      	beq.n	800b9aa <TIM_Base_SetConfig+0x9a>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a2d      	ldr	r2, [pc, #180]	@ (800ba54 <TIM_Base_SetConfig+0x144>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d003      	beq.n	800b9aa <TIM_Base_SetConfig+0x9a>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a2c      	ldr	r2, [pc, #176]	@ (800ba58 <TIM_Base_SetConfig+0x148>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d108      	bne.n	800b9bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a16      	ldr	r2, [pc, #88]	@ (800ba3c <TIM_Base_SetConfig+0x12c>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d00f      	beq.n	800ba08 <TIM_Base_SetConfig+0xf8>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a18      	ldr	r2, [pc, #96]	@ (800ba4c <TIM_Base_SetConfig+0x13c>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d00b      	beq.n	800ba08 <TIM_Base_SetConfig+0xf8>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a17      	ldr	r2, [pc, #92]	@ (800ba50 <TIM_Base_SetConfig+0x140>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d007      	beq.n	800ba08 <TIM_Base_SetConfig+0xf8>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4a16      	ldr	r2, [pc, #88]	@ (800ba54 <TIM_Base_SetConfig+0x144>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d003      	beq.n	800ba08 <TIM_Base_SetConfig+0xf8>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a15      	ldr	r2, [pc, #84]	@ (800ba58 <TIM_Base_SetConfig+0x148>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d103      	bne.n	800ba10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	691a      	ldr	r2, [r3, #16]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d105      	bne.n	800ba2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	f023 0201 	bic.w	r2, r3, #1
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	611a      	str	r2, [r3, #16]
  }
}
 800ba2e:	bf00      	nop
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	40010000 	.word	0x40010000
 800ba40:	40000400 	.word	0x40000400
 800ba44:	40000800 	.word	0x40000800
 800ba48:	40000c00 	.word	0x40000c00
 800ba4c:	40010400 	.word	0x40010400
 800ba50:	40014000 	.word	0x40014000
 800ba54:	40014400 	.word	0x40014400
 800ba58:	40014800 	.word	0x40014800

0800ba5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a1b      	ldr	r3, [r3, #32]
 800ba70:	f023 0201 	bic.w	r2, r3, #1
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	4b37      	ldr	r3, [pc, #220]	@ (800bb64 <TIM_OC1_SetConfig+0x108>)
 800ba88:	4013      	ands	r3, r2
 800ba8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f023 0303 	bic.w	r3, r3, #3
 800ba92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f023 0302 	bic.w	r3, r3, #2
 800baa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	4313      	orrs	r3, r2
 800baae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a2d      	ldr	r2, [pc, #180]	@ (800bb68 <TIM_OC1_SetConfig+0x10c>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d00f      	beq.n	800bad8 <TIM_OC1_SetConfig+0x7c>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a2c      	ldr	r2, [pc, #176]	@ (800bb6c <TIM_OC1_SetConfig+0x110>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d00b      	beq.n	800bad8 <TIM_OC1_SetConfig+0x7c>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a2b      	ldr	r2, [pc, #172]	@ (800bb70 <TIM_OC1_SetConfig+0x114>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d007      	beq.n	800bad8 <TIM_OC1_SetConfig+0x7c>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4a2a      	ldr	r2, [pc, #168]	@ (800bb74 <TIM_OC1_SetConfig+0x118>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d003      	beq.n	800bad8 <TIM_OC1_SetConfig+0x7c>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a29      	ldr	r2, [pc, #164]	@ (800bb78 <TIM_OC1_SetConfig+0x11c>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d10c      	bne.n	800baf2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	f023 0308 	bic.w	r3, r3, #8
 800bade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f023 0304 	bic.w	r3, r3, #4
 800baf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a1c      	ldr	r2, [pc, #112]	@ (800bb68 <TIM_OC1_SetConfig+0x10c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00f      	beq.n	800bb1a <TIM_OC1_SetConfig+0xbe>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a1b      	ldr	r2, [pc, #108]	@ (800bb6c <TIM_OC1_SetConfig+0x110>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d00b      	beq.n	800bb1a <TIM_OC1_SetConfig+0xbe>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a1a      	ldr	r2, [pc, #104]	@ (800bb70 <TIM_OC1_SetConfig+0x114>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d007      	beq.n	800bb1a <TIM_OC1_SetConfig+0xbe>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a19      	ldr	r2, [pc, #100]	@ (800bb74 <TIM_OC1_SetConfig+0x118>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d003      	beq.n	800bb1a <TIM_OC1_SetConfig+0xbe>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a18      	ldr	r2, [pc, #96]	@ (800bb78 <TIM_OC1_SetConfig+0x11c>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d111      	bne.n	800bb3e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bb28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	693a      	ldr	r2, [r7, #16]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	697a      	ldr	r2, [r7, #20]
 800bb56:	621a      	str	r2, [r3, #32]
}
 800bb58:	bf00      	nop
 800bb5a:	371c      	adds	r7, #28
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	fffeff8f 	.word	0xfffeff8f
 800bb68:	40010000 	.word	0x40010000
 800bb6c:	40010400 	.word	0x40010400
 800bb70:	40014000 	.word	0x40014000
 800bb74:	40014400 	.word	0x40014400
 800bb78:	40014800 	.word	0x40014800

0800bb7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	f023 0210 	bic.w	r2, r3, #16
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	699b      	ldr	r3, [r3, #24]
 800bba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	4b34      	ldr	r3, [pc, #208]	@ (800bc78 <TIM_OC2_SetConfig+0xfc>)
 800bba8:	4013      	ands	r3, r2
 800bbaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	021b      	lsls	r3, r3, #8
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f023 0320 	bic.w	r3, r3, #32
 800bbc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	011b      	lsls	r3, r3, #4
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a29      	ldr	r2, [pc, #164]	@ (800bc7c <TIM_OC2_SetConfig+0x100>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d003      	beq.n	800bbe4 <TIM_OC2_SetConfig+0x68>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a28      	ldr	r2, [pc, #160]	@ (800bc80 <TIM_OC2_SetConfig+0x104>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d10d      	bne.n	800bc00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	011b      	lsls	r3, r3, #4
 800bbf2:	697a      	ldr	r2, [r7, #20]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a1e      	ldr	r2, [pc, #120]	@ (800bc7c <TIM_OC2_SetConfig+0x100>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d00f      	beq.n	800bc28 <TIM_OC2_SetConfig+0xac>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a1d      	ldr	r2, [pc, #116]	@ (800bc80 <TIM_OC2_SetConfig+0x104>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d00b      	beq.n	800bc28 <TIM_OC2_SetConfig+0xac>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a1c      	ldr	r2, [pc, #112]	@ (800bc84 <TIM_OC2_SetConfig+0x108>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d007      	beq.n	800bc28 <TIM_OC2_SetConfig+0xac>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a1b      	ldr	r2, [pc, #108]	@ (800bc88 <TIM_OC2_SetConfig+0x10c>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d003      	beq.n	800bc28 <TIM_OC2_SetConfig+0xac>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a1a      	ldr	r2, [pc, #104]	@ (800bc8c <TIM_OC2_SetConfig+0x110>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d113      	bne.n	800bc50 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	699b      	ldr	r3, [r3, #24]
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	685a      	ldr	r2, [r3, #4]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	697a      	ldr	r2, [r7, #20]
 800bc68:	621a      	str	r2, [r3, #32]
}
 800bc6a:	bf00      	nop
 800bc6c:	371c      	adds	r7, #28
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	feff8fff 	.word	0xfeff8fff
 800bc7c:	40010000 	.word	0x40010000
 800bc80:	40010400 	.word	0x40010400
 800bc84:	40014000 	.word	0x40014000
 800bc88:	40014400 	.word	0x40014400
 800bc8c:	40014800 	.word	0x40014800

0800bc90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a1b      	ldr	r3, [r3, #32]
 800bca4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	69db      	ldr	r3, [r3, #28]
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	4b33      	ldr	r3, [pc, #204]	@ (800bd88 <TIM_OC3_SetConfig+0xf8>)
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f023 0303 	bic.w	r3, r3, #3
 800bcc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bcd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	021b      	lsls	r3, r3, #8
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a28      	ldr	r2, [pc, #160]	@ (800bd8c <TIM_OC3_SetConfig+0xfc>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d003      	beq.n	800bcf6 <TIM_OC3_SetConfig+0x66>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a27      	ldr	r2, [pc, #156]	@ (800bd90 <TIM_OC3_SetConfig+0x100>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d10d      	bne.n	800bd12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	021b      	lsls	r3, r3, #8
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a1d      	ldr	r2, [pc, #116]	@ (800bd8c <TIM_OC3_SetConfig+0xfc>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d00f      	beq.n	800bd3a <TIM_OC3_SetConfig+0xaa>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a1c      	ldr	r2, [pc, #112]	@ (800bd90 <TIM_OC3_SetConfig+0x100>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d00b      	beq.n	800bd3a <TIM_OC3_SetConfig+0xaa>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a1b      	ldr	r2, [pc, #108]	@ (800bd94 <TIM_OC3_SetConfig+0x104>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d007      	beq.n	800bd3a <TIM_OC3_SetConfig+0xaa>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a1a      	ldr	r2, [pc, #104]	@ (800bd98 <TIM_OC3_SetConfig+0x108>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d003      	beq.n	800bd3a <TIM_OC3_SetConfig+0xaa>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a19      	ldr	r2, [pc, #100]	@ (800bd9c <TIM_OC3_SetConfig+0x10c>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d113      	bne.n	800bd62 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	011b      	lsls	r3, r3, #4
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	011b      	lsls	r3, r3, #4
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	621a      	str	r2, [r3, #32]
}
 800bd7c:	bf00      	nop
 800bd7e:	371c      	adds	r7, #28
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	fffeff8f 	.word	0xfffeff8f
 800bd8c:	40010000 	.word	0x40010000
 800bd90:	40010400 	.word	0x40010400
 800bd94:	40014000 	.word	0x40014000
 800bd98:	40014400 	.word	0x40014400
 800bd9c:	40014800 	.word	0x40014800

0800bda0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b087      	sub	sp, #28
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a1b      	ldr	r3, [r3, #32]
 800bdb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4b24      	ldr	r3, [pc, #144]	@ (800be5c <TIM_OC4_SetConfig+0xbc>)
 800bdcc:	4013      	ands	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	021b      	lsls	r3, r3, #8
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bdea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	031b      	lsls	r3, r3, #12
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a19      	ldr	r2, [pc, #100]	@ (800be60 <TIM_OC4_SetConfig+0xc0>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d00f      	beq.n	800be20 <TIM_OC4_SetConfig+0x80>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a18      	ldr	r2, [pc, #96]	@ (800be64 <TIM_OC4_SetConfig+0xc4>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d00b      	beq.n	800be20 <TIM_OC4_SetConfig+0x80>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a17      	ldr	r2, [pc, #92]	@ (800be68 <TIM_OC4_SetConfig+0xc8>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d007      	beq.n	800be20 <TIM_OC4_SetConfig+0x80>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a16      	ldr	r2, [pc, #88]	@ (800be6c <TIM_OC4_SetConfig+0xcc>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d003      	beq.n	800be20 <TIM_OC4_SetConfig+0x80>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a15      	ldr	r2, [pc, #84]	@ (800be70 <TIM_OC4_SetConfig+0xd0>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d109      	bne.n	800be34 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	019b      	lsls	r3, r3, #6
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	4313      	orrs	r3, r2
 800be32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	693a      	ldr	r2, [r7, #16]
 800be4c:	621a      	str	r2, [r3, #32]
}
 800be4e:	bf00      	nop
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	feff8fff 	.word	0xfeff8fff
 800be60:	40010000 	.word	0x40010000
 800be64:	40010400 	.word	0x40010400
 800be68:	40014000 	.word	0x40014000
 800be6c:	40014400 	.word	0x40014400
 800be70:	40014800 	.word	0x40014800

0800be74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a1b      	ldr	r3, [r3, #32]
 800be88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	4b21      	ldr	r3, [pc, #132]	@ (800bf24 <TIM_OC5_SetConfig+0xb0>)
 800bea0:	4013      	ands	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	4313      	orrs	r3, r2
 800beac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800beb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	041b      	lsls	r3, r3, #16
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a18      	ldr	r2, [pc, #96]	@ (800bf28 <TIM_OC5_SetConfig+0xb4>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d00f      	beq.n	800beea <TIM_OC5_SetConfig+0x76>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a17      	ldr	r2, [pc, #92]	@ (800bf2c <TIM_OC5_SetConfig+0xb8>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d00b      	beq.n	800beea <TIM_OC5_SetConfig+0x76>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a16      	ldr	r2, [pc, #88]	@ (800bf30 <TIM_OC5_SetConfig+0xbc>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d007      	beq.n	800beea <TIM_OC5_SetConfig+0x76>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4a15      	ldr	r2, [pc, #84]	@ (800bf34 <TIM_OC5_SetConfig+0xc0>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d003      	beq.n	800beea <TIM_OC5_SetConfig+0x76>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a14      	ldr	r2, [pc, #80]	@ (800bf38 <TIM_OC5_SetConfig+0xc4>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d109      	bne.n	800befe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bef0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	021b      	lsls	r3, r3, #8
 800bef8:	697a      	ldr	r2, [r7, #20]
 800befa:	4313      	orrs	r3, r2
 800befc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	697a      	ldr	r2, [r7, #20]
 800bf02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	621a      	str	r2, [r3, #32]
}
 800bf18:	bf00      	nop
 800bf1a:	371c      	adds	r7, #28
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	fffeff8f 	.word	0xfffeff8f
 800bf28:	40010000 	.word	0x40010000
 800bf2c:	40010400 	.word	0x40010400
 800bf30:	40014000 	.word	0x40014000
 800bf34:	40014400 	.word	0x40014400
 800bf38:	40014800 	.word	0x40014800

0800bf3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b087      	sub	sp, #28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	4b22      	ldr	r3, [pc, #136]	@ (800bff0 <TIM_OC6_SetConfig+0xb4>)
 800bf68:	4013      	ands	r3, r2
 800bf6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	021b      	lsls	r3, r3, #8
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bf7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	051b      	lsls	r3, r3, #20
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a19      	ldr	r2, [pc, #100]	@ (800bff4 <TIM_OC6_SetConfig+0xb8>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d00f      	beq.n	800bfb4 <TIM_OC6_SetConfig+0x78>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a18      	ldr	r2, [pc, #96]	@ (800bff8 <TIM_OC6_SetConfig+0xbc>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d00b      	beq.n	800bfb4 <TIM_OC6_SetConfig+0x78>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a17      	ldr	r2, [pc, #92]	@ (800bffc <TIM_OC6_SetConfig+0xc0>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d007      	beq.n	800bfb4 <TIM_OC6_SetConfig+0x78>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a16      	ldr	r2, [pc, #88]	@ (800c000 <TIM_OC6_SetConfig+0xc4>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d003      	beq.n	800bfb4 <TIM_OC6_SetConfig+0x78>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a15      	ldr	r2, [pc, #84]	@ (800c004 <TIM_OC6_SetConfig+0xc8>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d109      	bne.n	800bfc8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bfba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	029b      	lsls	r3, r3, #10
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	693a      	ldr	r2, [r7, #16]
 800bfe0:	621a      	str	r2, [r3, #32]
}
 800bfe2:	bf00      	nop
 800bfe4:	371c      	adds	r7, #28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	feff8fff 	.word	0xfeff8fff
 800bff4:	40010000 	.word	0x40010000
 800bff8:	40010400 	.word	0x40010400
 800bffc:	40014000 	.word	0x40014000
 800c000:	40014400 	.word	0x40014400
 800c004:	40014800 	.word	0x40014800

0800c008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c008:	b480      	push	{r7}
 800c00a:	b087      	sub	sp, #28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	f023 0201 	bic.w	r2, r3, #1
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	011b      	lsls	r3, r3, #4
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f023 030a 	bic.w	r3, r3, #10
 800c044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	621a      	str	r2, [r3, #32]
}
 800c05a:	bf00      	nop
 800c05c:	371c      	adds	r7, #28
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c066:	b480      	push	{r7}
 800c068:	b087      	sub	sp, #28
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6a1b      	ldr	r3, [r3, #32]
 800c07c:	f023 0210 	bic.w	r2, r3, #16
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	031b      	lsls	r3, r3, #12
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	4313      	orrs	r3, r2
 800c09a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c0a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	011b      	lsls	r3, r3, #4
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	621a      	str	r2, [r3, #32]
}
 800c0ba:	bf00      	nop
 800c0bc:	371c      	adds	r7, #28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
	...

0800c0c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	4b09      	ldr	r3, [pc, #36]	@ (800c100 <TIM_ITRx_SetConfig+0x38>)
 800c0dc:	4013      	ands	r3, r2
 800c0de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	f043 0307 	orr.w	r3, r3, #7
 800c0ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	609a      	str	r2, [r3, #8]
}
 800c0f2:	bf00      	nop
 800c0f4:	3714      	adds	r7, #20
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	ffcfff8f 	.word	0xffcfff8f

0800c104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c104:	b480      	push	{r7}
 800c106:	b087      	sub	sp, #28
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c11e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	021a      	lsls	r2, r3, #8
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	431a      	orrs	r2, r3
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	697a      	ldr	r2, [r7, #20]
 800c12e:	4313      	orrs	r3, r2
 800c130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	697a      	ldr	r2, [r7, #20]
 800c136:	609a      	str	r2, [r3, #8]
}
 800c138:	bf00      	nop
 800c13a:	371c      	adds	r7, #28
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c144:	b480      	push	{r7}
 800c146:	b087      	sub	sp, #28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f003 031f 	and.w	r3, r3, #31
 800c156:	2201      	movs	r2, #1
 800c158:	fa02 f303 	lsl.w	r3, r2, r3
 800c15c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6a1a      	ldr	r2, [r3, #32]
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	43db      	mvns	r3, r3
 800c166:	401a      	ands	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6a1a      	ldr	r2, [r3, #32]
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f003 031f 	and.w	r3, r3, #31
 800c176:	6879      	ldr	r1, [r7, #4]
 800c178:	fa01 f303 	lsl.w	r3, r1, r3
 800c17c:	431a      	orrs	r2, r3
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	621a      	str	r2, [r3, #32]
}
 800c182:	bf00      	nop
 800c184:	371c      	adds	r7, #28
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
	...

0800c190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d101      	bne.n	800c1a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e06d      	b.n	800c284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2202      	movs	r2, #2
 800c1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a30      	ldr	r2, [pc, #192]	@ (800c290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d004      	beq.n	800c1dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a2f      	ldr	r2, [pc, #188]	@ (800c294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d108      	bne.n	800c1ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c1e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a20      	ldr	r2, [pc, #128]	@ (800c290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d022      	beq.n	800c258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c21a:	d01d      	beq.n	800c258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a1d      	ldr	r2, [pc, #116]	@ (800c298 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d018      	beq.n	800c258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a1c      	ldr	r2, [pc, #112]	@ (800c29c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d013      	beq.n	800c258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a1a      	ldr	r2, [pc, #104]	@ (800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d00e      	beq.n	800c258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a15      	ldr	r2, [pc, #84]	@ (800c294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d009      	beq.n	800c258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a16      	ldr	r2, [pc, #88]	@ (800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d004      	beq.n	800c258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a15      	ldr	r2, [pc, #84]	@ (800c2a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d10c      	bne.n	800c272 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c25e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	4313      	orrs	r3, r2
 800c268:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	40010000 	.word	0x40010000
 800c294:	40010400 	.word	0x40010400
 800c298:	40000400 	.word	0x40000400
 800c29c:	40000800 	.word	0x40000800
 800c2a0:	40000c00 	.word	0x40000c00
 800c2a4:	40001800 	.word	0x40001800
 800c2a8:	40014000 	.word	0x40014000

0800c2ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d101      	bne.n	800c2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	e065      	b.n	800c394 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4313      	orrs	r3, r2
 800c306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	4313      	orrs	r3, r2
 800c314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	4313      	orrs	r3, r2
 800c322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c32e:	4313      	orrs	r3, r2
 800c330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	699b      	ldr	r3, [r3, #24]
 800c33c:	041b      	lsls	r3, r3, #16
 800c33e:	4313      	orrs	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a16      	ldr	r2, [pc, #88]	@ (800c3a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d004      	beq.n	800c356 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a14      	ldr	r2, [pc, #80]	@ (800c3a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d115      	bne.n	800c382 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c360:	051b      	lsls	r3, r3, #20
 800c362:	4313      	orrs	r3, r2
 800c364:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	69db      	ldr	r3, [r3, #28]
 800c370:	4313      	orrs	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	6a1b      	ldr	r3, [r3, #32]
 800c37e:	4313      	orrs	r3, r2
 800c380:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c392:	2300      	movs	r3, #0
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	40010000 	.word	0x40010000
 800c3a4:	40010400 	.word	0x40010400

0800c3a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	f107 001c 	add.w	r0, r7, #28
 800c3f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c3f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d121      	bne.n	800c442 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c402:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	68da      	ldr	r2, [r3, #12]
 800c40e:	4b2c      	ldr	r3, [pc, #176]	@ (800c4c0 <USB_CoreInit+0xdc>)
 800c410:	4013      	ands	r3, r2
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c422:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c426:	2b01      	cmp	r3, #1
 800c428:	d105      	bne.n	800c436 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f001 faf6 	bl	800da28 <USB_CoreReset>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
 800c440:	e01b      	b.n	800c47a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f001 faea 	bl	800da28 <USB_CoreReset>
 800c454:	4603      	mov	r3, r0
 800c456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c458:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d106      	bne.n	800c46e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c464:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c46c:	e005      	b.n	800c47a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c472:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c47a:	7fbb      	ldrb	r3, [r7, #30]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d116      	bne.n	800c4ae <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c484:	b29a      	uxth	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c48e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4c4 <USB_CoreInit+0xe0>)
 800c490:	4313      	orrs	r3, r2
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	f043 0206 	orr.w	r2, r3, #6
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	f043 0220 	orr.w	r2, r3, #32
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4ba:	b004      	add	sp, #16
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	ffbdffbf 	.word	0xffbdffbf
 800c4c4:	03ee0000 	.word	0x03ee0000

0800c4c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c4d6:	79fb      	ldrb	r3, [r7, #7]
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d165      	bne.n	800c5a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	4a41      	ldr	r2, [pc, #260]	@ (800c5e4 <USB_SetTurnaroundTime+0x11c>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d906      	bls.n	800c4f2 <USB_SetTurnaroundTime+0x2a>
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	4a40      	ldr	r2, [pc, #256]	@ (800c5e8 <USB_SetTurnaroundTime+0x120>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d202      	bcs.n	800c4f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c4ec:	230f      	movs	r3, #15
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e062      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	4a3c      	ldr	r2, [pc, #240]	@ (800c5e8 <USB_SetTurnaroundTime+0x120>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d306      	bcc.n	800c508 <USB_SetTurnaroundTime+0x40>
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4a3b      	ldr	r2, [pc, #236]	@ (800c5ec <USB_SetTurnaroundTime+0x124>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d202      	bcs.n	800c508 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c502:	230e      	movs	r3, #14
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e057      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4a38      	ldr	r2, [pc, #224]	@ (800c5ec <USB_SetTurnaroundTime+0x124>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d306      	bcc.n	800c51e <USB_SetTurnaroundTime+0x56>
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4a37      	ldr	r2, [pc, #220]	@ (800c5f0 <USB_SetTurnaroundTime+0x128>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d202      	bcs.n	800c51e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c518:	230d      	movs	r3, #13
 800c51a:	617b      	str	r3, [r7, #20]
 800c51c:	e04c      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	4a33      	ldr	r2, [pc, #204]	@ (800c5f0 <USB_SetTurnaroundTime+0x128>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d306      	bcc.n	800c534 <USB_SetTurnaroundTime+0x6c>
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	4a32      	ldr	r2, [pc, #200]	@ (800c5f4 <USB_SetTurnaroundTime+0x12c>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d802      	bhi.n	800c534 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c52e:	230c      	movs	r3, #12
 800c530:	617b      	str	r3, [r7, #20]
 800c532:	e041      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	4a2f      	ldr	r2, [pc, #188]	@ (800c5f4 <USB_SetTurnaroundTime+0x12c>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d906      	bls.n	800c54a <USB_SetTurnaroundTime+0x82>
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	4a2e      	ldr	r2, [pc, #184]	@ (800c5f8 <USB_SetTurnaroundTime+0x130>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d802      	bhi.n	800c54a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c544:	230b      	movs	r3, #11
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	e036      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	4a2a      	ldr	r2, [pc, #168]	@ (800c5f8 <USB_SetTurnaroundTime+0x130>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d906      	bls.n	800c560 <USB_SetTurnaroundTime+0x98>
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	4a29      	ldr	r2, [pc, #164]	@ (800c5fc <USB_SetTurnaroundTime+0x134>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d802      	bhi.n	800c560 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c55a:	230a      	movs	r3, #10
 800c55c:	617b      	str	r3, [r7, #20]
 800c55e:	e02b      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	4a26      	ldr	r2, [pc, #152]	@ (800c5fc <USB_SetTurnaroundTime+0x134>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d906      	bls.n	800c576 <USB_SetTurnaroundTime+0xae>
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	4a25      	ldr	r2, [pc, #148]	@ (800c600 <USB_SetTurnaroundTime+0x138>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d202      	bcs.n	800c576 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c570:	2309      	movs	r3, #9
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e020      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	4a21      	ldr	r2, [pc, #132]	@ (800c600 <USB_SetTurnaroundTime+0x138>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d306      	bcc.n	800c58c <USB_SetTurnaroundTime+0xc4>
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	4a20      	ldr	r2, [pc, #128]	@ (800c604 <USB_SetTurnaroundTime+0x13c>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d802      	bhi.n	800c58c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c586:	2308      	movs	r3, #8
 800c588:	617b      	str	r3, [r7, #20]
 800c58a:	e015      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	4a1d      	ldr	r2, [pc, #116]	@ (800c604 <USB_SetTurnaroundTime+0x13c>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d906      	bls.n	800c5a2 <USB_SetTurnaroundTime+0xda>
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	4a1c      	ldr	r2, [pc, #112]	@ (800c608 <USB_SetTurnaroundTime+0x140>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d202      	bcs.n	800c5a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c59c:	2307      	movs	r3, #7
 800c59e:	617b      	str	r3, [r7, #20]
 800c5a0:	e00a      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c5a2:	2306      	movs	r3, #6
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	e007      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c5a8:	79fb      	ldrb	r3, [r7, #7]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d102      	bne.n	800c5b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c5ae:	2309      	movs	r3, #9
 800c5b0:	617b      	str	r3, [r7, #20]
 800c5b2:	e001      	b.n	800c5b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c5b4:	2309      	movs	r3, #9
 800c5b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	68da      	ldr	r2, [r3, #12]
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	029b      	lsls	r3, r3, #10
 800c5cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c5d0:	431a      	orrs	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	371c      	adds	r7, #28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr
 800c5e4:	00d8acbf 	.word	0x00d8acbf
 800c5e8:	00e4e1c0 	.word	0x00e4e1c0
 800c5ec:	00f42400 	.word	0x00f42400
 800c5f0:	01067380 	.word	0x01067380
 800c5f4:	011a499f 	.word	0x011a499f
 800c5f8:	01312cff 	.word	0x01312cff
 800c5fc:	014ca43f 	.word	0x014ca43f
 800c600:	016e3600 	.word	0x016e3600
 800c604:	01a6ab1f 	.word	0x01a6ab1f
 800c608:	01e84800 	.word	0x01e84800

0800c60c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	f043 0201 	orr.w	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c62e:	b480      	push	{r7}
 800c630:	b083      	sub	sp, #12
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f023 0201 	bic.w	r2, r3, #1
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c65c:	2300      	movs	r3, #0
 800c65e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c66c:	78fb      	ldrb	r3, [r7, #3]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d115      	bne.n	800c69e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c67e:	200a      	movs	r0, #10
 800c680:	f7f3 ff0c 	bl	800049c <HAL_Delay>
      ms += 10U;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	330a      	adds	r3, #10
 800c688:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f001 f93b 	bl	800d906 <USB_GetMode>
 800c690:	4603      	mov	r3, r0
 800c692:	2b01      	cmp	r3, #1
 800c694:	d01e      	beq.n	800c6d4 <USB_SetCurrentMode+0x84>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2bc7      	cmp	r3, #199	@ 0xc7
 800c69a:	d9f0      	bls.n	800c67e <USB_SetCurrentMode+0x2e>
 800c69c:	e01a      	b.n	800c6d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c69e:	78fb      	ldrb	r3, [r7, #3]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d115      	bne.n	800c6d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c6b0:	200a      	movs	r0, #10
 800c6b2:	f7f3 fef3 	bl	800049c <HAL_Delay>
      ms += 10U;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	330a      	adds	r3, #10
 800c6ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f001 f922 	bl	800d906 <USB_GetMode>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d005      	beq.n	800c6d4 <USB_SetCurrentMode+0x84>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2bc7      	cmp	r3, #199	@ 0xc7
 800c6cc:	d9f0      	bls.n	800c6b0 <USB_SetCurrentMode+0x60>
 800c6ce:	e001      	b.n	800c6d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e005      	b.n	800c6e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2bc8      	cmp	r3, #200	@ 0xc8
 800c6d8:	d101      	bne.n	800c6de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e000      	b.n	800c6e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b086      	sub	sp, #24
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c6f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c702:	2300      	movs	r3, #0
 800c704:	613b      	str	r3, [r7, #16]
 800c706:	e009      	b.n	800c71c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	3340      	adds	r3, #64	@ 0x40
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	2200      	movs	r2, #0
 800c714:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	3301      	adds	r3, #1
 800c71a:	613b      	str	r3, [r7, #16]
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	2b0e      	cmp	r3, #14
 800c720:	d9f2      	bls.n	800c708 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c722:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c726:	2b00      	cmp	r3, #0
 800c728:	d11c      	bne.n	800c764 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c738:	f043 0302 	orr.w	r3, r3, #2
 800c73c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c742:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	601a      	str	r2, [r3, #0]
 800c762:	e005      	b.n	800c770 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c768:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c776:	461a      	mov	r2, r3
 800c778:	2300      	movs	r3, #0
 800c77a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c77c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c780:	2b01      	cmp	r3, #1
 800c782:	d10d      	bne.n	800c7a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d104      	bne.n	800c796 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c78c:	2100      	movs	r1, #0
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f968 	bl	800ca64 <USB_SetDevSpeed>
 800c794:	e008      	b.n	800c7a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c796:	2101      	movs	r1, #1
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f963 	bl	800ca64 <USB_SetDevSpeed>
 800c79e:	e003      	b.n	800c7a8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c7a0:	2103      	movs	r1, #3
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f95e 	bl	800ca64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c7a8:	2110      	movs	r1, #16
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f8fa 	bl	800c9a4 <USB_FlushTxFifo>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d001      	beq.n	800c7ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f924 	bl	800ca08 <USB_FlushRxFifo>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7dc:	461a      	mov	r2, r3
 800c7de:	2300      	movs	r3, #0
 800c7e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	613b      	str	r3, [r7, #16]
 800c7f2:	e043      	b.n	800c87c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	015a      	lsls	r2, r3, #5
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c806:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c80a:	d118      	bne.n	800c83e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10a      	bne.n	800c828 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c81e:	461a      	mov	r2, r3
 800c820:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	e013      	b.n	800c850 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	015a      	lsls	r2, r3, #5
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	4413      	add	r3, r2
 800c830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c834:	461a      	mov	r2, r3
 800c836:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c83a:	6013      	str	r3, [r2, #0]
 800c83c:	e008      	b.n	800c850 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	015a      	lsls	r2, r3, #5
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	4413      	add	r3, r2
 800c846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c84a:	461a      	mov	r2, r3
 800c84c:	2300      	movs	r3, #0
 800c84e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	015a      	lsls	r2, r3, #5
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	4413      	add	r3, r2
 800c858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c85c:	461a      	mov	r2, r3
 800c85e:	2300      	movs	r3, #0
 800c860:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	015a      	lsls	r2, r3, #5
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	4413      	add	r3, r2
 800c86a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c86e:	461a      	mov	r2, r3
 800c870:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c874:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	3301      	adds	r3, #1
 800c87a:	613b      	str	r3, [r7, #16]
 800c87c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c880:	461a      	mov	r2, r3
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	4293      	cmp	r3, r2
 800c886:	d3b5      	bcc.n	800c7f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c888:	2300      	movs	r3, #0
 800c88a:	613b      	str	r3, [r7, #16]
 800c88c:	e043      	b.n	800c916 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c8a4:	d118      	bne.n	800c8d8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c8be:	6013      	str	r3, [r2, #0]
 800c8c0:	e013      	b.n	800c8ea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	015a      	lsls	r2, r3, #5
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c8d4:	6013      	str	r3, [r2, #0]
 800c8d6:	e008      	b.n	800c8ea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	015a      	lsls	r2, r3, #5
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	4413      	add	r3, r2
 800c8e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	015a      	lsls	r2, r3, #5
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	015a      	lsls	r2, r3, #5
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	4413      	add	r3, r2
 800c904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c908:	461a      	mov	r2, r3
 800c90a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c90e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	3301      	adds	r3, #1
 800c914:	613b      	str	r3, [r7, #16]
 800c916:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c91a:	461a      	mov	r2, r3
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	4293      	cmp	r3, r2
 800c920:	d3b5      	bcc.n	800c88e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c934:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c942:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c944:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d105      	bne.n	800c958 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	f043 0210 	orr.w	r2, r3, #16
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	699a      	ldr	r2, [r3, #24]
 800c95c:	4b0f      	ldr	r3, [pc, #60]	@ (800c99c <USB_DevInit+0x2b4>)
 800c95e:	4313      	orrs	r3, r2
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c964:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d005      	beq.n	800c978 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	f043 0208 	orr.w	r2, r3, #8
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c978:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d105      	bne.n	800c98c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	699a      	ldr	r2, [r3, #24]
 800c984:	4b06      	ldr	r3, [pc, #24]	@ (800c9a0 <USB_DevInit+0x2b8>)
 800c986:	4313      	orrs	r3, r2
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c998:	b004      	add	sp, #16
 800c99a:	4770      	bx	lr
 800c99c:	803c3800 	.word	0x803c3800
 800c9a0:	40000004 	.word	0x40000004

0800c9a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c9be:	d901      	bls.n	800c9c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e01b      	b.n	800c9fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	daf2      	bge.n	800c9b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	019b      	lsls	r3, r3, #6
 800c9d4:	f043 0220 	orr.w	r2, r3, #32
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c9e8:	d901      	bls.n	800c9ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	e006      	b.n	800c9fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	f003 0320 	and.w	r3, r3, #32
 800c9f6:	2b20      	cmp	r3, #32
 800c9f8:	d0f0      	beq.n	800c9dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3301      	adds	r3, #1
 800ca18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca20:	d901      	bls.n	800ca26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ca22:	2303      	movs	r3, #3
 800ca24:	e018      	b.n	800ca58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	daf2      	bge.n	800ca14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2210      	movs	r2, #16
 800ca36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca44:	d901      	bls.n	800ca4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e006      	b.n	800ca58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	f003 0310 	and.w	r3, r3, #16
 800ca52:	2b10      	cmp	r3, #16
 800ca54:	d0f0      	beq.n	800ca38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	78fb      	ldrb	r3, [r7, #3]
 800ca7e:	68f9      	ldr	r1, [r7, #12]
 800ca80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ca84:	4313      	orrs	r3, r2
 800ca86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3714      	adds	r7, #20
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca96:	b480      	push	{r7}
 800ca98:	b087      	sub	sp, #28
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	f003 0306 	and.w	r3, r3, #6
 800caae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d102      	bne.n	800cabc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cab6:	2300      	movs	r3, #0
 800cab8:	75fb      	strb	r3, [r7, #23]
 800caba:	e00a      	b.n	800cad2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d002      	beq.n	800cac8 <USB_GetDevSpeed+0x32>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b06      	cmp	r3, #6
 800cac6:	d102      	bne.n	800cace <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cac8:	2302      	movs	r3, #2
 800caca:	75fb      	strb	r3, [r7, #23]
 800cacc:	e001      	b.n	800cad2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cace:	230f      	movs	r3, #15
 800cad0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cad2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	371c      	adds	r7, #28
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	785b      	ldrb	r3, [r3, #1]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d139      	bne.n	800cb70 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb02:	69da      	ldr	r2, [r3, #28]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	f003 030f 	and.w	r3, r3, #15
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	fa01 f303 	lsl.w	r3, r1, r3
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	68f9      	ldr	r1, [r7, #12]
 800cb16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	015a      	lsls	r2, r3, #5
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	4413      	add	r3, r2
 800cb26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d153      	bne.n	800cbdc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	791b      	ldrb	r3, [r3, #4]
 800cb4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	059b      	lsls	r3, r3, #22
 800cb56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb58:	431a      	orrs	r2, r3
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	0159      	lsls	r1, r3, #5
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	440b      	add	r3, r1
 800cb62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb66:	4619      	mov	r1, r3
 800cb68:	4b20      	ldr	r3, [pc, #128]	@ (800cbec <USB_ActivateEndpoint+0x10c>)
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	600b      	str	r3, [r1, #0]
 800cb6e:	e035      	b.n	800cbdc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb76:	69da      	ldr	r2, [r3, #28]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	f003 030f 	and.w	r3, r3, #15
 800cb80:	2101      	movs	r1, #1
 800cb82:	fa01 f303 	lsl.w	r3, r1, r3
 800cb86:	041b      	lsls	r3, r3, #16
 800cb88:	68f9      	ldr	r1, [r7, #12]
 800cb8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	015a      	lsls	r2, r3, #5
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	4413      	add	r3, r2
 800cb9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d119      	bne.n	800cbdc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	791b      	ldrb	r3, [r3, #4]
 800cbc2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbc4:	430b      	orrs	r3, r1
 800cbc6:	431a      	orrs	r2, r3
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	0159      	lsls	r1, r3, #5
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	440b      	add	r3, r1
 800cbd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4b05      	ldr	r3, [pc, #20]	@ (800cbec <USB_ActivateEndpoint+0x10c>)
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3714      	adds	r7, #20
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	10008000 	.word	0x10008000

0800cbf0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	785b      	ldrb	r3, [r3, #1]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d161      	bne.n	800ccd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	015a      	lsls	r2, r3, #5
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	4413      	add	r3, r2
 800cc14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc22:	d11f      	bne.n	800cc64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68ba      	ldr	r2, [r7, #8]
 800cc34:	0151      	lsls	r1, r2, #5
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	440a      	add	r2, r1
 800cc3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cc42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	015a      	lsls	r2, r3, #5
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	0151      	lsls	r1, r2, #5
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	440a      	add	r2, r1
 800cc5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cc62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	f003 030f 	and.w	r3, r3, #15
 800cc74:	2101      	movs	r1, #1
 800cc76:	fa01 f303 	lsl.w	r3, r1, r3
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	43db      	mvns	r3, r3
 800cc7e:	68f9      	ldr	r1, [r7, #12]
 800cc80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cc84:	4013      	ands	r3, r2
 800cc86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc8e:	69da      	ldr	r2, [r3, #28]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	f003 030f 	and.w	r3, r3, #15
 800cc98:	2101      	movs	r1, #1
 800cc9a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	43db      	mvns	r3, r3
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cca8:	4013      	ands	r3, r2
 800ccaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	015a      	lsls	r2, r3, #5
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	0159      	lsls	r1, r3, #5
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	440b      	add	r3, r1
 800ccc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4b35      	ldr	r3, [pc, #212]	@ (800cda0 <USB_DeactivateEndpoint+0x1b0>)
 800ccca:	4013      	ands	r3, r2
 800cccc:	600b      	str	r3, [r1, #0]
 800ccce:	e060      	b.n	800cd92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	015a      	lsls	r2, r3, #5
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cce2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cce6:	d11f      	bne.n	800cd28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	015a      	lsls	r2, r3, #5
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4413      	add	r3, r2
 800ccf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	0151      	lsls	r1, r2, #5
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	440a      	add	r2, r1
 800ccfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cd06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	015a      	lsls	r2, r3, #5
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	4413      	add	r3, r2
 800cd10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	0151      	lsls	r1, r2, #5
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	440a      	add	r2, r1
 800cd1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	f003 030f 	and.w	r3, r3, #15
 800cd38:	2101      	movs	r1, #1
 800cd3a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd3e:	041b      	lsls	r3, r3, #16
 800cd40:	43db      	mvns	r3, r3
 800cd42:	68f9      	ldr	r1, [r7, #12]
 800cd44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cd48:	4013      	ands	r3, r2
 800cd4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd52:	69da      	ldr	r2, [r3, #28]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	f003 030f 	and.w	r3, r3, #15
 800cd5c:	2101      	movs	r1, #1
 800cd5e:	fa01 f303 	lsl.w	r3, r1, r3
 800cd62:	041b      	lsls	r3, r3, #16
 800cd64:	43db      	mvns	r3, r3
 800cd66:	68f9      	ldr	r1, [r7, #12]
 800cd68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cd6c:	4013      	ands	r3, r2
 800cd6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	015a      	lsls	r2, r3, #5
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	4413      	add	r3, r2
 800cd78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	0159      	lsls	r1, r3, #5
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	440b      	add	r3, r1
 800cd86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4b05      	ldr	r3, [pc, #20]	@ (800cda4 <USB_DeactivateEndpoint+0x1b4>)
 800cd8e:	4013      	ands	r3, r2
 800cd90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3714      	adds	r7, #20
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	ec337800 	.word	0xec337800
 800cda4:	eff37800 	.word	0xeff37800

0800cda8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08a      	sub	sp, #40	@ 0x28
 800cdac:	af02      	add	r7, sp, #8
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	785b      	ldrb	r3, [r3, #1]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	f040 8181 	bne.w	800d0cc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d132      	bne.n	800ce38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	015a      	lsls	r2, r3, #5
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	4413      	add	r3, r2
 800cdda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdde:	691a      	ldr	r2, [r3, #16]
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	0159      	lsls	r1, r3, #5
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	440b      	add	r3, r1
 800cde8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdec:	4619      	mov	r1, r3
 800cdee:	4ba5      	ldr	r3, [pc, #660]	@ (800d084 <USB_EPStartXfer+0x2dc>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	69ba      	ldr	r2, [r7, #24]
 800ce04:	0151      	lsls	r1, r2, #5
 800ce06:	69fa      	ldr	r2, [r7, #28]
 800ce08:	440a      	add	r2, r1
 800ce0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ce12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	015a      	lsls	r2, r3, #5
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce20:	691a      	ldr	r2, [r3, #16]
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	0159      	lsls	r1, r3, #5
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	440b      	add	r3, r1
 800ce2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce2e:	4619      	mov	r1, r3
 800ce30:	4b95      	ldr	r3, [pc, #596]	@ (800d088 <USB_EPStartXfer+0x2e0>)
 800ce32:	4013      	ands	r3, r2
 800ce34:	610b      	str	r3, [r1, #16]
 800ce36:	e092      	b.n	800cf5e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	015a      	lsls	r2, r3, #5
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	4413      	add	r3, r2
 800ce40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce44:	691a      	ldr	r2, [r3, #16]
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	0159      	lsls	r1, r3, #5
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	440b      	add	r3, r1
 800ce4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce52:	4619      	mov	r1, r3
 800ce54:	4b8c      	ldr	r3, [pc, #560]	@ (800d088 <USB_EPStartXfer+0x2e0>)
 800ce56:	4013      	ands	r3, r2
 800ce58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce66:	691a      	ldr	r2, [r3, #16]
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	0159      	lsls	r1, r3, #5
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	440b      	add	r3, r1
 800ce70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce74:	4619      	mov	r1, r3
 800ce76:	4b83      	ldr	r3, [pc, #524]	@ (800d084 <USB_EPStartXfer+0x2dc>)
 800ce78:	4013      	ands	r3, r2
 800ce7a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d11a      	bne.n	800ceb8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	691a      	ldr	r2, [r3, #16]
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d903      	bls.n	800ce96 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	689a      	ldr	r2, [r3, #8]
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	015a      	lsls	r2, r3, #5
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	69ba      	ldr	r2, [r7, #24]
 800cea6:	0151      	lsls	r1, r2, #5
 800cea8:	69fa      	ldr	r2, [r7, #28]
 800ceaa:	440a      	add	r2, r1
 800ceac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ceb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ceb4:	6113      	str	r3, [r2, #16]
 800ceb6:	e01b      	b.n	800cef0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	015a      	lsls	r2, r3, #5
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	4413      	add	r3, r2
 800cec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cec4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	6919      	ldr	r1, [r3, #16]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	440b      	add	r3, r1
 800ced0:	1e59      	subs	r1, r3, #1
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	fbb1 f3f3 	udiv	r3, r1, r3
 800ceda:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cedc:	4b6b      	ldr	r3, [pc, #428]	@ (800d08c <USB_EPStartXfer+0x2e4>)
 800cede:	400b      	ands	r3, r1
 800cee0:	69b9      	ldr	r1, [r7, #24]
 800cee2:	0148      	lsls	r0, r1, #5
 800cee4:	69f9      	ldr	r1, [r7, #28]
 800cee6:	4401      	add	r1, r0
 800cee8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ceec:	4313      	orrs	r3, r2
 800ceee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cefc:	691a      	ldr	r2, [r3, #16]
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf06:	69b9      	ldr	r1, [r7, #24]
 800cf08:	0148      	lsls	r0, r1, #5
 800cf0a:	69f9      	ldr	r1, [r7, #28]
 800cf0c:	4401      	add	r1, r0
 800cf0e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800cf12:	4313      	orrs	r3, r2
 800cf14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	791b      	ldrb	r3, [r3, #4]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d11f      	bne.n	800cf5e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	015a      	lsls	r2, r3, #5
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	4413      	add	r3, r2
 800cf26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	69ba      	ldr	r2, [r7, #24]
 800cf2e:	0151      	lsls	r1, r2, #5
 800cf30:	69fa      	ldr	r2, [r7, #28]
 800cf32:	440a      	add	r2, r1
 800cf34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf38:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800cf3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	015a      	lsls	r2, r3, #5
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	4413      	add	r3, r2
 800cf46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	69ba      	ldr	r2, [r7, #24]
 800cf4e:	0151      	lsls	r1, r2, #5
 800cf50:	69fa      	ldr	r2, [r7, #28]
 800cf52:	440a      	add	r2, r1
 800cf54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cf5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cf5e:	79fb      	ldrb	r3, [r7, #7]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d14b      	bne.n	800cffc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	69db      	ldr	r3, [r3, #28]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d009      	beq.n	800cf80 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	015a      	lsls	r2, r3, #5
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	4413      	add	r3, r2
 800cf74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf78:	461a      	mov	r2, r3
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	69db      	ldr	r3, [r3, #28]
 800cf7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	791b      	ldrb	r3, [r3, #4]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d128      	bne.n	800cfda <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d110      	bne.n	800cfba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	015a      	lsls	r2, r3, #5
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	69ba      	ldr	r2, [r7, #24]
 800cfa8:	0151      	lsls	r1, r2, #5
 800cfaa:	69fa      	ldr	r2, [r7, #28]
 800cfac:	440a      	add	r2, r1
 800cfae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	e00f      	b.n	800cfda <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	015a      	lsls	r2, r3, #5
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	69ba      	ldr	r2, [r7, #24]
 800cfca:	0151      	lsls	r1, r2, #5
 800cfcc:	69fa      	ldr	r2, [r7, #28]
 800cfce:	440a      	add	r2, r1
 800cfd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cfd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	015a      	lsls	r2, r3, #5
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	69ba      	ldr	r2, [r7, #24]
 800cfea:	0151      	lsls	r1, r2, #5
 800cfec:	69fa      	ldr	r2, [r7, #28]
 800cfee:	440a      	add	r2, r1
 800cff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cff4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cff8:	6013      	str	r3, [r2, #0]
 800cffa:	e16a      	b.n	800d2d2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	015a      	lsls	r2, r3, #5
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	4413      	add	r3, r2
 800d004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	69ba      	ldr	r2, [r7, #24]
 800d00c:	0151      	lsls	r1, r2, #5
 800d00e:	69fa      	ldr	r2, [r7, #28]
 800d010:	440a      	add	r2, r1
 800d012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d016:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d01a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	791b      	ldrb	r3, [r3, #4]
 800d020:	2b01      	cmp	r3, #1
 800d022:	d015      	beq.n	800d050 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 8152 	beq.w	800d2d2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	f003 030f 	and.w	r3, r3, #15
 800d03e:	2101      	movs	r1, #1
 800d040:	fa01 f303 	lsl.w	r3, r1, r3
 800d044:	69f9      	ldr	r1, [r7, #28]
 800d046:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d04a:	4313      	orrs	r3, r2
 800d04c:	634b      	str	r3, [r1, #52]	@ 0x34
 800d04e:	e140      	b.n	800d2d2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d117      	bne.n	800d090 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	015a      	lsls	r2, r3, #5
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	4413      	add	r3, r2
 800d068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	69ba      	ldr	r2, [r7, #24]
 800d070:	0151      	lsls	r1, r2, #5
 800d072:	69fa      	ldr	r2, [r7, #28]
 800d074:	440a      	add	r2, r1
 800d076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d07a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d07e:	6013      	str	r3, [r2, #0]
 800d080:	e016      	b.n	800d0b0 <USB_EPStartXfer+0x308>
 800d082:	bf00      	nop
 800d084:	e007ffff 	.word	0xe007ffff
 800d088:	fff80000 	.word	0xfff80000
 800d08c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	015a      	lsls	r2, r3, #5
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	4413      	add	r3, r2
 800d098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	69ba      	ldr	r2, [r7, #24]
 800d0a0:	0151      	lsls	r1, r2, #5
 800d0a2:	69fa      	ldr	r2, [r7, #28]
 800d0a4:	440a      	add	r2, r1
 800d0a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d0aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d0ae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	68d9      	ldr	r1, [r3, #12]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	781a      	ldrb	r2, [r3, #0]
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	b298      	uxth	r0, r3
 800d0be:	79fb      	ldrb	r3, [r7, #7]
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f000 f9b9 	bl	800d43c <USB_WritePacket>
 800d0ca:	e102      	b.n	800d2d2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	015a      	lsls	r2, r3, #5
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0d8:	691a      	ldr	r2, [r3, #16]
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	0159      	lsls	r1, r3, #5
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	440b      	add	r3, r1
 800d0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4b7c      	ldr	r3, [pc, #496]	@ (800d2dc <USB_EPStartXfer+0x534>)
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	015a      	lsls	r2, r3, #5
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0fa:	691a      	ldr	r2, [r3, #16]
 800d0fc:	69bb      	ldr	r3, [r7, #24]
 800d0fe:	0159      	lsls	r1, r3, #5
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	440b      	add	r3, r1
 800d104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d108:	4619      	mov	r1, r3
 800d10a:	4b75      	ldr	r3, [pc, #468]	@ (800d2e0 <USB_EPStartXfer+0x538>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d12f      	bne.n	800d176 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d003      	beq.n	800d126 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	689a      	ldr	r2, [r3, #8]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	689a      	ldr	r2, [r3, #8]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	015a      	lsls	r2, r3, #5
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	4413      	add	r3, r2
 800d136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d13a:	691a      	ldr	r2, [r3, #16]
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	6a1b      	ldr	r3, [r3, #32]
 800d140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d144:	69b9      	ldr	r1, [r7, #24]
 800d146:	0148      	lsls	r0, r1, #5
 800d148:	69f9      	ldr	r1, [r7, #28]
 800d14a:	4401      	add	r1, r0
 800d14c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d150:	4313      	orrs	r3, r2
 800d152:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	015a      	lsls	r2, r3, #5
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	4413      	add	r3, r2
 800d15c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d160:	691b      	ldr	r3, [r3, #16]
 800d162:	69ba      	ldr	r2, [r7, #24]
 800d164:	0151      	lsls	r1, r2, #5
 800d166:	69fa      	ldr	r2, [r7, #28]
 800d168:	440a      	add	r2, r1
 800d16a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d16e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d172:	6113      	str	r3, [r2, #16]
 800d174:	e05f      	b.n	800d236 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d123      	bne.n	800d1c6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	015a      	lsls	r2, r3, #5
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	4413      	add	r3, r2
 800d186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d18a:	691a      	ldr	r2, [r3, #16]
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d194:	69b9      	ldr	r1, [r7, #24]
 800d196:	0148      	lsls	r0, r1, #5
 800d198:	69f9      	ldr	r1, [r7, #28]
 800d19a:	4401      	add	r1, r0
 800d19c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	015a      	lsls	r2, r3, #5
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	69ba      	ldr	r2, [r7, #24]
 800d1b4:	0151      	lsls	r1, r2, #5
 800d1b6:	69fa      	ldr	r2, [r7, #28]
 800d1b8:	440a      	add	r2, r1
 800d1ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d1c2:	6113      	str	r3, [r2, #16]
 800d1c4:	e037      	b.n	800d236 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	691a      	ldr	r2, [r3, #16]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	1e5a      	subs	r2, r3, #1
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1da:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	8afa      	ldrh	r2, [r7, #22]
 800d1e2:	fb03 f202 	mul.w	r2, r3, r2
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	015a      	lsls	r2, r3, #5
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1f6:	691a      	ldr	r2, [r3, #16]
 800d1f8:	8afb      	ldrh	r3, [r7, #22]
 800d1fa:	04d9      	lsls	r1, r3, #19
 800d1fc:	4b39      	ldr	r3, [pc, #228]	@ (800d2e4 <USB_EPStartXfer+0x53c>)
 800d1fe:	400b      	ands	r3, r1
 800d200:	69b9      	ldr	r1, [r7, #24]
 800d202:	0148      	lsls	r0, r1, #5
 800d204:	69f9      	ldr	r1, [r7, #28]
 800d206:	4401      	add	r1, r0
 800d208:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d20c:	4313      	orrs	r3, r2
 800d20e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	015a      	lsls	r2, r3, #5
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	4413      	add	r3, r2
 800d218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d21c:	691a      	ldr	r2, [r3, #16]
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	6a1b      	ldr	r3, [r3, #32]
 800d222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d226:	69b9      	ldr	r1, [r7, #24]
 800d228:	0148      	lsls	r0, r1, #5
 800d22a:	69f9      	ldr	r1, [r7, #28]
 800d22c:	4401      	add	r1, r0
 800d22e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d232:	4313      	orrs	r3, r2
 800d234:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d236:	79fb      	ldrb	r3, [r7, #7]
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d10d      	bne.n	800d258 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d009      	beq.n	800d258 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	68d9      	ldr	r1, [r3, #12]
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	015a      	lsls	r2, r3, #5
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	4413      	add	r3, r2
 800d250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d254:	460a      	mov	r2, r1
 800d256:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	791b      	ldrb	r3, [r3, #4]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d128      	bne.n	800d2b2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d110      	bne.n	800d292 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d270:	69bb      	ldr	r3, [r7, #24]
 800d272:	015a      	lsls	r2, r3, #5
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	4413      	add	r3, r2
 800d278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	69ba      	ldr	r2, [r7, #24]
 800d280:	0151      	lsls	r1, r2, #5
 800d282:	69fa      	ldr	r2, [r7, #28]
 800d284:	440a      	add	r2, r1
 800d286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d28a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	e00f      	b.n	800d2b2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	015a      	lsls	r2, r3, #5
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	4413      	add	r3, r2
 800d29a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	69ba      	ldr	r2, [r7, #24]
 800d2a2:	0151      	lsls	r1, r2, #5
 800d2a4:	69fa      	ldr	r2, [r7, #28]
 800d2a6:	440a      	add	r2, r1
 800d2a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d2ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d2b0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	015a      	lsls	r2, r3, #5
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	69ba      	ldr	r2, [r7, #24]
 800d2c2:	0151      	lsls	r1, r2, #5
 800d2c4:	69fa      	ldr	r2, [r7, #28]
 800d2c6:	440a      	add	r2, r1
 800d2c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d2cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d2d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3720      	adds	r7, #32
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	fff80000 	.word	0xfff80000
 800d2e0:	e007ffff 	.word	0xe007ffff
 800d2e4:	1ff80000 	.word	0x1ff80000

0800d2e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b087      	sub	sp, #28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	785b      	ldrb	r3, [r3, #1]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d14a      	bne.n	800d39c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	015a      	lsls	r2, r3, #5
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	4413      	add	r3, r2
 800d310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d31a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d31e:	f040 8086 	bne.w	800d42e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	015a      	lsls	r2, r3, #5
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	4413      	add	r3, r2
 800d32c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	683a      	ldr	r2, [r7, #0]
 800d334:	7812      	ldrb	r2, [r2, #0]
 800d336:	0151      	lsls	r1, r2, #5
 800d338:	693a      	ldr	r2, [r7, #16]
 800d33a:	440a      	add	r2, r1
 800d33c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d340:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d344:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	015a      	lsls	r2, r3, #5
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	4413      	add	r3, r2
 800d350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	7812      	ldrb	r2, [r2, #0]
 800d35a:	0151      	lsls	r1, r2, #5
 800d35c:	693a      	ldr	r2, [r7, #16]
 800d35e:	440a      	add	r2, r1
 800d360:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d364:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d368:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	3301      	adds	r3, #1
 800d36e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d376:	4293      	cmp	r3, r2
 800d378:	d902      	bls.n	800d380 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	75fb      	strb	r3, [r7, #23]
          break;
 800d37e:	e056      	b.n	800d42e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	015a      	lsls	r2, r3, #5
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	4413      	add	r3, r2
 800d38a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d398:	d0e7      	beq.n	800d36a <USB_EPStopXfer+0x82>
 800d39a:	e048      	b.n	800d42e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	015a      	lsls	r2, r3, #5
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d3b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d3b4:	d13b      	bne.n	800d42e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	015a      	lsls	r2, r3, #5
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	7812      	ldrb	r2, [r2, #0]
 800d3ca:	0151      	lsls	r1, r2, #5
 800d3cc:	693a      	ldr	r2, [r7, #16]
 800d3ce:	440a      	add	r2, r1
 800d3d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d3d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d3d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	015a      	lsls	r2, r3, #5
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	7812      	ldrb	r2, [r2, #0]
 800d3ee:	0151      	lsls	r1, r2, #5
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	440a      	add	r2, r1
 800d3f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d3f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d3fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	3301      	adds	r3, #1
 800d402:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d902      	bls.n	800d414 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	75fb      	strb	r3, [r7, #23]
          break;
 800d412:	e00c      	b.n	800d42e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	015a      	lsls	r2, r3, #5
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	4413      	add	r3, r2
 800d41e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d42c:	d0e7      	beq.n	800d3fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d430:	4618      	mov	r0, r3
 800d432:	371c      	adds	r7, #28
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b089      	sub	sp, #36	@ 0x24
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	4611      	mov	r1, r2
 800d448:	461a      	mov	r2, r3
 800d44a:	460b      	mov	r3, r1
 800d44c:	71fb      	strb	r3, [r7, #7]
 800d44e:	4613      	mov	r3, r2
 800d450:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d45a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d123      	bne.n	800d4aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d462:	88bb      	ldrh	r3, [r7, #4]
 800d464:	3303      	adds	r3, #3
 800d466:	089b      	lsrs	r3, r3, #2
 800d468:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d46a:	2300      	movs	r3, #0
 800d46c:	61bb      	str	r3, [r7, #24]
 800d46e:	e018      	b.n	800d4a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	031a      	lsls	r2, r3, #12
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	4413      	add	r3, r2
 800d478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d47c:	461a      	mov	r2, r3
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	3301      	adds	r3, #1
 800d488:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	3301      	adds	r3, #1
 800d48e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	3301      	adds	r3, #1
 800d494:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	3301      	adds	r3, #1
 800d49a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	61bb      	str	r3, [r7, #24]
 800d4a2:	69ba      	ldr	r2, [r7, #24]
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d3e2      	bcc.n	800d470 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3724      	adds	r7, #36	@ 0x24
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b08b      	sub	sp, #44	@ 0x2c
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d4ce:	88fb      	ldrh	r3, [r7, #6]
 800d4d0:	089b      	lsrs	r3, r3, #2
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d4d6:	88fb      	ldrh	r3, [r7, #6]
 800d4d8:	f003 0303 	and.w	r3, r3, #3
 800d4dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d4de:	2300      	movs	r3, #0
 800d4e0:	623b      	str	r3, [r7, #32]
 800d4e2:	e014      	b.n	800d50e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fe:	3301      	adds	r3, #1
 800d500:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d504:	3301      	adds	r3, #1
 800d506:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d508:	6a3b      	ldr	r3, [r7, #32]
 800d50a:	3301      	adds	r3, #1
 800d50c:	623b      	str	r3, [r7, #32]
 800d50e:	6a3a      	ldr	r2, [r7, #32]
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	429a      	cmp	r2, r3
 800d514:	d3e6      	bcc.n	800d4e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d516:	8bfb      	ldrh	r3, [r7, #30]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01e      	beq.n	800d55a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d51c:	2300      	movs	r3, #0
 800d51e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d526:	461a      	mov	r2, r3
 800d528:	f107 0310 	add.w	r3, r7, #16
 800d52c:	6812      	ldr	r2, [r2, #0]
 800d52e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	6a3b      	ldr	r3, [r7, #32]
 800d534:	b2db      	uxtb	r3, r3
 800d536:	00db      	lsls	r3, r3, #3
 800d538:	fa22 f303 	lsr.w	r3, r2, r3
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d540:	701a      	strb	r2, [r3, #0]
      i++;
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	3301      	adds	r3, #1
 800d546:	623b      	str	r3, [r7, #32]
      pDest++;
 800d548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54a:	3301      	adds	r3, #1
 800d54c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d54e:	8bfb      	ldrh	r3, [r7, #30]
 800d550:	3b01      	subs	r3, #1
 800d552:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d554:	8bfb      	ldrh	r3, [r7, #30]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1ea      	bne.n	800d530 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	372c      	adds	r7, #44	@ 0x2c
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	785b      	ldrb	r3, [r3, #1]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d12c      	bne.n	800d5de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	015a      	lsls	r2, r3, #5
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	4413      	add	r3, r2
 800d58c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	db12      	blt.n	800d5bc <USB_EPSetStall+0x54>
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00f      	beq.n	800d5bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	015a      	lsls	r2, r3, #5
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	0151      	lsls	r1, r2, #5
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	440a      	add	r2, r1
 800d5b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d5b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d5ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	015a      	lsls	r2, r3, #5
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	0151      	lsls	r1, r2, #5
 800d5ce:	68fa      	ldr	r2, [r7, #12]
 800d5d0:	440a      	add	r2, r1
 800d5d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d5d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d5da:	6013      	str	r3, [r2, #0]
 800d5dc:	e02b      	b.n	800d636 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	015a      	lsls	r2, r3, #5
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	db12      	blt.n	800d616 <USB_EPSetStall+0xae>
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00f      	beq.n	800d616 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	015a      	lsls	r2, r3, #5
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68ba      	ldr	r2, [r7, #8]
 800d606:	0151      	lsls	r1, r2, #5
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	440a      	add	r2, r1
 800d60c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d610:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d614:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	015a      	lsls	r2, r3, #5
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	4413      	add	r3, r2
 800d61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	0151      	lsls	r1, r2, #5
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	440a      	add	r2, r1
 800d62c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d630:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d634:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d636:	2300      	movs	r3, #0
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	785b      	ldrb	r3, [r3, #1]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d128      	bne.n	800d6b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	015a      	lsls	r2, r3, #5
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	4413      	add	r3, r2
 800d668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	0151      	lsls	r1, r2, #5
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	440a      	add	r2, r1
 800d676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d67a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d67e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	791b      	ldrb	r3, [r3, #4]
 800d684:	2b03      	cmp	r3, #3
 800d686:	d003      	beq.n	800d690 <USB_EPClearStall+0x4c>
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	791b      	ldrb	r3, [r3, #4]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d138      	bne.n	800d702 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	015a      	lsls	r2, r3, #5
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	4413      	add	r3, r2
 800d698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	0151      	lsls	r1, r2, #5
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	440a      	add	r2, r1
 800d6a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d6ae:	6013      	str	r3, [r2, #0]
 800d6b0:	e027      	b.n	800d702 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	015a      	lsls	r2, r3, #5
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	0151      	lsls	r1, r2, #5
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	440a      	add	r2, r1
 800d6c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d6cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d6d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	791b      	ldrb	r3, [r3, #4]
 800d6d6:	2b03      	cmp	r3, #3
 800d6d8:	d003      	beq.n	800d6e2 <USB_EPClearStall+0x9e>
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	791b      	ldrb	r3, [r3, #4]
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d10f      	bne.n	800d702 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	015a      	lsls	r2, r3, #5
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	0151      	lsls	r1, r2, #5
 800d6f4:	68fa      	ldr	r2, [r7, #12]
 800d6f6:	440a      	add	r2, r1
 800d6f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d6fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d700:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3714      	adds	r7, #20
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr

0800d710 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	460b      	mov	r3, r1
 800d71a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d72e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d732:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	78fb      	ldrb	r3, [r7, #3]
 800d73e:	011b      	lsls	r3, r3, #4
 800d740:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d744:	68f9      	ldr	r1, [r7, #12]
 800d746:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d74a:	4313      	orrs	r3, r2
 800d74c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3714      	adds	r7, #20
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d776:	f023 0303 	bic.w	r3, r3, #3
 800d77a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d78a:	f023 0302 	bic.w	r3, r3, #2
 800d78e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3714      	adds	r7, #20
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr

0800d79e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b085      	sub	sp, #20
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d7b8:	f023 0303 	bic.w	r3, r3, #3
 800d7bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d7cc:	f043 0302 	orr.w	r3, r3, #2
 800d7d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	695b      	ldr	r3, [r3, #20]
 800d7ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d806:	b480      	push	{r7}
 800d808:	b085      	sub	sp, #20
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d818:	699b      	ldr	r3, [r3, #24]
 800d81a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d822:	69db      	ldr	r3, [r3, #28]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	4013      	ands	r3, r2
 800d828:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	0c1b      	lsrs	r3, r3, #16
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr

0800d83a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d83a:	b480      	push	{r7}
 800d83c:	b085      	sub	sp, #20
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d856:	69db      	ldr	r3, [r3, #28]
 800d858:	68ba      	ldr	r2, [r7, #8]
 800d85a:	4013      	ands	r3, r2
 800d85c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	b29b      	uxth	r3, r3
}
 800d862:	4618      	mov	r0, r3
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d86e:	b480      	push	{r7}
 800d870:	b085      	sub	sp, #20
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	460b      	mov	r3, r1
 800d878:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d87e:	78fb      	ldrb	r3, [r7, #3]
 800d880:	015a      	lsls	r2, r3, #5
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	4413      	add	r3, r2
 800d886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d88a:	689b      	ldr	r3, [r3, #8]
 800d88c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d894:	695b      	ldr	r3, [r3, #20]
 800d896:	68ba      	ldr	r2, [r7, #8]
 800d898:	4013      	ands	r3, r2
 800d89a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d89c:	68bb      	ldr	r3, [r7, #8]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3714      	adds	r7, #20
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b087      	sub	sp, #28
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d8ce:	78fb      	ldrb	r3, [r7, #3]
 800d8d0:	f003 030f 	and.w	r3, r3, #15
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d8da:	01db      	lsls	r3, r3, #7
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	693a      	ldr	r2, [r7, #16]
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d8e4:	78fb      	ldrb	r3, [r7, #3]
 800d8e6:	015a      	lsls	r2, r3, #5
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	4013      	ands	r3, r2
 800d8f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	371c      	adds	r7, #28
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	695b      	ldr	r3, [r3, #20]
 800d912:	f003 0301 	and.w	r3, r3, #1
}
 800d916:	4618      	mov	r0, r3
 800d918:	370c      	adds	r7, #12
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
	...

0800d924 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d93e:	4619      	mov	r1, r3
 800d940:	4b09      	ldr	r3, [pc, #36]	@ (800d968 <USB_ActivateSetup+0x44>)
 800d942:	4013      	ands	r3, r2
 800d944:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3714      	adds	r7, #20
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr
 800d968:	fffff800 	.word	0xfffff800

0800d96c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b087      	sub	sp, #28
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	460b      	mov	r3, r1
 800d976:	607a      	str	r2, [r7, #4]
 800d978:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	333c      	adds	r3, #60	@ 0x3c
 800d982:	3304      	adds	r3, #4
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	4a26      	ldr	r2, [pc, #152]	@ (800da24 <USB_EP0_OutStart+0xb8>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d90a      	bls.n	800d9a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d99c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d9a0:	d101      	bne.n	800d9a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e037      	b.n	800da16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	697a      	ldr	r2, [r7, #20]
 800d9bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d9c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9d4:	f043 0318 	orr.w	r3, r3, #24
 800d9d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d9ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d9ee:	7afb      	ldrb	r3, [r7, #11]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d10f      	bne.n	800da14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da0e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800da12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	371c      	adds	r7, #28
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	4f54300a 	.word	0x4f54300a

0800da28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da30:	2300      	movs	r3, #0
 800da32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	3301      	adds	r3, #1
 800da38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da40:	d901      	bls.n	800da46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800da42:	2303      	movs	r3, #3
 800da44:	e01b      	b.n	800da7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	daf2      	bge.n	800da34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da4e:	2300      	movs	r3, #0
 800da50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	f043 0201 	orr.w	r2, r3, #1
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3301      	adds	r3, #1
 800da62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da6a:	d901      	bls.n	800da70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800da6c:	2303      	movs	r3, #3
 800da6e:	e006      	b.n	800da7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	f003 0301 	and.w	r3, r3, #1
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d0f0      	beq.n	800da5e <USB_CoreReset+0x36>

  return HAL_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3714      	adds	r7, #20
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
	...

0800da8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800da98:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800da9c:	f004 fec0 	bl	8012820 <USBD_static_malloc>
 800daa0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d109      	bne.n	800dabc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	32b0      	adds	r2, #176	@ 0xb0
 800dab2:	2100      	movs	r1, #0
 800dab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dab8:	2302      	movs	r3, #2
 800daba:	e0d4      	b.n	800dc66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dabc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800dac0:	2100      	movs	r1, #0
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f005 fe91 	bl	80137ea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	32b0      	adds	r2, #176	@ 0xb0
 800dad2:	68f9      	ldr	r1, [r7, #12]
 800dad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	32b0      	adds	r2, #176	@ 0xb0
 800dae2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	7c1b      	ldrb	r3, [r3, #16]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d138      	bne.n	800db66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800daf4:	4b5e      	ldr	r3, [pc, #376]	@ (800dc70 <USBD_CDC_Init+0x1e4>)
 800daf6:	7819      	ldrb	r1, [r3, #0]
 800daf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dafc:	2202      	movs	r2, #2
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f004 fd6b 	bl	80125da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db04:	4b5a      	ldr	r3, [pc, #360]	@ (800dc70 <USBD_CDC_Init+0x1e4>)
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	f003 020f 	and.w	r2, r3, #15
 800db0c:	6879      	ldr	r1, [r7, #4]
 800db0e:	4613      	mov	r3, r2
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4413      	add	r3, r2
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	440b      	add	r3, r1
 800db18:	3324      	adds	r3, #36	@ 0x24
 800db1a:	2201      	movs	r2, #1
 800db1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db1e:	4b55      	ldr	r3, [pc, #340]	@ (800dc74 <USBD_CDC_Init+0x1e8>)
 800db20:	7819      	ldrb	r1, [r3, #0]
 800db22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db26:	2202      	movs	r2, #2
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f004 fd56 	bl	80125da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db2e:	4b51      	ldr	r3, [pc, #324]	@ (800dc74 <USBD_CDC_Init+0x1e8>)
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	f003 020f 	and.w	r2, r3, #15
 800db36:	6879      	ldr	r1, [r7, #4]
 800db38:	4613      	mov	r3, r2
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	4413      	add	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	440b      	add	r3, r1
 800db42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db46:	2201      	movs	r2, #1
 800db48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800db4a:	4b4b      	ldr	r3, [pc, #300]	@ (800dc78 <USBD_CDC_Init+0x1ec>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	f003 020f 	and.w	r2, r3, #15
 800db52:	6879      	ldr	r1, [r7, #4]
 800db54:	4613      	mov	r3, r2
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	4413      	add	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	440b      	add	r3, r1
 800db5e:	3326      	adds	r3, #38	@ 0x26
 800db60:	2210      	movs	r2, #16
 800db62:	801a      	strh	r2, [r3, #0]
 800db64:	e035      	b.n	800dbd2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db66:	4b42      	ldr	r3, [pc, #264]	@ (800dc70 <USBD_CDC_Init+0x1e4>)
 800db68:	7819      	ldrb	r1, [r3, #0]
 800db6a:	2340      	movs	r3, #64	@ 0x40
 800db6c:	2202      	movs	r2, #2
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f004 fd33 	bl	80125da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db74:	4b3e      	ldr	r3, [pc, #248]	@ (800dc70 <USBD_CDC_Init+0x1e4>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	f003 020f 	and.w	r2, r3, #15
 800db7c:	6879      	ldr	r1, [r7, #4]
 800db7e:	4613      	mov	r3, r2
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4413      	add	r3, r2
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	440b      	add	r3, r1
 800db88:	3324      	adds	r3, #36	@ 0x24
 800db8a:	2201      	movs	r2, #1
 800db8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db8e:	4b39      	ldr	r3, [pc, #228]	@ (800dc74 <USBD_CDC_Init+0x1e8>)
 800db90:	7819      	ldrb	r1, [r3, #0]
 800db92:	2340      	movs	r3, #64	@ 0x40
 800db94:	2202      	movs	r2, #2
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f004 fd1f 	bl	80125da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db9c:	4b35      	ldr	r3, [pc, #212]	@ (800dc74 <USBD_CDC_Init+0x1e8>)
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	f003 020f 	and.w	r2, r3, #15
 800dba4:	6879      	ldr	r1, [r7, #4]
 800dba6:	4613      	mov	r3, r2
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	4413      	add	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	440b      	add	r3, r1
 800dbb0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dbb8:	4b2f      	ldr	r3, [pc, #188]	@ (800dc78 <USBD_CDC_Init+0x1ec>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	f003 020f 	and.w	r2, r3, #15
 800dbc0:	6879      	ldr	r1, [r7, #4]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	440b      	add	r3, r1
 800dbcc:	3326      	adds	r3, #38	@ 0x26
 800dbce:	2210      	movs	r2, #16
 800dbd0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dbd2:	4b29      	ldr	r3, [pc, #164]	@ (800dc78 <USBD_CDC_Init+0x1ec>)
 800dbd4:	7819      	ldrb	r1, [r3, #0]
 800dbd6:	2308      	movs	r3, #8
 800dbd8:	2203      	movs	r2, #3
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f004 fcfd 	bl	80125da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dbe0:	4b25      	ldr	r3, [pc, #148]	@ (800dc78 <USBD_CDC_Init+0x1ec>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	f003 020f 	and.w	r2, r3, #15
 800dbe8:	6879      	ldr	r1, [r7, #4]
 800dbea:	4613      	mov	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	4413      	add	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	440b      	add	r3, r1
 800dbf4:	3324      	adds	r3, #36	@ 0x24
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	33b0      	adds	r3, #176	@ 0xb0
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dc30:	2302      	movs	r3, #2
 800dc32:	e018      	b.n	800dc66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	7c1b      	ldrb	r3, [r3, #16]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d10a      	bne.n	800dc52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc3c:	4b0d      	ldr	r3, [pc, #52]	@ (800dc74 <USBD_CDC_Init+0x1e8>)
 800dc3e:	7819      	ldrb	r1, [r3, #0]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f004 fdb4 	bl	80127b8 <USBD_LL_PrepareReceive>
 800dc50:	e008      	b.n	800dc64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc52:	4b08      	ldr	r3, [pc, #32]	@ (800dc74 <USBD_CDC_Init+0x1e8>)
 800dc54:	7819      	ldrb	r1, [r3, #0]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc5c:	2340      	movs	r3, #64	@ 0x40
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f004 fdaa 	bl	80127b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	2400008f 	.word	0x2400008f
 800dc74:	24000090 	.word	0x24000090
 800dc78:	24000091 	.word	0x24000091

0800dc7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	460b      	mov	r3, r1
 800dc86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dc88:	4b3a      	ldr	r3, [pc, #232]	@ (800dd74 <USBD_CDC_DeInit+0xf8>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f004 fcc9 	bl	8012626 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dc94:	4b37      	ldr	r3, [pc, #220]	@ (800dd74 <USBD_CDC_DeInit+0xf8>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	f003 020f 	and.w	r2, r3, #15
 800dc9c:	6879      	ldr	r1, [r7, #4]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4413      	add	r3, r2
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	440b      	add	r3, r1
 800dca8:	3324      	adds	r3, #36	@ 0x24
 800dcaa:	2200      	movs	r2, #0
 800dcac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dcae:	4b32      	ldr	r3, [pc, #200]	@ (800dd78 <USBD_CDC_DeInit+0xfc>)
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f004 fcb6 	bl	8012626 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dcba:	4b2f      	ldr	r3, [pc, #188]	@ (800dd78 <USBD_CDC_DeInit+0xfc>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	f003 020f 	and.w	r2, r3, #15
 800dcc2:	6879      	ldr	r1, [r7, #4]
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	4413      	add	r3, r2
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	440b      	add	r3, r1
 800dcce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dcd6:	4b29      	ldr	r3, [pc, #164]	@ (800dd7c <USBD_CDC_DeInit+0x100>)
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f004 fca2 	bl	8012626 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dce2:	4b26      	ldr	r3, [pc, #152]	@ (800dd7c <USBD_CDC_DeInit+0x100>)
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	f003 020f 	and.w	r2, r3, #15
 800dcea:	6879      	ldr	r1, [r7, #4]
 800dcec:	4613      	mov	r3, r2
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	440b      	add	r3, r1
 800dcf6:	3324      	adds	r3, #36	@ 0x24
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dcfc:	4b1f      	ldr	r3, [pc, #124]	@ (800dd7c <USBD_CDC_DeInit+0x100>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	f003 020f 	and.w	r2, r3, #15
 800dd04:	6879      	ldr	r1, [r7, #4]
 800dd06:	4613      	mov	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4413      	add	r3, r2
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	440b      	add	r3, r1
 800dd10:	3326      	adds	r3, #38	@ 0x26
 800dd12:	2200      	movs	r2, #0
 800dd14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	32b0      	adds	r2, #176	@ 0xb0
 800dd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d01f      	beq.n	800dd68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	33b0      	adds	r3, #176	@ 0xb0
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4413      	add	r3, r2
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	32b0      	adds	r2, #176	@ 0xb0
 800dd46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f004 fd76 	bl	801283c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	32b0      	adds	r2, #176	@ 0xb0
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	2400008f 	.word	0x2400008f
 800dd78:	24000090 	.word	0x24000090
 800dd7c:	24000091 	.word	0x24000091

0800dd80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	32b0      	adds	r2, #176	@ 0xb0
 800dd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dda2:	2300      	movs	r3, #0
 800dda4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d101      	bne.n	800ddb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ddac:	2303      	movs	r3, #3
 800ddae:	e0bf      	b.n	800df30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d050      	beq.n	800de5e <USBD_CDC_Setup+0xde>
 800ddbc:	2b20      	cmp	r3, #32
 800ddbe:	f040 80af 	bne.w	800df20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	88db      	ldrh	r3, [r3, #6]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d03a      	beq.n	800de40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	b25b      	sxtb	r3, r3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	da1b      	bge.n	800de0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	33b0      	adds	r3, #176	@ 0xb0
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ddea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ddec:	683a      	ldr	r2, [r7, #0]
 800ddee:	88d2      	ldrh	r2, [r2, #6]
 800ddf0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	88db      	ldrh	r3, [r3, #6]
 800ddf6:	2b07      	cmp	r3, #7
 800ddf8:	bf28      	it	cs
 800ddfa:	2307      	movcs	r3, #7
 800ddfc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	89fa      	ldrh	r2, [r7, #14]
 800de02:	4619      	mov	r1, r3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f001 fd7d 	bl	800f904 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800de0a:	e090      	b.n	800df2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	785a      	ldrb	r2, [r3, #1]
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	88db      	ldrh	r3, [r3, #6]
 800de1a:	2b3f      	cmp	r3, #63	@ 0x3f
 800de1c:	d803      	bhi.n	800de26 <USBD_CDC_Setup+0xa6>
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	88db      	ldrh	r3, [r3, #6]
 800de22:	b2da      	uxtb	r2, r3
 800de24:	e000      	b.n	800de28 <USBD_CDC_Setup+0xa8>
 800de26:	2240      	movs	r2, #64	@ 0x40
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800de2e:	6939      	ldr	r1, [r7, #16]
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800de36:	461a      	mov	r2, r3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f001 fd8f 	bl	800f95c <USBD_CtlPrepareRx>
      break;
 800de3e:	e076      	b.n	800df2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	33b0      	adds	r3, #176	@ 0xb0
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4413      	add	r3, r2
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	7850      	ldrb	r0, [r2, #1]
 800de56:	2200      	movs	r2, #0
 800de58:	6839      	ldr	r1, [r7, #0]
 800de5a:	4798      	blx	r3
      break;
 800de5c:	e067      	b.n	800df2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	785b      	ldrb	r3, [r3, #1]
 800de62:	2b0b      	cmp	r3, #11
 800de64:	d851      	bhi.n	800df0a <USBD_CDC_Setup+0x18a>
 800de66:	a201      	add	r2, pc, #4	@ (adr r2, 800de6c <USBD_CDC_Setup+0xec>)
 800de68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6c:	0800de9d 	.word	0x0800de9d
 800de70:	0800df19 	.word	0x0800df19
 800de74:	0800df0b 	.word	0x0800df0b
 800de78:	0800df0b 	.word	0x0800df0b
 800de7c:	0800df0b 	.word	0x0800df0b
 800de80:	0800df0b 	.word	0x0800df0b
 800de84:	0800df0b 	.word	0x0800df0b
 800de88:	0800df0b 	.word	0x0800df0b
 800de8c:	0800df0b 	.word	0x0800df0b
 800de90:	0800df0b 	.word	0x0800df0b
 800de94:	0800dec7 	.word	0x0800dec7
 800de98:	0800def1 	.word	0x0800def1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	2b03      	cmp	r3, #3
 800dea6:	d107      	bne.n	800deb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dea8:	f107 030a 	add.w	r3, r7, #10
 800deac:	2202      	movs	r2, #2
 800deae:	4619      	mov	r1, r3
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f001 fd27 	bl	800f904 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800deb6:	e032      	b.n	800df1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800deb8:	6839      	ldr	r1, [r7, #0]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f001 fca5 	bl	800f80a <USBD_CtlError>
            ret = USBD_FAIL;
 800dec0:	2303      	movs	r3, #3
 800dec2:	75fb      	strb	r3, [r7, #23]
          break;
 800dec4:	e02b      	b.n	800df1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800decc:	b2db      	uxtb	r3, r3
 800dece:	2b03      	cmp	r3, #3
 800ded0:	d107      	bne.n	800dee2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ded2:	f107 030d 	add.w	r3, r7, #13
 800ded6:	2201      	movs	r2, #1
 800ded8:	4619      	mov	r1, r3
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f001 fd12 	bl	800f904 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dee0:	e01d      	b.n	800df1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f001 fc90 	bl	800f80a <USBD_CtlError>
            ret = USBD_FAIL;
 800deea:	2303      	movs	r3, #3
 800deec:	75fb      	strb	r3, [r7, #23]
          break;
 800deee:	e016      	b.n	800df1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800def6:	b2db      	uxtb	r3, r3
 800def8:	2b03      	cmp	r3, #3
 800defa:	d00f      	beq.n	800df1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f001 fc83 	bl	800f80a <USBD_CtlError>
            ret = USBD_FAIL;
 800df04:	2303      	movs	r3, #3
 800df06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800df08:	e008      	b.n	800df1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800df0a:	6839      	ldr	r1, [r7, #0]
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f001 fc7c 	bl	800f80a <USBD_CtlError>
          ret = USBD_FAIL;
 800df12:	2303      	movs	r3, #3
 800df14:	75fb      	strb	r3, [r7, #23]
          break;
 800df16:	e002      	b.n	800df1e <USBD_CDC_Setup+0x19e>
          break;
 800df18:	bf00      	nop
 800df1a:	e008      	b.n	800df2e <USBD_CDC_Setup+0x1ae>
          break;
 800df1c:	bf00      	nop
      }
      break;
 800df1e:	e006      	b.n	800df2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800df20:	6839      	ldr	r1, [r7, #0]
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f001 fc71 	bl	800f80a <USBD_CtlError>
      ret = USBD_FAIL;
 800df28:	2303      	movs	r3, #3
 800df2a:	75fb      	strb	r3, [r7, #23]
      break;
 800df2c:	bf00      	nop
  }

  return (uint8_t)ret;
 800df2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3718      	adds	r7, #24
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	460b      	mov	r3, r1
 800df42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	32b0      	adds	r2, #176	@ 0xb0
 800df56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d101      	bne.n	800df62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800df5e:	2303      	movs	r3, #3
 800df60:	e065      	b.n	800e02e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	32b0      	adds	r2, #176	@ 0xb0
 800df6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df72:	78fb      	ldrb	r3, [r7, #3]
 800df74:	f003 020f 	and.w	r2, r3, #15
 800df78:	6879      	ldr	r1, [r7, #4]
 800df7a:	4613      	mov	r3, r2
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4413      	add	r3, r2
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	440b      	add	r3, r1
 800df84:	3318      	adds	r3, #24
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d02f      	beq.n	800dfec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800df8c:	78fb      	ldrb	r3, [r7, #3]
 800df8e:	f003 020f 	and.w	r2, r3, #15
 800df92:	6879      	ldr	r1, [r7, #4]
 800df94:	4613      	mov	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4413      	add	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	440b      	add	r3, r1
 800df9e:	3318      	adds	r3, #24
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	78fb      	ldrb	r3, [r7, #3]
 800dfa4:	f003 010f 	and.w	r1, r3, #15
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	460b      	mov	r3, r1
 800dfac:	00db      	lsls	r3, r3, #3
 800dfae:	440b      	add	r3, r1
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	4403      	add	r3, r0
 800dfb4:	331c      	adds	r3, #28
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	fbb2 f1f3 	udiv	r1, r2, r3
 800dfbc:	fb01 f303 	mul.w	r3, r1, r3
 800dfc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d112      	bne.n	800dfec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dfc6:	78fb      	ldrb	r3, [r7, #3]
 800dfc8:	f003 020f 	and.w	r2, r3, #15
 800dfcc:	6879      	ldr	r1, [r7, #4]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	4413      	add	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	440b      	add	r3, r1
 800dfd8:	3318      	adds	r3, #24
 800dfda:	2200      	movs	r2, #0
 800dfdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dfde:	78f9      	ldrb	r1, [r7, #3]
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f004 fbc6 	bl	8012776 <USBD_LL_Transmit>
 800dfea:	e01f      	b.n	800e02c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	33b0      	adds	r3, #176	@ 0xb0
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d010      	beq.n	800e02c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	33b0      	adds	r3, #176	@ 0xb0
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4413      	add	r3, r2
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e028:	78fa      	ldrb	r2, [r7, #3]
 800e02a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b084      	sub	sp, #16
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
 800e03e:	460b      	mov	r3, r1
 800e040:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	32b0      	adds	r2, #176	@ 0xb0
 800e04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e050:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	32b0      	adds	r2, #176	@ 0xb0
 800e05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d101      	bne.n	800e068 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e064:	2303      	movs	r3, #3
 800e066:	e01a      	b.n	800e09e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	4619      	mov	r1, r3
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f004 fbc4 	bl	80127fa <USBD_LL_GetRxDataSize>
 800e072:	4602      	mov	r2, r0
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	33b0      	adds	r3, #176	@ 0xb0
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4413      	add	r3, r2
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e098:	4611      	mov	r1, r2
 800e09a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b084      	sub	sp, #16
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	32b0      	adds	r2, #176	@ 0xb0
 800e0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	e024      	b.n	800e112 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	33b0      	adds	r3, #176	@ 0xb0
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d019      	beq.n	800e110 <USBD_CDC_EP0_RxReady+0x6a>
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e0e2:	2bff      	cmp	r3, #255	@ 0xff
 800e0e4:	d014      	beq.n	800e110 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	33b0      	adds	r3, #176	@ 0xb0
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4413      	add	r3, r2
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e0fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e106:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	22ff      	movs	r2, #255	@ 0xff
 800e10c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
	...

0800e11c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b086      	sub	sp, #24
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e124:	2182      	movs	r1, #130	@ 0x82
 800e126:	4818      	ldr	r0, [pc, #96]	@ (800e188 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e128:	f000 fd0f 	bl	800eb4a <USBD_GetEpDesc>
 800e12c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e12e:	2101      	movs	r1, #1
 800e130:	4815      	ldr	r0, [pc, #84]	@ (800e188 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e132:	f000 fd0a 	bl	800eb4a <USBD_GetEpDesc>
 800e136:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e138:	2181      	movs	r1, #129	@ 0x81
 800e13a:	4813      	ldr	r0, [pc, #76]	@ (800e188 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e13c:	f000 fd05 	bl	800eb4a <USBD_GetEpDesc>
 800e140:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	2210      	movs	r2, #16
 800e14c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d006      	beq.n	800e162 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2200      	movs	r2, #0
 800e158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e15c:	711a      	strb	r2, [r3, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d006      	beq.n	800e176 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e170:	711a      	strb	r2, [r3, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2243      	movs	r2, #67	@ 0x43
 800e17a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e17c:	4b02      	ldr	r3, [pc, #8]	@ (800e188 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3718      	adds	r7, #24
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	2400004c 	.word	0x2400004c

0800e18c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e194:	2182      	movs	r1, #130	@ 0x82
 800e196:	4818      	ldr	r0, [pc, #96]	@ (800e1f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e198:	f000 fcd7 	bl	800eb4a <USBD_GetEpDesc>
 800e19c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e19e:	2101      	movs	r1, #1
 800e1a0:	4815      	ldr	r0, [pc, #84]	@ (800e1f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1a2:	f000 fcd2 	bl	800eb4a <USBD_GetEpDesc>
 800e1a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e1a8:	2181      	movs	r1, #129	@ 0x81
 800e1aa:	4813      	ldr	r0, [pc, #76]	@ (800e1f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1ac:	f000 fccd 	bl	800eb4a <USBD_GetEpDesc>
 800e1b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d002      	beq.n	800e1be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	2210      	movs	r2, #16
 800e1bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d006      	beq.n	800e1d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	711a      	strb	r2, [r3, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f042 0202 	orr.w	r2, r2, #2
 800e1d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d006      	beq.n	800e1e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	711a      	strb	r2, [r3, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f042 0202 	orr.w	r2, r2, #2
 800e1e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2243      	movs	r2, #67	@ 0x43
 800e1ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e1ec:	4b02      	ldr	r3, [pc, #8]	@ (800e1f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3718      	adds	r7, #24
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	2400004c 	.word	0x2400004c

0800e1fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e204:	2182      	movs	r1, #130	@ 0x82
 800e206:	4818      	ldr	r0, [pc, #96]	@ (800e268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e208:	f000 fc9f 	bl	800eb4a <USBD_GetEpDesc>
 800e20c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e20e:	2101      	movs	r1, #1
 800e210:	4815      	ldr	r0, [pc, #84]	@ (800e268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e212:	f000 fc9a 	bl	800eb4a <USBD_GetEpDesc>
 800e216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e218:	2181      	movs	r1, #129	@ 0x81
 800e21a:	4813      	ldr	r0, [pc, #76]	@ (800e268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e21c:	f000 fc95 	bl	800eb4a <USBD_GetEpDesc>
 800e220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d002      	beq.n	800e22e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	2210      	movs	r2, #16
 800e22c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d006      	beq.n	800e242 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	2200      	movs	r2, #0
 800e238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e23c:	711a      	strb	r2, [r3, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d006      	beq.n	800e256 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e250:	711a      	strb	r2, [r3, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2243      	movs	r2, #67	@ 0x43
 800e25a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e25c:	4b02      	ldr	r3, [pc, #8]	@ (800e268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3718      	adds	r7, #24
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	2400004c 	.word	0x2400004c

0800e26c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	220a      	movs	r2, #10
 800e278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e27a:	4b03      	ldr	r3, [pc, #12]	@ (800e288 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	24000008 	.word	0x24000008

0800e28c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e29c:	2303      	movs	r3, #3
 800e29e:	e009      	b.n	800e2b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	33b0      	adds	r3, #176	@ 0xb0
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	4413      	add	r3, r2
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b087      	sub	sp, #28
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	32b0      	adds	r2, #176	@ 0xb0
 800e2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d101      	bne.n	800e2e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e008      	b.n	800e2f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e2f6:	2300      	movs	r3, #0
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	371c      	adds	r7, #28
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e304:	b480      	push	{r7}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	32b0      	adds	r2, #176	@ 0xb0
 800e318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e31c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d101      	bne.n	800e328 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e324:	2303      	movs	r3, #3
 800e326:	e004      	b.n	800e332 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	683a      	ldr	r2, [r7, #0]
 800e32c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3714      	adds	r7, #20
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr
	...

0800e340 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	32b0      	adds	r2, #176	@ 0xb0
 800e352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e356:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	32b0      	adds	r2, #176	@ 0xb0
 800e362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d101      	bne.n	800e36e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e36a:	2303      	movs	r3, #3
 800e36c:	e018      	b.n	800e3a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	7c1b      	ldrb	r3, [r3, #16]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d10a      	bne.n	800e38c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e376:	4b0c      	ldr	r3, [pc, #48]	@ (800e3a8 <USBD_CDC_ReceivePacket+0x68>)
 800e378:	7819      	ldrb	r1, [r3, #0]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f004 fa17 	bl	80127b8 <USBD_LL_PrepareReceive>
 800e38a:	e008      	b.n	800e39e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e38c:	4b06      	ldr	r3, [pc, #24]	@ (800e3a8 <USBD_CDC_ReceivePacket+0x68>)
 800e38e:	7819      	ldrb	r1, [r3, #0]
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e396:	2340      	movs	r3, #64	@ 0x40
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f004 fa0d 	bl	80127b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	24000090 	.word	0x24000090

0800e3ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d101      	bne.n	800e3c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e3c0:	2303      	movs	r3, #3
 800e3c2:	e01f      	b.n	800e404 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d003      	beq.n	800e3ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	79fa      	ldrb	r2, [r7, #7]
 800e3f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f004 f883 	bl	8012504 <USBD_LL_Init>
 800e3fe:	4603      	mov	r3, r0
 800e400:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e402:	7dfb      	ldrb	r3, [r7, #23]
}
 800e404:	4618      	mov	r0, r3
 800e406:	3718      	adds	r7, #24
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e416:	2300      	movs	r3, #0
 800e418:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d101      	bne.n	800e424 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e420:	2303      	movs	r3, #3
 800e422:	e025      	b.n	800e470 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	32ae      	adds	r2, #174	@ 0xae
 800e436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00f      	beq.n	800e460 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	32ae      	adds	r2, #174	@ 0xae
 800e44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e450:	f107 020e 	add.w	r2, r7, #14
 800e454:	4610      	mov	r0, r2
 800e456:	4798      	blx	r3
 800e458:	4602      	mov	r2, r0
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e466:	1c5a      	adds	r2, r3, #1
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f004 f88f 	bl	80125a4 <USBD_LL_Start>
 800e486:	4603      	mov	r3, r0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e498:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	370c      	adds	r7, #12
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b084      	sub	sp, #16
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d009      	beq.n	800e4d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	78fa      	ldrb	r2, [r7, #3]
 800e4ca:	4611      	mov	r1, r2
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	4798      	blx	r3
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b084      	sub	sp, #16
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	78fa      	ldrb	r2, [r7, #3]
 800e4f8:	4611      	mov	r1, r2
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	4798      	blx	r3
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e504:	2303      	movs	r3, #3
 800e506:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e508:	7bfb      	ldrb	r3, [r7, #15]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}

0800e512 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b084      	sub	sp, #16
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	4618      	mov	r0, r3
 800e526:	f001 f936 	bl	800f796 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2201      	movs	r2, #1
 800e52e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e538:	461a      	mov	r2, r3
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e546:	f003 031f 	and.w	r3, r3, #31
 800e54a:	2b02      	cmp	r3, #2
 800e54c:	d01a      	beq.n	800e584 <USBD_LL_SetupStage+0x72>
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d822      	bhi.n	800e598 <USBD_LL_SetupStage+0x86>
 800e552:	2b00      	cmp	r3, #0
 800e554:	d002      	beq.n	800e55c <USBD_LL_SetupStage+0x4a>
 800e556:	2b01      	cmp	r3, #1
 800e558:	d00a      	beq.n	800e570 <USBD_LL_SetupStage+0x5e>
 800e55a:	e01d      	b.n	800e598 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e562:	4619      	mov	r1, r3
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 fb63 	bl	800ec30 <USBD_StdDevReq>
 800e56a:	4603      	mov	r3, r0
 800e56c:	73fb      	strb	r3, [r7, #15]
      break;
 800e56e:	e020      	b.n	800e5b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e576:	4619      	mov	r1, r3
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fbcb 	bl	800ed14 <USBD_StdItfReq>
 800e57e:	4603      	mov	r3, r0
 800e580:	73fb      	strb	r3, [r7, #15]
      break;
 800e582:	e016      	b.n	800e5b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e58a:	4619      	mov	r1, r3
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fc2d 	bl	800edec <USBD_StdEPReq>
 800e592:	4603      	mov	r3, r0
 800e594:	73fb      	strb	r3, [r7, #15]
      break;
 800e596:	e00c      	b.n	800e5b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e59e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f004 f85c 	bl	8012664 <USBD_LL_StallEP>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800e5b0:	bf00      	nop
  }

  return ret;
 800e5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3710      	adds	r7, #16
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b086      	sub	sp, #24
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	607a      	str	r2, [r7, #4]
 800e5c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e5ce:	7afb      	ldrb	r3, [r7, #11]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d16e      	bne.n	800e6b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e5da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e5e2:	2b03      	cmp	r3, #3
 800e5e4:	f040 8098 	bne.w	800e718 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	689a      	ldr	r2, [r3, #8]
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d913      	bls.n	800e61c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	689a      	ldr	r2, [r3, #8]
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	1ad2      	subs	r2, r2, r3
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	68da      	ldr	r2, [r3, #12]
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	4293      	cmp	r3, r2
 800e60c:	bf28      	it	cs
 800e60e:	4613      	movcs	r3, r2
 800e610:	461a      	mov	r2, r3
 800e612:	6879      	ldr	r1, [r7, #4]
 800e614:	68f8      	ldr	r0, [r7, #12]
 800e616:	f001 f9be 	bl	800f996 <USBD_CtlContinueRx>
 800e61a:	e07d      	b.n	800e718 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e622:	f003 031f 	and.w	r3, r3, #31
 800e626:	2b02      	cmp	r3, #2
 800e628:	d014      	beq.n	800e654 <USBD_LL_DataOutStage+0x98>
 800e62a:	2b02      	cmp	r3, #2
 800e62c:	d81d      	bhi.n	800e66a <USBD_LL_DataOutStage+0xae>
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <USBD_LL_DataOutStage+0x7c>
 800e632:	2b01      	cmp	r3, #1
 800e634:	d003      	beq.n	800e63e <USBD_LL_DataOutStage+0x82>
 800e636:	e018      	b.n	800e66a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e638:	2300      	movs	r3, #0
 800e63a:	75bb      	strb	r3, [r7, #22]
            break;
 800e63c:	e018      	b.n	800e670 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e644:	b2db      	uxtb	r3, r3
 800e646:	4619      	mov	r1, r3
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f000 fa64 	bl	800eb16 <USBD_CoreFindIF>
 800e64e:	4603      	mov	r3, r0
 800e650:	75bb      	strb	r3, [r7, #22]
            break;
 800e652:	e00d      	b.n	800e670 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	4619      	mov	r1, r3
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f000 fa66 	bl	800eb30 <USBD_CoreFindEP>
 800e664:	4603      	mov	r3, r0
 800e666:	75bb      	strb	r3, [r7, #22]
            break;
 800e668:	e002      	b.n	800e670 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e66a:	2300      	movs	r3, #0
 800e66c:	75bb      	strb	r3, [r7, #22]
            break;
 800e66e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e670:	7dbb      	ldrb	r3, [r7, #22]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d119      	bne.n	800e6aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	2b03      	cmp	r3, #3
 800e680:	d113      	bne.n	800e6aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e682:	7dba      	ldrb	r2, [r7, #22]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	32ae      	adds	r2, #174	@ 0xae
 800e688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e68c:	691b      	ldr	r3, [r3, #16]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00b      	beq.n	800e6aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e692:	7dba      	ldrb	r2, [r7, #22]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e69a:	7dba      	ldrb	r2, [r7, #22]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	32ae      	adds	r2, #174	@ 0xae
 800e6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	68f8      	ldr	r0, [r7, #12]
 800e6a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f001 f984 	bl	800f9b8 <USBD_CtlSendStatus>
 800e6b0:	e032      	b.n	800e718 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e6b2:	7afb      	ldrb	r3, [r7, #11]
 800e6b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f000 fa37 	bl	800eb30 <USBD_CoreFindEP>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e6c6:	7dbb      	ldrb	r3, [r7, #22]
 800e6c8:	2bff      	cmp	r3, #255	@ 0xff
 800e6ca:	d025      	beq.n	800e718 <USBD_LL_DataOutStage+0x15c>
 800e6cc:	7dbb      	ldrb	r3, [r7, #22]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d122      	bne.n	800e718 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	2b03      	cmp	r3, #3
 800e6dc:	d117      	bne.n	800e70e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e6de:	7dba      	ldrb	r2, [r7, #22]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	32ae      	adds	r2, #174	@ 0xae
 800e6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e8:	699b      	ldr	r3, [r3, #24]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00f      	beq.n	800e70e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e6ee:	7dba      	ldrb	r2, [r7, #22]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e6f6:	7dba      	ldrb	r2, [r7, #22]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	32ae      	adds	r2, #174	@ 0xae
 800e6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	7afa      	ldrb	r2, [r7, #11]
 800e704:	4611      	mov	r1, r2
 800e706:	68f8      	ldr	r0, [r7, #12]
 800e708:	4798      	blx	r3
 800e70a:	4603      	mov	r3, r0
 800e70c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e70e:	7dfb      	ldrb	r3, [r7, #23]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d001      	beq.n	800e718 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e714:	7dfb      	ldrb	r3, [r7, #23]
 800e716:	e000      	b.n	800e71a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3718      	adds	r7, #24
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b086      	sub	sp, #24
 800e726:	af00      	add	r7, sp, #0
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	460b      	mov	r3, r1
 800e72c:	607a      	str	r2, [r7, #4]
 800e72e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e730:	7afb      	ldrb	r3, [r7, #11]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d16f      	bne.n	800e816 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	3314      	adds	r3, #20
 800e73a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e742:	2b02      	cmp	r3, #2
 800e744:	d15a      	bne.n	800e7fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	689a      	ldr	r2, [r3, #8]
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d914      	bls.n	800e77c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	689a      	ldr	r2, [r3, #8]
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	1ad2      	subs	r2, r2, r3
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	461a      	mov	r2, r3
 800e766:	6879      	ldr	r1, [r7, #4]
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f001 f8e6 	bl	800f93a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e76e:	2300      	movs	r3, #0
 800e770:	2200      	movs	r2, #0
 800e772:	2100      	movs	r1, #0
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	f004 f81f 	bl	80127b8 <USBD_LL_PrepareReceive>
 800e77a:	e03f      	b.n	800e7fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	68da      	ldr	r2, [r3, #12]
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	429a      	cmp	r2, r3
 800e786:	d11c      	bne.n	800e7c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e790:	429a      	cmp	r2, r3
 800e792:	d316      	bcc.n	800e7c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d20f      	bcs.n	800e7c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f001 f8c7 	bl	800f93a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f003 fffc 	bl	80127b8 <USBD_LL_PrepareReceive>
 800e7c0:	e01c      	b.n	800e7fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	2b03      	cmp	r3, #3
 800e7cc:	d10f      	bne.n	800e7ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d009      	beq.n	800e7ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7ee:	2180      	movs	r1, #128	@ 0x80
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	f003 ff37 	bl	8012664 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f001 f8f1 	bl	800f9de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d03a      	beq.n	800e87c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f7ff fe42 	bl	800e490 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e814:	e032      	b.n	800e87c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e816:	7afb      	ldrb	r3, [r7, #11]
 800e818:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	4619      	mov	r1, r3
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f000 f985 	bl	800eb30 <USBD_CoreFindEP>
 800e826:	4603      	mov	r3, r0
 800e828:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
 800e82c:	2bff      	cmp	r3, #255	@ 0xff
 800e82e:	d025      	beq.n	800e87c <USBD_LL_DataInStage+0x15a>
 800e830:	7dfb      	ldrb	r3, [r7, #23]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d122      	bne.n	800e87c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	2b03      	cmp	r3, #3
 800e840:	d11c      	bne.n	800e87c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e842:	7dfa      	ldrb	r2, [r7, #23]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	32ae      	adds	r2, #174	@ 0xae
 800e848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e84c:	695b      	ldr	r3, [r3, #20]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d014      	beq.n	800e87c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e852:	7dfa      	ldrb	r2, [r7, #23]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e85a:	7dfa      	ldrb	r2, [r7, #23]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	32ae      	adds	r2, #174	@ 0xae
 800e860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e864:	695b      	ldr	r3, [r3, #20]
 800e866:	7afa      	ldrb	r2, [r7, #11]
 800e868:	4611      	mov	r1, r2
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	4798      	blx	r3
 800e86e:	4603      	mov	r3, r0
 800e870:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e872:	7dbb      	ldrb	r3, [r7, #22]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d001      	beq.n	800e87c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e878:	7dbb      	ldrb	r3, [r7, #22]
 800e87a:	e000      	b.n	800e87e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3718      	adds	r7, #24
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b084      	sub	sp, #16
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e88e:	2300      	movs	r3, #0
 800e890:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2201      	movs	r2, #1
 800e896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d014      	beq.n	800e8ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00e      	beq.n	800e8ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	6852      	ldr	r2, [r2, #4]
 800e8da:	b2d2      	uxtb	r2, r2
 800e8dc:	4611      	mov	r1, r2
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	4798      	blx	r3
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8ec:	2340      	movs	r3, #64	@ 0x40
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f003 fe71 	bl	80125da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2240      	movs	r2, #64	@ 0x40
 800e904:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e908:	2340      	movs	r3, #64	@ 0x40
 800e90a:	2200      	movs	r2, #0
 800e90c:	2180      	movs	r1, #128	@ 0x80
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f003 fe63 	bl	80125da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2240      	movs	r2, #64	@ 0x40
 800e91e:	621a      	str	r2, [r3, #32]

  return ret;
 800e920:	7bfb      	ldrb	r3, [r7, #15]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e92a:	b480      	push	{r7}
 800e92c:	b083      	sub	sp, #12
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
 800e932:	460b      	mov	r3, r1
 800e934:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	78fa      	ldrb	r2, [r7, #3]
 800e93a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e94a:	b480      	push	{r7}
 800e94c:	b083      	sub	sp, #12
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b04      	cmp	r3, #4
 800e95c:	d006      	beq.n	800e96c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e964:	b2da      	uxtb	r2, r3
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2204      	movs	r2, #4
 800e970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	370c      	adds	r7, #12
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr

0800e982 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e982:	b480      	push	{r7}
 800e984:	b083      	sub	sp, #12
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b04      	cmp	r3, #4
 800e994:	d106      	bne.n	800e9a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	370c      	adds	r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	2b03      	cmp	r3, #3
 800e9c4:	d110      	bne.n	800e9e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00b      	beq.n	800e9e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9d6:	69db      	ldr	r3, [r3, #28]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d005      	beq.n	800e9e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9e2:	69db      	ldr	r3, [r3, #28]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b082      	sub	sp, #8
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	32ae      	adds	r2, #174	@ 0xae
 800ea08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d101      	bne.n	800ea14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ea10:	2303      	movs	r3, #3
 800ea12:	e01c      	b.n	800ea4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	2b03      	cmp	r3, #3
 800ea1e:	d115      	bne.n	800ea4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	32ae      	adds	r2, #174	@ 0xae
 800ea2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea2e:	6a1b      	ldr	r3, [r3, #32]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d00b      	beq.n	800ea4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	32ae      	adds	r2, #174	@ 0xae
 800ea3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea42:	6a1b      	ldr	r3, [r3, #32]
 800ea44:	78fa      	ldrb	r2, [r7, #3]
 800ea46:	4611      	mov	r1, r2
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ea4c:	2300      	movs	r3, #0
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b082      	sub	sp, #8
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	460b      	mov	r3, r1
 800ea60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	32ae      	adds	r2, #174	@ 0xae
 800ea6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d101      	bne.n	800ea78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ea74:	2303      	movs	r3, #3
 800ea76:	e01c      	b.n	800eab2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	2b03      	cmp	r3, #3
 800ea82:	d115      	bne.n	800eab0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	32ae      	adds	r2, #174	@ 0xae
 800ea8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00b      	beq.n	800eab0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	32ae      	adds	r2, #174	@ 0xae
 800eaa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaa8:	78fa      	ldrb	r2, [r7, #3]
 800eaaa:	4611      	mov	r1, r2
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eaba:	b480      	push	{r7}
 800eabc:	b083      	sub	sp, #12
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ead8:	2300      	movs	r3, #0
 800eada:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2201      	movs	r2, #1
 800eae0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00e      	beq.n	800eb0c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	6852      	ldr	r2, [r2, #4]
 800eafa:	b2d2      	uxtb	r2, r2
 800eafc:	4611      	mov	r1, r2
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	4798      	blx	r3
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d001      	beq.n	800eb0c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800eb08:	2303      	movs	r3, #3
 800eb0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eb16:	b480      	push	{r7}
 800eb18:	b083      	sub	sp, #12
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eb22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	460b      	mov	r3, r1
 800eb3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eb3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b086      	sub	sp, #24
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
 800eb52:	460b      	mov	r3, r1
 800eb54:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	885b      	ldrh	r3, [r3, #2]
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	7812      	ldrb	r2, [r2, #0]
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d91f      	bls.n	800ebb0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800eb76:	e013      	b.n	800eba0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800eb78:	f107 030a 	add.w	r3, r7, #10
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	6978      	ldr	r0, [r7, #20]
 800eb80:	f000 f81b 	bl	800ebba <USBD_GetNextDesc>
 800eb84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	785b      	ldrb	r3, [r3, #1]
 800eb8a:	2b05      	cmp	r3, #5
 800eb8c:	d108      	bne.n	800eba0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	789b      	ldrb	r3, [r3, #2]
 800eb96:	78fa      	ldrb	r2, [r7, #3]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d008      	beq.n	800ebae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	885b      	ldrh	r3, [r3, #2]
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	897b      	ldrh	r3, [r7, #10]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d8e5      	bhi.n	800eb78 <USBD_GetEpDesc+0x2e>
 800ebac:	e000      	b.n	800ebb0 <USBD_GetEpDesc+0x66>
          break;
 800ebae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ebb0:	693b      	ldr	r3, [r7, #16]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3718      	adds	r7, #24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ebba:	b480      	push	{r7}
 800ebbc:	b085      	sub	sp, #20
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
 800ebc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	881b      	ldrh	r3, [r3, #0]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	7812      	ldrb	r2, [r2, #0]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3714      	adds	r7, #20
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr

0800ebf2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ebf2:	b480      	push	{r7}
 800ebf4:	b087      	sub	sp, #28
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	3301      	adds	r3, #1
 800ec08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec10:	8a3b      	ldrh	r3, [r7, #16]
 800ec12:	021b      	lsls	r3, r3, #8
 800ec14:	b21a      	sxth	r2, r3
 800ec16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	b21b      	sxth	r3, r3
 800ec1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec20:	89fb      	ldrh	r3, [r7, #14]
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	371c      	adds	r7, #28
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
	...

0800ec30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec46:	2b40      	cmp	r3, #64	@ 0x40
 800ec48:	d005      	beq.n	800ec56 <USBD_StdDevReq+0x26>
 800ec4a:	2b40      	cmp	r3, #64	@ 0x40
 800ec4c:	d857      	bhi.n	800ecfe <USBD_StdDevReq+0xce>
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00f      	beq.n	800ec72 <USBD_StdDevReq+0x42>
 800ec52:	2b20      	cmp	r3, #32
 800ec54:	d153      	bne.n	800ecfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	32ae      	adds	r2, #174	@ 0xae
 800ec60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	6839      	ldr	r1, [r7, #0]
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	4798      	blx	r3
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec70:	e04a      	b.n	800ed08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	785b      	ldrb	r3, [r3, #1]
 800ec76:	2b09      	cmp	r3, #9
 800ec78:	d83b      	bhi.n	800ecf2 <USBD_StdDevReq+0xc2>
 800ec7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec80 <USBD_StdDevReq+0x50>)
 800ec7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec80:	0800ecd5 	.word	0x0800ecd5
 800ec84:	0800ece9 	.word	0x0800ece9
 800ec88:	0800ecf3 	.word	0x0800ecf3
 800ec8c:	0800ecdf 	.word	0x0800ecdf
 800ec90:	0800ecf3 	.word	0x0800ecf3
 800ec94:	0800ecb3 	.word	0x0800ecb3
 800ec98:	0800eca9 	.word	0x0800eca9
 800ec9c:	0800ecf3 	.word	0x0800ecf3
 800eca0:	0800eccb 	.word	0x0800eccb
 800eca4:	0800ecbd 	.word	0x0800ecbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eca8:	6839      	ldr	r1, [r7, #0]
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fa3c 	bl	800f128 <USBD_GetDescriptor>
          break;
 800ecb0:	e024      	b.n	800ecfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ecb2:	6839      	ldr	r1, [r7, #0]
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 fbcb 	bl	800f450 <USBD_SetAddress>
          break;
 800ecba:	e01f      	b.n	800ecfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ecbc:	6839      	ldr	r1, [r7, #0]
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 fc0a 	bl	800f4d8 <USBD_SetConfig>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	73fb      	strb	r3, [r7, #15]
          break;
 800ecc8:	e018      	b.n	800ecfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ecca:	6839      	ldr	r1, [r7, #0]
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fcad 	bl	800f62c <USBD_GetConfig>
          break;
 800ecd2:	e013      	b.n	800ecfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ecd4:	6839      	ldr	r1, [r7, #0]
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 fcde 	bl	800f698 <USBD_GetStatus>
          break;
 800ecdc:	e00e      	b.n	800ecfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f000 fd0d 	bl	800f700 <USBD_SetFeature>
          break;
 800ece6:	e009      	b.n	800ecfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ece8:	6839      	ldr	r1, [r7, #0]
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 fd31 	bl	800f752 <USBD_ClrFeature>
          break;
 800ecf0:	e004      	b.n	800ecfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fd88 	bl	800f80a <USBD_CtlError>
          break;
 800ecfa:	bf00      	nop
      }
      break;
 800ecfc:	e004      	b.n	800ed08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ecfe:	6839      	ldr	r1, [r7, #0]
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 fd82 	bl	800f80a <USBD_CtlError>
      break;
 800ed06:	bf00      	nop
  }

  return ret;
 800ed08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop

0800ed14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed2a:	2b40      	cmp	r3, #64	@ 0x40
 800ed2c:	d005      	beq.n	800ed3a <USBD_StdItfReq+0x26>
 800ed2e:	2b40      	cmp	r3, #64	@ 0x40
 800ed30:	d852      	bhi.n	800edd8 <USBD_StdItfReq+0xc4>
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d001      	beq.n	800ed3a <USBD_StdItfReq+0x26>
 800ed36:	2b20      	cmp	r3, #32
 800ed38:	d14e      	bne.n	800edd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	3b01      	subs	r3, #1
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d840      	bhi.n	800edca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	889b      	ldrh	r3, [r3, #4]
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d836      	bhi.n	800edc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	889b      	ldrh	r3, [r3, #4]
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7ff fedb 	bl	800eb16 <USBD_CoreFindIF>
 800ed60:	4603      	mov	r3, r0
 800ed62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ed64:	7bbb      	ldrb	r3, [r7, #14]
 800ed66:	2bff      	cmp	r3, #255	@ 0xff
 800ed68:	d01d      	beq.n	800eda6 <USBD_StdItfReq+0x92>
 800ed6a:	7bbb      	ldrb	r3, [r7, #14]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d11a      	bne.n	800eda6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ed70:	7bba      	ldrb	r2, [r7, #14]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	32ae      	adds	r2, #174	@ 0xae
 800ed76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00f      	beq.n	800eda0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ed80:	7bba      	ldrb	r2, [r7, #14]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ed88:	7bba      	ldrb	r2, [r7, #14]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	32ae      	adds	r2, #174	@ 0xae
 800ed8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	4798      	blx	r3
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ed9e:	e004      	b.n	800edaa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800eda0:	2303      	movs	r3, #3
 800eda2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800eda4:	e001      	b.n	800edaa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800eda6:	2303      	movs	r3, #3
 800eda8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	88db      	ldrh	r3, [r3, #6]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d110      	bne.n	800edd4 <USBD_StdItfReq+0xc0>
 800edb2:	7bfb      	ldrb	r3, [r7, #15]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10d      	bne.n	800edd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f000 fdfd 	bl	800f9b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800edbe:	e009      	b.n	800edd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800edc0:	6839      	ldr	r1, [r7, #0]
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 fd21 	bl	800f80a <USBD_CtlError>
          break;
 800edc8:	e004      	b.n	800edd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800edca:	6839      	ldr	r1, [r7, #0]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 fd1c 	bl	800f80a <USBD_CtlError>
          break;
 800edd2:	e000      	b.n	800edd6 <USBD_StdItfReq+0xc2>
          break;
 800edd4:	bf00      	nop
      }
      break;
 800edd6:	e004      	b.n	800ede2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 fd15 	bl	800f80a <USBD_CtlError>
      break;
 800ede0:	bf00      	nop
  }

  return ret;
 800ede2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	889b      	ldrh	r3, [r3, #4]
 800edfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee08:	2b40      	cmp	r3, #64	@ 0x40
 800ee0a:	d007      	beq.n	800ee1c <USBD_StdEPReq+0x30>
 800ee0c:	2b40      	cmp	r3, #64	@ 0x40
 800ee0e:	f200 817f 	bhi.w	800f110 <USBD_StdEPReq+0x324>
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d02a      	beq.n	800ee6c <USBD_StdEPReq+0x80>
 800ee16:	2b20      	cmp	r3, #32
 800ee18:	f040 817a 	bne.w	800f110 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ee1c:	7bbb      	ldrb	r3, [r7, #14]
 800ee1e:	4619      	mov	r1, r3
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7ff fe85 	bl	800eb30 <USBD_CoreFindEP>
 800ee26:	4603      	mov	r3, r0
 800ee28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee2a:	7b7b      	ldrb	r3, [r7, #13]
 800ee2c:	2bff      	cmp	r3, #255	@ 0xff
 800ee2e:	f000 8174 	beq.w	800f11a <USBD_StdEPReq+0x32e>
 800ee32:	7b7b      	ldrb	r3, [r7, #13]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	f040 8170 	bne.w	800f11a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ee3a:	7b7a      	ldrb	r2, [r7, #13]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ee42:	7b7a      	ldrb	r2, [r7, #13]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	32ae      	adds	r2, #174	@ 0xae
 800ee48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f000 8163 	beq.w	800f11a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ee54:	7b7a      	ldrb	r2, [r7, #13]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	32ae      	adds	r2, #174	@ 0xae
 800ee5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	6839      	ldr	r1, [r7, #0]
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	4798      	blx	r3
 800ee66:	4603      	mov	r3, r0
 800ee68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ee6a:	e156      	b.n	800f11a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	785b      	ldrb	r3, [r3, #1]
 800ee70:	2b03      	cmp	r3, #3
 800ee72:	d008      	beq.n	800ee86 <USBD_StdEPReq+0x9a>
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	f300 8145 	bgt.w	800f104 <USBD_StdEPReq+0x318>
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f000 809b 	beq.w	800efb6 <USBD_StdEPReq+0x1ca>
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d03c      	beq.n	800eefe <USBD_StdEPReq+0x112>
 800ee84:	e13e      	b.n	800f104 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b02      	cmp	r3, #2
 800ee90:	d002      	beq.n	800ee98 <USBD_StdEPReq+0xac>
 800ee92:	2b03      	cmp	r3, #3
 800ee94:	d016      	beq.n	800eec4 <USBD_StdEPReq+0xd8>
 800ee96:	e02c      	b.n	800eef2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee98:	7bbb      	ldrb	r3, [r7, #14]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00d      	beq.n	800eeba <USBD_StdEPReq+0xce>
 800ee9e:	7bbb      	ldrb	r3, [r7, #14]
 800eea0:	2b80      	cmp	r3, #128	@ 0x80
 800eea2:	d00a      	beq.n	800eeba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eea4:	7bbb      	ldrb	r3, [r7, #14]
 800eea6:	4619      	mov	r1, r3
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f003 fbdb 	bl	8012664 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eeae:	2180      	movs	r1, #128	@ 0x80
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f003 fbd7 	bl	8012664 <USBD_LL_StallEP>
 800eeb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eeb8:	e020      	b.n	800eefc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 fca4 	bl	800f80a <USBD_CtlError>
              break;
 800eec2:	e01b      	b.n	800eefc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	885b      	ldrh	r3, [r3, #2]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10e      	bne.n	800eeea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eecc:	7bbb      	ldrb	r3, [r7, #14]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00b      	beq.n	800eeea <USBD_StdEPReq+0xfe>
 800eed2:	7bbb      	ldrb	r3, [r7, #14]
 800eed4:	2b80      	cmp	r3, #128	@ 0x80
 800eed6:	d008      	beq.n	800eeea <USBD_StdEPReq+0xfe>
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	88db      	ldrh	r3, [r3, #6]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d104      	bne.n	800eeea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800eee0:	7bbb      	ldrb	r3, [r7, #14]
 800eee2:	4619      	mov	r1, r3
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f003 fbbd 	bl	8012664 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 fd64 	bl	800f9b8 <USBD_CtlSendStatus>

              break;
 800eef0:	e004      	b.n	800eefc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800eef2:	6839      	ldr	r1, [r7, #0]
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 fc88 	bl	800f80a <USBD_CtlError>
              break;
 800eefa:	bf00      	nop
          }
          break;
 800eefc:	e107      	b.n	800f10e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d002      	beq.n	800ef10 <USBD_StdEPReq+0x124>
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d016      	beq.n	800ef3c <USBD_StdEPReq+0x150>
 800ef0e:	e04b      	b.n	800efa8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef10:	7bbb      	ldrb	r3, [r7, #14]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d00d      	beq.n	800ef32 <USBD_StdEPReq+0x146>
 800ef16:	7bbb      	ldrb	r3, [r7, #14]
 800ef18:	2b80      	cmp	r3, #128	@ 0x80
 800ef1a:	d00a      	beq.n	800ef32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef1c:	7bbb      	ldrb	r3, [r7, #14]
 800ef1e:	4619      	mov	r1, r3
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f003 fb9f 	bl	8012664 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef26:	2180      	movs	r1, #128	@ 0x80
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f003 fb9b 	bl	8012664 <USBD_LL_StallEP>
 800ef2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ef30:	e040      	b.n	800efb4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ef32:	6839      	ldr	r1, [r7, #0]
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 fc68 	bl	800f80a <USBD_CtlError>
              break;
 800ef3a:	e03b      	b.n	800efb4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	885b      	ldrh	r3, [r3, #2]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d136      	bne.n	800efb2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ef44:	7bbb      	ldrb	r3, [r7, #14]
 800ef46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d004      	beq.n	800ef58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ef4e:	7bbb      	ldrb	r3, [r7, #14]
 800ef50:	4619      	mov	r1, r3
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f003 fba5 	bl	80126a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f000 fd2d 	bl	800f9b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ef5e:	7bbb      	ldrb	r3, [r7, #14]
 800ef60:	4619      	mov	r1, r3
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f7ff fde4 	bl	800eb30 <USBD_CoreFindEP>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef6c:	7b7b      	ldrb	r3, [r7, #13]
 800ef6e:	2bff      	cmp	r3, #255	@ 0xff
 800ef70:	d01f      	beq.n	800efb2 <USBD_StdEPReq+0x1c6>
 800ef72:	7b7b      	ldrb	r3, [r7, #13]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d11c      	bne.n	800efb2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ef78:	7b7a      	ldrb	r2, [r7, #13]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ef80:	7b7a      	ldrb	r2, [r7, #13]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	32ae      	adds	r2, #174	@ 0xae
 800ef86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef8a:	689b      	ldr	r3, [r3, #8]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d010      	beq.n	800efb2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ef90:	7b7a      	ldrb	r2, [r7, #13]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	32ae      	adds	r2, #174	@ 0xae
 800ef96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	6839      	ldr	r1, [r7, #0]
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	4798      	blx	r3
 800efa2:	4603      	mov	r3, r0
 800efa4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800efa6:	e004      	b.n	800efb2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fc2d 	bl	800f80a <USBD_CtlError>
              break;
 800efb0:	e000      	b.n	800efb4 <USBD_StdEPReq+0x1c8>
              break;
 800efb2:	bf00      	nop
          }
          break;
 800efb4:	e0ab      	b.n	800f10e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d002      	beq.n	800efc8 <USBD_StdEPReq+0x1dc>
 800efc2:	2b03      	cmp	r3, #3
 800efc4:	d032      	beq.n	800f02c <USBD_StdEPReq+0x240>
 800efc6:	e097      	b.n	800f0f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800efc8:	7bbb      	ldrb	r3, [r7, #14]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d007      	beq.n	800efde <USBD_StdEPReq+0x1f2>
 800efce:	7bbb      	ldrb	r3, [r7, #14]
 800efd0:	2b80      	cmp	r3, #128	@ 0x80
 800efd2:	d004      	beq.n	800efde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800efd4:	6839      	ldr	r1, [r7, #0]
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 fc17 	bl	800f80a <USBD_CtlError>
                break;
 800efdc:	e091      	b.n	800f102 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	da0b      	bge.n	800effe <USBD_StdEPReq+0x212>
 800efe6:	7bbb      	ldrb	r3, [r7, #14]
 800efe8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800efec:	4613      	mov	r3, r2
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	4413      	add	r3, r2
 800eff2:	009b      	lsls	r3, r3, #2
 800eff4:	3310      	adds	r3, #16
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	4413      	add	r3, r2
 800effa:	3304      	adds	r3, #4
 800effc:	e00b      	b.n	800f016 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800effe:	7bbb      	ldrb	r3, [r7, #14]
 800f000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f004:	4613      	mov	r3, r2
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	4413      	add	r3, r2
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	4413      	add	r3, r2
 800f014:	3304      	adds	r3, #4
 800f016:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	2200      	movs	r2, #0
 800f01c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	2202      	movs	r2, #2
 800f022:	4619      	mov	r1, r3
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fc6d 	bl	800f904 <USBD_CtlSendData>
              break;
 800f02a:	e06a      	b.n	800f102 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f02c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f030:	2b00      	cmp	r3, #0
 800f032:	da11      	bge.n	800f058 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f034:	7bbb      	ldrb	r3, [r7, #14]
 800f036:	f003 020f 	and.w	r2, r3, #15
 800f03a:	6879      	ldr	r1, [r7, #4]
 800f03c:	4613      	mov	r3, r2
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4413      	add	r3, r2
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	440b      	add	r3, r1
 800f046:	3324      	adds	r3, #36	@ 0x24
 800f048:	881b      	ldrh	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d117      	bne.n	800f07e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f04e:	6839      	ldr	r1, [r7, #0]
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 fbda 	bl	800f80a <USBD_CtlError>
                  break;
 800f056:	e054      	b.n	800f102 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f058:	7bbb      	ldrb	r3, [r7, #14]
 800f05a:	f003 020f 	and.w	r2, r3, #15
 800f05e:	6879      	ldr	r1, [r7, #4]
 800f060:	4613      	mov	r3, r2
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	4413      	add	r3, r2
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	440b      	add	r3, r1
 800f06a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f06e:	881b      	ldrh	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d104      	bne.n	800f07e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f074:	6839      	ldr	r1, [r7, #0]
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 fbc7 	bl	800f80a <USBD_CtlError>
                  break;
 800f07c:	e041      	b.n	800f102 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f07e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f082:	2b00      	cmp	r3, #0
 800f084:	da0b      	bge.n	800f09e <USBD_StdEPReq+0x2b2>
 800f086:	7bbb      	ldrb	r3, [r7, #14]
 800f088:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f08c:	4613      	mov	r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4413      	add	r3, r2
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	3310      	adds	r3, #16
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	4413      	add	r3, r2
 800f09a:	3304      	adds	r3, #4
 800f09c:	e00b      	b.n	800f0b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f09e:	7bbb      	ldrb	r3, [r7, #14]
 800f0a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	009b      	lsls	r3, r3, #2
 800f0a8:	4413      	add	r3, r2
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	4413      	add	r3, r2
 800f0b4:	3304      	adds	r3, #4
 800f0b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f0b8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d002      	beq.n	800f0c4 <USBD_StdEPReq+0x2d8>
 800f0be:	7bbb      	ldrb	r3, [r7, #14]
 800f0c0:	2b80      	cmp	r3, #128	@ 0x80
 800f0c2:	d103      	bne.n	800f0cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	601a      	str	r2, [r3, #0]
 800f0ca:	e00e      	b.n	800f0ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f0cc:	7bbb      	ldrb	r3, [r7, #14]
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f003 fb05 	bl	80126e0 <USBD_LL_IsStallEP>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d003      	beq.n	800f0e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	e002      	b.n	800f0ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	2202      	movs	r2, #2
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f000 fc07 	bl	800f904 <USBD_CtlSendData>
              break;
 800f0f6:	e004      	b.n	800f102 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f0f8:	6839      	ldr	r1, [r7, #0]
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 fb85 	bl	800f80a <USBD_CtlError>
              break;
 800f100:	bf00      	nop
          }
          break;
 800f102:	e004      	b.n	800f10e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f104:	6839      	ldr	r1, [r7, #0]
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fb7f 	bl	800f80a <USBD_CtlError>
          break;
 800f10c:	bf00      	nop
      }
      break;
 800f10e:	e005      	b.n	800f11c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f110:	6839      	ldr	r1, [r7, #0]
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 fb79 	bl	800f80a <USBD_CtlError>
      break;
 800f118:	e000      	b.n	800f11c <USBD_StdEPReq+0x330>
      break;
 800f11a:	bf00      	nop
  }

  return ret;
 800f11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3710      	adds	r7, #16
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
	...

0800f128 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f132:	2300      	movs	r3, #0
 800f134:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f136:	2300      	movs	r3, #0
 800f138:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f13a:	2300      	movs	r3, #0
 800f13c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	885b      	ldrh	r3, [r3, #2]
 800f142:	0a1b      	lsrs	r3, r3, #8
 800f144:	b29b      	uxth	r3, r3
 800f146:	3b01      	subs	r3, #1
 800f148:	2b0e      	cmp	r3, #14
 800f14a:	f200 8152 	bhi.w	800f3f2 <USBD_GetDescriptor+0x2ca>
 800f14e:	a201      	add	r2, pc, #4	@ (adr r2, 800f154 <USBD_GetDescriptor+0x2c>)
 800f150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f154:	0800f1c5 	.word	0x0800f1c5
 800f158:	0800f1dd 	.word	0x0800f1dd
 800f15c:	0800f21d 	.word	0x0800f21d
 800f160:	0800f3f3 	.word	0x0800f3f3
 800f164:	0800f3f3 	.word	0x0800f3f3
 800f168:	0800f393 	.word	0x0800f393
 800f16c:	0800f3bf 	.word	0x0800f3bf
 800f170:	0800f3f3 	.word	0x0800f3f3
 800f174:	0800f3f3 	.word	0x0800f3f3
 800f178:	0800f3f3 	.word	0x0800f3f3
 800f17c:	0800f3f3 	.word	0x0800f3f3
 800f180:	0800f3f3 	.word	0x0800f3f3
 800f184:	0800f3f3 	.word	0x0800f3f3
 800f188:	0800f3f3 	.word	0x0800f3f3
 800f18c:	0800f191 	.word	0x0800f191
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f196:	69db      	ldr	r3, [r3, #28]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00b      	beq.n	800f1b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1a2:	69db      	ldr	r3, [r3, #28]
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	7c12      	ldrb	r2, [r2, #16]
 800f1a8:	f107 0108 	add.w	r1, r7, #8
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	4798      	blx	r3
 800f1b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1b2:	e126      	b.n	800f402 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f1b4:	6839      	ldr	r1, [r7, #0]
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f000 fb27 	bl	800f80a <USBD_CtlError>
        err++;
 800f1bc:	7afb      	ldrb	r3, [r7, #11]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	72fb      	strb	r3, [r7, #11]
      break;
 800f1c2:	e11e      	b.n	800f402 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	7c12      	ldrb	r2, [r2, #16]
 800f1d0:	f107 0108 	add.w	r1, r7, #8
 800f1d4:	4610      	mov	r0, r2
 800f1d6:	4798      	blx	r3
 800f1d8:	60f8      	str	r0, [r7, #12]
      break;
 800f1da:	e112      	b.n	800f402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	7c1b      	ldrb	r3, [r3, #16]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10d      	bne.n	800f200 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1ec:	f107 0208 	add.w	r2, r7, #8
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	4798      	blx	r3
 800f1f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	2202      	movs	r2, #2
 800f1fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f1fe:	e100      	b.n	800f402 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f208:	f107 0208 	add.w	r2, r7, #8
 800f20c:	4610      	mov	r0, r2
 800f20e:	4798      	blx	r3
 800f210:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	3301      	adds	r3, #1
 800f216:	2202      	movs	r2, #2
 800f218:	701a      	strb	r2, [r3, #0]
      break;
 800f21a:	e0f2      	b.n	800f402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	885b      	ldrh	r3, [r3, #2]
 800f220:	b2db      	uxtb	r3, r3
 800f222:	2b05      	cmp	r3, #5
 800f224:	f200 80ac 	bhi.w	800f380 <USBD_GetDescriptor+0x258>
 800f228:	a201      	add	r2, pc, #4	@ (adr r2, 800f230 <USBD_GetDescriptor+0x108>)
 800f22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f22e:	bf00      	nop
 800f230:	0800f249 	.word	0x0800f249
 800f234:	0800f27d 	.word	0x0800f27d
 800f238:	0800f2b1 	.word	0x0800f2b1
 800f23c:	0800f2e5 	.word	0x0800f2e5
 800f240:	0800f319 	.word	0x0800f319
 800f244:	0800f34d 	.word	0x0800f34d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00b      	beq.n	800f26c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	7c12      	ldrb	r2, [r2, #16]
 800f260:	f107 0108 	add.w	r1, r7, #8
 800f264:	4610      	mov	r0, r2
 800f266:	4798      	blx	r3
 800f268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f26a:	e091      	b.n	800f390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f26c:	6839      	ldr	r1, [r7, #0]
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 facb 	bl	800f80a <USBD_CtlError>
            err++;
 800f274:	7afb      	ldrb	r3, [r7, #11]
 800f276:	3301      	adds	r3, #1
 800f278:	72fb      	strb	r3, [r7, #11]
          break;
 800f27a:	e089      	b.n	800f390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00b      	beq.n	800f2a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	7c12      	ldrb	r2, [r2, #16]
 800f294:	f107 0108 	add.w	r1, r7, #8
 800f298:	4610      	mov	r0, r2
 800f29a:	4798      	blx	r3
 800f29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f29e:	e077      	b.n	800f390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f2a0:	6839      	ldr	r1, [r7, #0]
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fab1 	bl	800f80a <USBD_CtlError>
            err++;
 800f2a8:	7afb      	ldrb	r3, [r7, #11]
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800f2ae:	e06f      	b.n	800f390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00b      	beq.n	800f2d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	7c12      	ldrb	r2, [r2, #16]
 800f2c8:	f107 0108 	add.w	r1, r7, #8
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	4798      	blx	r3
 800f2d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2d2:	e05d      	b.n	800f390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f2d4:	6839      	ldr	r1, [r7, #0]
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fa97 	bl	800f80a <USBD_CtlError>
            err++;
 800f2dc:	7afb      	ldrb	r3, [r7, #11]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800f2e2:	e055      	b.n	800f390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2ea:	691b      	ldr	r3, [r3, #16]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00b      	beq.n	800f308 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	7c12      	ldrb	r2, [r2, #16]
 800f2fc:	f107 0108 	add.w	r1, r7, #8
 800f300:	4610      	mov	r0, r2
 800f302:	4798      	blx	r3
 800f304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f306:	e043      	b.n	800f390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 fa7d 	bl	800f80a <USBD_CtlError>
            err++;
 800f310:	7afb      	ldrb	r3, [r7, #11]
 800f312:	3301      	adds	r3, #1
 800f314:	72fb      	strb	r3, [r7, #11]
          break;
 800f316:	e03b      	b.n	800f390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f31e:	695b      	ldr	r3, [r3, #20]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00b      	beq.n	800f33c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f32a:	695b      	ldr	r3, [r3, #20]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	7c12      	ldrb	r2, [r2, #16]
 800f330:	f107 0108 	add.w	r1, r7, #8
 800f334:	4610      	mov	r0, r2
 800f336:	4798      	blx	r3
 800f338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f33a:	e029      	b.n	800f390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f33c:	6839      	ldr	r1, [r7, #0]
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 fa63 	bl	800f80a <USBD_CtlError>
            err++;
 800f344:	7afb      	ldrb	r3, [r7, #11]
 800f346:	3301      	adds	r3, #1
 800f348:	72fb      	strb	r3, [r7, #11]
          break;
 800f34a:	e021      	b.n	800f390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f352:	699b      	ldr	r3, [r3, #24]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d00b      	beq.n	800f370 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f35e:	699b      	ldr	r3, [r3, #24]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	7c12      	ldrb	r2, [r2, #16]
 800f364:	f107 0108 	add.w	r1, r7, #8
 800f368:	4610      	mov	r0, r2
 800f36a:	4798      	blx	r3
 800f36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f36e:	e00f      	b.n	800f390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f370:	6839      	ldr	r1, [r7, #0]
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fa49 	bl	800f80a <USBD_CtlError>
            err++;
 800f378:	7afb      	ldrb	r3, [r7, #11]
 800f37a:	3301      	adds	r3, #1
 800f37c:	72fb      	strb	r3, [r7, #11]
          break;
 800f37e:	e007      	b.n	800f390 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f380:	6839      	ldr	r1, [r7, #0]
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 fa41 	bl	800f80a <USBD_CtlError>
          err++;
 800f388:	7afb      	ldrb	r3, [r7, #11]
 800f38a:	3301      	adds	r3, #1
 800f38c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f38e:	bf00      	nop
      }
      break;
 800f390:	e037      	b.n	800f402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	7c1b      	ldrb	r3, [r3, #16]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d109      	bne.n	800f3ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3a2:	f107 0208 	add.w	r2, r7, #8
 800f3a6:	4610      	mov	r0, r2
 800f3a8:	4798      	blx	r3
 800f3aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3ac:	e029      	b.n	800f402 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f3ae:	6839      	ldr	r1, [r7, #0]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fa2a 	bl	800f80a <USBD_CtlError>
        err++;
 800f3b6:	7afb      	ldrb	r3, [r7, #11]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	72fb      	strb	r3, [r7, #11]
      break;
 800f3bc:	e021      	b.n	800f402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	7c1b      	ldrb	r3, [r3, #16]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d10d      	bne.n	800f3e2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3ce:	f107 0208 	add.w	r2, r7, #8
 800f3d2:	4610      	mov	r0, r2
 800f3d4:	4798      	blx	r3
 800f3d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	2207      	movs	r2, #7
 800f3de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3e0:	e00f      	b.n	800f402 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f3e2:	6839      	ldr	r1, [r7, #0]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fa10 	bl	800f80a <USBD_CtlError>
        err++;
 800f3ea:	7afb      	ldrb	r3, [r7, #11]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	72fb      	strb	r3, [r7, #11]
      break;
 800f3f0:	e007      	b.n	800f402 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f3f2:	6839      	ldr	r1, [r7, #0]
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 fa08 	bl	800f80a <USBD_CtlError>
      err++;
 800f3fa:	7afb      	ldrb	r3, [r7, #11]
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	72fb      	strb	r3, [r7, #11]
      break;
 800f400:	bf00      	nop
  }

  if (err != 0U)
 800f402:	7afb      	ldrb	r3, [r7, #11]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d11e      	bne.n	800f446 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	88db      	ldrh	r3, [r3, #6]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d016      	beq.n	800f43e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f410:	893b      	ldrh	r3, [r7, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00e      	beq.n	800f434 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	88da      	ldrh	r2, [r3, #6]
 800f41a:	893b      	ldrh	r3, [r7, #8]
 800f41c:	4293      	cmp	r3, r2
 800f41e:	bf28      	it	cs
 800f420:	4613      	movcs	r3, r2
 800f422:	b29b      	uxth	r3, r3
 800f424:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f426:	893b      	ldrh	r3, [r7, #8]
 800f428:	461a      	mov	r2, r3
 800f42a:	68f9      	ldr	r1, [r7, #12]
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f000 fa69 	bl	800f904 <USBD_CtlSendData>
 800f432:	e009      	b.n	800f448 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f434:	6839      	ldr	r1, [r7, #0]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 f9e7 	bl	800f80a <USBD_CtlError>
 800f43c:	e004      	b.n	800f448 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 faba 	bl	800f9b8 <USBD_CtlSendStatus>
 800f444:	e000      	b.n	800f448 <USBD_GetDescriptor+0x320>
    return;
 800f446:	bf00      	nop
  }
}
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop

0800f450 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	889b      	ldrh	r3, [r3, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d131      	bne.n	800f4c6 <USBD_SetAddress+0x76>
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	88db      	ldrh	r3, [r3, #6]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d12d      	bne.n	800f4c6 <USBD_SetAddress+0x76>
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	885b      	ldrh	r3, [r3, #2]
 800f46e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f470:	d829      	bhi.n	800f4c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	885b      	ldrh	r3, [r3, #2]
 800f476:	b2db      	uxtb	r3, r3
 800f478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f47c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f484:	b2db      	uxtb	r3, r3
 800f486:	2b03      	cmp	r3, #3
 800f488:	d104      	bne.n	800f494 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 f9bc 	bl	800f80a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f492:	e01d      	b.n	800f4d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	7bfa      	ldrb	r2, [r7, #15]
 800f498:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f49c:	7bfb      	ldrb	r3, [r7, #15]
 800f49e:	4619      	mov	r1, r3
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f003 f949 	bl	8012738 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 fa86 	bl	800f9b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f4ac:	7bfb      	ldrb	r3, [r7, #15]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d004      	beq.n	800f4bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2202      	movs	r2, #2
 800f4b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4ba:	e009      	b.n	800f4d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4c4:	e004      	b.n	800f4d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f4c6:	6839      	ldr	r1, [r7, #0]
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 f99e 	bl	800f80a <USBD_CtlError>
  }
}
 800f4ce:	bf00      	nop
 800f4d0:	bf00      	nop
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	885b      	ldrh	r3, [r3, #2]
 800f4ea:	b2da      	uxtb	r2, r3
 800f4ec:	4b4e      	ldr	r3, [pc, #312]	@ (800f628 <USBD_SetConfig+0x150>)
 800f4ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f4f0:	4b4d      	ldr	r3, [pc, #308]	@ (800f628 <USBD_SetConfig+0x150>)
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d905      	bls.n	800f504 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f4f8:	6839      	ldr	r1, [r7, #0]
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 f985 	bl	800f80a <USBD_CtlError>
    return USBD_FAIL;
 800f500:	2303      	movs	r3, #3
 800f502:	e08c      	b.n	800f61e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b02      	cmp	r3, #2
 800f50e:	d002      	beq.n	800f516 <USBD_SetConfig+0x3e>
 800f510:	2b03      	cmp	r3, #3
 800f512:	d029      	beq.n	800f568 <USBD_SetConfig+0x90>
 800f514:	e075      	b.n	800f602 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f516:	4b44      	ldr	r3, [pc, #272]	@ (800f628 <USBD_SetConfig+0x150>)
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d020      	beq.n	800f560 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f51e:	4b42      	ldr	r3, [pc, #264]	@ (800f628 <USBD_SetConfig+0x150>)
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	461a      	mov	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f528:	4b3f      	ldr	r3, [pc, #252]	@ (800f628 <USBD_SetConfig+0x150>)
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	4619      	mov	r1, r3
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7fe ffb9 	bl	800e4a6 <USBD_SetClassConfig>
 800f534:	4603      	mov	r3, r0
 800f536:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f538:	7bfb      	ldrb	r3, [r7, #15]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d008      	beq.n	800f550 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 f962 	bl	800f80a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2202      	movs	r2, #2
 800f54a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f54e:	e065      	b.n	800f61c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 fa31 	bl	800f9b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2203      	movs	r2, #3
 800f55a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f55e:	e05d      	b.n	800f61c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 fa29 	bl	800f9b8 <USBD_CtlSendStatus>
      break;
 800f566:	e059      	b.n	800f61c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f568:	4b2f      	ldr	r3, [pc, #188]	@ (800f628 <USBD_SetConfig+0x150>)
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d112      	bne.n	800f596 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2202      	movs	r2, #2
 800f574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f578:	4b2b      	ldr	r3, [pc, #172]	@ (800f628 <USBD_SetConfig+0x150>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	461a      	mov	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f582:	4b29      	ldr	r3, [pc, #164]	@ (800f628 <USBD_SetConfig+0x150>)
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	4619      	mov	r1, r3
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7fe ffa8 	bl	800e4de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 fa12 	bl	800f9b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f594:	e042      	b.n	800f61c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f596:	4b24      	ldr	r3, [pc, #144]	@ (800f628 <USBD_SetConfig+0x150>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	461a      	mov	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d02a      	beq.n	800f5fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f7fe ff96 	bl	800e4de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f628 <USBD_SetConfig+0x150>)
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f5bc:	4b1a      	ldr	r3, [pc, #104]	@ (800f628 <USBD_SetConfig+0x150>)
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7fe ff6f 	bl	800e4a6 <USBD_SetClassConfig>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00f      	beq.n	800f5f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f5d2:	6839      	ldr	r1, [r7, #0]
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 f918 	bl	800f80a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f7fe ff7b 	bl	800e4de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2202      	movs	r2, #2
 800f5ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f5f0:	e014      	b.n	800f61c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 f9e0 	bl	800f9b8 <USBD_CtlSendStatus>
      break;
 800f5f8:	e010      	b.n	800f61c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f000 f9dc 	bl	800f9b8 <USBD_CtlSendStatus>
      break;
 800f600:	e00c      	b.n	800f61c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f602:	6839      	ldr	r1, [r7, #0]
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f000 f900 	bl	800f80a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f60a:	4b07      	ldr	r3, [pc, #28]	@ (800f628 <USBD_SetConfig+0x150>)
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7fe ff64 	bl	800e4de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f616:	2303      	movs	r3, #3
 800f618:	73fb      	strb	r3, [r7, #15]
      break;
 800f61a:	bf00      	nop
  }

  return ret;
 800f61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3710      	adds	r7, #16
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	240002f0 	.word	0x240002f0

0800f62c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	88db      	ldrh	r3, [r3, #6]
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d004      	beq.n	800f648 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f63e:	6839      	ldr	r1, [r7, #0]
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 f8e2 	bl	800f80a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f646:	e023      	b.n	800f690 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	2b02      	cmp	r3, #2
 800f652:	dc02      	bgt.n	800f65a <USBD_GetConfig+0x2e>
 800f654:	2b00      	cmp	r3, #0
 800f656:	dc03      	bgt.n	800f660 <USBD_GetConfig+0x34>
 800f658:	e015      	b.n	800f686 <USBD_GetConfig+0x5a>
 800f65a:	2b03      	cmp	r3, #3
 800f65c:	d00b      	beq.n	800f676 <USBD_GetConfig+0x4a>
 800f65e:	e012      	b.n	800f686 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2200      	movs	r2, #0
 800f664:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	3308      	adds	r3, #8
 800f66a:	2201      	movs	r2, #1
 800f66c:	4619      	mov	r1, r3
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 f948 	bl	800f904 <USBD_CtlSendData>
        break;
 800f674:	e00c      	b.n	800f690 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	3304      	adds	r3, #4
 800f67a:	2201      	movs	r2, #1
 800f67c:	4619      	mov	r1, r3
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 f940 	bl	800f904 <USBD_CtlSendData>
        break;
 800f684:	e004      	b.n	800f690 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f686:	6839      	ldr	r1, [r7, #0]
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 f8be 	bl	800f80a <USBD_CtlError>
        break;
 800f68e:	bf00      	nop
}
 800f690:	bf00      	nop
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	2b02      	cmp	r3, #2
 800f6ae:	d81e      	bhi.n	800f6ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	88db      	ldrh	r3, [r3, #6]
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d004      	beq.n	800f6c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 f8a5 	bl	800f80a <USBD_CtlError>
        break;
 800f6c0:	e01a      	b.n	800f6f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d005      	beq.n	800f6de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	68db      	ldr	r3, [r3, #12]
 800f6d6:	f043 0202 	orr.w	r2, r3, #2
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	330c      	adds	r3, #12
 800f6e2:	2202      	movs	r2, #2
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 f90c 	bl	800f904 <USBD_CtlSendData>
      break;
 800f6ec:	e004      	b.n	800f6f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f6ee:	6839      	ldr	r1, [r7, #0]
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f000 f88a 	bl	800f80a <USBD_CtlError>
      break;
 800f6f6:	bf00      	nop
  }
}
 800f6f8:	bf00      	nop
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	885b      	ldrh	r3, [r3, #2]
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d107      	bne.n	800f722 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2201      	movs	r2, #1
 800f716:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 f94c 	bl	800f9b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f720:	e013      	b.n	800f74a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	885b      	ldrh	r3, [r3, #2]
 800f726:	2b02      	cmp	r3, #2
 800f728:	d10b      	bne.n	800f742 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	889b      	ldrh	r3, [r3, #4]
 800f72e:	0a1b      	lsrs	r3, r3, #8
 800f730:	b29b      	uxth	r3, r3
 800f732:	b2da      	uxtb	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 f93c 	bl	800f9b8 <USBD_CtlSendStatus>
}
 800f740:	e003      	b.n	800f74a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f742:	6839      	ldr	r1, [r7, #0]
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f000 f860 	bl	800f80a <USBD_CtlError>
}
 800f74a:	bf00      	nop
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b082      	sub	sp, #8
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
 800f75a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f762:	b2db      	uxtb	r3, r3
 800f764:	3b01      	subs	r3, #1
 800f766:	2b02      	cmp	r3, #2
 800f768:	d80b      	bhi.n	800f782 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	885b      	ldrh	r3, [r3, #2]
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d10c      	bne.n	800f78c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2200      	movs	r2, #0
 800f776:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f000 f91c 	bl	800f9b8 <USBD_CtlSendStatus>
      }
      break;
 800f780:	e004      	b.n	800f78c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 f840 	bl	800f80a <USBD_CtlError>
      break;
 800f78a:	e000      	b.n	800f78e <USBD_ClrFeature+0x3c>
      break;
 800f78c:	bf00      	nop
  }
}
 800f78e:	bf00      	nop
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b084      	sub	sp, #16
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
 800f79e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	781a      	ldrb	r2, [r3, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	781a      	ldrb	r2, [r3, #0]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f7ff fa16 	bl	800ebf2 <SWAPBYTE>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f7da:	68f8      	ldr	r0, [r7, #12]
 800f7dc:	f7ff fa09 	bl	800ebf2 <SWAPBYTE>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f7f4:	68f8      	ldr	r0, [r7, #12]
 800f7f6:	f7ff f9fc 	bl	800ebf2 <SWAPBYTE>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	80da      	strh	r2, [r3, #6]
}
 800f802:	bf00      	nop
 800f804:	3710      	adds	r7, #16
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b082      	sub	sp, #8
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
 800f812:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f814:	2180      	movs	r1, #128	@ 0x80
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f002 ff24 	bl	8012664 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f81c:	2100      	movs	r1, #0
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f002 ff20 	bl	8012664 <USBD_LL_StallEP>
}
 800f824:	bf00      	nop
 800f826:	3708      	adds	r7, #8
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f838:	2300      	movs	r3, #0
 800f83a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d042      	beq.n	800f8c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f846:	6938      	ldr	r0, [r7, #16]
 800f848:	f000 f842 	bl	800f8d0 <USBD_GetLen>
 800f84c:	4603      	mov	r3, r0
 800f84e:	3301      	adds	r3, #1
 800f850:	005b      	lsls	r3, r3, #1
 800f852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f856:	d808      	bhi.n	800f86a <USBD_GetString+0x3e>
 800f858:	6938      	ldr	r0, [r7, #16]
 800f85a:	f000 f839 	bl	800f8d0 <USBD_GetLen>
 800f85e:	4603      	mov	r3, r0
 800f860:	3301      	adds	r3, #1
 800f862:	b29b      	uxth	r3, r3
 800f864:	005b      	lsls	r3, r3, #1
 800f866:	b29a      	uxth	r2, r3
 800f868:	e001      	b.n	800f86e <USBD_GetString+0x42>
 800f86a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f872:	7dfb      	ldrb	r3, [r7, #23]
 800f874:	68ba      	ldr	r2, [r7, #8]
 800f876:	4413      	add	r3, r2
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	7812      	ldrb	r2, [r2, #0]
 800f87c:	701a      	strb	r2, [r3, #0]
  idx++;
 800f87e:	7dfb      	ldrb	r3, [r7, #23]
 800f880:	3301      	adds	r3, #1
 800f882:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f884:	7dfb      	ldrb	r3, [r7, #23]
 800f886:	68ba      	ldr	r2, [r7, #8]
 800f888:	4413      	add	r3, r2
 800f88a:	2203      	movs	r2, #3
 800f88c:	701a      	strb	r2, [r3, #0]
  idx++;
 800f88e:	7dfb      	ldrb	r3, [r7, #23]
 800f890:	3301      	adds	r3, #1
 800f892:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f894:	e013      	b.n	800f8be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	4413      	add	r3, r2
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	7812      	ldrb	r2, [r2, #0]
 800f8a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	613b      	str	r3, [r7, #16]
    idx++;
 800f8a8:	7dfb      	ldrb	r3, [r7, #23]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f8ae:	7dfb      	ldrb	r3, [r7, #23]
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800f8b8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d1e7      	bne.n	800f896 <USBD_GetString+0x6a>
 800f8c6:	e000      	b.n	800f8ca <USBD_GetString+0x9e>
    return;
 800f8c8:	bf00      	nop
  }
}
 800f8ca:	3718      	adds	r7, #24
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b085      	sub	sp, #20
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f8e0:	e005      	b.n	800f8ee <USBD_GetLen+0x1e>
  {
    len++;
 800f8e2:	7bfb      	ldrb	r3, [r7, #15]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1f5      	bne.n	800f8e2 <USBD_GetLen+0x12>
  }

  return len;
 800f8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3714      	adds	r7, #20
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr

0800f904 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2202      	movs	r2, #2
 800f914:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	68ba      	ldr	r2, [r7, #8]
 800f928:	2100      	movs	r1, #0
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	f002 ff23 	bl	8012776 <USBD_LL_Transmit>

  return USBD_OK;
 800f930:	2300      	movs	r3, #0
}
 800f932:	4618      	mov	r0, r3
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f93a:	b580      	push	{r7, lr}
 800f93c:	b084      	sub	sp, #16
 800f93e:	af00      	add	r7, sp, #0
 800f940:	60f8      	str	r0, [r7, #12]
 800f942:	60b9      	str	r1, [r7, #8]
 800f944:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	2100      	movs	r1, #0
 800f94c:	68f8      	ldr	r0, [r7, #12]
 800f94e:	f002 ff12 	bl	8012776 <USBD_LL_Transmit>

  return USBD_OK;
 800f952:	2300      	movs	r3, #0
}
 800f954:	4618      	mov	r0, r3
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	60b9      	str	r1, [r7, #8]
 800f966:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2203      	movs	r2, #3
 800f96c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	68ba      	ldr	r2, [r7, #8]
 800f984:	2100      	movs	r1, #0
 800f986:	68f8      	ldr	r0, [r7, #12]
 800f988:	f002 ff16 	bl	80127b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3710      	adds	r7, #16
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}

0800f996 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b084      	sub	sp, #16
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	60f8      	str	r0, [r7, #12]
 800f99e:	60b9      	str	r1, [r7, #8]
 800f9a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	68ba      	ldr	r2, [r7, #8]
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f002 ff05 	bl	80127b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9ae:	2300      	movs	r3, #0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3710      	adds	r7, #16
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2204      	movs	r2, #4
 800f9c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	2100      	movs	r1, #0
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f002 fed1 	bl	8012776 <USBD_LL_Transmit>

  return USBD_OK;
 800f9d4:	2300      	movs	r3, #0
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3708      	adds	r7, #8
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b082      	sub	sp, #8
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2205      	movs	r2, #5
 800f9ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f002 fedf 	bl	80127b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9fa:	2300      	movs	r3, #0
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c I2C句柄
 * @param  error 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b088      	sub	sp, #32
 800fa08:	af04      	add	r7, sp, #16
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 800fa10:	2300      	movs	r3, #0
 800fa12:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 800fa14:	2300      	movs	r3, #0
 800fa16:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 800fa18:	2364      	movs	r3, #100	@ 0x64
 800fa1a:	9302      	str	r3, [sp, #8]
 800fa1c:	2302      	movs	r3, #2
 800fa1e:	9301      	str	r3, [sp, #4]
 800fa20:	f107 030c 	add.w	r3, r7, #12
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	2301      	movs	r3, #1
 800fa28:	2200      	movs	r2, #0
 800fa2a:	2181      	movs	r1, #129	@ 0x81
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7f5 f879 	bl	8004b24 <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 800fa32:	23f4      	movs	r3, #244	@ 0xf4
 800fa34:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 800fa36:	2393      	movs	r3, #147	@ 0x93
 800fa38:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 800fa3a:	2364      	movs	r3, #100	@ 0x64
 800fa3c:	9302      	str	r3, [sp, #8]
 800fa3e:	2302      	movs	r3, #2
 800fa40:	9301      	str	r3, [sp, #4]
 800fa42:	f107 030c 	add.w	r3, r7, #12
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	2301      	movs	r3, #1
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	2181      	movs	r1, #129	@ 0x81
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7f5 f868 	bl	8004b24 <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 800fa54:	230f      	movs	r3, #15
 800fa56:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 800fa58:	78fb      	ldrb	r3, [r7, #3]
 800fa5a:	3b60      	subs	r3, #96	@ 0x60
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 800fa60:	2364      	movs	r3, #100	@ 0x64
 800fa62:	9302      	str	r3, [sp, #8]
 800fa64:	2302      	movs	r3, #2
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	f107 030c 	add.w	r3, r7, #12
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	2301      	movs	r3, #1
 800fa70:	2202      	movs	r2, #2
 800fa72:	2181      	movs	r1, #129	@ 0x81
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7f5 f855 	bl	8004b24 <HAL_I2C_Mem_Write>
}
 800fa7a:	bf00      	nop
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	0000      	movs	r0, r0
 800fa84:	0000      	movs	r0, r0
	...

0800fa88 <ina238_GetVolt>:
 * @brief  INA238读取电压
 * @param  hi2c I2C句柄
 * @retval 电压值
 */
float ina238_GetVolt(I2C_HandleTypeDef *hi2c)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b088      	sub	sp, #32
 800fa8c:	af04      	add	r7, sp, #16
 800fa8e:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float volt;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, VBUS, 1, pData, 2, 100) == HAL_OK)
 800fa90:	2364      	movs	r3, #100	@ 0x64
 800fa92:	9302      	str	r3, [sp, #8]
 800fa94:	2302      	movs	r3, #2
 800fa96:	9301      	str	r3, [sp, #4]
 800fa98:	f107 0308 	add.w	r3, r7, #8
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	2301      	movs	r3, #1
 800faa0:	2205      	movs	r2, #5
 800faa2:	2180      	movs	r1, #128	@ 0x80
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f7f5 f951 	bl	8004d4c <HAL_I2C_Mem_Read>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d137      	bne.n	800fb20 <ina238_GetVolt+0x98>
	{
		volt = pData[0] * 256 + pData[1];
 800fab0:	7a3b      	ldrb	r3, [r7, #8]
 800fab2:	021b      	lsls	r3, r3, #8
 800fab4:	7a7a      	ldrb	r2, [r7, #9]
 800fab6:	4413      	add	r3, r2
 800fab8:	ee07 3a90 	vmov	s15, r3
 800fabc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fac0:	edc7 7a03 	vstr	s15, [r7, #12]
		if (volt > 32767) // 为负数的情况
 800fac4:	edd7 7a03 	vldr	s15, [r7, #12]
 800fac8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800fb38 <ina238_GetVolt+0xb0>
 800facc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad4:	dd14      	ble.n	800fb00 <ina238_GetVolt+0x78>
			volt = (volt - 65536) * 3.125 / 1000;
 800fad6:	edd7 7a03 	vldr	s15, [r7, #12]
 800fada:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800fb3c <ina238_GetVolt+0xb4>
 800fade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fae2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fae6:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800faea:	ee27 6b06 	vmul.f64	d6, d7, d6
 800faee:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800fb30 <ina238_GetVolt+0xa8>
 800faf2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800faf6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fafa:	edc7 7a03 	vstr	s15, [r7, #12]
 800fafe:	e00f      	b.n	800fb20 <ina238_GetVolt+0x98>
		else
			volt = volt * 3.125 / 1000;
 800fb00:	edd7 7a03 	vldr	s15, [r7, #12]
 800fb04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fb08:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800fb0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fb10:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 800fb30 <ina238_GetVolt+0xa8>
 800fb14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fb18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fb1c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return volt;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	ee07 3a90 	vmov	s15, r3
}
 800fb26:	eeb0 0a67 	vmov.f32	s0, s15
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	00000000 	.word	0x00000000
 800fb34:	408f4000 	.word	0x408f4000
 800fb38:	46fffe00 	.word	0x46fffe00
 800fb3c:	47800000 	.word	0x47800000

0800fb40 <ina238_GetCurrent>:
 * @brief  INA238读取电流
 * @param  hi2c I2C句柄
 * @retval 电流值
 */
float ina238_GetCurrent(I2C_HandleTypeDef *hi2c)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b088      	sub	sp, #32
 800fb44:	af04      	add	r7, sp, #16
 800fb46:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float current;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, CURRENT, 1, pData, 2, 100) == HAL_OK)
 800fb48:	2364      	movs	r3, #100	@ 0x64
 800fb4a:	9302      	str	r3, [sp, #8]
 800fb4c:	2302      	movs	r3, #2
 800fb4e:	9301      	str	r3, [sp, #4]
 800fb50:	f107 0308 	add.w	r3, r7, #8
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	2301      	movs	r3, #1
 800fb58:	2207      	movs	r2, #7
 800fb5a:	2180      	movs	r1, #128	@ 0x80
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7f5 f8f5 	bl	8004d4c <HAL_I2C_Mem_Read>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d127      	bne.n	800fbb8 <ina238_GetCurrent+0x78>
	{
		current = pData[0] * 256 + pData[1];
 800fb68:	7a3b      	ldrb	r3, [r7, #8]
 800fb6a:	021b      	lsls	r3, r3, #8
 800fb6c:	7a7a      	ldrb	r2, [r7, #9]
 800fb6e:	4413      	add	r3, r2
 800fb70:	ee07 3a90 	vmov	s15, r3
 800fb74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb78:	edc7 7a03 	vstr	s15, [r7, #12]
		if (current > 32767)
 800fb7c:	edd7 7a03 	vldr	s15, [r7, #12]
 800fb80:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800fbc8 <ina238_GetCurrent+0x88>
 800fb84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb8c:	dd0c      	ble.n	800fba8 <ina238_GetCurrent+0x68>
			current = (current - 65536) * (8 / 32768.0);
 800fb8e:	edd7 7a03 	vldr	s15, [r7, #12]
 800fb92:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800fbcc <ina238_GetCurrent+0x8c>
 800fb96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb9a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800fbd0 <ina238_GetCurrent+0x90>
 800fb9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fba2:	edc7 7a03 	vstr	s15, [r7, #12]
 800fba6:	e007      	b.n	800fbb8 <ina238_GetCurrent+0x78>
		else
			current = current * (8 / 32768.0);
 800fba8:	edd7 7a03 	vldr	s15, [r7, #12]
 800fbac:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800fbd0 <ina238_GetCurrent+0x90>
 800fbb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbb4:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return current;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	ee07 3a90 	vmov	s15, r3
}
 800fbbe:	eeb0 0a67 	vmov.f32	s0, s15
 800fbc2:	3710      	adds	r7, #16
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	46fffe00 	.word	0x46fffe00
 800fbcc:	47800000 	.word	0x47800000
 800fbd0:	39800000 	.word	0x39800000

0800fbd4 <OLED_WR_Byte>:
		OLED_WR_Byte(0xA0, OLED_CMD);
	}
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b084      	sub	sp, #16
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	4603      	mov	r3, r0
 800fbdc:	460a      	mov	r2, r1
 800fbde:	71fb      	strb	r3, [r7, #7]
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800fbe4:	1dfb      	adds	r3, r7, #7
 800fbe6:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800fbe8:	79bb      	ldrb	r3, [r7, #6]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d005      	beq.n	800fbfa <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800fbee:	2201      	movs	r2, #1
 800fbf0:	2140      	movs	r1, #64	@ 0x40
 800fbf2:	4811      	ldr	r0, [pc, #68]	@ (800fc38 <OLED_WR_Byte+0x64>)
 800fbf4:	f7f4 fec6 	bl	8004984 <HAL_GPIO_WritePin>
 800fbf8:	e004      	b.n	800fc04 <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	2140      	movs	r1, #64	@ 0x40
 800fbfe:	480e      	ldr	r0, [pc, #56]	@ (800fc38 <OLED_WR_Byte+0x64>)
 800fc00:	f7f4 fec0 	bl	8004984 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800fc04:	2200      	movs	r2, #0
 800fc06:	2102      	movs	r1, #2
 800fc08:	480c      	ldr	r0, [pc, #48]	@ (800fc3c <OLED_WR_Byte+0x68>)
 800fc0a:	f7f4 febb 	bl	8004984 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800fc0e:	23c8      	movs	r3, #200	@ 0xc8
 800fc10:	2201      	movs	r2, #1
 800fc12:	68f9      	ldr	r1, [r7, #12]
 800fc14:	480a      	ldr	r0, [pc, #40]	@ (800fc40 <OLED_WR_Byte+0x6c>)
 800fc16:	f7fa fe29 	bl	800a86c <HAL_SPI_Transmit>

	OLED_CS_Set();
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	2102      	movs	r1, #2
 800fc1e:	4807      	ldr	r0, [pc, #28]	@ (800fc3c <OLED_WR_Byte+0x68>)
 800fc20:	f7f4 feb0 	bl	8004984 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800fc24:	2201      	movs	r2, #1
 800fc26:	2140      	movs	r1, #64	@ 0x40
 800fc28:	4803      	ldr	r0, [pc, #12]	@ (800fc38 <OLED_WR_Byte+0x64>)
 800fc2a:	f7f4 feab 	bl	8004984 <HAL_GPIO_WritePin>
}
 800fc2e:	bf00      	nop
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	58022000 	.word	0x58022000
 800fc3c:	58020400 	.word	0x58020400
 800fc40:	240009c4 	.word	0x240009c4

0800fc44 <OLED_Refresh>:
	OLED_WR_Byte(0xAF, OLED_CMD); // 关闭屏幕
}

// 更新显存到OLED
void OLED_Refresh(void)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	71fb      	strb	r3, [r7, #7]
 800fc4e:	e026      	b.n	800fc9e <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	3b50      	subs	r3, #80	@ 0x50
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	2100      	movs	r1, #0
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7ff ffbb 	bl	800fbd4 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800fc5e:	2100      	movs	r1, #0
 800fc60:	2000      	movs	r0, #0
 800fc62:	f7ff ffb7 	bl	800fbd4 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800fc66:	2100      	movs	r1, #0
 800fc68:	2010      	movs	r0, #16
 800fc6a:	f7ff ffb3 	bl	800fbd4 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800fc6e:	2300      	movs	r3, #0
 800fc70:	71bb      	strb	r3, [r7, #6]
 800fc72:	e00d      	b.n	800fc90 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800fc74:	79ba      	ldrb	r2, [r7, #6]
 800fc76:	79fb      	ldrb	r3, [r7, #7]
 800fc78:	490d      	ldr	r1, [pc, #52]	@ (800fcb0 <OLED_Refresh+0x6c>)
 800fc7a:	00d2      	lsls	r2, r2, #3
 800fc7c:	440a      	add	r2, r1
 800fc7e:	4413      	add	r3, r2
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	2101      	movs	r1, #1
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7ff ffa5 	bl	800fbd4 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800fc8a:	79bb      	ldrb	r3, [r7, #6]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	71bb      	strb	r3, [r7, #6]
 800fc90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	daed      	bge.n	800fc74 <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800fc98:	79fb      	ldrb	r3, [r7, #7]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	71fb      	strb	r3, [r7, #7]
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	2b07      	cmp	r3, #7
 800fca2:	d9d5      	bls.n	800fc50 <OLED_Refresh+0xc>
	}
}
 800fca4:	bf00      	nop
 800fca6:	bf00      	nop
 800fca8:	3708      	adds	r7, #8
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	240002f4 	.word	0x240002f4

0800fcb4 <OLED_Clear>:
// 清屏函数
void OLED_Clear(void)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800fcba:	2300      	movs	r3, #0
 800fcbc:	71fb      	strb	r3, [r7, #7]
 800fcbe:	e014      	b.n	800fcea <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	71bb      	strb	r3, [r7, #6]
 800fcc4:	e00a      	b.n	800fcdc <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800fcc6:	79ba      	ldrb	r2, [r7, #6]
 800fcc8:	79fb      	ldrb	r3, [r7, #7]
 800fcca:	490c      	ldr	r1, [pc, #48]	@ (800fcfc <OLED_Clear+0x48>)
 800fccc:	00d2      	lsls	r2, r2, #3
 800fcce:	440a      	add	r2, r1
 800fcd0:	4413      	add	r3, r2
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800fcd6:	79bb      	ldrb	r3, [r7, #6]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	71bb      	strb	r3, [r7, #6]
 800fcdc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	daf0      	bge.n	800fcc6 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800fce4:	79fb      	ldrb	r3, [r7, #7]
 800fce6:	3301      	adds	r3, #1
 800fce8:	71fb      	strb	r3, [r7, #7]
 800fcea:	79fb      	ldrb	r3, [r7, #7]
 800fcec:	2b07      	cmp	r3, #7
 800fcee:	d9e7      	bls.n	800fcc0 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800fcf0:	f7ff ffa8 	bl	800fc44 <OLED_Refresh>
}
 800fcf4:	bf00      	nop
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	240002f4 	.word	0x240002f4

0800fd00 <OLED_DrawPoint>:

// 画点
// x:0~127
// y:0~63
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b085      	sub	sp, #20
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	4603      	mov	r3, r0
 800fd08:	460a      	mov	r2, r1
 800fd0a:	71fb      	strb	r3, [r7, #7]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800fd10:	79bb      	ldrb	r3, [r7, #6]
 800fd12:	08db      	lsrs	r3, r3, #3
 800fd14:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800fd16:	79bb      	ldrb	r3, [r7, #6]
 800fd18:	f003 0307 	and.w	r3, r3, #7
 800fd1c:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800fd1e:	7bbb      	ldrb	r3, [r7, #14]
 800fd20:	2201      	movs	r2, #1
 800fd22:	fa02 f303 	lsl.w	r3, r2, r3
 800fd26:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800fd28:	79fa      	ldrb	r2, [r7, #7]
 800fd2a:	7bfb      	ldrb	r3, [r7, #15]
 800fd2c:	490a      	ldr	r1, [pc, #40]	@ (800fd58 <OLED_DrawPoint+0x58>)
 800fd2e:	00d2      	lsls	r2, r2, #3
 800fd30:	440a      	add	r2, r1
 800fd32:	4413      	add	r3, r2
 800fd34:	7818      	ldrb	r0, [r3, #0]
 800fd36:	79fa      	ldrb	r2, [r7, #7]
 800fd38:	7bfb      	ldrb	r3, [r7, #15]
 800fd3a:	7b79      	ldrb	r1, [r7, #13]
 800fd3c:	4301      	orrs	r1, r0
 800fd3e:	b2c8      	uxtb	r0, r1
 800fd40:	4905      	ldr	r1, [pc, #20]	@ (800fd58 <OLED_DrawPoint+0x58>)
 800fd42:	00d2      	lsls	r2, r2, #3
 800fd44:	440a      	add	r2, r1
 800fd46:	4413      	add	r3, r2
 800fd48:	4602      	mov	r2, r0
 800fd4a:	701a      	strb	r2, [r3, #0]
}
 800fd4c:	bf00      	nop
 800fd4e:	3714      	adds	r7, #20
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr
 800fd58:	240002f4 	.word	0x240002f4

0800fd5c <OLED_ClearPoint>:

// 清除一个点
// x:0~127
// y:0~63
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	4603      	mov	r3, r0
 800fd64:	460a      	mov	r2, r1
 800fd66:	71fb      	strb	r3, [r7, #7]
 800fd68:	4613      	mov	r3, r2
 800fd6a:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800fd6c:	79bb      	ldrb	r3, [r7, #6]
 800fd6e:	08db      	lsrs	r3, r3, #3
 800fd70:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800fd72:	79bb      	ldrb	r3, [r7, #6]
 800fd74:	f003 0307 	and.w	r3, r3, #7
 800fd78:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800fd7a:	7bbb      	ldrb	r3, [r7, #14]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd82:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800fd84:	79fa      	ldrb	r2, [r7, #7]
 800fd86:	7bfb      	ldrb	r3, [r7, #15]
 800fd88:	491b      	ldr	r1, [pc, #108]	@ (800fdf8 <OLED_ClearPoint+0x9c>)
 800fd8a:	00d2      	lsls	r2, r2, #3
 800fd8c:	440a      	add	r2, r1
 800fd8e:	4413      	add	r3, r2
 800fd90:	7819      	ldrb	r1, [r3, #0]
 800fd92:	79fa      	ldrb	r2, [r7, #7]
 800fd94:	7bfb      	ldrb	r3, [r7, #15]
 800fd96:	43c9      	mvns	r1, r1
 800fd98:	b2c8      	uxtb	r0, r1
 800fd9a:	4917      	ldr	r1, [pc, #92]	@ (800fdf8 <OLED_ClearPoint+0x9c>)
 800fd9c:	00d2      	lsls	r2, r2, #3
 800fd9e:	440a      	add	r2, r1
 800fda0:	4413      	add	r3, r2
 800fda2:	4602      	mov	r2, r0
 800fda4:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800fda6:	79fa      	ldrb	r2, [r7, #7]
 800fda8:	7bfb      	ldrb	r3, [r7, #15]
 800fdaa:	4913      	ldr	r1, [pc, #76]	@ (800fdf8 <OLED_ClearPoint+0x9c>)
 800fdac:	00d2      	lsls	r2, r2, #3
 800fdae:	440a      	add	r2, r1
 800fdb0:	4413      	add	r3, r2
 800fdb2:	7818      	ldrb	r0, [r3, #0]
 800fdb4:	79fa      	ldrb	r2, [r7, #7]
 800fdb6:	7bfb      	ldrb	r3, [r7, #15]
 800fdb8:	7b79      	ldrb	r1, [r7, #13]
 800fdba:	4301      	orrs	r1, r0
 800fdbc:	b2c8      	uxtb	r0, r1
 800fdbe:	490e      	ldr	r1, [pc, #56]	@ (800fdf8 <OLED_ClearPoint+0x9c>)
 800fdc0:	00d2      	lsls	r2, r2, #3
 800fdc2:	440a      	add	r2, r1
 800fdc4:	4413      	add	r3, r2
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800fdca:	79fa      	ldrb	r2, [r7, #7]
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	490a      	ldr	r1, [pc, #40]	@ (800fdf8 <OLED_ClearPoint+0x9c>)
 800fdd0:	00d2      	lsls	r2, r2, #3
 800fdd2:	440a      	add	r2, r1
 800fdd4:	4413      	add	r3, r2
 800fdd6:	7819      	ldrb	r1, [r3, #0]
 800fdd8:	79fa      	ldrb	r2, [r7, #7]
 800fdda:	7bfb      	ldrb	r3, [r7, #15]
 800fddc:	43c9      	mvns	r1, r1
 800fdde:	b2c8      	uxtb	r0, r1
 800fde0:	4905      	ldr	r1, [pc, #20]	@ (800fdf8 <OLED_ClearPoint+0x9c>)
 800fde2:	00d2      	lsls	r2, r2, #3
 800fde4:	440a      	add	r2, r1
 800fde6:	4413      	add	r3, r2
 800fde8:	4602      	mov	r2, r0
 800fdea:	701a      	strb	r2, [r3, #0]
}
 800fdec:	bf00      	nop
 800fdee:	3714      	adds	r7, #20
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr
 800fdf8:	240002f4 	.word	0x240002f4

0800fdfc <OLED_ShowChar>:
// x:0~127
// y:0~63
// size:选择字体 12/16/24
// 取模方式 逐列式
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800fdfc:	b590      	push	{r4, r7, lr}
 800fdfe:	b085      	sub	sp, #20
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	4604      	mov	r4, r0
 800fe04:	4608      	mov	r0, r1
 800fe06:	4611      	mov	r1, r2
 800fe08:	461a      	mov	r2, r3
 800fe0a:	4623      	mov	r3, r4
 800fe0c:	71fb      	strb	r3, [r7, #7]
 800fe0e:	4603      	mov	r3, r0
 800fe10:	71bb      	strb	r3, [r7, #6]
 800fe12:	460b      	mov	r3, r1
 800fe14:	717b      	strb	r3, [r7, #5]
 800fe16:	4613      	mov	r3, r2
 800fe18:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800fe1a:	79bb      	ldrb	r3, [r7, #6]
 800fe1c:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800fe1e:	793b      	ldrb	r3, [r7, #4]
 800fe20:	08db      	lsrs	r3, r3, #3
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	461a      	mov	r2, r3
 800fe26:	793b      	ldrb	r3, [r7, #4]
 800fe28:	f003 0307 	and.w	r3, r3, #7
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	bf14      	ite	ne
 800fe32:	2301      	movne	r3, #1
 800fe34:	2300      	moveq	r3, #0
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	4413      	add	r3, r2
 800fe3a:	b2da      	uxtb	r2, r3
 800fe3c:	793b      	ldrb	r3, [r7, #4]
 800fe3e:	085b      	lsrs	r3, r3, #1
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	fb12 f303 	smulbb	r3, r2, r3
 800fe46:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800fe48:	797b      	ldrb	r3, [r7, #5]
 800fe4a:	3b20      	subs	r3, #32
 800fe4c:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800fe4e:	2300      	movs	r3, #0
 800fe50:	73fb      	strb	r3, [r7, #15]
 800fe52:	e057      	b.n	800ff04 <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800fe54:	793b      	ldrb	r3, [r7, #4]
 800fe56:	2b0c      	cmp	r3, #12
 800fe58:	d10b      	bne.n	800fe72 <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800fe5a:	7aba      	ldrb	r2, [r7, #10]
 800fe5c:	7bf9      	ldrb	r1, [r7, #15]
 800fe5e:	482e      	ldr	r0, [pc, #184]	@ (800ff18 <OLED_ShowChar+0x11c>)
 800fe60:	4613      	mov	r3, r2
 800fe62:	005b      	lsls	r3, r3, #1
 800fe64:	4413      	add	r3, r2
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	4403      	add	r3, r0
 800fe6a:	440b      	add	r3, r1
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	737b      	strb	r3, [r7, #13]
 800fe70:	e019      	b.n	800fea6 <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800fe72:	793b      	ldrb	r3, [r7, #4]
 800fe74:	2b10      	cmp	r3, #16
 800fe76:	d108      	bne.n	800fe8a <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800fe78:	7aba      	ldrb	r2, [r7, #10]
 800fe7a:	7bfb      	ldrb	r3, [r7, #15]
 800fe7c:	4927      	ldr	r1, [pc, #156]	@ (800ff1c <OLED_ShowChar+0x120>)
 800fe7e:	0112      	lsls	r2, r2, #4
 800fe80:	440a      	add	r2, r1
 800fe82:	4413      	add	r3, r2
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	737b      	strb	r3, [r7, #13]
 800fe88:	e00d      	b.n	800fea6 <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800fe8a:	793b      	ldrb	r3, [r7, #4]
 800fe8c:	2b18      	cmp	r3, #24
 800fe8e:	d13e      	bne.n	800ff0e <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800fe90:	7aba      	ldrb	r2, [r7, #10]
 800fe92:	7bf9      	ldrb	r1, [r7, #15]
 800fe94:	4822      	ldr	r0, [pc, #136]	@ (800ff20 <OLED_ShowChar+0x124>)
 800fe96:	4613      	mov	r3, r2
 800fe98:	00db      	lsls	r3, r3, #3
 800fe9a:	4413      	add	r3, r2
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	4403      	add	r3, r0
 800fea0:	440b      	add	r3, r1
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800fea6:	2300      	movs	r3, #0
 800fea8:	73bb      	strb	r3, [r7, #14]
 800feaa:	e025      	b.n	800fef8 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800feac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	da06      	bge.n	800fec2 <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800feb4:	79ba      	ldrb	r2, [r7, #6]
 800feb6:	79fb      	ldrb	r3, [r7, #7]
 800feb8:	4611      	mov	r1, r2
 800feba:	4618      	mov	r0, r3
 800febc:	f7ff ff20 	bl	800fd00 <OLED_DrawPoint>
 800fec0:	e005      	b.n	800fece <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800fec2:	79ba      	ldrb	r2, [r7, #6]
 800fec4:	79fb      	ldrb	r3, [r7, #7]
 800fec6:	4611      	mov	r1, r2
 800fec8:	4618      	mov	r0, r3
 800feca:	f7ff ff47 	bl	800fd5c <OLED_ClearPoint>
			temp <<= 1;
 800fece:	7b7b      	ldrb	r3, [r7, #13]
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	737b      	strb	r3, [r7, #13]
			y++;
 800fed4:	79bb      	ldrb	r3, [r7, #6]
 800fed6:	3301      	adds	r3, #1
 800fed8:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800feda:	79ba      	ldrb	r2, [r7, #6]
 800fedc:	7b3b      	ldrb	r3, [r7, #12]
 800fede:	1ad2      	subs	r2, r2, r3
 800fee0:	793b      	ldrb	r3, [r7, #4]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d105      	bne.n	800fef2 <OLED_ShowChar+0xf6>
			{
				y = y0;
 800fee6:	7b3b      	ldrb	r3, [r7, #12]
 800fee8:	71bb      	strb	r3, [r7, #6]
				x++;
 800feea:	79fb      	ldrb	r3, [r7, #7]
 800feec:	3301      	adds	r3, #1
 800feee:	71fb      	strb	r3, [r7, #7]
				break;
 800fef0:	e005      	b.n	800fefe <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800fef2:	7bbb      	ldrb	r3, [r7, #14]
 800fef4:	3301      	adds	r3, #1
 800fef6:	73bb      	strb	r3, [r7, #14]
 800fef8:	7bbb      	ldrb	r3, [r7, #14]
 800fefa:	2b07      	cmp	r3, #7
 800fefc:	d9d6      	bls.n	800feac <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800fefe:	7bfb      	ldrb	r3, [r7, #15]
 800ff00:	3301      	adds	r3, #1
 800ff02:	73fb      	strb	r3, [r7, #15]
 800ff04:	7bfa      	ldrb	r2, [r7, #15]
 800ff06:	7afb      	ldrb	r3, [r7, #11]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d3a3      	bcc.n	800fe54 <OLED_ShowChar+0x58>
 800ff0c:	e000      	b.n	800ff10 <OLED_ShowChar+0x114>
			return;
 800ff0e:	bf00      	nop
			}
		}
	}
}
 800ff10:	3714      	adds	r7, #20
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd90      	pop	{r4, r7, pc}
 800ff16:	bf00      	nop
 800ff18:	08015a7c 	.word	0x08015a7c
 800ff1c:	08015ef0 	.word	0x08015ef0
 800ff20:	080164e0 	.word	0x080164e0

0800ff24 <OLED_ShowString>:
// 显示字符串
// x,y:起点坐标
// size1:字体大小
//*chr:字符串起始地址
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	603a      	str	r2, [r7, #0]
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	4603      	mov	r3, r0
 800ff30:	71fb      	strb	r3, [r7, #7]
 800ff32:	460b      	mov	r3, r1
 800ff34:	71bb      	strb	r3, [r7, #6]
 800ff36:	4613      	mov	r3, r2
 800ff38:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800ff3a:	e01b      	b.n	800ff74 <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	781a      	ldrb	r2, [r3, #0]
 800ff40:	797b      	ldrb	r3, [r7, #5]
 800ff42:	79b9      	ldrb	r1, [r7, #6]
 800ff44:	79f8      	ldrb	r0, [r7, #7]
 800ff46:	f7ff ff59 	bl	800fdfc <OLED_ShowChar>
		x += size1 / 2;
 800ff4a:	797b      	ldrb	r3, [r7, #5]
 800ff4c:	085b      	lsrs	r3, r3, #1
 800ff4e:	b2da      	uxtb	r2, r3
 800ff50:	79fb      	ldrb	r3, [r7, #7]
 800ff52:	4413      	add	r3, r2
 800ff54:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800ff56:	79fa      	ldrb	r2, [r7, #7]
 800ff58:	797b      	ldrb	r3, [r7, #5]
 800ff5a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	dd05      	ble.n	800ff6e <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800ff62:	2302      	movs	r3, #2
 800ff64:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800ff66:	79ba      	ldrb	r2, [r7, #6]
 800ff68:	797b      	ldrb	r3, [r7, #5]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	3301      	adds	r3, #1
 800ff72:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	2b1f      	cmp	r3, #31
 800ff7a:	d903      	bls.n	800ff84 <OLED_ShowString+0x60>
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	2b7e      	cmp	r3, #126	@ 0x7e
 800ff82:	d9db      	bls.n	800ff3c <OLED_ShowString+0x18>
	}
}
 800ff84:	bf00      	nop
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <OLED_Init>:
	OLED_ShowString(2, 2, str, 12);
	OLED_Refresh();
}
// OLED的初始化
void OLED_Init(void)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800ff90:	2200      	movs	r2, #0
 800ff92:	2120      	movs	r1, #32
 800ff94:	483f      	ldr	r0, [pc, #252]	@ (8010094 <OLED_Init+0x108>)
 800ff96:	f7f4 fcf5 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800ff9a:	20c8      	movs	r0, #200	@ 0xc8
 800ff9c:	f7f0 fa7e 	bl	800049c <HAL_Delay>
	OLED_RES_Set();
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	2120      	movs	r1, #32
 800ffa4:	483b      	ldr	r0, [pc, #236]	@ (8010094 <OLED_Init+0x108>)
 800ffa6:	f7f4 fced 	bl	8004984 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800ffaa:	2100      	movs	r1, #0
 800ffac:	20ae      	movs	r0, #174	@ 0xae
 800ffae:	f7ff fe11 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800ffb2:	2100      	movs	r1, #0
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	f7ff fe0d 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800ffba:	2100      	movs	r1, #0
 800ffbc:	2010      	movs	r0, #16
 800ffbe:	f7ff fe09 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	2040      	movs	r0, #64	@ 0x40
 800ffc6:	f7ff fe05 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800ffca:	2100      	movs	r1, #0
 800ffcc:	2081      	movs	r0, #129	@ 0x81
 800ffce:	f7ff fe01 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	20cf      	movs	r0, #207	@ 0xcf
 800ffd6:	f7ff fdfd 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800ffda:	2100      	movs	r1, #0
 800ffdc:	20a1      	movs	r0, #161	@ 0xa1
 800ffde:	f7ff fdf9 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800ffe2:	2100      	movs	r1, #0
 800ffe4:	20c8      	movs	r0, #200	@ 0xc8
 800ffe6:	f7ff fdf5 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800ffea:	2100      	movs	r1, #0
 800ffec:	20a6      	movs	r0, #166	@ 0xa6
 800ffee:	f7ff fdf1 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800fff2:	2100      	movs	r1, #0
 800fff4:	20a8      	movs	r0, #168	@ 0xa8
 800fff6:	f7ff fded 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800fffa:	2100      	movs	r1, #0
 800fffc:	203f      	movs	r0, #63	@ 0x3f
 800fffe:	f7ff fde9 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8010002:	2100      	movs	r1, #0
 8010004:	20d3      	movs	r0, #211	@ 0xd3
 8010006:	f7ff fde5 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 801000a:	2100      	movs	r1, #0
 801000c:	2000      	movs	r0, #0
 801000e:	f7ff fde1 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8010012:	2100      	movs	r1, #0
 8010014:	20d5      	movs	r0, #213	@ 0xd5
 8010016:	f7ff fddd 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 801001a:	2100      	movs	r1, #0
 801001c:	2080      	movs	r0, #128	@ 0x80
 801001e:	f7ff fdd9 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8010022:	2100      	movs	r1, #0
 8010024:	20d9      	movs	r0, #217	@ 0xd9
 8010026:	f7ff fdd5 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 801002a:	2100      	movs	r1, #0
 801002c:	20f1      	movs	r0, #241	@ 0xf1
 801002e:	f7ff fdd1 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8010032:	2100      	movs	r1, #0
 8010034:	20da      	movs	r0, #218	@ 0xda
 8010036:	f7ff fdcd 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 801003a:	2100      	movs	r1, #0
 801003c:	2012      	movs	r0, #18
 801003e:	f7ff fdc9 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8010042:	2100      	movs	r1, #0
 8010044:	20db      	movs	r0, #219	@ 0xdb
 8010046:	f7ff fdc5 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 801004a:	2100      	movs	r1, #0
 801004c:	2040      	movs	r0, #64	@ 0x40
 801004e:	f7ff fdc1 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8010052:	2100      	movs	r1, #0
 8010054:	2020      	movs	r0, #32
 8010056:	f7ff fdbd 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 801005a:	2100      	movs	r1, #0
 801005c:	2002      	movs	r0, #2
 801005e:	f7ff fdb9 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8010062:	2100      	movs	r1, #0
 8010064:	208d      	movs	r0, #141	@ 0x8d
 8010066:	f7ff fdb5 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 801006a:	2100      	movs	r1, #0
 801006c:	2014      	movs	r0, #20
 801006e:	f7ff fdb1 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8010072:	2100      	movs	r1, #0
 8010074:	20a4      	movs	r0, #164	@ 0xa4
 8010076:	f7ff fdad 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 801007a:	2100      	movs	r1, #0
 801007c:	20a6      	movs	r0, #166	@ 0xa6
 801007e:	f7ff fda9 	bl	800fbd4 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 8010082:	2100      	movs	r1, #0
 8010084:	20af      	movs	r0, #175	@ 0xaf
 8010086:	f7ff fda5 	bl	800fbd4 <OLED_WR_Byte>
	OLED_Clear();
 801008a:	f7ff fe13 	bl	800fcb4 <OLED_Clear>
}
 801008e:	bf00      	nop
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	58020800 	.word	0x58020800

08010098 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 8010098:	b480      	push	{r7}
 801009a:	b087      	sub	sp, #28
 801009c:	af00      	add	r7, sp, #0
 801009e:	6178      	str	r0, [r7, #20]
 80100a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80100a4:	edc7 0a03 	vstr	s1, [r7, #12]
 80100a8:	ed87 1a02 	vstr	s2, [r7, #8]
 80100ac:	edc7 1a01 	vstr	s3, [r7, #4]
 80100b0:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	693a      	ldr	r2, [r7, #16]
 80100b8:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	609a      	str	r2, [r3, #8]
	pid->resultMax = max;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	687a      	ldr	r2, [r7, #4]
 80100ca:	61da      	str	r2, [r3, #28]
	pid->resultMin = min;
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	683a      	ldr	r2, [r7, #0]
 80100d0:	621a      	str	r2, [r3, #32]
	pid->bias[0] = 0;
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	f04f 0200 	mov.w	r2, #0
 80100d8:	60da      	str	r2, [r3, #12]
	pid->bias[1] = 0;
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	f04f 0200 	mov.w	r2, #0
 80100e0:	611a      	str	r2, [r3, #16]
	pid->bias[2] = 0;
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	f04f 0200 	mov.w	r2, #0
 80100e8:	615a      	str	r2, [r3, #20]
}
 80100ea:	bf00      	nop
 80100ec:	371c      	adds	r7, #28
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr

080100f6 <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
float pid(PID *pid, float Measured, float Target)
{
 80100f6:	b480      	push	{r7}
 80100f8:	b085      	sub	sp, #20
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	60f8      	str	r0, [r7, #12]
 80100fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8010102:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->bias[0] = Target - Measured;
 8010106:	ed97 7a01 	vldr	s14, [r7, #4]
 801010a:	edd7 7a02 	vldr	s15, [r7, #8]
 801010e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->result += pid->kp * (pid->bias[0] - pid->bias[1]) + pid->ki * pid->bias[0] + pid->kd * (pid->bias[0] - 2 * pid->bias[1] + pid->bias[2]);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	ed93 7a06 	vldr	s14, [r3, #24]
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	edd3 6a00 	vldr	s13, [r3]
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	ed93 6a03 	vldr	s12, [r3, #12]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	edd3 7a04 	vldr	s15, [r3, #16]
 8010130:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010134:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	ed93 6a01 	vldr	s12, [r3, #4]
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	edd3 7a03 	vldr	s15, [r3, #12]
 8010144:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010148:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	ed93 6a02 	vldr	s12, [r3, #8]
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	edd3 5a03 	vldr	s11, [r3, #12]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	edd3 7a04 	vldr	s15, [r3, #16]
 801015e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010162:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	edd3 7a05 	vldr	s15, [r3, #20]
 801016c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8010170:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010178:	ee77 7a27 	vadd.f32	s15, s14, s15
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->bias[2] = pid->bias[1];
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	691a      	ldr	r2, [r3, #16]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	615a      	str	r2, [r3, #20]
	pid->bias[1] = pid->bias[0];
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	68da      	ldr	r2, [r3, #12]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->result > pid->resultMax)
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	ed93 7a06 	vldr	s14, [r3, #24]
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	edd3 7a07 	vldr	s15, [r3, #28]
 801019e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80101a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a6:	dd04      	ble.n	80101b2 <pid+0xbc>
		pid->result = pid->resultMax;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	69da      	ldr	r2, [r3, #28]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	619a      	str	r2, [r3, #24]
 80101b0:	e00e      	b.n	80101d0 <pid+0xda>
	else if (pid->result < pid->resultMin)
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80101be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80101c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c6:	d503      	bpl.n	80101d0 <pid+0xda>
		pid->result = pid->resultMin;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6a1a      	ldr	r2, [r3, #32]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	619a      	str	r2, [r3, #24]

	return pid->result;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	699b      	ldr	r3, [r3, #24]
 80101d4:	ee07 3a90 	vmov	s15, r3
}
 80101d8:	eeb0 0a67 	vmov.f32	s0, s15
 80101dc:	3714      	adds	r7, #20
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
	...

080101e8 <pll_Init>:
 * @param config 配置指针
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80101f6:	4613      	mov	r3, r2
 80101f8:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f04f 0200 	mov.w	r2, #0
 8010200:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f04f 0200 	mov.w	r2, #0
 8010208:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f04f 0200 	mov.w	r2, #0
 8010210:	609a      	str	r2, [r3, #8]

    signal->sogi_a_1 = 0.f;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f04f 0200 	mov.w	r2, #0
 8010218:	611a      	str	r2, [r3, #16]
    signal->sogi_a_2 = 0.f;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f04f 0200 	mov.w	r2, #0
 8010220:	615a      	str	r2, [r3, #20]
    signal->sogi_b_1 = 0.f;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f04f 0200 	mov.w	r2, #0
 8010228:	61da      	str	r2, [r3, #28]
    signal->sogi_b_2 = 0.f;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	f04f 0200 	mov.w	r2, #0
 8010230:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f04f 0200 	mov.w	r2, #0
 8010238:	635a      	str	r2, [r3, #52]	@ 0x34

    config->omiga = 2 * PI * f; // f典型值50
 801023a:	edd7 7a01 	vldr	s15, [r7, #4]
 801023e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80103a4 <pll_Init+0x1bc>
 8010242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 801024c:	887b      	ldrh	r3, [r7, #2]
 801024e:	ee07 3a90 	vmov	s15, r3
 8010252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801025a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	4a50      	ldr	r2, [pc, #320]	@ (80103a8 <pll_Init+0x1c0>)
 8010268:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	f04f 0200 	mov.w	r2, #0
 8010270:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	edd3 7a00 	vldr	s15, [r3]
 8010278:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801027c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	edd3 7a01 	vldr	s15, [r3, #4]
 8010286:	ee67 7a27 	vmul.f32	s15, s14, s15
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	edd3 7a02 	vldr	s15, [r3, #8]
 8010296:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	edd3 7a00 	vldr	s15, [r3]
 80102a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80102aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	ed93 7a00 	vldr	s14, [r3]
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80102c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	edd3 7a00 	vldr	s15, [r3]
 80102ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80102d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80102f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102f4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80102f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801030c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010310:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8010314:	ee77 6a67 	vsub.f32	s13, s14, s15
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010328:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801032c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010346:	ee77 7a67 	vsub.f32	s15, s14, s15
 801034a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801034e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801035e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010362:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8010366:	ee37 7a87 	vadd.f32	s14, s15, s14
 801036a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	4a0d      	ldr	r2, [pc, #52]	@ (80103ac <pll_Init+0x1c4>)
 8010378:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	4a0c      	ldr	r2, [pc, #48]	@ (80103b0 <pll_Init+0x1c8>)
 801037e:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	f04f 0200 	mov.w	r2, #0
 8010386:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	f04f 0200 	mov.w	r2, #0
 801038e:	641a      	str	r2, [r3, #64]	@ 0x40
    signal->pid_out = 0.f;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f04f 0200 	mov.w	r2, #0
 8010396:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8010398:	bf00      	nop
 801039a:	3714      	adds	r7, #20
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	40c90fdb 	.word	0x40c90fdb
 80103a8:	3fb4fdf4 	.word	0x3fb4fdf4
 80103ac:	428d78c3 	.word	0x428d78c3
 80103b0:	46758fb9 	.word	0x46758fb9
 80103b4:	00000000 	.word	0x00000000

080103b8 <pll_Control>:
 * @param signal_In 信号指针
 * @param config 配置指针
 * @param signal_Target 目标信号指针
 */
void pll_Control(pll_Signal *signal_In, pll_Config *config, pll_Signal *signal_Target)
{
 80103b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103bc:	ed2d 8b02 	vpush	{d8}
 80103c0:	b090      	sub	sp, #64	@ 0x40
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	60f8      	str	r0, [r7, #12]
 80103c6:	60b9      	str	r1, [r7, #8]
 80103c8:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_In);
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f000 f934 	bl	8010638 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_In->sogi_a_0, signal_In->sogi_b_0 / 382 * 3, &signal_In->park_d, &signal_In->park_q, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	68de      	ldr	r6, [r3, #12]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	ed93 7a06 	vldr	s14, [r3, #24]
 80103da:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8010578 <pll_Control+0x1c0>
 80103de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80103e2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80103e6:	ee27 8a87 	vmul.f32	s16, s15, s14
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80103fc:	eeb0 0a67 	vmov.f32	s0, s15
 8010400:	f002 fb52 	bl	8012aa8 <arm_sin_f32>
 8010404:	eef0 8a40 	vmov.f32	s17, s0
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801040e:	eeb0 0a67 	vmov.f32	s0, s15
 8010412:	f002 fb8f 	bl	8012b34 <arm_cos_f32>
 8010416:	eef0 7a40 	vmov.f32	s15, s0
 801041a:	627e      	str	r6, [r7, #36]	@ 0x24
 801041c:	ed87 8a08 	vstr	s16, [r7, #32]
 8010420:	61fd      	str	r5, [r7, #28]
 8010422:	61bc      	str	r4, [r7, #24]
 8010424:	edc7 8a05 	vstr	s17, [r7, #20]
 8010428:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 801042c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8010430:	edd7 7a04 	vldr	s15, [r7, #16]
 8010434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010438:	edd7 6a08 	vldr	s13, [r7, #32]
 801043c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 801044e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010452:	eeb1 7a67 	vneg.f32	s14, s15
 8010456:	edd7 7a05 	vldr	s15, [r7, #20]
 801045a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801045e:	edd7 6a08 	vldr	s13, [r7, #32]
 8010462:	edd7 7a04 	vldr	s15, [r7, #16]
 8010466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801046a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	edc3 7a00 	vstr	s15, [r3]
  }
 8010474:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_In, config);
 8010476:	68b9      	ldr	r1, [r7, #8]
 8010478:	68f8      	ldr	r0, [r7, #12]
 801047a:	f000 f87f 	bl	801057c <pll_Pid>
    // 更新theta
    signal_In->theta += (signal_In->pid_out + config->omiga) * config->Ts;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	edd3 7a00 	vldr	s15, [r3]
 8010490:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	edd3 7a01 	vldr	s15, [r3, #4]
 801049a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801049e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_In->theta = (float)fmod(signal_In->theta, 2 * PI);
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80104ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80104b2:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 8010570 <pll_Control+0x1b8>
 80104b6:	eeb0 0b47 	vmov.f64	d0, d7
 80104ba:	f005 f935 	bl	8015728 <fmod>
 80104be:	eeb0 7b40 	vmov.f64	d7, d0
 80104c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 反park变换
    arm_inv_park_f32(signal_In->park_d, signal_In->park_q, &signal_In->park_inv_a, &signal_In->park_inv_b, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f103 052c 	add.w	r5, r3, #44	@ 0x2c
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80104e8:	eeb0 0a67 	vmov.f32	s0, s15
 80104ec:	f002 fadc 	bl	8012aa8 <arm_sin_f32>
 80104f0:	eeb0 8a40 	vmov.f32	s16, s0
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80104fa:	eeb0 0a67 	vmov.f32	s0, s15
 80104fe:	f002 fb19 	bl	8012b34 <arm_cos_f32>
 8010502:	eef0 7a40 	vmov.f32	s15, s0
 8010506:	f8c7 803c 	str.w	r8, [r7, #60]	@ 0x3c
 801050a:	63be      	str	r6, [r7, #56]	@ 0x38
 801050c:	637d      	str	r5, [r7, #52]	@ 0x34
 801050e:	633c      	str	r4, [r7, #48]	@ 0x30
 8010510:	ed87 8a0b 	vstr	s16, [r7, #44]	@ 0x2c
 8010514:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 8010518:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801051c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010524:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8010528:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801052c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010536:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 801053a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801053e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010546:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 801054a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801054e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010558:	edc3 7a00 	vstr	s15, [r3]
  }
 801055c:	bf00      	nop
}
 801055e:	bf00      	nop
 8010560:	3740      	adds	r7, #64	@ 0x40
 8010562:	46bd      	mov	sp, r7
 8010564:	ecbd 8b02 	vpop	{d8}
 8010568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801056c:	f3af 8000 	nop.w
 8010570:	60000000 	.word	0x60000000
 8010574:	401921fb 	.word	0x401921fb
 8010578:	43bf0000 	.word	0x43bf0000

0801057c <pll_Pid>:
 * @brief PI控制器
 * @param signal 信号指针
 * @param config 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 801057c:	b480      	push	{r7}
 801057e:	b083      	sub	sp, #12
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	edd3 7a03 	vldr	s15, [r3, #12]
 8010592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->pid_out += config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	edd3 6a04 	vldr	s13, [r3, #16]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80105b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80105b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	ed93 6a05 	vldr	s12, [r3, #20]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80105c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80105cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80105d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    signal->pid_err[1] = signal->pid_err[0];
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	641a      	str	r2, [r3, #64]	@ 0x40
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80105e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8010628 <pll_Pid+0xac>
 80105ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80105f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105f4:	dd03      	ble.n	80105fe <pll_Pid+0x82>
        signal->pid_out = 50 * PI;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4a0c      	ldr	r2, [pc, #48]	@ (801062c <pll_Pid+0xb0>)
 80105fa:	639a      	str	r2, [r3, #56]	@ 0x38
    else if (signal->pid_out < -50 * PI)
        signal->pid_out = -50 * PI;
}
 80105fc:	e00d      	b.n	801061a <pll_Pid+0x9e>
    else if (signal->pid_out < -50 * PI)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8010604:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8010630 <pll_Pid+0xb4>
 8010608:	eef4 7ac7 	vcmpe.f32	s15, s14
 801060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010610:	d400      	bmi.n	8010614 <pll_Pid+0x98>
}
 8010612:	e002      	b.n	801061a <pll_Pid+0x9e>
        signal->pid_out = -50 * PI;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	4a07      	ldr	r2, [pc, #28]	@ (8010634 <pll_Pid+0xb8>)
 8010618:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801061a:	bf00      	nop
 801061c:	370c      	adds	r7, #12
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	431d1463 	.word	0x431d1463
 801062c:	431d1463 	.word	0x431d1463
 8010630:	c31d1463 	.word	0xc31d1463
 8010634:	c31d1463 	.word	0xc31d1463

08010638 <pll_Sogi>:
/**
 * @brief Sogi变换
 * @param signal 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 8010638:	b480      	push	{r7}
 801063a:	b083      	sub	sp, #12
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
    signal->sogi_a_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_a_1 + signal->a2 * signal->sogi_a_2;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	edd3 7a00 	vldr	s15, [r3]
 801064c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	edd3 7a02 	vldr	s15, [r3, #8]
 801065c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	edd3 7a04 	vldr	s15, [r3, #16]
 8010670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	edd3 7a05 	vldr	s15, [r3, #20]
 8010684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010688:	ee77 7a27 	vadd.f32	s15, s14, s15
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_b_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_b_1 + signal->a2 * signal->sogi_b_2;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	edd3 7a00 	vldr	s15, [r3]
 801069e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80106a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80106b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80106c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80106da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80106ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	605a      	str	r2, [r3, #4]
    signal->sogi_a_2 = signal->sogi_a_1;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	691a      	ldr	r2, [r3, #16]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	615a      	str	r2, [r3, #20]
    signal->sogi_a_1 = signal->sogi_a_0;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	68da      	ldr	r2, [r3, #12]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	611a      	str	r2, [r3, #16]
    signal->sogi_b_2 = signal->sogi_b_1;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	69da      	ldr	r2, [r3, #28]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	621a      	str	r2, [r3, #32]
    signal->sogi_b_1 = signal->sogi_b_0;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	699a      	ldr	r2, [r3, #24]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	61da      	str	r2, [r3, #28]
}
 801072c:	bf00      	nop
 801072e:	370c      	adds	r7, #12
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b08a      	sub	sp, #40	@ 0x28
 801073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 801073e:	f107 031c 	add.w	r3, r7, #28
 8010742:	2200      	movs	r2, #0
 8010744:	601a      	str	r2, [r3, #0]
 8010746:	605a      	str	r2, [r3, #4]
 8010748:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 801074a:	463b      	mov	r3, r7
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
 8010750:	605a      	str	r2, [r3, #4]
 8010752:	609a      	str	r2, [r3, #8]
 8010754:	60da      	str	r2, [r3, #12]
 8010756:	611a      	str	r2, [r3, #16]
 8010758:	615a      	str	r2, [r3, #20]
 801075a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 801075c:	4b3d      	ldr	r3, [pc, #244]	@ (8010854 <MX_ADC1_Init+0x11c>)
 801075e:	4a3e      	ldr	r2, [pc, #248]	@ (8010858 <MX_ADC1_Init+0x120>)
 8010760:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8010762:	4b3c      	ldr	r3, [pc, #240]	@ (8010854 <MX_ADC1_Init+0x11c>)
 8010764:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 801076a:	4b3a      	ldr	r3, [pc, #232]	@ (8010854 <MX_ADC1_Init+0x11c>)
 801076c:	2200      	movs	r2, #0
 801076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8010770:	4b38      	ldr	r3, [pc, #224]	@ (8010854 <MX_ADC1_Init+0x11c>)
 8010772:	2201      	movs	r2, #1
 8010774:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010776:	4b37      	ldr	r3, [pc, #220]	@ (8010854 <MX_ADC1_Init+0x11c>)
 8010778:	2208      	movs	r2, #8
 801077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 801077c:	4b35      	ldr	r3, [pc, #212]	@ (8010854 <MX_ADC1_Init+0x11c>)
 801077e:	2200      	movs	r2, #0
 8010780:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8010782:	4b34      	ldr	r3, [pc, #208]	@ (8010854 <MX_ADC1_Init+0x11c>)
 8010784:	2200      	movs	r2, #0
 8010786:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8010788:	4b32      	ldr	r3, [pc, #200]	@ (8010854 <MX_ADC1_Init+0x11c>)
 801078a:	2202      	movs	r2, #2
 801078c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801078e:	4b31      	ldr	r3, [pc, #196]	@ (8010854 <MX_ADC1_Init+0x11c>)
 8010790:	2200      	movs	r2, #0
 8010792:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010794:	4b2f      	ldr	r3, [pc, #188]	@ (8010854 <MX_ADC1_Init+0x11c>)
 8010796:	2200      	movs	r2, #0
 8010798:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801079a:	4b2e      	ldr	r3, [pc, #184]	@ (8010854 <MX_ADC1_Init+0x11c>)
 801079c:	2200      	movs	r2, #0
 801079e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80107a0:	4b2c      	ldr	r3, [pc, #176]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107a2:	2203      	movs	r2, #3
 80107a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80107a6:	4b2b      	ldr	r3, [pc, #172]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80107ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80107ae:	4b29      	ldr	r3, [pc, #164]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107b0:	2200      	movs	r2, #0
 80107b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80107b4:	4b27      	ldr	r3, [pc, #156]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107b6:	2201      	movs	r2, #1
 80107b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 80107bc:	4b25      	ldr	r3, [pc, #148]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107be:	2204      	movs	r2, #4
 80107c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80107c2:	4b24      	ldr	r3, [pc, #144]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107c4:	2240      	movs	r2, #64	@ 0x40
 80107c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80107c8:	4b22      	ldr	r3, [pc, #136]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107ca:	2200      	movs	r2, #0
 80107cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80107ce:	4b21      	ldr	r3, [pc, #132]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107d0:	2201      	movs	r2, #1
 80107d2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80107d4:	481f      	ldr	r0, [pc, #124]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107d6:	f7f0 f89f 	bl	8000918 <HAL_ADC_Init>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d001      	beq.n	80107e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80107e0:	f000 ffbe 	bl	8011760 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80107e4:	2300      	movs	r3, #0
 80107e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80107e8:	f107 031c 	add.w	r3, r7, #28
 80107ec:	4619      	mov	r1, r3
 80107ee:	4819      	ldr	r0, [pc, #100]	@ (8010854 <MX_ADC1_Init+0x11c>)
 80107f0:	f7f1 f9ba 	bl	8001b68 <HAL_ADCEx_MultiModeConfigChannel>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80107fa:	f000 ffb1 	bl	8011760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80107fe:	4b17      	ldr	r3, [pc, #92]	@ (801085c <MX_ADC1_Init+0x124>)
 8010800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010802:	2306      	movs	r3, #6
 8010804:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8010806:	2305      	movs	r3, #5
 8010808:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801080a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 801080e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010810:	2304      	movs	r3, #4
 8010812:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8010814:	2300      	movs	r3, #0
 8010816:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8010818:	2300      	movs	r3, #0
 801081a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801081c:	463b      	mov	r3, r7
 801081e:	4619      	mov	r1, r3
 8010820:	480c      	ldr	r0, [pc, #48]	@ (8010854 <MX_ADC1_Init+0x11c>)
 8010822:	f7f0 fafd 	bl	8000e20 <HAL_ADC_ConfigChannel>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d001      	beq.n	8010830 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 801082c:	f000 ff98 	bl	8011760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8010830:	4b0b      	ldr	r3, [pc, #44]	@ (8010860 <MX_ADC1_Init+0x128>)
 8010832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8010834:	230c      	movs	r3, #12
 8010836:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010838:	463b      	mov	r3, r7
 801083a:	4619      	mov	r1, r3
 801083c:	4805      	ldr	r0, [pc, #20]	@ (8010854 <MX_ADC1_Init+0x11c>)
 801083e:	f7f0 faef 	bl	8000e20 <HAL_ADC_ConfigChannel>
 8010842:	4603      	mov	r3, r0
 8010844:	2b00      	cmp	r3, #0
 8010846:	d001      	beq.n	801084c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8010848:	f000 ff8a 	bl	8011760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801084c:	bf00      	nop
 801084e:	3728      	adds	r7, #40	@ 0x28
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	24000774 	.word	0x24000774
 8010858:	40022000 	.word	0x40022000
 801085c:	10c00010 	.word	0x10c00010
 8010860:	0c900008 	.word	0x0c900008

08010864 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b0bc      	sub	sp, #240	@ 0xf0
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801086c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8010870:	2200      	movs	r2, #0
 8010872:	601a      	str	r2, [r3, #0]
 8010874:	605a      	str	r2, [r3, #4]
 8010876:	609a      	str	r2, [r3, #8]
 8010878:	60da      	str	r2, [r3, #12]
 801087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801087c:	f107 0318 	add.w	r3, r7, #24
 8010880:	22c0      	movs	r2, #192	@ 0xc0
 8010882:	2100      	movs	r1, #0
 8010884:	4618      	mov	r0, r3
 8010886:	f002 ffb0 	bl	80137ea <memset>
  if(adcHandle->Instance==ADC1)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4a54      	ldr	r2, [pc, #336]	@ (80109e0 <HAL_ADC_MspInit+0x17c>)
 8010890:	4293      	cmp	r3, r2
 8010892:	f040 80a0 	bne.w	80109d6 <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8010896:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 801089a:	f04f 0300 	mov.w	r3, #0
 801089e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80108a2:	2319      	movs	r3, #25
 80108a4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80108a6:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80108aa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 80108ac:	2307      	movs	r3, #7
 80108ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80108b0:	2302      	movs	r3, #2
 80108b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80108b4:	2302      	movs	r3, #2
 80108b6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80108b8:	2300      	movs	r3, #0
 80108ba:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80108bc:	2300      	movs	r3, #0
 80108be:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80108c0:	2300      	movs	r3, #0
 80108c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80108c4:	2300      	movs	r3, #0
 80108c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80108ca:	f107 0318 	add.w	r3, r7, #24
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7f7 f9aa 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 80108d4:	4603      	mov	r3, r0
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d001      	beq.n	80108de <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80108da:	f000 ff41 	bl	8011760 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80108de:	4b41      	ldr	r3, [pc, #260]	@ (80109e4 <HAL_ADC_MspInit+0x180>)
 80108e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80108e4:	4a3f      	ldr	r2, [pc, #252]	@ (80109e4 <HAL_ADC_MspInit+0x180>)
 80108e6:	f043 0320 	orr.w	r3, r3, #32
 80108ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80108ee:	4b3d      	ldr	r3, [pc, #244]	@ (80109e4 <HAL_ADC_MspInit+0x180>)
 80108f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80108f4:	f003 0320 	and.w	r3, r3, #32
 80108f8:	617b      	str	r3, [r7, #20]
 80108fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80108fc:	4b39      	ldr	r3, [pc, #228]	@ (80109e4 <HAL_ADC_MspInit+0x180>)
 80108fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010902:	4a38      	ldr	r2, [pc, #224]	@ (80109e4 <HAL_ADC_MspInit+0x180>)
 8010904:	f043 0301 	orr.w	r3, r3, #1
 8010908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801090c:	4b35      	ldr	r3, [pc, #212]	@ (80109e4 <HAL_ADC_MspInit+0x180>)
 801090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010912:	f003 0301 	and.w	r3, r3, #1
 8010916:	613b      	str	r3, [r7, #16]
 8010918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801091a:	4b32      	ldr	r3, [pc, #200]	@ (80109e4 <HAL_ADC_MspInit+0x180>)
 801091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010920:	4a30      	ldr	r2, [pc, #192]	@ (80109e4 <HAL_ADC_MspInit+0x180>)
 8010922:	f043 0304 	orr.w	r3, r3, #4
 8010926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801092a:	4b2e      	ldr	r3, [pc, #184]	@ (80109e4 <HAL_ADC_MspInit+0x180>)
 801092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010930:	f003 0304 	and.w	r3, r3, #4
 8010934:	60fb      	str	r3, [r7, #12]
 8010936:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8010938:	2340      	movs	r3, #64	@ 0x40
 801093a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801093e:	2303      	movs	r3, #3
 8010940:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010944:	2300      	movs	r3, #0
 8010946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801094a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 801094e:	4619      	mov	r1, r3
 8010950:	4825      	ldr	r0, [pc, #148]	@ (80109e8 <HAL_ADC_MspInit+0x184>)
 8010952:	f7f3 fe67 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8010956:	2310      	movs	r3, #16
 8010958:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801095c:	2303      	movs	r3, #3
 801095e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010962:	2300      	movs	r3, #0
 8010964:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010968:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 801096c:	4619      	mov	r1, r3
 801096e:	481f      	ldr	r0, [pc, #124]	@ (80109ec <HAL_ADC_MspInit+0x188>)
 8010970:	f7f3 fe58 	bl	8004624 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8010974:	4b1e      	ldr	r3, [pc, #120]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 8010976:	4a1f      	ldr	r2, [pc, #124]	@ (80109f4 <HAL_ADC_MspInit+0x190>)
 8010978:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 801097a:	4b1d      	ldr	r3, [pc, #116]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 801097c:	2209      	movs	r2, #9
 801097e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010980:	4b1b      	ldr	r3, [pc, #108]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 8010982:	2200      	movs	r2, #0
 8010984:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010986:	4b1a      	ldr	r3, [pc, #104]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 8010988:	2200      	movs	r2, #0
 801098a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801098c:	4b18      	ldr	r3, [pc, #96]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 801098e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010992:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8010994:	4b16      	ldr	r3, [pc, #88]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 8010996:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801099a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801099c:	4b14      	ldr	r3, [pc, #80]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 801099e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80109a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80109a4:	4b12      	ldr	r3, [pc, #72]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 80109a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80109aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80109ac:	4b10      	ldr	r3, [pc, #64]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 80109ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80109b2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80109b4:	4b0e      	ldr	r3, [pc, #56]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80109ba:	480d      	ldr	r0, [pc, #52]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 80109bc:	f7f1 fd5a 	bl	8002474 <HAL_DMA_Init>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 80109c6:	f000 fecb 	bl	8011760 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4a08      	ldr	r2, [pc, #32]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 80109ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80109d0:	4a07      	ldr	r2, [pc, #28]	@ (80109f0 <HAL_ADC_MspInit+0x18c>)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80109d6:	bf00      	nop
 80109d8:	37f0      	adds	r7, #240	@ 0xf0
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
 80109de:	bf00      	nop
 80109e0:	40022000 	.word	0x40022000
 80109e4:	58024400 	.word	0x58024400
 80109e8:	58020000 	.word	0x58020000
 80109ec:	58020800 	.word	0x58020800
 80109f0:	240007d8 	.word	0x240007d8
 80109f4:	40020010 	.word	0x40020010

080109f8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b08a      	sub	sp, #40	@ 0x28
 80109fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80109fe:	1d3b      	adds	r3, r7, #4
 8010a00:	2224      	movs	r2, #36	@ 0x24
 8010a02:	2100      	movs	r1, #0
 8010a04:	4618      	mov	r0, r3
 8010a06:	f002 fef0 	bl	80137ea <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8010a0a:	4b12      	ldr	r3, [pc, #72]	@ (8010a54 <MX_DAC1_Init+0x5c>)
 8010a0c:	4a12      	ldr	r2, [pc, #72]	@ (8010a58 <MX_DAC1_Init+0x60>)
 8010a0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8010a10:	4810      	ldr	r0, [pc, #64]	@ (8010a54 <MX_DAC1_Init+0x5c>)
 8010a12:	f7f1 fadf 	bl	8001fd4 <HAL_DAC_Init>
 8010a16:	4603      	mov	r3, r0
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d001      	beq.n	8010a20 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8010a1c:	f000 fea0 	bl	8011760 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8010a20:	2300      	movs	r3, #0
 8010a22:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8010a24:	2300      	movs	r3, #0
 8010a26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8010a30:	2300      	movs	r3, #0
 8010a32:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8010a34:	1d3b      	adds	r3, r7, #4
 8010a36:	2200      	movs	r2, #0
 8010a38:	4619      	mov	r1, r3
 8010a3a:	4806      	ldr	r0, [pc, #24]	@ (8010a54 <MX_DAC1_Init+0x5c>)
 8010a3c:	f7f1 fbce 	bl	80021dc <HAL_DAC_ConfigChannel>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d001      	beq.n	8010a4a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8010a46:	f000 fe8b 	bl	8011760 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8010a4a:	bf00      	nop
 8010a4c:	3728      	adds	r7, #40	@ 0x28
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	24000850 	.word	0x24000850
 8010a58:	40007400 	.word	0x40007400

08010a5c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b08a      	sub	sp, #40	@ 0x28
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a64:	f107 0314 	add.w	r3, r7, #20
 8010a68:	2200      	movs	r2, #0
 8010a6a:	601a      	str	r2, [r3, #0]
 8010a6c:	605a      	str	r2, [r3, #4]
 8010a6e:	609a      	str	r2, [r3, #8]
 8010a70:	60da      	str	r2, [r3, #12]
 8010a72:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4a1c      	ldr	r2, [pc, #112]	@ (8010aec <HAL_DAC_MspInit+0x90>)
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d131      	bne.n	8010ae2 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8010a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8010af0 <HAL_DAC_MspInit+0x94>)
 8010a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010a84:	4a1a      	ldr	r2, [pc, #104]	@ (8010af0 <HAL_DAC_MspInit+0x94>)
 8010a86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010a8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010a8e:	4b18      	ldr	r3, [pc, #96]	@ (8010af0 <HAL_DAC_MspInit+0x94>)
 8010a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010a98:	613b      	str	r3, [r7, #16]
 8010a9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a9c:	4b14      	ldr	r3, [pc, #80]	@ (8010af0 <HAL_DAC_MspInit+0x94>)
 8010a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010aa2:	4a13      	ldr	r2, [pc, #76]	@ (8010af0 <HAL_DAC_MspInit+0x94>)
 8010aa4:	f043 0301 	orr.w	r3, r3, #1
 8010aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010aac:	4b10      	ldr	r3, [pc, #64]	@ (8010af0 <HAL_DAC_MspInit+0x94>)
 8010aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010ab2:	f003 0301 	and.w	r3, r3, #1
 8010ab6:	60fb      	str	r3, [r7, #12]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8010aba:	2310      	movs	r3, #16
 8010abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010abe:	2303      	movs	r3, #3
 8010ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ac6:	f107 0314 	add.w	r3, r7, #20
 8010aca:	4619      	mov	r1, r3
 8010acc:	4809      	ldr	r0, [pc, #36]	@ (8010af4 <HAL_DAC_MspInit+0x98>)
 8010ace:	f7f3 fda9 	bl	8004624 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	210f      	movs	r1, #15
 8010ad6:	2036      	movs	r0, #54	@ 0x36
 8010ad8:	f7f1 f9dc 	bl	8001e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8010adc:	2036      	movs	r0, #54	@ 0x36
 8010ade:	f7f1 f9f3 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8010ae2:	bf00      	nop
 8010ae4:	3728      	adds	r7, #40	@ 0x28
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	40007400 	.word	0x40007400
 8010af0:	58024400 	.word	0x58024400
 8010af4:	58020000 	.word	0x58020000

08010af8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8010afe:	4b0d      	ldr	r3, [pc, #52]	@ (8010b34 <MX_DMA_Init+0x3c>)
 8010b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010b04:	4a0b      	ldr	r2, [pc, #44]	@ (8010b34 <MX_DMA_Init+0x3c>)
 8010b06:	f043 0301 	orr.w	r3, r3, #1
 8010b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010b0e:	4b09      	ldr	r3, [pc, #36]	@ (8010b34 <MX_DMA_Init+0x3c>)
 8010b10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010b14:	f003 0301 	and.w	r3, r3, #1
 8010b18:	607b      	str	r3, [r7, #4]
 8010b1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	2100      	movs	r1, #0
 8010b20:	200b      	movs	r0, #11
 8010b22:	f7f1 f9b7 	bl	8001e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8010b26:	200b      	movs	r0, #11
 8010b28:	f7f1 f9ce 	bl	8001ec8 <HAL_NVIC_EnableIRQ>

}
 8010b2c:	bf00      	nop
 8010b2e:	3708      	adds	r7, #8
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}
 8010b34:	58024400 	.word	0x58024400

08010b38 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b08c      	sub	sp, #48	@ 0x30
 8010b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b3e:	f107 031c 	add.w	r3, r7, #28
 8010b42:	2200      	movs	r2, #0
 8010b44:	601a      	str	r2, [r3, #0]
 8010b46:	605a      	str	r2, [r3, #4]
 8010b48:	609a      	str	r2, [r3, #8]
 8010b4a:	60da      	str	r2, [r3, #12]
 8010b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b4e:	4b5e      	ldr	r3, [pc, #376]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b54:	4a5c      	ldr	r2, [pc, #368]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010b56:	f043 0304 	orr.w	r3, r3, #4
 8010b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b64:	f003 0304 	and.w	r3, r3, #4
 8010b68:	61bb      	str	r3, [r7, #24]
 8010b6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010b6c:	4b56      	ldr	r3, [pc, #344]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b72:	4a55      	ldr	r2, [pc, #340]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010b7c:	4b52      	ldr	r3, [pc, #328]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b86:	617b      	str	r3, [r7, #20]
 8010b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b90:	4a4d      	ldr	r2, [pc, #308]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010b92:	f043 0301 	orr.w	r3, r3, #1
 8010b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010ba0:	f003 0301 	and.w	r3, r3, #1
 8010ba4:	613b      	str	r3, [r7, #16]
 8010ba6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010ba8:	4b47      	ldr	r3, [pc, #284]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010bae:	4a46      	ldr	r2, [pc, #280]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010bb0:	f043 0302 	orr.w	r3, r3, #2
 8010bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010bb8:	4b43      	ldr	r3, [pc, #268]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010bbe:	f003 0302 	and.w	r3, r3, #2
 8010bc2:	60fb      	str	r3, [r7, #12]
 8010bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8010bc6:	4b40      	ldr	r3, [pc, #256]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010bcc:	4a3e      	ldr	r2, [pc, #248]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010be0:	60bb      	str	r3, [r7, #8]
 8010be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8010be4:	4b38      	ldr	r3, [pc, #224]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010bea:	4a37      	ldr	r2, [pc, #220]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010bf4:	4b34      	ldr	r3, [pc, #208]	@ (8010cc8 <MX_GPIO_Init+0x190>)
 8010bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010bfe:	607b      	str	r3, [r7, #4]
 8010c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8010c02:	2200      	movs	r2, #0
 8010c04:	2120      	movs	r1, #32
 8010c06:	4831      	ldr	r0, [pc, #196]	@ (8010ccc <MX_GPIO_Init+0x194>)
 8010c08:	f7f3 febc 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	2102      	movs	r1, #2
 8010c10:	482f      	ldr	r0, [pc, #188]	@ (8010cd0 <MX_GPIO_Init+0x198>)
 8010c12:	f7f3 feb7 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_CS_Pin|AD7606_RST_Pin, GPIO_PIN_RESET);
 8010c16:	2200      	movs	r2, #0
 8010c18:	2130      	movs	r1, #48	@ 0x30
 8010c1a:	482e      	ldr	r0, [pc, #184]	@ (8010cd4 <MX_GPIO_Init+0x19c>)
 8010c1c:	f7f3 feb2 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8010c20:	2201      	movs	r2, #1
 8010c22:	2101      	movs	r1, #1
 8010c24:	482c      	ldr	r0, [pc, #176]	@ (8010cd8 <MX_GPIO_Init+0x1a0>)
 8010c26:	f7f3 fead 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	2140      	movs	r1, #64	@ 0x40
 8010c2e:	482a      	ldr	r0, [pc, #168]	@ (8010cd8 <MX_GPIO_Init+0x1a0>)
 8010c30:	f7f3 fea8 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8010c34:	2320      	movs	r3, #32
 8010c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010c40:	2301      	movs	r3, #1
 8010c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8010c44:	f107 031c 	add.w	r3, r7, #28
 8010c48:	4619      	mov	r1, r3
 8010c4a:	4820      	ldr	r0, [pc, #128]	@ (8010ccc <MX_GPIO_Init+0x194>)
 8010c4c:	f7f3 fcea 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8010c50:	2302      	movs	r3, #2
 8010c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c54:	2301      	movs	r3, #1
 8010c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8010c60:	f107 031c 	add.w	r3, r7, #28
 8010c64:	4619      	mov	r1, r3
 8010c66:	481a      	ldr	r0, [pc, #104]	@ (8010cd0 <MX_GPIO_Init+0x198>)
 8010c68:	f7f3 fcdc 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_CS_Pin|AD7606_RST_Pin;
 8010c6c:	2330      	movs	r3, #48	@ 0x30
 8010c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c70:	2301      	movs	r3, #1
 8010c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c74:	2300      	movs	r3, #0
 8010c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010c7c:	f107 031c 	add.w	r3, r7, #28
 8010c80:	4619      	mov	r1, r3
 8010c82:	4814      	ldr	r0, [pc, #80]	@ (8010cd4 <MX_GPIO_Init+0x19c>)
 8010c84:	f7f3 fcce 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8010c88:	2301      	movs	r3, #1
 8010c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c90:	2300      	movs	r3, #0
 8010c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c94:	2300      	movs	r3, #0
 8010c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8010c98:	f107 031c 	add.w	r3, r7, #28
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	480e      	ldr	r0, [pc, #56]	@ (8010cd8 <MX_GPIO_Init+0x1a0>)
 8010ca0:	f7f3 fcc0 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8010ca4:	2340      	movs	r3, #64	@ 0x40
 8010ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cac:	2300      	movs	r3, #0
 8010cae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8010cb4:	f107 031c 	add.w	r3, r7, #28
 8010cb8:	4619      	mov	r1, r3
 8010cba:	4807      	ldr	r0, [pc, #28]	@ (8010cd8 <MX_GPIO_Init+0x1a0>)
 8010cbc:	f7f3 fcb2 	bl	8004624 <HAL_GPIO_Init>

}
 8010cc0:	bf00      	nop
 8010cc2:	3730      	adds	r7, #48	@ 0x30
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	58024400 	.word	0x58024400
 8010ccc:	58020800 	.word	0x58020800
 8010cd0:	58020400 	.word	0x58020400
 8010cd4:	58021800 	.word	0x58021800
 8010cd8:	58022000 	.word	0x58022000

08010cdc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8010ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8010d54 <MX_I2C3_Init+0x78>)
 8010ce4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A175AB;
 8010ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8010d58 <MX_I2C3_Init+0x7c>)
 8010cea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8010cec:	4b18      	ldr	r3, [pc, #96]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010cee:	2200      	movs	r2, #0
 8010cf0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010cf2:	4b17      	ldr	r3, [pc, #92]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010cf8:	4b15      	ldr	r3, [pc, #84]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8010cfe:	4b14      	ldr	r3, [pc, #80]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010d00:	2200      	movs	r2, #0
 8010d02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010d04:	4b12      	ldr	r3, [pc, #72]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010d06:	2200      	movs	r2, #0
 8010d08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010d0a:	4b11      	ldr	r3, [pc, #68]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010d10:	4b0f      	ldr	r3, [pc, #60]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8010d16:	480e      	ldr	r0, [pc, #56]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010d18:	f7f3 fe68 	bl	80049ec <HAL_I2C_Init>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d001      	beq.n	8010d26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8010d22:	f000 fd1d 	bl	8011760 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010d26:	2100      	movs	r1, #0
 8010d28:	4809      	ldr	r0, [pc, #36]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010d2a:	f7f4 fbeb 	bl	8005504 <HAL_I2CEx_ConfigAnalogFilter>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d001      	beq.n	8010d38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8010d34:	f000 fd14 	bl	8011760 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8010d38:	2100      	movs	r1, #0
 8010d3a:	4805      	ldr	r0, [pc, #20]	@ (8010d50 <MX_I2C3_Init+0x74>)
 8010d3c:	f7f4 fc2d 	bl	800559a <HAL_I2CEx_ConfigDigitalFilter>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d001      	beq.n	8010d4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8010d46:	f000 fd0b 	bl	8011760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8010d4a:	bf00      	nop
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	24000864 	.word	0x24000864
 8010d54:	40005c00 	.word	0x40005c00
 8010d58:	30a175ab 	.word	0x30a175ab

08010d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b0ba      	sub	sp, #232	@ 0xe8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010d68:	2200      	movs	r2, #0
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	605a      	str	r2, [r3, #4]
 8010d6e:	609a      	str	r2, [r3, #8]
 8010d70:	60da      	str	r2, [r3, #12]
 8010d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010d74:	f107 0310 	add.w	r3, r7, #16
 8010d78:	22c0      	movs	r2, #192	@ 0xc0
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f002 fd34 	bl	80137ea <memset>
  if(i2cHandle->Instance==I2C3)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4a27      	ldr	r2, [pc, #156]	@ (8010e24 <HAL_I2C_MspInit+0xc8>)
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	d146      	bne.n	8010e1a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8010d8c:	f04f 0208 	mov.w	r2, #8
 8010d90:	f04f 0300 	mov.w	r3, #0
 8010d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010d9e:	f107 0310 	add.w	r3, r7, #16
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7f6 ff40 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 8010da8:	4603      	mov	r3, r0
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d001      	beq.n	8010db2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8010dae:	f000 fcd7 	bl	8011760 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8010db2:	4b1d      	ldr	r3, [pc, #116]	@ (8010e28 <HAL_I2C_MspInit+0xcc>)
 8010db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010db8:	4a1b      	ldr	r2, [pc, #108]	@ (8010e28 <HAL_I2C_MspInit+0xcc>)
 8010dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010dc2:	4b19      	ldr	r3, [pc, #100]	@ (8010e28 <HAL_I2C_MspInit+0xcc>)
 8010dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010dcc:	60fb      	str	r3, [r7, #12]
 8010dce:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8010dd0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8010dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010dd8:	2312      	movs	r3, #18
 8010dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010dde:	2301      	movs	r3, #1
 8010de0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010de4:	2303      	movs	r3, #3
 8010de6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8010dea:	2304      	movs	r3, #4
 8010dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010df0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010df4:	4619      	mov	r1, r3
 8010df6:	480d      	ldr	r0, [pc, #52]	@ (8010e2c <HAL_I2C_MspInit+0xd0>)
 8010df8:	f7f3 fc14 	bl	8004624 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8010dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8010e28 <HAL_I2C_MspInit+0xcc>)
 8010dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010e02:	4a09      	ldr	r2, [pc, #36]	@ (8010e28 <HAL_I2C_MspInit+0xcc>)
 8010e04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010e08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010e0c:	4b06      	ldr	r3, [pc, #24]	@ (8010e28 <HAL_I2C_MspInit+0xcc>)
 8010e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010e12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010e16:	60bb      	str	r3, [r7, #8]
 8010e18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8010e1a:	bf00      	nop
 8010e1c:	37e8      	adds	r7, #232	@ 0xe8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	40005c00 	.word	0x40005c00
 8010e28:	58024400 	.word	0x58024400
 8010e2c:	58021c00 	.word	0x58021c00

08010e30 <_close>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// IDE版本错误临时修复
__attribute__((weak)) void _close(void) {}
 8010e30:	b480      	push	{r7}
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	bf00      	nop
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr

08010e3e <_lseek>:
__attribute__((weak)) void _lseek(void) {}
 8010e3e:	b480      	push	{r7}
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	bf00      	nop
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <_read>:
__attribute__((weak)) void _read(void) {}
 8010e4c:	b480      	push	{r7}
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	bf00      	nop
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <_write>:
__attribute__((weak)) void _write(void) {}
 8010e5a:	b480      	push	{r7}
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	bf00      	nop
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <_fstat>:
__attribute__((weak)) void _fstat(void) {}
 8010e68:	b480      	push	{r7}
 8010e6a:	af00      	add	r7, sp, #0
 8010e6c:	bf00      	nop
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr

08010e76 <_getpid>:
__attribute__((weak)) void _getpid(void) {}
 8010e76:	b480      	push	{r7}
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	bf00      	nop
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <_isatty>:
__attribute__((weak)) void _isatty(void) {}
 8010e84:	b480      	push	{r7}
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	bf00      	nop
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e90:	4770      	bx	lr

08010e92 <_kill>:
__attribute__((weak)) void _kill(void) {}
 8010e92:	b480      	push	{r7}
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	bf00      	nop
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <oled_Show>:
float dcCurrent = 0.f;
PID *dcPid;
// 显示函数
uint8_t textBuf[256] = {0};
void oled_Show()
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af02      	add	r7, sp, #8
  // IN:  输入
  sprintf((char *)textBuf, "IN : %5.2fV %5.2fA", signal_V->u_0, signal_I->u_0);
 8010ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8010fd0 <oled_Show+0x130>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	edd3 7a00 	vldr	s15, [r3]
 8010eae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8010eb2:	4b48      	ldr	r3, [pc, #288]	@ (8010fd4 <oled_Show+0x134>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	edd3 7a00 	vldr	s15, [r3]
 8010eba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010ebe:	ed8d 7b00 	vstr	d7, [sp]
 8010ec2:	ec53 2b16 	vmov	r2, r3, d6
 8010ec6:	4944      	ldr	r1, [pc, #272]	@ (8010fd8 <oled_Show+0x138>)
 8010ec8:	4844      	ldr	r0, [pc, #272]	@ (8010fdc <oled_Show+0x13c>)
 8010eca:	f002 fc2b 	bl	8013724 <siprintf>
  OLED_ShowString(0, 0, textBuf, 12);
 8010ece:	230c      	movs	r3, #12
 8010ed0:	4a42      	ldr	r2, [pc, #264]	@ (8010fdc <oled_Show+0x13c>)
 8010ed2:	2100      	movs	r1, #0
 8010ed4:	2000      	movs	r0, #0
 8010ed6:	f7ff f825 	bl	800ff24 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // DC:  直流
  sprintf((char *)textBuf, "DC : %5.2fV %5.2fA", dcVolt, dcCurrent);
 8010eda:	4b41      	ldr	r3, [pc, #260]	@ (8010fe0 <oled_Show+0x140>)
 8010edc:	edd3 7a00 	vldr	s15, [r3]
 8010ee0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8010ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8010fe4 <oled_Show+0x144>)
 8010ee6:	edd3 7a00 	vldr	s15, [r3]
 8010eea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010eee:	ed8d 7b00 	vstr	d7, [sp]
 8010ef2:	ec53 2b16 	vmov	r2, r3, d6
 8010ef6:	493c      	ldr	r1, [pc, #240]	@ (8010fe8 <oled_Show+0x148>)
 8010ef8:	4838      	ldr	r0, [pc, #224]	@ (8010fdc <oled_Show+0x13c>)
 8010efa:	f002 fc13 	bl	8013724 <siprintf>
  OLED_ShowString(0, 12, textBuf, 12);
 8010efe:	230c      	movs	r3, #12
 8010f00:	4a36      	ldr	r2, [pc, #216]	@ (8010fdc <oled_Show+0x13c>)
 8010f02:	210c      	movs	r1, #12
 8010f04:	2000      	movs	r0, #0
 8010f06:	f7ff f80d 	bl	800ff24 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // OUT: 输出
  sprintf((char *)textBuf, "OUT: %5.2fV %5.2fA", signal_V->u_0, signal_I->u_0);
 8010f0a:	4b31      	ldr	r3, [pc, #196]	@ (8010fd0 <oled_Show+0x130>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	edd3 7a00 	vldr	s15, [r3]
 8010f12:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8010f16:	4b2f      	ldr	r3, [pc, #188]	@ (8010fd4 <oled_Show+0x134>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	edd3 7a00 	vldr	s15, [r3]
 8010f1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010f22:	ed8d 7b00 	vstr	d7, [sp]
 8010f26:	ec53 2b16 	vmov	r2, r3, d6
 8010f2a:	4930      	ldr	r1, [pc, #192]	@ (8010fec <oled_Show+0x14c>)
 8010f2c:	482b      	ldr	r0, [pc, #172]	@ (8010fdc <oled_Show+0x13c>)
 8010f2e:	f002 fbf9 	bl	8013724 <siprintf>
  OLED_ShowString(0, 24, textBuf, 12);
 8010f32:	230c      	movs	r3, #12
 8010f34:	4a29      	ldr	r2, [pc, #164]	@ (8010fdc <oled_Show+0x13c>)
 8010f36:	2118      	movs	r1, #24
 8010f38:	2000      	movs	r0, #0
 8010f3a:	f7fe fff3 	bl	800ff24 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // FAC: 功率因数
  sprintf((char *)textBuf, "FAC: %4.2f", arm_cos_f32(0));
 8010f3e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8010ff0 <oled_Show+0x150>
 8010f42:	f001 fdf7 	bl	8012b34 <arm_cos_f32>
 8010f46:	eef0 7a40 	vmov.f32	s15, s0
 8010f4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010f4e:	ec53 2b17 	vmov	r2, r3, d7
 8010f52:	4928      	ldr	r1, [pc, #160]	@ (8010ff4 <oled_Show+0x154>)
 8010f54:	4821      	ldr	r0, [pc, #132]	@ (8010fdc <oled_Show+0x13c>)
 8010f56:	f002 fbe5 	bl	8013724 <siprintf>
  OLED_ShowString(0, 36, textBuf, 12);
 8010f5a:	230c      	movs	r3, #12
 8010f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8010fdc <oled_Show+0x13c>)
 8010f5e:	2124      	movs	r1, #36	@ 0x24
 8010f60:	2000      	movs	r0, #0
 8010f62:	f7fe ffdf 	bl	800ff24 <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // EFF: 效率
  sprintf((char *)textBuf, "EFF: %5.2f%% %5.2f", (signal_V->u_0 * signal_I->u_0) / (signal_V->u_0 * signal_I->u_0) * 100.f, MI);
 8010f66:	4b1a      	ldr	r3, [pc, #104]	@ (8010fd0 <oled_Show+0x130>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	ed93 7a00 	vldr	s14, [r3]
 8010f6e:	4b19      	ldr	r3, [pc, #100]	@ (8010fd4 <oled_Show+0x134>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	edd3 7a00 	vldr	s15, [r3]
 8010f76:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010f7a:	4b15      	ldr	r3, [pc, #84]	@ (8010fd0 <oled_Show+0x130>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	ed93 7a00 	vldr	s14, [r3]
 8010f82:	4b14      	ldr	r3, [pc, #80]	@ (8010fd4 <oled_Show+0x134>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	edd3 7a00 	vldr	s15, [r3]
 8010f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f92:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010ff8 <oled_Show+0x158>
 8010f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f9a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8010f9e:	4b17      	ldr	r3, [pc, #92]	@ (8010ffc <oled_Show+0x15c>)
 8010fa0:	edd3 7a00 	vldr	s15, [r3]
 8010fa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010fa8:	ed8d 7b00 	vstr	d7, [sp]
 8010fac:	ec53 2b16 	vmov	r2, r3, d6
 8010fb0:	4913      	ldr	r1, [pc, #76]	@ (8011000 <oled_Show+0x160>)
 8010fb2:	480a      	ldr	r0, [pc, #40]	@ (8010fdc <oled_Show+0x13c>)
 8010fb4:	f002 fbb6 	bl	8013724 <siprintf>
  OLED_ShowString(0, 48, textBuf, 12);
 8010fb8:	230c      	movs	r3, #12
 8010fba:	4a08      	ldr	r2, [pc, #32]	@ (8010fdc <oled_Show+0x13c>)
 8010fbc:	2130      	movs	r1, #48	@ 0x30
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	f7fe ffb0 	bl	800ff24 <OLED_ShowString>

  // 串口调试
  // sprintf((char *)textBuf, "x=0,park_Iq=%.2f,park_Id=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,sogi_Ia=%.2f,sogi_Ib=%.2f,inv_a=%.2f\n", signal_I->park_q, signal_I->park_d, signal_V->park_d, signal_V->park_q, signal_V->sogi_a_0, signal_V->sogi_b_0 / 382 * 3, signal_I->sogi_a_0, signal_I->sogi_b_0 / 382 * 3, signal_I->park_inv_a);
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  OLED_Refresh();
 8010fc4:	f7fe fe3e 	bl	800fc44 <OLED_Refresh>
}
 8010fc8:	bf00      	nop
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	20000000 	.word	0x20000000
 8010fd4:	20000008 	.word	0x20000008
 8010fd8:	080159d0 	.word	0x080159d0
 8010fdc:	240008c4 	.word	0x240008c4
 8010fe0:	240008b8 	.word	0x240008b8
 8010fe4:	240008bc 	.word	0x240008bc
 8010fe8:	080159e4 	.word	0x080159e4
 8010fec:	080159f8 	.word	0x080159f8
 8010ff0:	00000000 	.word	0x00000000
 8010ff4:	08015a0c 	.word	0x08015a0c
 8010ff8:	42c80000 	.word	0x42c80000
 8010ffc:	24000094 	.word	0x24000094
 8011000:	08015a18 	.word	0x08015a18

08011004 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 801100a:	f000 fa07 	bl	801141c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 801100e:	4b82      	ldr	r3, [pc, #520]	@ (8011218 <main+0x214>)
 8011010:	695b      	ldr	r3, [r3, #20]
 8011012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011016:	2b00      	cmp	r3, #0
 8011018:	d11b      	bne.n	8011052 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 801101a:	f3bf 8f4f 	dsb	sy
}
 801101e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011020:	f3bf 8f6f 	isb	sy
}
 8011024:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8011026:	4b7c      	ldr	r3, [pc, #496]	@ (8011218 <main+0x214>)
 8011028:	2200      	movs	r2, #0
 801102a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 801102e:	f3bf 8f4f 	dsb	sy
}
 8011032:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011034:	f3bf 8f6f 	isb	sy
}
 8011038:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 801103a:	4b77      	ldr	r3, [pc, #476]	@ (8011218 <main+0x214>)
 801103c:	695b      	ldr	r3, [r3, #20]
 801103e:	4a76      	ldr	r2, [pc, #472]	@ (8011218 <main+0x214>)
 8011040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011044:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011046:	f3bf 8f4f 	dsb	sy
}
 801104a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801104c:	f3bf 8f6f 	isb	sy
}
 8011050:	e000      	b.n	8011054 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8011052:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8011054:	4b70      	ldr	r3, [pc, #448]	@ (8011218 <main+0x214>)
 8011056:	695b      	ldr	r3, [r3, #20]
 8011058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801105c:	2b00      	cmp	r3, #0
 801105e:	d138      	bne.n	80110d2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011060:	4b6d      	ldr	r3, [pc, #436]	@ (8011218 <main+0x214>)
 8011062:	2200      	movs	r2, #0
 8011064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011068:	f3bf 8f4f 	dsb	sy
}
 801106c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 801106e:	4b6a      	ldr	r3, [pc, #424]	@ (8011218 <main+0x214>)
 8011070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011074:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	0b5b      	lsrs	r3, r3, #13
 801107a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801107e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	08db      	lsrs	r3, r3, #3
 8011084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011088:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	015a      	lsls	r2, r3, #5
 801108e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8011092:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011098:	495f      	ldr	r1, [pc, #380]	@ (8011218 <main+0x214>)
 801109a:	4313      	orrs	r3, r2
 801109c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	1e5a      	subs	r2, r3, #1
 80110a4:	607a      	str	r2, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1ef      	bne.n	801108a <main+0x86>
    } while(sets-- != 0U);
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	1e5a      	subs	r2, r3, #1
 80110ae:	60ba      	str	r2, [r7, #8]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d1e5      	bne.n	8011080 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80110b4:	f3bf 8f4f 	dsb	sy
}
 80110b8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80110ba:	4b57      	ldr	r3, [pc, #348]	@ (8011218 <main+0x214>)
 80110bc:	695b      	ldr	r3, [r3, #20]
 80110be:	4a56      	ldr	r2, [pc, #344]	@ (8011218 <main+0x214>)
 80110c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80110c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80110c6:	f3bf 8f4f 	dsb	sy
}
 80110ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80110cc:	f3bf 8f6f 	isb	sy
}
 80110d0:	e000      	b.n	80110d4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80110d2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80110d4:	f7ef f986 	bl	80003e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80110d8:	f000 f8c2 	bl	8011260 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80110dc:	f000 f96e 	bl	80113bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80110e0:	f7ff fd2a 	bl	8010b38 <MX_GPIO_Init>
  MX_DMA_Init();
 80110e4:	f7ff fd08 	bl	8010af8 <MX_DMA_Init>
  MX_ADC1_Init();
 80110e8:	f7ff fb26 	bl	8010738 <MX_ADC1_Init>
  MX_DAC1_Init();
 80110ec:	f7ff fc84 	bl	80109f8 <MX_DAC1_Init>
  MX_SPI1_Init();
 80110f0:	f000 fb3c 	bl	801176c <MX_SPI1_Init>
  MX_SPI2_Init();
 80110f4:	f000 fb90 	bl	8011818 <MX_SPI2_Init>
  MX_TIM2_Init();
 80110f8:	f000 fde0 	bl	8011cbc <MX_TIM2_Init>
  MX_TIM8_Init();
 80110fc:	f000 fe7a 	bl	8011df4 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8011100:	f000 ffc8 	bl	8012094 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8011104:	f7ff fdea 	bl	8010cdc <MX_I2C3_Init>
  MX_TIM3_Init();
 8011108:	f000 fe26 	bl	8011d58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 801110c:	205c      	movs	r0, #92	@ 0x5c
 801110e:	f001 fd5b 	bl	8012bc8 <malloc>
 8011112:	4603      	mov	r3, r0
 8011114:	461a      	mov	r2, r3
 8011116:	4b41      	ldr	r3, [pc, #260]	@ (801121c <main+0x218>)
 8011118:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 801111a:	2020      	movs	r0, #32
 801111c:	f001 fd54 	bl	8012bc8 <malloc>
 8011120:	4603      	mov	r3, r0
 8011122:	461a      	mov	r2, r3
 8011124:	4b3e      	ldr	r3, [pc, #248]	@ (8011220 <main+0x21c>)
 8011126:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8011128:	205c      	movs	r0, #92	@ 0x5c
 801112a:	f001 fd4d 	bl	8012bc8 <malloc>
 801112e:	4603      	mov	r3, r0
 8011130:	461a      	mov	r2, r3
 8011132:	4b3c      	ldr	r3, [pc, #240]	@ (8011224 <main+0x220>)
 8011134:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8011136:	2020      	movs	r0, #32
 8011138:	f001 fd46 	bl	8012bc8 <malloc>
 801113c:	4603      	mov	r3, r0
 801113e:	461a      	mov	r2, r3
 8011140:	4b39      	ldr	r3, [pc, #228]	@ (8011228 <main+0x224>)
 8011142:	601a      	str	r2, [r3, #0]
  dcPid = (PID *)malloc(sizeof(PID));
 8011144:	2024      	movs	r0, #36	@ 0x24
 8011146:	f001 fd3f 	bl	8012bc8 <malloc>
 801114a:	4603      	mov	r3, r0
 801114c:	461a      	mov	r2, r3
 801114e:	4b37      	ldr	r3, [pc, #220]	@ (801122c <main+0x228>)
 8011150:	601a      	str	r2, [r3, #0]
  // 芯片温度
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压环
 8011152:	4b32      	ldr	r3, [pc, #200]	@ (801121c <main+0x218>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	4a32      	ldr	r2, [pc, #200]	@ (8011220 <main+0x21c>)
 8011158:	6811      	ldr	r1, [r2, #0]
 801115a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801115e:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8011230 <main+0x22c>
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff f840 	bl	80101e8 <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流环
 8011168:	4b2e      	ldr	r3, [pc, #184]	@ (8011224 <main+0x220>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4a2e      	ldr	r2, [pc, #184]	@ (8011228 <main+0x224>)
 801116e:	6811      	ldr	r1, [r2, #0]
 8011170:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8011174:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8011230 <main+0x22c>
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff f835 	bl	80101e8 <pll_Init>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 801117e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011182:	2200      	movs	r2, #0
 8011184:	2100      	movs	r1, #0
 8011186:	482b      	ldr	r0, [pc, #172]	@ (8011234 <main+0x230>)
 8011188:	f7f0 fff3 	bl	8002172 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 801118c:	2100      	movs	r1, #0
 801118e:	4829      	ldr	r0, [pc, #164]	@ (8011234 <main+0x230>)
 8011190:	f7f0 ff42 	bl	8002018 <HAL_DAC_Start>
  // ADC校准
  HAL_Delay(200);
 8011194:	20c8      	movs	r0, #200	@ 0xc8
 8011196:	f7ef f981 	bl	800049c <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 801119a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801119e:	2100      	movs	r1, #0
 80111a0:	4825      	ldr	r0, [pc, #148]	@ (8011238 <main+0x234>)
 80111a2:	f7f0 fc7d 	bl	8001aa0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线性度校准
 80111a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80111aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80111ae:	4822      	ldr	r0, [pc, #136]	@ (8011238 <main+0x234>)
 80111b0:	f7f0 fc76 	bl	8001aa0 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(500);
 80111b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80111b8:	f7ef f970 	bl	800049c <HAL_Delay>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80111bc:	2100      	movs	r1, #0
 80111be:	481f      	ldr	r0, [pc, #124]	@ (801123c <main+0x238>)
 80111c0:	f7f9 ff5c 	bl	800b07c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80111c4:	2104      	movs	r1, #4
 80111c6:	481d      	ldr	r0, [pc, #116]	@ (801123c <main+0x238>)
 80111c8:	f7f9 ff58 	bl	800b07c <HAL_TIM_PWM_Start>
  // OLED初始化
  OLED_Init();
 80111cc:	f7fe fede 	bl	800ff8c <OLED_Init>
  // INA238初始化
  ina238_Init(&hi2c3, 0);
 80111d0:	2100      	movs	r1, #0
 80111d2:	481b      	ldr	r0, [pc, #108]	@ (8011240 <main+0x23c>)
 80111d4:	f7fe fc16 	bl	800fa04 <ina238_Init>
  // pid初始化
  pid_Init(dcPid, 0.01, 0.1, 0.1, 0.9, 0.3);
 80111d8:	4b14      	ldr	r3, [pc, #80]	@ (801122c <main+0x228>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	ed9f 2a19 	vldr	s4, [pc, #100]	@ 8011244 <main+0x240>
 80111e0:	eddf 1a19 	vldr	s3, [pc, #100]	@ 8011248 <main+0x244>
 80111e4:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 801124c <main+0x248>
 80111e8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 801124c <main+0x248>
 80111ec:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8011250 <main+0x24c>
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7fe ff51 	bl	8010098 <pid_Init>
  // 开启中断
  HAL_TIM_Base_Start_IT(&htim2);
 80111f6:	4817      	ldr	r0, [pc, #92]	@ (8011254 <main+0x250>)
 80111f8:	f7f9 fe66 	bl	800aec8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80111fc:	4816      	ldr	r0, [pc, #88]	@ (8011258 <main+0x254>)
 80111fe:	f7f9 fe63 	bl	800aec8 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //    dcVolt = ina238_GetVolt(&hi2c3);
    oled_Show();
 8011202:	f7ff fe4d 	bl	8010ea0 <oled_Show>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8011206:	2101      	movs	r1, #1
 8011208:	4814      	ldr	r0, [pc, #80]	@ (801125c <main+0x258>)
 801120a:	f7f3 fbd4 	bl	80049b6 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 801120e:	2064      	movs	r0, #100	@ 0x64
 8011210:	f7ef f944 	bl	800049c <HAL_Delay>
    oled_Show();
 8011214:	bf00      	nop
 8011216:	e7f4      	b.n	8011202 <main+0x1fe>
 8011218:	e000ed00 	.word	0xe000ed00
 801121c:	20000000 	.word	0x20000000
 8011220:	20000004 	.word	0x20000004
 8011224:	20000008 	.word	0x20000008
 8011228:	2000000c 	.word	0x2000000c
 801122c:	240008c0 	.word	0x240008c0
 8011230:	42480000 	.word	0x42480000
 8011234:	24000850 	.word	0x24000850
 8011238:	24000774 	.word	0x24000774
 801123c:	24000bb8 	.word	0x24000bb8
 8011240:	24000864 	.word	0x24000864
 8011244:	3e99999a 	.word	0x3e99999a
 8011248:	3f666666 	.word	0x3f666666
 801124c:	3dcccccd 	.word	0x3dcccccd
 8011250:	3c23d70a 	.word	0x3c23d70a
 8011254:	24000b20 	.word	0x24000b20
 8011258:	24000b6c 	.word	0x24000b6c
 801125c:	58022000 	.word	0x58022000

08011260 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b09e      	sub	sp, #120	@ 0x78
 8011264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011266:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801126a:	224c      	movs	r2, #76	@ 0x4c
 801126c:	2100      	movs	r1, #0
 801126e:	4618      	mov	r0, r3
 8011270:	f002 fabb 	bl	80137ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011274:	f107 030c 	add.w	r3, r7, #12
 8011278:	2220      	movs	r2, #32
 801127a:	2100      	movs	r1, #0
 801127c:	4618      	mov	r0, r3
 801127e:	f002 fab4 	bl	80137ea <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8011282:	2002      	movs	r0, #2
 8011284:	f7f5 fc74 	bl	8006b70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011288:	2300      	movs	r3, #0
 801128a:	60bb      	str	r3, [r7, #8]
 801128c:	4b48      	ldr	r3, [pc, #288]	@ (80113b0 <SystemClock_Config+0x150>)
 801128e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011290:	4a47      	ldr	r2, [pc, #284]	@ (80113b0 <SystemClock_Config+0x150>)
 8011292:	f023 0301 	bic.w	r3, r3, #1
 8011296:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011298:	4b45      	ldr	r3, [pc, #276]	@ (80113b0 <SystemClock_Config+0x150>)
 801129a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801129c:	f003 0301 	and.w	r3, r3, #1
 80112a0:	60bb      	str	r3, [r7, #8]
 80112a2:	4b44      	ldr	r3, [pc, #272]	@ (80113b4 <SystemClock_Config+0x154>)
 80112a4:	699b      	ldr	r3, [r3, #24]
 80112a6:	4a43      	ldr	r2, [pc, #268]	@ (80113b4 <SystemClock_Config+0x154>)
 80112a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80112ac:	6193      	str	r3, [r2, #24]
 80112ae:	4b41      	ldr	r3, [pc, #260]	@ (80113b4 <SystemClock_Config+0x154>)
 80112b0:	699b      	ldr	r3, [r3, #24]
 80112b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80112b6:	60bb      	str	r3, [r7, #8]
 80112b8:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80112ba:	bf00      	nop
 80112bc:	4b3d      	ldr	r3, [pc, #244]	@ (80113b4 <SystemClock_Config+0x154>)
 80112be:	699b      	ldr	r3, [r3, #24]
 80112c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80112c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80112c8:	d1f8      	bne.n	80112bc <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112ca:	4b3b      	ldr	r3, [pc, #236]	@ (80113b8 <SystemClock_Config+0x158>)
 80112cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80112d0:	4a39      	ldr	r2, [pc, #228]	@ (80113b8 <SystemClock_Config+0x158>)
 80112d2:	f043 0302 	orr.w	r3, r3, #2
 80112d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80112da:	4b37      	ldr	r3, [pc, #220]	@ (80113b8 <SystemClock_Config+0x158>)
 80112dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80112e0:	f003 0302 	and.w	r3, r3, #2
 80112e4:	607b      	str	r3, [r7, #4]
 80112e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80112e8:	2300      	movs	r3, #0
 80112ea:	603b      	str	r3, [r7, #0]
 80112ec:	4b31      	ldr	r3, [pc, #196]	@ (80113b4 <SystemClock_Config+0x154>)
 80112ee:	699b      	ldr	r3, [r3, #24]
 80112f0:	4a30      	ldr	r2, [pc, #192]	@ (80113b4 <SystemClock_Config+0x154>)
 80112f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80112f6:	6193      	str	r3, [r2, #24]
 80112f8:	4b2e      	ldr	r3, [pc, #184]	@ (80113b4 <SystemClock_Config+0x154>)
 80112fa:	699b      	ldr	r3, [r3, #24]
 80112fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011300:	603b      	str	r3, [r7, #0]
 8011302:	4b2b      	ldr	r3, [pc, #172]	@ (80113b0 <SystemClock_Config+0x150>)
 8011304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011306:	4a2a      	ldr	r2, [pc, #168]	@ (80113b0 <SystemClock_Config+0x150>)
 8011308:	f043 0301 	orr.w	r3, r3, #1
 801130c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801130e:	4b28      	ldr	r3, [pc, #160]	@ (80113b0 <SystemClock_Config+0x150>)
 8011310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011312:	f003 0301 	and.w	r3, r3, #1
 8011316:	603b      	str	r3, [r7, #0]
 8011318:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 801131a:	bf00      	nop
 801131c:	4b25      	ldr	r3, [pc, #148]	@ (80113b4 <SystemClock_Config+0x154>)
 801131e:	699b      	ldr	r3, [r3, #24]
 8011320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011328:	d1f8      	bne.n	801131c <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801132a:	2301      	movs	r3, #1
 801132c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801132e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8011332:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011334:	2302      	movs	r3, #2
 8011336:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011338:	2302      	movs	r3, #2
 801133a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 801133c:	2305      	movs	r3, #5
 801133e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8011340:	23c0      	movs	r3, #192	@ 0xc0
 8011342:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8011344:	2302      	movs	r3, #2
 8011346:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8011348:	2314      	movs	r3, #20
 801134a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 801134c:	2302      	movs	r3, #2
 801134e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8011350:	2308      	movs	r3, #8
 8011352:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8011354:	2300      	movs	r3, #0
 8011356:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8011358:	2300      	movs	r3, #0
 801135a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801135c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011360:	4618      	mov	r0, r3
 8011362:	f7f5 fc4f 	bl	8006c04 <HAL_RCC_OscConfig>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d001      	beq.n	8011370 <SystemClock_Config+0x110>
  {
    Error_Handler();
 801136c:	f000 f9f8 	bl	8011760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8011370:	233f      	movs	r3, #63	@ 0x3f
 8011372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011374:	2303      	movs	r3, #3
 8011376:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8011378:	2300      	movs	r3, #0
 801137a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801137c:	2308      	movs	r3, #8
 801137e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8011380:	2340      	movs	r3, #64	@ 0x40
 8011382:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8011384:	2340      	movs	r3, #64	@ 0x40
 8011386:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8011388:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801138c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 801138e:	2340      	movs	r3, #64	@ 0x40
 8011390:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8011392:	f107 030c 	add.w	r3, r7, #12
 8011396:	2104      	movs	r1, #4
 8011398:	4618      	mov	r0, r3
 801139a:	f7f6 f88d 	bl	80074b8 <HAL_RCC_ClockConfig>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d001      	beq.n	80113a8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80113a4:	f000 f9dc 	bl	8011760 <Error_Handler>
  }
}
 80113a8:	bf00      	nop
 80113aa:	3778      	adds	r7, #120	@ 0x78
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	58000400 	.word	0x58000400
 80113b4:	58024800 	.word	0x58024800
 80113b8:	58024400 	.word	0x58024400

080113bc <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b0b0      	sub	sp, #192	@ 0xc0
 80113c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80113c2:	463b      	mov	r3, r7
 80113c4:	22c0      	movs	r2, #192	@ 0xc0
 80113c6:	2100      	movs	r1, #0
 80113c8:	4618      	mov	r0, r3
 80113ca:	f002 fa0e 	bl	80137ea <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 80113ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80113d2:	f04f 0300 	mov.w	r3, #0
 80113d6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 80113da:	2319      	movs	r3, #25
 80113dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 80113de:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80113e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80113e4:	2302      	movs	r3, #2
 80113e6:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80113e8:	2302      	movs	r3, #2
 80113ea:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80113ec:	2302      	movs	r3, #2
 80113ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80113f0:	2300      	movs	r3, #0
 80113f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80113f4:	2300      	movs	r3, #0
 80113f6:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80113f8:	2300      	movs	r3, #0
 80113fa:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80113fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011400:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011402:	463b      	mov	r3, r7
 8011404:	4618      	mov	r0, r3
 8011406:	f7f6 fc0f 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d001      	beq.n	8011414 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8011410:	f000 f9a6 	bl	8011760 <Error_Handler>
  }
}
 8011414:	bf00      	nop
 8011416:	37c0      	adds	r7, #192	@ 0xc0
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8011422:	463b      	mov	r3, r7
 8011424:	2200      	movs	r2, #0
 8011426:	601a      	str	r2, [r3, #0]
 8011428:	605a      	str	r2, [r3, #4]
 801142a:	609a      	str	r2, [r3, #8]
 801142c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 801142e:	f7f0 fd59 	bl	8001ee4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011432:	2301      	movs	r3, #1
 8011434:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8011436:	2300      	movs	r3, #0
 8011438:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 801143a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 801143e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8011440:	2312      	movs	r3, #18
 8011442:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8011444:	2300      	movs	r3, #0
 8011446:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8011448:	2301      	movs	r3, #1
 801144a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 801144c:	2303      	movs	r3, #3
 801144e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8011450:	2300      	movs	r3, #0
 8011452:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8011454:	2300      	movs	r3, #0
 8011456:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8011458:	2301      	movs	r3, #1
 801145a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 801145c:	2301      	movs	r3, #1
 801145e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011460:	463b      	mov	r3, r7
 8011462:	4618      	mov	r0, r3
 8011464:	f7f0 fd76 	bl	8001f54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8011468:	2301      	movs	r3, #1
 801146a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 801146c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8011470:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8011472:	230f      	movs	r3, #15
 8011474:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8011476:	2300      	movs	r3, #0
 8011478:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 801147a:	2300      	movs	r3, #0
 801147c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801147e:	463b      	mov	r3, r7
 8011480:	4618      	mov	r0, r3
 8011482:	f7f0 fd67 	bl	8001f54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8011486:	2302      	movs	r3, #2
 8011488:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 801148a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801148e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8011490:	2310      	movs	r3, #16
 8011492:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011494:	463b      	mov	r3, r7
 8011496:	4618      	mov	r0, r3
 8011498:	f7f0 fd5c 	bl	8001f54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 801149c:	2004      	movs	r0, #4
 801149e:	f7f0 fd39 	bl	8001f14 <HAL_MPU_Enable>
}
 80114a2:	bf00      	nop
 80114a4:	3710      	adds	r7, #16
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
	...

080114ac <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	ed2d 8b02 	vpush	{d8}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4a93      	ldr	r2, [pc, #588]	@ (801170c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d101      	bne.n	80114c6 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_IncTick();
 80114c2:	f7ee ffcb 	bl	800045c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) // 20kHz
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80114ce:	f040 80f0 	bne.w	80116b2 <HAL_TIM_PeriodElapsedCallback+0x206>
  {
    // 缓存adcBuf
    HAL_ADC_Start_DMA(&hadc1, adcBuf, 2);
 80114d2:	2202      	movs	r2, #2
 80114d4:	498e      	ldr	r1, [pc, #568]	@ (8011710 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80114d6:	488f      	ldr	r0, [pc, #572]	@ (8011714 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80114d8:	f7ef fbc0 	bl	8000c5c <HAL_ADC_Start_DMA>
 80114dc:	4b8c      	ldr	r3, [pc, #560]	@ (8011710 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80114de:	617b      	str	r3, [r7, #20]
 80114e0:	2308      	movs	r3, #8
 80114e2:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	dd1d      	ble.n	8011526 <HAL_TIM_PeriodElapsedCallback+0x7a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	f003 021f 	and.w	r2, r3, #31
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	4413      	add	r3, r2
 80114f4:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80114fa:	f3bf 8f4f 	dsb	sy
}
 80114fe:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011500:	4a85      	ldr	r2, [pc, #532]	@ (8011718 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	3320      	adds	r3, #32
 801150c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	3b20      	subs	r3, #32
 8011512:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2b00      	cmp	r3, #0
 8011518:	dcf2      	bgt.n	8011500 <HAL_TIM_PeriodElapsedCallback+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
 801151a:	f3bf 8f4f 	dsb	sy
}
 801151e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011520:	f3bf 8f6f 	isb	sy
}
 8011524:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8011526:	bf00      	nop
    SCB_InvalidateDCache_by_Addr(adcBuf, sizeof(adcBuf));
    signal_V->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.5f;
 8011528:	4b79      	ldr	r3, [pc, #484]	@ (8011710 <HAL_TIM_PeriodElapsedCallback+0x264>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	ee07 3a90 	vmov	s15, r3
 8011530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011534:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 801171c <HAL_TIM_PeriodElapsedCallback+0x270>
 8011538:	ee27 7a87 	vmul.f32	s14, s15, s14
 801153c:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8011720 <HAL_TIM_PeriodElapsedCallback+0x274>
 8011540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011544:	4b77      	ldr	r3, [pc, #476]	@ (8011724 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801154c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011550:	edc3 7a00 	vstr	s15, [r3]
    signal_I->u_0 = adcBuf[1] * 3.3f / 65536.0f - 1.5f;
 8011554:	4b6e      	ldr	r3, [pc, #440]	@ (8011710 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	ee07 3a90 	vmov	s15, r3
 801155c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011560:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 801171c <HAL_TIM_PeriodElapsedCallback+0x270>
 8011564:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011568:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8011720 <HAL_TIM_PeriodElapsedCallback+0x274>
 801156c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011570:	4b6d      	ldr	r3, [pc, #436]	@ (8011728 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8011578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801157c:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_V, signal_config_V, signal_V); // 电压环
 8011580:	4b68      	ldr	r3, [pc, #416]	@ (8011724 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	4a69      	ldr	r2, [pc, #420]	@ (801172c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011586:	6811      	ldr	r1, [r2, #0]
 8011588:	4a66      	ldr	r2, [pc, #408]	@ (8011724 <HAL_TIM_PeriodElapsedCallback+0x278>)
 801158a:	6812      	ldr	r2, [r2, #0]
 801158c:	4618      	mov	r0, r3
 801158e:	f7fe ff13 	bl	80103b8 <pll_Control>
    pll_Control(signal_I, signal_config_I, signal_V); // 电流环
 8011592:	4b65      	ldr	r3, [pc, #404]	@ (8011728 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	4a66      	ldr	r2, [pc, #408]	@ (8011730 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8011598:	6811      	ldr	r1, [r2, #0]
 801159a:	4a62      	ldr	r2, [pc, #392]	@ (8011724 <HAL_TIM_PeriodElapsedCallback+0x278>)
 801159c:	6812      	ldr	r2, [r2, #0]
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fe ff0a 	bl	80103b8 <pll_Control>
    // 调节SPWM占空比
    // 要想实现PFC，需要让电流相位与电压相位相同，而电压相位由电网控制，所以需要闭环控制的是电流相位
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MI * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 80115a4:	4b63      	ldr	r3, [pc, #396]	@ (8011734 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115aa:	ee07 3a90 	vmov	s15, r3
 80115ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80115b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80115ba:	4b5f      	ldr	r3, [pc, #380]	@ (8011738 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80115bc:	edd3 7a00 	vldr	s15, [r3]
 80115c0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80115c4:	4b58      	ldr	r3, [pc, #352]	@ (8011728 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80115cc:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 801173c <HAL_TIM_PeriodElapsedCallback+0x290>
 80115d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115d4:	eeb0 0a67 	vmov.f32	s0, s15
 80115d8:	f001 fa66 	bl	8012aa8 <arm_sin_f32>
 80115dc:	eef0 7a40 	vmov.f32	s15, s0
 80115e0:	ee28 7a27 	vmul.f32	s14, s16, s15
 80115e4:	4b53      	ldr	r3, [pc, #332]	@ (8011734 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115ea:	ee07 3a90 	vmov	s15, r3
 80115ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115f2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80115f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80115fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115fe:	4b4d      	ldr	r3, [pc, #308]	@ (8011734 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011606:	ee17 2a90 	vmov	r2, s15
 801160a:	635a      	str	r2, [r3, #52]	@ 0x34
    // 反馈侧
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MI * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 801160c:	4b49      	ldr	r3, [pc, #292]	@ (8011734 <HAL_TIM_PeriodElapsedCallback+0x288>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011612:	ee07 3a90 	vmov	s15, r3
 8011616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801161a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801161e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011622:	4b45      	ldr	r3, [pc, #276]	@ (8011738 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8011624:	edd3 7a00 	vldr	s15, [r3]
 8011628:	ee27 8a27 	vmul.f32	s16, s14, s15
 801162c:	4b3e      	ldr	r3, [pc, #248]	@ (8011728 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8011634:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 801173c <HAL_TIM_PeriodElapsedCallback+0x290>
 8011638:	ee77 7a87 	vadd.f32	s15, s15, s14
 801163c:	eeb0 0a67 	vmov.f32	s0, s15
 8011640:	f001 fa32 	bl	8012aa8 <arm_sin_f32>
 8011644:	eef0 7a40 	vmov.f32	s15, s0
 8011648:	ee28 7a27 	vmul.f32	s14, s16, s15
 801164c:	4b39      	ldr	r3, [pc, #228]	@ (8011734 <HAL_TIM_PeriodElapsedCallback+0x288>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011652:	ee07 3a90 	vmov	s15, r3
 8011656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801165a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801165e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011666:	4b33      	ldr	r3, [pc, #204]	@ (8011734 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801166e:	ee17 2a90 	vmov	r2, s15
 8011672:	639a      	str	r2, [r3, #56]	@ 0x38
    // DAC模拟输出，便于调试，不需要时可关闭
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_V->theta + PI / 2.f) + 2048.f);
 8011674:	4b2b      	ldr	r3, [pc, #172]	@ (8011724 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801167c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801173c <HAL_TIM_PeriodElapsedCallback+0x290>
 8011680:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011684:	eeb0 0a67 	vmov.f32	s0, s15
 8011688:	f001 fa0e 	bl	8012aa8 <arm_sin_f32>
 801168c:	eef0 7a40 	vmov.f32	s15, s0
 8011690:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8011740 <HAL_TIM_PeriodElapsedCallback+0x294>
 8011694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011698:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8011744 <HAL_TIM_PeriodElapsedCallback+0x298>
 801169c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80116a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80116a4:	ee17 3a90 	vmov	r3, s15
 80116a8:	2200      	movs	r2, #0
 80116aa:	2100      	movs	r1, #0
 80116ac:	4826      	ldr	r0, [pc, #152]	@ (8011748 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80116ae:	f7f0 fd60 	bl	8002172 <HAL_DAC_SetValue>
  }
  if (htim->Instance == TIM3) // 100Hz
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	4a25      	ldr	r2, [pc, #148]	@ (801174c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d120      	bne.n	80116fe <HAL_TIM_PeriodElapsedCallback+0x252>
  {
    // 控制中间直流电压
    dcVolt = ina238_GetVolt(&hi2c3);
 80116bc:	4824      	ldr	r0, [pc, #144]	@ (8011750 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80116be:	f7fe f9e3 	bl	800fa88 <ina238_GetVolt>
 80116c2:	eef0 7a40 	vmov.f32	s15, s0
 80116c6:	4b23      	ldr	r3, [pc, #140]	@ (8011754 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80116c8:	edc3 7a00 	vstr	s15, [r3]
    dcCurrent = ina238_GetCurrent(&hi2c3);
 80116cc:	4820      	ldr	r0, [pc, #128]	@ (8011750 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80116ce:	f7fe fa37 	bl	800fb40 <ina238_GetCurrent>
 80116d2:	eef0 7a40 	vmov.f32	s15, s0
 80116d6:	4b20      	ldr	r3, [pc, #128]	@ (8011758 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80116d8:	edc3 7a00 	vstr	s15, [r3]
    MI = pid(dcPid, dcVolt, 10.f);
 80116dc:	4b1f      	ldr	r3, [pc, #124]	@ (801175c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4a1c      	ldr	r2, [pc, #112]	@ (8011754 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80116e2:	edd2 7a00 	vldr	s15, [r2]
 80116e6:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80116ea:	eeb0 0a67 	vmov.f32	s0, s15
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fe fd01 	bl	80100f6 <pid>
 80116f4:	eef0 7a40 	vmov.f32	s15, s0
 80116f8:	4b0f      	ldr	r3, [pc, #60]	@ (8011738 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80116fa:	edc3 7a00 	vstr	s15, [r3]
  }
  /* USER CODE END Callback 1 */
}
 80116fe:	bf00      	nop
 8011700:	3718      	adds	r7, #24
 8011702:	46bd      	mov	sp, r7
 8011704:	ecbd 8b02 	vpop	{d8}
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	40001000 	.word	0x40001000
 8011710:	38000000 	.word	0x38000000
 8011714:	24000774 	.word	0x24000774
 8011718:	e000ed00 	.word	0xe000ed00
 801171c:	40533333 	.word	0x40533333
 8011720:	47800000 	.word	0x47800000
 8011724:	20000000 	.word	0x20000000
 8011728:	20000008 	.word	0x20000008
 801172c:	20000004 	.word	0x20000004
 8011730:	2000000c 	.word	0x2000000c
 8011734:	24000bb8 	.word	0x24000bb8
 8011738:	24000094 	.word	0x24000094
 801173c:	3fc90fdb 	.word	0x3fc90fdb
 8011740:	44fa0000 	.word	0x44fa0000
 8011744:	45000000 	.word	0x45000000
 8011748:	24000850 	.word	0x24000850
 801174c:	40000400 	.word	0x40000400
 8011750:	24000864 	.word	0x24000864
 8011754:	240008b8 	.word	0x240008b8
 8011758:	240008bc 	.word	0x240008bc
 801175c:	240008c0 	.word	0x240008c0

08011760 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8011760:	b480      	push	{r7}
 8011762:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8011764:	b672      	cpsid	i
}
 8011766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011768:	bf00      	nop
 801176a:	e7fd      	b.n	8011768 <Error_Handler+0x8>

0801176c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8011770:	4b27      	ldr	r3, [pc, #156]	@ (8011810 <MX_SPI1_Init+0xa4>)
 8011772:	4a28      	ldr	r2, [pc, #160]	@ (8011814 <MX_SPI1_Init+0xa8>)
 8011774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011776:	4b26      	ldr	r3, [pc, #152]	@ (8011810 <MX_SPI1_Init+0xa4>)
 8011778:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 801177c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 801177e:	4b24      	ldr	r3, [pc, #144]	@ (8011810 <MX_SPI1_Init+0xa4>)
 8011780:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8011784:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011786:	4b22      	ldr	r3, [pc, #136]	@ (8011810 <MX_SPI1_Init+0xa4>)
 8011788:	2207      	movs	r2, #7
 801178a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801178c:	4b20      	ldr	r3, [pc, #128]	@ (8011810 <MX_SPI1_Init+0xa4>)
 801178e:	2200      	movs	r2, #0
 8011790:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011792:	4b1f      	ldr	r3, [pc, #124]	@ (8011810 <MX_SPI1_Init+0xa4>)
 8011794:	2200      	movs	r2, #0
 8011796:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011798:	4b1d      	ldr	r3, [pc, #116]	@ (8011810 <MX_SPI1_Init+0xa4>)
 801179a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 801179e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80117a0:	4b1b      	ldr	r3, [pc, #108]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80117a6:	4b1a      	ldr	r3, [pc, #104]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117a8:	2200      	movs	r2, #0
 80117aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80117ac:	4b18      	ldr	r3, [pc, #96]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117ae:	2200      	movs	r2, #0
 80117b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80117b2:	4b17      	ldr	r3, [pc, #92]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117b4:	2200      	movs	r2, #0
 80117b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80117b8:	4b15      	ldr	r3, [pc, #84]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80117be:	4b14      	ldr	r3, [pc, #80]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80117c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80117c6:	4b12      	ldr	r3, [pc, #72]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117c8:	2200      	movs	r2, #0
 80117ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80117cc:	4b10      	ldr	r3, [pc, #64]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117ce:	2200      	movs	r2, #0
 80117d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80117d2:	4b0f      	ldr	r3, [pc, #60]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117d4:	2200      	movs	r2, #0
 80117d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80117d8:	4b0d      	ldr	r3, [pc, #52]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117da:	2200      	movs	r2, #0
 80117dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80117de:	4b0c      	ldr	r3, [pc, #48]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117e0:	2200      	movs	r2, #0
 80117e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80117e4:	4b0a      	ldr	r3, [pc, #40]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117e6:	2200      	movs	r2, #0
 80117e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80117ea:	4b09      	ldr	r3, [pc, #36]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117ec:	2200      	movs	r2, #0
 80117ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80117f0:	4b07      	ldr	r3, [pc, #28]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117f2:	2200      	movs	r2, #0
 80117f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80117f6:	4b06      	ldr	r3, [pc, #24]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117f8:	2200      	movs	r2, #0
 80117fa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80117fc:	4804      	ldr	r0, [pc, #16]	@ (8011810 <MX_SPI1_Init+0xa4>)
 80117fe:	f7f8 ff11 	bl	800a624 <HAL_SPI_Init>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d001      	beq.n	801180c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8011808:	f7ff ffaa 	bl	8011760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801180c:	bf00      	nop
 801180e:	bd80      	pop	{r7, pc}
 8011810:	240009c4 	.word	0x240009c4
 8011814:	40013000 	.word	0x40013000

08011818 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 801181c:	4b27      	ldr	r3, [pc, #156]	@ (80118bc <MX_SPI2_Init+0xa4>)
 801181e:	4a28      	ldr	r2, [pc, #160]	@ (80118c0 <MX_SPI2_Init+0xa8>)
 8011820:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011822:	4b26      	ldr	r3, [pc, #152]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011824:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011828:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 801182a:	4b24      	ldr	r3, [pc, #144]	@ (80118bc <MX_SPI2_Init+0xa4>)
 801182c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011830:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8011832:	4b22      	ldr	r3, [pc, #136]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011834:	2203      	movs	r2, #3
 8011836:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011838:	4b20      	ldr	r3, [pc, #128]	@ (80118bc <MX_SPI2_Init+0xa4>)
 801183a:	2200      	movs	r2, #0
 801183c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801183e:	4b1f      	ldr	r3, [pc, #124]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011840:	2200      	movs	r2, #0
 8011842:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011844:	4b1d      	ldr	r3, [pc, #116]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011846:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 801184a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801184c:	4b1b      	ldr	r3, [pc, #108]	@ (80118bc <MX_SPI2_Init+0xa4>)
 801184e:	2200      	movs	r2, #0
 8011850:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011852:	4b1a      	ldr	r3, [pc, #104]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011854:	2200      	movs	r2, #0
 8011856:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011858:	4b18      	ldr	r3, [pc, #96]	@ (80118bc <MX_SPI2_Init+0xa4>)
 801185a:	2200      	movs	r2, #0
 801185c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801185e:	4b17      	ldr	r3, [pc, #92]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011860:	2200      	movs	r2, #0
 8011862:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8011864:	4b15      	ldr	r3, [pc, #84]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011866:	2200      	movs	r2, #0
 8011868:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 801186a:	4b14      	ldr	r3, [pc, #80]	@ (80118bc <MX_SPI2_Init+0xa4>)
 801186c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011870:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8011872:	4b12      	ldr	r3, [pc, #72]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011874:	2200      	movs	r2, #0
 8011876:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8011878:	4b10      	ldr	r3, [pc, #64]	@ (80118bc <MX_SPI2_Init+0xa4>)
 801187a:	2200      	movs	r2, #0
 801187c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 801187e:	4b0f      	ldr	r3, [pc, #60]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011880:	2200      	movs	r2, #0
 8011882:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011884:	4b0d      	ldr	r3, [pc, #52]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011886:	2200      	movs	r2, #0
 8011888:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 801188a:	4b0c      	ldr	r3, [pc, #48]	@ (80118bc <MX_SPI2_Init+0xa4>)
 801188c:	2200      	movs	r2, #0
 801188e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8011890:	4b0a      	ldr	r3, [pc, #40]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011892:	2200      	movs	r2, #0
 8011894:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8011896:	4b09      	ldr	r3, [pc, #36]	@ (80118bc <MX_SPI2_Init+0xa4>)
 8011898:	2200      	movs	r2, #0
 801189a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 801189c:	4b07      	ldr	r3, [pc, #28]	@ (80118bc <MX_SPI2_Init+0xa4>)
 801189e:	2200      	movs	r2, #0
 80118a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80118a2:	4b06      	ldr	r3, [pc, #24]	@ (80118bc <MX_SPI2_Init+0xa4>)
 80118a4:	2200      	movs	r2, #0
 80118a6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80118a8:	4804      	ldr	r0, [pc, #16]	@ (80118bc <MX_SPI2_Init+0xa4>)
 80118aa:	f7f8 febb 	bl	800a624 <HAL_SPI_Init>
 80118ae:	4603      	mov	r3, r0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d001      	beq.n	80118b8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80118b4:	f7ff ff54 	bl	8011760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80118b8:	bf00      	nop
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	24000a4c 	.word	0x24000a4c
 80118c0:	40003800 	.word	0x40003800

080118c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b08c      	sub	sp, #48	@ 0x30
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80118cc:	f107 031c 	add.w	r3, r7, #28
 80118d0:	2200      	movs	r2, #0
 80118d2:	601a      	str	r2, [r3, #0]
 80118d4:	605a      	str	r2, [r3, #4]
 80118d6:	609a      	str	r2, [r3, #8]
 80118d8:	60da      	str	r2, [r3, #12]
 80118da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a34      	ldr	r2, [pc, #208]	@ (80119b4 <HAL_SPI_MspInit+0xf0>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d12e      	bne.n	8011944 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80118e6:	4b34      	ldr	r3, [pc, #208]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 80118e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80118ec:	4a32      	ldr	r2, [pc, #200]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 80118ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80118f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80118f6:	4b30      	ldr	r3, [pc, #192]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 80118f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80118fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011900:	61bb      	str	r3, [r7, #24]
 8011902:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011904:	4b2c      	ldr	r3, [pc, #176]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 8011906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801190a:	4a2b      	ldr	r2, [pc, #172]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 801190c:	f043 0301 	orr.w	r3, r3, #1
 8011910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011914:	4b28      	ldr	r3, [pc, #160]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 8011916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801191a:	f003 0301 	and.w	r3, r3, #1
 801191e:	617b      	str	r3, [r7, #20]
 8011920:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8011922:	23a0      	movs	r3, #160	@ 0xa0
 8011924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011926:	2302      	movs	r3, #2
 8011928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801192a:	2300      	movs	r3, #0
 801192c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801192e:	2301      	movs	r3, #1
 8011930:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011932:	2305      	movs	r3, #5
 8011934:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011936:	f107 031c 	add.w	r3, r7, #28
 801193a:	4619      	mov	r1, r3
 801193c:	481f      	ldr	r0, [pc, #124]	@ (80119bc <HAL_SPI_MspInit+0xf8>)
 801193e:	f7f2 fe71 	bl	8004624 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8011942:	e032      	b.n	80119aa <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4a1d      	ldr	r2, [pc, #116]	@ (80119c0 <HAL_SPI_MspInit+0xfc>)
 801194a:	4293      	cmp	r3, r2
 801194c:	d12d      	bne.n	80119aa <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 801194e:	4b1a      	ldr	r3, [pc, #104]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 8011950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011954:	4a18      	ldr	r2, [pc, #96]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 8011956:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801195a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801195e:	4b16      	ldr	r3, [pc, #88]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 8011960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011968:	613b      	str	r3, [r7, #16]
 801196a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801196c:	4b12      	ldr	r3, [pc, #72]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 801196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011972:	4a11      	ldr	r2, [pc, #68]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 8011974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801197c:	4b0e      	ldr	r3, [pc, #56]	@ (80119b8 <HAL_SPI_MspInit+0xf4>)
 801197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011986:	60fb      	str	r3, [r7, #12]
 8011988:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 801198a:	2306      	movs	r3, #6
 801198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801198e:	2302      	movs	r3, #2
 8011990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011992:	2300      	movs	r3, #0
 8011994:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011996:	2300      	movs	r3, #0
 8011998:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801199a:	2305      	movs	r3, #5
 801199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801199e:	f107 031c 	add.w	r3, r7, #28
 80119a2:	4619      	mov	r1, r3
 80119a4:	4807      	ldr	r0, [pc, #28]	@ (80119c4 <HAL_SPI_MspInit+0x100>)
 80119a6:	f7f2 fe3d 	bl	8004624 <HAL_GPIO_Init>
}
 80119aa:	bf00      	nop
 80119ac:	3730      	adds	r7, #48	@ 0x30
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}
 80119b2:	bf00      	nop
 80119b4:	40013000 	.word	0x40013000
 80119b8:	58024400 	.word	0x58024400
 80119bc:	58020000 	.word	0x58020000
 80119c0:	40003800 	.word	0x40003800
 80119c4:	58022000 	.word	0x58022000

080119c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80119ce:	4b0a      	ldr	r3, [pc, #40]	@ (80119f8 <HAL_MspInit+0x30>)
 80119d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80119d4:	4a08      	ldr	r2, [pc, #32]	@ (80119f8 <HAL_MspInit+0x30>)
 80119d6:	f043 0302 	orr.w	r3, r3, #2
 80119da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80119de:	4b06      	ldr	r3, [pc, #24]	@ (80119f8 <HAL_MspInit+0x30>)
 80119e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80119e4:	f003 0302 	and.w	r3, r3, #2
 80119e8:	607b      	str	r3, [r7, #4]
 80119ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80119ec:	bf00      	nop
 80119ee:	370c      	adds	r7, #12
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr
 80119f8:	58024400 	.word	0x58024400

080119fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b090      	sub	sp, #64	@ 0x40
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2b0f      	cmp	r3, #15
 8011a08:	d827      	bhi.n	8011a5a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	6879      	ldr	r1, [r7, #4]
 8011a0e:	2036      	movs	r0, #54	@ 0x36
 8011a10:	f7f0 fa40 	bl	8001e94 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011a14:	2036      	movs	r0, #54	@ 0x36
 8011a16:	f7f0 fa57 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8011a1a:	4a29      	ldr	r2, [pc, #164]	@ (8011ac0 <HAL_InitTick+0xc4>)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011a20:	4b28      	ldr	r3, [pc, #160]	@ (8011ac4 <HAL_InitTick+0xc8>)
 8011a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011a26:	4a27      	ldr	r2, [pc, #156]	@ (8011ac4 <HAL_InitTick+0xc8>)
 8011a28:	f043 0310 	orr.w	r3, r3, #16
 8011a2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8011a30:	4b24      	ldr	r3, [pc, #144]	@ (8011ac4 <HAL_InitTick+0xc8>)
 8011a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011a36:	f003 0310 	and.w	r3, r3, #16
 8011a3a:	60fb      	str	r3, [r7, #12]
 8011a3c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011a3e:	f107 0210 	add.w	r2, r7, #16
 8011a42:	f107 0314 	add.w	r3, r7, #20
 8011a46:	4611      	mov	r1, r2
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7f6 f8ab 	bl	8007ba4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8011a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8011a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d106      	bne.n	8011a66 <HAL_InitTick+0x6a>
 8011a58:	e001      	b.n	8011a5e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	e02b      	b.n	8011ab6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8011a5e:	f7f6 f88b 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 8011a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011a64:	e004      	b.n	8011a70 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8011a66:	f7f6 f887 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	005b      	lsls	r3, r3, #1
 8011a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8011a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a72:	4a15      	ldr	r2, [pc, #84]	@ (8011ac8 <HAL_InitTick+0xcc>)
 8011a74:	fba2 2303 	umull	r2, r3, r2, r3
 8011a78:	0c9b      	lsrs	r3, r3, #18
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8011a7e:	4b13      	ldr	r3, [pc, #76]	@ (8011acc <HAL_InitTick+0xd0>)
 8011a80:	4a13      	ldr	r2, [pc, #76]	@ (8011ad0 <HAL_InitTick+0xd4>)
 8011a82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8011a84:	4b11      	ldr	r3, [pc, #68]	@ (8011acc <HAL_InitTick+0xd0>)
 8011a86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8011a8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8011a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8011acc <HAL_InitTick+0xd0>)
 8011a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8011a92:	4b0e      	ldr	r3, [pc, #56]	@ (8011acc <HAL_InitTick+0xd0>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011a98:	4b0c      	ldr	r3, [pc, #48]	@ (8011acc <HAL_InitTick+0xd0>)
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8011a9e:	480b      	ldr	r0, [pc, #44]	@ (8011acc <HAL_InitTick+0xd0>)
 8011aa0:	f7f9 f9bb 	bl	800ae1a <HAL_TIM_Base_Init>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d104      	bne.n	8011ab4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8011aaa:	4808      	ldr	r0, [pc, #32]	@ (8011acc <HAL_InitTick+0xd0>)
 8011aac:	f7f9 fa0c 	bl	800aec8 <HAL_TIM_Base_Start_IT>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	e000      	b.n	8011ab6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8011ab4:	2301      	movs	r3, #1
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3740      	adds	r7, #64	@ 0x40
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	24000000 	.word	0x24000000
 8011ac4:	58024400 	.word	0x58024400
 8011ac8:	431bde83 	.word	0x431bde83
 8011acc:	24000ad4 	.word	0x24000ad4
 8011ad0:	40001000 	.word	0x40001000

08011ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8011ad8:	bf00      	nop
 8011ada:	e7fd      	b.n	8011ad8 <NMI_Handler+0x4>

08011adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011adc:	b480      	push	{r7}
 8011ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011ae0:	bf00      	nop
 8011ae2:	e7fd      	b.n	8011ae0 <HardFault_Handler+0x4>

08011ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011ae8:	bf00      	nop
 8011aea:	e7fd      	b.n	8011ae8 <MemManage_Handler+0x4>

08011aec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011aec:	b480      	push	{r7}
 8011aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011af0:	bf00      	nop
 8011af2:	e7fd      	b.n	8011af0 <BusFault_Handler+0x4>

08011af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011af4:	b480      	push	{r7}
 8011af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011af8:	bf00      	nop
 8011afa:	e7fd      	b.n	8011af8 <UsageFault_Handler+0x4>

08011afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011afc:	b480      	push	{r7}
 8011afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011b00:	bf00      	nop
 8011b02:	46bd      	mov	sp, r7
 8011b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b08:	4770      	bx	lr

08011b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011b0a:	b480      	push	{r7}
 8011b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011b0e:	bf00      	nop
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr

08011b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011b1c:	bf00      	nop
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011b26:	b480      	push	{r7}
 8011b28:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011b2a:	bf00      	nop
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr

08011b34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8011b38:	4802      	ldr	r0, [pc, #8]	@ (8011b44 <DMA1_Stream0_IRQHandler+0x10>)
 8011b3a:	f7f1 fa61 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8011b3e:	bf00      	nop
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	240007d8 	.word	0x240007d8

08011b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8011b4c:	4802      	ldr	r0, [pc, #8]	@ (8011b58 <TIM2_IRQHandler+0x10>)
 8011b4e:	f7f9 fba3 	bl	800b298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8011b52:	bf00      	nop
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	24000b20 	.word	0x24000b20

08011b5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8011b60:	4802      	ldr	r0, [pc, #8]	@ (8011b6c <TIM3_IRQHandler+0x10>)
 8011b62:	f7f9 fb99 	bl	800b298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8011b66:	bf00      	nop
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	24000b6c 	.word	0x24000b6c

08011b70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8011b74:	4b06      	ldr	r3, [pc, #24]	@ (8011b90 <TIM6_DAC_IRQHandler+0x20>)
 8011b76:	791b      	ldrb	r3, [r3, #4]
 8011b78:	b2db      	uxtb	r3, r3
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d002      	beq.n	8011b84 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8011b7e:	4804      	ldr	r0, [pc, #16]	@ (8011b90 <TIM6_DAC_IRQHandler+0x20>)
 8011b80:	f7f0 faa1 	bl	80020c6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8011b84:	4803      	ldr	r0, [pc, #12]	@ (8011b94 <TIM6_DAC_IRQHandler+0x24>)
 8011b86:	f7f9 fb87 	bl	800b298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8011b8a:	bf00      	nop
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	24000850 	.word	0x24000850
 8011b94:	24000ad4 	.word	0x24000ad4

08011b98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8011b9c:	4802      	ldr	r0, [pc, #8]	@ (8011ba8 <OTG_FS_IRQHandler+0x10>)
 8011b9e:	f7f3 fe89 	bl	80058b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8011ba2:	bf00      	nop
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	24001ee0 	.word	0x24001ee0

08011bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011bac:	b480      	push	{r7}
 8011bae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8011bb0:	4b37      	ldr	r3, [pc, #220]	@ (8011c90 <SystemInit+0xe4>)
 8011bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011bb6:	4a36      	ldr	r2, [pc, #216]	@ (8011c90 <SystemInit+0xe4>)
 8011bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8011bc0:	4b34      	ldr	r3, [pc, #208]	@ (8011c94 <SystemInit+0xe8>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f003 030f 	and.w	r3, r3, #15
 8011bc8:	2b06      	cmp	r3, #6
 8011bca:	d807      	bhi.n	8011bdc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8011bcc:	4b31      	ldr	r3, [pc, #196]	@ (8011c94 <SystemInit+0xe8>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f023 030f 	bic.w	r3, r3, #15
 8011bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8011c94 <SystemInit+0xe8>)
 8011bd6:	f043 0307 	orr.w	r3, r3, #7
 8011bda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8011bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8011c98 <SystemInit+0xec>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	4a2d      	ldr	r2, [pc, #180]	@ (8011c98 <SystemInit+0xec>)
 8011be2:	f043 0301 	orr.w	r3, r3, #1
 8011be6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011be8:	4b2b      	ldr	r3, [pc, #172]	@ (8011c98 <SystemInit+0xec>)
 8011bea:	2200      	movs	r2, #0
 8011bec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8011bee:	4b2a      	ldr	r3, [pc, #168]	@ (8011c98 <SystemInit+0xec>)
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	4929      	ldr	r1, [pc, #164]	@ (8011c98 <SystemInit+0xec>)
 8011bf4:	4b29      	ldr	r3, [pc, #164]	@ (8011c9c <SystemInit+0xf0>)
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8011bfa:	4b26      	ldr	r3, [pc, #152]	@ (8011c94 <SystemInit+0xe8>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	f003 0308 	and.w	r3, r3, #8
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d007      	beq.n	8011c16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8011c06:	4b23      	ldr	r3, [pc, #140]	@ (8011c94 <SystemInit+0xe8>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f023 030f 	bic.w	r3, r3, #15
 8011c0e:	4a21      	ldr	r2, [pc, #132]	@ (8011c94 <SystemInit+0xe8>)
 8011c10:	f043 0307 	orr.w	r3, r3, #7
 8011c14:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8011c16:	4b20      	ldr	r3, [pc, #128]	@ (8011c98 <SystemInit+0xec>)
 8011c18:	2200      	movs	r2, #0
 8011c1a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8011c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8011c98 <SystemInit+0xec>)
 8011c1e:	2200      	movs	r2, #0
 8011c20:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8011c22:	4b1d      	ldr	r3, [pc, #116]	@ (8011c98 <SystemInit+0xec>)
 8011c24:	2200      	movs	r2, #0
 8011c26:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8011c28:	4b1b      	ldr	r3, [pc, #108]	@ (8011c98 <SystemInit+0xec>)
 8011c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8011ca0 <SystemInit+0xf4>)
 8011c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8011c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8011c98 <SystemInit+0xec>)
 8011c30:	4a1c      	ldr	r2, [pc, #112]	@ (8011ca4 <SystemInit+0xf8>)
 8011c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8011c34:	4b18      	ldr	r3, [pc, #96]	@ (8011c98 <SystemInit+0xec>)
 8011c36:	4a1c      	ldr	r2, [pc, #112]	@ (8011ca8 <SystemInit+0xfc>)
 8011c38:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8011c3a:	4b17      	ldr	r3, [pc, #92]	@ (8011c98 <SystemInit+0xec>)
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8011c40:	4b15      	ldr	r3, [pc, #84]	@ (8011c98 <SystemInit+0xec>)
 8011c42:	4a19      	ldr	r2, [pc, #100]	@ (8011ca8 <SystemInit+0xfc>)
 8011c44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8011c46:	4b14      	ldr	r3, [pc, #80]	@ (8011c98 <SystemInit+0xec>)
 8011c48:	2200      	movs	r2, #0
 8011c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8011c4c:	4b12      	ldr	r3, [pc, #72]	@ (8011c98 <SystemInit+0xec>)
 8011c4e:	4a16      	ldr	r2, [pc, #88]	@ (8011ca8 <SystemInit+0xfc>)
 8011c50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8011c52:	4b11      	ldr	r3, [pc, #68]	@ (8011c98 <SystemInit+0xec>)
 8011c54:	2200      	movs	r2, #0
 8011c56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8011c58:	4b0f      	ldr	r3, [pc, #60]	@ (8011c98 <SystemInit+0xec>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8011c98 <SystemInit+0xec>)
 8011c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011c62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8011c64:	4b0c      	ldr	r3, [pc, #48]	@ (8011c98 <SystemInit+0xec>)
 8011c66:	2200      	movs	r2, #0
 8011c68:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8011c6a:	4b10      	ldr	r3, [pc, #64]	@ (8011cac <SystemInit+0x100>)
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	4b10      	ldr	r3, [pc, #64]	@ (8011cb0 <SystemInit+0x104>)
 8011c70:	4013      	ands	r3, r2
 8011c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011c76:	d202      	bcs.n	8011c7e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8011c78:	4b0e      	ldr	r3, [pc, #56]	@ (8011cb4 <SystemInit+0x108>)
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8011c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8011cb8 <SystemInit+0x10c>)
 8011c80:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8011c84:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8011c86:	bf00      	nop
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr
 8011c90:	e000ed00 	.word	0xe000ed00
 8011c94:	52002000 	.word	0x52002000
 8011c98:	58024400 	.word	0x58024400
 8011c9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8011ca0:	02020200 	.word	0x02020200
 8011ca4:	01ff0000 	.word	0x01ff0000
 8011ca8:	01010280 	.word	0x01010280
 8011cac:	5c001000 	.word	0x5c001000
 8011cb0:	ffff0000 	.word	0xffff0000
 8011cb4:	51008108 	.word	0x51008108
 8011cb8:	52004000 	.word	0x52004000

08011cbc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b088      	sub	sp, #32
 8011cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011cc2:	f107 0310 	add.w	r3, r7, #16
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	601a      	str	r2, [r3, #0]
 8011cca:	605a      	str	r2, [r3, #4]
 8011ccc:	609a      	str	r2, [r3, #8]
 8011cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011cd0:	1d3b      	adds	r3, r7, #4
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	601a      	str	r2, [r3, #0]
 8011cd6:	605a      	str	r2, [r3, #4]
 8011cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8011cda:	4b1e      	ldr	r3, [pc, #120]	@ (8011d54 <MX_TIM2_Init+0x98>)
 8011cdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011ce0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8011ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8011d54 <MX_TIM2_Init+0x98>)
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8011d54 <MX_TIM2_Init+0x98>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8011cee:	4b19      	ldr	r3, [pc, #100]	@ (8011d54 <MX_TIM2_Init+0x98>)
 8011cf0:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8011cf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011cf6:	4b17      	ldr	r3, [pc, #92]	@ (8011d54 <MX_TIM2_Init+0x98>)
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011cfc:	4b15      	ldr	r3, [pc, #84]	@ (8011d54 <MX_TIM2_Init+0x98>)
 8011cfe:	2200      	movs	r2, #0
 8011d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8011d02:	4814      	ldr	r0, [pc, #80]	@ (8011d54 <MX_TIM2_Init+0x98>)
 8011d04:	f7f9 f889 	bl	800ae1a <HAL_TIM_Base_Init>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8011d0e:	f7ff fd27 	bl	8011760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011d12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8011d18:	f107 0310 	add.w	r3, r7, #16
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	480d      	ldr	r0, [pc, #52]	@ (8011d54 <MX_TIM2_Init+0x98>)
 8011d20:	f7f9 fcd6 	bl	800b6d0 <HAL_TIM_ConfigClockSource>
 8011d24:	4603      	mov	r3, r0
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d001      	beq.n	8011d2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8011d2a:	f7ff fd19 	bl	8011760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011d32:	2300      	movs	r3, #0
 8011d34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8011d36:	1d3b      	adds	r3, r7, #4
 8011d38:	4619      	mov	r1, r3
 8011d3a:	4806      	ldr	r0, [pc, #24]	@ (8011d54 <MX_TIM2_Init+0x98>)
 8011d3c:	f7fa fa28 	bl	800c190 <HAL_TIMEx_MasterConfigSynchronization>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d001      	beq.n	8011d4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8011d46:	f7ff fd0b 	bl	8011760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8011d4a:	bf00      	nop
 8011d4c:	3720      	adds	r7, #32
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	24000b20 	.word	0x24000b20

08011d58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b088      	sub	sp, #32
 8011d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011d5e:	f107 0310 	add.w	r3, r7, #16
 8011d62:	2200      	movs	r2, #0
 8011d64:	601a      	str	r2, [r3, #0]
 8011d66:	605a      	str	r2, [r3, #4]
 8011d68:	609a      	str	r2, [r3, #8]
 8011d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011d6c:	1d3b      	adds	r3, r7, #4
 8011d6e:	2200      	movs	r2, #0
 8011d70:	601a      	str	r2, [r3, #0]
 8011d72:	605a      	str	r2, [r3, #4]
 8011d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8011d76:	4b1d      	ldr	r3, [pc, #116]	@ (8011dec <MX_TIM3_Init+0x94>)
 8011d78:	4a1d      	ldr	r2, [pc, #116]	@ (8011df0 <MX_TIM3_Init+0x98>)
 8011d7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8011d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8011dec <MX_TIM3_Init+0x94>)
 8011d7e:	2263      	movs	r2, #99	@ 0x63
 8011d80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011d82:	4b1a      	ldr	r3, [pc, #104]	@ (8011dec <MX_TIM3_Init+0x94>)
 8011d84:	2200      	movs	r2, #0
 8011d86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24000-1;
 8011d88:	4b18      	ldr	r3, [pc, #96]	@ (8011dec <MX_TIM3_Init+0x94>)
 8011d8a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8011d8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011d90:	4b16      	ldr	r3, [pc, #88]	@ (8011dec <MX_TIM3_Init+0x94>)
 8011d92:	2200      	movs	r2, #0
 8011d94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011d96:	4b15      	ldr	r3, [pc, #84]	@ (8011dec <MX_TIM3_Init+0x94>)
 8011d98:	2200      	movs	r2, #0
 8011d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8011d9c:	4813      	ldr	r0, [pc, #76]	@ (8011dec <MX_TIM3_Init+0x94>)
 8011d9e:	f7f9 f83c 	bl	800ae1a <HAL_TIM_Base_Init>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d001      	beq.n	8011dac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8011da8:	f7ff fcda 	bl	8011760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011dac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011db0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8011db2:	f107 0310 	add.w	r3, r7, #16
 8011db6:	4619      	mov	r1, r3
 8011db8:	480c      	ldr	r0, [pc, #48]	@ (8011dec <MX_TIM3_Init+0x94>)
 8011dba:	f7f9 fc89 	bl	800b6d0 <HAL_TIM_ConfigClockSource>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d001      	beq.n	8011dc8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8011dc4:	f7ff fccc 	bl	8011760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011dd0:	1d3b      	adds	r3, r7, #4
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	4805      	ldr	r0, [pc, #20]	@ (8011dec <MX_TIM3_Init+0x94>)
 8011dd6:	f7fa f9db 	bl	800c190 <HAL_TIMEx_MasterConfigSynchronization>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d001      	beq.n	8011de4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8011de0:	f7ff fcbe 	bl	8011760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8011de4:	bf00      	nop
 8011de6:	3720      	adds	r7, #32
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	24000b6c 	.word	0x24000b6c
 8011df0:	40000400 	.word	0x40000400

08011df4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b09a      	sub	sp, #104	@ 0x68
 8011df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011dfa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011dfe:	2200      	movs	r2, #0
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	605a      	str	r2, [r3, #4]
 8011e04:	609a      	str	r2, [r3, #8]
 8011e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011e08:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	605a      	str	r2, [r3, #4]
 8011e12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011e14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011e18:	2200      	movs	r2, #0
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	605a      	str	r2, [r3, #4]
 8011e1e:	609a      	str	r2, [r3, #8]
 8011e20:	60da      	str	r2, [r3, #12]
 8011e22:	611a      	str	r2, [r3, #16]
 8011e24:	615a      	str	r2, [r3, #20]
 8011e26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8011e28:	1d3b      	adds	r3, r7, #4
 8011e2a:	222c      	movs	r2, #44	@ 0x2c
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f001 fcdb 	bl	80137ea <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8011e34:	4b4a      	ldr	r3, [pc, #296]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e36:	4a4b      	ldr	r2, [pc, #300]	@ (8011f64 <MX_TIM8_Init+0x170>)
 8011e38:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8011e3a:	4b49      	ldr	r3, [pc, #292]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011e40:	4b47      	ldr	r3, [pc, #284]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e42:	2200      	movs	r2, #0
 8011e44:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 8011e46:	4b46      	ldr	r3, [pc, #280]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e48:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8011e4c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011e4e:	4b44      	ldr	r3, [pc, #272]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e50:	2200      	movs	r2, #0
 8011e52:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8011e54:	4b42      	ldr	r3, [pc, #264]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e56:	2200      	movs	r2, #0
 8011e58:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011e5a:	4b41      	ldr	r3, [pc, #260]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8011e60:	483f      	ldr	r0, [pc, #252]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e62:	f7f8 ffda 	bl	800ae1a <HAL_TIM_Base_Init>
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d001      	beq.n	8011e70 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8011e6c:	f7ff fc78 	bl	8011760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011e74:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8011e76:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4838      	ldr	r0, [pc, #224]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e7e:	f7f9 fc27 	bl	800b6d0 <HAL_TIM_ConfigClockSource>
 8011e82:	4603      	mov	r3, r0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d001      	beq.n	8011e8c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8011e88:	f7ff fc6a 	bl	8011760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8011e8c:	4834      	ldr	r0, [pc, #208]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011e8e:	f7f9 f893 	bl	800afb8 <HAL_TIM_PWM_Init>
 8011e92:	4603      	mov	r3, r0
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d001      	beq.n	8011e9c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8011e98:	f7ff fc62 	bl	8011760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8011ea8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8011eac:	4619      	mov	r1, r3
 8011eae:	482c      	ldr	r0, [pc, #176]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011eb0:	f7fa f96e 	bl	800c190 <HAL_TIMEx_MasterConfigSynchronization>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d001      	beq.n	8011ebe <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8011eba:	f7ff fc51 	bl	8011760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011ebe:	2360      	movs	r3, #96	@ 0x60
 8011ec0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 6000-1;
 8011ec2:	f241 736f 	movw	r3, #5999	@ 0x176f
 8011ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8011ed0:	2304      	movs	r3, #4
 8011ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011edc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	481e      	ldr	r0, [pc, #120]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011ee6:	f7f9 fadf 	bl	800b4a8 <HAL_TIM_PWM_ConfigChannel>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d001      	beq.n	8011ef4 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8011ef0:	f7ff fc36 	bl	8011760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011ef4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011ef8:	2204      	movs	r2, #4
 8011efa:	4619      	mov	r1, r3
 8011efc:	4818      	ldr	r0, [pc, #96]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011efe:	f7f9 fad3 	bl	800b4a8 <HAL_TIM_PWM_ConfigChannel>
 8011f02:	4603      	mov	r3, r0
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d001      	beq.n	8011f0c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8011f08:	f7ff fc2a 	bl	8011760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8011f10:	2300      	movs	r3, #0
 8011f12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8011f14:	2300      	movs	r3, #0
 8011f16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8011f20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011f24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8011f2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011f32:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8011f34:	2300      	movs	r3, #0
 8011f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8011f3c:	1d3b      	adds	r3, r7, #4
 8011f3e:	4619      	mov	r1, r3
 8011f40:	4807      	ldr	r0, [pc, #28]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011f42:	f7fa f9b3 	bl	800c2ac <HAL_TIMEx_ConfigBreakDeadTime>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d001      	beq.n	8011f50 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8011f4c:	f7ff fc08 	bl	8011760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8011f50:	4803      	ldr	r0, [pc, #12]	@ (8011f60 <MX_TIM8_Init+0x16c>)
 8011f52:	f000 f865 	bl	8012020 <HAL_TIM_MspPostInit>

}
 8011f56:	bf00      	nop
 8011f58:	3768      	adds	r7, #104	@ 0x68
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	24000bb8 	.word	0x24000bb8
 8011f64:	40010400 	.word	0x40010400

08011f68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b086      	sub	sp, #24
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f78:	d117      	bne.n	8011faa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8011f7a:	4b26      	ldr	r3, [pc, #152]	@ (8012014 <HAL_TIM_Base_MspInit+0xac>)
 8011f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011f80:	4a24      	ldr	r2, [pc, #144]	@ (8012014 <HAL_TIM_Base_MspInit+0xac>)
 8011f82:	f043 0301 	orr.w	r3, r3, #1
 8011f86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8011f8a:	4b22      	ldr	r3, [pc, #136]	@ (8012014 <HAL_TIM_Base_MspInit+0xac>)
 8011f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011f90:	f003 0301 	and.w	r3, r3, #1
 8011f94:	617b      	str	r3, [r7, #20]
 8011f96:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8011f98:	2200      	movs	r2, #0
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	201c      	movs	r0, #28
 8011f9e:	f7ef ff79 	bl	8001e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8011fa2:	201c      	movs	r0, #28
 8011fa4:	f7ef ff90 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8011fa8:	e030      	b.n	801200c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM3)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a1a      	ldr	r2, [pc, #104]	@ (8012018 <HAL_TIM_Base_MspInit+0xb0>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d117      	bne.n	8011fe4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011fb4:	4b17      	ldr	r3, [pc, #92]	@ (8012014 <HAL_TIM_Base_MspInit+0xac>)
 8011fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011fba:	4a16      	ldr	r2, [pc, #88]	@ (8012014 <HAL_TIM_Base_MspInit+0xac>)
 8011fbc:	f043 0302 	orr.w	r3, r3, #2
 8011fc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8011fc4:	4b13      	ldr	r3, [pc, #76]	@ (8012014 <HAL_TIM_Base_MspInit+0xac>)
 8011fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011fca:	f003 0302 	and.w	r3, r3, #2
 8011fce:	613b      	str	r3, [r7, #16]
 8011fd0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	201d      	movs	r0, #29
 8011fd8:	f7ef ff5c 	bl	8001e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8011fdc:	201d      	movs	r0, #29
 8011fde:	f7ef ff73 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
}
 8011fe2:	e013      	b.n	801200c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM8)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	4a0c      	ldr	r2, [pc, #48]	@ (801201c <HAL_TIM_Base_MspInit+0xb4>)
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d10e      	bne.n	801200c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011fee:	4b09      	ldr	r3, [pc, #36]	@ (8012014 <HAL_TIM_Base_MspInit+0xac>)
 8011ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011ff4:	4a07      	ldr	r2, [pc, #28]	@ (8012014 <HAL_TIM_Base_MspInit+0xac>)
 8011ff6:	f043 0302 	orr.w	r3, r3, #2
 8011ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8011ffe:	4b05      	ldr	r3, [pc, #20]	@ (8012014 <HAL_TIM_Base_MspInit+0xac>)
 8012000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012004:	f003 0302 	and.w	r3, r3, #2
 8012008:	60fb      	str	r3, [r7, #12]
 801200a:	68fb      	ldr	r3, [r7, #12]
}
 801200c:	bf00      	nop
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	58024400 	.word	0x58024400
 8012018:	40000400 	.word	0x40000400
 801201c:	40010400 	.word	0x40010400

08012020 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b088      	sub	sp, #32
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012028:	f107 030c 	add.w	r3, r7, #12
 801202c:	2200      	movs	r2, #0
 801202e:	601a      	str	r2, [r3, #0]
 8012030:	605a      	str	r2, [r3, #4]
 8012032:	609a      	str	r2, [r3, #8]
 8012034:	60da      	str	r2, [r3, #12]
 8012036:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4a12      	ldr	r2, [pc, #72]	@ (8012088 <HAL_TIM_MspPostInit+0x68>)
 801203e:	4293      	cmp	r3, r2
 8012040:	d11e      	bne.n	8012080 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012042:	4b12      	ldr	r3, [pc, #72]	@ (801208c <HAL_TIM_MspPostInit+0x6c>)
 8012044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012048:	4a10      	ldr	r2, [pc, #64]	@ (801208c <HAL_TIM_MspPostInit+0x6c>)
 801204a:	f043 0304 	orr.w	r3, r3, #4
 801204e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012052:	4b0e      	ldr	r3, [pc, #56]	@ (801208c <HAL_TIM_MspPostInit+0x6c>)
 8012054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012058:	f003 0304 	and.w	r3, r3, #4
 801205c:	60bb      	str	r3, [r7, #8]
 801205e:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8012060:	23c0      	movs	r3, #192	@ 0xc0
 8012062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012064:	2302      	movs	r3, #2
 8012066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012068:	2300      	movs	r3, #0
 801206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801206c:	2303      	movs	r3, #3
 801206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8012070:	2303      	movs	r3, #3
 8012072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012074:	f107 030c 	add.w	r3, r7, #12
 8012078:	4619      	mov	r1, r3
 801207a:	4805      	ldr	r0, [pc, #20]	@ (8012090 <HAL_TIM_MspPostInit+0x70>)
 801207c:	f7f2 fad2 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8012080:	bf00      	nop
 8012082:	3720      	adds	r7, #32
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	40010400 	.word	0x40010400
 801208c:	58024400 	.word	0x58024400
 8012090:	58020800 	.word	0x58020800

08012094 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012098:	2200      	movs	r2, #0
 801209a:	4913      	ldr	r1, [pc, #76]	@ (80120e8 <MX_USB_DEVICE_Init+0x54>)
 801209c:	4813      	ldr	r0, [pc, #76]	@ (80120ec <MX_USB_DEVICE_Init+0x58>)
 801209e:	f7fc f985 	bl	800e3ac <USBD_Init>
 80120a2:	4603      	mov	r3, r0
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d001      	beq.n	80120ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80120a8:	f7ff fb5a 	bl	8011760 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80120ac:	4910      	ldr	r1, [pc, #64]	@ (80120f0 <MX_USB_DEVICE_Init+0x5c>)
 80120ae:	480f      	ldr	r0, [pc, #60]	@ (80120ec <MX_USB_DEVICE_Init+0x58>)
 80120b0:	f7fc f9ac 	bl	800e40c <USBD_RegisterClass>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d001      	beq.n	80120be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80120ba:	f7ff fb51 	bl	8011760 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80120be:	490d      	ldr	r1, [pc, #52]	@ (80120f4 <MX_USB_DEVICE_Init+0x60>)
 80120c0:	480a      	ldr	r0, [pc, #40]	@ (80120ec <MX_USB_DEVICE_Init+0x58>)
 80120c2:	f7fc f8e3 	bl	800e28c <USBD_CDC_RegisterInterface>
 80120c6:	4603      	mov	r3, r0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d001      	beq.n	80120d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80120cc:	f7ff fb48 	bl	8011760 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80120d0:	4806      	ldr	r0, [pc, #24]	@ (80120ec <MX_USB_DEVICE_Init+0x58>)
 80120d2:	f7fc f9d1 	bl	800e478 <USBD_Start>
 80120d6:	4603      	mov	r3, r0
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d001      	beq.n	80120e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80120dc:	f7ff fb40 	bl	8011760 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80120e0:	f7f4 fd80 	bl	8006be4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80120e4:	bf00      	nop
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	240000b4 	.word	0x240000b4
 80120ec:	24000c04 	.word	0x24000c04
 80120f0:	24000014 	.word	0x24000014
 80120f4:	240000a0 	.word	0x240000a0

080120f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80120fc:	2200      	movs	r2, #0
 80120fe:	4905      	ldr	r1, [pc, #20]	@ (8012114 <CDC_Init_FS+0x1c>)
 8012100:	4805      	ldr	r0, [pc, #20]	@ (8012118 <CDC_Init_FS+0x20>)
 8012102:	f7fc f8dd 	bl	800e2c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012106:	4905      	ldr	r1, [pc, #20]	@ (801211c <CDC_Init_FS+0x24>)
 8012108:	4803      	ldr	r0, [pc, #12]	@ (8012118 <CDC_Init_FS+0x20>)
 801210a:	f7fc f8fb 	bl	800e304 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801210e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012110:	4618      	mov	r0, r3
 8012112:	bd80      	pop	{r7, pc}
 8012114:	240016e0 	.word	0x240016e0
 8012118:	24000c04 	.word	0x24000c04
 801211c:	24000ee0 	.word	0x24000ee0

08012120 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012120:	b480      	push	{r7}
 8012122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012124:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012126:	4618      	mov	r0, r3
 8012128:	46bd      	mov	sp, r7
 801212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212e:	4770      	bx	lr

08012130 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012130:	b480      	push	{r7}
 8012132:	b083      	sub	sp, #12
 8012134:	af00      	add	r7, sp, #0
 8012136:	4603      	mov	r3, r0
 8012138:	6039      	str	r1, [r7, #0]
 801213a:	71fb      	strb	r3, [r7, #7]
 801213c:	4613      	mov	r3, r2
 801213e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012140:	79fb      	ldrb	r3, [r7, #7]
 8012142:	2b23      	cmp	r3, #35	@ 0x23
 8012144:	d84a      	bhi.n	80121dc <CDC_Control_FS+0xac>
 8012146:	a201      	add	r2, pc, #4	@ (adr r2, 801214c <CDC_Control_FS+0x1c>)
 8012148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214c:	080121dd 	.word	0x080121dd
 8012150:	080121dd 	.word	0x080121dd
 8012154:	080121dd 	.word	0x080121dd
 8012158:	080121dd 	.word	0x080121dd
 801215c:	080121dd 	.word	0x080121dd
 8012160:	080121dd 	.word	0x080121dd
 8012164:	080121dd 	.word	0x080121dd
 8012168:	080121dd 	.word	0x080121dd
 801216c:	080121dd 	.word	0x080121dd
 8012170:	080121dd 	.word	0x080121dd
 8012174:	080121dd 	.word	0x080121dd
 8012178:	080121dd 	.word	0x080121dd
 801217c:	080121dd 	.word	0x080121dd
 8012180:	080121dd 	.word	0x080121dd
 8012184:	080121dd 	.word	0x080121dd
 8012188:	080121dd 	.word	0x080121dd
 801218c:	080121dd 	.word	0x080121dd
 8012190:	080121dd 	.word	0x080121dd
 8012194:	080121dd 	.word	0x080121dd
 8012198:	080121dd 	.word	0x080121dd
 801219c:	080121dd 	.word	0x080121dd
 80121a0:	080121dd 	.word	0x080121dd
 80121a4:	080121dd 	.word	0x080121dd
 80121a8:	080121dd 	.word	0x080121dd
 80121ac:	080121dd 	.word	0x080121dd
 80121b0:	080121dd 	.word	0x080121dd
 80121b4:	080121dd 	.word	0x080121dd
 80121b8:	080121dd 	.word	0x080121dd
 80121bc:	080121dd 	.word	0x080121dd
 80121c0:	080121dd 	.word	0x080121dd
 80121c4:	080121dd 	.word	0x080121dd
 80121c8:	080121dd 	.word	0x080121dd
 80121cc:	080121dd 	.word	0x080121dd
 80121d0:	080121dd 	.word	0x080121dd
 80121d4:	080121dd 	.word	0x080121dd
 80121d8:	080121dd 	.word	0x080121dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80121dc:	bf00      	nop
  }

  return (USBD_OK);
 80121de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	370c      	adds	r7, #12
 80121e4:	46bd      	mov	sp, r7
 80121e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ea:	4770      	bx	lr

080121ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b082      	sub	sp, #8
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80121f6:	6879      	ldr	r1, [r7, #4]
 80121f8:	4805      	ldr	r0, [pc, #20]	@ (8012210 <CDC_Receive_FS+0x24>)
 80121fa:	f7fc f883 	bl	800e304 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80121fe:	4804      	ldr	r0, [pc, #16]	@ (8012210 <CDC_Receive_FS+0x24>)
 8012200:	f7fc f89e 	bl	800e340 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012204:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012206:	4618      	mov	r0, r3
 8012208:	3708      	adds	r7, #8
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	24000c04 	.word	0x24000c04

08012214 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012214:	b480      	push	{r7}
 8012216:	b087      	sub	sp, #28
 8012218:	af00      	add	r7, sp, #0
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	60b9      	str	r1, [r7, #8]
 801221e:	4613      	mov	r3, r2
 8012220:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012222:	2300      	movs	r3, #0
 8012224:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801222a:	4618      	mov	r0, r3
 801222c:	371c      	adds	r7, #28
 801222e:	46bd      	mov	sp, r7
 8012230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012234:	4770      	bx	lr
	...

08012238 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b0ba      	sub	sp, #232	@ 0xe8
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012240:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012244:	2200      	movs	r2, #0
 8012246:	601a      	str	r2, [r3, #0]
 8012248:	605a      	str	r2, [r3, #4]
 801224a:	609a      	str	r2, [r3, #8]
 801224c:	60da      	str	r2, [r3, #12]
 801224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012250:	f107 0310 	add.w	r3, r7, #16
 8012254:	22c0      	movs	r2, #192	@ 0xc0
 8012256:	2100      	movs	r1, #0
 8012258:	4618      	mov	r0, r3
 801225a:	f001 fac6 	bl	80137ea <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	4a2c      	ldr	r2, [pc, #176]	@ (8012314 <HAL_PCD_MspInit+0xdc>)
 8012264:	4293      	cmp	r3, r2
 8012266:	d151      	bne.n	801230c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012268:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801226c:	f04f 0300 	mov.w	r3, #0
 8012270:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8012274:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8012278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801227c:	f107 0310 	add.w	r3, r7, #16
 8012280:	4618      	mov	r0, r3
 8012282:	f7f5 fcd1 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 8012286:	4603      	mov	r3, r0
 8012288:	2b00      	cmp	r3, #0
 801228a:	d001      	beq.n	8012290 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801228c:	f7ff fa68 	bl	8011760 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012290:	f7f4 fca8 	bl	8006be4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012294:	4b20      	ldr	r3, [pc, #128]	@ (8012318 <HAL_PCD_MspInit+0xe0>)
 8012296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801229a:	4a1f      	ldr	r2, [pc, #124]	@ (8012318 <HAL_PCD_MspInit+0xe0>)
 801229c:	f043 0301 	orr.w	r3, r3, #1
 80122a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80122a4:	4b1c      	ldr	r3, [pc, #112]	@ (8012318 <HAL_PCD_MspInit+0xe0>)
 80122a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80122aa:	f003 0301 	and.w	r3, r3, #1
 80122ae:	60fb      	str	r3, [r7, #12]
 80122b0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80122b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80122b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ba:	2302      	movs	r3, #2
 80122bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122c0:	2300      	movs	r3, #0
 80122c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80122c6:	2300      	movs	r3, #0
 80122c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80122cc:	230a      	movs	r3, #10
 80122ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80122d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80122d6:	4619      	mov	r1, r3
 80122d8:	4810      	ldr	r0, [pc, #64]	@ (801231c <HAL_PCD_MspInit+0xe4>)
 80122da:	f7f2 f9a3 	bl	8004624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80122de:	4b0e      	ldr	r3, [pc, #56]	@ (8012318 <HAL_PCD_MspInit+0xe0>)
 80122e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80122e4:	4a0c      	ldr	r2, [pc, #48]	@ (8012318 <HAL_PCD_MspInit+0xe0>)
 80122e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80122ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80122ee:	4b0a      	ldr	r3, [pc, #40]	@ (8012318 <HAL_PCD_MspInit+0xe0>)
 80122f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80122f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80122f8:	60bb      	str	r3, [r7, #8]
 80122fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80122fc:	2200      	movs	r2, #0
 80122fe:	2100      	movs	r1, #0
 8012300:	2065      	movs	r0, #101	@ 0x65
 8012302:	f7ef fdc7 	bl	8001e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012306:	2065      	movs	r0, #101	@ 0x65
 8012308:	f7ef fdde 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801230c:	bf00      	nop
 801230e:	37e8      	adds	r7, #232	@ 0xe8
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}
 8012314:	40080000 	.word	0x40080000
 8012318:	58024400 	.word	0x58024400
 801231c:	58020000 	.word	0x58020000

08012320 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012334:	4619      	mov	r1, r3
 8012336:	4610      	mov	r0, r2
 8012338:	f7fc f8eb 	bl	800e512 <USBD_LL_SetupStage>
}
 801233c:	bf00      	nop
 801233e:	3708      	adds	r7, #8
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	460b      	mov	r3, r1
 801234e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012356:	78fa      	ldrb	r2, [r7, #3]
 8012358:	6879      	ldr	r1, [r7, #4]
 801235a:	4613      	mov	r3, r2
 801235c:	00db      	lsls	r3, r3, #3
 801235e:	4413      	add	r3, r2
 8012360:	009b      	lsls	r3, r3, #2
 8012362:	440b      	add	r3, r1
 8012364:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	78fb      	ldrb	r3, [r7, #3]
 801236c:	4619      	mov	r1, r3
 801236e:	f7fc f925 	bl	800e5bc <USBD_LL_DataOutStage>
}
 8012372:	bf00      	nop
 8012374:	3708      	adds	r7, #8
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b082      	sub	sp, #8
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	460b      	mov	r3, r1
 8012384:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801238c:	78fa      	ldrb	r2, [r7, #3]
 801238e:	6879      	ldr	r1, [r7, #4]
 8012390:	4613      	mov	r3, r2
 8012392:	00db      	lsls	r3, r3, #3
 8012394:	4413      	add	r3, r2
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	440b      	add	r3, r1
 801239a:	3320      	adds	r3, #32
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	78fb      	ldrb	r3, [r7, #3]
 80123a0:	4619      	mov	r1, r3
 80123a2:	f7fc f9be 	bl	800e722 <USBD_LL_DataInStage>
}
 80123a6:	bf00      	nop
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b082      	sub	sp, #8
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fc faf8 	bl	800e9b2 <USBD_LL_SOF>
}
 80123c2:	bf00      	nop
 80123c4:	3708      	adds	r7, #8
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}

080123ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123ca:	b580      	push	{r7, lr}
 80123cc:	b084      	sub	sp, #16
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80123d2:	2301      	movs	r3, #1
 80123d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	79db      	ldrb	r3, [r3, #7]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d102      	bne.n	80123e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80123de:	2300      	movs	r3, #0
 80123e0:	73fb      	strb	r3, [r7, #15]
 80123e2:	e008      	b.n	80123f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	79db      	ldrb	r3, [r3, #7]
 80123e8:	2b02      	cmp	r3, #2
 80123ea:	d102      	bne.n	80123f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80123ec:	2301      	movs	r3, #1
 80123ee:	73fb      	strb	r3, [r7, #15]
 80123f0:	e001      	b.n	80123f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80123f2:	f7ff f9b5 	bl	8011760 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80123fc:	7bfa      	ldrb	r2, [r7, #15]
 80123fe:	4611      	mov	r1, r2
 8012400:	4618      	mov	r0, r3
 8012402:	f7fc fa92 	bl	800e92a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801240c:	4618      	mov	r0, r3
 801240e:	f7fc fa3a 	bl	800e886 <USBD_LL_Reset>
}
 8012412:	bf00      	nop
 8012414:	3710      	adds	r7, #16
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
	...

0801241c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801242a:	4618      	mov	r0, r3
 801242c:	f7fc fa8d 	bl	800e94a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	6812      	ldr	r2, [r2, #0]
 801243e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012442:	f043 0301 	orr.w	r3, r3, #1
 8012446:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	7adb      	ldrb	r3, [r3, #11]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d005      	beq.n	801245c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012450:	4b04      	ldr	r3, [pc, #16]	@ (8012464 <HAL_PCD_SuspendCallback+0x48>)
 8012452:	691b      	ldr	r3, [r3, #16]
 8012454:	4a03      	ldr	r2, [pc, #12]	@ (8012464 <HAL_PCD_SuspendCallback+0x48>)
 8012456:	f043 0306 	orr.w	r3, r3, #6
 801245a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801245c:	bf00      	nop
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	e000ed00 	.word	0xe000ed00

08012468 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b082      	sub	sp, #8
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012476:	4618      	mov	r0, r3
 8012478:	f7fc fa83 	bl	800e982 <USBD_LL_Resume>
}
 801247c:	bf00      	nop
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	460b      	mov	r3, r1
 801248e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012496:	78fa      	ldrb	r2, [r7, #3]
 8012498:	4611      	mov	r1, r2
 801249a:	4618      	mov	r0, r3
 801249c:	f7fc fadb 	bl	800ea56 <USBD_LL_IsoOUTIncomplete>
}
 80124a0:	bf00      	nop
 80124a2:	3708      	adds	r7, #8
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}

080124a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	460b      	mov	r3, r1
 80124b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80124ba:	78fa      	ldrb	r2, [r7, #3]
 80124bc:	4611      	mov	r1, r2
 80124be:	4618      	mov	r0, r3
 80124c0:	f7fc fa97 	bl	800e9f2 <USBD_LL_IsoINIncomplete>
}
 80124c4:	bf00      	nop
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80124da:	4618      	mov	r0, r3
 80124dc:	f7fc faed 	bl	800eaba <USBD_LL_DevConnected>
}
 80124e0:	bf00      	nop
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7fc faea 	bl	800ead0 <USBD_LL_DevDisconnected>
}
 80124fc:	bf00      	nop
 80124fe:	3708      	adds	r7, #8
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}

08012504 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d13e      	bne.n	8012592 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012514:	4a21      	ldr	r2, [pc, #132]	@ (801259c <USBD_LL_Init+0x98>)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4a1f      	ldr	r2, [pc, #124]	@ (801259c <USBD_LL_Init+0x98>)
 8012520:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012524:	4b1d      	ldr	r3, [pc, #116]	@ (801259c <USBD_LL_Init+0x98>)
 8012526:	4a1e      	ldr	r2, [pc, #120]	@ (80125a0 <USBD_LL_Init+0x9c>)
 8012528:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801252a:	4b1c      	ldr	r3, [pc, #112]	@ (801259c <USBD_LL_Init+0x98>)
 801252c:	2209      	movs	r2, #9
 801252e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012530:	4b1a      	ldr	r3, [pc, #104]	@ (801259c <USBD_LL_Init+0x98>)
 8012532:	2202      	movs	r2, #2
 8012534:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012536:	4b19      	ldr	r3, [pc, #100]	@ (801259c <USBD_LL_Init+0x98>)
 8012538:	2200      	movs	r2, #0
 801253a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801253c:	4b17      	ldr	r3, [pc, #92]	@ (801259c <USBD_LL_Init+0x98>)
 801253e:	2202      	movs	r2, #2
 8012540:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012542:	4b16      	ldr	r3, [pc, #88]	@ (801259c <USBD_LL_Init+0x98>)
 8012544:	2200      	movs	r2, #0
 8012546:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012548:	4b14      	ldr	r3, [pc, #80]	@ (801259c <USBD_LL_Init+0x98>)
 801254a:	2200      	movs	r2, #0
 801254c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801254e:	4b13      	ldr	r3, [pc, #76]	@ (801259c <USBD_LL_Init+0x98>)
 8012550:	2200      	movs	r2, #0
 8012552:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012554:	4b11      	ldr	r3, [pc, #68]	@ (801259c <USBD_LL_Init+0x98>)
 8012556:	2200      	movs	r2, #0
 8012558:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801255a:	4b10      	ldr	r3, [pc, #64]	@ (801259c <USBD_LL_Init+0x98>)
 801255c:	2200      	movs	r2, #0
 801255e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012560:	4b0e      	ldr	r3, [pc, #56]	@ (801259c <USBD_LL_Init+0x98>)
 8012562:	2200      	movs	r2, #0
 8012564:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012566:	480d      	ldr	r0, [pc, #52]	@ (801259c <USBD_LL_Init+0x98>)
 8012568:	f7f3 f863 	bl	8005632 <HAL_PCD_Init>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	d001      	beq.n	8012576 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012572:	f7ff f8f5 	bl	8011760 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012576:	2180      	movs	r1, #128	@ 0x80
 8012578:	4808      	ldr	r0, [pc, #32]	@ (801259c <USBD_LL_Init+0x98>)
 801257a:	f7f4 fab8 	bl	8006aee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801257e:	2240      	movs	r2, #64	@ 0x40
 8012580:	2100      	movs	r1, #0
 8012582:	4806      	ldr	r0, [pc, #24]	@ (801259c <USBD_LL_Init+0x98>)
 8012584:	f7f4 fa6c 	bl	8006a60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012588:	2280      	movs	r2, #128	@ 0x80
 801258a:	2101      	movs	r1, #1
 801258c:	4803      	ldr	r0, [pc, #12]	@ (801259c <USBD_LL_Init+0x98>)
 801258e:	f7f4 fa67 	bl	8006a60 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012592:	2300      	movs	r3, #0
}
 8012594:	4618      	mov	r0, r3
 8012596:	3708      	adds	r7, #8
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}
 801259c:	24001ee0 	.word	0x24001ee0
 80125a0:	40080000 	.word	0x40080000

080125a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b084      	sub	sp, #16
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125ac:	2300      	movs	r3, #0
 80125ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125b0:	2300      	movs	r3, #0
 80125b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7f3 f945 	bl	800584a <HAL_PCD_Start>
 80125c0:	4603      	mov	r3, r0
 80125c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125c4:	7bfb      	ldrb	r3, [r7, #15]
 80125c6:	4618      	mov	r0, r3
 80125c8:	f000 f942 	bl	8012850 <USBD_Get_USB_Status>
 80125cc:	4603      	mov	r3, r0
 80125ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3710      	adds	r7, #16
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b084      	sub	sp, #16
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	4608      	mov	r0, r1
 80125e4:	4611      	mov	r1, r2
 80125e6:	461a      	mov	r2, r3
 80125e8:	4603      	mov	r3, r0
 80125ea:	70fb      	strb	r3, [r7, #3]
 80125ec:	460b      	mov	r3, r1
 80125ee:	70bb      	strb	r3, [r7, #2]
 80125f0:	4613      	mov	r3, r2
 80125f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125f4:	2300      	movs	r3, #0
 80125f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125f8:	2300      	movs	r3, #0
 80125fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012602:	78bb      	ldrb	r3, [r7, #2]
 8012604:	883a      	ldrh	r2, [r7, #0]
 8012606:	78f9      	ldrb	r1, [r7, #3]
 8012608:	f7f3 fe46 	bl	8006298 <HAL_PCD_EP_Open>
 801260c:	4603      	mov	r3, r0
 801260e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012610:	7bfb      	ldrb	r3, [r7, #15]
 8012612:	4618      	mov	r0, r3
 8012614:	f000 f91c 	bl	8012850 <USBD_Get_USB_Status>
 8012618:	4603      	mov	r3, r0
 801261a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801261c:	7bbb      	ldrb	r3, [r7, #14]
}
 801261e:	4618      	mov	r0, r3
 8012620:	3710      	adds	r7, #16
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}

08012626 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012626:	b580      	push	{r7, lr}
 8012628:	b084      	sub	sp, #16
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]
 801262e:	460b      	mov	r3, r1
 8012630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012632:	2300      	movs	r3, #0
 8012634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012636:	2300      	movs	r3, #0
 8012638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012640:	78fa      	ldrb	r2, [r7, #3]
 8012642:	4611      	mov	r1, r2
 8012644:	4618      	mov	r0, r3
 8012646:	f7f3 fe8f 	bl	8006368 <HAL_PCD_EP_Close>
 801264a:	4603      	mov	r3, r0
 801264c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801264e:	7bfb      	ldrb	r3, [r7, #15]
 8012650:	4618      	mov	r0, r3
 8012652:	f000 f8fd 	bl	8012850 <USBD_Get_USB_Status>
 8012656:	4603      	mov	r3, r0
 8012658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801265a:	7bbb      	ldrb	r3, [r7, #14]
}
 801265c:	4618      	mov	r0, r3
 801265e:	3710      	adds	r7, #16
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	460b      	mov	r3, r1
 801266e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012670:	2300      	movs	r3, #0
 8012672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012674:	2300      	movs	r3, #0
 8012676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801267e:	78fa      	ldrb	r2, [r7, #3]
 8012680:	4611      	mov	r1, r2
 8012682:	4618      	mov	r0, r3
 8012684:	f7f3 ff47 	bl	8006516 <HAL_PCD_EP_SetStall>
 8012688:	4603      	mov	r3, r0
 801268a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801268c:	7bfb      	ldrb	r3, [r7, #15]
 801268e:	4618      	mov	r0, r3
 8012690:	f000 f8de 	bl	8012850 <USBD_Get_USB_Status>
 8012694:	4603      	mov	r3, r0
 8012696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012698:	7bbb      	ldrb	r3, [r7, #14]
}
 801269a:	4618      	mov	r0, r3
 801269c:	3710      	adds	r7, #16
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}

080126a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126a2:	b580      	push	{r7, lr}
 80126a4:	b084      	sub	sp, #16
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
 80126aa:	460b      	mov	r3, r1
 80126ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126ae:	2300      	movs	r3, #0
 80126b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126b2:	2300      	movs	r3, #0
 80126b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126bc:	78fa      	ldrb	r2, [r7, #3]
 80126be:	4611      	mov	r1, r2
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7f3 ff8b 	bl	80065dc <HAL_PCD_EP_ClrStall>
 80126c6:	4603      	mov	r3, r0
 80126c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f000 f8bf 	bl	8012850 <USBD_Get_USB_Status>
 80126d2:	4603      	mov	r3, r0
 80126d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3710      	adds	r7, #16
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b085      	sub	sp, #20
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	460b      	mov	r3, r1
 80126ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80126f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	da0b      	bge.n	8012714 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80126fc:	78fb      	ldrb	r3, [r7, #3]
 80126fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012702:	68f9      	ldr	r1, [r7, #12]
 8012704:	4613      	mov	r3, r2
 8012706:	00db      	lsls	r3, r3, #3
 8012708:	4413      	add	r3, r2
 801270a:	009b      	lsls	r3, r3, #2
 801270c:	440b      	add	r3, r1
 801270e:	3316      	adds	r3, #22
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	e00b      	b.n	801272c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012714:	78fb      	ldrb	r3, [r7, #3]
 8012716:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801271a:	68f9      	ldr	r1, [r7, #12]
 801271c:	4613      	mov	r3, r2
 801271e:	00db      	lsls	r3, r3, #3
 8012720:	4413      	add	r3, r2
 8012722:	009b      	lsls	r3, r3, #2
 8012724:	440b      	add	r3, r1
 8012726:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801272a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801272c:	4618      	mov	r0, r3
 801272e:	3714      	adds	r7, #20
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr

08012738 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	460b      	mov	r3, r1
 8012742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012744:	2300      	movs	r3, #0
 8012746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012748:	2300      	movs	r3, #0
 801274a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012752:	78fa      	ldrb	r2, [r7, #3]
 8012754:	4611      	mov	r1, r2
 8012756:	4618      	mov	r0, r3
 8012758:	f7f3 fd7a 	bl	8006250 <HAL_PCD_SetAddress>
 801275c:	4603      	mov	r3, r0
 801275e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012760:	7bfb      	ldrb	r3, [r7, #15]
 8012762:	4618      	mov	r0, r3
 8012764:	f000 f874 	bl	8012850 <USBD_Get_USB_Status>
 8012768:	4603      	mov	r3, r0
 801276a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801276c:	7bbb      	ldrb	r3, [r7, #14]
}
 801276e:	4618      	mov	r0, r3
 8012770:	3710      	adds	r7, #16
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}

08012776 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012776:	b580      	push	{r7, lr}
 8012778:	b086      	sub	sp, #24
 801277a:	af00      	add	r7, sp, #0
 801277c:	60f8      	str	r0, [r7, #12]
 801277e:	607a      	str	r2, [r7, #4]
 8012780:	603b      	str	r3, [r7, #0]
 8012782:	460b      	mov	r3, r1
 8012784:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012786:	2300      	movs	r3, #0
 8012788:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801278a:	2300      	movs	r3, #0
 801278c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012794:	7af9      	ldrb	r1, [r7, #11]
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	f7f3 fe82 	bl	80064a2 <HAL_PCD_EP_Transmit>
 801279e:	4603      	mov	r3, r0
 80127a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127a2:	7dfb      	ldrb	r3, [r7, #23]
 80127a4:	4618      	mov	r0, r3
 80127a6:	f000 f853 	bl	8012850 <USBD_Get_USB_Status>
 80127aa:	4603      	mov	r3, r0
 80127ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80127ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3718      	adds	r7, #24
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}

080127b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b086      	sub	sp, #24
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	607a      	str	r2, [r7, #4]
 80127c2:	603b      	str	r3, [r7, #0]
 80127c4:	460b      	mov	r3, r1
 80127c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127c8:	2300      	movs	r3, #0
 80127ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127cc:	2300      	movs	r3, #0
 80127ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80127d6:	7af9      	ldrb	r1, [r7, #11]
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	687a      	ldr	r2, [r7, #4]
 80127dc:	f7f3 fe0e 	bl	80063fc <HAL_PCD_EP_Receive>
 80127e0:	4603      	mov	r3, r0
 80127e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127e4:	7dfb      	ldrb	r3, [r7, #23]
 80127e6:	4618      	mov	r0, r3
 80127e8:	f000 f832 	bl	8012850 <USBD_Get_USB_Status>
 80127ec:	4603      	mov	r3, r0
 80127ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80127f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3718      	adds	r7, #24
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b082      	sub	sp, #8
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
 8012802:	460b      	mov	r3, r1
 8012804:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801280c:	78fa      	ldrb	r2, [r7, #3]
 801280e:	4611      	mov	r1, r2
 8012810:	4618      	mov	r0, r3
 8012812:	f7f3 fe2e 	bl	8006472 <HAL_PCD_EP_GetRxCount>
 8012816:	4603      	mov	r3, r0
}
 8012818:	4618      	mov	r0, r3
 801281a:	3708      	adds	r7, #8
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012828:	4b03      	ldr	r3, [pc, #12]	@ (8012838 <USBD_static_malloc+0x18>)
}
 801282a:	4618      	mov	r0, r3
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	240023c4 	.word	0x240023c4

0801283c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801283c:	b480      	push	{r7}
 801283e:	b083      	sub	sp, #12
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012844:	bf00      	nop
 8012846:	370c      	adds	r7, #12
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr

08012850 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012850:	b480      	push	{r7}
 8012852:	b085      	sub	sp, #20
 8012854:	af00      	add	r7, sp, #0
 8012856:	4603      	mov	r3, r0
 8012858:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801285a:	2300      	movs	r3, #0
 801285c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801285e:	79fb      	ldrb	r3, [r7, #7]
 8012860:	2b03      	cmp	r3, #3
 8012862:	d817      	bhi.n	8012894 <USBD_Get_USB_Status+0x44>
 8012864:	a201      	add	r2, pc, #4	@ (adr r2, 801286c <USBD_Get_USB_Status+0x1c>)
 8012866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801286a:	bf00      	nop
 801286c:	0801287d 	.word	0x0801287d
 8012870:	08012883 	.word	0x08012883
 8012874:	08012889 	.word	0x08012889
 8012878:	0801288f 	.word	0x0801288f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801287c:	2300      	movs	r3, #0
 801287e:	73fb      	strb	r3, [r7, #15]
    break;
 8012880:	e00b      	b.n	801289a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012882:	2303      	movs	r3, #3
 8012884:	73fb      	strb	r3, [r7, #15]
    break;
 8012886:	e008      	b.n	801289a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012888:	2301      	movs	r3, #1
 801288a:	73fb      	strb	r3, [r7, #15]
    break;
 801288c:	e005      	b.n	801289a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801288e:	2303      	movs	r3, #3
 8012890:	73fb      	strb	r3, [r7, #15]
    break;
 8012892:	e002      	b.n	801289a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012894:	2303      	movs	r3, #3
 8012896:	73fb      	strb	r3, [r7, #15]
    break;
 8012898:	bf00      	nop
  }
  return usb_status;
 801289a:	7bfb      	ldrb	r3, [r7, #15]
}
 801289c:	4618      	mov	r0, r3
 801289e:	3714      	adds	r7, #20
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr

080128a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	4603      	mov	r3, r0
 80128b0:	6039      	str	r1, [r7, #0]
 80128b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	2212      	movs	r2, #18
 80128b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80128ba:	4b03      	ldr	r3, [pc, #12]	@ (80128c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80128bc:	4618      	mov	r0, r3
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr
 80128c8:	240000d4 	.word	0x240000d4

080128cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b083      	sub	sp, #12
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	4603      	mov	r3, r0
 80128d4:	6039      	str	r1, [r7, #0]
 80128d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	2204      	movs	r2, #4
 80128dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80128de:	4b03      	ldr	r3, [pc, #12]	@ (80128ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	370c      	adds	r7, #12
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr
 80128ec:	240000e8 	.word	0x240000e8

080128f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	4603      	mov	r3, r0
 80128f8:	6039      	str	r1, [r7, #0]
 80128fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80128fc:	79fb      	ldrb	r3, [r7, #7]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d105      	bne.n	801290e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012902:	683a      	ldr	r2, [r7, #0]
 8012904:	4907      	ldr	r1, [pc, #28]	@ (8012924 <USBD_FS_ProductStrDescriptor+0x34>)
 8012906:	4808      	ldr	r0, [pc, #32]	@ (8012928 <USBD_FS_ProductStrDescriptor+0x38>)
 8012908:	f7fc ff90 	bl	800f82c <USBD_GetString>
 801290c:	e004      	b.n	8012918 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801290e:	683a      	ldr	r2, [r7, #0]
 8012910:	4904      	ldr	r1, [pc, #16]	@ (8012924 <USBD_FS_ProductStrDescriptor+0x34>)
 8012912:	4805      	ldr	r0, [pc, #20]	@ (8012928 <USBD_FS_ProductStrDescriptor+0x38>)
 8012914:	f7fc ff8a 	bl	800f82c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012918:	4b02      	ldr	r3, [pc, #8]	@ (8012924 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801291a:	4618      	mov	r0, r3
 801291c:	3708      	adds	r7, #8
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	240025e4 	.word	0x240025e4
 8012928:	08015a2c 	.word	0x08015a2c

0801292c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	4603      	mov	r3, r0
 8012934:	6039      	str	r1, [r7, #0]
 8012936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012938:	683a      	ldr	r2, [r7, #0]
 801293a:	4904      	ldr	r1, [pc, #16]	@ (801294c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801293c:	4804      	ldr	r0, [pc, #16]	@ (8012950 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801293e:	f7fc ff75 	bl	800f82c <USBD_GetString>
  return USBD_StrDesc;
 8012942:	4b02      	ldr	r3, [pc, #8]	@ (801294c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012944:	4618      	mov	r0, r3
 8012946:	3708      	adds	r7, #8
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	240025e4 	.word	0x240025e4
 8012950:	08015a44 	.word	0x08015a44

08012954 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	4603      	mov	r3, r0
 801295c:	6039      	str	r1, [r7, #0]
 801295e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	221a      	movs	r2, #26
 8012964:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012966:	f000 f843 	bl	80129f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801296a:	4b02      	ldr	r3, [pc, #8]	@ (8012974 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801296c:	4618      	mov	r0, r3
 801296e:	3708      	adds	r7, #8
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	240000ec 	.word	0x240000ec

08012978 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	4603      	mov	r3, r0
 8012980:	6039      	str	r1, [r7, #0]
 8012982:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012984:	79fb      	ldrb	r3, [r7, #7]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d105      	bne.n	8012996 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801298a:	683a      	ldr	r2, [r7, #0]
 801298c:	4907      	ldr	r1, [pc, #28]	@ (80129ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801298e:	4808      	ldr	r0, [pc, #32]	@ (80129b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012990:	f7fc ff4c 	bl	800f82c <USBD_GetString>
 8012994:	e004      	b.n	80129a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012996:	683a      	ldr	r2, [r7, #0]
 8012998:	4904      	ldr	r1, [pc, #16]	@ (80129ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801299a:	4805      	ldr	r0, [pc, #20]	@ (80129b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801299c:	f7fc ff46 	bl	800f82c <USBD_GetString>
  }
  return USBD_StrDesc;
 80129a0:	4b02      	ldr	r3, [pc, #8]	@ (80129ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	240025e4 	.word	0x240025e4
 80129b0:	08015a58 	.word	0x08015a58

080129b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	4603      	mov	r3, r0
 80129bc:	6039      	str	r1, [r7, #0]
 80129be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80129c0:	79fb      	ldrb	r3, [r7, #7]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d105      	bne.n	80129d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80129c6:	683a      	ldr	r2, [r7, #0]
 80129c8:	4907      	ldr	r1, [pc, #28]	@ (80129e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80129ca:	4808      	ldr	r0, [pc, #32]	@ (80129ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80129cc:	f7fc ff2e 	bl	800f82c <USBD_GetString>
 80129d0:	e004      	b.n	80129dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80129d2:	683a      	ldr	r2, [r7, #0]
 80129d4:	4904      	ldr	r1, [pc, #16]	@ (80129e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80129d6:	4805      	ldr	r0, [pc, #20]	@ (80129ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80129d8:	f7fc ff28 	bl	800f82c <USBD_GetString>
  }
  return USBD_StrDesc;
 80129dc:	4b02      	ldr	r3, [pc, #8]	@ (80129e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3708      	adds	r7, #8
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
 80129e6:	bf00      	nop
 80129e8:	240025e4 	.word	0x240025e4
 80129ec:	08015a64 	.word	0x08015a64

080129f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b084      	sub	sp, #16
 80129f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	4413      	add	r3, r2
 80129fc:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d009      	beq.n	8012a18 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012a04:	2208      	movs	r2, #8
 8012a06:	4906      	ldr	r1, [pc, #24]	@ (8012a20 <Get_SerialNum+0x30>)
 8012a08:	68f8      	ldr	r0, [r7, #12]
 8012a0a:	f000 f80d 	bl	8012a28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012a0e:	2204      	movs	r2, #4
 8012a10:	4904      	ldr	r1, [pc, #16]	@ (8012a24 <Get_SerialNum+0x34>)
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f000 f808 	bl	8012a28 <IntToUnicode>
  }
}
 8012a18:	bf00      	nop
 8012a1a:	3710      	adds	r7, #16
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	240000ee 	.word	0x240000ee
 8012a24:	240000fe 	.word	0x240000fe

08012a28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b087      	sub	sp, #28
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	60f8      	str	r0, [r7, #12]
 8012a30:	60b9      	str	r1, [r7, #8]
 8012a32:	4613      	mov	r3, r2
 8012a34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012a36:	2300      	movs	r3, #0
 8012a38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	75fb      	strb	r3, [r7, #23]
 8012a3e:	e027      	b.n	8012a90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	0f1b      	lsrs	r3, r3, #28
 8012a44:	2b09      	cmp	r3, #9
 8012a46:	d80b      	bhi.n	8012a60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	0f1b      	lsrs	r3, r3, #28
 8012a4c:	b2da      	uxtb	r2, r3
 8012a4e:	7dfb      	ldrb	r3, [r7, #23]
 8012a50:	005b      	lsls	r3, r3, #1
 8012a52:	4619      	mov	r1, r3
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	440b      	add	r3, r1
 8012a58:	3230      	adds	r2, #48	@ 0x30
 8012a5a:	b2d2      	uxtb	r2, r2
 8012a5c:	701a      	strb	r2, [r3, #0]
 8012a5e:	e00a      	b.n	8012a76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	0f1b      	lsrs	r3, r3, #28
 8012a64:	b2da      	uxtb	r2, r3
 8012a66:	7dfb      	ldrb	r3, [r7, #23]
 8012a68:	005b      	lsls	r3, r3, #1
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	440b      	add	r3, r1
 8012a70:	3237      	adds	r2, #55	@ 0x37
 8012a72:	b2d2      	uxtb	r2, r2
 8012a74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	011b      	lsls	r3, r3, #4
 8012a7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012a7c:	7dfb      	ldrb	r3, [r7, #23]
 8012a7e:	005b      	lsls	r3, r3, #1
 8012a80:	3301      	adds	r3, #1
 8012a82:	68ba      	ldr	r2, [r7, #8]
 8012a84:	4413      	add	r3, r2
 8012a86:	2200      	movs	r2, #0
 8012a88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012a8a:	7dfb      	ldrb	r3, [r7, #23]
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	75fb      	strb	r3, [r7, #23]
 8012a90:	7dfa      	ldrb	r2, [r7, #23]
 8012a92:	79fb      	ldrb	r3, [r7, #7]
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d3d3      	bcc.n	8012a40 <IntToUnicode+0x18>
  }
}
 8012a98:	bf00      	nop
 8012a9a:	bf00      	nop
 8012a9c:	371c      	adds	r7, #28
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa4:	4770      	bx	lr
	...

08012aa8 <arm_sin_f32>:
 8012aa8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8012b28 <arm_sin_f32+0x80>
 8012aac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012ab0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012ab4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012abc:	d504      	bpl.n	8012ac8 <arm_sin_f32+0x20>
 8012abe:	ee17 3a90 	vmov	r3, s15
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	ee07 3a90 	vmov	s15, r3
 8012ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012acc:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012b2c <arm_sin_f32+0x84>
 8012ad0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012ad4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012ad8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012adc:	ee17 3a10 	vmov	r3, s14
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ae6:	d21a      	bcs.n	8012b1e <arm_sin_f32+0x76>
 8012ae8:	ee07 3a10 	vmov	s14, r3
 8012aec:	1c59      	adds	r1, r3, #1
 8012aee:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8012af2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012af6:	4a0e      	ldr	r2, [pc, #56]	@ (8012b30 <arm_sin_f32+0x88>)
 8012af8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012afc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012b04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b08:	edd3 6a00 	vldr	s13, [r3]
 8012b0c:	ed92 7a00 	vldr	s14, [r2]
 8012b10:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b18:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012b1c:	4770      	bx	lr
 8012b1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012b22:	2101      	movs	r1, #1
 8012b24:	2300      	movs	r3, #0
 8012b26:	e7e6      	b.n	8012af6 <arm_sin_f32+0x4e>
 8012b28:	3e22f983 	.word	0x3e22f983
 8012b2c:	44000000 	.word	0x44000000
 8012b30:	0801724c 	.word	0x0801724c

08012b34 <arm_cos_f32>:
 8012b34:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8012bbc <arm_cos_f32+0x88>
 8012b38:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8012b3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012b40:	ee30 0a07 	vadd.f32	s0, s0, s14
 8012b44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012b48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b50:	d504      	bpl.n	8012b5c <arm_cos_f32+0x28>
 8012b52:	ee17 3a90 	vmov	r3, s15
 8012b56:	3b01      	subs	r3, #1
 8012b58:	ee07 3a90 	vmov	s15, r3
 8012b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b60:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012bc0 <arm_cos_f32+0x8c>
 8012b64:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012b68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b6c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012b70:	ee17 3a10 	vmov	r3, s14
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b7a:	d21a      	bcs.n	8012bb2 <arm_cos_f32+0x7e>
 8012b7c:	ee07 3a10 	vmov	s14, r3
 8012b80:	1c59      	adds	r1, r3, #1
 8012b82:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8012b86:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8012bc4 <arm_cos_f32+0x90>)
 8012b8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012b90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012b98:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b9c:	edd3 6a00 	vldr	s13, [r3]
 8012ba0:	ed92 7a00 	vldr	s14, [r2]
 8012ba4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012bac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012bb0:	4770      	bx	lr
 8012bb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012bb6:	2101      	movs	r1, #1
 8012bb8:	2300      	movs	r3, #0
 8012bba:	e7e6      	b.n	8012b8a <arm_cos_f32+0x56>
 8012bbc:	3e22f983 	.word	0x3e22f983
 8012bc0:	44000000 	.word	0x44000000
 8012bc4:	0801724c 	.word	0x0801724c

08012bc8 <malloc>:
 8012bc8:	4b02      	ldr	r3, [pc, #8]	@ (8012bd4 <malloc+0xc>)
 8012bca:	4601      	mov	r1, r0
 8012bcc:	6818      	ldr	r0, [r3, #0]
 8012bce:	f000 b825 	b.w	8012c1c <_malloc_r>
 8012bd2:	bf00      	nop
 8012bd4:	24000114 	.word	0x24000114

08012bd8 <sbrk_aligned>:
 8012bd8:	b570      	push	{r4, r5, r6, lr}
 8012bda:	4e0f      	ldr	r6, [pc, #60]	@ (8012c18 <sbrk_aligned+0x40>)
 8012bdc:	460c      	mov	r4, r1
 8012bde:	6831      	ldr	r1, [r6, #0]
 8012be0:	4605      	mov	r5, r0
 8012be2:	b911      	cbnz	r1, 8012bea <sbrk_aligned+0x12>
 8012be4:	f000 fe42 	bl	801386c <_sbrk_r>
 8012be8:	6030      	str	r0, [r6, #0]
 8012bea:	4621      	mov	r1, r4
 8012bec:	4628      	mov	r0, r5
 8012bee:	f000 fe3d 	bl	801386c <_sbrk_r>
 8012bf2:	1c43      	adds	r3, r0, #1
 8012bf4:	d103      	bne.n	8012bfe <sbrk_aligned+0x26>
 8012bf6:	f04f 34ff 	mov.w	r4, #4294967295
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	bd70      	pop	{r4, r5, r6, pc}
 8012bfe:	1cc4      	adds	r4, r0, #3
 8012c00:	f024 0403 	bic.w	r4, r4, #3
 8012c04:	42a0      	cmp	r0, r4
 8012c06:	d0f8      	beq.n	8012bfa <sbrk_aligned+0x22>
 8012c08:	1a21      	subs	r1, r4, r0
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	f000 fe2e 	bl	801386c <_sbrk_r>
 8012c10:	3001      	adds	r0, #1
 8012c12:	d1f2      	bne.n	8012bfa <sbrk_aligned+0x22>
 8012c14:	e7ef      	b.n	8012bf6 <sbrk_aligned+0x1e>
 8012c16:	bf00      	nop
 8012c18:	240027e4 	.word	0x240027e4

08012c1c <_malloc_r>:
 8012c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c20:	1ccd      	adds	r5, r1, #3
 8012c22:	f025 0503 	bic.w	r5, r5, #3
 8012c26:	3508      	adds	r5, #8
 8012c28:	2d0c      	cmp	r5, #12
 8012c2a:	bf38      	it	cc
 8012c2c:	250c      	movcc	r5, #12
 8012c2e:	2d00      	cmp	r5, #0
 8012c30:	4606      	mov	r6, r0
 8012c32:	db01      	blt.n	8012c38 <_malloc_r+0x1c>
 8012c34:	42a9      	cmp	r1, r5
 8012c36:	d904      	bls.n	8012c42 <_malloc_r+0x26>
 8012c38:	230c      	movs	r3, #12
 8012c3a:	6033      	str	r3, [r6, #0]
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d18 <_malloc_r+0xfc>
 8012c46:	f000 f869 	bl	8012d1c <__malloc_lock>
 8012c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8012c4e:	461c      	mov	r4, r3
 8012c50:	bb44      	cbnz	r4, 8012ca4 <_malloc_r+0x88>
 8012c52:	4629      	mov	r1, r5
 8012c54:	4630      	mov	r0, r6
 8012c56:	f7ff ffbf 	bl	8012bd8 <sbrk_aligned>
 8012c5a:	1c43      	adds	r3, r0, #1
 8012c5c:	4604      	mov	r4, r0
 8012c5e:	d158      	bne.n	8012d12 <_malloc_r+0xf6>
 8012c60:	f8d8 4000 	ldr.w	r4, [r8]
 8012c64:	4627      	mov	r7, r4
 8012c66:	2f00      	cmp	r7, #0
 8012c68:	d143      	bne.n	8012cf2 <_malloc_r+0xd6>
 8012c6a:	2c00      	cmp	r4, #0
 8012c6c:	d04b      	beq.n	8012d06 <_malloc_r+0xea>
 8012c6e:	6823      	ldr	r3, [r4, #0]
 8012c70:	4639      	mov	r1, r7
 8012c72:	4630      	mov	r0, r6
 8012c74:	eb04 0903 	add.w	r9, r4, r3
 8012c78:	f000 fdf8 	bl	801386c <_sbrk_r>
 8012c7c:	4581      	cmp	r9, r0
 8012c7e:	d142      	bne.n	8012d06 <_malloc_r+0xea>
 8012c80:	6821      	ldr	r1, [r4, #0]
 8012c82:	1a6d      	subs	r5, r5, r1
 8012c84:	4629      	mov	r1, r5
 8012c86:	4630      	mov	r0, r6
 8012c88:	f7ff ffa6 	bl	8012bd8 <sbrk_aligned>
 8012c8c:	3001      	adds	r0, #1
 8012c8e:	d03a      	beq.n	8012d06 <_malloc_r+0xea>
 8012c90:	6823      	ldr	r3, [r4, #0]
 8012c92:	442b      	add	r3, r5
 8012c94:	6023      	str	r3, [r4, #0]
 8012c96:	f8d8 3000 	ldr.w	r3, [r8]
 8012c9a:	685a      	ldr	r2, [r3, #4]
 8012c9c:	bb62      	cbnz	r2, 8012cf8 <_malloc_r+0xdc>
 8012c9e:	f8c8 7000 	str.w	r7, [r8]
 8012ca2:	e00f      	b.n	8012cc4 <_malloc_r+0xa8>
 8012ca4:	6822      	ldr	r2, [r4, #0]
 8012ca6:	1b52      	subs	r2, r2, r5
 8012ca8:	d420      	bmi.n	8012cec <_malloc_r+0xd0>
 8012caa:	2a0b      	cmp	r2, #11
 8012cac:	d917      	bls.n	8012cde <_malloc_r+0xc2>
 8012cae:	1961      	adds	r1, r4, r5
 8012cb0:	42a3      	cmp	r3, r4
 8012cb2:	6025      	str	r5, [r4, #0]
 8012cb4:	bf18      	it	ne
 8012cb6:	6059      	strne	r1, [r3, #4]
 8012cb8:	6863      	ldr	r3, [r4, #4]
 8012cba:	bf08      	it	eq
 8012cbc:	f8c8 1000 	streq.w	r1, [r8]
 8012cc0:	5162      	str	r2, [r4, r5]
 8012cc2:	604b      	str	r3, [r1, #4]
 8012cc4:	4630      	mov	r0, r6
 8012cc6:	f000 f82f 	bl	8012d28 <__malloc_unlock>
 8012cca:	f104 000b 	add.w	r0, r4, #11
 8012cce:	1d23      	adds	r3, r4, #4
 8012cd0:	f020 0007 	bic.w	r0, r0, #7
 8012cd4:	1ac2      	subs	r2, r0, r3
 8012cd6:	bf1c      	itt	ne
 8012cd8:	1a1b      	subne	r3, r3, r0
 8012cda:	50a3      	strne	r3, [r4, r2]
 8012cdc:	e7af      	b.n	8012c3e <_malloc_r+0x22>
 8012cde:	6862      	ldr	r2, [r4, #4]
 8012ce0:	42a3      	cmp	r3, r4
 8012ce2:	bf0c      	ite	eq
 8012ce4:	f8c8 2000 	streq.w	r2, [r8]
 8012ce8:	605a      	strne	r2, [r3, #4]
 8012cea:	e7eb      	b.n	8012cc4 <_malloc_r+0xa8>
 8012cec:	4623      	mov	r3, r4
 8012cee:	6864      	ldr	r4, [r4, #4]
 8012cf0:	e7ae      	b.n	8012c50 <_malloc_r+0x34>
 8012cf2:	463c      	mov	r4, r7
 8012cf4:	687f      	ldr	r7, [r7, #4]
 8012cf6:	e7b6      	b.n	8012c66 <_malloc_r+0x4a>
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	42a3      	cmp	r3, r4
 8012cfe:	d1fb      	bne.n	8012cf8 <_malloc_r+0xdc>
 8012d00:	2300      	movs	r3, #0
 8012d02:	6053      	str	r3, [r2, #4]
 8012d04:	e7de      	b.n	8012cc4 <_malloc_r+0xa8>
 8012d06:	230c      	movs	r3, #12
 8012d08:	6033      	str	r3, [r6, #0]
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	f000 f80c 	bl	8012d28 <__malloc_unlock>
 8012d10:	e794      	b.n	8012c3c <_malloc_r+0x20>
 8012d12:	6005      	str	r5, [r0, #0]
 8012d14:	e7d6      	b.n	8012cc4 <_malloc_r+0xa8>
 8012d16:	bf00      	nop
 8012d18:	240027e8 	.word	0x240027e8

08012d1c <__malloc_lock>:
 8012d1c:	4801      	ldr	r0, [pc, #4]	@ (8012d24 <__malloc_lock+0x8>)
 8012d1e:	f000 bdec 	b.w	80138fa <__retarget_lock_acquire_recursive>
 8012d22:	bf00      	nop
 8012d24:	2400292c 	.word	0x2400292c

08012d28 <__malloc_unlock>:
 8012d28:	4801      	ldr	r0, [pc, #4]	@ (8012d30 <__malloc_unlock+0x8>)
 8012d2a:	f000 bde7 	b.w	80138fc <__retarget_lock_release_recursive>
 8012d2e:	bf00      	nop
 8012d30:	2400292c 	.word	0x2400292c

08012d34 <__cvt>:
 8012d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d36:	ed2d 8b02 	vpush	{d8}
 8012d3a:	eeb0 8b40 	vmov.f64	d8, d0
 8012d3e:	b085      	sub	sp, #20
 8012d40:	4617      	mov	r7, r2
 8012d42:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012d44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012d46:	ee18 2a90 	vmov	r2, s17
 8012d4a:	f025 0520 	bic.w	r5, r5, #32
 8012d4e:	2a00      	cmp	r2, #0
 8012d50:	bfb6      	itet	lt
 8012d52:	222d      	movlt	r2, #45	@ 0x2d
 8012d54:	2200      	movge	r2, #0
 8012d56:	eeb1 8b40 	vneglt.f64	d8, d0
 8012d5a:	2d46      	cmp	r5, #70	@ 0x46
 8012d5c:	460c      	mov	r4, r1
 8012d5e:	701a      	strb	r2, [r3, #0]
 8012d60:	d004      	beq.n	8012d6c <__cvt+0x38>
 8012d62:	2d45      	cmp	r5, #69	@ 0x45
 8012d64:	d100      	bne.n	8012d68 <__cvt+0x34>
 8012d66:	3401      	adds	r4, #1
 8012d68:	2102      	movs	r1, #2
 8012d6a:	e000      	b.n	8012d6e <__cvt+0x3a>
 8012d6c:	2103      	movs	r1, #3
 8012d6e:	ab03      	add	r3, sp, #12
 8012d70:	9301      	str	r3, [sp, #4]
 8012d72:	ab02      	add	r3, sp, #8
 8012d74:	9300      	str	r3, [sp, #0]
 8012d76:	4622      	mov	r2, r4
 8012d78:	4633      	mov	r3, r6
 8012d7a:	eeb0 0b48 	vmov.f64	d0, d8
 8012d7e:	f000 fe47 	bl	8013a10 <_dtoa_r>
 8012d82:	2d47      	cmp	r5, #71	@ 0x47
 8012d84:	d114      	bne.n	8012db0 <__cvt+0x7c>
 8012d86:	07fb      	lsls	r3, r7, #31
 8012d88:	d50a      	bpl.n	8012da0 <__cvt+0x6c>
 8012d8a:	1902      	adds	r2, r0, r4
 8012d8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d94:	bf08      	it	eq
 8012d96:	9203      	streq	r2, [sp, #12]
 8012d98:	2130      	movs	r1, #48	@ 0x30
 8012d9a:	9b03      	ldr	r3, [sp, #12]
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d319      	bcc.n	8012dd4 <__cvt+0xa0>
 8012da0:	9b03      	ldr	r3, [sp, #12]
 8012da2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012da4:	1a1b      	subs	r3, r3, r0
 8012da6:	6013      	str	r3, [r2, #0]
 8012da8:	b005      	add	sp, #20
 8012daa:	ecbd 8b02 	vpop	{d8}
 8012dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012db0:	2d46      	cmp	r5, #70	@ 0x46
 8012db2:	eb00 0204 	add.w	r2, r0, r4
 8012db6:	d1e9      	bne.n	8012d8c <__cvt+0x58>
 8012db8:	7803      	ldrb	r3, [r0, #0]
 8012dba:	2b30      	cmp	r3, #48	@ 0x30
 8012dbc:	d107      	bne.n	8012dce <__cvt+0x9a>
 8012dbe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc6:	bf1c      	itt	ne
 8012dc8:	f1c4 0401 	rsbne	r4, r4, #1
 8012dcc:	6034      	strne	r4, [r6, #0]
 8012dce:	6833      	ldr	r3, [r6, #0]
 8012dd0:	441a      	add	r2, r3
 8012dd2:	e7db      	b.n	8012d8c <__cvt+0x58>
 8012dd4:	1c5c      	adds	r4, r3, #1
 8012dd6:	9403      	str	r4, [sp, #12]
 8012dd8:	7019      	strb	r1, [r3, #0]
 8012dda:	e7de      	b.n	8012d9a <__cvt+0x66>

08012ddc <__exponent>:
 8012ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012dde:	2900      	cmp	r1, #0
 8012de0:	bfba      	itte	lt
 8012de2:	4249      	neglt	r1, r1
 8012de4:	232d      	movlt	r3, #45	@ 0x2d
 8012de6:	232b      	movge	r3, #43	@ 0x2b
 8012de8:	2909      	cmp	r1, #9
 8012dea:	7002      	strb	r2, [r0, #0]
 8012dec:	7043      	strb	r3, [r0, #1]
 8012dee:	dd29      	ble.n	8012e44 <__exponent+0x68>
 8012df0:	f10d 0307 	add.w	r3, sp, #7
 8012df4:	461d      	mov	r5, r3
 8012df6:	270a      	movs	r7, #10
 8012df8:	461a      	mov	r2, r3
 8012dfa:	fbb1 f6f7 	udiv	r6, r1, r7
 8012dfe:	fb07 1416 	mls	r4, r7, r6, r1
 8012e02:	3430      	adds	r4, #48	@ 0x30
 8012e04:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012e08:	460c      	mov	r4, r1
 8012e0a:	2c63      	cmp	r4, #99	@ 0x63
 8012e0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8012e10:	4631      	mov	r1, r6
 8012e12:	dcf1      	bgt.n	8012df8 <__exponent+0x1c>
 8012e14:	3130      	adds	r1, #48	@ 0x30
 8012e16:	1e94      	subs	r4, r2, #2
 8012e18:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012e1c:	1c41      	adds	r1, r0, #1
 8012e1e:	4623      	mov	r3, r4
 8012e20:	42ab      	cmp	r3, r5
 8012e22:	d30a      	bcc.n	8012e3a <__exponent+0x5e>
 8012e24:	f10d 0309 	add.w	r3, sp, #9
 8012e28:	1a9b      	subs	r3, r3, r2
 8012e2a:	42ac      	cmp	r4, r5
 8012e2c:	bf88      	it	hi
 8012e2e:	2300      	movhi	r3, #0
 8012e30:	3302      	adds	r3, #2
 8012e32:	4403      	add	r3, r0
 8012e34:	1a18      	subs	r0, r3, r0
 8012e36:	b003      	add	sp, #12
 8012e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e3a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012e3e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012e42:	e7ed      	b.n	8012e20 <__exponent+0x44>
 8012e44:	2330      	movs	r3, #48	@ 0x30
 8012e46:	3130      	adds	r1, #48	@ 0x30
 8012e48:	7083      	strb	r3, [r0, #2]
 8012e4a:	70c1      	strb	r1, [r0, #3]
 8012e4c:	1d03      	adds	r3, r0, #4
 8012e4e:	e7f1      	b.n	8012e34 <__exponent+0x58>

08012e50 <_printf_float>:
 8012e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e54:	b08d      	sub	sp, #52	@ 0x34
 8012e56:	460c      	mov	r4, r1
 8012e58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012e5c:	4616      	mov	r6, r2
 8012e5e:	461f      	mov	r7, r3
 8012e60:	4605      	mov	r5, r0
 8012e62:	f000 fccb 	bl	80137fc <_localeconv_r>
 8012e66:	f8d0 b000 	ldr.w	fp, [r0]
 8012e6a:	4658      	mov	r0, fp
 8012e6c:	f7ed fa88 	bl	8000380 <strlen>
 8012e70:	2300      	movs	r3, #0
 8012e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e74:	f8d8 3000 	ldr.w	r3, [r8]
 8012e78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012e7c:	6822      	ldr	r2, [r4, #0]
 8012e7e:	9005      	str	r0, [sp, #20]
 8012e80:	3307      	adds	r3, #7
 8012e82:	f023 0307 	bic.w	r3, r3, #7
 8012e86:	f103 0108 	add.w	r1, r3, #8
 8012e8a:	f8c8 1000 	str.w	r1, [r8]
 8012e8e:	ed93 0b00 	vldr	d0, [r3]
 8012e92:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80130f0 <_printf_float+0x2a0>
 8012e96:	eeb0 7bc0 	vabs.f64	d7, d0
 8012e9a:	eeb4 7b46 	vcmp.f64	d7, d6
 8012e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8012ea6:	dd24      	ble.n	8012ef2 <_printf_float+0xa2>
 8012ea8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb0:	d502      	bpl.n	8012eb8 <_printf_float+0x68>
 8012eb2:	232d      	movs	r3, #45	@ 0x2d
 8012eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012eb8:	498f      	ldr	r1, [pc, #572]	@ (80130f8 <_printf_float+0x2a8>)
 8012eba:	4b90      	ldr	r3, [pc, #576]	@ (80130fc <_printf_float+0x2ac>)
 8012ebc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012ec0:	bf94      	ite	ls
 8012ec2:	4688      	movls	r8, r1
 8012ec4:	4698      	movhi	r8, r3
 8012ec6:	f022 0204 	bic.w	r2, r2, #4
 8012eca:	2303      	movs	r3, #3
 8012ecc:	6123      	str	r3, [r4, #16]
 8012ece:	6022      	str	r2, [r4, #0]
 8012ed0:	f04f 0a00 	mov.w	sl, #0
 8012ed4:	9700      	str	r7, [sp, #0]
 8012ed6:	4633      	mov	r3, r6
 8012ed8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012eda:	4621      	mov	r1, r4
 8012edc:	4628      	mov	r0, r5
 8012ede:	f000 f9d1 	bl	8013284 <_printf_common>
 8012ee2:	3001      	adds	r0, #1
 8012ee4:	f040 8089 	bne.w	8012ffa <_printf_float+0x1aa>
 8012ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8012eec:	b00d      	add	sp, #52	@ 0x34
 8012eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef2:	eeb4 0b40 	vcmp.f64	d0, d0
 8012ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012efa:	d709      	bvc.n	8012f10 <_printf_float+0xc0>
 8012efc:	ee10 3a90 	vmov	r3, s1
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	bfbc      	itt	lt
 8012f04:	232d      	movlt	r3, #45	@ 0x2d
 8012f06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012f0a:	497d      	ldr	r1, [pc, #500]	@ (8013100 <_printf_float+0x2b0>)
 8012f0c:	4b7d      	ldr	r3, [pc, #500]	@ (8013104 <_printf_float+0x2b4>)
 8012f0e:	e7d5      	b.n	8012ebc <_printf_float+0x6c>
 8012f10:	6863      	ldr	r3, [r4, #4]
 8012f12:	1c59      	adds	r1, r3, #1
 8012f14:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012f18:	d139      	bne.n	8012f8e <_printf_float+0x13e>
 8012f1a:	2306      	movs	r3, #6
 8012f1c:	6063      	str	r3, [r4, #4]
 8012f1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012f22:	2300      	movs	r3, #0
 8012f24:	6022      	str	r2, [r4, #0]
 8012f26:	9303      	str	r3, [sp, #12]
 8012f28:	ab0a      	add	r3, sp, #40	@ 0x28
 8012f2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012f2e:	ab09      	add	r3, sp, #36	@ 0x24
 8012f30:	9300      	str	r3, [sp, #0]
 8012f32:	6861      	ldr	r1, [r4, #4]
 8012f34:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012f38:	4628      	mov	r0, r5
 8012f3a:	f7ff fefb 	bl	8012d34 <__cvt>
 8012f3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012f42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012f44:	4680      	mov	r8, r0
 8012f46:	d129      	bne.n	8012f9c <_printf_float+0x14c>
 8012f48:	1cc8      	adds	r0, r1, #3
 8012f4a:	db02      	blt.n	8012f52 <_printf_float+0x102>
 8012f4c:	6863      	ldr	r3, [r4, #4]
 8012f4e:	4299      	cmp	r1, r3
 8012f50:	dd41      	ble.n	8012fd6 <_printf_float+0x186>
 8012f52:	f1a9 0902 	sub.w	r9, r9, #2
 8012f56:	fa5f f989 	uxtb.w	r9, r9
 8012f5a:	3901      	subs	r1, #1
 8012f5c:	464a      	mov	r2, r9
 8012f5e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012f62:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f64:	f7ff ff3a 	bl	8012ddc <__exponent>
 8012f68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012f6a:	1813      	adds	r3, r2, r0
 8012f6c:	2a01      	cmp	r2, #1
 8012f6e:	4682      	mov	sl, r0
 8012f70:	6123      	str	r3, [r4, #16]
 8012f72:	dc02      	bgt.n	8012f7a <_printf_float+0x12a>
 8012f74:	6822      	ldr	r2, [r4, #0]
 8012f76:	07d2      	lsls	r2, r2, #31
 8012f78:	d501      	bpl.n	8012f7e <_printf_float+0x12e>
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	6123      	str	r3, [r4, #16]
 8012f7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d0a6      	beq.n	8012ed4 <_printf_float+0x84>
 8012f86:	232d      	movs	r3, #45	@ 0x2d
 8012f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f8c:	e7a2      	b.n	8012ed4 <_printf_float+0x84>
 8012f8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012f92:	d1c4      	bne.n	8012f1e <_printf_float+0xce>
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d1c2      	bne.n	8012f1e <_printf_float+0xce>
 8012f98:	2301      	movs	r3, #1
 8012f9a:	e7bf      	b.n	8012f1c <_printf_float+0xcc>
 8012f9c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012fa0:	d9db      	bls.n	8012f5a <_printf_float+0x10a>
 8012fa2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012fa6:	d118      	bne.n	8012fda <_printf_float+0x18a>
 8012fa8:	2900      	cmp	r1, #0
 8012faa:	6863      	ldr	r3, [r4, #4]
 8012fac:	dd0b      	ble.n	8012fc6 <_printf_float+0x176>
 8012fae:	6121      	str	r1, [r4, #16]
 8012fb0:	b913      	cbnz	r3, 8012fb8 <_printf_float+0x168>
 8012fb2:	6822      	ldr	r2, [r4, #0]
 8012fb4:	07d0      	lsls	r0, r2, #31
 8012fb6:	d502      	bpl.n	8012fbe <_printf_float+0x16e>
 8012fb8:	3301      	adds	r3, #1
 8012fba:	440b      	add	r3, r1
 8012fbc:	6123      	str	r3, [r4, #16]
 8012fbe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012fc0:	f04f 0a00 	mov.w	sl, #0
 8012fc4:	e7db      	b.n	8012f7e <_printf_float+0x12e>
 8012fc6:	b913      	cbnz	r3, 8012fce <_printf_float+0x17e>
 8012fc8:	6822      	ldr	r2, [r4, #0]
 8012fca:	07d2      	lsls	r2, r2, #31
 8012fcc:	d501      	bpl.n	8012fd2 <_printf_float+0x182>
 8012fce:	3302      	adds	r3, #2
 8012fd0:	e7f4      	b.n	8012fbc <_printf_float+0x16c>
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	e7f2      	b.n	8012fbc <_printf_float+0x16c>
 8012fd6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012fda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fdc:	4299      	cmp	r1, r3
 8012fde:	db05      	blt.n	8012fec <_printf_float+0x19c>
 8012fe0:	6823      	ldr	r3, [r4, #0]
 8012fe2:	6121      	str	r1, [r4, #16]
 8012fe4:	07d8      	lsls	r0, r3, #31
 8012fe6:	d5ea      	bpl.n	8012fbe <_printf_float+0x16e>
 8012fe8:	1c4b      	adds	r3, r1, #1
 8012fea:	e7e7      	b.n	8012fbc <_printf_float+0x16c>
 8012fec:	2900      	cmp	r1, #0
 8012fee:	bfd4      	ite	le
 8012ff0:	f1c1 0202 	rsble	r2, r1, #2
 8012ff4:	2201      	movgt	r2, #1
 8012ff6:	4413      	add	r3, r2
 8012ff8:	e7e0      	b.n	8012fbc <_printf_float+0x16c>
 8012ffa:	6823      	ldr	r3, [r4, #0]
 8012ffc:	055a      	lsls	r2, r3, #21
 8012ffe:	d407      	bmi.n	8013010 <_printf_float+0x1c0>
 8013000:	6923      	ldr	r3, [r4, #16]
 8013002:	4642      	mov	r2, r8
 8013004:	4631      	mov	r1, r6
 8013006:	4628      	mov	r0, r5
 8013008:	47b8      	blx	r7
 801300a:	3001      	adds	r0, #1
 801300c:	d12a      	bne.n	8013064 <_printf_float+0x214>
 801300e:	e76b      	b.n	8012ee8 <_printf_float+0x98>
 8013010:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013014:	f240 80e0 	bls.w	80131d8 <_printf_float+0x388>
 8013018:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801301c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013024:	d133      	bne.n	801308e <_printf_float+0x23e>
 8013026:	4a38      	ldr	r2, [pc, #224]	@ (8013108 <_printf_float+0x2b8>)
 8013028:	2301      	movs	r3, #1
 801302a:	4631      	mov	r1, r6
 801302c:	4628      	mov	r0, r5
 801302e:	47b8      	blx	r7
 8013030:	3001      	adds	r0, #1
 8013032:	f43f af59 	beq.w	8012ee8 <_printf_float+0x98>
 8013036:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801303a:	4543      	cmp	r3, r8
 801303c:	db02      	blt.n	8013044 <_printf_float+0x1f4>
 801303e:	6823      	ldr	r3, [r4, #0]
 8013040:	07d8      	lsls	r0, r3, #31
 8013042:	d50f      	bpl.n	8013064 <_printf_float+0x214>
 8013044:	9b05      	ldr	r3, [sp, #20]
 8013046:	465a      	mov	r2, fp
 8013048:	4631      	mov	r1, r6
 801304a:	4628      	mov	r0, r5
 801304c:	47b8      	blx	r7
 801304e:	3001      	adds	r0, #1
 8013050:	f43f af4a 	beq.w	8012ee8 <_printf_float+0x98>
 8013054:	f04f 0900 	mov.w	r9, #0
 8013058:	f108 38ff 	add.w	r8, r8, #4294967295
 801305c:	f104 0a1a 	add.w	sl, r4, #26
 8013060:	45c8      	cmp	r8, r9
 8013062:	dc09      	bgt.n	8013078 <_printf_float+0x228>
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	079b      	lsls	r3, r3, #30
 8013068:	f100 8107 	bmi.w	801327a <_printf_float+0x42a>
 801306c:	68e0      	ldr	r0, [r4, #12]
 801306e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013070:	4298      	cmp	r0, r3
 8013072:	bfb8      	it	lt
 8013074:	4618      	movlt	r0, r3
 8013076:	e739      	b.n	8012eec <_printf_float+0x9c>
 8013078:	2301      	movs	r3, #1
 801307a:	4652      	mov	r2, sl
 801307c:	4631      	mov	r1, r6
 801307e:	4628      	mov	r0, r5
 8013080:	47b8      	blx	r7
 8013082:	3001      	adds	r0, #1
 8013084:	f43f af30 	beq.w	8012ee8 <_printf_float+0x98>
 8013088:	f109 0901 	add.w	r9, r9, #1
 801308c:	e7e8      	b.n	8013060 <_printf_float+0x210>
 801308e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013090:	2b00      	cmp	r3, #0
 8013092:	dc3b      	bgt.n	801310c <_printf_float+0x2bc>
 8013094:	4a1c      	ldr	r2, [pc, #112]	@ (8013108 <_printf_float+0x2b8>)
 8013096:	2301      	movs	r3, #1
 8013098:	4631      	mov	r1, r6
 801309a:	4628      	mov	r0, r5
 801309c:	47b8      	blx	r7
 801309e:	3001      	adds	r0, #1
 80130a0:	f43f af22 	beq.w	8012ee8 <_printf_float+0x98>
 80130a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80130a8:	ea59 0303 	orrs.w	r3, r9, r3
 80130ac:	d102      	bne.n	80130b4 <_printf_float+0x264>
 80130ae:	6823      	ldr	r3, [r4, #0]
 80130b0:	07d9      	lsls	r1, r3, #31
 80130b2:	d5d7      	bpl.n	8013064 <_printf_float+0x214>
 80130b4:	9b05      	ldr	r3, [sp, #20]
 80130b6:	465a      	mov	r2, fp
 80130b8:	4631      	mov	r1, r6
 80130ba:	4628      	mov	r0, r5
 80130bc:	47b8      	blx	r7
 80130be:	3001      	adds	r0, #1
 80130c0:	f43f af12 	beq.w	8012ee8 <_printf_float+0x98>
 80130c4:	f04f 0a00 	mov.w	sl, #0
 80130c8:	f104 0b1a 	add.w	fp, r4, #26
 80130cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130ce:	425b      	negs	r3, r3
 80130d0:	4553      	cmp	r3, sl
 80130d2:	dc01      	bgt.n	80130d8 <_printf_float+0x288>
 80130d4:	464b      	mov	r3, r9
 80130d6:	e794      	b.n	8013002 <_printf_float+0x1b2>
 80130d8:	2301      	movs	r3, #1
 80130da:	465a      	mov	r2, fp
 80130dc:	4631      	mov	r1, r6
 80130de:	4628      	mov	r0, r5
 80130e0:	47b8      	blx	r7
 80130e2:	3001      	adds	r0, #1
 80130e4:	f43f af00 	beq.w	8012ee8 <_printf_float+0x98>
 80130e8:	f10a 0a01 	add.w	sl, sl, #1
 80130ec:	e7ee      	b.n	80130cc <_printf_float+0x27c>
 80130ee:	bf00      	nop
 80130f0:	ffffffff 	.word	0xffffffff
 80130f4:	7fefffff 	.word	0x7fefffff
 80130f8:	08017a50 	.word	0x08017a50
 80130fc:	08017a54 	.word	0x08017a54
 8013100:	08017a58 	.word	0x08017a58
 8013104:	08017a5c 	.word	0x08017a5c
 8013108:	08017a60 	.word	0x08017a60
 801310c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801310e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013112:	4553      	cmp	r3, sl
 8013114:	bfa8      	it	ge
 8013116:	4653      	movge	r3, sl
 8013118:	2b00      	cmp	r3, #0
 801311a:	4699      	mov	r9, r3
 801311c:	dc37      	bgt.n	801318e <_printf_float+0x33e>
 801311e:	2300      	movs	r3, #0
 8013120:	9307      	str	r3, [sp, #28]
 8013122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013126:	f104 021a 	add.w	r2, r4, #26
 801312a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801312c:	9907      	ldr	r1, [sp, #28]
 801312e:	9306      	str	r3, [sp, #24]
 8013130:	eba3 0309 	sub.w	r3, r3, r9
 8013134:	428b      	cmp	r3, r1
 8013136:	dc31      	bgt.n	801319c <_printf_float+0x34c>
 8013138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801313a:	459a      	cmp	sl, r3
 801313c:	dc3b      	bgt.n	80131b6 <_printf_float+0x366>
 801313e:	6823      	ldr	r3, [r4, #0]
 8013140:	07da      	lsls	r2, r3, #31
 8013142:	d438      	bmi.n	80131b6 <_printf_float+0x366>
 8013144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013146:	ebaa 0903 	sub.w	r9, sl, r3
 801314a:	9b06      	ldr	r3, [sp, #24]
 801314c:	ebaa 0303 	sub.w	r3, sl, r3
 8013150:	4599      	cmp	r9, r3
 8013152:	bfa8      	it	ge
 8013154:	4699      	movge	r9, r3
 8013156:	f1b9 0f00 	cmp.w	r9, #0
 801315a:	dc34      	bgt.n	80131c6 <_printf_float+0x376>
 801315c:	f04f 0800 	mov.w	r8, #0
 8013160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013164:	f104 0b1a 	add.w	fp, r4, #26
 8013168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801316a:	ebaa 0303 	sub.w	r3, sl, r3
 801316e:	eba3 0309 	sub.w	r3, r3, r9
 8013172:	4543      	cmp	r3, r8
 8013174:	f77f af76 	ble.w	8013064 <_printf_float+0x214>
 8013178:	2301      	movs	r3, #1
 801317a:	465a      	mov	r2, fp
 801317c:	4631      	mov	r1, r6
 801317e:	4628      	mov	r0, r5
 8013180:	47b8      	blx	r7
 8013182:	3001      	adds	r0, #1
 8013184:	f43f aeb0 	beq.w	8012ee8 <_printf_float+0x98>
 8013188:	f108 0801 	add.w	r8, r8, #1
 801318c:	e7ec      	b.n	8013168 <_printf_float+0x318>
 801318e:	4642      	mov	r2, r8
 8013190:	4631      	mov	r1, r6
 8013192:	4628      	mov	r0, r5
 8013194:	47b8      	blx	r7
 8013196:	3001      	adds	r0, #1
 8013198:	d1c1      	bne.n	801311e <_printf_float+0x2ce>
 801319a:	e6a5      	b.n	8012ee8 <_printf_float+0x98>
 801319c:	2301      	movs	r3, #1
 801319e:	4631      	mov	r1, r6
 80131a0:	4628      	mov	r0, r5
 80131a2:	9206      	str	r2, [sp, #24]
 80131a4:	47b8      	blx	r7
 80131a6:	3001      	adds	r0, #1
 80131a8:	f43f ae9e 	beq.w	8012ee8 <_printf_float+0x98>
 80131ac:	9b07      	ldr	r3, [sp, #28]
 80131ae:	9a06      	ldr	r2, [sp, #24]
 80131b0:	3301      	adds	r3, #1
 80131b2:	9307      	str	r3, [sp, #28]
 80131b4:	e7b9      	b.n	801312a <_printf_float+0x2da>
 80131b6:	9b05      	ldr	r3, [sp, #20]
 80131b8:	465a      	mov	r2, fp
 80131ba:	4631      	mov	r1, r6
 80131bc:	4628      	mov	r0, r5
 80131be:	47b8      	blx	r7
 80131c0:	3001      	adds	r0, #1
 80131c2:	d1bf      	bne.n	8013144 <_printf_float+0x2f4>
 80131c4:	e690      	b.n	8012ee8 <_printf_float+0x98>
 80131c6:	9a06      	ldr	r2, [sp, #24]
 80131c8:	464b      	mov	r3, r9
 80131ca:	4442      	add	r2, r8
 80131cc:	4631      	mov	r1, r6
 80131ce:	4628      	mov	r0, r5
 80131d0:	47b8      	blx	r7
 80131d2:	3001      	adds	r0, #1
 80131d4:	d1c2      	bne.n	801315c <_printf_float+0x30c>
 80131d6:	e687      	b.n	8012ee8 <_printf_float+0x98>
 80131d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80131dc:	f1b9 0f01 	cmp.w	r9, #1
 80131e0:	dc01      	bgt.n	80131e6 <_printf_float+0x396>
 80131e2:	07db      	lsls	r3, r3, #31
 80131e4:	d536      	bpl.n	8013254 <_printf_float+0x404>
 80131e6:	2301      	movs	r3, #1
 80131e8:	4642      	mov	r2, r8
 80131ea:	4631      	mov	r1, r6
 80131ec:	4628      	mov	r0, r5
 80131ee:	47b8      	blx	r7
 80131f0:	3001      	adds	r0, #1
 80131f2:	f43f ae79 	beq.w	8012ee8 <_printf_float+0x98>
 80131f6:	9b05      	ldr	r3, [sp, #20]
 80131f8:	465a      	mov	r2, fp
 80131fa:	4631      	mov	r1, r6
 80131fc:	4628      	mov	r0, r5
 80131fe:	47b8      	blx	r7
 8013200:	3001      	adds	r0, #1
 8013202:	f43f ae71 	beq.w	8012ee8 <_printf_float+0x98>
 8013206:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801320a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013212:	f109 39ff 	add.w	r9, r9, #4294967295
 8013216:	d018      	beq.n	801324a <_printf_float+0x3fa>
 8013218:	464b      	mov	r3, r9
 801321a:	f108 0201 	add.w	r2, r8, #1
 801321e:	4631      	mov	r1, r6
 8013220:	4628      	mov	r0, r5
 8013222:	47b8      	blx	r7
 8013224:	3001      	adds	r0, #1
 8013226:	d10c      	bne.n	8013242 <_printf_float+0x3f2>
 8013228:	e65e      	b.n	8012ee8 <_printf_float+0x98>
 801322a:	2301      	movs	r3, #1
 801322c:	465a      	mov	r2, fp
 801322e:	4631      	mov	r1, r6
 8013230:	4628      	mov	r0, r5
 8013232:	47b8      	blx	r7
 8013234:	3001      	adds	r0, #1
 8013236:	f43f ae57 	beq.w	8012ee8 <_printf_float+0x98>
 801323a:	f108 0801 	add.w	r8, r8, #1
 801323e:	45c8      	cmp	r8, r9
 8013240:	dbf3      	blt.n	801322a <_printf_float+0x3da>
 8013242:	4653      	mov	r3, sl
 8013244:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013248:	e6dc      	b.n	8013004 <_printf_float+0x1b4>
 801324a:	f04f 0800 	mov.w	r8, #0
 801324e:	f104 0b1a 	add.w	fp, r4, #26
 8013252:	e7f4      	b.n	801323e <_printf_float+0x3ee>
 8013254:	2301      	movs	r3, #1
 8013256:	4642      	mov	r2, r8
 8013258:	e7e1      	b.n	801321e <_printf_float+0x3ce>
 801325a:	2301      	movs	r3, #1
 801325c:	464a      	mov	r2, r9
 801325e:	4631      	mov	r1, r6
 8013260:	4628      	mov	r0, r5
 8013262:	47b8      	blx	r7
 8013264:	3001      	adds	r0, #1
 8013266:	f43f ae3f 	beq.w	8012ee8 <_printf_float+0x98>
 801326a:	f108 0801 	add.w	r8, r8, #1
 801326e:	68e3      	ldr	r3, [r4, #12]
 8013270:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013272:	1a5b      	subs	r3, r3, r1
 8013274:	4543      	cmp	r3, r8
 8013276:	dcf0      	bgt.n	801325a <_printf_float+0x40a>
 8013278:	e6f8      	b.n	801306c <_printf_float+0x21c>
 801327a:	f04f 0800 	mov.w	r8, #0
 801327e:	f104 0919 	add.w	r9, r4, #25
 8013282:	e7f4      	b.n	801326e <_printf_float+0x41e>

08013284 <_printf_common>:
 8013284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013288:	4616      	mov	r6, r2
 801328a:	4698      	mov	r8, r3
 801328c:	688a      	ldr	r2, [r1, #8]
 801328e:	690b      	ldr	r3, [r1, #16]
 8013290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013294:	4293      	cmp	r3, r2
 8013296:	bfb8      	it	lt
 8013298:	4613      	movlt	r3, r2
 801329a:	6033      	str	r3, [r6, #0]
 801329c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80132a0:	4607      	mov	r7, r0
 80132a2:	460c      	mov	r4, r1
 80132a4:	b10a      	cbz	r2, 80132aa <_printf_common+0x26>
 80132a6:	3301      	adds	r3, #1
 80132a8:	6033      	str	r3, [r6, #0]
 80132aa:	6823      	ldr	r3, [r4, #0]
 80132ac:	0699      	lsls	r1, r3, #26
 80132ae:	bf42      	ittt	mi
 80132b0:	6833      	ldrmi	r3, [r6, #0]
 80132b2:	3302      	addmi	r3, #2
 80132b4:	6033      	strmi	r3, [r6, #0]
 80132b6:	6825      	ldr	r5, [r4, #0]
 80132b8:	f015 0506 	ands.w	r5, r5, #6
 80132bc:	d106      	bne.n	80132cc <_printf_common+0x48>
 80132be:	f104 0a19 	add.w	sl, r4, #25
 80132c2:	68e3      	ldr	r3, [r4, #12]
 80132c4:	6832      	ldr	r2, [r6, #0]
 80132c6:	1a9b      	subs	r3, r3, r2
 80132c8:	42ab      	cmp	r3, r5
 80132ca:	dc26      	bgt.n	801331a <_printf_common+0x96>
 80132cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80132d0:	6822      	ldr	r2, [r4, #0]
 80132d2:	3b00      	subs	r3, #0
 80132d4:	bf18      	it	ne
 80132d6:	2301      	movne	r3, #1
 80132d8:	0692      	lsls	r2, r2, #26
 80132da:	d42b      	bmi.n	8013334 <_printf_common+0xb0>
 80132dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80132e0:	4641      	mov	r1, r8
 80132e2:	4638      	mov	r0, r7
 80132e4:	47c8      	blx	r9
 80132e6:	3001      	adds	r0, #1
 80132e8:	d01e      	beq.n	8013328 <_printf_common+0xa4>
 80132ea:	6823      	ldr	r3, [r4, #0]
 80132ec:	6922      	ldr	r2, [r4, #16]
 80132ee:	f003 0306 	and.w	r3, r3, #6
 80132f2:	2b04      	cmp	r3, #4
 80132f4:	bf02      	ittt	eq
 80132f6:	68e5      	ldreq	r5, [r4, #12]
 80132f8:	6833      	ldreq	r3, [r6, #0]
 80132fa:	1aed      	subeq	r5, r5, r3
 80132fc:	68a3      	ldr	r3, [r4, #8]
 80132fe:	bf0c      	ite	eq
 8013300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013304:	2500      	movne	r5, #0
 8013306:	4293      	cmp	r3, r2
 8013308:	bfc4      	itt	gt
 801330a:	1a9b      	subgt	r3, r3, r2
 801330c:	18ed      	addgt	r5, r5, r3
 801330e:	2600      	movs	r6, #0
 8013310:	341a      	adds	r4, #26
 8013312:	42b5      	cmp	r5, r6
 8013314:	d11a      	bne.n	801334c <_printf_common+0xc8>
 8013316:	2000      	movs	r0, #0
 8013318:	e008      	b.n	801332c <_printf_common+0xa8>
 801331a:	2301      	movs	r3, #1
 801331c:	4652      	mov	r2, sl
 801331e:	4641      	mov	r1, r8
 8013320:	4638      	mov	r0, r7
 8013322:	47c8      	blx	r9
 8013324:	3001      	adds	r0, #1
 8013326:	d103      	bne.n	8013330 <_printf_common+0xac>
 8013328:	f04f 30ff 	mov.w	r0, #4294967295
 801332c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013330:	3501      	adds	r5, #1
 8013332:	e7c6      	b.n	80132c2 <_printf_common+0x3e>
 8013334:	18e1      	adds	r1, r4, r3
 8013336:	1c5a      	adds	r2, r3, #1
 8013338:	2030      	movs	r0, #48	@ 0x30
 801333a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801333e:	4422      	add	r2, r4
 8013340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013348:	3302      	adds	r3, #2
 801334a:	e7c7      	b.n	80132dc <_printf_common+0x58>
 801334c:	2301      	movs	r3, #1
 801334e:	4622      	mov	r2, r4
 8013350:	4641      	mov	r1, r8
 8013352:	4638      	mov	r0, r7
 8013354:	47c8      	blx	r9
 8013356:	3001      	adds	r0, #1
 8013358:	d0e6      	beq.n	8013328 <_printf_common+0xa4>
 801335a:	3601      	adds	r6, #1
 801335c:	e7d9      	b.n	8013312 <_printf_common+0x8e>
	...

08013360 <_printf_i>:
 8013360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013364:	7e0f      	ldrb	r7, [r1, #24]
 8013366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013368:	2f78      	cmp	r7, #120	@ 0x78
 801336a:	4691      	mov	r9, r2
 801336c:	4680      	mov	r8, r0
 801336e:	460c      	mov	r4, r1
 8013370:	469a      	mov	sl, r3
 8013372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013376:	d807      	bhi.n	8013388 <_printf_i+0x28>
 8013378:	2f62      	cmp	r7, #98	@ 0x62
 801337a:	d80a      	bhi.n	8013392 <_printf_i+0x32>
 801337c:	2f00      	cmp	r7, #0
 801337e:	f000 80d2 	beq.w	8013526 <_printf_i+0x1c6>
 8013382:	2f58      	cmp	r7, #88	@ 0x58
 8013384:	f000 80b9 	beq.w	80134fa <_printf_i+0x19a>
 8013388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801338c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013390:	e03a      	b.n	8013408 <_printf_i+0xa8>
 8013392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013396:	2b15      	cmp	r3, #21
 8013398:	d8f6      	bhi.n	8013388 <_printf_i+0x28>
 801339a:	a101      	add	r1, pc, #4	@ (adr r1, 80133a0 <_printf_i+0x40>)
 801339c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80133a0:	080133f9 	.word	0x080133f9
 80133a4:	0801340d 	.word	0x0801340d
 80133a8:	08013389 	.word	0x08013389
 80133ac:	08013389 	.word	0x08013389
 80133b0:	08013389 	.word	0x08013389
 80133b4:	08013389 	.word	0x08013389
 80133b8:	0801340d 	.word	0x0801340d
 80133bc:	08013389 	.word	0x08013389
 80133c0:	08013389 	.word	0x08013389
 80133c4:	08013389 	.word	0x08013389
 80133c8:	08013389 	.word	0x08013389
 80133cc:	0801350d 	.word	0x0801350d
 80133d0:	08013437 	.word	0x08013437
 80133d4:	080134c7 	.word	0x080134c7
 80133d8:	08013389 	.word	0x08013389
 80133dc:	08013389 	.word	0x08013389
 80133e0:	0801352f 	.word	0x0801352f
 80133e4:	08013389 	.word	0x08013389
 80133e8:	08013437 	.word	0x08013437
 80133ec:	08013389 	.word	0x08013389
 80133f0:	08013389 	.word	0x08013389
 80133f4:	080134cf 	.word	0x080134cf
 80133f8:	6833      	ldr	r3, [r6, #0]
 80133fa:	1d1a      	adds	r2, r3, #4
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	6032      	str	r2, [r6, #0]
 8013400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013408:	2301      	movs	r3, #1
 801340a:	e09d      	b.n	8013548 <_printf_i+0x1e8>
 801340c:	6833      	ldr	r3, [r6, #0]
 801340e:	6820      	ldr	r0, [r4, #0]
 8013410:	1d19      	adds	r1, r3, #4
 8013412:	6031      	str	r1, [r6, #0]
 8013414:	0606      	lsls	r6, r0, #24
 8013416:	d501      	bpl.n	801341c <_printf_i+0xbc>
 8013418:	681d      	ldr	r5, [r3, #0]
 801341a:	e003      	b.n	8013424 <_printf_i+0xc4>
 801341c:	0645      	lsls	r5, r0, #25
 801341e:	d5fb      	bpl.n	8013418 <_printf_i+0xb8>
 8013420:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013424:	2d00      	cmp	r5, #0
 8013426:	da03      	bge.n	8013430 <_printf_i+0xd0>
 8013428:	232d      	movs	r3, #45	@ 0x2d
 801342a:	426d      	negs	r5, r5
 801342c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013430:	4859      	ldr	r0, [pc, #356]	@ (8013598 <_printf_i+0x238>)
 8013432:	230a      	movs	r3, #10
 8013434:	e011      	b.n	801345a <_printf_i+0xfa>
 8013436:	6821      	ldr	r1, [r4, #0]
 8013438:	6833      	ldr	r3, [r6, #0]
 801343a:	0608      	lsls	r0, r1, #24
 801343c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013440:	d402      	bmi.n	8013448 <_printf_i+0xe8>
 8013442:	0649      	lsls	r1, r1, #25
 8013444:	bf48      	it	mi
 8013446:	b2ad      	uxthmi	r5, r5
 8013448:	2f6f      	cmp	r7, #111	@ 0x6f
 801344a:	4853      	ldr	r0, [pc, #332]	@ (8013598 <_printf_i+0x238>)
 801344c:	6033      	str	r3, [r6, #0]
 801344e:	bf14      	ite	ne
 8013450:	230a      	movne	r3, #10
 8013452:	2308      	moveq	r3, #8
 8013454:	2100      	movs	r1, #0
 8013456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801345a:	6866      	ldr	r6, [r4, #4]
 801345c:	60a6      	str	r6, [r4, #8]
 801345e:	2e00      	cmp	r6, #0
 8013460:	bfa2      	ittt	ge
 8013462:	6821      	ldrge	r1, [r4, #0]
 8013464:	f021 0104 	bicge.w	r1, r1, #4
 8013468:	6021      	strge	r1, [r4, #0]
 801346a:	b90d      	cbnz	r5, 8013470 <_printf_i+0x110>
 801346c:	2e00      	cmp	r6, #0
 801346e:	d04b      	beq.n	8013508 <_printf_i+0x1a8>
 8013470:	4616      	mov	r6, r2
 8013472:	fbb5 f1f3 	udiv	r1, r5, r3
 8013476:	fb03 5711 	mls	r7, r3, r1, r5
 801347a:	5dc7      	ldrb	r7, [r0, r7]
 801347c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013480:	462f      	mov	r7, r5
 8013482:	42bb      	cmp	r3, r7
 8013484:	460d      	mov	r5, r1
 8013486:	d9f4      	bls.n	8013472 <_printf_i+0x112>
 8013488:	2b08      	cmp	r3, #8
 801348a:	d10b      	bne.n	80134a4 <_printf_i+0x144>
 801348c:	6823      	ldr	r3, [r4, #0]
 801348e:	07df      	lsls	r7, r3, #31
 8013490:	d508      	bpl.n	80134a4 <_printf_i+0x144>
 8013492:	6923      	ldr	r3, [r4, #16]
 8013494:	6861      	ldr	r1, [r4, #4]
 8013496:	4299      	cmp	r1, r3
 8013498:	bfde      	ittt	le
 801349a:	2330      	movle	r3, #48	@ 0x30
 801349c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80134a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80134a4:	1b92      	subs	r2, r2, r6
 80134a6:	6122      	str	r2, [r4, #16]
 80134a8:	f8cd a000 	str.w	sl, [sp]
 80134ac:	464b      	mov	r3, r9
 80134ae:	aa03      	add	r2, sp, #12
 80134b0:	4621      	mov	r1, r4
 80134b2:	4640      	mov	r0, r8
 80134b4:	f7ff fee6 	bl	8013284 <_printf_common>
 80134b8:	3001      	adds	r0, #1
 80134ba:	d14a      	bne.n	8013552 <_printf_i+0x1f2>
 80134bc:	f04f 30ff 	mov.w	r0, #4294967295
 80134c0:	b004      	add	sp, #16
 80134c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134c6:	6823      	ldr	r3, [r4, #0]
 80134c8:	f043 0320 	orr.w	r3, r3, #32
 80134cc:	6023      	str	r3, [r4, #0]
 80134ce:	4833      	ldr	r0, [pc, #204]	@ (801359c <_printf_i+0x23c>)
 80134d0:	2778      	movs	r7, #120	@ 0x78
 80134d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80134d6:	6823      	ldr	r3, [r4, #0]
 80134d8:	6831      	ldr	r1, [r6, #0]
 80134da:	061f      	lsls	r7, r3, #24
 80134dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80134e0:	d402      	bmi.n	80134e8 <_printf_i+0x188>
 80134e2:	065f      	lsls	r7, r3, #25
 80134e4:	bf48      	it	mi
 80134e6:	b2ad      	uxthmi	r5, r5
 80134e8:	6031      	str	r1, [r6, #0]
 80134ea:	07d9      	lsls	r1, r3, #31
 80134ec:	bf44      	itt	mi
 80134ee:	f043 0320 	orrmi.w	r3, r3, #32
 80134f2:	6023      	strmi	r3, [r4, #0]
 80134f4:	b11d      	cbz	r5, 80134fe <_printf_i+0x19e>
 80134f6:	2310      	movs	r3, #16
 80134f8:	e7ac      	b.n	8013454 <_printf_i+0xf4>
 80134fa:	4827      	ldr	r0, [pc, #156]	@ (8013598 <_printf_i+0x238>)
 80134fc:	e7e9      	b.n	80134d2 <_printf_i+0x172>
 80134fe:	6823      	ldr	r3, [r4, #0]
 8013500:	f023 0320 	bic.w	r3, r3, #32
 8013504:	6023      	str	r3, [r4, #0]
 8013506:	e7f6      	b.n	80134f6 <_printf_i+0x196>
 8013508:	4616      	mov	r6, r2
 801350a:	e7bd      	b.n	8013488 <_printf_i+0x128>
 801350c:	6833      	ldr	r3, [r6, #0]
 801350e:	6825      	ldr	r5, [r4, #0]
 8013510:	6961      	ldr	r1, [r4, #20]
 8013512:	1d18      	adds	r0, r3, #4
 8013514:	6030      	str	r0, [r6, #0]
 8013516:	062e      	lsls	r6, r5, #24
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	d501      	bpl.n	8013520 <_printf_i+0x1c0>
 801351c:	6019      	str	r1, [r3, #0]
 801351e:	e002      	b.n	8013526 <_printf_i+0x1c6>
 8013520:	0668      	lsls	r0, r5, #25
 8013522:	d5fb      	bpl.n	801351c <_printf_i+0x1bc>
 8013524:	8019      	strh	r1, [r3, #0]
 8013526:	2300      	movs	r3, #0
 8013528:	6123      	str	r3, [r4, #16]
 801352a:	4616      	mov	r6, r2
 801352c:	e7bc      	b.n	80134a8 <_printf_i+0x148>
 801352e:	6833      	ldr	r3, [r6, #0]
 8013530:	1d1a      	adds	r2, r3, #4
 8013532:	6032      	str	r2, [r6, #0]
 8013534:	681e      	ldr	r6, [r3, #0]
 8013536:	6862      	ldr	r2, [r4, #4]
 8013538:	2100      	movs	r1, #0
 801353a:	4630      	mov	r0, r6
 801353c:	f7ec fed0 	bl	80002e0 <memchr>
 8013540:	b108      	cbz	r0, 8013546 <_printf_i+0x1e6>
 8013542:	1b80      	subs	r0, r0, r6
 8013544:	6060      	str	r0, [r4, #4]
 8013546:	6863      	ldr	r3, [r4, #4]
 8013548:	6123      	str	r3, [r4, #16]
 801354a:	2300      	movs	r3, #0
 801354c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013550:	e7aa      	b.n	80134a8 <_printf_i+0x148>
 8013552:	6923      	ldr	r3, [r4, #16]
 8013554:	4632      	mov	r2, r6
 8013556:	4649      	mov	r1, r9
 8013558:	4640      	mov	r0, r8
 801355a:	47d0      	blx	sl
 801355c:	3001      	adds	r0, #1
 801355e:	d0ad      	beq.n	80134bc <_printf_i+0x15c>
 8013560:	6823      	ldr	r3, [r4, #0]
 8013562:	079b      	lsls	r3, r3, #30
 8013564:	d413      	bmi.n	801358e <_printf_i+0x22e>
 8013566:	68e0      	ldr	r0, [r4, #12]
 8013568:	9b03      	ldr	r3, [sp, #12]
 801356a:	4298      	cmp	r0, r3
 801356c:	bfb8      	it	lt
 801356e:	4618      	movlt	r0, r3
 8013570:	e7a6      	b.n	80134c0 <_printf_i+0x160>
 8013572:	2301      	movs	r3, #1
 8013574:	4632      	mov	r2, r6
 8013576:	4649      	mov	r1, r9
 8013578:	4640      	mov	r0, r8
 801357a:	47d0      	blx	sl
 801357c:	3001      	adds	r0, #1
 801357e:	d09d      	beq.n	80134bc <_printf_i+0x15c>
 8013580:	3501      	adds	r5, #1
 8013582:	68e3      	ldr	r3, [r4, #12]
 8013584:	9903      	ldr	r1, [sp, #12]
 8013586:	1a5b      	subs	r3, r3, r1
 8013588:	42ab      	cmp	r3, r5
 801358a:	dcf2      	bgt.n	8013572 <_printf_i+0x212>
 801358c:	e7eb      	b.n	8013566 <_printf_i+0x206>
 801358e:	2500      	movs	r5, #0
 8013590:	f104 0619 	add.w	r6, r4, #25
 8013594:	e7f5      	b.n	8013582 <_printf_i+0x222>
 8013596:	bf00      	nop
 8013598:	08017a62 	.word	0x08017a62
 801359c:	08017a73 	.word	0x08017a73

080135a0 <std>:
 80135a0:	2300      	movs	r3, #0
 80135a2:	b510      	push	{r4, lr}
 80135a4:	4604      	mov	r4, r0
 80135a6:	e9c0 3300 	strd	r3, r3, [r0]
 80135aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135ae:	6083      	str	r3, [r0, #8]
 80135b0:	8181      	strh	r1, [r0, #12]
 80135b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80135b4:	81c2      	strh	r2, [r0, #14]
 80135b6:	6183      	str	r3, [r0, #24]
 80135b8:	4619      	mov	r1, r3
 80135ba:	2208      	movs	r2, #8
 80135bc:	305c      	adds	r0, #92	@ 0x5c
 80135be:	f000 f914 	bl	80137ea <memset>
 80135c2:	4b0d      	ldr	r3, [pc, #52]	@ (80135f8 <std+0x58>)
 80135c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80135c6:	4b0d      	ldr	r3, [pc, #52]	@ (80135fc <std+0x5c>)
 80135c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80135ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013600 <std+0x60>)
 80135cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80135ce:	4b0d      	ldr	r3, [pc, #52]	@ (8013604 <std+0x64>)
 80135d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80135d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013608 <std+0x68>)
 80135d4:	6224      	str	r4, [r4, #32]
 80135d6:	429c      	cmp	r4, r3
 80135d8:	d006      	beq.n	80135e8 <std+0x48>
 80135da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80135de:	4294      	cmp	r4, r2
 80135e0:	d002      	beq.n	80135e8 <std+0x48>
 80135e2:	33d0      	adds	r3, #208	@ 0xd0
 80135e4:	429c      	cmp	r4, r3
 80135e6:	d105      	bne.n	80135f4 <std+0x54>
 80135e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80135ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135f0:	f000 b982 	b.w	80138f8 <__retarget_lock_init_recursive>
 80135f4:	bd10      	pop	{r4, pc}
 80135f6:	bf00      	nop
 80135f8:	08013765 	.word	0x08013765
 80135fc:	08013787 	.word	0x08013787
 8013600:	080137bf 	.word	0x080137bf
 8013604:	080137e3 	.word	0x080137e3
 8013608:	240027ec 	.word	0x240027ec

0801360c <stdio_exit_handler>:
 801360c:	4a02      	ldr	r2, [pc, #8]	@ (8013618 <stdio_exit_handler+0xc>)
 801360e:	4903      	ldr	r1, [pc, #12]	@ (801361c <stdio_exit_handler+0x10>)
 8013610:	4803      	ldr	r0, [pc, #12]	@ (8013620 <stdio_exit_handler+0x14>)
 8013612:	f000 b869 	b.w	80136e8 <_fwalk_sglue>
 8013616:	bf00      	nop
 8013618:	24000108 	.word	0x24000108
 801361c:	0801500d 	.word	0x0801500d
 8013620:	24000118 	.word	0x24000118

08013624 <cleanup_stdio>:
 8013624:	6841      	ldr	r1, [r0, #4]
 8013626:	4b0c      	ldr	r3, [pc, #48]	@ (8013658 <cleanup_stdio+0x34>)
 8013628:	4299      	cmp	r1, r3
 801362a:	b510      	push	{r4, lr}
 801362c:	4604      	mov	r4, r0
 801362e:	d001      	beq.n	8013634 <cleanup_stdio+0x10>
 8013630:	f001 fcec 	bl	801500c <_fflush_r>
 8013634:	68a1      	ldr	r1, [r4, #8]
 8013636:	4b09      	ldr	r3, [pc, #36]	@ (801365c <cleanup_stdio+0x38>)
 8013638:	4299      	cmp	r1, r3
 801363a:	d002      	beq.n	8013642 <cleanup_stdio+0x1e>
 801363c:	4620      	mov	r0, r4
 801363e:	f001 fce5 	bl	801500c <_fflush_r>
 8013642:	68e1      	ldr	r1, [r4, #12]
 8013644:	4b06      	ldr	r3, [pc, #24]	@ (8013660 <cleanup_stdio+0x3c>)
 8013646:	4299      	cmp	r1, r3
 8013648:	d004      	beq.n	8013654 <cleanup_stdio+0x30>
 801364a:	4620      	mov	r0, r4
 801364c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013650:	f001 bcdc 	b.w	801500c <_fflush_r>
 8013654:	bd10      	pop	{r4, pc}
 8013656:	bf00      	nop
 8013658:	240027ec 	.word	0x240027ec
 801365c:	24002854 	.word	0x24002854
 8013660:	240028bc 	.word	0x240028bc

08013664 <global_stdio_init.part.0>:
 8013664:	b510      	push	{r4, lr}
 8013666:	4b0b      	ldr	r3, [pc, #44]	@ (8013694 <global_stdio_init.part.0+0x30>)
 8013668:	4c0b      	ldr	r4, [pc, #44]	@ (8013698 <global_stdio_init.part.0+0x34>)
 801366a:	4a0c      	ldr	r2, [pc, #48]	@ (801369c <global_stdio_init.part.0+0x38>)
 801366c:	601a      	str	r2, [r3, #0]
 801366e:	4620      	mov	r0, r4
 8013670:	2200      	movs	r2, #0
 8013672:	2104      	movs	r1, #4
 8013674:	f7ff ff94 	bl	80135a0 <std>
 8013678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801367c:	2201      	movs	r2, #1
 801367e:	2109      	movs	r1, #9
 8013680:	f7ff ff8e 	bl	80135a0 <std>
 8013684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013688:	2202      	movs	r2, #2
 801368a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801368e:	2112      	movs	r1, #18
 8013690:	f7ff bf86 	b.w	80135a0 <std>
 8013694:	24002924 	.word	0x24002924
 8013698:	240027ec 	.word	0x240027ec
 801369c:	0801360d 	.word	0x0801360d

080136a0 <__sfp_lock_acquire>:
 80136a0:	4801      	ldr	r0, [pc, #4]	@ (80136a8 <__sfp_lock_acquire+0x8>)
 80136a2:	f000 b92a 	b.w	80138fa <__retarget_lock_acquire_recursive>
 80136a6:	bf00      	nop
 80136a8:	2400292d 	.word	0x2400292d

080136ac <__sfp_lock_release>:
 80136ac:	4801      	ldr	r0, [pc, #4]	@ (80136b4 <__sfp_lock_release+0x8>)
 80136ae:	f000 b925 	b.w	80138fc <__retarget_lock_release_recursive>
 80136b2:	bf00      	nop
 80136b4:	2400292d 	.word	0x2400292d

080136b8 <__sinit>:
 80136b8:	b510      	push	{r4, lr}
 80136ba:	4604      	mov	r4, r0
 80136bc:	f7ff fff0 	bl	80136a0 <__sfp_lock_acquire>
 80136c0:	6a23      	ldr	r3, [r4, #32]
 80136c2:	b11b      	cbz	r3, 80136cc <__sinit+0x14>
 80136c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136c8:	f7ff bff0 	b.w	80136ac <__sfp_lock_release>
 80136cc:	4b04      	ldr	r3, [pc, #16]	@ (80136e0 <__sinit+0x28>)
 80136ce:	6223      	str	r3, [r4, #32]
 80136d0:	4b04      	ldr	r3, [pc, #16]	@ (80136e4 <__sinit+0x2c>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d1f5      	bne.n	80136c4 <__sinit+0xc>
 80136d8:	f7ff ffc4 	bl	8013664 <global_stdio_init.part.0>
 80136dc:	e7f2      	b.n	80136c4 <__sinit+0xc>
 80136de:	bf00      	nop
 80136e0:	08013625 	.word	0x08013625
 80136e4:	24002924 	.word	0x24002924

080136e8 <_fwalk_sglue>:
 80136e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136ec:	4607      	mov	r7, r0
 80136ee:	4688      	mov	r8, r1
 80136f0:	4614      	mov	r4, r2
 80136f2:	2600      	movs	r6, #0
 80136f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136f8:	f1b9 0901 	subs.w	r9, r9, #1
 80136fc:	d505      	bpl.n	801370a <_fwalk_sglue+0x22>
 80136fe:	6824      	ldr	r4, [r4, #0]
 8013700:	2c00      	cmp	r4, #0
 8013702:	d1f7      	bne.n	80136f4 <_fwalk_sglue+0xc>
 8013704:	4630      	mov	r0, r6
 8013706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801370a:	89ab      	ldrh	r3, [r5, #12]
 801370c:	2b01      	cmp	r3, #1
 801370e:	d907      	bls.n	8013720 <_fwalk_sglue+0x38>
 8013710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013714:	3301      	adds	r3, #1
 8013716:	d003      	beq.n	8013720 <_fwalk_sglue+0x38>
 8013718:	4629      	mov	r1, r5
 801371a:	4638      	mov	r0, r7
 801371c:	47c0      	blx	r8
 801371e:	4306      	orrs	r6, r0
 8013720:	3568      	adds	r5, #104	@ 0x68
 8013722:	e7e9      	b.n	80136f8 <_fwalk_sglue+0x10>

08013724 <siprintf>:
 8013724:	b40e      	push	{r1, r2, r3}
 8013726:	b500      	push	{lr}
 8013728:	b09c      	sub	sp, #112	@ 0x70
 801372a:	ab1d      	add	r3, sp, #116	@ 0x74
 801372c:	9002      	str	r0, [sp, #8]
 801372e:	9006      	str	r0, [sp, #24]
 8013730:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013734:	4809      	ldr	r0, [pc, #36]	@ (801375c <siprintf+0x38>)
 8013736:	9107      	str	r1, [sp, #28]
 8013738:	9104      	str	r1, [sp, #16]
 801373a:	4909      	ldr	r1, [pc, #36]	@ (8013760 <siprintf+0x3c>)
 801373c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013740:	9105      	str	r1, [sp, #20]
 8013742:	6800      	ldr	r0, [r0, #0]
 8013744:	9301      	str	r3, [sp, #4]
 8013746:	a902      	add	r1, sp, #8
 8013748:	f001 fae0 	bl	8014d0c <_svfiprintf_r>
 801374c:	9b02      	ldr	r3, [sp, #8]
 801374e:	2200      	movs	r2, #0
 8013750:	701a      	strb	r2, [r3, #0]
 8013752:	b01c      	add	sp, #112	@ 0x70
 8013754:	f85d eb04 	ldr.w	lr, [sp], #4
 8013758:	b003      	add	sp, #12
 801375a:	4770      	bx	lr
 801375c:	24000114 	.word	0x24000114
 8013760:	ffff0208 	.word	0xffff0208

08013764 <__sread>:
 8013764:	b510      	push	{r4, lr}
 8013766:	460c      	mov	r4, r1
 8013768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801376c:	f000 f86c 	bl	8013848 <_read_r>
 8013770:	2800      	cmp	r0, #0
 8013772:	bfab      	itete	ge
 8013774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013776:	89a3      	ldrhlt	r3, [r4, #12]
 8013778:	181b      	addge	r3, r3, r0
 801377a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801377e:	bfac      	ite	ge
 8013780:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013782:	81a3      	strhlt	r3, [r4, #12]
 8013784:	bd10      	pop	{r4, pc}

08013786 <__swrite>:
 8013786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801378a:	461f      	mov	r7, r3
 801378c:	898b      	ldrh	r3, [r1, #12]
 801378e:	05db      	lsls	r3, r3, #23
 8013790:	4605      	mov	r5, r0
 8013792:	460c      	mov	r4, r1
 8013794:	4616      	mov	r6, r2
 8013796:	d505      	bpl.n	80137a4 <__swrite+0x1e>
 8013798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801379c:	2302      	movs	r3, #2
 801379e:	2200      	movs	r2, #0
 80137a0:	f000 f840 	bl	8013824 <_lseek_r>
 80137a4:	89a3      	ldrh	r3, [r4, #12]
 80137a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80137ae:	81a3      	strh	r3, [r4, #12]
 80137b0:	4632      	mov	r2, r6
 80137b2:	463b      	mov	r3, r7
 80137b4:	4628      	mov	r0, r5
 80137b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137ba:	f000 b867 	b.w	801388c <_write_r>

080137be <__sseek>:
 80137be:	b510      	push	{r4, lr}
 80137c0:	460c      	mov	r4, r1
 80137c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137c6:	f000 f82d 	bl	8013824 <_lseek_r>
 80137ca:	1c43      	adds	r3, r0, #1
 80137cc:	89a3      	ldrh	r3, [r4, #12]
 80137ce:	bf15      	itete	ne
 80137d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80137d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80137d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80137da:	81a3      	strheq	r3, [r4, #12]
 80137dc:	bf18      	it	ne
 80137de:	81a3      	strhne	r3, [r4, #12]
 80137e0:	bd10      	pop	{r4, pc}

080137e2 <__sclose>:
 80137e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137e6:	f000 b80d 	b.w	8013804 <_close_r>

080137ea <memset>:
 80137ea:	4402      	add	r2, r0
 80137ec:	4603      	mov	r3, r0
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d100      	bne.n	80137f4 <memset+0xa>
 80137f2:	4770      	bx	lr
 80137f4:	f803 1b01 	strb.w	r1, [r3], #1
 80137f8:	e7f9      	b.n	80137ee <memset+0x4>
	...

080137fc <_localeconv_r>:
 80137fc:	4800      	ldr	r0, [pc, #0]	@ (8013800 <_localeconv_r+0x4>)
 80137fe:	4770      	bx	lr
 8013800:	24000254 	.word	0x24000254

08013804 <_close_r>:
 8013804:	b538      	push	{r3, r4, r5, lr}
 8013806:	4d06      	ldr	r5, [pc, #24]	@ (8013820 <_close_r+0x1c>)
 8013808:	2300      	movs	r3, #0
 801380a:	4604      	mov	r4, r0
 801380c:	4608      	mov	r0, r1
 801380e:	602b      	str	r3, [r5, #0]
 8013810:	f7fd fb0e 	bl	8010e30 <_close>
 8013814:	1c43      	adds	r3, r0, #1
 8013816:	d102      	bne.n	801381e <_close_r+0x1a>
 8013818:	682b      	ldr	r3, [r5, #0]
 801381a:	b103      	cbz	r3, 801381e <_close_r+0x1a>
 801381c:	6023      	str	r3, [r4, #0]
 801381e:	bd38      	pop	{r3, r4, r5, pc}
 8013820:	24002928 	.word	0x24002928

08013824 <_lseek_r>:
 8013824:	b538      	push	{r3, r4, r5, lr}
 8013826:	4d07      	ldr	r5, [pc, #28]	@ (8013844 <_lseek_r+0x20>)
 8013828:	4604      	mov	r4, r0
 801382a:	4608      	mov	r0, r1
 801382c:	4611      	mov	r1, r2
 801382e:	2200      	movs	r2, #0
 8013830:	602a      	str	r2, [r5, #0]
 8013832:	461a      	mov	r2, r3
 8013834:	f7fd fb03 	bl	8010e3e <_lseek>
 8013838:	1c43      	adds	r3, r0, #1
 801383a:	d102      	bne.n	8013842 <_lseek_r+0x1e>
 801383c:	682b      	ldr	r3, [r5, #0]
 801383e:	b103      	cbz	r3, 8013842 <_lseek_r+0x1e>
 8013840:	6023      	str	r3, [r4, #0]
 8013842:	bd38      	pop	{r3, r4, r5, pc}
 8013844:	24002928 	.word	0x24002928

08013848 <_read_r>:
 8013848:	b538      	push	{r3, r4, r5, lr}
 801384a:	4d07      	ldr	r5, [pc, #28]	@ (8013868 <_read_r+0x20>)
 801384c:	4604      	mov	r4, r0
 801384e:	4608      	mov	r0, r1
 8013850:	4611      	mov	r1, r2
 8013852:	2200      	movs	r2, #0
 8013854:	602a      	str	r2, [r5, #0]
 8013856:	461a      	mov	r2, r3
 8013858:	f7fd faf8 	bl	8010e4c <_read>
 801385c:	1c43      	adds	r3, r0, #1
 801385e:	d102      	bne.n	8013866 <_read_r+0x1e>
 8013860:	682b      	ldr	r3, [r5, #0]
 8013862:	b103      	cbz	r3, 8013866 <_read_r+0x1e>
 8013864:	6023      	str	r3, [r4, #0]
 8013866:	bd38      	pop	{r3, r4, r5, pc}
 8013868:	24002928 	.word	0x24002928

0801386c <_sbrk_r>:
 801386c:	b538      	push	{r3, r4, r5, lr}
 801386e:	4d06      	ldr	r5, [pc, #24]	@ (8013888 <_sbrk_r+0x1c>)
 8013870:	2300      	movs	r3, #0
 8013872:	4604      	mov	r4, r0
 8013874:	4608      	mov	r0, r1
 8013876:	602b      	str	r3, [r5, #0]
 8013878:	f002 f88c 	bl	8015994 <_sbrk>
 801387c:	1c43      	adds	r3, r0, #1
 801387e:	d102      	bne.n	8013886 <_sbrk_r+0x1a>
 8013880:	682b      	ldr	r3, [r5, #0]
 8013882:	b103      	cbz	r3, 8013886 <_sbrk_r+0x1a>
 8013884:	6023      	str	r3, [r4, #0]
 8013886:	bd38      	pop	{r3, r4, r5, pc}
 8013888:	24002928 	.word	0x24002928

0801388c <_write_r>:
 801388c:	b538      	push	{r3, r4, r5, lr}
 801388e:	4d07      	ldr	r5, [pc, #28]	@ (80138ac <_write_r+0x20>)
 8013890:	4604      	mov	r4, r0
 8013892:	4608      	mov	r0, r1
 8013894:	4611      	mov	r1, r2
 8013896:	2200      	movs	r2, #0
 8013898:	602a      	str	r2, [r5, #0]
 801389a:	461a      	mov	r2, r3
 801389c:	f7fd fadd 	bl	8010e5a <_write>
 80138a0:	1c43      	adds	r3, r0, #1
 80138a2:	d102      	bne.n	80138aa <_write_r+0x1e>
 80138a4:	682b      	ldr	r3, [r5, #0]
 80138a6:	b103      	cbz	r3, 80138aa <_write_r+0x1e>
 80138a8:	6023      	str	r3, [r4, #0]
 80138aa:	bd38      	pop	{r3, r4, r5, pc}
 80138ac:	24002928 	.word	0x24002928

080138b0 <__libc_init_array>:
 80138b0:	b570      	push	{r4, r5, r6, lr}
 80138b2:	4d0d      	ldr	r5, [pc, #52]	@ (80138e8 <__libc_init_array+0x38>)
 80138b4:	4c0d      	ldr	r4, [pc, #52]	@ (80138ec <__libc_init_array+0x3c>)
 80138b6:	1b64      	subs	r4, r4, r5
 80138b8:	10a4      	asrs	r4, r4, #2
 80138ba:	2600      	movs	r6, #0
 80138bc:	42a6      	cmp	r6, r4
 80138be:	d109      	bne.n	80138d4 <__libc_init_array+0x24>
 80138c0:	4d0b      	ldr	r5, [pc, #44]	@ (80138f0 <__libc_init_array+0x40>)
 80138c2:	4c0c      	ldr	r4, [pc, #48]	@ (80138f4 <__libc_init_array+0x44>)
 80138c4:	f002 f876 	bl	80159b4 <_init>
 80138c8:	1b64      	subs	r4, r4, r5
 80138ca:	10a4      	asrs	r4, r4, #2
 80138cc:	2600      	movs	r6, #0
 80138ce:	42a6      	cmp	r6, r4
 80138d0:	d105      	bne.n	80138de <__libc_init_array+0x2e>
 80138d2:	bd70      	pop	{r4, r5, r6, pc}
 80138d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80138d8:	4798      	blx	r3
 80138da:	3601      	adds	r6, #1
 80138dc:	e7ee      	b.n	80138bc <__libc_init_array+0xc>
 80138de:	f855 3b04 	ldr.w	r3, [r5], #4
 80138e2:	4798      	blx	r3
 80138e4:	3601      	adds	r6, #1
 80138e6:	e7f2      	b.n	80138ce <__libc_init_array+0x1e>
 80138e8:	08017dd8 	.word	0x08017dd8
 80138ec:	08017dd8 	.word	0x08017dd8
 80138f0:	08017dd8 	.word	0x08017dd8
 80138f4:	08017ddc 	.word	0x08017ddc

080138f8 <__retarget_lock_init_recursive>:
 80138f8:	4770      	bx	lr

080138fa <__retarget_lock_acquire_recursive>:
 80138fa:	4770      	bx	lr

080138fc <__retarget_lock_release_recursive>:
 80138fc:	4770      	bx	lr

080138fe <quorem>:
 80138fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013902:	6903      	ldr	r3, [r0, #16]
 8013904:	690c      	ldr	r4, [r1, #16]
 8013906:	42a3      	cmp	r3, r4
 8013908:	4607      	mov	r7, r0
 801390a:	db7e      	blt.n	8013a0a <quorem+0x10c>
 801390c:	3c01      	subs	r4, #1
 801390e:	f101 0814 	add.w	r8, r1, #20
 8013912:	00a3      	lsls	r3, r4, #2
 8013914:	f100 0514 	add.w	r5, r0, #20
 8013918:	9300      	str	r3, [sp, #0]
 801391a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801391e:	9301      	str	r3, [sp, #4]
 8013920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013928:	3301      	adds	r3, #1
 801392a:	429a      	cmp	r2, r3
 801392c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013930:	fbb2 f6f3 	udiv	r6, r2, r3
 8013934:	d32e      	bcc.n	8013994 <quorem+0x96>
 8013936:	f04f 0a00 	mov.w	sl, #0
 801393a:	46c4      	mov	ip, r8
 801393c:	46ae      	mov	lr, r5
 801393e:	46d3      	mov	fp, sl
 8013940:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013944:	b298      	uxth	r0, r3
 8013946:	fb06 a000 	mla	r0, r6, r0, sl
 801394a:	0c02      	lsrs	r2, r0, #16
 801394c:	0c1b      	lsrs	r3, r3, #16
 801394e:	fb06 2303 	mla	r3, r6, r3, r2
 8013952:	f8de 2000 	ldr.w	r2, [lr]
 8013956:	b280      	uxth	r0, r0
 8013958:	b292      	uxth	r2, r2
 801395a:	1a12      	subs	r2, r2, r0
 801395c:	445a      	add	r2, fp
 801395e:	f8de 0000 	ldr.w	r0, [lr]
 8013962:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013966:	b29b      	uxth	r3, r3
 8013968:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801396c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013970:	b292      	uxth	r2, r2
 8013972:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013976:	45e1      	cmp	r9, ip
 8013978:	f84e 2b04 	str.w	r2, [lr], #4
 801397c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013980:	d2de      	bcs.n	8013940 <quorem+0x42>
 8013982:	9b00      	ldr	r3, [sp, #0]
 8013984:	58eb      	ldr	r3, [r5, r3]
 8013986:	b92b      	cbnz	r3, 8013994 <quorem+0x96>
 8013988:	9b01      	ldr	r3, [sp, #4]
 801398a:	3b04      	subs	r3, #4
 801398c:	429d      	cmp	r5, r3
 801398e:	461a      	mov	r2, r3
 8013990:	d32f      	bcc.n	80139f2 <quorem+0xf4>
 8013992:	613c      	str	r4, [r7, #16]
 8013994:	4638      	mov	r0, r7
 8013996:	f001 f855 	bl	8014a44 <__mcmp>
 801399a:	2800      	cmp	r0, #0
 801399c:	db25      	blt.n	80139ea <quorem+0xec>
 801399e:	4629      	mov	r1, r5
 80139a0:	2000      	movs	r0, #0
 80139a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80139a6:	f8d1 c000 	ldr.w	ip, [r1]
 80139aa:	fa1f fe82 	uxth.w	lr, r2
 80139ae:	fa1f f38c 	uxth.w	r3, ip
 80139b2:	eba3 030e 	sub.w	r3, r3, lr
 80139b6:	4403      	add	r3, r0
 80139b8:	0c12      	lsrs	r2, r2, #16
 80139ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80139be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80139c8:	45c1      	cmp	r9, r8
 80139ca:	f841 3b04 	str.w	r3, [r1], #4
 80139ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80139d2:	d2e6      	bcs.n	80139a2 <quorem+0xa4>
 80139d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80139d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80139dc:	b922      	cbnz	r2, 80139e8 <quorem+0xea>
 80139de:	3b04      	subs	r3, #4
 80139e0:	429d      	cmp	r5, r3
 80139e2:	461a      	mov	r2, r3
 80139e4:	d30b      	bcc.n	80139fe <quorem+0x100>
 80139e6:	613c      	str	r4, [r7, #16]
 80139e8:	3601      	adds	r6, #1
 80139ea:	4630      	mov	r0, r6
 80139ec:	b003      	add	sp, #12
 80139ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139f2:	6812      	ldr	r2, [r2, #0]
 80139f4:	3b04      	subs	r3, #4
 80139f6:	2a00      	cmp	r2, #0
 80139f8:	d1cb      	bne.n	8013992 <quorem+0x94>
 80139fa:	3c01      	subs	r4, #1
 80139fc:	e7c6      	b.n	801398c <quorem+0x8e>
 80139fe:	6812      	ldr	r2, [r2, #0]
 8013a00:	3b04      	subs	r3, #4
 8013a02:	2a00      	cmp	r2, #0
 8013a04:	d1ef      	bne.n	80139e6 <quorem+0xe8>
 8013a06:	3c01      	subs	r4, #1
 8013a08:	e7ea      	b.n	80139e0 <quorem+0xe2>
 8013a0a:	2000      	movs	r0, #0
 8013a0c:	e7ee      	b.n	80139ec <quorem+0xee>
	...

08013a10 <_dtoa_r>:
 8013a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a14:	ed2d 8b02 	vpush	{d8}
 8013a18:	69c7      	ldr	r7, [r0, #28]
 8013a1a:	b091      	sub	sp, #68	@ 0x44
 8013a1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013a20:	ec55 4b10 	vmov	r4, r5, d0
 8013a24:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8013a26:	9107      	str	r1, [sp, #28]
 8013a28:	4681      	mov	r9, r0
 8013a2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8013a2c:	930d      	str	r3, [sp, #52]	@ 0x34
 8013a2e:	b97f      	cbnz	r7, 8013a50 <_dtoa_r+0x40>
 8013a30:	2010      	movs	r0, #16
 8013a32:	f7ff f8c9 	bl	8012bc8 <malloc>
 8013a36:	4602      	mov	r2, r0
 8013a38:	f8c9 001c 	str.w	r0, [r9, #28]
 8013a3c:	b920      	cbnz	r0, 8013a48 <_dtoa_r+0x38>
 8013a3e:	4ba0      	ldr	r3, [pc, #640]	@ (8013cc0 <_dtoa_r+0x2b0>)
 8013a40:	21ef      	movs	r1, #239	@ 0xef
 8013a42:	48a0      	ldr	r0, [pc, #640]	@ (8013cc4 <_dtoa_r+0x2b4>)
 8013a44:	f001 fb32 	bl	80150ac <__assert_func>
 8013a48:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013a4c:	6007      	str	r7, [r0, #0]
 8013a4e:	60c7      	str	r7, [r0, #12]
 8013a50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013a54:	6819      	ldr	r1, [r3, #0]
 8013a56:	b159      	cbz	r1, 8013a70 <_dtoa_r+0x60>
 8013a58:	685a      	ldr	r2, [r3, #4]
 8013a5a:	604a      	str	r2, [r1, #4]
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	4093      	lsls	r3, r2
 8013a60:	608b      	str	r3, [r1, #8]
 8013a62:	4648      	mov	r0, r9
 8013a64:	f000 fdb4 	bl	80145d0 <_Bfree>
 8013a68:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	601a      	str	r2, [r3, #0]
 8013a70:	1e2b      	subs	r3, r5, #0
 8013a72:	bfbb      	ittet	lt
 8013a74:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013a78:	9303      	strlt	r3, [sp, #12]
 8013a7a:	2300      	movge	r3, #0
 8013a7c:	2201      	movlt	r2, #1
 8013a7e:	bfac      	ite	ge
 8013a80:	6033      	strge	r3, [r6, #0]
 8013a82:	6032      	strlt	r2, [r6, #0]
 8013a84:	4b90      	ldr	r3, [pc, #576]	@ (8013cc8 <_dtoa_r+0x2b8>)
 8013a86:	9e03      	ldr	r6, [sp, #12]
 8013a88:	43b3      	bics	r3, r6
 8013a8a:	d110      	bne.n	8013aae <_dtoa_r+0x9e>
 8013a8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013a8e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013a92:	6013      	str	r3, [r2, #0]
 8013a94:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013a98:	4323      	orrs	r3, r4
 8013a9a:	f000 84de 	beq.w	801445a <_dtoa_r+0xa4a>
 8013a9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013aa0:	4f8a      	ldr	r7, [pc, #552]	@ (8013ccc <_dtoa_r+0x2bc>)
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	f000 84e0 	beq.w	8014468 <_dtoa_r+0xa58>
 8013aa8:	1cfb      	adds	r3, r7, #3
 8013aaa:	f000 bcdb 	b.w	8014464 <_dtoa_r+0xa54>
 8013aae:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013ab2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aba:	d10a      	bne.n	8013ad2 <_dtoa_r+0xc2>
 8013abc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013abe:	2301      	movs	r3, #1
 8013ac0:	6013      	str	r3, [r2, #0]
 8013ac2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013ac4:	b113      	cbz	r3, 8013acc <_dtoa_r+0xbc>
 8013ac6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013ac8:	4b81      	ldr	r3, [pc, #516]	@ (8013cd0 <_dtoa_r+0x2c0>)
 8013aca:	6013      	str	r3, [r2, #0]
 8013acc:	4f81      	ldr	r7, [pc, #516]	@ (8013cd4 <_dtoa_r+0x2c4>)
 8013ace:	f000 bccb 	b.w	8014468 <_dtoa_r+0xa58>
 8013ad2:	aa0e      	add	r2, sp, #56	@ 0x38
 8013ad4:	a90f      	add	r1, sp, #60	@ 0x3c
 8013ad6:	4648      	mov	r0, r9
 8013ad8:	eeb0 0b48 	vmov.f64	d0, d8
 8013adc:	f001 f862 	bl	8014ba4 <__d2b>
 8013ae0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8013ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ae6:	9001      	str	r0, [sp, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d045      	beq.n	8013b78 <_dtoa_r+0x168>
 8013aec:	eeb0 7b48 	vmov.f64	d7, d8
 8013af0:	ee18 1a90 	vmov	r1, s17
 8013af4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013af8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8013afc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013b00:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013b04:	2500      	movs	r5, #0
 8013b06:	ee07 1a90 	vmov	s15, r1
 8013b0a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8013b0e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013ca8 <_dtoa_r+0x298>
 8013b12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013b16:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013cb0 <_dtoa_r+0x2a0>
 8013b1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013b1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013cb8 <_dtoa_r+0x2a8>
 8013b22:	ee07 3a90 	vmov	s15, r3
 8013b26:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013b2a:	eeb0 7b46 	vmov.f64	d7, d6
 8013b2e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013b32:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013b36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b3e:	ee16 8a90 	vmov	r8, s13
 8013b42:	d508      	bpl.n	8013b56 <_dtoa_r+0x146>
 8013b44:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013b48:	eeb4 6b47 	vcmp.f64	d6, d7
 8013b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b50:	bf18      	it	ne
 8013b52:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013b56:	f1b8 0f16 	cmp.w	r8, #22
 8013b5a:	d82b      	bhi.n	8013bb4 <_dtoa_r+0x1a4>
 8013b5c:	495e      	ldr	r1, [pc, #376]	@ (8013cd8 <_dtoa_r+0x2c8>)
 8013b5e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013b62:	ed91 7b00 	vldr	d7, [r1]
 8013b66:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6e:	d501      	bpl.n	8013b74 <_dtoa_r+0x164>
 8013b70:	f108 38ff 	add.w	r8, r8, #4294967295
 8013b74:	2100      	movs	r1, #0
 8013b76:	e01e      	b.n	8013bb6 <_dtoa_r+0x1a6>
 8013b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b7a:	4413      	add	r3, r2
 8013b7c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013b80:	2920      	cmp	r1, #32
 8013b82:	bfc1      	itttt	gt
 8013b84:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013b88:	408e      	lslgt	r6, r1
 8013b8a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8013b8e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013b92:	bfd6      	itet	le
 8013b94:	f1c1 0120 	rsble	r1, r1, #32
 8013b98:	4331      	orrgt	r1, r6
 8013b9a:	fa04 f101 	lslle.w	r1, r4, r1
 8013b9e:	ee07 1a90 	vmov	s15, r1
 8013ba2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013ba6:	3b01      	subs	r3, #1
 8013ba8:	ee17 1a90 	vmov	r1, s15
 8013bac:	2501      	movs	r5, #1
 8013bae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013bb2:	e7a8      	b.n	8013b06 <_dtoa_r+0xf6>
 8013bb4:	2101      	movs	r1, #1
 8013bb6:	1ad2      	subs	r2, r2, r3
 8013bb8:	1e53      	subs	r3, r2, #1
 8013bba:	9306      	str	r3, [sp, #24]
 8013bbc:	bf45      	ittet	mi
 8013bbe:	f1c2 0301 	rsbmi	r3, r2, #1
 8013bc2:	9305      	strmi	r3, [sp, #20]
 8013bc4:	2300      	movpl	r3, #0
 8013bc6:	2300      	movmi	r3, #0
 8013bc8:	bf4c      	ite	mi
 8013bca:	9306      	strmi	r3, [sp, #24]
 8013bcc:	9305      	strpl	r3, [sp, #20]
 8013bce:	f1b8 0f00 	cmp.w	r8, #0
 8013bd2:	910c      	str	r1, [sp, #48]	@ 0x30
 8013bd4:	db18      	blt.n	8013c08 <_dtoa_r+0x1f8>
 8013bd6:	9b06      	ldr	r3, [sp, #24]
 8013bd8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013bdc:	4443      	add	r3, r8
 8013bde:	9306      	str	r3, [sp, #24]
 8013be0:	2300      	movs	r3, #0
 8013be2:	9a07      	ldr	r2, [sp, #28]
 8013be4:	2a09      	cmp	r2, #9
 8013be6:	d849      	bhi.n	8013c7c <_dtoa_r+0x26c>
 8013be8:	2a05      	cmp	r2, #5
 8013bea:	bfc4      	itt	gt
 8013bec:	3a04      	subgt	r2, #4
 8013bee:	9207      	strgt	r2, [sp, #28]
 8013bf0:	9a07      	ldr	r2, [sp, #28]
 8013bf2:	f1a2 0202 	sub.w	r2, r2, #2
 8013bf6:	bfcc      	ite	gt
 8013bf8:	2400      	movgt	r4, #0
 8013bfa:	2401      	movle	r4, #1
 8013bfc:	2a03      	cmp	r2, #3
 8013bfe:	d848      	bhi.n	8013c92 <_dtoa_r+0x282>
 8013c00:	e8df f002 	tbb	[pc, r2]
 8013c04:	3a2c2e0b 	.word	0x3a2c2e0b
 8013c08:	9b05      	ldr	r3, [sp, #20]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	eba3 0308 	sub.w	r3, r3, r8
 8013c10:	9305      	str	r3, [sp, #20]
 8013c12:	920a      	str	r2, [sp, #40]	@ 0x28
 8013c14:	f1c8 0300 	rsb	r3, r8, #0
 8013c18:	e7e3      	b.n	8013be2 <_dtoa_r+0x1d2>
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	9208      	str	r2, [sp, #32]
 8013c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c20:	2a00      	cmp	r2, #0
 8013c22:	dc39      	bgt.n	8013c98 <_dtoa_r+0x288>
 8013c24:	f04f 0b01 	mov.w	fp, #1
 8013c28:	46da      	mov	sl, fp
 8013c2a:	465a      	mov	r2, fp
 8013c2c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013c30:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013c34:	2100      	movs	r1, #0
 8013c36:	2004      	movs	r0, #4
 8013c38:	f100 0614 	add.w	r6, r0, #20
 8013c3c:	4296      	cmp	r6, r2
 8013c3e:	d930      	bls.n	8013ca2 <_dtoa_r+0x292>
 8013c40:	6079      	str	r1, [r7, #4]
 8013c42:	4648      	mov	r0, r9
 8013c44:	9304      	str	r3, [sp, #16]
 8013c46:	f000 fc83 	bl	8014550 <_Balloc>
 8013c4a:	9b04      	ldr	r3, [sp, #16]
 8013c4c:	4607      	mov	r7, r0
 8013c4e:	2800      	cmp	r0, #0
 8013c50:	d146      	bne.n	8013ce0 <_dtoa_r+0x2d0>
 8013c52:	4b22      	ldr	r3, [pc, #136]	@ (8013cdc <_dtoa_r+0x2cc>)
 8013c54:	4602      	mov	r2, r0
 8013c56:	f240 11af 	movw	r1, #431	@ 0x1af
 8013c5a:	e6f2      	b.n	8013a42 <_dtoa_r+0x32>
 8013c5c:	2201      	movs	r2, #1
 8013c5e:	e7dd      	b.n	8013c1c <_dtoa_r+0x20c>
 8013c60:	2200      	movs	r2, #0
 8013c62:	9208      	str	r2, [sp, #32]
 8013c64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c66:	eb08 0b02 	add.w	fp, r8, r2
 8013c6a:	f10b 0a01 	add.w	sl, fp, #1
 8013c6e:	4652      	mov	r2, sl
 8013c70:	2a01      	cmp	r2, #1
 8013c72:	bfb8      	it	lt
 8013c74:	2201      	movlt	r2, #1
 8013c76:	e7db      	b.n	8013c30 <_dtoa_r+0x220>
 8013c78:	2201      	movs	r2, #1
 8013c7a:	e7f2      	b.n	8013c62 <_dtoa_r+0x252>
 8013c7c:	2401      	movs	r4, #1
 8013c7e:	2200      	movs	r2, #0
 8013c80:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013c84:	f04f 3bff 	mov.w	fp, #4294967295
 8013c88:	2100      	movs	r1, #0
 8013c8a:	46da      	mov	sl, fp
 8013c8c:	2212      	movs	r2, #18
 8013c8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8013c90:	e7ce      	b.n	8013c30 <_dtoa_r+0x220>
 8013c92:	2201      	movs	r2, #1
 8013c94:	9208      	str	r2, [sp, #32]
 8013c96:	e7f5      	b.n	8013c84 <_dtoa_r+0x274>
 8013c98:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8013c9c:	46da      	mov	sl, fp
 8013c9e:	465a      	mov	r2, fp
 8013ca0:	e7c6      	b.n	8013c30 <_dtoa_r+0x220>
 8013ca2:	3101      	adds	r1, #1
 8013ca4:	0040      	lsls	r0, r0, #1
 8013ca6:	e7c7      	b.n	8013c38 <_dtoa_r+0x228>
 8013ca8:	636f4361 	.word	0x636f4361
 8013cac:	3fd287a7 	.word	0x3fd287a7
 8013cb0:	8b60c8b3 	.word	0x8b60c8b3
 8013cb4:	3fc68a28 	.word	0x3fc68a28
 8013cb8:	509f79fb 	.word	0x509f79fb
 8013cbc:	3fd34413 	.word	0x3fd34413
 8013cc0:	08017a91 	.word	0x08017a91
 8013cc4:	08017aa8 	.word	0x08017aa8
 8013cc8:	7ff00000 	.word	0x7ff00000
 8013ccc:	08017a8d 	.word	0x08017a8d
 8013cd0:	08017a61 	.word	0x08017a61
 8013cd4:	08017a60 	.word	0x08017a60
 8013cd8:	08017ba0 	.word	0x08017ba0
 8013cdc:	08017b00 	.word	0x08017b00
 8013ce0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8013ce4:	f1ba 0f0e 	cmp.w	sl, #14
 8013ce8:	6010      	str	r0, [r2, #0]
 8013cea:	d86f      	bhi.n	8013dcc <_dtoa_r+0x3bc>
 8013cec:	2c00      	cmp	r4, #0
 8013cee:	d06d      	beq.n	8013dcc <_dtoa_r+0x3bc>
 8013cf0:	f1b8 0f00 	cmp.w	r8, #0
 8013cf4:	f340 80c2 	ble.w	8013e7c <_dtoa_r+0x46c>
 8013cf8:	4aca      	ldr	r2, [pc, #808]	@ (8014024 <_dtoa_r+0x614>)
 8013cfa:	f008 010f 	and.w	r1, r8, #15
 8013cfe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013d02:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8013d06:	ed92 7b00 	vldr	d7, [r2]
 8013d0a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8013d0e:	f000 80a9 	beq.w	8013e64 <_dtoa_r+0x454>
 8013d12:	4ac5      	ldr	r2, [pc, #788]	@ (8014028 <_dtoa_r+0x618>)
 8013d14:	ed92 6b08 	vldr	d6, [r2, #32]
 8013d18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013d1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013d20:	f001 010f 	and.w	r1, r1, #15
 8013d24:	2203      	movs	r2, #3
 8013d26:	48c0      	ldr	r0, [pc, #768]	@ (8014028 <_dtoa_r+0x618>)
 8013d28:	2900      	cmp	r1, #0
 8013d2a:	f040 809d 	bne.w	8013e68 <_dtoa_r+0x458>
 8013d2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013d32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013d36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013d3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013d3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d40:	2900      	cmp	r1, #0
 8013d42:	f000 80c1 	beq.w	8013ec8 <_dtoa_r+0x4b8>
 8013d46:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013d4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d52:	f140 80b9 	bpl.w	8013ec8 <_dtoa_r+0x4b8>
 8013d56:	f1ba 0f00 	cmp.w	sl, #0
 8013d5a:	f000 80b5 	beq.w	8013ec8 <_dtoa_r+0x4b8>
 8013d5e:	f1bb 0f00 	cmp.w	fp, #0
 8013d62:	dd31      	ble.n	8013dc8 <_dtoa_r+0x3b8>
 8013d64:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013d6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013d70:	f108 31ff 	add.w	r1, r8, #4294967295
 8013d74:	9104      	str	r1, [sp, #16]
 8013d76:	3201      	adds	r2, #1
 8013d78:	465c      	mov	r4, fp
 8013d7a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013d7e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013d82:	ee07 2a90 	vmov	s15, r2
 8013d86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013d8a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013d8e:	ee15 2a90 	vmov	r2, s11
 8013d92:	ec51 0b15 	vmov	r0, r1, d5
 8013d96:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8013d9a:	2c00      	cmp	r4, #0
 8013d9c:	f040 8098 	bne.w	8013ed0 <_dtoa_r+0x4c0>
 8013da0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013da4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013da8:	ec41 0b17 	vmov	d7, r0, r1
 8013dac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db4:	f300 8261 	bgt.w	801427a <_dtoa_r+0x86a>
 8013db8:	eeb1 7b47 	vneg.f64	d7, d7
 8013dbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc4:	f100 80f5 	bmi.w	8013fb2 <_dtoa_r+0x5a2>
 8013dc8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013dcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013dce:	2a00      	cmp	r2, #0
 8013dd0:	f2c0 812c 	blt.w	801402c <_dtoa_r+0x61c>
 8013dd4:	f1b8 0f0e 	cmp.w	r8, #14
 8013dd8:	f300 8128 	bgt.w	801402c <_dtoa_r+0x61c>
 8013ddc:	4b91      	ldr	r3, [pc, #580]	@ (8014024 <_dtoa_r+0x614>)
 8013dde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013de2:	ed93 6b00 	vldr	d6, [r3]
 8013de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	da03      	bge.n	8013df4 <_dtoa_r+0x3e4>
 8013dec:	f1ba 0f00 	cmp.w	sl, #0
 8013df0:	f340 80d2 	ble.w	8013f98 <_dtoa_r+0x588>
 8013df4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013df8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013dfc:	463e      	mov	r6, r7
 8013dfe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013e02:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013e06:	ee15 3a10 	vmov	r3, s10
 8013e0a:	3330      	adds	r3, #48	@ 0x30
 8013e0c:	f806 3b01 	strb.w	r3, [r6], #1
 8013e10:	1bf3      	subs	r3, r6, r7
 8013e12:	459a      	cmp	sl, r3
 8013e14:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013e18:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013e1c:	f040 80f8 	bne.w	8014010 <_dtoa_r+0x600>
 8013e20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013e24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e2c:	f300 80dd 	bgt.w	8013fea <_dtoa_r+0x5da>
 8013e30:	eeb4 7b46 	vcmp.f64	d7, d6
 8013e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e38:	d104      	bne.n	8013e44 <_dtoa_r+0x434>
 8013e3a:	ee15 3a10 	vmov	r3, s10
 8013e3e:	07db      	lsls	r3, r3, #31
 8013e40:	f100 80d3 	bmi.w	8013fea <_dtoa_r+0x5da>
 8013e44:	9901      	ldr	r1, [sp, #4]
 8013e46:	4648      	mov	r0, r9
 8013e48:	f000 fbc2 	bl	80145d0 <_Bfree>
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013e50:	7033      	strb	r3, [r6, #0]
 8013e52:	f108 0301 	add.w	r3, r8, #1
 8013e56:	6013      	str	r3, [r2, #0]
 8013e58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f000 8304 	beq.w	8014468 <_dtoa_r+0xa58>
 8013e60:	601e      	str	r6, [r3, #0]
 8013e62:	e301      	b.n	8014468 <_dtoa_r+0xa58>
 8013e64:	2202      	movs	r2, #2
 8013e66:	e75e      	b.n	8013d26 <_dtoa_r+0x316>
 8013e68:	07cc      	lsls	r4, r1, #31
 8013e6a:	d504      	bpl.n	8013e76 <_dtoa_r+0x466>
 8013e6c:	ed90 6b00 	vldr	d6, [r0]
 8013e70:	3201      	adds	r2, #1
 8013e72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013e76:	1049      	asrs	r1, r1, #1
 8013e78:	3008      	adds	r0, #8
 8013e7a:	e755      	b.n	8013d28 <_dtoa_r+0x318>
 8013e7c:	d022      	beq.n	8013ec4 <_dtoa_r+0x4b4>
 8013e7e:	f1c8 0100 	rsb	r1, r8, #0
 8013e82:	4a68      	ldr	r2, [pc, #416]	@ (8014024 <_dtoa_r+0x614>)
 8013e84:	f001 000f 	and.w	r0, r1, #15
 8013e88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013e8c:	ed92 7b00 	vldr	d7, [r2]
 8013e90:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013e94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013e98:	4863      	ldr	r0, [pc, #396]	@ (8014028 <_dtoa_r+0x618>)
 8013e9a:	1109      	asrs	r1, r1, #4
 8013e9c:	2400      	movs	r4, #0
 8013e9e:	2202      	movs	r2, #2
 8013ea0:	b929      	cbnz	r1, 8013eae <_dtoa_r+0x49e>
 8013ea2:	2c00      	cmp	r4, #0
 8013ea4:	f43f af49 	beq.w	8013d3a <_dtoa_r+0x32a>
 8013ea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013eac:	e745      	b.n	8013d3a <_dtoa_r+0x32a>
 8013eae:	07ce      	lsls	r6, r1, #31
 8013eb0:	d505      	bpl.n	8013ebe <_dtoa_r+0x4ae>
 8013eb2:	ed90 6b00 	vldr	d6, [r0]
 8013eb6:	3201      	adds	r2, #1
 8013eb8:	2401      	movs	r4, #1
 8013eba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ebe:	1049      	asrs	r1, r1, #1
 8013ec0:	3008      	adds	r0, #8
 8013ec2:	e7ed      	b.n	8013ea0 <_dtoa_r+0x490>
 8013ec4:	2202      	movs	r2, #2
 8013ec6:	e738      	b.n	8013d3a <_dtoa_r+0x32a>
 8013ec8:	f8cd 8010 	str.w	r8, [sp, #16]
 8013ecc:	4654      	mov	r4, sl
 8013ece:	e754      	b.n	8013d7a <_dtoa_r+0x36a>
 8013ed0:	4a54      	ldr	r2, [pc, #336]	@ (8014024 <_dtoa_r+0x614>)
 8013ed2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013ed6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013eda:	9a08      	ldr	r2, [sp, #32]
 8013edc:	ec41 0b17 	vmov	d7, r0, r1
 8013ee0:	443c      	add	r4, r7
 8013ee2:	b34a      	cbz	r2, 8013f38 <_dtoa_r+0x528>
 8013ee4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013ee8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8013eec:	463e      	mov	r6, r7
 8013eee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013ef2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013ef6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013efa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013efe:	ee14 2a90 	vmov	r2, s9
 8013f02:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013f06:	3230      	adds	r2, #48	@ 0x30
 8013f08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013f0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f14:	f806 2b01 	strb.w	r2, [r6], #1
 8013f18:	d438      	bmi.n	8013f8c <_dtoa_r+0x57c>
 8013f1a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013f1e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f26:	d462      	bmi.n	8013fee <_dtoa_r+0x5de>
 8013f28:	42a6      	cmp	r6, r4
 8013f2a:	f43f af4d 	beq.w	8013dc8 <_dtoa_r+0x3b8>
 8013f2e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013f32:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013f36:	e7e0      	b.n	8013efa <_dtoa_r+0x4ea>
 8013f38:	4621      	mov	r1, r4
 8013f3a:	463e      	mov	r6, r7
 8013f3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013f40:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013f44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013f48:	ee14 2a90 	vmov	r2, s9
 8013f4c:	3230      	adds	r2, #48	@ 0x30
 8013f4e:	f806 2b01 	strb.w	r2, [r6], #1
 8013f52:	42a6      	cmp	r6, r4
 8013f54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013f58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013f5c:	d119      	bne.n	8013f92 <_dtoa_r+0x582>
 8013f5e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013f62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013f66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6e:	dc3e      	bgt.n	8013fee <_dtoa_r+0x5de>
 8013f70:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013f74:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f7c:	f57f af24 	bpl.w	8013dc8 <_dtoa_r+0x3b8>
 8013f80:	460e      	mov	r6, r1
 8013f82:	3901      	subs	r1, #1
 8013f84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013f88:	2b30      	cmp	r3, #48	@ 0x30
 8013f8a:	d0f9      	beq.n	8013f80 <_dtoa_r+0x570>
 8013f8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013f90:	e758      	b.n	8013e44 <_dtoa_r+0x434>
 8013f92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013f96:	e7d5      	b.n	8013f44 <_dtoa_r+0x534>
 8013f98:	d10b      	bne.n	8013fb2 <_dtoa_r+0x5a2>
 8013f9a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013f9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013fa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013fa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	f2c0 8161 	blt.w	8014274 <_dtoa_r+0x864>
 8013fb2:	2400      	movs	r4, #0
 8013fb4:	4625      	mov	r5, r4
 8013fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fb8:	43db      	mvns	r3, r3
 8013fba:	9304      	str	r3, [sp, #16]
 8013fbc:	463e      	mov	r6, r7
 8013fbe:	f04f 0800 	mov.w	r8, #0
 8013fc2:	4621      	mov	r1, r4
 8013fc4:	4648      	mov	r0, r9
 8013fc6:	f000 fb03 	bl	80145d0 <_Bfree>
 8013fca:	2d00      	cmp	r5, #0
 8013fcc:	d0de      	beq.n	8013f8c <_dtoa_r+0x57c>
 8013fce:	f1b8 0f00 	cmp.w	r8, #0
 8013fd2:	d005      	beq.n	8013fe0 <_dtoa_r+0x5d0>
 8013fd4:	45a8      	cmp	r8, r5
 8013fd6:	d003      	beq.n	8013fe0 <_dtoa_r+0x5d0>
 8013fd8:	4641      	mov	r1, r8
 8013fda:	4648      	mov	r0, r9
 8013fdc:	f000 faf8 	bl	80145d0 <_Bfree>
 8013fe0:	4629      	mov	r1, r5
 8013fe2:	4648      	mov	r0, r9
 8013fe4:	f000 faf4 	bl	80145d0 <_Bfree>
 8013fe8:	e7d0      	b.n	8013f8c <_dtoa_r+0x57c>
 8013fea:	f8cd 8010 	str.w	r8, [sp, #16]
 8013fee:	4633      	mov	r3, r6
 8013ff0:	461e      	mov	r6, r3
 8013ff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ff6:	2a39      	cmp	r2, #57	@ 0x39
 8013ff8:	d106      	bne.n	8014008 <_dtoa_r+0x5f8>
 8013ffa:	429f      	cmp	r7, r3
 8013ffc:	d1f8      	bne.n	8013ff0 <_dtoa_r+0x5e0>
 8013ffe:	9a04      	ldr	r2, [sp, #16]
 8014000:	3201      	adds	r2, #1
 8014002:	9204      	str	r2, [sp, #16]
 8014004:	2230      	movs	r2, #48	@ 0x30
 8014006:	703a      	strb	r2, [r7, #0]
 8014008:	781a      	ldrb	r2, [r3, #0]
 801400a:	3201      	adds	r2, #1
 801400c:	701a      	strb	r2, [r3, #0]
 801400e:	e7bd      	b.n	8013f8c <_dtoa_r+0x57c>
 8014010:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014014:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401c:	f47f aeef 	bne.w	8013dfe <_dtoa_r+0x3ee>
 8014020:	e710      	b.n	8013e44 <_dtoa_r+0x434>
 8014022:	bf00      	nop
 8014024:	08017ba0 	.word	0x08017ba0
 8014028:	08017b78 	.word	0x08017b78
 801402c:	9908      	ldr	r1, [sp, #32]
 801402e:	2900      	cmp	r1, #0
 8014030:	f000 80e3 	beq.w	80141fa <_dtoa_r+0x7ea>
 8014034:	9907      	ldr	r1, [sp, #28]
 8014036:	2901      	cmp	r1, #1
 8014038:	f300 80c8 	bgt.w	80141cc <_dtoa_r+0x7bc>
 801403c:	2d00      	cmp	r5, #0
 801403e:	f000 80c1 	beq.w	80141c4 <_dtoa_r+0x7b4>
 8014042:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014046:	9e05      	ldr	r6, [sp, #20]
 8014048:	461c      	mov	r4, r3
 801404a:	9304      	str	r3, [sp, #16]
 801404c:	9b05      	ldr	r3, [sp, #20]
 801404e:	4413      	add	r3, r2
 8014050:	9305      	str	r3, [sp, #20]
 8014052:	9b06      	ldr	r3, [sp, #24]
 8014054:	2101      	movs	r1, #1
 8014056:	4413      	add	r3, r2
 8014058:	4648      	mov	r0, r9
 801405a:	9306      	str	r3, [sp, #24]
 801405c:	f000 fb6c 	bl	8014738 <__i2b>
 8014060:	9b04      	ldr	r3, [sp, #16]
 8014062:	4605      	mov	r5, r0
 8014064:	b166      	cbz	r6, 8014080 <_dtoa_r+0x670>
 8014066:	9a06      	ldr	r2, [sp, #24]
 8014068:	2a00      	cmp	r2, #0
 801406a:	dd09      	ble.n	8014080 <_dtoa_r+0x670>
 801406c:	42b2      	cmp	r2, r6
 801406e:	9905      	ldr	r1, [sp, #20]
 8014070:	bfa8      	it	ge
 8014072:	4632      	movge	r2, r6
 8014074:	1a89      	subs	r1, r1, r2
 8014076:	9105      	str	r1, [sp, #20]
 8014078:	9906      	ldr	r1, [sp, #24]
 801407a:	1ab6      	subs	r6, r6, r2
 801407c:	1a8a      	subs	r2, r1, r2
 801407e:	9206      	str	r2, [sp, #24]
 8014080:	b1fb      	cbz	r3, 80140c2 <_dtoa_r+0x6b2>
 8014082:	9a08      	ldr	r2, [sp, #32]
 8014084:	2a00      	cmp	r2, #0
 8014086:	f000 80bc 	beq.w	8014202 <_dtoa_r+0x7f2>
 801408a:	b19c      	cbz	r4, 80140b4 <_dtoa_r+0x6a4>
 801408c:	4629      	mov	r1, r5
 801408e:	4622      	mov	r2, r4
 8014090:	4648      	mov	r0, r9
 8014092:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014094:	f000 fc10 	bl	80148b8 <__pow5mult>
 8014098:	9a01      	ldr	r2, [sp, #4]
 801409a:	4601      	mov	r1, r0
 801409c:	4605      	mov	r5, r0
 801409e:	4648      	mov	r0, r9
 80140a0:	f000 fb60 	bl	8014764 <__multiply>
 80140a4:	9901      	ldr	r1, [sp, #4]
 80140a6:	9004      	str	r0, [sp, #16]
 80140a8:	4648      	mov	r0, r9
 80140aa:	f000 fa91 	bl	80145d0 <_Bfree>
 80140ae:	9a04      	ldr	r2, [sp, #16]
 80140b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140b2:	9201      	str	r2, [sp, #4]
 80140b4:	1b1a      	subs	r2, r3, r4
 80140b6:	d004      	beq.n	80140c2 <_dtoa_r+0x6b2>
 80140b8:	9901      	ldr	r1, [sp, #4]
 80140ba:	4648      	mov	r0, r9
 80140bc:	f000 fbfc 	bl	80148b8 <__pow5mult>
 80140c0:	9001      	str	r0, [sp, #4]
 80140c2:	2101      	movs	r1, #1
 80140c4:	4648      	mov	r0, r9
 80140c6:	f000 fb37 	bl	8014738 <__i2b>
 80140ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140cc:	4604      	mov	r4, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	f000 81d0 	beq.w	8014474 <_dtoa_r+0xa64>
 80140d4:	461a      	mov	r2, r3
 80140d6:	4601      	mov	r1, r0
 80140d8:	4648      	mov	r0, r9
 80140da:	f000 fbed 	bl	80148b8 <__pow5mult>
 80140de:	9b07      	ldr	r3, [sp, #28]
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	4604      	mov	r4, r0
 80140e4:	f300 8095 	bgt.w	8014212 <_dtoa_r+0x802>
 80140e8:	9b02      	ldr	r3, [sp, #8]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	f040 808b 	bne.w	8014206 <_dtoa_r+0x7f6>
 80140f0:	9b03      	ldr	r3, [sp, #12]
 80140f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80140f6:	2a00      	cmp	r2, #0
 80140f8:	f040 8087 	bne.w	801420a <_dtoa_r+0x7fa>
 80140fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014100:	0d12      	lsrs	r2, r2, #20
 8014102:	0512      	lsls	r2, r2, #20
 8014104:	2a00      	cmp	r2, #0
 8014106:	f000 8082 	beq.w	801420e <_dtoa_r+0x7fe>
 801410a:	9b05      	ldr	r3, [sp, #20]
 801410c:	3301      	adds	r3, #1
 801410e:	9305      	str	r3, [sp, #20]
 8014110:	9b06      	ldr	r3, [sp, #24]
 8014112:	3301      	adds	r3, #1
 8014114:	9306      	str	r3, [sp, #24]
 8014116:	2301      	movs	r3, #1
 8014118:	930b      	str	r3, [sp, #44]	@ 0x2c
 801411a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801411c:	2b00      	cmp	r3, #0
 801411e:	f000 81af 	beq.w	8014480 <_dtoa_r+0xa70>
 8014122:	6922      	ldr	r2, [r4, #16]
 8014124:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014128:	6910      	ldr	r0, [r2, #16]
 801412a:	f000 fab9 	bl	80146a0 <__hi0bits>
 801412e:	f1c0 0020 	rsb	r0, r0, #32
 8014132:	9b06      	ldr	r3, [sp, #24]
 8014134:	4418      	add	r0, r3
 8014136:	f010 001f 	ands.w	r0, r0, #31
 801413a:	d076      	beq.n	801422a <_dtoa_r+0x81a>
 801413c:	f1c0 0220 	rsb	r2, r0, #32
 8014140:	2a04      	cmp	r2, #4
 8014142:	dd69      	ble.n	8014218 <_dtoa_r+0x808>
 8014144:	9b05      	ldr	r3, [sp, #20]
 8014146:	f1c0 001c 	rsb	r0, r0, #28
 801414a:	4403      	add	r3, r0
 801414c:	9305      	str	r3, [sp, #20]
 801414e:	9b06      	ldr	r3, [sp, #24]
 8014150:	4406      	add	r6, r0
 8014152:	4403      	add	r3, r0
 8014154:	9306      	str	r3, [sp, #24]
 8014156:	9b05      	ldr	r3, [sp, #20]
 8014158:	2b00      	cmp	r3, #0
 801415a:	dd05      	ble.n	8014168 <_dtoa_r+0x758>
 801415c:	9901      	ldr	r1, [sp, #4]
 801415e:	461a      	mov	r2, r3
 8014160:	4648      	mov	r0, r9
 8014162:	f000 fc03 	bl	801496c <__lshift>
 8014166:	9001      	str	r0, [sp, #4]
 8014168:	9b06      	ldr	r3, [sp, #24]
 801416a:	2b00      	cmp	r3, #0
 801416c:	dd05      	ble.n	801417a <_dtoa_r+0x76a>
 801416e:	4621      	mov	r1, r4
 8014170:	461a      	mov	r2, r3
 8014172:	4648      	mov	r0, r9
 8014174:	f000 fbfa 	bl	801496c <__lshift>
 8014178:	4604      	mov	r4, r0
 801417a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801417c:	2b00      	cmp	r3, #0
 801417e:	d056      	beq.n	801422e <_dtoa_r+0x81e>
 8014180:	9801      	ldr	r0, [sp, #4]
 8014182:	4621      	mov	r1, r4
 8014184:	f000 fc5e 	bl	8014a44 <__mcmp>
 8014188:	2800      	cmp	r0, #0
 801418a:	da50      	bge.n	801422e <_dtoa_r+0x81e>
 801418c:	f108 33ff 	add.w	r3, r8, #4294967295
 8014190:	9304      	str	r3, [sp, #16]
 8014192:	9901      	ldr	r1, [sp, #4]
 8014194:	2300      	movs	r3, #0
 8014196:	220a      	movs	r2, #10
 8014198:	4648      	mov	r0, r9
 801419a:	f000 fa3b 	bl	8014614 <__multadd>
 801419e:	9b08      	ldr	r3, [sp, #32]
 80141a0:	9001      	str	r0, [sp, #4]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	f000 816e 	beq.w	8014484 <_dtoa_r+0xa74>
 80141a8:	4629      	mov	r1, r5
 80141aa:	2300      	movs	r3, #0
 80141ac:	220a      	movs	r2, #10
 80141ae:	4648      	mov	r0, r9
 80141b0:	f000 fa30 	bl	8014614 <__multadd>
 80141b4:	f1bb 0f00 	cmp.w	fp, #0
 80141b8:	4605      	mov	r5, r0
 80141ba:	dc64      	bgt.n	8014286 <_dtoa_r+0x876>
 80141bc:	9b07      	ldr	r3, [sp, #28]
 80141be:	2b02      	cmp	r3, #2
 80141c0:	dc3e      	bgt.n	8014240 <_dtoa_r+0x830>
 80141c2:	e060      	b.n	8014286 <_dtoa_r+0x876>
 80141c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80141c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80141ca:	e73c      	b.n	8014046 <_dtoa_r+0x636>
 80141cc:	f10a 34ff 	add.w	r4, sl, #4294967295
 80141d0:	42a3      	cmp	r3, r4
 80141d2:	bfbf      	itttt	lt
 80141d4:	1ae2      	sublt	r2, r4, r3
 80141d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80141d8:	189b      	addlt	r3, r3, r2
 80141da:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80141dc:	bfae      	itee	ge
 80141de:	1b1c      	subge	r4, r3, r4
 80141e0:	4623      	movlt	r3, r4
 80141e2:	2400      	movlt	r4, #0
 80141e4:	f1ba 0f00 	cmp.w	sl, #0
 80141e8:	bfb5      	itete	lt
 80141ea:	9a05      	ldrlt	r2, [sp, #20]
 80141ec:	9e05      	ldrge	r6, [sp, #20]
 80141ee:	eba2 060a 	sublt.w	r6, r2, sl
 80141f2:	4652      	movge	r2, sl
 80141f4:	bfb8      	it	lt
 80141f6:	2200      	movlt	r2, #0
 80141f8:	e727      	b.n	801404a <_dtoa_r+0x63a>
 80141fa:	9e05      	ldr	r6, [sp, #20]
 80141fc:	9d08      	ldr	r5, [sp, #32]
 80141fe:	461c      	mov	r4, r3
 8014200:	e730      	b.n	8014064 <_dtoa_r+0x654>
 8014202:	461a      	mov	r2, r3
 8014204:	e758      	b.n	80140b8 <_dtoa_r+0x6a8>
 8014206:	2300      	movs	r3, #0
 8014208:	e786      	b.n	8014118 <_dtoa_r+0x708>
 801420a:	9b02      	ldr	r3, [sp, #8]
 801420c:	e784      	b.n	8014118 <_dtoa_r+0x708>
 801420e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014210:	e783      	b.n	801411a <_dtoa_r+0x70a>
 8014212:	2300      	movs	r3, #0
 8014214:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014216:	e784      	b.n	8014122 <_dtoa_r+0x712>
 8014218:	d09d      	beq.n	8014156 <_dtoa_r+0x746>
 801421a:	9b05      	ldr	r3, [sp, #20]
 801421c:	321c      	adds	r2, #28
 801421e:	4413      	add	r3, r2
 8014220:	9305      	str	r3, [sp, #20]
 8014222:	9b06      	ldr	r3, [sp, #24]
 8014224:	4416      	add	r6, r2
 8014226:	4413      	add	r3, r2
 8014228:	e794      	b.n	8014154 <_dtoa_r+0x744>
 801422a:	4602      	mov	r2, r0
 801422c:	e7f5      	b.n	801421a <_dtoa_r+0x80a>
 801422e:	f1ba 0f00 	cmp.w	sl, #0
 8014232:	f8cd 8010 	str.w	r8, [sp, #16]
 8014236:	46d3      	mov	fp, sl
 8014238:	dc21      	bgt.n	801427e <_dtoa_r+0x86e>
 801423a:	9b07      	ldr	r3, [sp, #28]
 801423c:	2b02      	cmp	r3, #2
 801423e:	dd1e      	ble.n	801427e <_dtoa_r+0x86e>
 8014240:	f1bb 0f00 	cmp.w	fp, #0
 8014244:	f47f aeb7 	bne.w	8013fb6 <_dtoa_r+0x5a6>
 8014248:	4621      	mov	r1, r4
 801424a:	465b      	mov	r3, fp
 801424c:	2205      	movs	r2, #5
 801424e:	4648      	mov	r0, r9
 8014250:	f000 f9e0 	bl	8014614 <__multadd>
 8014254:	4601      	mov	r1, r0
 8014256:	4604      	mov	r4, r0
 8014258:	9801      	ldr	r0, [sp, #4]
 801425a:	f000 fbf3 	bl	8014a44 <__mcmp>
 801425e:	2800      	cmp	r0, #0
 8014260:	f77f aea9 	ble.w	8013fb6 <_dtoa_r+0x5a6>
 8014264:	463e      	mov	r6, r7
 8014266:	2331      	movs	r3, #49	@ 0x31
 8014268:	f806 3b01 	strb.w	r3, [r6], #1
 801426c:	9b04      	ldr	r3, [sp, #16]
 801426e:	3301      	adds	r3, #1
 8014270:	9304      	str	r3, [sp, #16]
 8014272:	e6a4      	b.n	8013fbe <_dtoa_r+0x5ae>
 8014274:	f8cd 8010 	str.w	r8, [sp, #16]
 8014278:	4654      	mov	r4, sl
 801427a:	4625      	mov	r5, r4
 801427c:	e7f2      	b.n	8014264 <_dtoa_r+0x854>
 801427e:	9b08      	ldr	r3, [sp, #32]
 8014280:	2b00      	cmp	r3, #0
 8014282:	f000 8103 	beq.w	801448c <_dtoa_r+0xa7c>
 8014286:	2e00      	cmp	r6, #0
 8014288:	dd05      	ble.n	8014296 <_dtoa_r+0x886>
 801428a:	4629      	mov	r1, r5
 801428c:	4632      	mov	r2, r6
 801428e:	4648      	mov	r0, r9
 8014290:	f000 fb6c 	bl	801496c <__lshift>
 8014294:	4605      	mov	r5, r0
 8014296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014298:	2b00      	cmp	r3, #0
 801429a:	d058      	beq.n	801434e <_dtoa_r+0x93e>
 801429c:	6869      	ldr	r1, [r5, #4]
 801429e:	4648      	mov	r0, r9
 80142a0:	f000 f956 	bl	8014550 <_Balloc>
 80142a4:	4606      	mov	r6, r0
 80142a6:	b928      	cbnz	r0, 80142b4 <_dtoa_r+0x8a4>
 80142a8:	4b82      	ldr	r3, [pc, #520]	@ (80144b4 <_dtoa_r+0xaa4>)
 80142aa:	4602      	mov	r2, r0
 80142ac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80142b0:	f7ff bbc7 	b.w	8013a42 <_dtoa_r+0x32>
 80142b4:	692a      	ldr	r2, [r5, #16]
 80142b6:	3202      	adds	r2, #2
 80142b8:	0092      	lsls	r2, r2, #2
 80142ba:	f105 010c 	add.w	r1, r5, #12
 80142be:	300c      	adds	r0, #12
 80142c0:	f000 fee6 	bl	8015090 <memcpy>
 80142c4:	2201      	movs	r2, #1
 80142c6:	4631      	mov	r1, r6
 80142c8:	4648      	mov	r0, r9
 80142ca:	f000 fb4f 	bl	801496c <__lshift>
 80142ce:	1c7b      	adds	r3, r7, #1
 80142d0:	9305      	str	r3, [sp, #20]
 80142d2:	eb07 030b 	add.w	r3, r7, fp
 80142d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80142d8:	9b02      	ldr	r3, [sp, #8]
 80142da:	f003 0301 	and.w	r3, r3, #1
 80142de:	46a8      	mov	r8, r5
 80142e0:	9308      	str	r3, [sp, #32]
 80142e2:	4605      	mov	r5, r0
 80142e4:	9b05      	ldr	r3, [sp, #20]
 80142e6:	9801      	ldr	r0, [sp, #4]
 80142e8:	4621      	mov	r1, r4
 80142ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80142ee:	f7ff fb06 	bl	80138fe <quorem>
 80142f2:	4641      	mov	r1, r8
 80142f4:	9002      	str	r0, [sp, #8]
 80142f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80142fa:	9801      	ldr	r0, [sp, #4]
 80142fc:	f000 fba2 	bl	8014a44 <__mcmp>
 8014300:	462a      	mov	r2, r5
 8014302:	9006      	str	r0, [sp, #24]
 8014304:	4621      	mov	r1, r4
 8014306:	4648      	mov	r0, r9
 8014308:	f000 fbb8 	bl	8014a7c <__mdiff>
 801430c:	68c2      	ldr	r2, [r0, #12]
 801430e:	4606      	mov	r6, r0
 8014310:	b9fa      	cbnz	r2, 8014352 <_dtoa_r+0x942>
 8014312:	4601      	mov	r1, r0
 8014314:	9801      	ldr	r0, [sp, #4]
 8014316:	f000 fb95 	bl	8014a44 <__mcmp>
 801431a:	4602      	mov	r2, r0
 801431c:	4631      	mov	r1, r6
 801431e:	4648      	mov	r0, r9
 8014320:	920a      	str	r2, [sp, #40]	@ 0x28
 8014322:	f000 f955 	bl	80145d0 <_Bfree>
 8014326:	9b07      	ldr	r3, [sp, #28]
 8014328:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801432a:	9e05      	ldr	r6, [sp, #20]
 801432c:	ea43 0102 	orr.w	r1, r3, r2
 8014330:	9b08      	ldr	r3, [sp, #32]
 8014332:	4319      	orrs	r1, r3
 8014334:	d10f      	bne.n	8014356 <_dtoa_r+0x946>
 8014336:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801433a:	d028      	beq.n	801438e <_dtoa_r+0x97e>
 801433c:	9b06      	ldr	r3, [sp, #24]
 801433e:	2b00      	cmp	r3, #0
 8014340:	dd02      	ble.n	8014348 <_dtoa_r+0x938>
 8014342:	9b02      	ldr	r3, [sp, #8]
 8014344:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8014348:	f88b a000 	strb.w	sl, [fp]
 801434c:	e639      	b.n	8013fc2 <_dtoa_r+0x5b2>
 801434e:	4628      	mov	r0, r5
 8014350:	e7bd      	b.n	80142ce <_dtoa_r+0x8be>
 8014352:	2201      	movs	r2, #1
 8014354:	e7e2      	b.n	801431c <_dtoa_r+0x90c>
 8014356:	9b06      	ldr	r3, [sp, #24]
 8014358:	2b00      	cmp	r3, #0
 801435a:	db04      	blt.n	8014366 <_dtoa_r+0x956>
 801435c:	9907      	ldr	r1, [sp, #28]
 801435e:	430b      	orrs	r3, r1
 8014360:	9908      	ldr	r1, [sp, #32]
 8014362:	430b      	orrs	r3, r1
 8014364:	d120      	bne.n	80143a8 <_dtoa_r+0x998>
 8014366:	2a00      	cmp	r2, #0
 8014368:	ddee      	ble.n	8014348 <_dtoa_r+0x938>
 801436a:	9901      	ldr	r1, [sp, #4]
 801436c:	2201      	movs	r2, #1
 801436e:	4648      	mov	r0, r9
 8014370:	f000 fafc 	bl	801496c <__lshift>
 8014374:	4621      	mov	r1, r4
 8014376:	9001      	str	r0, [sp, #4]
 8014378:	f000 fb64 	bl	8014a44 <__mcmp>
 801437c:	2800      	cmp	r0, #0
 801437e:	dc03      	bgt.n	8014388 <_dtoa_r+0x978>
 8014380:	d1e2      	bne.n	8014348 <_dtoa_r+0x938>
 8014382:	f01a 0f01 	tst.w	sl, #1
 8014386:	d0df      	beq.n	8014348 <_dtoa_r+0x938>
 8014388:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801438c:	d1d9      	bne.n	8014342 <_dtoa_r+0x932>
 801438e:	2339      	movs	r3, #57	@ 0x39
 8014390:	f88b 3000 	strb.w	r3, [fp]
 8014394:	4633      	mov	r3, r6
 8014396:	461e      	mov	r6, r3
 8014398:	3b01      	subs	r3, #1
 801439a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801439e:	2a39      	cmp	r2, #57	@ 0x39
 80143a0:	d053      	beq.n	801444a <_dtoa_r+0xa3a>
 80143a2:	3201      	adds	r2, #1
 80143a4:	701a      	strb	r2, [r3, #0]
 80143a6:	e60c      	b.n	8013fc2 <_dtoa_r+0x5b2>
 80143a8:	2a00      	cmp	r2, #0
 80143aa:	dd07      	ble.n	80143bc <_dtoa_r+0x9ac>
 80143ac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80143b0:	d0ed      	beq.n	801438e <_dtoa_r+0x97e>
 80143b2:	f10a 0301 	add.w	r3, sl, #1
 80143b6:	f88b 3000 	strb.w	r3, [fp]
 80143ba:	e602      	b.n	8013fc2 <_dtoa_r+0x5b2>
 80143bc:	9b05      	ldr	r3, [sp, #20]
 80143be:	9a05      	ldr	r2, [sp, #20]
 80143c0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80143c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143c6:	4293      	cmp	r3, r2
 80143c8:	d029      	beq.n	801441e <_dtoa_r+0xa0e>
 80143ca:	9901      	ldr	r1, [sp, #4]
 80143cc:	2300      	movs	r3, #0
 80143ce:	220a      	movs	r2, #10
 80143d0:	4648      	mov	r0, r9
 80143d2:	f000 f91f 	bl	8014614 <__multadd>
 80143d6:	45a8      	cmp	r8, r5
 80143d8:	9001      	str	r0, [sp, #4]
 80143da:	f04f 0300 	mov.w	r3, #0
 80143de:	f04f 020a 	mov.w	r2, #10
 80143e2:	4641      	mov	r1, r8
 80143e4:	4648      	mov	r0, r9
 80143e6:	d107      	bne.n	80143f8 <_dtoa_r+0x9e8>
 80143e8:	f000 f914 	bl	8014614 <__multadd>
 80143ec:	4680      	mov	r8, r0
 80143ee:	4605      	mov	r5, r0
 80143f0:	9b05      	ldr	r3, [sp, #20]
 80143f2:	3301      	adds	r3, #1
 80143f4:	9305      	str	r3, [sp, #20]
 80143f6:	e775      	b.n	80142e4 <_dtoa_r+0x8d4>
 80143f8:	f000 f90c 	bl	8014614 <__multadd>
 80143fc:	4629      	mov	r1, r5
 80143fe:	4680      	mov	r8, r0
 8014400:	2300      	movs	r3, #0
 8014402:	220a      	movs	r2, #10
 8014404:	4648      	mov	r0, r9
 8014406:	f000 f905 	bl	8014614 <__multadd>
 801440a:	4605      	mov	r5, r0
 801440c:	e7f0      	b.n	80143f0 <_dtoa_r+0x9e0>
 801440e:	f1bb 0f00 	cmp.w	fp, #0
 8014412:	bfcc      	ite	gt
 8014414:	465e      	movgt	r6, fp
 8014416:	2601      	movle	r6, #1
 8014418:	443e      	add	r6, r7
 801441a:	f04f 0800 	mov.w	r8, #0
 801441e:	9901      	ldr	r1, [sp, #4]
 8014420:	2201      	movs	r2, #1
 8014422:	4648      	mov	r0, r9
 8014424:	f000 faa2 	bl	801496c <__lshift>
 8014428:	4621      	mov	r1, r4
 801442a:	9001      	str	r0, [sp, #4]
 801442c:	f000 fb0a 	bl	8014a44 <__mcmp>
 8014430:	2800      	cmp	r0, #0
 8014432:	dcaf      	bgt.n	8014394 <_dtoa_r+0x984>
 8014434:	d102      	bne.n	801443c <_dtoa_r+0xa2c>
 8014436:	f01a 0f01 	tst.w	sl, #1
 801443a:	d1ab      	bne.n	8014394 <_dtoa_r+0x984>
 801443c:	4633      	mov	r3, r6
 801443e:	461e      	mov	r6, r3
 8014440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014444:	2a30      	cmp	r2, #48	@ 0x30
 8014446:	d0fa      	beq.n	801443e <_dtoa_r+0xa2e>
 8014448:	e5bb      	b.n	8013fc2 <_dtoa_r+0x5b2>
 801444a:	429f      	cmp	r7, r3
 801444c:	d1a3      	bne.n	8014396 <_dtoa_r+0x986>
 801444e:	9b04      	ldr	r3, [sp, #16]
 8014450:	3301      	adds	r3, #1
 8014452:	9304      	str	r3, [sp, #16]
 8014454:	2331      	movs	r3, #49	@ 0x31
 8014456:	703b      	strb	r3, [r7, #0]
 8014458:	e5b3      	b.n	8013fc2 <_dtoa_r+0x5b2>
 801445a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801445c:	4f16      	ldr	r7, [pc, #88]	@ (80144b8 <_dtoa_r+0xaa8>)
 801445e:	b11b      	cbz	r3, 8014468 <_dtoa_r+0xa58>
 8014460:	f107 0308 	add.w	r3, r7, #8
 8014464:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014466:	6013      	str	r3, [r2, #0]
 8014468:	4638      	mov	r0, r7
 801446a:	b011      	add	sp, #68	@ 0x44
 801446c:	ecbd 8b02 	vpop	{d8}
 8014470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014474:	9b07      	ldr	r3, [sp, #28]
 8014476:	2b01      	cmp	r3, #1
 8014478:	f77f ae36 	ble.w	80140e8 <_dtoa_r+0x6d8>
 801447c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801447e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014480:	2001      	movs	r0, #1
 8014482:	e656      	b.n	8014132 <_dtoa_r+0x722>
 8014484:	f1bb 0f00 	cmp.w	fp, #0
 8014488:	f77f aed7 	ble.w	801423a <_dtoa_r+0x82a>
 801448c:	463e      	mov	r6, r7
 801448e:	9801      	ldr	r0, [sp, #4]
 8014490:	4621      	mov	r1, r4
 8014492:	f7ff fa34 	bl	80138fe <quorem>
 8014496:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801449a:	f806 ab01 	strb.w	sl, [r6], #1
 801449e:	1bf2      	subs	r2, r6, r7
 80144a0:	4593      	cmp	fp, r2
 80144a2:	ddb4      	ble.n	801440e <_dtoa_r+0x9fe>
 80144a4:	9901      	ldr	r1, [sp, #4]
 80144a6:	2300      	movs	r3, #0
 80144a8:	220a      	movs	r2, #10
 80144aa:	4648      	mov	r0, r9
 80144ac:	f000 f8b2 	bl	8014614 <__multadd>
 80144b0:	9001      	str	r0, [sp, #4]
 80144b2:	e7ec      	b.n	801448e <_dtoa_r+0xa7e>
 80144b4:	08017b00 	.word	0x08017b00
 80144b8:	08017a84 	.word	0x08017a84

080144bc <_free_r>:
 80144bc:	b538      	push	{r3, r4, r5, lr}
 80144be:	4605      	mov	r5, r0
 80144c0:	2900      	cmp	r1, #0
 80144c2:	d041      	beq.n	8014548 <_free_r+0x8c>
 80144c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144c8:	1f0c      	subs	r4, r1, #4
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	bfb8      	it	lt
 80144ce:	18e4      	addlt	r4, r4, r3
 80144d0:	f7fe fc24 	bl	8012d1c <__malloc_lock>
 80144d4:	4a1d      	ldr	r2, [pc, #116]	@ (801454c <_free_r+0x90>)
 80144d6:	6813      	ldr	r3, [r2, #0]
 80144d8:	b933      	cbnz	r3, 80144e8 <_free_r+0x2c>
 80144da:	6063      	str	r3, [r4, #4]
 80144dc:	6014      	str	r4, [r2, #0]
 80144de:	4628      	mov	r0, r5
 80144e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80144e4:	f7fe bc20 	b.w	8012d28 <__malloc_unlock>
 80144e8:	42a3      	cmp	r3, r4
 80144ea:	d908      	bls.n	80144fe <_free_r+0x42>
 80144ec:	6820      	ldr	r0, [r4, #0]
 80144ee:	1821      	adds	r1, r4, r0
 80144f0:	428b      	cmp	r3, r1
 80144f2:	bf01      	itttt	eq
 80144f4:	6819      	ldreq	r1, [r3, #0]
 80144f6:	685b      	ldreq	r3, [r3, #4]
 80144f8:	1809      	addeq	r1, r1, r0
 80144fa:	6021      	streq	r1, [r4, #0]
 80144fc:	e7ed      	b.n	80144da <_free_r+0x1e>
 80144fe:	461a      	mov	r2, r3
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	b10b      	cbz	r3, 8014508 <_free_r+0x4c>
 8014504:	42a3      	cmp	r3, r4
 8014506:	d9fa      	bls.n	80144fe <_free_r+0x42>
 8014508:	6811      	ldr	r1, [r2, #0]
 801450a:	1850      	adds	r0, r2, r1
 801450c:	42a0      	cmp	r0, r4
 801450e:	d10b      	bne.n	8014528 <_free_r+0x6c>
 8014510:	6820      	ldr	r0, [r4, #0]
 8014512:	4401      	add	r1, r0
 8014514:	1850      	adds	r0, r2, r1
 8014516:	4283      	cmp	r3, r0
 8014518:	6011      	str	r1, [r2, #0]
 801451a:	d1e0      	bne.n	80144de <_free_r+0x22>
 801451c:	6818      	ldr	r0, [r3, #0]
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	6053      	str	r3, [r2, #4]
 8014522:	4408      	add	r0, r1
 8014524:	6010      	str	r0, [r2, #0]
 8014526:	e7da      	b.n	80144de <_free_r+0x22>
 8014528:	d902      	bls.n	8014530 <_free_r+0x74>
 801452a:	230c      	movs	r3, #12
 801452c:	602b      	str	r3, [r5, #0]
 801452e:	e7d6      	b.n	80144de <_free_r+0x22>
 8014530:	6820      	ldr	r0, [r4, #0]
 8014532:	1821      	adds	r1, r4, r0
 8014534:	428b      	cmp	r3, r1
 8014536:	bf04      	itt	eq
 8014538:	6819      	ldreq	r1, [r3, #0]
 801453a:	685b      	ldreq	r3, [r3, #4]
 801453c:	6063      	str	r3, [r4, #4]
 801453e:	bf04      	itt	eq
 8014540:	1809      	addeq	r1, r1, r0
 8014542:	6021      	streq	r1, [r4, #0]
 8014544:	6054      	str	r4, [r2, #4]
 8014546:	e7ca      	b.n	80144de <_free_r+0x22>
 8014548:	bd38      	pop	{r3, r4, r5, pc}
 801454a:	bf00      	nop
 801454c:	240027e8 	.word	0x240027e8

08014550 <_Balloc>:
 8014550:	b570      	push	{r4, r5, r6, lr}
 8014552:	69c6      	ldr	r6, [r0, #28]
 8014554:	4604      	mov	r4, r0
 8014556:	460d      	mov	r5, r1
 8014558:	b976      	cbnz	r6, 8014578 <_Balloc+0x28>
 801455a:	2010      	movs	r0, #16
 801455c:	f7fe fb34 	bl	8012bc8 <malloc>
 8014560:	4602      	mov	r2, r0
 8014562:	61e0      	str	r0, [r4, #28]
 8014564:	b920      	cbnz	r0, 8014570 <_Balloc+0x20>
 8014566:	4b18      	ldr	r3, [pc, #96]	@ (80145c8 <_Balloc+0x78>)
 8014568:	4818      	ldr	r0, [pc, #96]	@ (80145cc <_Balloc+0x7c>)
 801456a:	216b      	movs	r1, #107	@ 0x6b
 801456c:	f000 fd9e 	bl	80150ac <__assert_func>
 8014570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014574:	6006      	str	r6, [r0, #0]
 8014576:	60c6      	str	r6, [r0, #12]
 8014578:	69e6      	ldr	r6, [r4, #28]
 801457a:	68f3      	ldr	r3, [r6, #12]
 801457c:	b183      	cbz	r3, 80145a0 <_Balloc+0x50>
 801457e:	69e3      	ldr	r3, [r4, #28]
 8014580:	68db      	ldr	r3, [r3, #12]
 8014582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014586:	b9b8      	cbnz	r0, 80145b8 <_Balloc+0x68>
 8014588:	2101      	movs	r1, #1
 801458a:	fa01 f605 	lsl.w	r6, r1, r5
 801458e:	1d72      	adds	r2, r6, #5
 8014590:	0092      	lsls	r2, r2, #2
 8014592:	4620      	mov	r0, r4
 8014594:	f000 fda8 	bl	80150e8 <_calloc_r>
 8014598:	b160      	cbz	r0, 80145b4 <_Balloc+0x64>
 801459a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801459e:	e00e      	b.n	80145be <_Balloc+0x6e>
 80145a0:	2221      	movs	r2, #33	@ 0x21
 80145a2:	2104      	movs	r1, #4
 80145a4:	4620      	mov	r0, r4
 80145a6:	f000 fd9f 	bl	80150e8 <_calloc_r>
 80145aa:	69e3      	ldr	r3, [r4, #28]
 80145ac:	60f0      	str	r0, [r6, #12]
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d1e4      	bne.n	801457e <_Balloc+0x2e>
 80145b4:	2000      	movs	r0, #0
 80145b6:	bd70      	pop	{r4, r5, r6, pc}
 80145b8:	6802      	ldr	r2, [r0, #0]
 80145ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80145be:	2300      	movs	r3, #0
 80145c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80145c4:	e7f7      	b.n	80145b6 <_Balloc+0x66>
 80145c6:	bf00      	nop
 80145c8:	08017a91 	.word	0x08017a91
 80145cc:	08017b11 	.word	0x08017b11

080145d0 <_Bfree>:
 80145d0:	b570      	push	{r4, r5, r6, lr}
 80145d2:	69c6      	ldr	r6, [r0, #28]
 80145d4:	4605      	mov	r5, r0
 80145d6:	460c      	mov	r4, r1
 80145d8:	b976      	cbnz	r6, 80145f8 <_Bfree+0x28>
 80145da:	2010      	movs	r0, #16
 80145dc:	f7fe faf4 	bl	8012bc8 <malloc>
 80145e0:	4602      	mov	r2, r0
 80145e2:	61e8      	str	r0, [r5, #28]
 80145e4:	b920      	cbnz	r0, 80145f0 <_Bfree+0x20>
 80145e6:	4b09      	ldr	r3, [pc, #36]	@ (801460c <_Bfree+0x3c>)
 80145e8:	4809      	ldr	r0, [pc, #36]	@ (8014610 <_Bfree+0x40>)
 80145ea:	218f      	movs	r1, #143	@ 0x8f
 80145ec:	f000 fd5e 	bl	80150ac <__assert_func>
 80145f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80145f4:	6006      	str	r6, [r0, #0]
 80145f6:	60c6      	str	r6, [r0, #12]
 80145f8:	b13c      	cbz	r4, 801460a <_Bfree+0x3a>
 80145fa:	69eb      	ldr	r3, [r5, #28]
 80145fc:	6862      	ldr	r2, [r4, #4]
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014604:	6021      	str	r1, [r4, #0]
 8014606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801460a:	bd70      	pop	{r4, r5, r6, pc}
 801460c:	08017a91 	.word	0x08017a91
 8014610:	08017b11 	.word	0x08017b11

08014614 <__multadd>:
 8014614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014618:	690d      	ldr	r5, [r1, #16]
 801461a:	4607      	mov	r7, r0
 801461c:	460c      	mov	r4, r1
 801461e:	461e      	mov	r6, r3
 8014620:	f101 0c14 	add.w	ip, r1, #20
 8014624:	2000      	movs	r0, #0
 8014626:	f8dc 3000 	ldr.w	r3, [ip]
 801462a:	b299      	uxth	r1, r3
 801462c:	fb02 6101 	mla	r1, r2, r1, r6
 8014630:	0c1e      	lsrs	r6, r3, #16
 8014632:	0c0b      	lsrs	r3, r1, #16
 8014634:	fb02 3306 	mla	r3, r2, r6, r3
 8014638:	b289      	uxth	r1, r1
 801463a:	3001      	adds	r0, #1
 801463c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014640:	4285      	cmp	r5, r0
 8014642:	f84c 1b04 	str.w	r1, [ip], #4
 8014646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801464a:	dcec      	bgt.n	8014626 <__multadd+0x12>
 801464c:	b30e      	cbz	r6, 8014692 <__multadd+0x7e>
 801464e:	68a3      	ldr	r3, [r4, #8]
 8014650:	42ab      	cmp	r3, r5
 8014652:	dc19      	bgt.n	8014688 <__multadd+0x74>
 8014654:	6861      	ldr	r1, [r4, #4]
 8014656:	4638      	mov	r0, r7
 8014658:	3101      	adds	r1, #1
 801465a:	f7ff ff79 	bl	8014550 <_Balloc>
 801465e:	4680      	mov	r8, r0
 8014660:	b928      	cbnz	r0, 801466e <__multadd+0x5a>
 8014662:	4602      	mov	r2, r0
 8014664:	4b0c      	ldr	r3, [pc, #48]	@ (8014698 <__multadd+0x84>)
 8014666:	480d      	ldr	r0, [pc, #52]	@ (801469c <__multadd+0x88>)
 8014668:	21ba      	movs	r1, #186	@ 0xba
 801466a:	f000 fd1f 	bl	80150ac <__assert_func>
 801466e:	6922      	ldr	r2, [r4, #16]
 8014670:	3202      	adds	r2, #2
 8014672:	f104 010c 	add.w	r1, r4, #12
 8014676:	0092      	lsls	r2, r2, #2
 8014678:	300c      	adds	r0, #12
 801467a:	f000 fd09 	bl	8015090 <memcpy>
 801467e:	4621      	mov	r1, r4
 8014680:	4638      	mov	r0, r7
 8014682:	f7ff ffa5 	bl	80145d0 <_Bfree>
 8014686:	4644      	mov	r4, r8
 8014688:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801468c:	3501      	adds	r5, #1
 801468e:	615e      	str	r6, [r3, #20]
 8014690:	6125      	str	r5, [r4, #16]
 8014692:	4620      	mov	r0, r4
 8014694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014698:	08017b00 	.word	0x08017b00
 801469c:	08017b11 	.word	0x08017b11

080146a0 <__hi0bits>:
 80146a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80146a4:	4603      	mov	r3, r0
 80146a6:	bf36      	itet	cc
 80146a8:	0403      	lslcc	r3, r0, #16
 80146aa:	2000      	movcs	r0, #0
 80146ac:	2010      	movcc	r0, #16
 80146ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80146b2:	bf3c      	itt	cc
 80146b4:	021b      	lslcc	r3, r3, #8
 80146b6:	3008      	addcc	r0, #8
 80146b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80146bc:	bf3c      	itt	cc
 80146be:	011b      	lslcc	r3, r3, #4
 80146c0:	3004      	addcc	r0, #4
 80146c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80146c6:	bf3c      	itt	cc
 80146c8:	009b      	lslcc	r3, r3, #2
 80146ca:	3002      	addcc	r0, #2
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	db05      	blt.n	80146dc <__hi0bits+0x3c>
 80146d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80146d4:	f100 0001 	add.w	r0, r0, #1
 80146d8:	bf08      	it	eq
 80146da:	2020      	moveq	r0, #32
 80146dc:	4770      	bx	lr

080146de <__lo0bits>:
 80146de:	6803      	ldr	r3, [r0, #0]
 80146e0:	4602      	mov	r2, r0
 80146e2:	f013 0007 	ands.w	r0, r3, #7
 80146e6:	d00b      	beq.n	8014700 <__lo0bits+0x22>
 80146e8:	07d9      	lsls	r1, r3, #31
 80146ea:	d421      	bmi.n	8014730 <__lo0bits+0x52>
 80146ec:	0798      	lsls	r0, r3, #30
 80146ee:	bf49      	itett	mi
 80146f0:	085b      	lsrmi	r3, r3, #1
 80146f2:	089b      	lsrpl	r3, r3, #2
 80146f4:	2001      	movmi	r0, #1
 80146f6:	6013      	strmi	r3, [r2, #0]
 80146f8:	bf5c      	itt	pl
 80146fa:	6013      	strpl	r3, [r2, #0]
 80146fc:	2002      	movpl	r0, #2
 80146fe:	4770      	bx	lr
 8014700:	b299      	uxth	r1, r3
 8014702:	b909      	cbnz	r1, 8014708 <__lo0bits+0x2a>
 8014704:	0c1b      	lsrs	r3, r3, #16
 8014706:	2010      	movs	r0, #16
 8014708:	b2d9      	uxtb	r1, r3
 801470a:	b909      	cbnz	r1, 8014710 <__lo0bits+0x32>
 801470c:	3008      	adds	r0, #8
 801470e:	0a1b      	lsrs	r3, r3, #8
 8014710:	0719      	lsls	r1, r3, #28
 8014712:	bf04      	itt	eq
 8014714:	091b      	lsreq	r3, r3, #4
 8014716:	3004      	addeq	r0, #4
 8014718:	0799      	lsls	r1, r3, #30
 801471a:	bf04      	itt	eq
 801471c:	089b      	lsreq	r3, r3, #2
 801471e:	3002      	addeq	r0, #2
 8014720:	07d9      	lsls	r1, r3, #31
 8014722:	d403      	bmi.n	801472c <__lo0bits+0x4e>
 8014724:	085b      	lsrs	r3, r3, #1
 8014726:	f100 0001 	add.w	r0, r0, #1
 801472a:	d003      	beq.n	8014734 <__lo0bits+0x56>
 801472c:	6013      	str	r3, [r2, #0]
 801472e:	4770      	bx	lr
 8014730:	2000      	movs	r0, #0
 8014732:	4770      	bx	lr
 8014734:	2020      	movs	r0, #32
 8014736:	4770      	bx	lr

08014738 <__i2b>:
 8014738:	b510      	push	{r4, lr}
 801473a:	460c      	mov	r4, r1
 801473c:	2101      	movs	r1, #1
 801473e:	f7ff ff07 	bl	8014550 <_Balloc>
 8014742:	4602      	mov	r2, r0
 8014744:	b928      	cbnz	r0, 8014752 <__i2b+0x1a>
 8014746:	4b05      	ldr	r3, [pc, #20]	@ (801475c <__i2b+0x24>)
 8014748:	4805      	ldr	r0, [pc, #20]	@ (8014760 <__i2b+0x28>)
 801474a:	f240 1145 	movw	r1, #325	@ 0x145
 801474e:	f000 fcad 	bl	80150ac <__assert_func>
 8014752:	2301      	movs	r3, #1
 8014754:	6144      	str	r4, [r0, #20]
 8014756:	6103      	str	r3, [r0, #16]
 8014758:	bd10      	pop	{r4, pc}
 801475a:	bf00      	nop
 801475c:	08017b00 	.word	0x08017b00
 8014760:	08017b11 	.word	0x08017b11

08014764 <__multiply>:
 8014764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	4614      	mov	r4, r2
 801476a:	690a      	ldr	r2, [r1, #16]
 801476c:	6923      	ldr	r3, [r4, #16]
 801476e:	429a      	cmp	r2, r3
 8014770:	bfa8      	it	ge
 8014772:	4623      	movge	r3, r4
 8014774:	460f      	mov	r7, r1
 8014776:	bfa4      	itt	ge
 8014778:	460c      	movge	r4, r1
 801477a:	461f      	movge	r7, r3
 801477c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014780:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014784:	68a3      	ldr	r3, [r4, #8]
 8014786:	6861      	ldr	r1, [r4, #4]
 8014788:	eb0a 0609 	add.w	r6, sl, r9
 801478c:	42b3      	cmp	r3, r6
 801478e:	b085      	sub	sp, #20
 8014790:	bfb8      	it	lt
 8014792:	3101      	addlt	r1, #1
 8014794:	f7ff fedc 	bl	8014550 <_Balloc>
 8014798:	b930      	cbnz	r0, 80147a8 <__multiply+0x44>
 801479a:	4602      	mov	r2, r0
 801479c:	4b44      	ldr	r3, [pc, #272]	@ (80148b0 <__multiply+0x14c>)
 801479e:	4845      	ldr	r0, [pc, #276]	@ (80148b4 <__multiply+0x150>)
 80147a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80147a4:	f000 fc82 	bl	80150ac <__assert_func>
 80147a8:	f100 0514 	add.w	r5, r0, #20
 80147ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80147b0:	462b      	mov	r3, r5
 80147b2:	2200      	movs	r2, #0
 80147b4:	4543      	cmp	r3, r8
 80147b6:	d321      	bcc.n	80147fc <__multiply+0x98>
 80147b8:	f107 0114 	add.w	r1, r7, #20
 80147bc:	f104 0214 	add.w	r2, r4, #20
 80147c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80147c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80147c8:	9302      	str	r3, [sp, #8]
 80147ca:	1b13      	subs	r3, r2, r4
 80147cc:	3b15      	subs	r3, #21
 80147ce:	f023 0303 	bic.w	r3, r3, #3
 80147d2:	3304      	adds	r3, #4
 80147d4:	f104 0715 	add.w	r7, r4, #21
 80147d8:	42ba      	cmp	r2, r7
 80147da:	bf38      	it	cc
 80147dc:	2304      	movcc	r3, #4
 80147de:	9301      	str	r3, [sp, #4]
 80147e0:	9b02      	ldr	r3, [sp, #8]
 80147e2:	9103      	str	r1, [sp, #12]
 80147e4:	428b      	cmp	r3, r1
 80147e6:	d80c      	bhi.n	8014802 <__multiply+0x9e>
 80147e8:	2e00      	cmp	r6, #0
 80147ea:	dd03      	ble.n	80147f4 <__multiply+0x90>
 80147ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d05b      	beq.n	80148ac <__multiply+0x148>
 80147f4:	6106      	str	r6, [r0, #16]
 80147f6:	b005      	add	sp, #20
 80147f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147fc:	f843 2b04 	str.w	r2, [r3], #4
 8014800:	e7d8      	b.n	80147b4 <__multiply+0x50>
 8014802:	f8b1 a000 	ldrh.w	sl, [r1]
 8014806:	f1ba 0f00 	cmp.w	sl, #0
 801480a:	d024      	beq.n	8014856 <__multiply+0xf2>
 801480c:	f104 0e14 	add.w	lr, r4, #20
 8014810:	46a9      	mov	r9, r5
 8014812:	f04f 0c00 	mov.w	ip, #0
 8014816:	f85e 7b04 	ldr.w	r7, [lr], #4
 801481a:	f8d9 3000 	ldr.w	r3, [r9]
 801481e:	fa1f fb87 	uxth.w	fp, r7
 8014822:	b29b      	uxth	r3, r3
 8014824:	fb0a 330b 	mla	r3, sl, fp, r3
 8014828:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801482c:	f8d9 7000 	ldr.w	r7, [r9]
 8014830:	4463      	add	r3, ip
 8014832:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014836:	fb0a c70b 	mla	r7, sl, fp, ip
 801483a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801483e:	b29b      	uxth	r3, r3
 8014840:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014844:	4572      	cmp	r2, lr
 8014846:	f849 3b04 	str.w	r3, [r9], #4
 801484a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801484e:	d8e2      	bhi.n	8014816 <__multiply+0xb2>
 8014850:	9b01      	ldr	r3, [sp, #4]
 8014852:	f845 c003 	str.w	ip, [r5, r3]
 8014856:	9b03      	ldr	r3, [sp, #12]
 8014858:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801485c:	3104      	adds	r1, #4
 801485e:	f1b9 0f00 	cmp.w	r9, #0
 8014862:	d021      	beq.n	80148a8 <__multiply+0x144>
 8014864:	682b      	ldr	r3, [r5, #0]
 8014866:	f104 0c14 	add.w	ip, r4, #20
 801486a:	46ae      	mov	lr, r5
 801486c:	f04f 0a00 	mov.w	sl, #0
 8014870:	f8bc b000 	ldrh.w	fp, [ip]
 8014874:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014878:	fb09 770b 	mla	r7, r9, fp, r7
 801487c:	4457      	add	r7, sl
 801487e:	b29b      	uxth	r3, r3
 8014880:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014884:	f84e 3b04 	str.w	r3, [lr], #4
 8014888:	f85c 3b04 	ldr.w	r3, [ip], #4
 801488c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014890:	f8be 3000 	ldrh.w	r3, [lr]
 8014894:	fb09 330a 	mla	r3, r9, sl, r3
 8014898:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801489c:	4562      	cmp	r2, ip
 801489e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80148a2:	d8e5      	bhi.n	8014870 <__multiply+0x10c>
 80148a4:	9f01      	ldr	r7, [sp, #4]
 80148a6:	51eb      	str	r3, [r5, r7]
 80148a8:	3504      	adds	r5, #4
 80148aa:	e799      	b.n	80147e0 <__multiply+0x7c>
 80148ac:	3e01      	subs	r6, #1
 80148ae:	e79b      	b.n	80147e8 <__multiply+0x84>
 80148b0:	08017b00 	.word	0x08017b00
 80148b4:	08017b11 	.word	0x08017b11

080148b8 <__pow5mult>:
 80148b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148bc:	4615      	mov	r5, r2
 80148be:	f012 0203 	ands.w	r2, r2, #3
 80148c2:	4607      	mov	r7, r0
 80148c4:	460e      	mov	r6, r1
 80148c6:	d007      	beq.n	80148d8 <__pow5mult+0x20>
 80148c8:	4c25      	ldr	r4, [pc, #148]	@ (8014960 <__pow5mult+0xa8>)
 80148ca:	3a01      	subs	r2, #1
 80148cc:	2300      	movs	r3, #0
 80148ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80148d2:	f7ff fe9f 	bl	8014614 <__multadd>
 80148d6:	4606      	mov	r6, r0
 80148d8:	10ad      	asrs	r5, r5, #2
 80148da:	d03d      	beq.n	8014958 <__pow5mult+0xa0>
 80148dc:	69fc      	ldr	r4, [r7, #28]
 80148de:	b97c      	cbnz	r4, 8014900 <__pow5mult+0x48>
 80148e0:	2010      	movs	r0, #16
 80148e2:	f7fe f971 	bl	8012bc8 <malloc>
 80148e6:	4602      	mov	r2, r0
 80148e8:	61f8      	str	r0, [r7, #28]
 80148ea:	b928      	cbnz	r0, 80148f8 <__pow5mult+0x40>
 80148ec:	4b1d      	ldr	r3, [pc, #116]	@ (8014964 <__pow5mult+0xac>)
 80148ee:	481e      	ldr	r0, [pc, #120]	@ (8014968 <__pow5mult+0xb0>)
 80148f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80148f4:	f000 fbda 	bl	80150ac <__assert_func>
 80148f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80148fc:	6004      	str	r4, [r0, #0]
 80148fe:	60c4      	str	r4, [r0, #12]
 8014900:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014908:	b94c      	cbnz	r4, 801491e <__pow5mult+0x66>
 801490a:	f240 2171 	movw	r1, #625	@ 0x271
 801490e:	4638      	mov	r0, r7
 8014910:	f7ff ff12 	bl	8014738 <__i2b>
 8014914:	2300      	movs	r3, #0
 8014916:	f8c8 0008 	str.w	r0, [r8, #8]
 801491a:	4604      	mov	r4, r0
 801491c:	6003      	str	r3, [r0, #0]
 801491e:	f04f 0900 	mov.w	r9, #0
 8014922:	07eb      	lsls	r3, r5, #31
 8014924:	d50a      	bpl.n	801493c <__pow5mult+0x84>
 8014926:	4631      	mov	r1, r6
 8014928:	4622      	mov	r2, r4
 801492a:	4638      	mov	r0, r7
 801492c:	f7ff ff1a 	bl	8014764 <__multiply>
 8014930:	4631      	mov	r1, r6
 8014932:	4680      	mov	r8, r0
 8014934:	4638      	mov	r0, r7
 8014936:	f7ff fe4b 	bl	80145d0 <_Bfree>
 801493a:	4646      	mov	r6, r8
 801493c:	106d      	asrs	r5, r5, #1
 801493e:	d00b      	beq.n	8014958 <__pow5mult+0xa0>
 8014940:	6820      	ldr	r0, [r4, #0]
 8014942:	b938      	cbnz	r0, 8014954 <__pow5mult+0x9c>
 8014944:	4622      	mov	r2, r4
 8014946:	4621      	mov	r1, r4
 8014948:	4638      	mov	r0, r7
 801494a:	f7ff ff0b 	bl	8014764 <__multiply>
 801494e:	6020      	str	r0, [r4, #0]
 8014950:	f8c0 9000 	str.w	r9, [r0]
 8014954:	4604      	mov	r4, r0
 8014956:	e7e4      	b.n	8014922 <__pow5mult+0x6a>
 8014958:	4630      	mov	r0, r6
 801495a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801495e:	bf00      	nop
 8014960:	08017b6c 	.word	0x08017b6c
 8014964:	08017a91 	.word	0x08017a91
 8014968:	08017b11 	.word	0x08017b11

0801496c <__lshift>:
 801496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014970:	460c      	mov	r4, r1
 8014972:	6849      	ldr	r1, [r1, #4]
 8014974:	6923      	ldr	r3, [r4, #16]
 8014976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801497a:	68a3      	ldr	r3, [r4, #8]
 801497c:	4607      	mov	r7, r0
 801497e:	4691      	mov	r9, r2
 8014980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014984:	f108 0601 	add.w	r6, r8, #1
 8014988:	42b3      	cmp	r3, r6
 801498a:	db0b      	blt.n	80149a4 <__lshift+0x38>
 801498c:	4638      	mov	r0, r7
 801498e:	f7ff fddf 	bl	8014550 <_Balloc>
 8014992:	4605      	mov	r5, r0
 8014994:	b948      	cbnz	r0, 80149aa <__lshift+0x3e>
 8014996:	4602      	mov	r2, r0
 8014998:	4b28      	ldr	r3, [pc, #160]	@ (8014a3c <__lshift+0xd0>)
 801499a:	4829      	ldr	r0, [pc, #164]	@ (8014a40 <__lshift+0xd4>)
 801499c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80149a0:	f000 fb84 	bl	80150ac <__assert_func>
 80149a4:	3101      	adds	r1, #1
 80149a6:	005b      	lsls	r3, r3, #1
 80149a8:	e7ee      	b.n	8014988 <__lshift+0x1c>
 80149aa:	2300      	movs	r3, #0
 80149ac:	f100 0114 	add.w	r1, r0, #20
 80149b0:	f100 0210 	add.w	r2, r0, #16
 80149b4:	4618      	mov	r0, r3
 80149b6:	4553      	cmp	r3, sl
 80149b8:	db33      	blt.n	8014a22 <__lshift+0xb6>
 80149ba:	6920      	ldr	r0, [r4, #16]
 80149bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80149c0:	f104 0314 	add.w	r3, r4, #20
 80149c4:	f019 091f 	ands.w	r9, r9, #31
 80149c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80149cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80149d0:	d02b      	beq.n	8014a2a <__lshift+0xbe>
 80149d2:	f1c9 0e20 	rsb	lr, r9, #32
 80149d6:	468a      	mov	sl, r1
 80149d8:	2200      	movs	r2, #0
 80149da:	6818      	ldr	r0, [r3, #0]
 80149dc:	fa00 f009 	lsl.w	r0, r0, r9
 80149e0:	4310      	orrs	r0, r2
 80149e2:	f84a 0b04 	str.w	r0, [sl], #4
 80149e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80149ea:	459c      	cmp	ip, r3
 80149ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80149f0:	d8f3      	bhi.n	80149da <__lshift+0x6e>
 80149f2:	ebac 0304 	sub.w	r3, ip, r4
 80149f6:	3b15      	subs	r3, #21
 80149f8:	f023 0303 	bic.w	r3, r3, #3
 80149fc:	3304      	adds	r3, #4
 80149fe:	f104 0015 	add.w	r0, r4, #21
 8014a02:	4584      	cmp	ip, r0
 8014a04:	bf38      	it	cc
 8014a06:	2304      	movcc	r3, #4
 8014a08:	50ca      	str	r2, [r1, r3]
 8014a0a:	b10a      	cbz	r2, 8014a10 <__lshift+0xa4>
 8014a0c:	f108 0602 	add.w	r6, r8, #2
 8014a10:	3e01      	subs	r6, #1
 8014a12:	4638      	mov	r0, r7
 8014a14:	612e      	str	r6, [r5, #16]
 8014a16:	4621      	mov	r1, r4
 8014a18:	f7ff fdda 	bl	80145d0 <_Bfree>
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8014a26:	3301      	adds	r3, #1
 8014a28:	e7c5      	b.n	80149b6 <__lshift+0x4a>
 8014a2a:	3904      	subs	r1, #4
 8014a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8014a34:	459c      	cmp	ip, r3
 8014a36:	d8f9      	bhi.n	8014a2c <__lshift+0xc0>
 8014a38:	e7ea      	b.n	8014a10 <__lshift+0xa4>
 8014a3a:	bf00      	nop
 8014a3c:	08017b00 	.word	0x08017b00
 8014a40:	08017b11 	.word	0x08017b11

08014a44 <__mcmp>:
 8014a44:	690a      	ldr	r2, [r1, #16]
 8014a46:	4603      	mov	r3, r0
 8014a48:	6900      	ldr	r0, [r0, #16]
 8014a4a:	1a80      	subs	r0, r0, r2
 8014a4c:	b530      	push	{r4, r5, lr}
 8014a4e:	d10e      	bne.n	8014a6e <__mcmp+0x2a>
 8014a50:	3314      	adds	r3, #20
 8014a52:	3114      	adds	r1, #20
 8014a54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014a58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014a5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014a60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014a64:	4295      	cmp	r5, r2
 8014a66:	d003      	beq.n	8014a70 <__mcmp+0x2c>
 8014a68:	d205      	bcs.n	8014a76 <__mcmp+0x32>
 8014a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a6e:	bd30      	pop	{r4, r5, pc}
 8014a70:	42a3      	cmp	r3, r4
 8014a72:	d3f3      	bcc.n	8014a5c <__mcmp+0x18>
 8014a74:	e7fb      	b.n	8014a6e <__mcmp+0x2a>
 8014a76:	2001      	movs	r0, #1
 8014a78:	e7f9      	b.n	8014a6e <__mcmp+0x2a>
	...

08014a7c <__mdiff>:
 8014a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a80:	4689      	mov	r9, r1
 8014a82:	4606      	mov	r6, r0
 8014a84:	4611      	mov	r1, r2
 8014a86:	4648      	mov	r0, r9
 8014a88:	4614      	mov	r4, r2
 8014a8a:	f7ff ffdb 	bl	8014a44 <__mcmp>
 8014a8e:	1e05      	subs	r5, r0, #0
 8014a90:	d112      	bne.n	8014ab8 <__mdiff+0x3c>
 8014a92:	4629      	mov	r1, r5
 8014a94:	4630      	mov	r0, r6
 8014a96:	f7ff fd5b 	bl	8014550 <_Balloc>
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	b928      	cbnz	r0, 8014aaa <__mdiff+0x2e>
 8014a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8014b9c <__mdiff+0x120>)
 8014aa0:	f240 2137 	movw	r1, #567	@ 0x237
 8014aa4:	483e      	ldr	r0, [pc, #248]	@ (8014ba0 <__mdiff+0x124>)
 8014aa6:	f000 fb01 	bl	80150ac <__assert_func>
 8014aaa:	2301      	movs	r3, #1
 8014aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014ab0:	4610      	mov	r0, r2
 8014ab2:	b003      	add	sp, #12
 8014ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ab8:	bfbc      	itt	lt
 8014aba:	464b      	movlt	r3, r9
 8014abc:	46a1      	movlt	r9, r4
 8014abe:	4630      	mov	r0, r6
 8014ac0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014ac4:	bfba      	itte	lt
 8014ac6:	461c      	movlt	r4, r3
 8014ac8:	2501      	movlt	r5, #1
 8014aca:	2500      	movge	r5, #0
 8014acc:	f7ff fd40 	bl	8014550 <_Balloc>
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	b918      	cbnz	r0, 8014adc <__mdiff+0x60>
 8014ad4:	4b31      	ldr	r3, [pc, #196]	@ (8014b9c <__mdiff+0x120>)
 8014ad6:	f240 2145 	movw	r1, #581	@ 0x245
 8014ada:	e7e3      	b.n	8014aa4 <__mdiff+0x28>
 8014adc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014ae0:	6926      	ldr	r6, [r4, #16]
 8014ae2:	60c5      	str	r5, [r0, #12]
 8014ae4:	f109 0310 	add.w	r3, r9, #16
 8014ae8:	f109 0514 	add.w	r5, r9, #20
 8014aec:	f104 0e14 	add.w	lr, r4, #20
 8014af0:	f100 0b14 	add.w	fp, r0, #20
 8014af4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014af8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014afc:	9301      	str	r3, [sp, #4]
 8014afe:	46d9      	mov	r9, fp
 8014b00:	f04f 0c00 	mov.w	ip, #0
 8014b04:	9b01      	ldr	r3, [sp, #4]
 8014b06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014b0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014b0e:	9301      	str	r3, [sp, #4]
 8014b10:	fa1f f38a 	uxth.w	r3, sl
 8014b14:	4619      	mov	r1, r3
 8014b16:	b283      	uxth	r3, r0
 8014b18:	1acb      	subs	r3, r1, r3
 8014b1a:	0c00      	lsrs	r0, r0, #16
 8014b1c:	4463      	add	r3, ip
 8014b1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014b22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014b2c:	4576      	cmp	r6, lr
 8014b2e:	f849 3b04 	str.w	r3, [r9], #4
 8014b32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014b36:	d8e5      	bhi.n	8014b04 <__mdiff+0x88>
 8014b38:	1b33      	subs	r3, r6, r4
 8014b3a:	3b15      	subs	r3, #21
 8014b3c:	f023 0303 	bic.w	r3, r3, #3
 8014b40:	3415      	adds	r4, #21
 8014b42:	3304      	adds	r3, #4
 8014b44:	42a6      	cmp	r6, r4
 8014b46:	bf38      	it	cc
 8014b48:	2304      	movcc	r3, #4
 8014b4a:	441d      	add	r5, r3
 8014b4c:	445b      	add	r3, fp
 8014b4e:	461e      	mov	r6, r3
 8014b50:	462c      	mov	r4, r5
 8014b52:	4544      	cmp	r4, r8
 8014b54:	d30e      	bcc.n	8014b74 <__mdiff+0xf8>
 8014b56:	f108 0103 	add.w	r1, r8, #3
 8014b5a:	1b49      	subs	r1, r1, r5
 8014b5c:	f021 0103 	bic.w	r1, r1, #3
 8014b60:	3d03      	subs	r5, #3
 8014b62:	45a8      	cmp	r8, r5
 8014b64:	bf38      	it	cc
 8014b66:	2100      	movcc	r1, #0
 8014b68:	440b      	add	r3, r1
 8014b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014b6e:	b191      	cbz	r1, 8014b96 <__mdiff+0x11a>
 8014b70:	6117      	str	r7, [r2, #16]
 8014b72:	e79d      	b.n	8014ab0 <__mdiff+0x34>
 8014b74:	f854 1b04 	ldr.w	r1, [r4], #4
 8014b78:	46e6      	mov	lr, ip
 8014b7a:	0c08      	lsrs	r0, r1, #16
 8014b7c:	fa1c fc81 	uxtah	ip, ip, r1
 8014b80:	4471      	add	r1, lr
 8014b82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014b86:	b289      	uxth	r1, r1
 8014b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014b8c:	f846 1b04 	str.w	r1, [r6], #4
 8014b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014b94:	e7dd      	b.n	8014b52 <__mdiff+0xd6>
 8014b96:	3f01      	subs	r7, #1
 8014b98:	e7e7      	b.n	8014b6a <__mdiff+0xee>
 8014b9a:	bf00      	nop
 8014b9c:	08017b00 	.word	0x08017b00
 8014ba0:	08017b11 	.word	0x08017b11

08014ba4 <__d2b>:
 8014ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ba8:	460f      	mov	r7, r1
 8014baa:	2101      	movs	r1, #1
 8014bac:	ec59 8b10 	vmov	r8, r9, d0
 8014bb0:	4616      	mov	r6, r2
 8014bb2:	f7ff fccd 	bl	8014550 <_Balloc>
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	b930      	cbnz	r0, 8014bc8 <__d2b+0x24>
 8014bba:	4602      	mov	r2, r0
 8014bbc:	4b23      	ldr	r3, [pc, #140]	@ (8014c4c <__d2b+0xa8>)
 8014bbe:	4824      	ldr	r0, [pc, #144]	@ (8014c50 <__d2b+0xac>)
 8014bc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8014bc4:	f000 fa72 	bl	80150ac <__assert_func>
 8014bc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014bcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014bd0:	b10d      	cbz	r5, 8014bd6 <__d2b+0x32>
 8014bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014bd6:	9301      	str	r3, [sp, #4]
 8014bd8:	f1b8 0300 	subs.w	r3, r8, #0
 8014bdc:	d023      	beq.n	8014c26 <__d2b+0x82>
 8014bde:	4668      	mov	r0, sp
 8014be0:	9300      	str	r3, [sp, #0]
 8014be2:	f7ff fd7c 	bl	80146de <__lo0bits>
 8014be6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014bea:	b1d0      	cbz	r0, 8014c22 <__d2b+0x7e>
 8014bec:	f1c0 0320 	rsb	r3, r0, #32
 8014bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8014bf4:	430b      	orrs	r3, r1
 8014bf6:	40c2      	lsrs	r2, r0
 8014bf8:	6163      	str	r3, [r4, #20]
 8014bfa:	9201      	str	r2, [sp, #4]
 8014bfc:	9b01      	ldr	r3, [sp, #4]
 8014bfe:	61a3      	str	r3, [r4, #24]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	bf0c      	ite	eq
 8014c04:	2201      	moveq	r2, #1
 8014c06:	2202      	movne	r2, #2
 8014c08:	6122      	str	r2, [r4, #16]
 8014c0a:	b1a5      	cbz	r5, 8014c36 <__d2b+0x92>
 8014c0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014c10:	4405      	add	r5, r0
 8014c12:	603d      	str	r5, [r7, #0]
 8014c14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014c18:	6030      	str	r0, [r6, #0]
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	b003      	add	sp, #12
 8014c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c22:	6161      	str	r1, [r4, #20]
 8014c24:	e7ea      	b.n	8014bfc <__d2b+0x58>
 8014c26:	a801      	add	r0, sp, #4
 8014c28:	f7ff fd59 	bl	80146de <__lo0bits>
 8014c2c:	9b01      	ldr	r3, [sp, #4]
 8014c2e:	6163      	str	r3, [r4, #20]
 8014c30:	3020      	adds	r0, #32
 8014c32:	2201      	movs	r2, #1
 8014c34:	e7e8      	b.n	8014c08 <__d2b+0x64>
 8014c36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014c3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014c3e:	6038      	str	r0, [r7, #0]
 8014c40:	6918      	ldr	r0, [r3, #16]
 8014c42:	f7ff fd2d 	bl	80146a0 <__hi0bits>
 8014c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014c4a:	e7e5      	b.n	8014c18 <__d2b+0x74>
 8014c4c:	08017b00 	.word	0x08017b00
 8014c50:	08017b11 	.word	0x08017b11

08014c54 <__ssputs_r>:
 8014c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c58:	688e      	ldr	r6, [r1, #8]
 8014c5a:	461f      	mov	r7, r3
 8014c5c:	42be      	cmp	r6, r7
 8014c5e:	680b      	ldr	r3, [r1, #0]
 8014c60:	4682      	mov	sl, r0
 8014c62:	460c      	mov	r4, r1
 8014c64:	4690      	mov	r8, r2
 8014c66:	d82d      	bhi.n	8014cc4 <__ssputs_r+0x70>
 8014c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014c70:	d026      	beq.n	8014cc0 <__ssputs_r+0x6c>
 8014c72:	6965      	ldr	r5, [r4, #20]
 8014c74:	6909      	ldr	r1, [r1, #16]
 8014c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c7a:	eba3 0901 	sub.w	r9, r3, r1
 8014c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014c82:	1c7b      	adds	r3, r7, #1
 8014c84:	444b      	add	r3, r9
 8014c86:	106d      	asrs	r5, r5, #1
 8014c88:	429d      	cmp	r5, r3
 8014c8a:	bf38      	it	cc
 8014c8c:	461d      	movcc	r5, r3
 8014c8e:	0553      	lsls	r3, r2, #21
 8014c90:	d527      	bpl.n	8014ce2 <__ssputs_r+0x8e>
 8014c92:	4629      	mov	r1, r5
 8014c94:	f7fd ffc2 	bl	8012c1c <_malloc_r>
 8014c98:	4606      	mov	r6, r0
 8014c9a:	b360      	cbz	r0, 8014cf6 <__ssputs_r+0xa2>
 8014c9c:	6921      	ldr	r1, [r4, #16]
 8014c9e:	464a      	mov	r2, r9
 8014ca0:	f000 f9f6 	bl	8015090 <memcpy>
 8014ca4:	89a3      	ldrh	r3, [r4, #12]
 8014ca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014cae:	81a3      	strh	r3, [r4, #12]
 8014cb0:	6126      	str	r6, [r4, #16]
 8014cb2:	6165      	str	r5, [r4, #20]
 8014cb4:	444e      	add	r6, r9
 8014cb6:	eba5 0509 	sub.w	r5, r5, r9
 8014cba:	6026      	str	r6, [r4, #0]
 8014cbc:	60a5      	str	r5, [r4, #8]
 8014cbe:	463e      	mov	r6, r7
 8014cc0:	42be      	cmp	r6, r7
 8014cc2:	d900      	bls.n	8014cc6 <__ssputs_r+0x72>
 8014cc4:	463e      	mov	r6, r7
 8014cc6:	6820      	ldr	r0, [r4, #0]
 8014cc8:	4632      	mov	r2, r6
 8014cca:	4641      	mov	r1, r8
 8014ccc:	f000 f9c6 	bl	801505c <memmove>
 8014cd0:	68a3      	ldr	r3, [r4, #8]
 8014cd2:	1b9b      	subs	r3, r3, r6
 8014cd4:	60a3      	str	r3, [r4, #8]
 8014cd6:	6823      	ldr	r3, [r4, #0]
 8014cd8:	4433      	add	r3, r6
 8014cda:	6023      	str	r3, [r4, #0]
 8014cdc:	2000      	movs	r0, #0
 8014cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ce2:	462a      	mov	r2, r5
 8014ce4:	f000 fa26 	bl	8015134 <_realloc_r>
 8014ce8:	4606      	mov	r6, r0
 8014cea:	2800      	cmp	r0, #0
 8014cec:	d1e0      	bne.n	8014cb0 <__ssputs_r+0x5c>
 8014cee:	6921      	ldr	r1, [r4, #16]
 8014cf0:	4650      	mov	r0, sl
 8014cf2:	f7ff fbe3 	bl	80144bc <_free_r>
 8014cf6:	230c      	movs	r3, #12
 8014cf8:	f8ca 3000 	str.w	r3, [sl]
 8014cfc:	89a3      	ldrh	r3, [r4, #12]
 8014cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d02:	81a3      	strh	r3, [r4, #12]
 8014d04:	f04f 30ff 	mov.w	r0, #4294967295
 8014d08:	e7e9      	b.n	8014cde <__ssputs_r+0x8a>
	...

08014d0c <_svfiprintf_r>:
 8014d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d10:	4698      	mov	r8, r3
 8014d12:	898b      	ldrh	r3, [r1, #12]
 8014d14:	061b      	lsls	r3, r3, #24
 8014d16:	b09d      	sub	sp, #116	@ 0x74
 8014d18:	4607      	mov	r7, r0
 8014d1a:	460d      	mov	r5, r1
 8014d1c:	4614      	mov	r4, r2
 8014d1e:	d510      	bpl.n	8014d42 <_svfiprintf_r+0x36>
 8014d20:	690b      	ldr	r3, [r1, #16]
 8014d22:	b973      	cbnz	r3, 8014d42 <_svfiprintf_r+0x36>
 8014d24:	2140      	movs	r1, #64	@ 0x40
 8014d26:	f7fd ff79 	bl	8012c1c <_malloc_r>
 8014d2a:	6028      	str	r0, [r5, #0]
 8014d2c:	6128      	str	r0, [r5, #16]
 8014d2e:	b930      	cbnz	r0, 8014d3e <_svfiprintf_r+0x32>
 8014d30:	230c      	movs	r3, #12
 8014d32:	603b      	str	r3, [r7, #0]
 8014d34:	f04f 30ff 	mov.w	r0, #4294967295
 8014d38:	b01d      	add	sp, #116	@ 0x74
 8014d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d3e:	2340      	movs	r3, #64	@ 0x40
 8014d40:	616b      	str	r3, [r5, #20]
 8014d42:	2300      	movs	r3, #0
 8014d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d46:	2320      	movs	r3, #32
 8014d48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d50:	2330      	movs	r3, #48	@ 0x30
 8014d52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014ef0 <_svfiprintf_r+0x1e4>
 8014d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014d5a:	f04f 0901 	mov.w	r9, #1
 8014d5e:	4623      	mov	r3, r4
 8014d60:	469a      	mov	sl, r3
 8014d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d66:	b10a      	cbz	r2, 8014d6c <_svfiprintf_r+0x60>
 8014d68:	2a25      	cmp	r2, #37	@ 0x25
 8014d6a:	d1f9      	bne.n	8014d60 <_svfiprintf_r+0x54>
 8014d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8014d70:	d00b      	beq.n	8014d8a <_svfiprintf_r+0x7e>
 8014d72:	465b      	mov	r3, fp
 8014d74:	4622      	mov	r2, r4
 8014d76:	4629      	mov	r1, r5
 8014d78:	4638      	mov	r0, r7
 8014d7a:	f7ff ff6b 	bl	8014c54 <__ssputs_r>
 8014d7e:	3001      	adds	r0, #1
 8014d80:	f000 80a7 	beq.w	8014ed2 <_svfiprintf_r+0x1c6>
 8014d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d86:	445a      	add	r2, fp
 8014d88:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	f000 809f 	beq.w	8014ed2 <_svfiprintf_r+0x1c6>
 8014d94:	2300      	movs	r3, #0
 8014d96:	f04f 32ff 	mov.w	r2, #4294967295
 8014d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d9e:	f10a 0a01 	add.w	sl, sl, #1
 8014da2:	9304      	str	r3, [sp, #16]
 8014da4:	9307      	str	r3, [sp, #28]
 8014da6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014daa:	931a      	str	r3, [sp, #104]	@ 0x68
 8014dac:	4654      	mov	r4, sl
 8014dae:	2205      	movs	r2, #5
 8014db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014db4:	484e      	ldr	r0, [pc, #312]	@ (8014ef0 <_svfiprintf_r+0x1e4>)
 8014db6:	f7eb fa93 	bl	80002e0 <memchr>
 8014dba:	9a04      	ldr	r2, [sp, #16]
 8014dbc:	b9d8      	cbnz	r0, 8014df6 <_svfiprintf_r+0xea>
 8014dbe:	06d0      	lsls	r0, r2, #27
 8014dc0:	bf44      	itt	mi
 8014dc2:	2320      	movmi	r3, #32
 8014dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dc8:	0711      	lsls	r1, r2, #28
 8014dca:	bf44      	itt	mi
 8014dcc:	232b      	movmi	r3, #43	@ 0x2b
 8014dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8014dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014dd8:	d015      	beq.n	8014e06 <_svfiprintf_r+0xfa>
 8014dda:	9a07      	ldr	r2, [sp, #28]
 8014ddc:	4654      	mov	r4, sl
 8014dde:	2000      	movs	r0, #0
 8014de0:	f04f 0c0a 	mov.w	ip, #10
 8014de4:	4621      	mov	r1, r4
 8014de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014dea:	3b30      	subs	r3, #48	@ 0x30
 8014dec:	2b09      	cmp	r3, #9
 8014dee:	d94b      	bls.n	8014e88 <_svfiprintf_r+0x17c>
 8014df0:	b1b0      	cbz	r0, 8014e20 <_svfiprintf_r+0x114>
 8014df2:	9207      	str	r2, [sp, #28]
 8014df4:	e014      	b.n	8014e20 <_svfiprintf_r+0x114>
 8014df6:	eba0 0308 	sub.w	r3, r0, r8
 8014dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8014dfe:	4313      	orrs	r3, r2
 8014e00:	9304      	str	r3, [sp, #16]
 8014e02:	46a2      	mov	sl, r4
 8014e04:	e7d2      	b.n	8014dac <_svfiprintf_r+0xa0>
 8014e06:	9b03      	ldr	r3, [sp, #12]
 8014e08:	1d19      	adds	r1, r3, #4
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	9103      	str	r1, [sp, #12]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	bfbb      	ittet	lt
 8014e12:	425b      	neglt	r3, r3
 8014e14:	f042 0202 	orrlt.w	r2, r2, #2
 8014e18:	9307      	strge	r3, [sp, #28]
 8014e1a:	9307      	strlt	r3, [sp, #28]
 8014e1c:	bfb8      	it	lt
 8014e1e:	9204      	strlt	r2, [sp, #16]
 8014e20:	7823      	ldrb	r3, [r4, #0]
 8014e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e24:	d10a      	bne.n	8014e3c <_svfiprintf_r+0x130>
 8014e26:	7863      	ldrb	r3, [r4, #1]
 8014e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e2a:	d132      	bne.n	8014e92 <_svfiprintf_r+0x186>
 8014e2c:	9b03      	ldr	r3, [sp, #12]
 8014e2e:	1d1a      	adds	r2, r3, #4
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	9203      	str	r2, [sp, #12]
 8014e34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014e38:	3402      	adds	r4, #2
 8014e3a:	9305      	str	r3, [sp, #20]
 8014e3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014f00 <_svfiprintf_r+0x1f4>
 8014e40:	7821      	ldrb	r1, [r4, #0]
 8014e42:	2203      	movs	r2, #3
 8014e44:	4650      	mov	r0, sl
 8014e46:	f7eb fa4b 	bl	80002e0 <memchr>
 8014e4a:	b138      	cbz	r0, 8014e5c <_svfiprintf_r+0x150>
 8014e4c:	9b04      	ldr	r3, [sp, #16]
 8014e4e:	eba0 000a 	sub.w	r0, r0, sl
 8014e52:	2240      	movs	r2, #64	@ 0x40
 8014e54:	4082      	lsls	r2, r0
 8014e56:	4313      	orrs	r3, r2
 8014e58:	3401      	adds	r4, #1
 8014e5a:	9304      	str	r3, [sp, #16]
 8014e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e60:	4824      	ldr	r0, [pc, #144]	@ (8014ef4 <_svfiprintf_r+0x1e8>)
 8014e62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014e66:	2206      	movs	r2, #6
 8014e68:	f7eb fa3a 	bl	80002e0 <memchr>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	d036      	beq.n	8014ede <_svfiprintf_r+0x1d2>
 8014e70:	4b21      	ldr	r3, [pc, #132]	@ (8014ef8 <_svfiprintf_r+0x1ec>)
 8014e72:	bb1b      	cbnz	r3, 8014ebc <_svfiprintf_r+0x1b0>
 8014e74:	9b03      	ldr	r3, [sp, #12]
 8014e76:	3307      	adds	r3, #7
 8014e78:	f023 0307 	bic.w	r3, r3, #7
 8014e7c:	3308      	adds	r3, #8
 8014e7e:	9303      	str	r3, [sp, #12]
 8014e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e82:	4433      	add	r3, r6
 8014e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e86:	e76a      	b.n	8014d5e <_svfiprintf_r+0x52>
 8014e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e8c:	460c      	mov	r4, r1
 8014e8e:	2001      	movs	r0, #1
 8014e90:	e7a8      	b.n	8014de4 <_svfiprintf_r+0xd8>
 8014e92:	2300      	movs	r3, #0
 8014e94:	3401      	adds	r4, #1
 8014e96:	9305      	str	r3, [sp, #20]
 8014e98:	4619      	mov	r1, r3
 8014e9a:	f04f 0c0a 	mov.w	ip, #10
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ea4:	3a30      	subs	r2, #48	@ 0x30
 8014ea6:	2a09      	cmp	r2, #9
 8014ea8:	d903      	bls.n	8014eb2 <_svfiprintf_r+0x1a6>
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d0c6      	beq.n	8014e3c <_svfiprintf_r+0x130>
 8014eae:	9105      	str	r1, [sp, #20]
 8014eb0:	e7c4      	b.n	8014e3c <_svfiprintf_r+0x130>
 8014eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8014eb6:	4604      	mov	r4, r0
 8014eb8:	2301      	movs	r3, #1
 8014eba:	e7f0      	b.n	8014e9e <_svfiprintf_r+0x192>
 8014ebc:	ab03      	add	r3, sp, #12
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	462a      	mov	r2, r5
 8014ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8014efc <_svfiprintf_r+0x1f0>)
 8014ec4:	a904      	add	r1, sp, #16
 8014ec6:	4638      	mov	r0, r7
 8014ec8:	f7fd ffc2 	bl	8012e50 <_printf_float>
 8014ecc:	1c42      	adds	r2, r0, #1
 8014ece:	4606      	mov	r6, r0
 8014ed0:	d1d6      	bne.n	8014e80 <_svfiprintf_r+0x174>
 8014ed2:	89ab      	ldrh	r3, [r5, #12]
 8014ed4:	065b      	lsls	r3, r3, #25
 8014ed6:	f53f af2d 	bmi.w	8014d34 <_svfiprintf_r+0x28>
 8014eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014edc:	e72c      	b.n	8014d38 <_svfiprintf_r+0x2c>
 8014ede:	ab03      	add	r3, sp, #12
 8014ee0:	9300      	str	r3, [sp, #0]
 8014ee2:	462a      	mov	r2, r5
 8014ee4:	4b05      	ldr	r3, [pc, #20]	@ (8014efc <_svfiprintf_r+0x1f0>)
 8014ee6:	a904      	add	r1, sp, #16
 8014ee8:	4638      	mov	r0, r7
 8014eea:	f7fe fa39 	bl	8013360 <_printf_i>
 8014eee:	e7ed      	b.n	8014ecc <_svfiprintf_r+0x1c0>
 8014ef0:	08017c68 	.word	0x08017c68
 8014ef4:	08017c72 	.word	0x08017c72
 8014ef8:	08012e51 	.word	0x08012e51
 8014efc:	08014c55 	.word	0x08014c55
 8014f00:	08017c6e 	.word	0x08017c6e

08014f04 <__sflush_r>:
 8014f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f0c:	0716      	lsls	r6, r2, #28
 8014f0e:	4605      	mov	r5, r0
 8014f10:	460c      	mov	r4, r1
 8014f12:	d454      	bmi.n	8014fbe <__sflush_r+0xba>
 8014f14:	684b      	ldr	r3, [r1, #4]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	dc02      	bgt.n	8014f20 <__sflush_r+0x1c>
 8014f1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	dd48      	ble.n	8014fb2 <__sflush_r+0xae>
 8014f20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014f22:	2e00      	cmp	r6, #0
 8014f24:	d045      	beq.n	8014fb2 <__sflush_r+0xae>
 8014f26:	2300      	movs	r3, #0
 8014f28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014f2c:	682f      	ldr	r7, [r5, #0]
 8014f2e:	6a21      	ldr	r1, [r4, #32]
 8014f30:	602b      	str	r3, [r5, #0]
 8014f32:	d030      	beq.n	8014f96 <__sflush_r+0x92>
 8014f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014f36:	89a3      	ldrh	r3, [r4, #12]
 8014f38:	0759      	lsls	r1, r3, #29
 8014f3a:	d505      	bpl.n	8014f48 <__sflush_r+0x44>
 8014f3c:	6863      	ldr	r3, [r4, #4]
 8014f3e:	1ad2      	subs	r2, r2, r3
 8014f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014f42:	b10b      	cbz	r3, 8014f48 <__sflush_r+0x44>
 8014f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014f46:	1ad2      	subs	r2, r2, r3
 8014f48:	2300      	movs	r3, #0
 8014f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014f4c:	6a21      	ldr	r1, [r4, #32]
 8014f4e:	4628      	mov	r0, r5
 8014f50:	47b0      	blx	r6
 8014f52:	1c43      	adds	r3, r0, #1
 8014f54:	89a3      	ldrh	r3, [r4, #12]
 8014f56:	d106      	bne.n	8014f66 <__sflush_r+0x62>
 8014f58:	6829      	ldr	r1, [r5, #0]
 8014f5a:	291d      	cmp	r1, #29
 8014f5c:	d82b      	bhi.n	8014fb6 <__sflush_r+0xb2>
 8014f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8015008 <__sflush_r+0x104>)
 8014f60:	410a      	asrs	r2, r1
 8014f62:	07d6      	lsls	r6, r2, #31
 8014f64:	d427      	bmi.n	8014fb6 <__sflush_r+0xb2>
 8014f66:	2200      	movs	r2, #0
 8014f68:	6062      	str	r2, [r4, #4]
 8014f6a:	04d9      	lsls	r1, r3, #19
 8014f6c:	6922      	ldr	r2, [r4, #16]
 8014f6e:	6022      	str	r2, [r4, #0]
 8014f70:	d504      	bpl.n	8014f7c <__sflush_r+0x78>
 8014f72:	1c42      	adds	r2, r0, #1
 8014f74:	d101      	bne.n	8014f7a <__sflush_r+0x76>
 8014f76:	682b      	ldr	r3, [r5, #0]
 8014f78:	b903      	cbnz	r3, 8014f7c <__sflush_r+0x78>
 8014f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014f7e:	602f      	str	r7, [r5, #0]
 8014f80:	b1b9      	cbz	r1, 8014fb2 <__sflush_r+0xae>
 8014f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014f86:	4299      	cmp	r1, r3
 8014f88:	d002      	beq.n	8014f90 <__sflush_r+0x8c>
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	f7ff fa96 	bl	80144bc <_free_r>
 8014f90:	2300      	movs	r3, #0
 8014f92:	6363      	str	r3, [r4, #52]	@ 0x34
 8014f94:	e00d      	b.n	8014fb2 <__sflush_r+0xae>
 8014f96:	2301      	movs	r3, #1
 8014f98:	4628      	mov	r0, r5
 8014f9a:	47b0      	blx	r6
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	1c50      	adds	r0, r2, #1
 8014fa0:	d1c9      	bne.n	8014f36 <__sflush_r+0x32>
 8014fa2:	682b      	ldr	r3, [r5, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d0c6      	beq.n	8014f36 <__sflush_r+0x32>
 8014fa8:	2b1d      	cmp	r3, #29
 8014faa:	d001      	beq.n	8014fb0 <__sflush_r+0xac>
 8014fac:	2b16      	cmp	r3, #22
 8014fae:	d11e      	bne.n	8014fee <__sflush_r+0xea>
 8014fb0:	602f      	str	r7, [r5, #0]
 8014fb2:	2000      	movs	r0, #0
 8014fb4:	e022      	b.n	8014ffc <__sflush_r+0xf8>
 8014fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014fba:	b21b      	sxth	r3, r3
 8014fbc:	e01b      	b.n	8014ff6 <__sflush_r+0xf2>
 8014fbe:	690f      	ldr	r7, [r1, #16]
 8014fc0:	2f00      	cmp	r7, #0
 8014fc2:	d0f6      	beq.n	8014fb2 <__sflush_r+0xae>
 8014fc4:	0793      	lsls	r3, r2, #30
 8014fc6:	680e      	ldr	r6, [r1, #0]
 8014fc8:	bf08      	it	eq
 8014fca:	694b      	ldreq	r3, [r1, #20]
 8014fcc:	600f      	str	r7, [r1, #0]
 8014fce:	bf18      	it	ne
 8014fd0:	2300      	movne	r3, #0
 8014fd2:	eba6 0807 	sub.w	r8, r6, r7
 8014fd6:	608b      	str	r3, [r1, #8]
 8014fd8:	f1b8 0f00 	cmp.w	r8, #0
 8014fdc:	dde9      	ble.n	8014fb2 <__sflush_r+0xae>
 8014fde:	6a21      	ldr	r1, [r4, #32]
 8014fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014fe2:	4643      	mov	r3, r8
 8014fe4:	463a      	mov	r2, r7
 8014fe6:	4628      	mov	r0, r5
 8014fe8:	47b0      	blx	r6
 8014fea:	2800      	cmp	r0, #0
 8014fec:	dc08      	bgt.n	8015000 <__sflush_r+0xfc>
 8014fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ff6:	81a3      	strh	r3, [r4, #12]
 8014ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8014ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015000:	4407      	add	r7, r0
 8015002:	eba8 0800 	sub.w	r8, r8, r0
 8015006:	e7e7      	b.n	8014fd8 <__sflush_r+0xd4>
 8015008:	dfbffffe 	.word	0xdfbffffe

0801500c <_fflush_r>:
 801500c:	b538      	push	{r3, r4, r5, lr}
 801500e:	690b      	ldr	r3, [r1, #16]
 8015010:	4605      	mov	r5, r0
 8015012:	460c      	mov	r4, r1
 8015014:	b913      	cbnz	r3, 801501c <_fflush_r+0x10>
 8015016:	2500      	movs	r5, #0
 8015018:	4628      	mov	r0, r5
 801501a:	bd38      	pop	{r3, r4, r5, pc}
 801501c:	b118      	cbz	r0, 8015026 <_fflush_r+0x1a>
 801501e:	6a03      	ldr	r3, [r0, #32]
 8015020:	b90b      	cbnz	r3, 8015026 <_fflush_r+0x1a>
 8015022:	f7fe fb49 	bl	80136b8 <__sinit>
 8015026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d0f3      	beq.n	8015016 <_fflush_r+0xa>
 801502e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015030:	07d0      	lsls	r0, r2, #31
 8015032:	d404      	bmi.n	801503e <_fflush_r+0x32>
 8015034:	0599      	lsls	r1, r3, #22
 8015036:	d402      	bmi.n	801503e <_fflush_r+0x32>
 8015038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801503a:	f7fe fc5e 	bl	80138fa <__retarget_lock_acquire_recursive>
 801503e:	4628      	mov	r0, r5
 8015040:	4621      	mov	r1, r4
 8015042:	f7ff ff5f 	bl	8014f04 <__sflush_r>
 8015046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015048:	07da      	lsls	r2, r3, #31
 801504a:	4605      	mov	r5, r0
 801504c:	d4e4      	bmi.n	8015018 <_fflush_r+0xc>
 801504e:	89a3      	ldrh	r3, [r4, #12]
 8015050:	059b      	lsls	r3, r3, #22
 8015052:	d4e1      	bmi.n	8015018 <_fflush_r+0xc>
 8015054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015056:	f7fe fc51 	bl	80138fc <__retarget_lock_release_recursive>
 801505a:	e7dd      	b.n	8015018 <_fflush_r+0xc>

0801505c <memmove>:
 801505c:	4288      	cmp	r0, r1
 801505e:	b510      	push	{r4, lr}
 8015060:	eb01 0402 	add.w	r4, r1, r2
 8015064:	d902      	bls.n	801506c <memmove+0x10>
 8015066:	4284      	cmp	r4, r0
 8015068:	4623      	mov	r3, r4
 801506a:	d807      	bhi.n	801507c <memmove+0x20>
 801506c:	1e43      	subs	r3, r0, #1
 801506e:	42a1      	cmp	r1, r4
 8015070:	d008      	beq.n	8015084 <memmove+0x28>
 8015072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015076:	f803 2f01 	strb.w	r2, [r3, #1]!
 801507a:	e7f8      	b.n	801506e <memmove+0x12>
 801507c:	4402      	add	r2, r0
 801507e:	4601      	mov	r1, r0
 8015080:	428a      	cmp	r2, r1
 8015082:	d100      	bne.n	8015086 <memmove+0x2a>
 8015084:	bd10      	pop	{r4, pc}
 8015086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801508a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801508e:	e7f7      	b.n	8015080 <memmove+0x24>

08015090 <memcpy>:
 8015090:	440a      	add	r2, r1
 8015092:	4291      	cmp	r1, r2
 8015094:	f100 33ff 	add.w	r3, r0, #4294967295
 8015098:	d100      	bne.n	801509c <memcpy+0xc>
 801509a:	4770      	bx	lr
 801509c:	b510      	push	{r4, lr}
 801509e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80150a6:	4291      	cmp	r1, r2
 80150a8:	d1f9      	bne.n	801509e <memcpy+0xe>
 80150aa:	bd10      	pop	{r4, pc}

080150ac <__assert_func>:
 80150ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150ae:	4614      	mov	r4, r2
 80150b0:	461a      	mov	r2, r3
 80150b2:	4b09      	ldr	r3, [pc, #36]	@ (80150d8 <__assert_func+0x2c>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	4605      	mov	r5, r0
 80150b8:	68d8      	ldr	r0, [r3, #12]
 80150ba:	b954      	cbnz	r4, 80150d2 <__assert_func+0x26>
 80150bc:	4b07      	ldr	r3, [pc, #28]	@ (80150dc <__assert_func+0x30>)
 80150be:	461c      	mov	r4, r3
 80150c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80150c4:	9100      	str	r1, [sp, #0]
 80150c6:	462b      	mov	r3, r5
 80150c8:	4905      	ldr	r1, [pc, #20]	@ (80150e0 <__assert_func+0x34>)
 80150ca:	f000 f86f 	bl	80151ac <fiprintf>
 80150ce:	f000 f87f 	bl	80151d0 <abort>
 80150d2:	4b04      	ldr	r3, [pc, #16]	@ (80150e4 <__assert_func+0x38>)
 80150d4:	e7f4      	b.n	80150c0 <__assert_func+0x14>
 80150d6:	bf00      	nop
 80150d8:	24000114 	.word	0x24000114
 80150dc:	08017cbe 	.word	0x08017cbe
 80150e0:	08017c90 	.word	0x08017c90
 80150e4:	08017c83 	.word	0x08017c83

080150e8 <_calloc_r>:
 80150e8:	b570      	push	{r4, r5, r6, lr}
 80150ea:	fba1 5402 	umull	r5, r4, r1, r2
 80150ee:	b93c      	cbnz	r4, 8015100 <_calloc_r+0x18>
 80150f0:	4629      	mov	r1, r5
 80150f2:	f7fd fd93 	bl	8012c1c <_malloc_r>
 80150f6:	4606      	mov	r6, r0
 80150f8:	b928      	cbnz	r0, 8015106 <_calloc_r+0x1e>
 80150fa:	2600      	movs	r6, #0
 80150fc:	4630      	mov	r0, r6
 80150fe:	bd70      	pop	{r4, r5, r6, pc}
 8015100:	220c      	movs	r2, #12
 8015102:	6002      	str	r2, [r0, #0]
 8015104:	e7f9      	b.n	80150fa <_calloc_r+0x12>
 8015106:	462a      	mov	r2, r5
 8015108:	4621      	mov	r1, r4
 801510a:	f7fe fb6e 	bl	80137ea <memset>
 801510e:	e7f5      	b.n	80150fc <_calloc_r+0x14>

08015110 <__ascii_mbtowc>:
 8015110:	b082      	sub	sp, #8
 8015112:	b901      	cbnz	r1, 8015116 <__ascii_mbtowc+0x6>
 8015114:	a901      	add	r1, sp, #4
 8015116:	b142      	cbz	r2, 801512a <__ascii_mbtowc+0x1a>
 8015118:	b14b      	cbz	r3, 801512e <__ascii_mbtowc+0x1e>
 801511a:	7813      	ldrb	r3, [r2, #0]
 801511c:	600b      	str	r3, [r1, #0]
 801511e:	7812      	ldrb	r2, [r2, #0]
 8015120:	1e10      	subs	r0, r2, #0
 8015122:	bf18      	it	ne
 8015124:	2001      	movne	r0, #1
 8015126:	b002      	add	sp, #8
 8015128:	4770      	bx	lr
 801512a:	4610      	mov	r0, r2
 801512c:	e7fb      	b.n	8015126 <__ascii_mbtowc+0x16>
 801512e:	f06f 0001 	mvn.w	r0, #1
 8015132:	e7f8      	b.n	8015126 <__ascii_mbtowc+0x16>

08015134 <_realloc_r>:
 8015134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015138:	4680      	mov	r8, r0
 801513a:	4615      	mov	r5, r2
 801513c:	460c      	mov	r4, r1
 801513e:	b921      	cbnz	r1, 801514a <_realloc_r+0x16>
 8015140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015144:	4611      	mov	r1, r2
 8015146:	f7fd bd69 	b.w	8012c1c <_malloc_r>
 801514a:	b92a      	cbnz	r2, 8015158 <_realloc_r+0x24>
 801514c:	f7ff f9b6 	bl	80144bc <_free_r>
 8015150:	2400      	movs	r4, #0
 8015152:	4620      	mov	r0, r4
 8015154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015158:	f000 f841 	bl	80151de <_malloc_usable_size_r>
 801515c:	4285      	cmp	r5, r0
 801515e:	4606      	mov	r6, r0
 8015160:	d802      	bhi.n	8015168 <_realloc_r+0x34>
 8015162:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015166:	d8f4      	bhi.n	8015152 <_realloc_r+0x1e>
 8015168:	4629      	mov	r1, r5
 801516a:	4640      	mov	r0, r8
 801516c:	f7fd fd56 	bl	8012c1c <_malloc_r>
 8015170:	4607      	mov	r7, r0
 8015172:	2800      	cmp	r0, #0
 8015174:	d0ec      	beq.n	8015150 <_realloc_r+0x1c>
 8015176:	42b5      	cmp	r5, r6
 8015178:	462a      	mov	r2, r5
 801517a:	4621      	mov	r1, r4
 801517c:	bf28      	it	cs
 801517e:	4632      	movcs	r2, r6
 8015180:	f7ff ff86 	bl	8015090 <memcpy>
 8015184:	4621      	mov	r1, r4
 8015186:	4640      	mov	r0, r8
 8015188:	f7ff f998 	bl	80144bc <_free_r>
 801518c:	463c      	mov	r4, r7
 801518e:	e7e0      	b.n	8015152 <_realloc_r+0x1e>

08015190 <__ascii_wctomb>:
 8015190:	4603      	mov	r3, r0
 8015192:	4608      	mov	r0, r1
 8015194:	b141      	cbz	r1, 80151a8 <__ascii_wctomb+0x18>
 8015196:	2aff      	cmp	r2, #255	@ 0xff
 8015198:	d904      	bls.n	80151a4 <__ascii_wctomb+0x14>
 801519a:	228a      	movs	r2, #138	@ 0x8a
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	f04f 30ff 	mov.w	r0, #4294967295
 80151a2:	4770      	bx	lr
 80151a4:	700a      	strb	r2, [r1, #0]
 80151a6:	2001      	movs	r0, #1
 80151a8:	4770      	bx	lr
	...

080151ac <fiprintf>:
 80151ac:	b40e      	push	{r1, r2, r3}
 80151ae:	b503      	push	{r0, r1, lr}
 80151b0:	4601      	mov	r1, r0
 80151b2:	ab03      	add	r3, sp, #12
 80151b4:	4805      	ldr	r0, [pc, #20]	@ (80151cc <fiprintf+0x20>)
 80151b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ba:	6800      	ldr	r0, [r0, #0]
 80151bc:	9301      	str	r3, [sp, #4]
 80151be:	f000 f83f 	bl	8015240 <_vfiprintf_r>
 80151c2:	b002      	add	sp, #8
 80151c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80151c8:	b003      	add	sp, #12
 80151ca:	4770      	bx	lr
 80151cc:	24000114 	.word	0x24000114

080151d0 <abort>:
 80151d0:	b508      	push	{r3, lr}
 80151d2:	2006      	movs	r0, #6
 80151d4:	f000 fa08 	bl	80155e8 <raise>
 80151d8:	2001      	movs	r0, #1
 80151da:	f000 fbe9 	bl	80159b0 <_exit>

080151de <_malloc_usable_size_r>:
 80151de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151e2:	1f18      	subs	r0, r3, #4
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	bfbc      	itt	lt
 80151e8:	580b      	ldrlt	r3, [r1, r0]
 80151ea:	18c0      	addlt	r0, r0, r3
 80151ec:	4770      	bx	lr

080151ee <__sfputc_r>:
 80151ee:	6893      	ldr	r3, [r2, #8]
 80151f0:	3b01      	subs	r3, #1
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	b410      	push	{r4}
 80151f6:	6093      	str	r3, [r2, #8]
 80151f8:	da08      	bge.n	801520c <__sfputc_r+0x1e>
 80151fa:	6994      	ldr	r4, [r2, #24]
 80151fc:	42a3      	cmp	r3, r4
 80151fe:	db01      	blt.n	8015204 <__sfputc_r+0x16>
 8015200:	290a      	cmp	r1, #10
 8015202:	d103      	bne.n	801520c <__sfputc_r+0x1e>
 8015204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015208:	f000 b932 	b.w	8015470 <__swbuf_r>
 801520c:	6813      	ldr	r3, [r2, #0]
 801520e:	1c58      	adds	r0, r3, #1
 8015210:	6010      	str	r0, [r2, #0]
 8015212:	7019      	strb	r1, [r3, #0]
 8015214:	4608      	mov	r0, r1
 8015216:	f85d 4b04 	ldr.w	r4, [sp], #4
 801521a:	4770      	bx	lr

0801521c <__sfputs_r>:
 801521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801521e:	4606      	mov	r6, r0
 8015220:	460f      	mov	r7, r1
 8015222:	4614      	mov	r4, r2
 8015224:	18d5      	adds	r5, r2, r3
 8015226:	42ac      	cmp	r4, r5
 8015228:	d101      	bne.n	801522e <__sfputs_r+0x12>
 801522a:	2000      	movs	r0, #0
 801522c:	e007      	b.n	801523e <__sfputs_r+0x22>
 801522e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015232:	463a      	mov	r2, r7
 8015234:	4630      	mov	r0, r6
 8015236:	f7ff ffda 	bl	80151ee <__sfputc_r>
 801523a:	1c43      	adds	r3, r0, #1
 801523c:	d1f3      	bne.n	8015226 <__sfputs_r+0xa>
 801523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015240 <_vfiprintf_r>:
 8015240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015244:	460d      	mov	r5, r1
 8015246:	b09d      	sub	sp, #116	@ 0x74
 8015248:	4614      	mov	r4, r2
 801524a:	4698      	mov	r8, r3
 801524c:	4606      	mov	r6, r0
 801524e:	b118      	cbz	r0, 8015258 <_vfiprintf_r+0x18>
 8015250:	6a03      	ldr	r3, [r0, #32]
 8015252:	b90b      	cbnz	r3, 8015258 <_vfiprintf_r+0x18>
 8015254:	f7fe fa30 	bl	80136b8 <__sinit>
 8015258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801525a:	07d9      	lsls	r1, r3, #31
 801525c:	d405      	bmi.n	801526a <_vfiprintf_r+0x2a>
 801525e:	89ab      	ldrh	r3, [r5, #12]
 8015260:	059a      	lsls	r2, r3, #22
 8015262:	d402      	bmi.n	801526a <_vfiprintf_r+0x2a>
 8015264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015266:	f7fe fb48 	bl	80138fa <__retarget_lock_acquire_recursive>
 801526a:	89ab      	ldrh	r3, [r5, #12]
 801526c:	071b      	lsls	r3, r3, #28
 801526e:	d501      	bpl.n	8015274 <_vfiprintf_r+0x34>
 8015270:	692b      	ldr	r3, [r5, #16]
 8015272:	b99b      	cbnz	r3, 801529c <_vfiprintf_r+0x5c>
 8015274:	4629      	mov	r1, r5
 8015276:	4630      	mov	r0, r6
 8015278:	f000 f938 	bl	80154ec <__swsetup_r>
 801527c:	b170      	cbz	r0, 801529c <_vfiprintf_r+0x5c>
 801527e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015280:	07dc      	lsls	r4, r3, #31
 8015282:	d504      	bpl.n	801528e <_vfiprintf_r+0x4e>
 8015284:	f04f 30ff 	mov.w	r0, #4294967295
 8015288:	b01d      	add	sp, #116	@ 0x74
 801528a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801528e:	89ab      	ldrh	r3, [r5, #12]
 8015290:	0598      	lsls	r0, r3, #22
 8015292:	d4f7      	bmi.n	8015284 <_vfiprintf_r+0x44>
 8015294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015296:	f7fe fb31 	bl	80138fc <__retarget_lock_release_recursive>
 801529a:	e7f3      	b.n	8015284 <_vfiprintf_r+0x44>
 801529c:	2300      	movs	r3, #0
 801529e:	9309      	str	r3, [sp, #36]	@ 0x24
 80152a0:	2320      	movs	r3, #32
 80152a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80152a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80152aa:	2330      	movs	r3, #48	@ 0x30
 80152ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801545c <_vfiprintf_r+0x21c>
 80152b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80152b4:	f04f 0901 	mov.w	r9, #1
 80152b8:	4623      	mov	r3, r4
 80152ba:	469a      	mov	sl, r3
 80152bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152c0:	b10a      	cbz	r2, 80152c6 <_vfiprintf_r+0x86>
 80152c2:	2a25      	cmp	r2, #37	@ 0x25
 80152c4:	d1f9      	bne.n	80152ba <_vfiprintf_r+0x7a>
 80152c6:	ebba 0b04 	subs.w	fp, sl, r4
 80152ca:	d00b      	beq.n	80152e4 <_vfiprintf_r+0xa4>
 80152cc:	465b      	mov	r3, fp
 80152ce:	4622      	mov	r2, r4
 80152d0:	4629      	mov	r1, r5
 80152d2:	4630      	mov	r0, r6
 80152d4:	f7ff ffa2 	bl	801521c <__sfputs_r>
 80152d8:	3001      	adds	r0, #1
 80152da:	f000 80a7 	beq.w	801542c <_vfiprintf_r+0x1ec>
 80152de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152e0:	445a      	add	r2, fp
 80152e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80152e4:	f89a 3000 	ldrb.w	r3, [sl]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	f000 809f 	beq.w	801542c <_vfiprintf_r+0x1ec>
 80152ee:	2300      	movs	r3, #0
 80152f0:	f04f 32ff 	mov.w	r2, #4294967295
 80152f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152f8:	f10a 0a01 	add.w	sl, sl, #1
 80152fc:	9304      	str	r3, [sp, #16]
 80152fe:	9307      	str	r3, [sp, #28]
 8015300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015304:	931a      	str	r3, [sp, #104]	@ 0x68
 8015306:	4654      	mov	r4, sl
 8015308:	2205      	movs	r2, #5
 801530a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801530e:	4853      	ldr	r0, [pc, #332]	@ (801545c <_vfiprintf_r+0x21c>)
 8015310:	f7ea ffe6 	bl	80002e0 <memchr>
 8015314:	9a04      	ldr	r2, [sp, #16]
 8015316:	b9d8      	cbnz	r0, 8015350 <_vfiprintf_r+0x110>
 8015318:	06d1      	lsls	r1, r2, #27
 801531a:	bf44      	itt	mi
 801531c:	2320      	movmi	r3, #32
 801531e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015322:	0713      	lsls	r3, r2, #28
 8015324:	bf44      	itt	mi
 8015326:	232b      	movmi	r3, #43	@ 0x2b
 8015328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801532c:	f89a 3000 	ldrb.w	r3, [sl]
 8015330:	2b2a      	cmp	r3, #42	@ 0x2a
 8015332:	d015      	beq.n	8015360 <_vfiprintf_r+0x120>
 8015334:	9a07      	ldr	r2, [sp, #28]
 8015336:	4654      	mov	r4, sl
 8015338:	2000      	movs	r0, #0
 801533a:	f04f 0c0a 	mov.w	ip, #10
 801533e:	4621      	mov	r1, r4
 8015340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015344:	3b30      	subs	r3, #48	@ 0x30
 8015346:	2b09      	cmp	r3, #9
 8015348:	d94b      	bls.n	80153e2 <_vfiprintf_r+0x1a2>
 801534a:	b1b0      	cbz	r0, 801537a <_vfiprintf_r+0x13a>
 801534c:	9207      	str	r2, [sp, #28]
 801534e:	e014      	b.n	801537a <_vfiprintf_r+0x13a>
 8015350:	eba0 0308 	sub.w	r3, r0, r8
 8015354:	fa09 f303 	lsl.w	r3, r9, r3
 8015358:	4313      	orrs	r3, r2
 801535a:	9304      	str	r3, [sp, #16]
 801535c:	46a2      	mov	sl, r4
 801535e:	e7d2      	b.n	8015306 <_vfiprintf_r+0xc6>
 8015360:	9b03      	ldr	r3, [sp, #12]
 8015362:	1d19      	adds	r1, r3, #4
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	9103      	str	r1, [sp, #12]
 8015368:	2b00      	cmp	r3, #0
 801536a:	bfbb      	ittet	lt
 801536c:	425b      	neglt	r3, r3
 801536e:	f042 0202 	orrlt.w	r2, r2, #2
 8015372:	9307      	strge	r3, [sp, #28]
 8015374:	9307      	strlt	r3, [sp, #28]
 8015376:	bfb8      	it	lt
 8015378:	9204      	strlt	r2, [sp, #16]
 801537a:	7823      	ldrb	r3, [r4, #0]
 801537c:	2b2e      	cmp	r3, #46	@ 0x2e
 801537e:	d10a      	bne.n	8015396 <_vfiprintf_r+0x156>
 8015380:	7863      	ldrb	r3, [r4, #1]
 8015382:	2b2a      	cmp	r3, #42	@ 0x2a
 8015384:	d132      	bne.n	80153ec <_vfiprintf_r+0x1ac>
 8015386:	9b03      	ldr	r3, [sp, #12]
 8015388:	1d1a      	adds	r2, r3, #4
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	9203      	str	r2, [sp, #12]
 801538e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015392:	3402      	adds	r4, #2
 8015394:	9305      	str	r3, [sp, #20]
 8015396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801546c <_vfiprintf_r+0x22c>
 801539a:	7821      	ldrb	r1, [r4, #0]
 801539c:	2203      	movs	r2, #3
 801539e:	4650      	mov	r0, sl
 80153a0:	f7ea ff9e 	bl	80002e0 <memchr>
 80153a4:	b138      	cbz	r0, 80153b6 <_vfiprintf_r+0x176>
 80153a6:	9b04      	ldr	r3, [sp, #16]
 80153a8:	eba0 000a 	sub.w	r0, r0, sl
 80153ac:	2240      	movs	r2, #64	@ 0x40
 80153ae:	4082      	lsls	r2, r0
 80153b0:	4313      	orrs	r3, r2
 80153b2:	3401      	adds	r4, #1
 80153b4:	9304      	str	r3, [sp, #16]
 80153b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153ba:	4829      	ldr	r0, [pc, #164]	@ (8015460 <_vfiprintf_r+0x220>)
 80153bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80153c0:	2206      	movs	r2, #6
 80153c2:	f7ea ff8d 	bl	80002e0 <memchr>
 80153c6:	2800      	cmp	r0, #0
 80153c8:	d03f      	beq.n	801544a <_vfiprintf_r+0x20a>
 80153ca:	4b26      	ldr	r3, [pc, #152]	@ (8015464 <_vfiprintf_r+0x224>)
 80153cc:	bb1b      	cbnz	r3, 8015416 <_vfiprintf_r+0x1d6>
 80153ce:	9b03      	ldr	r3, [sp, #12]
 80153d0:	3307      	adds	r3, #7
 80153d2:	f023 0307 	bic.w	r3, r3, #7
 80153d6:	3308      	adds	r3, #8
 80153d8:	9303      	str	r3, [sp, #12]
 80153da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153dc:	443b      	add	r3, r7
 80153de:	9309      	str	r3, [sp, #36]	@ 0x24
 80153e0:	e76a      	b.n	80152b8 <_vfiprintf_r+0x78>
 80153e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80153e6:	460c      	mov	r4, r1
 80153e8:	2001      	movs	r0, #1
 80153ea:	e7a8      	b.n	801533e <_vfiprintf_r+0xfe>
 80153ec:	2300      	movs	r3, #0
 80153ee:	3401      	adds	r4, #1
 80153f0:	9305      	str	r3, [sp, #20]
 80153f2:	4619      	mov	r1, r3
 80153f4:	f04f 0c0a 	mov.w	ip, #10
 80153f8:	4620      	mov	r0, r4
 80153fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153fe:	3a30      	subs	r2, #48	@ 0x30
 8015400:	2a09      	cmp	r2, #9
 8015402:	d903      	bls.n	801540c <_vfiprintf_r+0x1cc>
 8015404:	2b00      	cmp	r3, #0
 8015406:	d0c6      	beq.n	8015396 <_vfiprintf_r+0x156>
 8015408:	9105      	str	r1, [sp, #20]
 801540a:	e7c4      	b.n	8015396 <_vfiprintf_r+0x156>
 801540c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015410:	4604      	mov	r4, r0
 8015412:	2301      	movs	r3, #1
 8015414:	e7f0      	b.n	80153f8 <_vfiprintf_r+0x1b8>
 8015416:	ab03      	add	r3, sp, #12
 8015418:	9300      	str	r3, [sp, #0]
 801541a:	462a      	mov	r2, r5
 801541c:	4b12      	ldr	r3, [pc, #72]	@ (8015468 <_vfiprintf_r+0x228>)
 801541e:	a904      	add	r1, sp, #16
 8015420:	4630      	mov	r0, r6
 8015422:	f7fd fd15 	bl	8012e50 <_printf_float>
 8015426:	4607      	mov	r7, r0
 8015428:	1c78      	adds	r0, r7, #1
 801542a:	d1d6      	bne.n	80153da <_vfiprintf_r+0x19a>
 801542c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801542e:	07d9      	lsls	r1, r3, #31
 8015430:	d405      	bmi.n	801543e <_vfiprintf_r+0x1fe>
 8015432:	89ab      	ldrh	r3, [r5, #12]
 8015434:	059a      	lsls	r2, r3, #22
 8015436:	d402      	bmi.n	801543e <_vfiprintf_r+0x1fe>
 8015438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801543a:	f7fe fa5f 	bl	80138fc <__retarget_lock_release_recursive>
 801543e:	89ab      	ldrh	r3, [r5, #12]
 8015440:	065b      	lsls	r3, r3, #25
 8015442:	f53f af1f 	bmi.w	8015284 <_vfiprintf_r+0x44>
 8015446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015448:	e71e      	b.n	8015288 <_vfiprintf_r+0x48>
 801544a:	ab03      	add	r3, sp, #12
 801544c:	9300      	str	r3, [sp, #0]
 801544e:	462a      	mov	r2, r5
 8015450:	4b05      	ldr	r3, [pc, #20]	@ (8015468 <_vfiprintf_r+0x228>)
 8015452:	a904      	add	r1, sp, #16
 8015454:	4630      	mov	r0, r6
 8015456:	f7fd ff83 	bl	8013360 <_printf_i>
 801545a:	e7e4      	b.n	8015426 <_vfiprintf_r+0x1e6>
 801545c:	08017c68 	.word	0x08017c68
 8015460:	08017c72 	.word	0x08017c72
 8015464:	08012e51 	.word	0x08012e51
 8015468:	0801521d 	.word	0x0801521d
 801546c:	08017c6e 	.word	0x08017c6e

08015470 <__swbuf_r>:
 8015470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015472:	460e      	mov	r6, r1
 8015474:	4614      	mov	r4, r2
 8015476:	4605      	mov	r5, r0
 8015478:	b118      	cbz	r0, 8015482 <__swbuf_r+0x12>
 801547a:	6a03      	ldr	r3, [r0, #32]
 801547c:	b90b      	cbnz	r3, 8015482 <__swbuf_r+0x12>
 801547e:	f7fe f91b 	bl	80136b8 <__sinit>
 8015482:	69a3      	ldr	r3, [r4, #24]
 8015484:	60a3      	str	r3, [r4, #8]
 8015486:	89a3      	ldrh	r3, [r4, #12]
 8015488:	071a      	lsls	r2, r3, #28
 801548a:	d501      	bpl.n	8015490 <__swbuf_r+0x20>
 801548c:	6923      	ldr	r3, [r4, #16]
 801548e:	b943      	cbnz	r3, 80154a2 <__swbuf_r+0x32>
 8015490:	4621      	mov	r1, r4
 8015492:	4628      	mov	r0, r5
 8015494:	f000 f82a 	bl	80154ec <__swsetup_r>
 8015498:	b118      	cbz	r0, 80154a2 <__swbuf_r+0x32>
 801549a:	f04f 37ff 	mov.w	r7, #4294967295
 801549e:	4638      	mov	r0, r7
 80154a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154a2:	6823      	ldr	r3, [r4, #0]
 80154a4:	6922      	ldr	r2, [r4, #16]
 80154a6:	1a98      	subs	r0, r3, r2
 80154a8:	6963      	ldr	r3, [r4, #20]
 80154aa:	b2f6      	uxtb	r6, r6
 80154ac:	4283      	cmp	r3, r0
 80154ae:	4637      	mov	r7, r6
 80154b0:	dc05      	bgt.n	80154be <__swbuf_r+0x4e>
 80154b2:	4621      	mov	r1, r4
 80154b4:	4628      	mov	r0, r5
 80154b6:	f7ff fda9 	bl	801500c <_fflush_r>
 80154ba:	2800      	cmp	r0, #0
 80154bc:	d1ed      	bne.n	801549a <__swbuf_r+0x2a>
 80154be:	68a3      	ldr	r3, [r4, #8]
 80154c0:	3b01      	subs	r3, #1
 80154c2:	60a3      	str	r3, [r4, #8]
 80154c4:	6823      	ldr	r3, [r4, #0]
 80154c6:	1c5a      	adds	r2, r3, #1
 80154c8:	6022      	str	r2, [r4, #0]
 80154ca:	701e      	strb	r6, [r3, #0]
 80154cc:	6962      	ldr	r2, [r4, #20]
 80154ce:	1c43      	adds	r3, r0, #1
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d004      	beq.n	80154de <__swbuf_r+0x6e>
 80154d4:	89a3      	ldrh	r3, [r4, #12]
 80154d6:	07db      	lsls	r3, r3, #31
 80154d8:	d5e1      	bpl.n	801549e <__swbuf_r+0x2e>
 80154da:	2e0a      	cmp	r6, #10
 80154dc:	d1df      	bne.n	801549e <__swbuf_r+0x2e>
 80154de:	4621      	mov	r1, r4
 80154e0:	4628      	mov	r0, r5
 80154e2:	f7ff fd93 	bl	801500c <_fflush_r>
 80154e6:	2800      	cmp	r0, #0
 80154e8:	d0d9      	beq.n	801549e <__swbuf_r+0x2e>
 80154ea:	e7d6      	b.n	801549a <__swbuf_r+0x2a>

080154ec <__swsetup_r>:
 80154ec:	b538      	push	{r3, r4, r5, lr}
 80154ee:	4b29      	ldr	r3, [pc, #164]	@ (8015594 <__swsetup_r+0xa8>)
 80154f0:	4605      	mov	r5, r0
 80154f2:	6818      	ldr	r0, [r3, #0]
 80154f4:	460c      	mov	r4, r1
 80154f6:	b118      	cbz	r0, 8015500 <__swsetup_r+0x14>
 80154f8:	6a03      	ldr	r3, [r0, #32]
 80154fa:	b90b      	cbnz	r3, 8015500 <__swsetup_r+0x14>
 80154fc:	f7fe f8dc 	bl	80136b8 <__sinit>
 8015500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015504:	0719      	lsls	r1, r3, #28
 8015506:	d422      	bmi.n	801554e <__swsetup_r+0x62>
 8015508:	06da      	lsls	r2, r3, #27
 801550a:	d407      	bmi.n	801551c <__swsetup_r+0x30>
 801550c:	2209      	movs	r2, #9
 801550e:	602a      	str	r2, [r5, #0]
 8015510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015514:	81a3      	strh	r3, [r4, #12]
 8015516:	f04f 30ff 	mov.w	r0, #4294967295
 801551a:	e033      	b.n	8015584 <__swsetup_r+0x98>
 801551c:	0758      	lsls	r0, r3, #29
 801551e:	d512      	bpl.n	8015546 <__swsetup_r+0x5a>
 8015520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015522:	b141      	cbz	r1, 8015536 <__swsetup_r+0x4a>
 8015524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015528:	4299      	cmp	r1, r3
 801552a:	d002      	beq.n	8015532 <__swsetup_r+0x46>
 801552c:	4628      	mov	r0, r5
 801552e:	f7fe ffc5 	bl	80144bc <_free_r>
 8015532:	2300      	movs	r3, #0
 8015534:	6363      	str	r3, [r4, #52]	@ 0x34
 8015536:	89a3      	ldrh	r3, [r4, #12]
 8015538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801553c:	81a3      	strh	r3, [r4, #12]
 801553e:	2300      	movs	r3, #0
 8015540:	6063      	str	r3, [r4, #4]
 8015542:	6923      	ldr	r3, [r4, #16]
 8015544:	6023      	str	r3, [r4, #0]
 8015546:	89a3      	ldrh	r3, [r4, #12]
 8015548:	f043 0308 	orr.w	r3, r3, #8
 801554c:	81a3      	strh	r3, [r4, #12]
 801554e:	6923      	ldr	r3, [r4, #16]
 8015550:	b94b      	cbnz	r3, 8015566 <__swsetup_r+0x7a>
 8015552:	89a3      	ldrh	r3, [r4, #12]
 8015554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801555c:	d003      	beq.n	8015566 <__swsetup_r+0x7a>
 801555e:	4621      	mov	r1, r4
 8015560:	4628      	mov	r0, r5
 8015562:	f000 f883 	bl	801566c <__smakebuf_r>
 8015566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801556a:	f013 0201 	ands.w	r2, r3, #1
 801556e:	d00a      	beq.n	8015586 <__swsetup_r+0x9a>
 8015570:	2200      	movs	r2, #0
 8015572:	60a2      	str	r2, [r4, #8]
 8015574:	6962      	ldr	r2, [r4, #20]
 8015576:	4252      	negs	r2, r2
 8015578:	61a2      	str	r2, [r4, #24]
 801557a:	6922      	ldr	r2, [r4, #16]
 801557c:	b942      	cbnz	r2, 8015590 <__swsetup_r+0xa4>
 801557e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015582:	d1c5      	bne.n	8015510 <__swsetup_r+0x24>
 8015584:	bd38      	pop	{r3, r4, r5, pc}
 8015586:	0799      	lsls	r1, r3, #30
 8015588:	bf58      	it	pl
 801558a:	6962      	ldrpl	r2, [r4, #20]
 801558c:	60a2      	str	r2, [r4, #8]
 801558e:	e7f4      	b.n	801557a <__swsetup_r+0x8e>
 8015590:	2000      	movs	r0, #0
 8015592:	e7f7      	b.n	8015584 <__swsetup_r+0x98>
 8015594:	24000114 	.word	0x24000114

08015598 <_raise_r>:
 8015598:	291f      	cmp	r1, #31
 801559a:	b538      	push	{r3, r4, r5, lr}
 801559c:	4605      	mov	r5, r0
 801559e:	460c      	mov	r4, r1
 80155a0:	d904      	bls.n	80155ac <_raise_r+0x14>
 80155a2:	2316      	movs	r3, #22
 80155a4:	6003      	str	r3, [r0, #0]
 80155a6:	f04f 30ff 	mov.w	r0, #4294967295
 80155aa:	bd38      	pop	{r3, r4, r5, pc}
 80155ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80155ae:	b112      	cbz	r2, 80155b6 <_raise_r+0x1e>
 80155b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80155b4:	b94b      	cbnz	r3, 80155ca <_raise_r+0x32>
 80155b6:	4628      	mov	r0, r5
 80155b8:	f000 f830 	bl	801561c <_getpid_r>
 80155bc:	4622      	mov	r2, r4
 80155be:	4601      	mov	r1, r0
 80155c0:	4628      	mov	r0, r5
 80155c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155c6:	f000 b817 	b.w	80155f8 <_kill_r>
 80155ca:	2b01      	cmp	r3, #1
 80155cc:	d00a      	beq.n	80155e4 <_raise_r+0x4c>
 80155ce:	1c59      	adds	r1, r3, #1
 80155d0:	d103      	bne.n	80155da <_raise_r+0x42>
 80155d2:	2316      	movs	r3, #22
 80155d4:	6003      	str	r3, [r0, #0]
 80155d6:	2001      	movs	r0, #1
 80155d8:	e7e7      	b.n	80155aa <_raise_r+0x12>
 80155da:	2100      	movs	r1, #0
 80155dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80155e0:	4620      	mov	r0, r4
 80155e2:	4798      	blx	r3
 80155e4:	2000      	movs	r0, #0
 80155e6:	e7e0      	b.n	80155aa <_raise_r+0x12>

080155e8 <raise>:
 80155e8:	4b02      	ldr	r3, [pc, #8]	@ (80155f4 <raise+0xc>)
 80155ea:	4601      	mov	r1, r0
 80155ec:	6818      	ldr	r0, [r3, #0]
 80155ee:	f7ff bfd3 	b.w	8015598 <_raise_r>
 80155f2:	bf00      	nop
 80155f4:	24000114 	.word	0x24000114

080155f8 <_kill_r>:
 80155f8:	b538      	push	{r3, r4, r5, lr}
 80155fa:	4d07      	ldr	r5, [pc, #28]	@ (8015618 <_kill_r+0x20>)
 80155fc:	2300      	movs	r3, #0
 80155fe:	4604      	mov	r4, r0
 8015600:	4608      	mov	r0, r1
 8015602:	4611      	mov	r1, r2
 8015604:	602b      	str	r3, [r5, #0]
 8015606:	f7fb fc44 	bl	8010e92 <_kill>
 801560a:	1c43      	adds	r3, r0, #1
 801560c:	d102      	bne.n	8015614 <_kill_r+0x1c>
 801560e:	682b      	ldr	r3, [r5, #0]
 8015610:	b103      	cbz	r3, 8015614 <_kill_r+0x1c>
 8015612:	6023      	str	r3, [r4, #0]
 8015614:	bd38      	pop	{r3, r4, r5, pc}
 8015616:	bf00      	nop
 8015618:	24002928 	.word	0x24002928

0801561c <_getpid_r>:
 801561c:	f7fb bc2b 	b.w	8010e76 <_getpid>

08015620 <__swhatbuf_r>:
 8015620:	b570      	push	{r4, r5, r6, lr}
 8015622:	460c      	mov	r4, r1
 8015624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015628:	2900      	cmp	r1, #0
 801562a:	b096      	sub	sp, #88	@ 0x58
 801562c:	4615      	mov	r5, r2
 801562e:	461e      	mov	r6, r3
 8015630:	da0d      	bge.n	801564e <__swhatbuf_r+0x2e>
 8015632:	89a3      	ldrh	r3, [r4, #12]
 8015634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015638:	f04f 0100 	mov.w	r1, #0
 801563c:	bf14      	ite	ne
 801563e:	2340      	movne	r3, #64	@ 0x40
 8015640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015644:	2000      	movs	r0, #0
 8015646:	6031      	str	r1, [r6, #0]
 8015648:	602b      	str	r3, [r5, #0]
 801564a:	b016      	add	sp, #88	@ 0x58
 801564c:	bd70      	pop	{r4, r5, r6, pc}
 801564e:	466a      	mov	r2, sp
 8015650:	f000 f848 	bl	80156e4 <_fstat_r>
 8015654:	2800      	cmp	r0, #0
 8015656:	dbec      	blt.n	8015632 <__swhatbuf_r+0x12>
 8015658:	9901      	ldr	r1, [sp, #4]
 801565a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801565e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015662:	4259      	negs	r1, r3
 8015664:	4159      	adcs	r1, r3
 8015666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801566a:	e7eb      	b.n	8015644 <__swhatbuf_r+0x24>

0801566c <__smakebuf_r>:
 801566c:	898b      	ldrh	r3, [r1, #12]
 801566e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015670:	079d      	lsls	r5, r3, #30
 8015672:	4606      	mov	r6, r0
 8015674:	460c      	mov	r4, r1
 8015676:	d507      	bpl.n	8015688 <__smakebuf_r+0x1c>
 8015678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801567c:	6023      	str	r3, [r4, #0]
 801567e:	6123      	str	r3, [r4, #16]
 8015680:	2301      	movs	r3, #1
 8015682:	6163      	str	r3, [r4, #20]
 8015684:	b003      	add	sp, #12
 8015686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015688:	ab01      	add	r3, sp, #4
 801568a:	466a      	mov	r2, sp
 801568c:	f7ff ffc8 	bl	8015620 <__swhatbuf_r>
 8015690:	9f00      	ldr	r7, [sp, #0]
 8015692:	4605      	mov	r5, r0
 8015694:	4639      	mov	r1, r7
 8015696:	4630      	mov	r0, r6
 8015698:	f7fd fac0 	bl	8012c1c <_malloc_r>
 801569c:	b948      	cbnz	r0, 80156b2 <__smakebuf_r+0x46>
 801569e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156a2:	059a      	lsls	r2, r3, #22
 80156a4:	d4ee      	bmi.n	8015684 <__smakebuf_r+0x18>
 80156a6:	f023 0303 	bic.w	r3, r3, #3
 80156aa:	f043 0302 	orr.w	r3, r3, #2
 80156ae:	81a3      	strh	r3, [r4, #12]
 80156b0:	e7e2      	b.n	8015678 <__smakebuf_r+0xc>
 80156b2:	89a3      	ldrh	r3, [r4, #12]
 80156b4:	6020      	str	r0, [r4, #0]
 80156b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80156ba:	81a3      	strh	r3, [r4, #12]
 80156bc:	9b01      	ldr	r3, [sp, #4]
 80156be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80156c2:	b15b      	cbz	r3, 80156dc <__smakebuf_r+0x70>
 80156c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156c8:	4630      	mov	r0, r6
 80156ca:	f000 f81d 	bl	8015708 <_isatty_r>
 80156ce:	b128      	cbz	r0, 80156dc <__smakebuf_r+0x70>
 80156d0:	89a3      	ldrh	r3, [r4, #12]
 80156d2:	f023 0303 	bic.w	r3, r3, #3
 80156d6:	f043 0301 	orr.w	r3, r3, #1
 80156da:	81a3      	strh	r3, [r4, #12]
 80156dc:	89a3      	ldrh	r3, [r4, #12]
 80156de:	431d      	orrs	r5, r3
 80156e0:	81a5      	strh	r5, [r4, #12]
 80156e2:	e7cf      	b.n	8015684 <__smakebuf_r+0x18>

080156e4 <_fstat_r>:
 80156e4:	b538      	push	{r3, r4, r5, lr}
 80156e6:	4d07      	ldr	r5, [pc, #28]	@ (8015704 <_fstat_r+0x20>)
 80156e8:	2300      	movs	r3, #0
 80156ea:	4604      	mov	r4, r0
 80156ec:	4608      	mov	r0, r1
 80156ee:	4611      	mov	r1, r2
 80156f0:	602b      	str	r3, [r5, #0]
 80156f2:	f7fb fbb9 	bl	8010e68 <_fstat>
 80156f6:	1c43      	adds	r3, r0, #1
 80156f8:	d102      	bne.n	8015700 <_fstat_r+0x1c>
 80156fa:	682b      	ldr	r3, [r5, #0]
 80156fc:	b103      	cbz	r3, 8015700 <_fstat_r+0x1c>
 80156fe:	6023      	str	r3, [r4, #0]
 8015700:	bd38      	pop	{r3, r4, r5, pc}
 8015702:	bf00      	nop
 8015704:	24002928 	.word	0x24002928

08015708 <_isatty_r>:
 8015708:	b538      	push	{r3, r4, r5, lr}
 801570a:	4d06      	ldr	r5, [pc, #24]	@ (8015724 <_isatty_r+0x1c>)
 801570c:	2300      	movs	r3, #0
 801570e:	4604      	mov	r4, r0
 8015710:	4608      	mov	r0, r1
 8015712:	602b      	str	r3, [r5, #0]
 8015714:	f7fb fbb6 	bl	8010e84 <_isatty>
 8015718:	1c43      	adds	r3, r0, #1
 801571a:	d102      	bne.n	8015722 <_isatty_r+0x1a>
 801571c:	682b      	ldr	r3, [r5, #0]
 801571e:	b103      	cbz	r3, 8015722 <_isatty_r+0x1a>
 8015720:	6023      	str	r3, [r4, #0]
 8015722:	bd38      	pop	{r3, r4, r5, pc}
 8015724:	24002928 	.word	0x24002928

08015728 <fmod>:
 8015728:	b508      	push	{r3, lr}
 801572a:	ed2d 8b04 	vpush	{d8-d9}
 801572e:	eeb0 9b40 	vmov.f64	d9, d0
 8015732:	eeb0 8b41 	vmov.f64	d8, d1
 8015736:	f000 f81b 	bl	8015770 <__ieee754_fmod>
 801573a:	eeb4 9b48 	vcmp.f64	d9, d8
 801573e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015742:	d60c      	bvs.n	801575e <fmod+0x36>
 8015744:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8015768 <fmod+0x40>
 8015748:	eeb4 8b49 	vcmp.f64	d8, d9
 801574c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015750:	d105      	bne.n	801575e <fmod+0x36>
 8015752:	f000 f919 	bl	8015988 <__errno>
 8015756:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801575a:	2321      	movs	r3, #33	@ 0x21
 801575c:	6003      	str	r3, [r0, #0]
 801575e:	ecbd 8b04 	vpop	{d8-d9}
 8015762:	bd08      	pop	{r3, pc}
 8015764:	f3af 8000 	nop.w
	...

08015770 <__ieee754_fmod>:
 8015770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015774:	ed8d 1b00 	vstr	d1, [sp]
 8015778:	e9dd 6500 	ldrd	r6, r5, [sp]
 801577c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8015780:	ea56 0307 	orrs.w	r3, r6, r7
 8015784:	46b6      	mov	lr, r6
 8015786:	d00d      	beq.n	80157a4 <__ieee754_fmod+0x34>
 8015788:	ee10 ca90 	vmov	ip, s1
 801578c:	4b78      	ldr	r3, [pc, #480]	@ (8015970 <__ieee754_fmod+0x200>)
 801578e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8015792:	4598      	cmp	r8, r3
 8015794:	d806      	bhi.n	80157a4 <__ieee754_fmod+0x34>
 8015796:	4273      	negs	r3, r6
 8015798:	4a76      	ldr	r2, [pc, #472]	@ (8015974 <__ieee754_fmod+0x204>)
 801579a:	4333      	orrs	r3, r6
 801579c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80157a0:	4293      	cmp	r3, r2
 80157a2:	d908      	bls.n	80157b6 <__ieee754_fmod+0x46>
 80157a4:	ed9d 7b00 	vldr	d7, [sp]
 80157a8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80157ac:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80157b0:	b003      	add	sp, #12
 80157b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157b6:	ee10 9a10 	vmov	r9, s0
 80157ba:	45b8      	cmp	r8, r7
 80157bc:	4649      	mov	r1, r9
 80157be:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 80157c2:	dc09      	bgt.n	80157d8 <__ieee754_fmod+0x68>
 80157c4:	dbf4      	blt.n	80157b0 <__ieee754_fmod+0x40>
 80157c6:	454e      	cmp	r6, r9
 80157c8:	d8f2      	bhi.n	80157b0 <__ieee754_fmod+0x40>
 80157ca:	d105      	bne.n	80157d8 <__ieee754_fmod+0x68>
 80157cc:	4b6a      	ldr	r3, [pc, #424]	@ (8015978 <__ieee754_fmod+0x208>)
 80157ce:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 80157d2:	ed93 0b00 	vldr	d0, [r3]
 80157d6:	e7eb      	b.n	80157b0 <__ieee754_fmod+0x40>
 80157d8:	4a66      	ldr	r2, [pc, #408]	@ (8015974 <__ieee754_fmod+0x204>)
 80157da:	ea1c 0f02 	tst.w	ip, r2
 80157de:	d14a      	bne.n	8015876 <__ieee754_fmod+0x106>
 80157e0:	f1b8 0f00 	cmp.w	r8, #0
 80157e4:	d13f      	bne.n	8015866 <__ieee754_fmod+0xf6>
 80157e6:	4865      	ldr	r0, [pc, #404]	@ (801597c <__ieee754_fmod+0x20c>)
 80157e8:	464b      	mov	r3, r9
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	dc38      	bgt.n	8015860 <__ieee754_fmod+0xf0>
 80157ee:	4215      	tst	r5, r2
 80157f0:	d150      	bne.n	8015894 <__ieee754_fmod+0x124>
 80157f2:	2f00      	cmp	r7, #0
 80157f4:	d147      	bne.n	8015886 <__ieee754_fmod+0x116>
 80157f6:	4a61      	ldr	r2, [pc, #388]	@ (801597c <__ieee754_fmod+0x20c>)
 80157f8:	4633      	mov	r3, r6
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	dc40      	bgt.n	8015880 <__ieee754_fmod+0x110>
 80157fe:	4b60      	ldr	r3, [pc, #384]	@ (8015980 <__ieee754_fmod+0x210>)
 8015800:	4298      	cmp	r0, r3
 8015802:	db4b      	blt.n	801589c <__ieee754_fmod+0x12c>
 8015804:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8015808:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801580c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8015980 <__ieee754_fmod+0x210>
 8015810:	4562      	cmp	r2, ip
 8015812:	db58      	blt.n	80158c6 <__ieee754_fmod+0x156>
 8015814:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015818:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 801581c:	1a80      	subs	r0, r0, r2
 801581e:	1b5e      	subs	r6, r3, r5
 8015820:	eba1 070e 	sub.w	r7, r1, lr
 8015824:	2800      	cmp	r0, #0
 8015826:	d164      	bne.n	80158f2 <__ieee754_fmod+0x182>
 8015828:	4571      	cmp	r1, lr
 801582a:	bf38      	it	cc
 801582c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8015830:	2e00      	cmp	r6, #0
 8015832:	bfa4      	itt	ge
 8015834:	4639      	movge	r1, r7
 8015836:	4633      	movge	r3, r6
 8015838:	ea53 0001 	orrs.w	r0, r3, r1
 801583c:	d0c6      	beq.n	80157cc <__ieee754_fmod+0x5c>
 801583e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015842:	db6b      	blt.n	801591c <__ieee754_fmod+0x1ac>
 8015844:	484e      	ldr	r0, [pc, #312]	@ (8015980 <__ieee754_fmod+0x210>)
 8015846:	4282      	cmp	r2, r0
 8015848:	db6e      	blt.n	8015928 <__ieee754_fmod+0x1b8>
 801584a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801584e:	4323      	orrs	r3, r4
 8015850:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8015854:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015858:	460c      	mov	r4, r1
 801585a:	ec45 4b10 	vmov	d0, r4, r5
 801585e:	e7a7      	b.n	80157b0 <__ieee754_fmod+0x40>
 8015860:	3801      	subs	r0, #1
 8015862:	005b      	lsls	r3, r3, #1
 8015864:	e7c1      	b.n	80157ea <__ieee754_fmod+0x7a>
 8015866:	4846      	ldr	r0, [pc, #280]	@ (8015980 <__ieee754_fmod+0x210>)
 8015868:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801586c:	2b00      	cmp	r3, #0
 801586e:	ddbe      	ble.n	80157ee <__ieee754_fmod+0x7e>
 8015870:	3801      	subs	r0, #1
 8015872:	005b      	lsls	r3, r3, #1
 8015874:	e7fa      	b.n	801586c <__ieee754_fmod+0xfc>
 8015876:	ea4f 5028 	mov.w	r0, r8, asr #20
 801587a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 801587e:	e7b6      	b.n	80157ee <__ieee754_fmod+0x7e>
 8015880:	3a01      	subs	r2, #1
 8015882:	005b      	lsls	r3, r3, #1
 8015884:	e7b9      	b.n	80157fa <__ieee754_fmod+0x8a>
 8015886:	4a3e      	ldr	r2, [pc, #248]	@ (8015980 <__ieee754_fmod+0x210>)
 8015888:	02fb      	lsls	r3, r7, #11
 801588a:	2b00      	cmp	r3, #0
 801588c:	ddb7      	ble.n	80157fe <__ieee754_fmod+0x8e>
 801588e:	3a01      	subs	r2, #1
 8015890:	005b      	lsls	r3, r3, #1
 8015892:	e7fa      	b.n	801588a <__ieee754_fmod+0x11a>
 8015894:	153a      	asrs	r2, r7, #20
 8015896:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801589a:	e7b0      	b.n	80157fe <__ieee754_fmod+0x8e>
 801589c:	eba3 0c00 	sub.w	ip, r3, r0
 80158a0:	f1bc 0f1f 	cmp.w	ip, #31
 80158a4:	dc09      	bgt.n	80158ba <__ieee754_fmod+0x14a>
 80158a6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 80158aa:	fa08 f10c 	lsl.w	r1, r8, ip
 80158ae:	fa29 f303 	lsr.w	r3, r9, r3
 80158b2:	430b      	orrs	r3, r1
 80158b4:	fa09 f10c 	lsl.w	r1, r9, ip
 80158b8:	e7a8      	b.n	801580c <__ieee754_fmod+0x9c>
 80158ba:	4b32      	ldr	r3, [pc, #200]	@ (8015984 <__ieee754_fmod+0x214>)
 80158bc:	1a1b      	subs	r3, r3, r0
 80158be:	fa09 f303 	lsl.w	r3, r9, r3
 80158c2:	2100      	movs	r1, #0
 80158c4:	e7a2      	b.n	801580c <__ieee754_fmod+0x9c>
 80158c6:	ebac 0c02 	sub.w	ip, ip, r2
 80158ca:	f1bc 0f1f 	cmp.w	ip, #31
 80158ce:	dc09      	bgt.n	80158e4 <__ieee754_fmod+0x174>
 80158d0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 80158d4:	fa07 f70c 	lsl.w	r7, r7, ip
 80158d8:	fa26 f505 	lsr.w	r5, r6, r5
 80158dc:	433d      	orrs	r5, r7
 80158de:	fa06 fe0c 	lsl.w	lr, r6, ip
 80158e2:	e79b      	b.n	801581c <__ieee754_fmod+0xac>
 80158e4:	4d27      	ldr	r5, [pc, #156]	@ (8015984 <__ieee754_fmod+0x214>)
 80158e6:	1aad      	subs	r5, r5, r2
 80158e8:	fa06 f505 	lsl.w	r5, r6, r5
 80158ec:	f04f 0e00 	mov.w	lr, #0
 80158f0:	e794      	b.n	801581c <__ieee754_fmod+0xac>
 80158f2:	4571      	cmp	r1, lr
 80158f4:	bf38      	it	cc
 80158f6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80158fa:	2e00      	cmp	r6, #0
 80158fc:	da05      	bge.n	801590a <__ieee754_fmod+0x19a>
 80158fe:	0fce      	lsrs	r6, r1, #31
 8015900:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8015904:	0049      	lsls	r1, r1, #1
 8015906:	3801      	subs	r0, #1
 8015908:	e789      	b.n	801581e <__ieee754_fmod+0xae>
 801590a:	ea56 0307 	orrs.w	r3, r6, r7
 801590e:	f43f af5d 	beq.w	80157cc <__ieee754_fmod+0x5c>
 8015912:	0ffb      	lsrs	r3, r7, #31
 8015914:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015918:	0079      	lsls	r1, r7, #1
 801591a:	e7f4      	b.n	8015906 <__ieee754_fmod+0x196>
 801591c:	0fc8      	lsrs	r0, r1, #31
 801591e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015922:	0049      	lsls	r1, r1, #1
 8015924:	3a01      	subs	r2, #1
 8015926:	e78a      	b.n	801583e <__ieee754_fmod+0xce>
 8015928:	1a80      	subs	r0, r0, r2
 801592a:	2814      	cmp	r0, #20
 801592c:	dc0c      	bgt.n	8015948 <__ieee754_fmod+0x1d8>
 801592e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015932:	fa03 f202 	lsl.w	r2, r3, r2
 8015936:	40c1      	lsrs	r1, r0
 8015938:	430a      	orrs	r2, r1
 801593a:	4103      	asrs	r3, r0
 801593c:	ea43 0104 	orr.w	r1, r3, r4
 8015940:	4610      	mov	r0, r2
 8015942:	ec41 0b10 	vmov	d0, r0, r1
 8015946:	e733      	b.n	80157b0 <__ieee754_fmod+0x40>
 8015948:	281f      	cmp	r0, #31
 801594a:	dc07      	bgt.n	801595c <__ieee754_fmod+0x1ec>
 801594c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015950:	40c1      	lsrs	r1, r0
 8015952:	fa03 f202 	lsl.w	r2, r3, r2
 8015956:	430a      	orrs	r2, r1
 8015958:	4623      	mov	r3, r4
 801595a:	e7ef      	b.n	801593c <__ieee754_fmod+0x1cc>
 801595c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8015960:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8015964:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8015968:	32e2      	adds	r2, #226	@ 0xe2
 801596a:	fa43 f202 	asr.w	r2, r3, r2
 801596e:	e7f3      	b.n	8015958 <__ieee754_fmod+0x1e8>
 8015970:	7fefffff 	.word	0x7fefffff
 8015974:	7ff00000 	.word	0x7ff00000
 8015978:	08017dc0 	.word	0x08017dc0
 801597c:	fffffbed 	.word	0xfffffbed
 8015980:	fffffc02 	.word	0xfffffc02
 8015984:	fffffbe2 	.word	0xfffffbe2

08015988 <__errno>:
 8015988:	4b01      	ldr	r3, [pc, #4]	@ (8015990 <__errno+0x8>)
 801598a:	6818      	ldr	r0, [r3, #0]
 801598c:	4770      	bx	lr
 801598e:	bf00      	nop
 8015990:	24000114 	.word	0x24000114

08015994 <_sbrk>:
 8015994:	4a04      	ldr	r2, [pc, #16]	@ (80159a8 <_sbrk+0x14>)
 8015996:	6811      	ldr	r1, [r2, #0]
 8015998:	4603      	mov	r3, r0
 801599a:	b909      	cbnz	r1, 80159a0 <_sbrk+0xc>
 801599c:	4903      	ldr	r1, [pc, #12]	@ (80159ac <_sbrk+0x18>)
 801599e:	6011      	str	r1, [r2, #0]
 80159a0:	6810      	ldr	r0, [r2, #0]
 80159a2:	4403      	add	r3, r0
 80159a4:	6013      	str	r3, [r2, #0]
 80159a6:	4770      	bx	lr
 80159a8:	24002930 	.word	0x24002930
 80159ac:	24002938 	.word	0x24002938

080159b0 <_exit>:
 80159b0:	e7fe      	b.n	80159b0 <_exit>
	...

080159b4 <_init>:
 80159b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159b6:	bf00      	nop
 80159b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159ba:	bc08      	pop	{r3}
 80159bc:	469e      	mov	lr, r3
 80159be:	4770      	bx	lr

080159c0 <_fini>:
 80159c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159c2:	bf00      	nop
 80159c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159c6:	bc08      	pop	{r3}
 80159c8:	469e      	mov	lr, r3
 80159ca:	4770      	bx	lr
