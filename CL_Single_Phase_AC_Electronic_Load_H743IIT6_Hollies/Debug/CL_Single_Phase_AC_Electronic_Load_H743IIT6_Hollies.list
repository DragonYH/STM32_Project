
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010840  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  08010ae0  08010ae0  00011ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011978  08011978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011980  08011980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011984  08011984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  08011988  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001fc0  24000154  08011adc  00013154  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002114  08011adc  00014114  2**0
                  ALLOC
  9 ._D3_Area     00000004  38000000  38000000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00014004  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002fc09  00000000  00000000  00014032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000645a  00000000  00000000  00043c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000020f0  00000000  00000000  0004a098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018f0  00000000  00000000  0004c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f875  00000000  00000000  0004da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00031543  00000000  00000000  0008d2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d5d3  00000000  00000000  000be830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000b8  00000000  00000000  0023be03  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008f6c  00000000  00000000  0023bebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000081  00000000  00000000  00244e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000001f4  00000000  00000000  00244ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000020  00000000  00000000  0024509d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010ac8 	.word	0x08010ac8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	08010ac8 	.word	0x08010ac8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000386:	f107 031c 	add.w	r3, r7, #28
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000392:	463b      	mov	r3, r7
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003a6:	4a30      	ldr	r2, [pc, #192]	@ (8000468 <MX_ADC1_Init+0xe8>)
 80003a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003be:	2204      	movs	r2, #4
 80003c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003c2:	4b28      	ldr	r3, [pc, #160]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003c8:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80003ce:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003da:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80003f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000400:	4818      	ldr	r0, [pc, #96]	@ (8000464 <MX_ADC1_Init+0xe4>)
 8000402:	f001 fbf1 	bl	8001be8 <HAL_ADC_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800040c:	f000 fd2e 	bl	8000e6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	4619      	mov	r1, r3
 800041a:	4812      	ldr	r0, [pc, #72]	@ (8000464 <MX_ADC1_Init+0xe4>)
 800041c:	f002 fd00 	bl	8002e20 <HAL_ADCEx_MultiModeConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000426:	f000 fd21 	bl	8000e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <MX_ADC1_Init+0xec>)
 800042c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042e:	2306      	movs	r3, #6
 8000430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000436:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800043a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800043c:	2304      	movs	r3, #4
 800043e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000448:	463b      	mov	r3, r7
 800044a:	4619      	mov	r1, r3
 800044c:	4805      	ldr	r0, [pc, #20]	@ (8000464 <MX_ADC1_Init+0xe4>)
 800044e:	f001 fe4f 	bl	80020f0 <HAL_ADC_ConfigChannel>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000458:	f000 fd08 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	@ 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	24000170 	.word	0x24000170
 8000468:	40022000 	.word	0x40022000
 800046c:	08600004 	.word	0x08600004

08000470 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b0bc      	sub	sp, #240	@ 0xf0
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	22c0      	movs	r2, #192	@ 0xc0
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f00f fe15 	bl	80100c0 <memset>
  if(adcHandle->Instance==ADC1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a3b      	ldr	r2, [pc, #236]	@ (8000588 <HAL_ADC_MspInit+0x118>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d16f      	bne.n	8000580 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004a4:	f04f 0300 	mov.w	r3, #0
 80004a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004ac:	2319      	movs	r3, #25
 80004ae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80004b0:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80004b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 80004b6:	2307      	movs	r3, #7
 80004b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004ce:	2300      	movs	r3, #0
 80004d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4618      	mov	r0, r3
 80004da:	f006 fb3d 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80004e4:	f000 fcc2 	bl	8000e6c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004e8:	4b28      	ldr	r3, [pc, #160]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 80004ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80004ee:	4a27      	ldr	r2, [pc, #156]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 80004f0:	f043 0320 	orr.w	r3, r3, #32
 80004f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80004f8:	4b24      	ldr	r3, [pc, #144]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 80004fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800050c:	4a1f      	ldr	r2, [pc, #124]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000516:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000524:	4b19      	ldr	r3, [pc, #100]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800052a:	4a18      	ldr	r2, [pc, #96]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000534:	4b15      	ldr	r3, [pc, #84]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800053a:	f003 0320 	and.w	r3, r3, #32
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000542:	2340      	movs	r3, #64	@ 0x40
 8000544:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000558:	4619      	mov	r1, r3
 800055a:	480d      	ldr	r0, [pc, #52]	@ (8000590 <HAL_ADC_MspInit+0x120>)
 800055c:	f003 fcf6 	bl	8003f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000560:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000564:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000568:	2303      	movs	r3, #3
 800056a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000574:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000578:	4619      	mov	r1, r3
 800057a:	4806      	ldr	r0, [pc, #24]	@ (8000594 <HAL_ADC_MspInit+0x124>)
 800057c:	f003 fce6 	bl	8003f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000580:	bf00      	nop
 8000582:	37f0      	adds	r7, #240	@ 0xf0
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40022000 	.word	0x40022000
 800058c:	58024400 	.word	0x58024400
 8000590:	58020000 	.word	0x58020000
 8000594:	58021400 	.word	0x58021400

08000598 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2224      	movs	r2, #36	@ 0x24
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f00f fd8b 	bl	80100c0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_DAC1_Init+0x5c>)
 80005ac:	4a12      	ldr	r2, [pc, #72]	@ (80005f8 <MX_DAC1_Init+0x60>)
 80005ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005b0:	4810      	ldr	r0, [pc, #64]	@ (80005f4 <MX_DAC1_Init+0x5c>)
 80005b2:	f002 fe6f 	bl	8003294 <HAL_DAC_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005bc:	f000 fc56 	bl	8000e6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <MX_DAC1_Init+0x5c>)
 80005dc:	f002 ff58 	bl	8003490 <HAL_DAC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005e6:	f000 fc41 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	@ 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	240001d4 	.word	0x240001d4
 80005f8:	40007400 	.word	0x40007400

080005fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1c      	ldr	r2, [pc, #112]	@ (800068c <HAL_DAC_MspInit+0x90>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d131      	bne.n	8000682 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000624:	4a1a      	ldr	r2, [pc, #104]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000626:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800062a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000642:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800064c:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800065a:	2310      	movs	r3, #16
 800065c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <HAL_DAC_MspInit+0x98>)
 800066e:	f003 fc6d 	bl	8003f4c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	210f      	movs	r1, #15
 8000676:	2036      	movs	r0, #54	@ 0x36
 8000678:	f002 fd68 	bl	800314c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800067c:	2036      	movs	r0, #54	@ 0x36
 800067e:	f002 fd7f 	bl	8003180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	@ 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40007400 	.word	0x40007400
 8000690:	58024400 	.word	0x58024400
 8000694:	58020000 	.word	0x58020000

08000698 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	@ 0x30
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b53      	ldr	r3, [pc, #332]	@ (80007fc <MX_GPIO_Init+0x164>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b4:	4a51      	ldr	r2, [pc, #324]	@ (80007fc <MX_GPIO_Init+0x164>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006be:	4b4f      	ldr	r3, [pc, #316]	@ (80007fc <MX_GPIO_Init+0x164>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
 80006ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006cc:	4b4b      	ldr	r3, [pc, #300]	@ (80007fc <MX_GPIO_Init+0x164>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d2:	4a4a      	ldr	r2, [pc, #296]	@ (80007fc <MX_GPIO_Init+0x164>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006dc:	4b47      	ldr	r3, [pc, #284]	@ (80007fc <MX_GPIO_Init+0x164>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <MX_GPIO_Init+0x164>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f0:	4a42      	ldr	r2, [pc, #264]	@ (80007fc <MX_GPIO_Init+0x164>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006fa:	4b40      	ldr	r3, [pc, #256]	@ (80007fc <MX_GPIO_Init+0x164>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <MX_GPIO_Init+0x164>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070e:	4a3b      	ldr	r2, [pc, #236]	@ (80007fc <MX_GPIO_Init+0x164>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000718:	4b38      	ldr	r3, [pc, #224]	@ (80007fc <MX_GPIO_Init+0x164>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000726:	4b35      	ldr	r3, [pc, #212]	@ (80007fc <MX_GPIO_Init+0x164>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072c:	4a33      	ldr	r2, [pc, #204]	@ (80007fc <MX_GPIO_Init+0x164>)
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000736:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <MX_GPIO_Init+0x164>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073c:	f003 0320 	and.w	r3, r3, #32
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000744:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <MX_GPIO_Init+0x164>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074a:	4a2c      	ldr	r2, [pc, #176]	@ (80007fc <MX_GPIO_Init+0x164>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000754:	4b29      	ldr	r3, [pc, #164]	@ (80007fc <MX_GPIO_Init+0x164>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <MX_GPIO_Init+0x164>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000768:	4a24      	ldr	r2, [pc, #144]	@ (80007fc <MX_GPIO_Init+0x164>)
 800076a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000772:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <MX_GPIO_Init+0x164>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2120      	movs	r1, #32
 8000784:	481e      	ldr	r0, [pc, #120]	@ (8000800 <MX_GPIO_Init+0x168>)
 8000786:	f003 fd91 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	481d      	ldr	r0, [pc, #116]	@ (8000804 <MX_GPIO_Init+0x16c>)
 8000790:	f003 fd8c 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2140      	movs	r1, #64	@ 0x40
 8000798:	481b      	ldr	r0, [pc, #108]	@ (8000808 <MX_GPIO_Init+0x170>)
 800079a:	f003 fd87 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800079e:	2320      	movs	r3, #32
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4812      	ldr	r0, [pc, #72]	@ (8000800 <MX_GPIO_Init+0x168>)
 80007b6:	f003 fbc9 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007c6:	2301      	movs	r3, #1
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	480c      	ldr	r0, [pc, #48]	@ (8000804 <MX_GPIO_Init+0x16c>)
 80007d2:	f003 fbbb 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80007d6:	2340      	movs	r3, #64	@ 0x40
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007e2:	2301      	movs	r3, #1
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_GPIO_Init+0x170>)
 80007ee:	f003 fbad 	bl	8003f4c <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	@ 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58024400 	.word	0x58024400
 8000800:	58020800 	.word	0x58020800
 8000804:	58020400 	.word	0x58020400
 8000808:	58022000 	.word	0x58022000

0800080c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000810:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_I2C1_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_I2C1_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_I2C1_Init+0x74>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	@ (8000888 <MX_I2C1_Init+0x7c>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_I2C1_Init+0x74>)
 8000824:	2201      	movs	r2, #1
 8000826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_I2C1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_I2C1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <MX_I2C1_Init+0x74>)
 8000848:	f003 fd4a 	bl	80042e0 <HAL_I2C_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000852:	f000 fb0b 	bl	8000e6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <MX_I2C1_Init+0x74>)
 800085a:	f003 fdd1 	bl	8004400 <HAL_I2CEx_ConfigAnalogFilter>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000864:	f000 fb02 	bl	8000e6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_I2C1_Init+0x74>)
 800086c:	f003 fe13 	bl	8004496 <HAL_I2CEx_ConfigDigitalFilter>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 faf9 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	240001e8 	.word	0x240001e8
 8000884:	40005400 	.word	0x40005400
 8000888:	307075b1 	.word	0x307075b1

0800088c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0ba      	sub	sp, #232	@ 0xe8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	22c0      	movs	r2, #192	@ 0xc0
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f00f fc07 	bl	80100c0 <memset>
  if(i2cHandle->Instance==I2C1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a26      	ldr	r2, [pc, #152]	@ (8000950 <HAL_I2C_MspInit+0xc4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d145      	bne.n	8000948 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008bc:	f04f 0208 	mov.w	r2, #8
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4618      	mov	r0, r3
 80008d4:	f006 f940 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80008de:	f000 fac5 	bl	8000e6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <HAL_I2C_MspInit+0xc8>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000954 <HAL_I2C_MspInit+0xc8>)
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_I2C_MspInit+0xc8>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000900:	23c0      	movs	r3, #192	@ 0xc0
 8000902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000918:	2304      	movs	r3, #4
 800091a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	@ (8000958 <HAL_I2C_MspInit+0xcc>)
 8000926:	f003 fb11 	bl	8003f4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_I2C_MspInit+0xc8>)
 800092c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000930:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <HAL_I2C_MspInit+0xc8>)
 8000932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000936:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_I2C_MspInit+0xc8>)
 800093c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000948:	bf00      	nop
 800094a:	37e8      	adds	r7, #232	@ 0xe8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40005400 	.word	0x40005400
 8000954:	58024400 	.word	0x58024400
 8000958:	58020400 	.word	0x58020400

0800095c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0a4      	sub	sp, #144	@ 0x90
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000962:	f000 f9c7 	bl	8000cf4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000966:	4b80      	ldr	r3, [pc, #512]	@ (8000b68 <main+0x20c>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11b      	bne.n	80009aa <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000972:	f3bf 8f4f 	dsb	sy
}
 8000976:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000978:	f3bf 8f6f 	isb	sy
}
 800097c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800097e:	4b7a      	ldr	r3, [pc, #488]	@ (8000b68 <main+0x20c>)
 8000980:	2200      	movs	r2, #0
 8000982:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000986:	f3bf 8f4f 	dsb	sy
}
 800098a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098c:	f3bf 8f6f 	isb	sy
}
 8000990:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000992:	4b75      	ldr	r3, [pc, #468]	@ (8000b68 <main+0x20c>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a74      	ldr	r2, [pc, #464]	@ (8000b68 <main+0x20c>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800099e:	f3bf 8f4f 	dsb	sy
}
 80009a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a4:	f3bf 8f6f 	isb	sy
}
 80009a8:	e000      	b.n	80009ac <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009aa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009ac:	4b6e      	ldr	r3, [pc, #440]	@ (8000b68 <main+0x20c>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d143      	bne.n	8000a40 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009b8:	4b6b      	ldr	r3, [pc, #428]	@ (8000b68 <main+0x20c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009c0:	f3bf 8f4f 	dsb	sy
}
 80009c4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009c6:	4b68      	ldr	r3, [pc, #416]	@ (8000b68 <main+0x20c>)
 80009c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009d4:	0b5b      	lsrs	r3, r3, #13
 80009d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009f0:	015a      	lsls	r2, r3, #5
 80009f2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80009f6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80009fc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009fe:	495a      	ldr	r1, [pc, #360]	@ (8000b68 <main+0x20c>)
 8000a00:	4313      	orrs	r3, r2
 8000a02:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1eb      	bne.n	80009ec <main+0x90>
    } while(sets-- != 0U);
 8000a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1dd      	bne.n	80009de <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a22:	f3bf 8f4f 	dsb	sy
}
 8000a26:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a28:	4b4f      	ldr	r3, [pc, #316]	@ (8000b68 <main+0x20c>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8000b68 <main+0x20c>)
 8000a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a32:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a34:	f3bf 8f4f 	dsb	sy
}
 8000a38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a3a:	f3bf 8f6f 	isb	sy
}
 8000a3e:	e000      	b.n	8000a42 <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a40:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f000 fe37 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f8a7 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f7ff fe25 	bl	8000698 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a4e:	f7ff fedd 	bl	800080c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a52:	f000 fc91 	bl	8001378 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000a56:	f000 fcdd 	bl	8001414 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000a5a:	f7ff fc91 	bl	8000380 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000a5e:	f00e fc99 	bl	800f394 <MX_USB_DEVICE_Init>
  MX_DAC1_Init();
 8000a62:	f7ff fd99 	bl	8000598 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000a66:	f000 fa07 	bl	8000e78 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间�?
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000a6a:	2054      	movs	r0, #84	@ 0x54
 8000a6c:	f00f fa52 	bl	800ff14 <malloc>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b3d      	ldr	r3, [pc, #244]	@ (8000b6c <main+0x210>)
 8000a76:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 8000a78:	2020      	movs	r0, #32
 8000a7a:	f00f fa4b 	bl	800ff14 <malloc>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <main+0x214>)
 8000a84:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000a86:	2054      	movs	r0, #84	@ 0x54
 8000a88:	f00f fa44 	bl	800ff14 <malloc>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <main+0x218>)
 8000a92:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8000a94:	2020      	movs	r0, #32
 8000a96:	f00f fa3d 	bl	800ff14 <malloc>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b36      	ldr	r3, [pc, #216]	@ (8000b78 <main+0x21c>)
 8000aa0:	601a      	str	r2, [r3, #0]

  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 串口输出数组
  uint8_t buf[128] = {0};
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	227c      	movs	r2, #124	@ 0x7c
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00f fb06 	bl	80100c0 <memset>
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压�???
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <main+0x210>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8000b70 <main+0x214>)
 8000aba:	6811      	ldr	r1, [r2, #0]
 8000abc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ac0:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8000b7c <main+0x220>
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00e fa0b 	bl	800eee0 <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流�???
 8000aca:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <main+0x218>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a2a      	ldr	r2, [pc, #168]	@ (8000b78 <main+0x21c>)
 8000ad0:	6811      	ldr	r1, [r2, #0]
 8000ad2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ad6:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8000b7c <main+0x220>
 8000ada:	4618      	mov	r0, r3
 8000adc:	f00e fa00 	bl	800eee0 <pll_Init>
  // DAC模拟输出初始化�?
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000ae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4825      	ldr	r0, [pc, #148]	@ (8000b80 <main+0x224>)
 8000aea:	f002 fca1 	bl	8003430 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000aee:	2100      	movs	r1, #0
 8000af0:	4823      	ldr	r0, [pc, #140]	@ (8000b80 <main+0x224>)
 8000af2:	f002 fbf1 	bl	80032d8 <HAL_DAC_Start>
  // ADC校准并开启�?
  HAL_Delay(200);
 8000af6:	20c8      	movs	r0, #200	@ 0xc8
 8000af8:	f000 fe38 	bl	800176c <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000afc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b00:	2100      	movs	r1, #0
 8000b02:	4820      	ldr	r0, [pc, #128]	@ (8000b84 <main+0x228>)
 8000b04:	f002 f928 	bl	8002d58 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线�?�度校准
 8000b08:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000b10:	481c      	ldr	r0, [pc, #112]	@ (8000b84 <main+0x228>)
 8000b12:	f002 f921 	bl	8002d58 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	491b      	ldr	r1, [pc, #108]	@ (8000b88 <main+0x22c>)
 8000b1a:	481a      	ldr	r0, [pc, #104]	@ (8000b84 <main+0x228>)
 8000b1c:	f001 fa06 	bl	8001f2c <HAL_ADC_Start_DMA>
  HAL_Delay(1000);
 8000b20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b24:	f000 fe22 	bl	800176c <HAL_Delay>
  // 打开互补SPWM波�?
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4818      	ldr	r0, [pc, #96]	@ (8000b8c <main+0x230>)
 8000b2c:	f009 fa4c 	bl	8009fc8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8000b30:	2100      	movs	r1, #0
 8000b32:	4816      	ldr	r0, [pc, #88]	@ (8000b8c <main+0x230>)
 8000b34:	f00a fade 	bl	800b0f4 <HAL_TIMEx_PWMN_Start>
  // OLED初始�?
  OLED_Init();
 8000b38:	f00e f948 	bl	800edcc <OLED_Init>
  // �?启中断�?
  HAL_TIM_Base_Start_IT(&htim2);
 8000b3c:	4814      	ldr	r0, [pc, #80]	@ (8000b90 <main+0x234>)
 8000b3e:	f009 f969 	bl	8009e14 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 虚拟串口输出日志
    sprintf((char *)buf, "test");
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4913      	ldr	r1, [pc, #76]	@ (8000b94 <main+0x238>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00f fa9a 	bl	8010080 <siprintf>
    CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2180      	movs	r1, #128	@ 0x80
 8000b50:	4618      	mov	r0, r3
 8000b52:	f00e fcdf 	bl	800f514 <CDC_Transmit_FS>
    OLED_ShowString(0, 0, buf);
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	461a      	mov	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f00e f907 	bl	800ed70 <OLED_ShowString>
    sprintf((char *)buf, "test");
 8000b62:	bf00      	nop
 8000b64:	e7ed      	b.n	8000b42 <main+0x1e6>
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	2400023c 	.word	0x2400023c
 8000b70:	24000240 	.word	0x24000240
 8000b74:	24000244 	.word	0x24000244
 8000b78:	24000248 	.word	0x24000248
 8000b7c:	42480000 	.word	0x42480000
 8000b80:	240001d4 	.word	0x240001d4
 8000b84:	24000170 	.word	0x24000170
 8000b88:	38000000 	.word	0x38000000
 8000b8c:	24000370 	.word	0x24000370
 8000b90:	24000324 	.word	0x24000324
 8000b94:	08010ae0 	.word	0x08010ae0

08000b98 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09e      	sub	sp, #120	@ 0x78
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba2:	224c      	movs	r2, #76	@ 0x4c
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f00f fa8a 	bl	80100c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f00f fa83 	bl	80100c0 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f004 ff70 	bl	8005aa0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b48      	ldr	r3, [pc, #288]	@ (8000ce8 <SystemClock_Config+0x150>)
 8000bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc8:	4a47      	ldr	r2, [pc, #284]	@ (8000ce8 <SystemClock_Config+0x150>)
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bd0:	4b45      	ldr	r3, [pc, #276]	@ (8000ce8 <SystemClock_Config+0x150>)
 8000bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b44      	ldr	r3, [pc, #272]	@ (8000cec <SystemClock_Config+0x154>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a43      	ldr	r2, [pc, #268]	@ (8000cec <SystemClock_Config+0x154>)
 8000be0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b41      	ldr	r3, [pc, #260]	@ (8000cec <SystemClock_Config+0x154>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000bf2:	bf00      	nop
 8000bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cec <SystemClock_Config+0x154>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c00:	d1f8      	bne.n	8000bf4 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf0 <SystemClock_Config+0x158>)
 8000c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c08:	4a39      	ldr	r2, [pc, #228]	@ (8000cf0 <SystemClock_Config+0x158>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c12:	4b37      	ldr	r3, [pc, #220]	@ (8000cf0 <SystemClock_Config+0x158>)
 8000c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	4b31      	ldr	r3, [pc, #196]	@ (8000cec <SystemClock_Config+0x154>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a30      	ldr	r2, [pc, #192]	@ (8000cec <SystemClock_Config+0x154>)
 8000c2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b2e      	ldr	r3, [pc, #184]	@ (8000cec <SystemClock_Config+0x154>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce8 <SystemClock_Config+0x150>)
 8000c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce8 <SystemClock_Config+0x150>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c46:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <SystemClock_Config+0x150>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000c52:	bf00      	nop
 8000c54:	4b25      	ldr	r3, [pc, #148]	@ (8000cec <SystemClock_Config+0x154>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c60:	d1f8      	bne.n	8000c54 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c70:	2302      	movs	r3, #2
 8000c72:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c74:	2305      	movs	r3, #5
 8000c76:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c78:	23c0      	movs	r3, #192	@ 0xc0
 8000c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000c80:	2314      	movs	r3, #20
 8000c82:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 ff4b 	bl	8005b34 <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ca4:	f000 f8e2 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000ca8:	233f      	movs	r3, #63	@ 0x3f
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	2303      	movs	r3, #3
 8000cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cb8:	2340      	movs	r3, #64	@ 0x40
 8000cba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cbc:	2340      	movs	r3, #64	@ 0x40
 8000cbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cc6:	2340      	movs	r3, #64	@ 0x40
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	2104      	movs	r1, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 fb89 	bl	80063e8 <HAL_RCC_ClockConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000cdc:	f000 f8c6 	bl	8000e6c <Error_Handler>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3778      	adds	r7, #120	@ 0x78
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58000400 	.word	0x58000400
 8000cec:	58024800 	.word	0x58024800
 8000cf0:	58024400 	.word	0x58024400

08000cf4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d06:	f002 fa49 	bl	800319c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000d12:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000d16:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d24:	2303      	movs	r3, #3
 8000d26:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fa66 	bl	800320c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000d44:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000d48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d56:	463b      	mov	r3, r7
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fa57 	bl	800320c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f002 fa34 	bl	80031cc <HAL_MPU_Enable>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a33      	ldr	r2, [pc, #204]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d7e:	f000 fcd5 	bl	800172c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d8a:	d159      	bne.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0xd4>
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	2304      	movs	r3, #4
 8000d92:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	dd1d      	ble.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000daa:	f3bf 8f4f 	dsb	sy
}
 8000dae:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000db0:	4a27      	ldr	r2, [pc, #156]	@ (8000e50 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	3320      	adds	r3, #32
 8000dbc:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3b20      	subs	r3, #32
 8000dc2:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	dcf2      	bgt.n	8000db0 <HAL_TIM_PeriodElapsedCallback+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
 8000dca:	f3bf 8f4f 	dsb	sy
}
 8000dce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd0:	f3bf 8f6f 	isb	sy
}
 8000dd4:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000dd6:	bf00      	nop
  {
    // 缓存adcBuf
    SCB_InvalidateDCache_by_Addr((uint32_t *)adcBuf, sizeof(adcBuf));
    signal_V->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.4f;
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	ee07 3a90 	vmov	s15, r3
 8000de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de4:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000e54 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000de8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000dec:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8000e58 <HAL_TIM_PeriodElapsedCallback+0xec>
 8000df0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df4:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000e60 <HAL_TIM_PeriodElapsedCallback+0xf4>
 8000dfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e00:	edc3 7a00 	vstr	s15, [r3]
    signal_I->u_0 = adcBuf[1] * 3.3f / 65536.0f - 1.4f;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000e06:	885b      	ldrh	r3, [r3, #2]
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e10:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000e54 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000e14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e18:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000e58 <HAL_TIM_PeriodElapsedCallback+0xec>
 8000e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e20:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000e60 <HAL_TIM_PeriodElapsedCallback+0xf4>
 8000e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e2c:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_V, signal_config_V);
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f00e f938 	bl	800f0b0 <pll_Control>
    // __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_1->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
    // DAC模拟输出，便于调试，不需要时可关闭�?
    // HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_1->theta + PI / 2.f) + 2048.f);
  }
  /* USER CODE END Callback 1 */
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40001000 	.word	0x40001000
 8000e4c:	38000000 	.word	0x38000000
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	40533333 	.word	0x40533333
 8000e58:	47800000 	.word	0x47800000
 8000e5c:	2400023c 	.word	0x2400023c
 8000e60:	3fb33333 	.word	0x3fb33333
 8000e64:	24000244 	.word	0x24000244
 8000e68:	24000240 	.word	0x24000240

08000e6c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <Error_Handler+0x8>

08000e78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000e7e:	4a28      	ldr	r2, [pc, #160]	@ (8000f20 <MX_SPI1_Init+0xa8>)
 8000e80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000e84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8a:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e90:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000e92:	2207      	movs	r2, #7
 8000e94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000ea4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ea8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000eca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_SPI1_Init+0xa4>)
 8000f08:	f008 fb24 	bl	8009554 <HAL_SPI_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000f12:	f7ff ffab 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2400024c 	.word	0x2400024c
 8000f20:	40013000 	.word	0x40013000

08000f24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0bc      	sub	sp, #240	@ 0xf0
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	22c0      	movs	r2, #192	@ 0xc0
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00f f8bb 	bl	80100c0 <memset>
  if(spiHandle->Instance==SPI1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a38      	ldr	r2, [pc, #224]	@ (8001030 <HAL_SPI_MspInit+0x10c>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d169      	bne.n	8001028 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 fdf5 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f74:	f7ff ff7a 	bl	8000e6c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f78:	4b2e      	ldr	r3, [pc, #184]	@ (8001034 <HAL_SPI_MspInit+0x110>)
 8000f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001034 <HAL_SPI_MspInit+0x110>)
 8000f80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f88:	4b2a      	ldr	r3, [pc, #168]	@ (8001034 <HAL_SPI_MspInit+0x110>)
 8000f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <HAL_SPI_MspInit+0x110>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9c:	4a25      	ldr	r2, [pc, #148]	@ (8001034 <HAL_SPI_MspInit+0x110>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <HAL_SPI_MspInit+0x110>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <HAL_SPI_MspInit+0x110>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fba:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <HAL_SPI_MspInit+0x110>)
 8000fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_SPI_MspInit+0x110>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8000fd2:	23a0      	movs	r3, #160	@ 0xa0
 8000fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fea:	2305      	movs	r3, #5
 8000fec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4810      	ldr	r0, [pc, #64]	@ (8001038 <HAL_SPI_MspInit+0x114>)
 8000ff8:	f002 ffa8 	bl	8003f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ffc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001000:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001016:	2305      	movs	r3, #5
 8001018:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	@ (800103c <HAL_SPI_MspInit+0x118>)
 8001024:	f002 ff92 	bl	8003f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001028:	bf00      	nop
 800102a:	37f0      	adds	r7, #240	@ 0xf0
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40013000 	.word	0x40013000
 8001034:	58024400 	.word	0x58024400
 8001038:	58020000 	.word	0x58020000
 800103c:	58021800 	.word	0x58021800

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_MspInit+0x30>)
 8001048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800104c:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <HAL_MspInit+0x30>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_MspInit+0x30>)
 8001058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	58024400 	.word	0x58024400

08001074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b090      	sub	sp, #64	@ 0x40
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	d827      	bhi.n	80010d2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001082:	2200      	movs	r2, #0
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	2036      	movs	r0, #54	@ 0x36
 8001088:	f002 f860 	bl	800314c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800108c:	2036      	movs	r0, #54	@ 0x36
 800108e:	f002 f877 	bl	8003180 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001092:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <HAL_InitTick+0xc4>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <HAL_InitTick+0xc8>)
 800109a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800109e:	4a27      	ldr	r2, [pc, #156]	@ (800113c <HAL_InitTick+0xc8>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <HAL_InitTick+0xc8>)
 80010aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b6:	f107 0210 	add.w	r2, r7, #16
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 fd07 	bl	8006ad4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d106      	bne.n	80010de <HAL_InitTick+0x6a>
 80010d0:	e001      	b.n	80010d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e02b      	b.n	800112e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010d6:	f005 fce7 	bl	8006aa8 <HAL_RCC_GetPCLK1Freq>
 80010da:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80010dc:	e004      	b.n	80010e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010de:	f005 fce3 	bl	8006aa8 <HAL_RCC_GetPCLK1Freq>
 80010e2:	4603      	mov	r3, r0
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010ea:	4a15      	ldr	r2, [pc, #84]	@ (8001140 <HAL_InitTick+0xcc>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	0c9b      	lsrs	r3, r3, #18
 80010f2:	3b01      	subs	r3, #1
 80010f4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <HAL_InitTick+0xd0>)
 80010f8:	4a13      	ldr	r2, [pc, #76]	@ (8001148 <HAL_InitTick+0xd4>)
 80010fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <HAL_InitTick+0xd0>)
 80010fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001102:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001104:	4a0f      	ldr	r2, [pc, #60]	@ (8001144 <HAL_InitTick+0xd0>)
 8001106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001108:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_InitTick+0xd0>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_InitTick+0xd0>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001116:	480b      	ldr	r0, [pc, #44]	@ (8001144 <HAL_InitTick+0xd0>)
 8001118:	f008 fe25 	bl	8009d66 <HAL_TIM_Base_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d104      	bne.n	800112c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001122:	4808      	ldr	r0, [pc, #32]	@ (8001144 <HAL_InitTick+0xd0>)
 8001124:	f008 fe76 	bl	8009e14 <HAL_TIM_Base_Start_IT>
 8001128:	4603      	mov	r3, r0
 800112a:	e000      	b.n	800112e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	3740      	adds	r7, #64	@ 0x40
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	24000008 	.word	0x24000008
 800113c:	58024400 	.word	0x58024400
 8001140:	431bde83 	.word	0x431bde83
 8001144:	240002d4 	.word	0x240002d4
 8001148:	40001000 	.word	0x40001000

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <NMI_Handler+0x4>

08001154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <MemManage_Handler+0x4>

08001164 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <UsageFault_Handler+0x4>

08001174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b0:	4802      	ldr	r0, [pc, #8]	@ (80011bc <TIM2_IRQHandler+0x10>)
 80011b2:	f009 f817 	bl	800a1e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	24000324 	.word	0x24000324

080011c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <TIM6_DAC_IRQHandler+0x20>)
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80011ce:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <TIM6_DAC_IRQHandler+0x20>)
 80011d0:	f002 f8d4 	bl	800337c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <TIM6_DAC_IRQHandler+0x24>)
 80011d6:	f009 f805 	bl	800a1e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	240001d4 	.word	0x240001d4
 80011e4:	240002d4 	.word	0x240002d4

080011e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011ec:	4802      	ldr	r0, [pc, #8]	@ (80011f8 <OTG_FS_IRQHandler+0x10>)
 80011ee:	f003 faf7 	bl	80047e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	240018a0 	.word	0x240018a0

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f00e ff60 	bl	80100f0 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	24080000 	.word	0x24080000
 800125c:	00000400 	.word	0x00000400
 8001260:	24000320 	.word	0x24000320
 8001264:	24002118 	.word	0x24002118

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800126c:	4b37      	ldr	r3, [pc, #220]	@ (800134c <SystemInit+0xe4>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001272:	4a36      	ldr	r2, [pc, #216]	@ (800134c <SystemInit+0xe4>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800127c:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <SystemInit+0xe8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	2b06      	cmp	r3, #6
 8001286:	d807      	bhi.n	8001298 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001288:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <SystemInit+0xe8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 030f 	bic.w	r3, r3, #15
 8001290:	4a2f      	ldr	r2, [pc, #188]	@ (8001350 <SystemInit+0xe8>)
 8001292:	f043 0307 	orr.w	r3, r3, #7
 8001296:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001298:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <SystemInit+0xec>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a2d      	ldr	r2, [pc, #180]	@ (8001354 <SystemInit+0xec>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <SystemInit+0xec>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <SystemInit+0xec>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4929      	ldr	r1, [pc, #164]	@ (8001354 <SystemInit+0xec>)
 80012b0:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <SystemInit+0xf0>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b6:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <SystemInit+0xe8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c2:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <SystemInit+0xe8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 030f 	bic.w	r3, r3, #15
 80012ca:	4a21      	ldr	r2, [pc, #132]	@ (8001350 <SystemInit+0xe8>)
 80012cc:	f043 0307 	orr.w	r3, r3, #7
 80012d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012d2:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <SystemInit+0xec>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <SystemInit+0xec>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012de:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <SystemInit+0xec>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <SystemInit+0xec>)
 80012e6:	4a1d      	ldr	r2, [pc, #116]	@ (800135c <SystemInit+0xf4>)
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <SystemInit+0xec>)
 80012ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001360 <SystemInit+0xf8>)
 80012ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <SystemInit+0xec>)
 80012f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <SystemInit+0xfc>)
 80012f4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <SystemInit+0xec>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <SystemInit+0xec>)
 80012fe:	4a19      	ldr	r2, [pc, #100]	@ (8001364 <SystemInit+0xfc>)
 8001300:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <SystemInit+0xec>)
 8001304:	2200      	movs	r2, #0
 8001306:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <SystemInit+0xec>)
 800130a:	4a16      	ldr	r2, [pc, #88]	@ (8001364 <SystemInit+0xfc>)
 800130c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <SystemInit+0xec>)
 8001310:	2200      	movs	r2, #0
 8001312:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <SystemInit+0xec>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0e      	ldr	r2, [pc, #56]	@ (8001354 <SystemInit+0xec>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800131e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <SystemInit+0xec>)
 8001322:	2200      	movs	r2, #0
 8001324:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001326:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <SystemInit+0x100>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <SystemInit+0x104>)
 800132c:	4013      	ands	r3, r2
 800132e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001332:	d202      	bcs.n	800133a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <SystemInit+0x108>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <SystemInit+0x10c>)
 800133c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001340:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	52002000 	.word	0x52002000
 8001354:	58024400 	.word	0x58024400
 8001358:	eaf6ed7f 	.word	0xeaf6ed7f
 800135c:	02020200 	.word	0x02020200
 8001360:	01ff0000 	.word	0x01ff0000
 8001364:	01010280 	.word	0x01010280
 8001368:	5c001000 	.word	0x5c001000
 800136c:	ffff0000 	.word	0xffff0000
 8001370:	51008108 	.word	0x51008108
 8001374:	52004000 	.word	0x52004000

08001378 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001396:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <MX_TIM2_Init+0x98>)
 8001398:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800139c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <MX_TIM2_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <MX_TIM2_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_TIM2_Init+0x98>)
 80013ac:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80013b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <MX_TIM2_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <MX_TIM2_Init+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013be:	4814      	ldr	r0, [pc, #80]	@ (8001410 <MX_TIM2_Init+0x98>)
 80013c0:	f008 fcd1 	bl	8009d66 <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013ca:	f7ff fd4f 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	480d      	ldr	r0, [pc, #52]	@ (8001410 <MX_TIM2_Init+0x98>)
 80013dc:	f009 f936 	bl	800a64c <HAL_TIM_ConfigClockSource>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013e6:	f7ff fd41 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4806      	ldr	r0, [pc, #24]	@ (8001410 <MX_TIM2_Init+0x98>)
 80013f8:	f009 ff3e 	bl	800b278 <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001402:	f7ff fd33 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	24000324 	.word	0x24000324

08001414 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b09a      	sub	sp, #104	@ 0x68
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001434:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	222c      	movs	r2, #44	@ 0x2c
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00e fe36 	bl	80100c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001454:	4b44      	ldr	r3, [pc, #272]	@ (8001568 <MX_TIM8_Init+0x154>)
 8001456:	4a45      	ldr	r2, [pc, #276]	@ (800156c <MX_TIM8_Init+0x158>)
 8001458:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800145a:	4b43      	ldr	r3, [pc, #268]	@ (8001568 <MX_TIM8_Init+0x154>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b41      	ldr	r3, [pc, #260]	@ (8001568 <MX_TIM8_Init+0x154>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 8001466:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <MX_TIM8_Init+0x154>)
 8001468:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800146c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <MX_TIM8_Init+0x154>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001474:	4b3c      	ldr	r3, [pc, #240]	@ (8001568 <MX_TIM8_Init+0x154>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <MX_TIM8_Init+0x154>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001480:	4839      	ldr	r0, [pc, #228]	@ (8001568 <MX_TIM8_Init+0x154>)
 8001482:	f008 fc70 	bl	8009d66 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800148c:	f7ff fcee 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800149a:	4619      	mov	r1, r3
 800149c:	4832      	ldr	r0, [pc, #200]	@ (8001568 <MX_TIM8_Init+0x154>)
 800149e:	f009 f8d5 	bl	800a64c <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80014a8:	f7ff fce0 	bl	8000e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014ac:	482e      	ldr	r0, [pc, #184]	@ (8001568 <MX_TIM8_Init+0x154>)
 80014ae:	f008 fd29 	bl	8009f04 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80014b8:	f7ff fcd8 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014cc:	4619      	mov	r1, r3
 80014ce:	4826      	ldr	r0, [pc, #152]	@ (8001568 <MX_TIM8_Init+0x154>)
 80014d0:	f009 fed2 	bl	800b278 <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80014da:	f7ff fcc7 	bl	8000e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014de:	2360      	movs	r3, #96	@ 0x60
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 6000;
 80014e2:	f241 7370 	movw	r3, #6000	@ 0x1770
 80014e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014f0:	2304      	movs	r3, #4
 80014f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	4818      	ldr	r0, [pc, #96]	@ (8001568 <MX_TIM8_Init+0x154>)
 8001506:	f008 ff8d 	bl	800a424 <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001510:	f7ff fcac 	bl	8000e6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800152c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	@ (8001568 <MX_TIM8_Init+0x154>)
 800154a:	f009 ff23 	bl	800b394 <HAL_TIMEx_ConfigBreakDeadTime>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001554:	f7ff fc8a 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001558:	4803      	ldr	r0, [pc, #12]	@ (8001568 <MX_TIM8_Init+0x154>)
 800155a:	f000 f847 	bl	80015ec <HAL_TIM_MspPostInit>

}
 800155e:	bf00      	nop
 8001560:	3768      	adds	r7, #104	@ 0x68
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	24000370 	.word	0x24000370
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001580:	d117      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001582:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 8001584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001588:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 8001594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	201c      	movs	r0, #28
 80015a6:	f001 fdd1 	bl	800314c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015aa:	201c      	movs	r0, #28
 80015ac:	f001 fde8 	bl	8003180 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80015b0:	e013      	b.n	80015da <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM8)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <HAL_TIM_Base_MspInit+0x78>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d10e      	bne.n	80015da <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 80015be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015c2:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 80015ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	58024400 	.word	0x58024400
 80015e8:	40010400 	.word	0x40010400

080015ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <HAL_TIM_MspPostInit+0x68>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d11e      	bne.n	800164c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <HAL_TIM_MspPostInit+0x6c>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_TIM_MspPostInit+0x6c>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800162c:	2340      	movs	r3, #64	@ 0x40
 800162e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800163c:	2303      	movs	r3, #3
 800163e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	4619      	mov	r1, r3
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <HAL_TIM_MspPostInit+0x70>)
 8001648:	f002 fc80 	bl	8003f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40010400 	.word	0x40010400
 8001658:	58024400 	.word	0x58024400
 800165c:	58020800 	.word	0x58020800

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001698 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001664:	f7ff fe00 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	@ (80016a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	@ (80016ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f00e fd35 	bl	80100fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff f963 	bl	800095c <main>
  bx  lr
 8001696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800169c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016a0:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 80016a4:	08011988 	.word	0x08011988
  ldr r2, =_sbss
 80016a8:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 80016ac:	24002114 	.word	0x24002114

080016b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC3_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ba:	2003      	movs	r0, #3
 80016bc:	f001 fd3b 	bl	8003136 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016c0:	f005 f848 	bl	8006754 <HAL_RCC_GetSysClockFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <HAL_Init+0x68>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	4913      	ldr	r1, [pc, #76]	@ (8001720 <HAL_Init+0x6c>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <HAL_Init+0x68>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001720 <HAL_Init+0x6c>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <HAL_Init+0x70>)
 80016f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_Init+0x74>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fe:	200f      	movs	r0, #15
 8001700:	f7ff fcb8 	bl	8001074 <HAL_InitTick>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e002      	b.n	8001714 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800170e:	f7ff fc97 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	58024400 	.word	0x58024400
 8001720:	08010b30 	.word	0x08010b30
 8001724:	24000004 	.word	0x24000004
 8001728:	24000000 	.word	0x24000000

0800172c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2400000c 	.word	0x2400000c
 8001750:	240003bc 	.word	0x240003bc

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	240003bc 	.word	0x240003bc

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff ffee 	bl	8001754 <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffde 	bl	8001754 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2400000c 	.word	0x2400000c

080017b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <HAL_GetREVID+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0c1b      	lsrs	r3, r3, #16
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	5c001000 	.word	0x5c001000

080017cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	609a      	str	r2, [r3, #8]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	609a      	str	r2, [r3, #8]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3360      	adds	r3, #96	@ 0x60
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	430b      	orrs	r3, r1
 8001862:	431a      	orrs	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001868:	bf00      	nop
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	431a      	orrs	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	611a      	str	r2, [r3, #16]
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b087      	sub	sp, #28
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3360      	adds	r3, #96	@ 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]
  }
}
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001902:	b480      	push	{r7}
 8001904:	b087      	sub	sp, #28
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3330      	adds	r3, #48	@ 0x30
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	4413      	add	r3, r2
 8001920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	211f      	movs	r1, #31
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	401a      	ands	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	f003 011f 	and.w	r1, r3, #31
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f023 0203 	bic.w	r2, r3, #3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	60da      	str	r2, [r3, #12]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3314      	adds	r3, #20
 8001990:	461a      	mov	r2, r3
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	0e5b      	lsrs	r3, r3, #25
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	4413      	add	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	0d1b      	lsrs	r3, r3, #20
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2107      	movs	r1, #7
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	401a      	ands	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	0d1b      	lsrs	r3, r3, #20
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019f0:	43db      	mvns	r3, r3
 80019f2:	401a      	ands	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0318 	and.w	r3, r3, #24
 80019fa:	4908      	ldr	r1, [pc, #32]	@ (8001a1c <LL_ADC_SetChannelSingleDiff+0x44>)
 80019fc:	40d9      	lsrs	r1, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	400b      	ands	r3, r1
 8001a02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a06:	431a      	orrs	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	000fffff 	.word	0x000fffff

08001a20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6093      	str	r3, [r2, #8]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	5fffffc0 	.word	0x5fffffc0

08001a60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <LL_ADC_EnableInternalRegulator+0x24>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	6fffffc0 	.word	0x6fffffc0

08001ab0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ac4:	d101      	bne.n	8001aca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <LL_ADC_Enable+0x24>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	7fffffc0 	.word	0x7fffffc0

08001b00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <LL_ADC_Disable+0x24>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	f043 0202 	orr.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	7fffffc0 	.word	0x7fffffc0

08001b28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <LL_ADC_IsEnabled+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_ADC_IsEnabled+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d101      	bne.n	8001b66 <LL_ADC_IsDisableOngoing+0x18>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <LL_ADC_IsDisableOngoing+0x1a>
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <LL_ADC_REG_StartConversion+0x24>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	f043 0204 	orr.w	r2, r3, #4
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	7fffffc0 	.word	0x7fffffc0

08001b9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d101      	bne.n	8001bb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d101      	bne.n	8001bda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e18f      	b.n	8001f22 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7fe fc2d 	bl	8000470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff19 	bl	8001a60 <LL_ADC_IsDeepPowerDownEnabled>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d004      	beq.n	8001c3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff feff 	bl	8001a3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff34 	bl	8001ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d114      	bne.n	8001c78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff18 	bl	8001a88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c58:	4b87      	ldr	r3, [pc, #540]	@ (8001e78 <HAL_ADC_Init+0x290>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	4a87      	ldr	r2, [pc, #540]	@ (8001e7c <HAL_ADC_Init+0x294>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	3301      	adds	r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c6a:	e002      	b.n	8001c72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff17 	bl	8001ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8c:	f043 0210 	orr.w	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff77 	bl	8001b9c <LL_ADC_REG_IsConversionOngoing>
 8001cae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 8129 	bne.w	8001f10 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 8125 	bne.w	8001f10 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cce:	f043 0202 	orr.w	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff24 	bl	8001b28 <LL_ADC_IsEnabled>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d136      	bne.n	8001d54 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a65      	ldr	r2, [pc, #404]	@ (8001e80 <HAL_ADC_Init+0x298>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d004      	beq.n	8001cfa <HAL_ADC_Init+0x112>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a63      	ldr	r2, [pc, #396]	@ (8001e84 <HAL_ADC_Init+0x29c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10e      	bne.n	8001d18 <HAL_ADC_Init+0x130>
 8001cfa:	4861      	ldr	r0, [pc, #388]	@ (8001e80 <HAL_ADC_Init+0x298>)
 8001cfc:	f7ff ff14 	bl	8001b28 <LL_ADC_IsEnabled>
 8001d00:	4604      	mov	r4, r0
 8001d02:	4860      	ldr	r0, [pc, #384]	@ (8001e84 <HAL_ADC_Init+0x29c>)
 8001d04:	f7ff ff10 	bl	8001b28 <LL_ADC_IsEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4323      	orrs	r3, r4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e008      	b.n	8001d2a <HAL_ADC_Init+0x142>
 8001d18:	485b      	ldr	r0, [pc, #364]	@ (8001e88 <HAL_ADC_Init+0x2a0>)
 8001d1a:	f7ff ff05 	bl	8001b28 <LL_ADC_IsEnabled>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d012      	beq.n	8001d54 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a53      	ldr	r2, [pc, #332]	@ (8001e80 <HAL_ADC_Init+0x298>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d004      	beq.n	8001d42 <HAL_ADC_Init+0x15a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a51      	ldr	r2, [pc, #324]	@ (8001e84 <HAL_ADC_Init+0x29c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Init+0x15e>
 8001d42:	4a52      	ldr	r2, [pc, #328]	@ (8001e8c <HAL_ADC_Init+0x2a4>)
 8001d44:	e000      	b.n	8001d48 <HAL_ADC_Init+0x160>
 8001d46:	4a52      	ldr	r2, [pc, #328]	@ (8001e90 <HAL_ADC_Init+0x2a8>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f7ff fd3c 	bl	80017cc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d54:	f7ff fd2e 	bl	80017b4 <HAL_GetREVID>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d914      	bls.n	8001d8c <HAL_ADC_Init+0x1a4>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d110      	bne.n	8001d8c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7d5b      	ldrb	r3, [r3, #21]
 8001d6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7f1b      	ldrb	r3, [r3, #28]
 8001d80:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d82:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d84:	f043 030c 	orr.w	r3, r3, #12
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	e00d      	b.n	8001da8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7d5b      	ldrb	r3, [r3, #21]
 8001d90:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d96:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d9c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7f1b      	ldrb	r3, [r3, #28]
 8001da2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7f1b      	ldrb	r3, [r3, #28]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d106      	bne.n	8001dbe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	045b      	lsls	r3, r3, #17
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <HAL_ADC_Init+0x2ac>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	69b9      	ldr	r1, [r7, #24]
 8001dea:	430b      	orrs	r3, r1
 8001dec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fed2 	bl	8001b9c <LL_ADC_REG_IsConversionOngoing>
 8001df8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fedf 	bl	8001bc2 <LL_ADC_INJ_IsConversionOngoing>
 8001e04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d15f      	bne.n	8001ecc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d15c      	bne.n	8001ecc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7d1b      	ldrb	r3, [r3, #20]
 8001e16:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <HAL_ADC_Init+0x2b0>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d130      	bne.n	8001ea0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <HAL_ADC_Init+0x2b4>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e52:	3a01      	subs	r2, #1
 8001e54:	0411      	lsls	r1, r2, #16
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e66:	430a      	orrs	r2, r1
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	611a      	str	r2, [r3, #16]
 8001e74:	e01c      	b.n	8001eb0 <HAL_ADC_Init+0x2c8>
 8001e76:	bf00      	nop
 8001e78:	24000000 	.word	0x24000000
 8001e7c:	053e2d63 	.word	0x053e2d63
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40022100 	.word	0x40022100
 8001e88:	58026000 	.word	0x58026000
 8001e8c:	40022300 	.word	0x40022300
 8001e90:	58026300 	.word	0x58026300
 8001e94:	fff0c003 	.word	0xfff0c003
 8001e98:	ffffbffc 	.word	0xffffbffc
 8001e9c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fde0 	bl	8002a8c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10c      	bne.n	8001eee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f023 010f 	bic.w	r1, r3, #15
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eec:	e007      	b.n	8001efe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 020f 	bic.w	r2, r2, #15
 8001efc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f0e:	e007      	b.n	8001f20 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f14:	f043 0210 	orr.w	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	bf00      	nop

08001f2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a55      	ldr	r2, [pc, #340]	@ (8002094 <HAL_ADC_Start_DMA+0x168>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d004      	beq.n	8001f4c <HAL_ADC_Start_DMA+0x20>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a54      	ldr	r2, [pc, #336]	@ (8002098 <HAL_ADC_Start_DMA+0x16c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_Start_DMA+0x24>
 8001f4c:	4b53      	ldr	r3, [pc, #332]	@ (800209c <HAL_ADC_Start_DMA+0x170>)
 8001f4e:	e000      	b.n	8001f52 <HAL_ADC_Start_DMA+0x26>
 8001f50:	4b53      	ldr	r3, [pc, #332]	@ (80020a0 <HAL_ADC_Start_DMA+0x174>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fd64 	bl	8001a20 <LL_ADC_GetMultimode>
 8001f58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fe1c 	bl	8001b9c <LL_ADC_REG_IsConversionOngoing>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 808c 	bne.w	8002084 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_Start_DMA+0x4e>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e087      	b.n	800208a <HAL_ADC_Start_DMA+0x15e>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d002      	beq.n	8001f94 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d170      	bne.n	8002076 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fbfb 	bl	8002790 <ADC_Enable>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d163      	bne.n	800206c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80020a4 <HAL_ADC_Start_DMA+0x178>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a37      	ldr	r2, [pc, #220]	@ (8002098 <HAL_ADC_Start_DMA+0x16c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d002      	beq.n	8001fc4 <HAL_ADC_Start_DMA+0x98>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e000      	b.n	8001fc6 <HAL_ADC_Start_DMA+0x9a>
 8001fc4:	4b33      	ldr	r3, [pc, #204]	@ (8002094 <HAL_ADC_Start_DMA+0x168>)
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d002      	beq.n	8001fd4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff0:	f023 0206 	bic.w	r2, r3, #6
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ff8:	e002      	b.n	8002000 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	4a28      	ldr	r2, [pc, #160]	@ (80020a8 <HAL_ADC_Start_DMA+0x17c>)
 8002006:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200c:	4a27      	ldr	r2, [pc, #156]	@ (80020ac <HAL_ADC_Start_DMA+0x180>)
 800200e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002014:	4a26      	ldr	r2, [pc, #152]	@ (80020b0 <HAL_ADC_Start_DMA+0x184>)
 8002016:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	221c      	movs	r2, #28
 800201e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0210 	orr.w	r2, r2, #16
 8002036:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f7ff fc89 	bl	800195a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3340      	adds	r3, #64	@ 0x40
 8002052:	4619      	mov	r1, r3
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f001 fb62 	bl	8003720 <HAL_DMA_Start_IT>
 800205c:	4603      	mov	r3, r0
 800205e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fd85 	bl	8001b74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800206a:	e00d      	b.n	8002088 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002074:	e008      	b.n	8002088 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002082:	e001      	b.n	8002088 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002084:	2302      	movs	r3, #2
 8002086:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002088:	7dfb      	ldrb	r3, [r7, #23]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000
 8002098:	40022100 	.word	0x40022100
 800209c:	40022300 	.word	0x40022300
 80020a0:	58026300 	.word	0x58026300
 80020a4:	fffff0fe 	.word	0xfffff0fe
 80020a8:	08002963 	.word	0x08002963
 80020ac:	08002a3b 	.word	0x08002a3b
 80020b0:	08002a57 	.word	0x08002a57

080020b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b0a1      	sub	sp, #132	@ 0x84
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a9d      	ldr	r2, [pc, #628]	@ (8002380 <HAL_ADC_ConfigChannel+0x290>)
 800210a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x2a>
 8002116:	2302      	movs	r3, #2
 8002118:	e321      	b.n	800275e <HAL_ADC_ConfigChannel+0x66e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fd38 	bl	8001b9c <LL_ADC_REG_IsConversionOngoing>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 8306 	bne.w	8002740 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800213c:	2b00      	cmp	r3, #0
 800213e:	d108      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x62>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2201      	movs	r2, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	e016      	b.n	8002180 <HAL_ADC_ConfigChannel+0x90>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002160:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002162:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e003      	b.n	8002176 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800216e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	2201      	movs	r2, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	69d1      	ldr	r1, [r2, #28]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	430b      	orrs	r3, r1
 800218c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	f7ff fbb1 	bl	8001902 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fcf9 	bl	8001b9c <LL_ADC_REG_IsConversionOngoing>
 80021aa:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fd06 	bl	8001bc2 <LL_ADC_INJ_IsConversionOngoing>
 80021b6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80b3 	bne.w	8002326 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 80af 	bne.w	8002326 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	461a      	mov	r2, r3
 80021d6:	f7ff fbd3 	bl	8001980 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021da:	4b6a      	ldr	r3, [pc, #424]	@ (8002384 <HAL_ADC_ConfigChannel+0x294>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80021e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021e6:	d10b      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x110>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	e01d      	b.n	800223c <HAL_ADC_ConfigChannel+0x14c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10b      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x136>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	e00a      	b.n	800223c <HAL_ADC_ConfigChannel+0x14c>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b04      	cmp	r3, #4
 8002244:	d027      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002254:	f7ff faee 	bl	8001834 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6919      	ldr	r1, [r3, #16]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	7e5b      	ldrb	r3, [r3, #25]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d102      	bne.n	800226e <HAL_ADC_ConfigChannel+0x17e>
 8002268:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800226c:	e000      	b.n	8002270 <HAL_ADC_ConfigChannel+0x180>
 800226e:	2300      	movs	r3, #0
 8002270:	461a      	mov	r2, r3
 8002272:	f7ff fb18 	bl	80018a6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6919      	ldr	r1, [r3, #16]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	7e1b      	ldrb	r3, [r3, #24]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <HAL_ADC_ConfigChannel+0x19c>
 8002286:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800228a:	e000      	b.n	800228e <HAL_ADC_ConfigChannel+0x19e>
 800228c:	2300      	movs	r3, #0
 800228e:	461a      	mov	r2, r3
 8002290:	f7ff faf0 	bl	8001874 <LL_ADC_SetDataRightShift>
 8002294:	e047      	b.n	8002326 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	069b      	lsls	r3, r3, #26
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d107      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022b8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	069b      	lsls	r3, r3, #26
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d107      	bne.n	80022de <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022dc:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	069b      	lsls	r3, r3, #26
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d107      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002300:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002308:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	069b      	lsls	r3, r3, #26
 8002312:	429a      	cmp	r2, r3
 8002314:	d107      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002324:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fbfc 	bl	8001b28 <LL_ADC_IsEnabled>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 820d 	bne.w	8002752 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6819      	ldr	r1, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	461a      	mov	r2, r3
 8002346:	f7ff fb47 	bl	80019d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4a0c      	ldr	r2, [pc, #48]	@ (8002380 <HAL_ADC_ConfigChannel+0x290>)
 8002350:	4293      	cmp	r3, r2
 8002352:	f040 8133 	bne.w	80025bc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002362:	2b00      	cmp	r3, #0
 8002364:	d110      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x298>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	3301      	adds	r3, #1
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2b09      	cmp	r3, #9
 8002374:	bf94      	ite	ls
 8002376:	2301      	movls	r3, #1
 8002378:	2300      	movhi	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	e01e      	b.n	80023bc <HAL_ADC_ConfigChannel+0x2cc>
 800237e:	bf00      	nop
 8002380:	47ff0000 	.word	0x47ff0000
 8002384:	5c001000 	.word	0x5c001000
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002398:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800239a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e003      	b.n	80023ac <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80023a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	bf94      	ite	ls
 80023b6:	2301      	movls	r3, #1
 80023b8:	2300      	movhi	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d079      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d107      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x2ec>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	3301      	adds	r3, #1
 80023d4:	069b      	lsls	r3, r3, #26
 80023d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023da:	e015      	b.n	8002408 <HAL_ADC_ConfigChannel+0x318>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80023ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80023ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e003      	b.n	8002400 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3301      	adds	r3, #1
 8002402:	069b      	lsls	r3, r3, #26
 8002404:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x338>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	2101      	movs	r1, #1
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	e017      	b.n	8002458 <HAL_ADC_ConfigChannel+0x368>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002438:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800243a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002440:	2320      	movs	r3, #32
 8002442:	e003      	b.n	800244c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2101      	movs	r1, #1
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	ea42 0103 	orr.w	r1, r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <HAL_ADC_ConfigChannel+0x38e>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0e9b      	lsrs	r3, r3, #26
 800246e:	3301      	adds	r3, #1
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	051b      	lsls	r3, r3, #20
 800247c:	e018      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x3c0>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b0:	430b      	orrs	r3, r1
 80024b2:	e07e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x3e0>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	3301      	adds	r3, #1
 80024c8:	069b      	lsls	r3, r3, #26
 80024ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ce:	e015      	b.n	80024fc <HAL_ADC_ConfigChannel+0x40c>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80024e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80024e8:	2320      	movs	r3, #32
 80024ea:	e003      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80024ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_ADC_ConfigChannel+0x42c>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	e017      	b.n	800254c <HAL_ADC_ConfigChannel+0x45c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	61bb      	str	r3, [r7, #24]
  return result;
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e003      	b.n	8002540 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	ea42 0103 	orr.w	r1, r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10d      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x488>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	3301      	adds	r3, #1
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	3b1e      	subs	r3, #30
 8002570:	051b      	lsls	r3, r3, #20
 8002572:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002576:	e01b      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x4c0>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	60fb      	str	r3, [r7, #12]
  return result;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002590:	2320      	movs	r3, #32
 8002592:	e003      	b.n	800259c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f003 021f 	and.w	r2, r3, #31
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	3b1e      	subs	r3, #30
 80025aa:	051b      	lsls	r3, r3, #20
 80025ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b0:	430b      	orrs	r3, r1
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	4619      	mov	r1, r3
 80025b8:	f7ff f9e2 	bl	8001980 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f280 80c6 	bge.w	8002752 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a67      	ldr	r2, [pc, #412]	@ (8002768 <HAL_ADC_ConfigChannel+0x678>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d004      	beq.n	80025da <HAL_ADC_ConfigChannel+0x4ea>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a65      	ldr	r2, [pc, #404]	@ (800276c <HAL_ADC_ConfigChannel+0x67c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x4ee>
 80025da:	4b65      	ldr	r3, [pc, #404]	@ (8002770 <HAL_ADC_ConfigChannel+0x680>)
 80025dc:	e000      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x4f0>
 80025de:	4b65      	ldr	r3, [pc, #404]	@ (8002774 <HAL_ADC_ConfigChannel+0x684>)
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff f919 	bl	8001818 <LL_ADC_GetCommonPathInternalCh>
 80025e6:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5e      	ldr	r2, [pc, #376]	@ (8002768 <HAL_ADC_ConfigChannel+0x678>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_ADC_ConfigChannel+0x50c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a5d      	ldr	r2, [pc, #372]	@ (800276c <HAL_ADC_ConfigChannel+0x67c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d10e      	bne.n	800261a <HAL_ADC_ConfigChannel+0x52a>
 80025fc:	485a      	ldr	r0, [pc, #360]	@ (8002768 <HAL_ADC_ConfigChannel+0x678>)
 80025fe:	f7ff fa93 	bl	8001b28 <LL_ADC_IsEnabled>
 8002602:	4604      	mov	r4, r0
 8002604:	4859      	ldr	r0, [pc, #356]	@ (800276c <HAL_ADC_ConfigChannel+0x67c>)
 8002606:	f7ff fa8f 	bl	8001b28 <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	4323      	orrs	r3, r4
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	e008      	b.n	800262c <HAL_ADC_ConfigChannel+0x53c>
 800261a:	4857      	ldr	r0, [pc, #348]	@ (8002778 <HAL_ADC_ConfigChannel+0x688>)
 800261c:	f7ff fa84 	bl	8001b28 <LL_ADC_IsEnabled>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d07d      	beq.n	800272c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a51      	ldr	r2, [pc, #324]	@ (800277c <HAL_ADC_ConfigChannel+0x68c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d130      	bne.n	800269c <HAL_ADC_ConfigChannel+0x5ac>
 800263a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d12b      	bne.n	800269c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a4b      	ldr	r2, [pc, #300]	@ (8002778 <HAL_ADC_ConfigChannel+0x688>)
 800264a:	4293      	cmp	r3, r2
 800264c:	f040 8081 	bne.w	8002752 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a44      	ldr	r2, [pc, #272]	@ (8002768 <HAL_ADC_ConfigChannel+0x678>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_ADC_ConfigChannel+0x574>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a43      	ldr	r2, [pc, #268]	@ (800276c <HAL_ADC_ConfigChannel+0x67c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x578>
 8002664:	4a42      	ldr	r2, [pc, #264]	@ (8002770 <HAL_ADC_ConfigChannel+0x680>)
 8002666:	e000      	b.n	800266a <HAL_ADC_ConfigChannel+0x57a>
 8002668:	4a42      	ldr	r2, [pc, #264]	@ (8002774 <HAL_ADC_ConfigChannel+0x684>)
 800266a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800266c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f7ff f8bd 	bl	80017f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002678:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_ADC_ConfigChannel+0x690>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	4a41      	ldr	r2, [pc, #260]	@ (8002784 <HAL_ADC_ConfigChannel+0x694>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800268c:	e002      	b.n	8002694 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3b01      	subs	r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f9      	bne.n	800268e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800269a:	e05a      	b.n	8002752 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a39      	ldr	r2, [pc, #228]	@ (8002788 <HAL_ADC_ConfigChannel+0x698>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d11e      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x5f4>
 80026a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d119      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a30      	ldr	r2, [pc, #192]	@ (8002778 <HAL_ADC_ConfigChannel+0x688>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d14b      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2a      	ldr	r2, [pc, #168]	@ (8002768 <HAL_ADC_ConfigChannel+0x678>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d004      	beq.n	80026ce <HAL_ADC_ConfigChannel+0x5de>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a28      	ldr	r2, [pc, #160]	@ (800276c <HAL_ADC_ConfigChannel+0x67c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x5e2>
 80026ce:	4a28      	ldr	r2, [pc, #160]	@ (8002770 <HAL_ADC_ConfigChannel+0x680>)
 80026d0:	e000      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x5e4>
 80026d2:	4a28      	ldr	r2, [pc, #160]	@ (8002774 <HAL_ADC_ConfigChannel+0x684>)
 80026d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026da:	4619      	mov	r1, r3
 80026dc:	4610      	mov	r0, r2
 80026de:	f7ff f888 	bl	80017f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e2:	e036      	b.n	8002752 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a28      	ldr	r2, [pc, #160]	@ (800278c <HAL_ADC_ConfigChannel+0x69c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d131      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x662>
 80026ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d12c      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002778 <HAL_ADC_ConfigChannel+0x688>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d127      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a18      	ldr	r2, [pc, #96]	@ (8002768 <HAL_ADC_ConfigChannel+0x678>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x626>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a16      	ldr	r2, [pc, #88]	@ (800276c <HAL_ADC_ConfigChannel+0x67c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x62a>
 8002716:	4a16      	ldr	r2, [pc, #88]	@ (8002770 <HAL_ADC_ConfigChannel+0x680>)
 8002718:	e000      	b.n	800271c <HAL_ADC_ConfigChannel+0x62c>
 800271a:	4a16      	ldr	r2, [pc, #88]	@ (8002774 <HAL_ADC_ConfigChannel+0x684>)
 800271c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800271e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f7ff f864 	bl	80017f2 <LL_ADC_SetCommonPathInternalCh>
 800272a:	e012      	b.n	8002752 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800273e:	e008      	b.n	8002752 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800275a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800275e:	4618      	mov	r0, r3
 8002760:	3784      	adds	r7, #132	@ 0x84
 8002762:	46bd      	mov	sp, r7
 8002764:	bd90      	pop	{r4, r7, pc}
 8002766:	bf00      	nop
 8002768:	40022000 	.word	0x40022000
 800276c:	40022100 	.word	0x40022100
 8002770:	40022300 	.word	0x40022300
 8002774:	58026300 	.word	0x58026300
 8002778:	58026000 	.word	0x58026000
 800277c:	cb840000 	.word	0xcb840000
 8002780:	24000000 	.word	0x24000000
 8002784:	053e2d63 	.word	0x053e2d63
 8002788:	c7520000 	.word	0xc7520000
 800278c:	cfb80000 	.word	0xcfb80000

08002790 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f9c3 	bl	8001b28 <LL_ADC_IsEnabled>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d16e      	bne.n	8002886 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	4b38      	ldr	r3, [pc, #224]	@ (8002890 <ADC_Enable+0x100>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ba:	f043 0210 	orr.w	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e05a      	b.n	8002888 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff f97e 	bl	8001ad8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027dc:	f7fe ffba 	bl	8001754 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002894 <ADC_Enable+0x104>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <ADC_Enable+0x66>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a29      	ldr	r2, [pc, #164]	@ (8002898 <ADC_Enable+0x108>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <ADC_Enable+0x6a>
 80027f6:	4b29      	ldr	r3, [pc, #164]	@ (800289c <ADC_Enable+0x10c>)
 80027f8:	e000      	b.n	80027fc <ADC_Enable+0x6c>
 80027fa:	4b29      	ldr	r3, [pc, #164]	@ (80028a0 <ADC_Enable+0x110>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f90f 	bl	8001a20 <LL_ADC_GetMultimode>
 8002802:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <ADC_Enable+0x108>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d002      	beq.n	8002814 <ADC_Enable+0x84>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	e000      	b.n	8002816 <ADC_Enable+0x86>
 8002814:	4b1f      	ldr	r3, [pc, #124]	@ (8002894 <ADC_Enable+0x104>)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	4293      	cmp	r3, r2
 800281c:	d02c      	beq.n	8002878 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d130      	bne.n	8002886 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002824:	e028      	b.n	8002878 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f97c 	bl	8001b28 <LL_ADC_IsEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d104      	bne.n	8002840 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f94c 	bl	8001ad8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002840:	f7fe ff88 	bl	8001754 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d914      	bls.n	8002878 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d00d      	beq.n	8002878 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002860:	f043 0210 	orr.w	r2, r3, #16
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e007      	b.n	8002888 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b01      	cmp	r3, #1
 8002884:	d1cf      	bne.n	8002826 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	8000003f 	.word	0x8000003f
 8002894:	40022000 	.word	0x40022000
 8002898:	40022100 	.word	0x40022100
 800289c:	40022300 	.word	0x40022300
 80028a0:	58026300 	.word	0x58026300

080028a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f94c 	bl	8001b4e <LL_ADC_IsDisableOngoing>
 80028b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff f933 	bl	8001b28 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d047      	beq.n	8002958 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d144      	bne.n	8002958 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030d 	and.w	r3, r3, #13
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10c      	bne.n	80028f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f90d 	bl	8001b00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2203      	movs	r2, #3
 80028ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ee:	f7fe ff31 	bl	8001754 <HAL_GetTick>
 80028f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028f4:	e029      	b.n	800294a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e023      	b.n	800295a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002912:	f7fe ff1f 	bl	8001754 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d914      	bls.n	800294a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e007      	b.n	800295a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1dc      	bne.n	8002912 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002974:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002978:	2b00      	cmp	r3, #0
 800297a:	d14b      	bne.n	8002a14 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002980:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d021      	beq.n	80029da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe ff9e 	bl	80018dc <LL_ADC_REG_IsTriggerSourceSWStart>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d032      	beq.n	8002a0c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d12b      	bne.n	8002a0c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11f      	bne.n	8002a0c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80029d8:	e018      	b.n	8002a0c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d111      	bne.n	8002a0c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f043 0201 	orr.w	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fb51 	bl	80020b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a12:	e00e      	b.n	8002a32 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f7ff fb5b 	bl	80020dc <HAL_ADC_ErrorCallback>
}
 8002a26:	e004      	b.n	8002a32 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff fb3d 	bl	80020c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a74:	f043 0204 	orr.w	r2, r3, #4
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fb2d 	bl	80020dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a7a      	ldr	r2, [pc, #488]	@ (8002c84 <ADC_ConfigureBoostMode+0x1f8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <ADC_ConfigureBoostMode+0x1c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a79      	ldr	r2, [pc, #484]	@ (8002c88 <ADC_ConfigureBoostMode+0x1fc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d109      	bne.n	8002abc <ADC_ConfigureBoostMode+0x30>
 8002aa8:	4b78      	ldr	r3, [pc, #480]	@ (8002c8c <ADC_ConfigureBoostMode+0x200>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e008      	b.n	8002ace <ADC_ConfigureBoostMode+0x42>
 8002abc:	4b74      	ldr	r3, [pc, #464]	@ (8002c90 <ADC_ConfigureBoostMode+0x204>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01c      	beq.n	8002b0c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002ad2:	f003 ffb9 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8002ad6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ae0:	d010      	beq.n	8002b04 <ADC_ConfigureBoostMode+0x78>
 8002ae2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ae6:	d873      	bhi.n	8002bd0 <ADC_ConfigureBoostMode+0x144>
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aec:	d002      	beq.n	8002af4 <ADC_ConfigureBoostMode+0x68>
 8002aee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002af2:	d16d      	bne.n	8002bd0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	60fb      	str	r3, [r7, #12]
        break;
 8002b02:	e068      	b.n	8002bd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	60fb      	str	r3, [r7, #12]
        break;
 8002b0a:	e064      	b.n	8002bd6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b0c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b10:	f04f 0100 	mov.w	r1, #0
 8002b14:	f005 fa2a 	bl	8007f6c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b18:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b22:	d051      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0x13c>
 8002b24:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b28:	d854      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
 8002b2a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b2e:	d047      	beq.n	8002bc0 <ADC_ConfigureBoostMode+0x134>
 8002b30:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b34:	d84e      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
 8002b36:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b3a:	d03d      	beq.n	8002bb8 <ADC_ConfigureBoostMode+0x12c>
 8002b3c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b40:	d848      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
 8002b42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b46:	d033      	beq.n	8002bb0 <ADC_ConfigureBoostMode+0x124>
 8002b48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b4c:	d842      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
 8002b4e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002b52:	d029      	beq.n	8002ba8 <ADC_ConfigureBoostMode+0x11c>
 8002b54:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002b58:	d83c      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
 8002b5a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002b5e:	d01a      	beq.n	8002b96 <ADC_ConfigureBoostMode+0x10a>
 8002b60:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002b64:	d836      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
 8002b66:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002b6a:	d014      	beq.n	8002b96 <ADC_ConfigureBoostMode+0x10a>
 8002b6c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002b70:	d830      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
 8002b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b76:	d00e      	beq.n	8002b96 <ADC_ConfigureBoostMode+0x10a>
 8002b78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b7c:	d82a      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
 8002b7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b82:	d008      	beq.n	8002b96 <ADC_ConfigureBoostMode+0x10a>
 8002b84:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b88:	d824      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
 8002b8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b8e:	d002      	beq.n	8002b96 <ADC_ConfigureBoostMode+0x10a>
 8002b90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b94:	d11e      	bne.n	8002bd4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	0c9b      	lsrs	r3, r3, #18
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
        break;
 8002ba6:	e016      	b.n	8002bd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
        break;
 8002bae:	e012      	b.n	8002bd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	60fb      	str	r3, [r7, #12]
        break;
 8002bb6:	e00e      	b.n	8002bd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	60fb      	str	r3, [r7, #12]
        break;
 8002bbe:	e00a      	b.n	8002bd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	09db      	lsrs	r3, r3, #7
 8002bc4:	60fb      	str	r3, [r7, #12]
        break;
 8002bc6:	e006      	b.n	8002bd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	60fb      	str	r3, [r7, #12]
        break;
 8002bce:	e002      	b.n	8002bd6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002bd4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002bd6:	f7fe fded 	bl	80017b4 <HAL_GetREVID>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d815      	bhi.n	8002c10 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a2b      	ldr	r2, [pc, #172]	@ (8002c94 <ADC_ConfigureBoostMode+0x208>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d908      	bls.n	8002bfe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bfa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002bfc:	e03e      	b.n	8002c7c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c0c:	609a      	str	r2, [r3, #8]
}
 8002c0e:	e035      	b.n	8002c7c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <ADC_ConfigureBoostMode+0x20c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d808      	bhi.n	8002c30 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c2c:	609a      	str	r2, [r3, #8]
}
 8002c2e:	e025      	b.n	8002c7c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a1a      	ldr	r2, [pc, #104]	@ (8002c9c <ADC_ConfigureBoostMode+0x210>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d80a      	bhi.n	8002c4e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	e016      	b.n	8002c7c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a13      	ldr	r2, [pc, #76]	@ (8002ca0 <ADC_ConfigureBoostMode+0x214>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d80a      	bhi.n	8002c6c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c68:	609a      	str	r2, [r3, #8]
}
 8002c6a:	e007      	b.n	8002c7c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40022100 	.word	0x40022100
 8002c8c:	40022300 	.word	0x40022300
 8002c90:	58026300 	.word	0x58026300
 8002c94:	01312d00 	.word	0x01312d00
 8002c98:	005f5e10 	.word	0x005f5e10
 8002c9c:	00bebc20 	.word	0x00bebc20
 8002ca0:	017d7840 	.word	0x017d7840

08002ca4 <LL_ADC_IsEnabled>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <LL_ADC_IsEnabled+0x18>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <LL_ADC_IsEnabled+0x1a>
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <LL_ADC_StartCalibration>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <LL_ADC_StartCalibration+0x38>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002cec:	430a      	orrs	r2, r1
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	3ffeffc0 	.word	0x3ffeffc0

08002d08 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d1c:	d101      	bne.n	8002d22 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d101      	bne.n	8002d48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_ADCEx_Calibration_Start+0x1e>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e04c      	b.n	8002e10 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff fd90 	bl	80028a4 <ADC_Disable>
 8002d84:	4603      	mov	r3, r0
 8002d86:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d135      	bne.n	8002dfa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d92:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	f043 0202 	orr.w	r2, r3, #2
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff90 	bl	8002ccc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dac:	e014      	b.n	8002dd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	3301      	adds	r3, #1
 8002db2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4a19      	ldr	r2, [pc, #100]	@ (8002e1c <HAL_ADCEx_Calibration_Start+0xc4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d30d      	bcc.n	8002dd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	f023 0312 	bic.w	r3, r3, #18
 8002dc4:	f043 0210 	orr.w	r2, r3, #16
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e01b      	b.n	8002e10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff93 	bl	8002d08 <LL_ADC_IsCalibrationOnGoing>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e2      	bne.n	8002dae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f023 0303 	bic.w	r3, r3, #3
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002df8:	e005      	b.n	8002e06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfe:	f043 0210 	orr.w	r2, r3, #16
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	ffffeefd 	.word	0xffffeefd
 8002e1c:	25c3f800 	.word	0x25c3f800

08002e20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b09f      	sub	sp, #124	@ 0x7c
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e0be      	b.n	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d102      	bne.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e58:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	e001      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e09d      	b.n	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff54 	bl	8002d30 <LL_ADC_REG_IsConversionOngoing>
 8002e88:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff4e 	bl	8002d30 <LL_ADC_REG_IsConversionOngoing>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d17f      	bne.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d17c      	bne.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a47      	ldr	r2, [pc, #284]	@ (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a46      	ldr	r2, [pc, #280]	@ (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002eb4:	4b45      	ldr	r3, [pc, #276]	@ (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002eb6:	e000      	b.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002eb8:	4b45      	ldr	r3, [pc, #276]	@ (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002eba:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d039      	beq.n	8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a38      	ldr	r2, [pc, #224]	@ (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10e      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002eea:	4836      	ldr	r0, [pc, #216]	@ (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002eec:	f7ff feda 	bl	8002ca4 <LL_ADC_IsEnabled>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	4835      	ldr	r0, [pc, #212]	@ (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ef4:	f7ff fed6 	bl	8002ca4 <LL_ADC_IsEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4323      	orrs	r3, r4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e008      	b.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002f08:	4832      	ldr	r0, [pc, #200]	@ (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f0a:	f7ff fecb 	bl	8002ca4 <LL_ADC_IsEnabled>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d047      	beq.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	6811      	ldr	r1, [r2, #0]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	6892      	ldr	r2, [r2, #8]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f34:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f36:	e03a      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f42:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10e      	bne.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002f58:	481a      	ldr	r0, [pc, #104]	@ (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f5a:	f7ff fea3 	bl	8002ca4 <LL_ADC_IsEnabled>
 8002f5e:	4604      	mov	r4, r0
 8002f60:	4819      	ldr	r0, [pc, #100]	@ (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f62:	f7ff fe9f 	bl	8002ca4 <LL_ADC_IsEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4323      	orrs	r3, r4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	e008      	b.n	8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f76:	4817      	ldr	r0, [pc, #92]	@ (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f78:	f7ff fe94 	bl	8002ca4 <LL_ADC_IsEnabled>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f96:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f98:	e009      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002fac:	e000      	b.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fb8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	377c      	adds	r7, #124	@ 0x7c
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}
 8002fc4:	40022000 	.word	0x40022000
 8002fc8:	40022100 	.word	0x40022100
 8002fcc:	40022300 	.word	0x40022300
 8002fd0:	58026300 	.word	0x58026300
 8002fd4:	58026000 	.word	0x58026000
 8002fd8:	fffff0e0 	.word	0xfffff0e0

08002fdc <__NVIC_SetPriorityGrouping>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <__NVIC_SetPriorityGrouping+0x40>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	4313      	orrs	r3, r2
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	@ (800301c <__NVIC_SetPriorityGrouping+0x40>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00
 8003020:	05fa0000 	.word	0x05fa0000

08003024 <__NVIC_GetPriorityGrouping>:
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <__NVIC_GetPriorityGrouping+0x18>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 0307 	and.w	r3, r3, #7
}
 8003032:	4618      	mov	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <__NVIC_EnableIRQ>:
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800304a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	db0b      	blt.n	800306a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	4907      	ldr	r1, [pc, #28]	@ (8003078 <__NVIC_EnableIRQ+0x38>)
 800305a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2001      	movs	r0, #1
 8003062:	fa00 f202 	lsl.w	r2, r0, r2
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000e100 	.word	0xe000e100

0800307c <__NVIC_SetPriority>:
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	6039      	str	r1, [r7, #0]
 8003086:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308c:	2b00      	cmp	r3, #0
 800308e:	db0a      	blt.n	80030a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	490c      	ldr	r1, [pc, #48]	@ (80030c8 <__NVIC_SetPriority+0x4c>)
 8003096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	440b      	add	r3, r1
 80030a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80030a4:	e00a      	b.n	80030bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4908      	ldr	r1, [pc, #32]	@ (80030cc <__NVIC_SetPriority+0x50>)
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	3b04      	subs	r3, #4
 80030b4:	0112      	lsls	r2, r2, #4
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	440b      	add	r3, r1
 80030ba:	761a      	strb	r2, [r3, #24]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000e100 	.word	0xe000e100
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <NVIC_EncodePriority>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	@ 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f1c3 0307 	rsb	r3, r3, #7
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	bf28      	it	cs
 80030ee:	2304      	movcs	r3, #4
 80030f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2b06      	cmp	r3, #6
 80030f8:	d902      	bls.n	8003100 <NVIC_EncodePriority+0x30>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3b03      	subs	r3, #3
 80030fe:	e000      	b.n	8003102 <NVIC_EncodePriority+0x32>
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43da      	mvns	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	401a      	ands	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003118:	f04f 31ff 	mov.w	r1, #4294967295
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	43d9      	mvns	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	4313      	orrs	r3, r2
}
 800312a:	4618      	mov	r0, r3
 800312c:	3724      	adds	r7, #36	@ 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ff4c 	bl	8002fdc <__NVIC_SetPriorityGrouping>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800315a:	f7ff ff63 	bl	8003024 <__NVIC_GetPriorityGrouping>
 800315e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	6978      	ldr	r0, [r7, #20]
 8003166:	f7ff ffb3 	bl	80030d0 <NVIC_EncodePriority>
 800316a:	4602      	mov	r2, r0
 800316c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff82 	bl	800307c <__NVIC_SetPriority>
}
 8003178:	bf00      	nop
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ff56 	bl	8003040 <__NVIC_EnableIRQ>
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80031a0:	f3bf 8f5f 	dmb	sy
}
 80031a4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80031a6:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <HAL_MPU_Disable+0x28>)
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	4a06      	ldr	r2, [pc, #24]	@ (80031c4 <HAL_MPU_Disable+0x28>)
 80031ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_MPU_Disable+0x2c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	e000ed00 	.word	0xe000ed00
 80031c8:	e000ed90 	.word	0xe000ed90

080031cc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80031d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003204 <HAL_MPU_Enable+0x38>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80031de:	4b0a      	ldr	r3, [pc, #40]	@ (8003208 <HAL_MPU_Enable+0x3c>)
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	4a09      	ldr	r2, [pc, #36]	@ (8003208 <HAL_MPU_Enable+0x3c>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80031ea:	f3bf 8f4f 	dsb	sy
}
 80031ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031f0:	f3bf 8f6f 	isb	sy
}
 80031f4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000ed90 	.word	0xe000ed90
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	785a      	ldrb	r2, [r3, #1]
 8003218:	4b1d      	ldr	r3, [pc, #116]	@ (8003290 <HAL_MPU_ConfigRegion+0x84>)
 800321a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d029      	beq.n	8003278 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003224:	4a1a      	ldr	r2, [pc, #104]	@ (8003290 <HAL_MPU_ConfigRegion+0x84>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7b1b      	ldrb	r3, [r3, #12]
 8003230:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7adb      	ldrb	r3, [r3, #11]
 8003236:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003238:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7a9b      	ldrb	r3, [r3, #10]
 800323e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003240:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7b5b      	ldrb	r3, [r3, #13]
 8003246:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003248:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7b9b      	ldrb	r3, [r3, #14]
 800324e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003250:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7bdb      	ldrb	r3, [r3, #15]
 8003256:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003258:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7a5b      	ldrb	r3, [r3, #9]
 800325e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003260:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7a1b      	ldrb	r3, [r3, #8]
 8003266:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003268:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	7812      	ldrb	r2, [r2, #0]
 800326e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003270:	4a07      	ldr	r2, [pc, #28]	@ (8003290 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003272:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003274:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003276:	e005      	b.n	8003284 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_MPU_ConfigRegion+0x84>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800327e:	4b04      	ldr	r3, [pc, #16]	@ (8003290 <HAL_MPU_ConfigRegion+0x84>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed90 	.word	0xe000ed90

08003294 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e014      	b.n	80032d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	791b      	ldrb	r3, [r3, #4]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd f9a0 	bl	80005fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	795b      	ldrb	r3, [r3, #5]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_DAC_Start+0x16>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e040      	b.n	8003370 <HAL_DAC_Start+0x98>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2201      	movs	r2, #1
 8003308:	409a      	lsls	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10f      	bne.n	8003338 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003322:	2b02      	cmp	r3, #2
 8003324:	d11d      	bne.n	8003362 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	e014      	b.n	8003362 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2102      	movs	r1, #2
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	429a      	cmp	r2, r3
 8003350:	d107      	bne.n	8003362 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0202 	orr.w	r2, r2, #2
 8003360:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800338e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003392:	d120      	bne.n	80033d6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800339e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a2:	d118      	bne.n	80033d6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2204      	movs	r2, #4
 80033a8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033ce:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f852 	bl	800347a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033e4:	d120      	bne.n	8003428 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033f4:	d118      	bne.n	8003428 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f043 0202 	orr.w	r2, r3, #2
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003410:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003420:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f972 	bl	800370c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	3308      	adds	r3, #8
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e004      	b.n	8003464 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3314      	adds	r3, #20
 8003462:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	461a      	mov	r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	795b      	ldrb	r3, [r3, #5]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_DAC_ConfigChannel+0x18>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e12a      	b.n	80036fe <HAL_DAC_ConfigChannel+0x26e>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2202      	movs	r2, #2
 80034b2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	f040 8081 	bne.w	80035c0 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034be:	f7fe f949 	bl	8001754 <HAL_GetTick>
 80034c2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d140      	bne.n	800354c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034ca:	e018      	b.n	80034fe <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034cc:	f7fe f942 	bl	8001754 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d911      	bls.n	80034fe <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034e0:	4b89      	ldr	r3, [pc, #548]	@ (8003708 <HAL_DAC_ConfigChannel+0x278>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f043 0208 	orr.w	r2, r3, #8
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2203      	movs	r2, #3
 80034f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0ff      	b.n	80036fe <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003504:	4b80      	ldr	r3, [pc, #512]	@ (8003708 <HAL_DAC_ConfigChannel+0x278>)
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1df      	bne.n	80034cc <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800350c:	2001      	movs	r0, #1
 800350e:	f7fe f92d 	bl	800176c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	6992      	ldr	r2, [r2, #24]
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40
 800351c:	e023      	b.n	8003566 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800351e:	f7fe f919 	bl	8001754 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d90f      	bls.n	800354c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003532:	2b00      	cmp	r3, #0
 8003534:	da0a      	bge.n	800354c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f043 0208 	orr.w	r2, r3, #8
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2203      	movs	r2, #3
 8003546:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0d8      	b.n	80036fe <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	2b00      	cmp	r3, #0
 8003554:	dbe3      	blt.n	800351e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8003556:	2001      	movs	r0, #1
 8003558:	f7fe f908 	bl	800176c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	6992      	ldr	r2, [r2, #24]
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	ea02 0103 	and.w	r1, r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	21ff      	movs	r1, #255	@ 0xff
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	ea02 0103 	and.w	r1, r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	409a      	lsls	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d11d      	bne.n	8003604 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ce:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	221f      	movs	r2, #31
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4013      	ands	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2207      	movs	r2, #7
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4013      	ands	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d102      	bne.n	800362e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	e00f      	b.n	800364e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d102      	bne.n	800363c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003636:	2301      	movs	r3, #1
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e008      	b.n	800364e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003644:	2301      	movs	r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	e001      	b.n	800364e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4313      	orrs	r3, r2
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43da      	mvns	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	400a      	ands	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4013      	ands	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	22c0      	movs	r2, #192	@ 0xc0
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	400a      	ands	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20008000 	.word	0x20008000

0800370c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e226      	b.n	8003b8a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_DMA_Start_IT+0x2a>
 8003746:	2302      	movs	r3, #2
 8003748:	e21f      	b.n	8003b8a <HAL_DMA_Start_IT+0x46a>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	f040 820a 	bne.w	8003b74 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a68      	ldr	r2, [pc, #416]	@ (8003914 <HAL_DMA_Start_IT+0x1f4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d04a      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a66      	ldr	r2, [pc, #408]	@ (8003918 <HAL_DMA_Start_IT+0x1f8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d045      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a65      	ldr	r2, [pc, #404]	@ (800391c <HAL_DMA_Start_IT+0x1fc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d040      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a63      	ldr	r2, [pc, #396]	@ (8003920 <HAL_DMA_Start_IT+0x200>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d03b      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a62      	ldr	r2, [pc, #392]	@ (8003924 <HAL_DMA_Start_IT+0x204>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d036      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a60      	ldr	r2, [pc, #384]	@ (8003928 <HAL_DMA_Start_IT+0x208>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d031      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5f      	ldr	r2, [pc, #380]	@ (800392c <HAL_DMA_Start_IT+0x20c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d02c      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003930 <HAL_DMA_Start_IT+0x210>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d027      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5c      	ldr	r2, [pc, #368]	@ (8003934 <HAL_DMA_Start_IT+0x214>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d022      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003938 <HAL_DMA_Start_IT+0x218>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01d      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a59      	ldr	r2, [pc, #356]	@ (800393c <HAL_DMA_Start_IT+0x21c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a57      	ldr	r2, [pc, #348]	@ (8003940 <HAL_DMA_Start_IT+0x220>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a56      	ldr	r2, [pc, #344]	@ (8003944 <HAL_DMA_Start_IT+0x224>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a54      	ldr	r2, [pc, #336]	@ (8003948 <HAL_DMA_Start_IT+0x228>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a53      	ldr	r2, [pc, #332]	@ (800394c <HAL_DMA_Start_IT+0x22c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_DMA_Start_IT+0xee>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a51      	ldr	r2, [pc, #324]	@ (8003950 <HAL_DMA_Start_IT+0x230>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d108      	bne.n	8003820 <HAL_DMA_Start_IT+0x100>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e007      	b.n	8003830 <HAL_DMA_Start_IT+0x110>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f9dc 	bl	8003bf4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a34      	ldr	r2, [pc, #208]	@ (8003914 <HAL_DMA_Start_IT+0x1f4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d04a      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a33      	ldr	r2, [pc, #204]	@ (8003918 <HAL_DMA_Start_IT+0x1f8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d045      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a31      	ldr	r2, [pc, #196]	@ (800391c <HAL_DMA_Start_IT+0x1fc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d040      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a30      	ldr	r2, [pc, #192]	@ (8003920 <HAL_DMA_Start_IT+0x200>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d03b      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2e      	ldr	r2, [pc, #184]	@ (8003924 <HAL_DMA_Start_IT+0x204>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d036      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2d      	ldr	r2, [pc, #180]	@ (8003928 <HAL_DMA_Start_IT+0x208>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d031      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2b      	ldr	r2, [pc, #172]	@ (800392c <HAL_DMA_Start_IT+0x20c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d02c      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2a      	ldr	r2, [pc, #168]	@ (8003930 <HAL_DMA_Start_IT+0x210>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d027      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a28      	ldr	r2, [pc, #160]	@ (8003934 <HAL_DMA_Start_IT+0x214>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d022      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a27      	ldr	r2, [pc, #156]	@ (8003938 <HAL_DMA_Start_IT+0x218>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d01d      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a25      	ldr	r2, [pc, #148]	@ (800393c <HAL_DMA_Start_IT+0x21c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d018      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a24      	ldr	r2, [pc, #144]	@ (8003940 <HAL_DMA_Start_IT+0x220>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d013      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a22      	ldr	r2, [pc, #136]	@ (8003944 <HAL_DMA_Start_IT+0x224>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00e      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a21      	ldr	r2, [pc, #132]	@ (8003948 <HAL_DMA_Start_IT+0x228>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d009      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1f      	ldr	r2, [pc, #124]	@ (800394c <HAL_DMA_Start_IT+0x22c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_DMA_Start_IT+0x1bc>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003950 <HAL_DMA_Start_IT+0x230>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_DMA_Start_IT+0x1c0>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_DMA_Start_IT+0x1c2>
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d036      	beq.n	8003954 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 021e 	bic.w	r2, r3, #30
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0216 	orr.w	r2, r2, #22
 80038f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d03e      	beq.n	8003980 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0208 	orr.w	r2, r2, #8
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e035      	b.n	8003980 <HAL_DMA_Start_IT+0x260>
 8003914:	40020010 	.word	0x40020010
 8003918:	40020028 	.word	0x40020028
 800391c:	40020040 	.word	0x40020040
 8003920:	40020058 	.word	0x40020058
 8003924:	40020070 	.word	0x40020070
 8003928:	40020088 	.word	0x40020088
 800392c:	400200a0 	.word	0x400200a0
 8003930:	400200b8 	.word	0x400200b8
 8003934:	40020410 	.word	0x40020410
 8003938:	40020428 	.word	0x40020428
 800393c:	40020440 	.word	0x40020440
 8003940:	40020458 	.word	0x40020458
 8003944:	40020470 	.word	0x40020470
 8003948:	40020488 	.word	0x40020488
 800394c:	400204a0 	.word	0x400204a0
 8003950:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 020e 	bic.w	r2, r3, #14
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 020a 	orr.w	r2, r2, #10
 8003966:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0204 	orr.w	r2, r2, #4
 800397e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a83      	ldr	r2, [pc, #524]	@ (8003b94 <HAL_DMA_Start_IT+0x474>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d072      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a82      	ldr	r2, [pc, #520]	@ (8003b98 <HAL_DMA_Start_IT+0x478>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d06d      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a80      	ldr	r2, [pc, #512]	@ (8003b9c <HAL_DMA_Start_IT+0x47c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d068      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ba0 <HAL_DMA_Start_IT+0x480>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d063      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba4 <HAL_DMA_Start_IT+0x484>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d05e      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ba8 <HAL_DMA_Start_IT+0x488>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d059      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a7a      	ldr	r2, [pc, #488]	@ (8003bac <HAL_DMA_Start_IT+0x48c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d054      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a79      	ldr	r2, [pc, #484]	@ (8003bb0 <HAL_DMA_Start_IT+0x490>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04f      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a77      	ldr	r2, [pc, #476]	@ (8003bb4 <HAL_DMA_Start_IT+0x494>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d04a      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a76      	ldr	r2, [pc, #472]	@ (8003bb8 <HAL_DMA_Start_IT+0x498>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d045      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a74      	ldr	r2, [pc, #464]	@ (8003bbc <HAL_DMA_Start_IT+0x49c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d040      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a73      	ldr	r2, [pc, #460]	@ (8003bc0 <HAL_DMA_Start_IT+0x4a0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d03b      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a71      	ldr	r2, [pc, #452]	@ (8003bc4 <HAL_DMA_Start_IT+0x4a4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d036      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a70      	ldr	r2, [pc, #448]	@ (8003bc8 <HAL_DMA_Start_IT+0x4a8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d031      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	@ (8003bcc <HAL_DMA_Start_IT+0x4ac>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02c      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6d      	ldr	r2, [pc, #436]	@ (8003bd0 <HAL_DMA_Start_IT+0x4b0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d027      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6b      	ldr	r2, [pc, #428]	@ (8003bd4 <HAL_DMA_Start_IT+0x4b4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6a      	ldr	r2, [pc, #424]	@ (8003bd8 <HAL_DMA_Start_IT+0x4b8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d01d      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a68      	ldr	r2, [pc, #416]	@ (8003bdc <HAL_DMA_Start_IT+0x4bc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a67      	ldr	r2, [pc, #412]	@ (8003be0 <HAL_DMA_Start_IT+0x4c0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a65      	ldr	r2, [pc, #404]	@ (8003be4 <HAL_DMA_Start_IT+0x4c4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a64      	ldr	r2, [pc, #400]	@ (8003be8 <HAL_DMA_Start_IT+0x4c8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a62      	ldr	r2, [pc, #392]	@ (8003bec <HAL_DMA_Start_IT+0x4cc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_DMA_Start_IT+0x350>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a61      	ldr	r2, [pc, #388]	@ (8003bf0 <HAL_DMA_Start_IT+0x4d0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d101      	bne.n	8003a74 <HAL_DMA_Start_IT+0x354>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_DMA_Start_IT+0x356>
 8003a74:	2300      	movs	r3, #0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01a      	beq.n	8003ab0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a96:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a37      	ldr	r2, [pc, #220]	@ (8003b94 <HAL_DMA_Start_IT+0x474>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d04a      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a36      	ldr	r2, [pc, #216]	@ (8003b98 <HAL_DMA_Start_IT+0x478>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d045      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a34      	ldr	r2, [pc, #208]	@ (8003b9c <HAL_DMA_Start_IT+0x47c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d040      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a33      	ldr	r2, [pc, #204]	@ (8003ba0 <HAL_DMA_Start_IT+0x480>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d03b      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a31      	ldr	r2, [pc, #196]	@ (8003ba4 <HAL_DMA_Start_IT+0x484>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d036      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a30      	ldr	r2, [pc, #192]	@ (8003ba8 <HAL_DMA_Start_IT+0x488>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d031      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2e      	ldr	r2, [pc, #184]	@ (8003bac <HAL_DMA_Start_IT+0x48c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02c      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb0 <HAL_DMA_Start_IT+0x490>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d027      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb4 <HAL_DMA_Start_IT+0x494>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb8 <HAL_DMA_Start_IT+0x498>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01d      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a28      	ldr	r2, [pc, #160]	@ (8003bbc <HAL_DMA_Start_IT+0x49c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a27      	ldr	r2, [pc, #156]	@ (8003bc0 <HAL_DMA_Start_IT+0x4a0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	@ (8003bc4 <HAL_DMA_Start_IT+0x4a4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a24      	ldr	r2, [pc, #144]	@ (8003bc8 <HAL_DMA_Start_IT+0x4a8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a22      	ldr	r2, [pc, #136]	@ (8003bcc <HAL_DMA_Start_IT+0x4ac>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_DMA_Start_IT+0x430>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a21      	ldr	r2, [pc, #132]	@ (8003bd0 <HAL_DMA_Start_IT+0x4b0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d108      	bne.n	8003b62 <HAL_DMA_Start_IT+0x442>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e012      	b.n	8003b88 <HAL_DMA_Start_IT+0x468>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e009      	b.n	8003b88 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40020010 	.word	0x40020010
 8003b98:	40020028 	.word	0x40020028
 8003b9c:	40020040 	.word	0x40020040
 8003ba0:	40020058 	.word	0x40020058
 8003ba4:	40020070 	.word	0x40020070
 8003ba8:	40020088 	.word	0x40020088
 8003bac:	400200a0 	.word	0x400200a0
 8003bb0:	400200b8 	.word	0x400200b8
 8003bb4:	40020410 	.word	0x40020410
 8003bb8:	40020428 	.word	0x40020428
 8003bbc:	40020440 	.word	0x40020440
 8003bc0:	40020458 	.word	0x40020458
 8003bc4:	40020470 	.word	0x40020470
 8003bc8:	40020488 	.word	0x40020488
 8003bcc:	400204a0 	.word	0x400204a0
 8003bd0:	400204b8 	.word	0x400204b8
 8003bd4:	58025408 	.word	0x58025408
 8003bd8:	5802541c 	.word	0x5802541c
 8003bdc:	58025430 	.word	0x58025430
 8003be0:	58025444 	.word	0x58025444
 8003be4:	58025458 	.word	0x58025458
 8003be8:	5802546c 	.word	0x5802546c
 8003bec:	58025480 	.word	0x58025480
 8003bf0:	58025494 	.word	0x58025494

08003bf4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7f      	ldr	r2, [pc, #508]	@ (8003e10 <DMA_SetConfig+0x21c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d072      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e14 <DMA_SetConfig+0x220>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d06d      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7c      	ldr	r2, [pc, #496]	@ (8003e18 <DMA_SetConfig+0x224>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d068      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a7a      	ldr	r2, [pc, #488]	@ (8003e1c <DMA_SetConfig+0x228>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d063      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a79      	ldr	r2, [pc, #484]	@ (8003e20 <DMA_SetConfig+0x22c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d05e      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a77      	ldr	r2, [pc, #476]	@ (8003e24 <DMA_SetConfig+0x230>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d059      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a76      	ldr	r2, [pc, #472]	@ (8003e28 <DMA_SetConfig+0x234>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d054      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a74      	ldr	r2, [pc, #464]	@ (8003e2c <DMA_SetConfig+0x238>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d04f      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a73      	ldr	r2, [pc, #460]	@ (8003e30 <DMA_SetConfig+0x23c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d04a      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a71      	ldr	r2, [pc, #452]	@ (8003e34 <DMA_SetConfig+0x240>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d045      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a70      	ldr	r2, [pc, #448]	@ (8003e38 <DMA_SetConfig+0x244>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d040      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6e      	ldr	r2, [pc, #440]	@ (8003e3c <DMA_SetConfig+0x248>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d03b      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a6d      	ldr	r2, [pc, #436]	@ (8003e40 <DMA_SetConfig+0x24c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d036      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a6b      	ldr	r2, [pc, #428]	@ (8003e44 <DMA_SetConfig+0x250>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d031      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6a      	ldr	r2, [pc, #424]	@ (8003e48 <DMA_SetConfig+0x254>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d02c      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a68      	ldr	r2, [pc, #416]	@ (8003e4c <DMA_SetConfig+0x258>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d027      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a67      	ldr	r2, [pc, #412]	@ (8003e50 <DMA_SetConfig+0x25c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d022      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a65      	ldr	r2, [pc, #404]	@ (8003e54 <DMA_SetConfig+0x260>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01d      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a64      	ldr	r2, [pc, #400]	@ (8003e58 <DMA_SetConfig+0x264>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d018      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a62      	ldr	r2, [pc, #392]	@ (8003e5c <DMA_SetConfig+0x268>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a61      	ldr	r2, [pc, #388]	@ (8003e60 <DMA_SetConfig+0x26c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a5f      	ldr	r2, [pc, #380]	@ (8003e64 <DMA_SetConfig+0x270>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a5e      	ldr	r2, [pc, #376]	@ (8003e68 <DMA_SetConfig+0x274>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <DMA_SetConfig+0x10a>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a5c      	ldr	r2, [pc, #368]	@ (8003e6c <DMA_SetConfig+0x278>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <DMA_SetConfig+0x10e>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <DMA_SetConfig+0x110>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a39      	ldr	r2, [pc, #228]	@ (8003e10 <DMA_SetConfig+0x21c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a38      	ldr	r2, [pc, #224]	@ (8003e14 <DMA_SetConfig+0x220>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a36      	ldr	r2, [pc, #216]	@ (8003e18 <DMA_SetConfig+0x224>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a35      	ldr	r2, [pc, #212]	@ (8003e1c <DMA_SetConfig+0x228>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a33      	ldr	r2, [pc, #204]	@ (8003e20 <DMA_SetConfig+0x22c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a32      	ldr	r2, [pc, #200]	@ (8003e24 <DMA_SetConfig+0x230>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a30      	ldr	r2, [pc, #192]	@ (8003e28 <DMA_SetConfig+0x234>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e2c <DMA_SetConfig+0x238>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <DMA_SetConfig+0x23c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2c      	ldr	r2, [pc, #176]	@ (8003e34 <DMA_SetConfig+0x240>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e38 <DMA_SetConfig+0x244>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a29      	ldr	r2, [pc, #164]	@ (8003e3c <DMA_SetConfig+0x248>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a27      	ldr	r2, [pc, #156]	@ (8003e40 <DMA_SetConfig+0x24c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a26      	ldr	r2, [pc, #152]	@ (8003e44 <DMA_SetConfig+0x250>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a24      	ldr	r2, [pc, #144]	@ (8003e48 <DMA_SetConfig+0x254>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <DMA_SetConfig+0x1d0>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a23      	ldr	r2, [pc, #140]	@ (8003e4c <DMA_SetConfig+0x258>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <DMA_SetConfig+0x1d4>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <DMA_SetConfig+0x1d6>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d059      	beq.n	8003e82 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	223f      	movs	r2, #63	@ 0x3f
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d138      	bne.n	8003e70 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e0e:	e086      	b.n	8003f1e <DMA_SetConfig+0x32a>
 8003e10:	40020010 	.word	0x40020010
 8003e14:	40020028 	.word	0x40020028
 8003e18:	40020040 	.word	0x40020040
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	40020070 	.word	0x40020070
 8003e24:	40020088 	.word	0x40020088
 8003e28:	400200a0 	.word	0x400200a0
 8003e2c:	400200b8 	.word	0x400200b8
 8003e30:	40020410 	.word	0x40020410
 8003e34:	40020428 	.word	0x40020428
 8003e38:	40020440 	.word	0x40020440
 8003e3c:	40020458 	.word	0x40020458
 8003e40:	40020470 	.word	0x40020470
 8003e44:	40020488 	.word	0x40020488
 8003e48:	400204a0 	.word	0x400204a0
 8003e4c:	400204b8 	.word	0x400204b8
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	60da      	str	r2, [r3, #12]
}
 8003e80:	e04d      	b.n	8003f1e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a29      	ldr	r2, [pc, #164]	@ (8003f2c <DMA_SetConfig+0x338>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <DMA_SetConfig+0x2de>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a27      	ldr	r2, [pc, #156]	@ (8003f30 <DMA_SetConfig+0x33c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <DMA_SetConfig+0x2de>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a26      	ldr	r2, [pc, #152]	@ (8003f34 <DMA_SetConfig+0x340>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <DMA_SetConfig+0x2de>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a24      	ldr	r2, [pc, #144]	@ (8003f38 <DMA_SetConfig+0x344>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <DMA_SetConfig+0x2de>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a23      	ldr	r2, [pc, #140]	@ (8003f3c <DMA_SetConfig+0x348>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <DMA_SetConfig+0x2de>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a21      	ldr	r2, [pc, #132]	@ (8003f40 <DMA_SetConfig+0x34c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <DMA_SetConfig+0x2de>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a20      	ldr	r2, [pc, #128]	@ (8003f44 <DMA_SetConfig+0x350>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <DMA_SetConfig+0x2de>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8003f48 <DMA_SetConfig+0x354>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <DMA_SetConfig+0x2e2>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <DMA_SetConfig+0x2e4>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	d108      	bne.n	8003f0e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	60da      	str	r2, [r3, #12]
}
 8003f0c:	e007      	b.n	8003f1e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	60da      	str	r2, [r3, #12]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	58025408 	.word	0x58025408
 8003f30:	5802541c 	.word	0x5802541c
 8003f34:	58025430 	.word	0x58025430
 8003f38:	58025444 	.word	0x58025444
 8003f3c:	58025458 	.word	0x58025458
 8003f40:	5802546c 	.word	0x5802546c
 8003f44:	58025480 	.word	0x58025480
 8003f48:	58025494 	.word	0x58025494

08003f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	@ 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f5a:	4b89      	ldr	r3, [pc, #548]	@ (8004180 <HAL_GPIO_Init+0x234>)
 8003f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f5e:	e194      	b.n	800428a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8186 	beq.w	8004284 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d005      	beq.n	8003f90 <HAL_GPIO_Init+0x44>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d130      	bne.n	8003ff2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	091b      	lsrs	r3, r3, #4
 8003fdc:	f003 0201 	and.w	r2, r3, #1
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d017      	beq.n	800402e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	2203      	movs	r2, #3
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d123      	bne.n	8004082 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	08da      	lsrs	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3208      	adds	r2, #8
 8004042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	08da      	lsrs	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3208      	adds	r2, #8
 800407c:	69b9      	ldr	r1, [r7, #24]
 800407e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	2203      	movs	r2, #3
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 0203 	and.w	r2, r3, #3
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80e0 	beq.w	8004284 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004184 <HAL_GPIO_Init+0x238>)
 80040c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004184 <HAL_GPIO_Init+0x238>)
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80040d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004184 <HAL_GPIO_Init+0x238>)
 80040d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040e2:	4a29      	ldr	r2, [pc, #164]	@ (8004188 <HAL_GPIO_Init+0x23c>)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	3302      	adds	r3, #2
 80040ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	220f      	movs	r2, #15
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a20      	ldr	r2, [pc, #128]	@ (800418c <HAL_GPIO_Init+0x240>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d052      	beq.n	80041b4 <HAL_GPIO_Init+0x268>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1f      	ldr	r2, [pc, #124]	@ (8004190 <HAL_GPIO_Init+0x244>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d031      	beq.n	800417a <HAL_GPIO_Init+0x22e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a1e      	ldr	r2, [pc, #120]	@ (8004194 <HAL_GPIO_Init+0x248>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02b      	beq.n	8004176 <HAL_GPIO_Init+0x22a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a1d      	ldr	r2, [pc, #116]	@ (8004198 <HAL_GPIO_Init+0x24c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d025      	beq.n	8004172 <HAL_GPIO_Init+0x226>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a1c      	ldr	r2, [pc, #112]	@ (800419c <HAL_GPIO_Init+0x250>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01f      	beq.n	800416e <HAL_GPIO_Init+0x222>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1b      	ldr	r2, [pc, #108]	@ (80041a0 <HAL_GPIO_Init+0x254>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d019      	beq.n	800416a <HAL_GPIO_Init+0x21e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1a      	ldr	r2, [pc, #104]	@ (80041a4 <HAL_GPIO_Init+0x258>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_GPIO_Init+0x21a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a19      	ldr	r2, [pc, #100]	@ (80041a8 <HAL_GPIO_Init+0x25c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00d      	beq.n	8004162 <HAL_GPIO_Init+0x216>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_GPIO_Init+0x260>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <HAL_GPIO_Init+0x212>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a17      	ldr	r2, [pc, #92]	@ (80041b0 <HAL_GPIO_Init+0x264>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_GPIO_Init+0x20e>
 8004156:	2309      	movs	r3, #9
 8004158:	e02d      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 800415a:	230a      	movs	r3, #10
 800415c:	e02b      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 800415e:	2308      	movs	r3, #8
 8004160:	e029      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 8004162:	2307      	movs	r3, #7
 8004164:	e027      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 8004166:	2306      	movs	r3, #6
 8004168:	e025      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 800416a:	2305      	movs	r3, #5
 800416c:	e023      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 800416e:	2304      	movs	r3, #4
 8004170:	e021      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 8004172:	2303      	movs	r3, #3
 8004174:	e01f      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 8004176:	2302      	movs	r3, #2
 8004178:	e01d      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 800417a:	2301      	movs	r3, #1
 800417c:	e01b      	b.n	80041b6 <HAL_GPIO_Init+0x26a>
 800417e:	bf00      	nop
 8004180:	58000080 	.word	0x58000080
 8004184:	58024400 	.word	0x58024400
 8004188:	58000400 	.word	0x58000400
 800418c:	58020000 	.word	0x58020000
 8004190:	58020400 	.word	0x58020400
 8004194:	58020800 	.word	0x58020800
 8004198:	58020c00 	.word	0x58020c00
 800419c:	58021000 	.word	0x58021000
 80041a0:	58021400 	.word	0x58021400
 80041a4:	58021800 	.word	0x58021800
 80041a8:	58021c00 	.word	0x58021c00
 80041ac:	58022000 	.word	0x58022000
 80041b0:	58022400 	.word	0x58022400
 80041b4:	2300      	movs	r3, #0
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	f002 0203 	and.w	r2, r2, #3
 80041bc:	0092      	lsls	r2, r2, #2
 80041be:	4093      	lsls	r3, r2
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c6:	4938      	ldr	r1, [pc, #224]	@ (80042a8 <HAL_GPIO_Init+0x35c>)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	089b      	lsrs	r3, r3, #2
 80041cc:	3302      	adds	r3, #2
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	43db      	mvns	r3, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4013      	ands	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	3301      	adds	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	f47f ae63 	bne.w	8003f60 <HAL_GPIO_Init+0x14>
  }
}
 800429a:	bf00      	nop
 800429c:	bf00      	nop
 800429e:	3724      	adds	r7, #36	@ 0x24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	58000400 	.word	0x58000400

080042ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
 80042b8:	4613      	mov	r3, r2
 80042ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042bc:	787b      	ldrb	r3, [r7, #1]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042c2:	887a      	ldrh	r2, [r7, #2]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042c8:	e003      	b.n	80042d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	041a      	lsls	r2, r3, #16
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	619a      	str	r2, [r3, #24]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e07f      	b.n	80043f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fac0 	bl	800088c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	@ 0x24
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004330:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004340:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d107      	bne.n	800435a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	e006      	b.n	8004368 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004366:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d104      	bne.n	800437a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004378:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <HAL_I2C_Init+0x11c>)
 8004386:	430b      	orrs	r3, r1
 8004388:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004398:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69d9      	ldr	r1, [r3, #28]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	02008000 	.word	0x02008000

08004400 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b20      	cmp	r3, #32
 8004414:	d138      	bne.n	8004488 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004420:	2302      	movs	r3, #2
 8004422:	e032      	b.n	800448a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2224      	movs	r2, #36	@ 0x24
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004452:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	e000      	b.n	800448a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004488:	2302      	movs	r3, #2
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d139      	bne.n	8004520 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e033      	b.n	8004522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2224      	movs	r2, #36	@ 0x24
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	e000      	b.n	8004522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004520:	2302      	movs	r3, #2
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800452e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004530:	b08f      	sub	sp, #60	@ 0x3c
 8004532:	af0a      	add	r7, sp, #40	@ 0x28
 8004534:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e116      	b.n	800476e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f00b f912 	bl	800f784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2203      	movs	r2, #3
 8004564:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f007 f8eb 	bl	800b75a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	687e      	ldr	r6, [r7, #4]
 800458c:	466d      	mov	r5, sp
 800458e:	f106 0410 	add.w	r4, r6, #16
 8004592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800459a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800459e:	e885 0003 	stmia.w	r5, {r0, r1}
 80045a2:	1d33      	adds	r3, r6, #4
 80045a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045a6:	6838      	ldr	r0, [r7, #0]
 80045a8:	f006 ffb6 	bl	800b518 <USB_CoreInit>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0d7      	b.n	800476e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f007 f8d9 	bl	800b77c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	73fb      	strb	r3, [r7, #15]
 80045ce:	e04a      	b.n	8004666 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	333d      	adds	r3, #61	@ 0x3d
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	333c      	adds	r3, #60	@ 0x3c
 80045f4:	7bfa      	ldrb	r2, [r7, #15]
 80045f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045f8:	7bfa      	ldrb	r2, [r7, #15]
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	b298      	uxth	r0, r3
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3356      	adds	r3, #86	@ 0x56
 800460c:	4602      	mov	r2, r0
 800460e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	3340      	adds	r3, #64	@ 0x40
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	3344      	adds	r3, #68	@ 0x44
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004638:	7bfa      	ldrb	r2, [r7, #15]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3348      	adds	r3, #72	@ 0x48
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	334c      	adds	r3, #76	@ 0x4c
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	3301      	adds	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d3af      	bcc.n	80045d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004670:	2300      	movs	r3, #0
 8004672:	73fb      	strb	r3, [r7, #15]
 8004674:	e044      	b.n	8004700 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004676:	7bfa      	ldrb	r2, [r7, #15]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800468c:	7bfa      	ldrb	r2, [r7, #15]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800469e:	7bfa      	ldrb	r2, [r7, #15]
 80046a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	3301      	adds	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
 8004700:	7bfa      	ldrb	r2, [r7, #15]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d3b5      	bcc.n	8004676 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	687e      	ldr	r6, [r7, #4]
 8004712:	466d      	mov	r5, sp
 8004714:	f106 0410 	add.w	r4, r6, #16
 8004718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800471a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800471c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800471e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004720:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004724:	e885 0003 	stmia.w	r5, {r0, r1}
 8004728:	1d33      	adds	r3, r6, #4
 800472a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800472c:	6838      	ldr	r0, [r7, #0]
 800472e:	f007 f871 	bl	800b814 <USB_DevInit>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e014      	b.n	800476e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	2b01      	cmp	r3, #1
 800475a:	d102      	bne.n	8004762 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f001 f96f 	bl	8005a40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f008 f8b3 	bl	800c8d2 <USB_DevDisconnect>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004776 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_PCD_Start+0x1c>
 800478e:	2302      	movs	r3, #2
 8004790:	e022      	b.n	80047d8 <HAL_PCD_Start+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d105      	bne.n	80047ba <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f006 ffba 	bl	800b738 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f008 f861 	bl	800c890 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b08d      	sub	sp, #52	@ 0x34
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f008 f91f 	bl	800ca3a <USB_GetMode>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 84b7 	bne.w	8005172 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f008 f883 	bl	800c914 <USB_ReadInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 84ad 	beq.w	8005170 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f008 f870 	bl	800c914 <USB_ReadInterrupts>
 8004834:	4603      	mov	r3, r0
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d107      	bne.n	800484e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 0202 	and.w	r2, r2, #2
 800484c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f008 f85e 	bl	800c914 <USB_ReadInterrupts>
 8004858:	4603      	mov	r3, r0
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b10      	cmp	r3, #16
 8004860:	d161      	bne.n	8004926 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0210 	bic.w	r2, r2, #16
 8004870:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f003 020f 	and.w	r2, r3, #15
 800487e:	4613      	mov	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	3304      	adds	r3, #4
 8004890:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	0c5b      	lsrs	r3, r3, #17
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	2b02      	cmp	r3, #2
 800489c:	d124      	bne.n	80048e8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d035      	beq.n	8004916 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	6a38      	ldr	r0, [r7, #32]
 80048be:	f007 fe95 	bl	800c5ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ce:	441a      	add	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048e0:	441a      	add	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	615a      	str	r2, [r3, #20]
 80048e6:	e016      	b.n	8004916 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	0c5b      	lsrs	r3, r3, #17
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d110      	bne.n	8004916 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80048fa:	2208      	movs	r2, #8
 80048fc:	4619      	mov	r1, r3
 80048fe:	6a38      	ldr	r0, [r7, #32]
 8004900:	f007 fe74 	bl	800c5ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	091b      	lsrs	r3, r3, #4
 800490c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004910:	441a      	add	r2, r3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699a      	ldr	r2, [r3, #24]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0210 	orr.w	r2, r2, #16
 8004924:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f007 fff2 	bl	800c914 <USB_ReadInterrupts>
 8004930:	4603      	mov	r3, r0
 8004932:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004936:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800493a:	f040 80a7 	bne.w	8004a8c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f007 fff7 	bl	800c93a <USB_ReadDevAllOutEpInterrupt>
 800494c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800494e:	e099      	b.n	8004a84 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 808e 	beq.w	8004a78 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	4611      	mov	r1, r2
 8004966:	4618      	mov	r0, r3
 8004968:	f008 f81b 	bl	800c9a2 <USB_ReadDevOutEPInterrupt>
 800496c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004984:	461a      	mov	r2, r3
 8004986:	2301      	movs	r3, #1
 8004988:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800498a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fed1 	bl	8005734 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00c      	beq.n	80049b6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a8:	461a      	mov	r2, r3
 80049aa:	2308      	movs	r3, #8
 80049ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 ffa7 	bl	8005904 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049cc:	461a      	mov	r2, r3
 80049ce:	2310      	movs	r3, #16
 80049d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d030      	beq.n	8004a3e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e4:	2b80      	cmp	r3, #128	@ 0x80
 80049e6:	d109      	bne.n	80049fc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049fa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80049fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3304      	adds	r3, #4
 8004a10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	78db      	ldrb	r3, [r3, #3]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d108      	bne.n	8004a2c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f00a ffd2 	bl	800f9d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a54:	461a      	mov	r2, r3
 8004a56:	2320      	movs	r3, #32
 8004a58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a70:	461a      	mov	r2, r3
 8004a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a76:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f47f af62 	bne.w	8004950 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f007 ff3f 	bl	800c914 <USB_ReadInterrupts>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004aa0:	f040 80db 	bne.w	8004c5a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f007 ff60 	bl	800c96e <USB_ReadDevAllInEpInterrupt>
 8004aae:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004ab4:	e0cd      	b.n	8004c52 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80c2 	beq.w	8004c46 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f007 ff86 	bl	800c9de <USB_ReadDevInEPInterrupt>
 8004ad2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d057      	beq.n	8004b8e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69f9      	ldr	r1, [r7, #28]
 8004afa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004afe:	4013      	ands	r3, r2
 8004b00:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2301      	movs	r3, #1
 8004b12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d132      	bne.n	8004b82 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	3348      	adds	r3, #72	@ 0x48
 8004b2c:	6819      	ldr	r1, [r3, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b32:	4613      	mov	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4403      	add	r3, r0
 8004b3c:	3344      	adds	r3, #68	@ 0x44
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4419      	add	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4403      	add	r3, r0
 8004b50:	3348      	adds	r3, #72	@ 0x48
 8004b52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d113      	bne.n	8004b82 <HAL_PCD_IRQHandler+0x3a2>
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	334c      	adds	r3, #76	@ 0x4c
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d108      	bne.n	8004b82 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	f007 ff8f 	bl	800caa0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f00a fe9c 	bl	800f8c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2310      	movs	r3, #16
 8004bc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2340      	movs	r3, #64	@ 0x40
 8004be0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d023      	beq.n	8004c34 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004bec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bee:	6a38      	ldr	r0, [r7, #32]
 8004bf0:	f006 ff6e 	bl	800bad0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	3338      	adds	r3, #56	@ 0x38
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	4413      	add	r3, r2
 8004c04:	3304      	adds	r3, #4
 8004c06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	78db      	ldrb	r3, [r3, #3]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d108      	bne.n	8004c22 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f00a fee9 	bl	800f9f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2302      	movs	r3, #2
 8004c32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fcea 	bl	800561a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	3301      	adds	r3, #1
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f af2e 	bne.w	8004ab6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f007 fe58 	bl	800c914 <USB_ReadInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c6e:	d122      	bne.n	8004cb6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d108      	bne.n	8004ca0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c96:	2100      	movs	r1, #0
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fef5 	bl	8005a88 <HAL_PCDEx_LPM_Callback>
 8004c9e:	e002      	b.n	8004ca6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f00a fe87 	bl	800f9b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f007 fe2a 	bl	800c914 <USB_ReadInterrupts>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cca:	d112      	bne.n	8004cf2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d102      	bne.n	8004ce2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f00a fe43 	bl	800f968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f007 fe0c 	bl	800c914 <USB_ReadInterrupts>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d06:	d121      	bne.n	8004d4c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695a      	ldr	r2, [r3, #20]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004d16:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d111      	bne.n	8004d46 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	f003 020f 	and.w	r2, r3, #15
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fea2 	bl	8005a88 <HAL_PCDEx_LPM_Callback>
 8004d44:	e002      	b.n	8004d4c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f00a fe0e 	bl	800f968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f007 fddf 	bl	800c914 <USB_ReadInterrupts>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d60:	f040 80b7 	bne.w	8004ed2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2110      	movs	r1, #16
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f006 fea6 	bl	800bad0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d84:	2300      	movs	r3, #0
 8004d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d88:	e046      	b.n	8004e18 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d96:	461a      	mov	r2, r3
 8004d98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004db8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004dd0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004df0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e10:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e14:	3301      	adds	r3, #1
 8004e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d3b3      	bcc.n	8004d8a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e30:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004e34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d016      	beq.n	8004e6c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e4e:	f043 030b 	orr.w	r3, r3, #11
 8004e52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e64:	f043 030b 	orr.w	r3, r3, #11
 8004e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e6a:	e015      	b.n	8004e98 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004e80:	4313      	orrs	r3, r2
 8004e82:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e92:	f043 030b 	orr.w	r3, r3, #11
 8004e96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ea6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004eaa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f007 fdef 	bl	800caa0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f007 fd1c 	bl	800c914 <USB_ReadInterrupts>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee6:	d124      	bne.n	8004f32 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f007 fdb3 	bl	800ca58 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f006 fe67 	bl	800bbca <USB_GetDevSpeed>
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681c      	ldr	r4, [r3, #0]
 8004f08:	f001 fd9e 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8004f0c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	4620      	mov	r0, r4
 8004f18:	f006 fb6c 	bl	800b5f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f00a fcfa 	bl	800f916 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f007 fcec 	bl	800c914 <USB_ReadInterrupts>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d10a      	bne.n	8004f5c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00a fcd7 	bl	800f8fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f002 0208 	and.w	r2, r2, #8
 8004f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f007 fcd7 	bl	800c914 <USB_ReadInterrupts>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6c:	2b80      	cmp	r3, #128	@ 0x80
 8004f6e:	d122      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f80:	e014      	b.n	8004fac <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d105      	bne.n	8004fa6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fb09 	bl	80055b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	3301      	adds	r3, #1
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d3e5      	bcc.n	8004f82 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f007 fcaa 	bl	800c914 <USB_ReadInterrupts>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fca:	d13b      	bne.n	8005044 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fcc:	2301      	movs	r3, #1
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd0:	e02b      	b.n	800502a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	3340      	adds	r3, #64	@ 0x40
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d115      	bne.n	8005024 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004ff8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da12      	bge.n	8005024 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	333f      	adds	r3, #63	@ 0x3f
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800501a:	b2db      	uxtb	r3, r3
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 faca 	bl	80055b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	3301      	adds	r3, #1
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005030:	429a      	cmp	r2, r3
 8005032:	d3ce      	bcc.n	8004fd2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f007 fc63 	bl	800c914 <USB_ReadInterrupts>
 800504e:	4603      	mov	r3, r0
 8005050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005058:	d155      	bne.n	8005106 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800505a:	2301      	movs	r3, #1
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
 800505e:	e045      	b.n	80050ec <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d12e      	bne.n	80050e6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005088:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800508a:	2b00      	cmp	r3, #0
 800508c:	da2b      	bge.n	80050e6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800509a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800509e:	429a      	cmp	r2, r3
 80050a0:	d121      	bne.n	80050e6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80050b4:	2201      	movs	r2, #1
 80050b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050e2:	6053      	str	r3, [r2, #4]
            break;
 80050e4:	e007      	b.n	80050f6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	3301      	adds	r3, #1
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d3b4      	bcc.n	8005060 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f007 fc02 	bl	800c914 <USB_ReadInterrupts>
 8005110:	4603      	mov	r3, r0
 8005112:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800511a:	d10a      	bne.n	8005132 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f00a fc7b 	bl	800fa18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695a      	ldr	r2, [r3, #20]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f007 fbec 	bl	800c914 <USB_ReadInterrupts>
 800513c:	4603      	mov	r3, r0
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b04      	cmp	r3, #4
 8005144:	d115      	bne.n	8005172 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f00a fc6b 	bl	800fa34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	e000      	b.n	8005172 <HAL_PCD_IRQHandler+0x992>
      return;
 8005170:	bf00      	nop
    }
  }
}
 8005172:	3734      	adds	r7, #52	@ 0x34
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}

08005178 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_PCD_SetAddress+0x1a>
 800518e:	2302      	movs	r3, #2
 8005190:	e013      	b.n	80051ba <HAL_PCD_SetAddress+0x42>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	4611      	mov	r1, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f007 fb4a 	bl	800c844 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	461a      	mov	r2, r3
 80051d0:	4603      	mov	r3, r0
 80051d2:	70fb      	strb	r3, [r7, #3]
 80051d4:	460b      	mov	r3, r1
 80051d6:	803b      	strh	r3, [r7, #0]
 80051d8:	4613      	mov	r3, r2
 80051da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	da0f      	bge.n	8005208 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	f003 020f 	and.w	r2, r3, #15
 80051ee:	4613      	mov	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	3338      	adds	r3, #56	@ 0x38
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	4413      	add	r3, r2
 80051fc:	3304      	adds	r3, #4
 80051fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	705a      	strb	r2, [r3, #1]
 8005206:	e00f      	b.n	8005228 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	f003 020f 	and.w	r2, r3, #15
 800520e:	4613      	mov	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	3304      	adds	r3, #4
 8005220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	b2da      	uxtb	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005234:	883a      	ldrh	r2, [r7, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	78ba      	ldrb	r2, [r7, #2]
 800523e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005252:	78bb      	ldrb	r3, [r7, #2]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d102      	bne.n	800525e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_PCD_EP_Open+0xaa>
 8005268:	2302      	movs	r3, #2
 800526a:	e00e      	b.n	800528a <HAL_PCD_EP_Open+0xc8>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	4618      	mov	r0, r3
 800527c:	f006 fcca 	bl	800bc14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8005288:	7afb      	ldrb	r3, [r7, #11]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800529e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da0f      	bge.n	80052c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	f003 020f 	and.w	r2, r3, #15
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	3338      	adds	r3, #56	@ 0x38
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	3304      	adds	r3, #4
 80052bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	705a      	strb	r2, [r3, #1]
 80052c4:	e00f      	b.n	80052e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	f003 020f 	and.w	r2, r3, #15
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	4413      	add	r3, r2
 80052dc:	3304      	adds	r3, #4
 80052de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_PCD_EP_Close+0x6e>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e00e      	b.n	800531e <HAL_PCD_EP_Close+0x8c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68f9      	ldr	r1, [r7, #12]
 800530e:	4618      	mov	r0, r3
 8005310:	f006 fd08 	bl	800bd24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b086      	sub	sp, #24
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	460b      	mov	r3, r1
 8005334:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005336:	7afb      	ldrb	r3, [r7, #11]
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	3304      	adds	r3, #4
 800534e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2200      	movs	r2, #0
 8005366:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005368:	7afb      	ldrb	r3, [r7, #11]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	b2da      	uxtb	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d102      	bne.n	8005382 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	6979      	ldr	r1, [r7, #20]
 8005390:	f006 fda4 	bl	800bedc <USB_EPStartXfer>

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80053c0:	681b      	ldr	r3, [r3, #0]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	460b      	mov	r3, r1
 80053dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	f003 020f 	and.w	r2, r3, #15
 80053e4:	4613      	mov	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	3338      	adds	r3, #56	@ 0x38
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	3304      	adds	r3, #4
 80053f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2201      	movs	r2, #1
 800540c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800540e:	7afb      	ldrb	r3, [r7, #11]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	b2da      	uxtb	r2, r3
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d102      	bne.n	8005428 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	6979      	ldr	r1, [r7, #20]
 8005436:	f006 fd51 	bl	800bedc <USB_EPStartXfer>

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	f003 020f 	and.w	r2, r3, #15
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	429a      	cmp	r2, r3
 800545c:	d901      	bls.n	8005462 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e050      	b.n	8005504 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005466:	2b00      	cmp	r3, #0
 8005468:	da0f      	bge.n	800548a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	4613      	mov	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	3338      	adds	r3, #56	@ 0x38
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	3304      	adds	r3, #4
 8005480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	705a      	strb	r2, [r3, #1]
 8005488:	e00d      	b.n	80054a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800548a:	78fa      	ldrb	r2, [r7, #3]
 800548c:	4613      	mov	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4413      	add	r3, r2
 800549c:	3304      	adds	r3, #4
 800549e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_PCD_EP_SetStall+0x82>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e01e      	b.n	8005504 <HAL_PCD_EP_SetStall+0xc0>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f007 f8e1 	bl	800c69c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	b2d9      	uxtb	r1, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80054f4:	461a      	mov	r2, r3
 80054f6:	f007 fad3 	bl	800caa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	f003 020f 	and.w	r2, r3, #15
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d901      	bls.n	800552a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e042      	b.n	80055b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800552a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800552e:	2b00      	cmp	r3, #0
 8005530:	da0f      	bge.n	8005552 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	f003 020f 	and.w	r2, r3, #15
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	3338      	adds	r3, #56	@ 0x38
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	3304      	adds	r3, #4
 8005548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	705a      	strb	r2, [r3, #1]
 8005550:	e00f      	b.n	8005572 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	b2da      	uxtb	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_PCD_EP_ClrStall+0x86>
 800558e:	2302      	movs	r3, #2
 8005590:	e00e      	b.n	80055b0 <HAL_PCD_EP_ClrStall+0xa4>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f007 f8e9 	bl	800c778 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80055c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	da0c      	bge.n	80055e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	f003 020f 	and.w	r2, r3, #15
 80055d2:	4613      	mov	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	3338      	adds	r3, #56	@ 0x38
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	4413      	add	r3, r2
 80055e0:	3304      	adds	r3, #4
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e00c      	b.n	8005600 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	f003 020f 	and.w	r2, r3, #15
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4413      	add	r3, r2
 80055fc:	3304      	adds	r3, #4
 80055fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68f9      	ldr	r1, [r7, #12]
 8005606:	4618      	mov	r0, r3
 8005608:	f006 ff08 	bl	800c41c <USB_EPStopXfer>
 800560c:	4603      	mov	r3, r0
 800560e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005610:	7afb      	ldrb	r3, [r7, #11]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b08a      	sub	sp, #40	@ 0x28
 800561e:	af02      	add	r7, sp, #8
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	3338      	adds	r3, #56	@ 0x38
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	4413      	add	r3, r2
 800563e:	3304      	adds	r3, #4
 8005640:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	429a      	cmp	r2, r3
 800564c:	d901      	bls.n	8005652 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e06c      	b.n	800572c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	429a      	cmp	r2, r3
 8005666:	d902      	bls.n	800566e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3303      	adds	r3, #3
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005676:	e02b      	b.n	80056d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	429a      	cmp	r2, r3
 800568c:	d902      	bls.n	8005694 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3303      	adds	r3, #3
 8005698:	089b      	lsrs	r3, r3, #2
 800569a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	68d9      	ldr	r1, [r3, #12]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4603      	mov	r3, r0
 80056b2:	6978      	ldr	r0, [r7, #20]
 80056b4:	f006 ff5c 	bl	800c570 <USB_WritePacket>

    ep->xfer_buff  += len;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	441a      	add	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	441a      	add	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d809      	bhi.n	80056fa <PCD_WriteEmptyTxFifo+0xe0>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d203      	bcs.n	80056fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1be      	bne.n	8005678 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	429a      	cmp	r2, r3
 8005704:	d811      	bhi.n	800572a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	2201      	movs	r2, #1
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800571a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	43db      	mvns	r3, r3
 8005720:	6939      	ldr	r1, [r7, #16]
 8005722:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005726:	4013      	ands	r3, r2
 8005728:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	333c      	adds	r3, #60	@ 0x3c
 800574c:	3304      	adds	r3, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d17b      	bne.n	8005862 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d015      	beq.n	80057a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4a61      	ldr	r2, [pc, #388]	@ (80058fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	f240 80b9 	bls.w	80058f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80b3 	beq.w	80058f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005796:	461a      	mov	r2, r3
 8005798:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800579c:	6093      	str	r3, [r2, #8]
 800579e:	e0a7      	b.n	80058f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b6:	461a      	mov	r2, r3
 80057b8:	2320      	movs	r3, #32
 80057ba:	6093      	str	r3, [r2, #8]
 80057bc:	e098      	b.n	80058f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 8093 	bne.w	80058f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4a4b      	ldr	r2, [pc, #300]	@ (80058fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d90f      	bls.n	80057f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e8:	461a      	mov	r2, r3
 80057ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ee:	6093      	str	r3, [r2, #8]
 80057f0:	e07e      	b.n	80058f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4413      	add	r3, r2
 8005804:	3304      	adds	r3, #4
 8005806:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1a      	ldr	r2, [r3, #32]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	0159      	lsls	r1, r3, #5
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	440b      	add	r3, r1
 8005814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581e:	1ad2      	subs	r2, r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d114      	bne.n	8005854 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800583c:	461a      	mov	r2, r3
 800583e:	2101      	movs	r1, #1
 8005840:	f007 f92e 	bl	800caa0 <USB_EP0_OutStart>
 8005844:	e006      	b.n	8005854 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	441a      	add	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f00a f818 	bl	800f890 <HAL_PCD_DataOutStageCallback>
 8005860:	e046      	b.n	80058f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	4a26      	ldr	r2, [pc, #152]	@ (8005900 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d124      	bne.n	80058b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005880:	461a      	mov	r2, r3
 8005882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005886:	6093      	str	r3, [r2, #8]
 8005888:	e032      	b.n	80058f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a0:	461a      	mov	r2, r3
 80058a2:	2320      	movs	r3, #32
 80058a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f009 ffef 	bl	800f890 <HAL_PCD_DataOutStageCallback>
 80058b2:	e01d      	b.n	80058f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d114      	bne.n	80058e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	4613      	mov	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d108      	bne.n	80058e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80058dc:	461a      	mov	r2, r3
 80058de:	2100      	movs	r1, #0
 80058e0:	f007 f8de 	bl	800caa0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f009 ffd0 	bl	800f890 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	4f54300a 	.word	0x4f54300a
 8005900:	4f54310a 	.word	0x4f54310a

08005904 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	333c      	adds	r3, #60	@ 0x3c
 800591c:	3304      	adds	r3, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a15      	ldr	r2, [pc, #84]	@ (800598c <PCD_EP_OutSetupPacket_int+0x88>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d90e      	bls.n	8005958 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005950:	461a      	mov	r2, r3
 8005952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005956:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f009 ff87 	bl	800f86c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4a0a      	ldr	r2, [pc, #40]	@ (800598c <PCD_EP_OutSetupPacket_int+0x88>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d90c      	bls.n	8005980 <PCD_EP_OutSetupPacket_int+0x7c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d108      	bne.n	8005980 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005978:	461a      	mov	r2, r3
 800597a:	2101      	movs	r1, #1
 800597c:	f007 f890 	bl	800caa0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	4f54300a 	.word	0x4f54300a

08005990 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
 800599c:	4613      	mov	r3, r2
 800599e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d107      	bne.n	80059be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059ae:	883b      	ldrh	r3, [r7, #0]
 80059b0:	0419      	lsls	r1, r3, #16
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80059bc:	e028      	b.n	8005a10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	0c1b      	lsrs	r3, r3, #16
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	4413      	add	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
 80059d0:	e00d      	b.n	80059ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	3340      	adds	r3, #64	@ 0x40
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	0c1b      	lsrs	r3, r3, #16
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	4413      	add	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	3301      	adds	r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
 80059ee:	7bfa      	ldrb	r2, [r7, #15]
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d3ec      	bcc.n	80059d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059f8:	883b      	ldrh	r3, [r7, #0]
 80059fa:	0418      	lsls	r0, r3, #16
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	4302      	orrs	r2, r0
 8005a08:	3340      	adds	r3, #64	@ 0x40
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a6e:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <HAL_PCDEx_ActivateLPM+0x44>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	10000003 	.word	0x10000003

08005a88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005aa8:	4b19      	ldr	r3, [pc, #100]	@ (8005b10 <HAL_PWREx_ConfigSupply+0x70>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d00a      	beq.n	8005aca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ab4:	4b16      	ldr	r3, [pc, #88]	@ (8005b10 <HAL_PWREx_ConfigSupply+0x70>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d001      	beq.n	8005ac6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e01f      	b.n	8005b06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e01d      	b.n	8005b06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005aca:	4b11      	ldr	r3, [pc, #68]	@ (8005b10 <HAL_PWREx_ConfigSupply+0x70>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f023 0207 	bic.w	r2, r3, #7
 8005ad2:	490f      	ldr	r1, [pc, #60]	@ (8005b10 <HAL_PWREx_ConfigSupply+0x70>)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ada:	f7fb fe3b 	bl	8001754 <HAL_GetTick>
 8005ade:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ae0:	e009      	b.n	8005af6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ae2:	f7fb fe37 	bl	8001754 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005af0:	d901      	bls.n	8005af6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e007      	b.n	8005b06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005af6:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <HAL_PWREx_ConfigSupply+0x70>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b02:	d1ee      	bne.n	8005ae2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	58024800 	.word	0x58024800

08005b14 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005b18:	4b05      	ldr	r3, [pc, #20]	@ (8005b30 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4a04      	ldr	r2, [pc, #16]	@ (8005b30 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b22:	60d3      	str	r3, [r2, #12]
}
 8005b24:	bf00      	nop
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	58024800 	.word	0x58024800

08005b34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08c      	sub	sp, #48	@ 0x30
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f000 bc48 	b.w	80063d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8088 	beq.w	8005c66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b56:	4b99      	ldr	r3, [pc, #612]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b60:	4b96      	ldr	r3, [pc, #600]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d007      	beq.n	8005b7c <HAL_RCC_OscConfig+0x48>
 8005b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6e:	2b18      	cmp	r3, #24
 8005b70:	d111      	bne.n	8005b96 <HAL_RCC_OscConfig+0x62>
 8005b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d10c      	bne.n	8005b96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b7c:	4b8f      	ldr	r3, [pc, #572]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d06d      	beq.n	8005c64 <HAL_RCC_OscConfig+0x130>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d169      	bne.n	8005c64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f000 bc21 	b.w	80063d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b9e:	d106      	bne.n	8005bae <HAL_RCC_OscConfig+0x7a>
 8005ba0:	4b86      	ldr	r3, [pc, #536]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a85      	ldr	r2, [pc, #532]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	e02e      	b.n	8005c0c <HAL_RCC_OscConfig+0xd8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x9c>
 8005bb6:	4b81      	ldr	r3, [pc, #516]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a80      	ldr	r2, [pc, #512]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	4b7e      	ldr	r3, [pc, #504]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7d      	ldr	r2, [pc, #500]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	e01d      	b.n	8005c0c <HAL_RCC_OscConfig+0xd8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bd8:	d10c      	bne.n	8005bf4 <HAL_RCC_OscConfig+0xc0>
 8005bda:	4b78      	ldr	r3, [pc, #480]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a77      	ldr	r2, [pc, #476]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	4b75      	ldr	r3, [pc, #468]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a74      	ldr	r2, [pc, #464]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	e00b      	b.n	8005c0c <HAL_RCC_OscConfig+0xd8>
 8005bf4:	4b71      	ldr	r3, [pc, #452]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a70      	ldr	r2, [pc, #448]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	4b6e      	ldr	r3, [pc, #440]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a6d      	ldr	r2, [pc, #436]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d013      	beq.n	8005c3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c14:	f7fb fd9e 	bl	8001754 <HAL_GetTick>
 8005c18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c1c:	f7fb fd9a 	bl	8001754 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b64      	cmp	r3, #100	@ 0x64
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e3d4      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c2e:	4b63      	ldr	r3, [pc, #396]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0xe8>
 8005c3a:	e014      	b.n	8005c66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3c:	f7fb fd8a 	bl	8001754 <HAL_GetTick>
 8005c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c44:	f7fb fd86 	bl	8001754 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b64      	cmp	r3, #100	@ 0x64
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e3c0      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c56:	4b59      	ldr	r3, [pc, #356]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x110>
 8005c62:	e000      	b.n	8005c66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80ca 	beq.w	8005e08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c74:	4b51      	ldr	r3, [pc, #324]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_RCC_OscConfig+0x166>
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	2b18      	cmp	r3, #24
 8005c8e:	d156      	bne.n	8005d3e <HAL_RCC_OscConfig+0x20a>
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d151      	bne.n	8005d3e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c9a:	4b48      	ldr	r3, [pc, #288]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x17e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e392      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cb2:	4b42      	ldr	r3, [pc, #264]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 0219 	bic.w	r2, r3, #25
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	493f      	ldr	r1, [pc, #252]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fb fd46 	bl	8001754 <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ccc:	f7fb fd42 	bl	8001754 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e37c      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cde:	4b37      	ldr	r3, [pc, #220]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cea:	f7fb fd63 	bl	80017b4 <HAL_GetREVID>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d817      	bhi.n	8005d28 <HAL_RCC_OscConfig+0x1f4>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b40      	cmp	r3, #64	@ 0x40
 8005cfe:	d108      	bne.n	8005d12 <HAL_RCC_OscConfig+0x1de>
 8005d00:	4b2e      	ldr	r3, [pc, #184]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005d08:	4a2c      	ldr	r2, [pc, #176]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d0e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d10:	e07a      	b.n	8005e08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d12:	4b2a      	ldr	r3, [pc, #168]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	031b      	lsls	r3, r3, #12
 8005d20:	4926      	ldr	r1, [pc, #152]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d26:	e06f      	b.n	8005e08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d28:	4b24      	ldr	r3, [pc, #144]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	061b      	lsls	r3, r3, #24
 8005d36:	4921      	ldr	r1, [pc, #132]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d3c:	e064      	b.n	8005e08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d047      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d46:	4b1d      	ldr	r3, [pc, #116]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f023 0219 	bic.w	r2, r3, #25
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	491a      	ldr	r1, [pc, #104]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d58:	f7fb fcfc 	bl	8001754 <HAL_GetTick>
 8005d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d60:	f7fb fcf8 	bl	8001754 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e332      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d72:	4b12      	ldr	r3, [pc, #72]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0f0      	beq.n	8005d60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7e:	f7fb fd19 	bl	80017b4 <HAL_GetREVID>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d819      	bhi.n	8005dc0 <HAL_RCC_OscConfig+0x28c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b40      	cmp	r3, #64	@ 0x40
 8005d92:	d108      	bne.n	8005da6 <HAL_RCC_OscConfig+0x272>
 8005d94:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005d9c:	4a07      	ldr	r2, [pc, #28]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005da2:	6053      	str	r3, [r2, #4]
 8005da4:	e030      	b.n	8005e08 <HAL_RCC_OscConfig+0x2d4>
 8005da6:	4b05      	ldr	r3, [pc, #20]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	031b      	lsls	r3, r3, #12
 8005db4:	4901      	ldr	r1, [pc, #4]	@ (8005dbc <HAL_RCC_OscConfig+0x288>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	604b      	str	r3, [r1, #4]
 8005dba:	e025      	b.n	8005e08 <HAL_RCC_OscConfig+0x2d4>
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	4b9a      	ldr	r3, [pc, #616]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	061b      	lsls	r3, r3, #24
 8005dce:	4997      	ldr	r1, [pc, #604]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	604b      	str	r3, [r1, #4]
 8005dd4:	e018      	b.n	8005e08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd6:	4b95      	ldr	r3, [pc, #596]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a94      	ldr	r2, [pc, #592]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fb fcb7 	bl	8001754 <HAL_GetTick>
 8005de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dea:	f7fb fcb3 	bl	8001754 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e2ed      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dfc:	4b8b      	ldr	r3, [pc, #556]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f0      	bne.n	8005dea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80a9 	beq.w	8005f68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e16:	4b85      	ldr	r3, [pc, #532]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e20:	4b82      	ldr	r3, [pc, #520]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d007      	beq.n	8005e3c <HAL_RCC_OscConfig+0x308>
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b18      	cmp	r3, #24
 8005e30:	d13a      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x374>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d135      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e3c:	4b7b      	ldr	r3, [pc, #492]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_OscConfig+0x320>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	2b80      	cmp	r3, #128	@ 0x80
 8005e4e:	d001      	beq.n	8005e54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e2c1      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e54:	f7fb fcae 	bl	80017b4 <HAL_GetREVID>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d817      	bhi.n	8005e92 <HAL_RCC_OscConfig+0x35e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d108      	bne.n	8005e7c <HAL_RCC_OscConfig+0x348>
 8005e6a:	4b70      	ldr	r3, [pc, #448]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005e72:	4a6e      	ldr	r2, [pc, #440]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005e74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e7a:	e075      	b.n	8005f68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e7c:	4b6b      	ldr	r3, [pc, #428]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	069b      	lsls	r3, r3, #26
 8005e8a:	4968      	ldr	r1, [pc, #416]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e90:	e06a      	b.n	8005f68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e92:	4b66      	ldr	r3, [pc, #408]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	061b      	lsls	r3, r3, #24
 8005ea0:	4962      	ldr	r1, [pc, #392]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ea6:	e05f      	b.n	8005f68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d042      	beq.n	8005f36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005eb0:	4b5e      	ldr	r3, [pc, #376]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a5d      	ldr	r2, [pc, #372]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fb fc4a 	bl	8001754 <HAL_GetTick>
 8005ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ec4:	f7fb fc46 	bl	8001754 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e280      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ed6:	4b55      	ldr	r3, [pc, #340]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ee2:	f7fb fc67 	bl	80017b4 <HAL_GetREVID>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d817      	bhi.n	8005f20 <HAL_RCC_OscConfig+0x3ec>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d108      	bne.n	8005f0a <HAL_RCC_OscConfig+0x3d6>
 8005ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005f00:	4a4a      	ldr	r2, [pc, #296]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f06:	6053      	str	r3, [r2, #4]
 8005f08:	e02e      	b.n	8005f68 <HAL_RCC_OscConfig+0x434>
 8005f0a:	4b48      	ldr	r3, [pc, #288]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	069b      	lsls	r3, r3, #26
 8005f18:	4944      	ldr	r1, [pc, #272]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	604b      	str	r3, [r1, #4]
 8005f1e:	e023      	b.n	8005f68 <HAL_RCC_OscConfig+0x434>
 8005f20:	4b42      	ldr	r3, [pc, #264]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	061b      	lsls	r3, r3, #24
 8005f2e:	493f      	ldr	r1, [pc, #252]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60cb      	str	r3, [r1, #12]
 8005f34:	e018      	b.n	8005f68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f36:	4b3d      	ldr	r3, [pc, #244]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f42:	f7fb fc07 	bl	8001754 <HAL_GetTick>
 8005f46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f4a:	f7fb fc03 	bl	8001754 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e23d      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f5c:	4b33      	ldr	r3, [pc, #204]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1f0      	bne.n	8005f4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d036      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d019      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f80:	4a2a      	ldr	r2, [pc, #168]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f88:	f7fb fbe4 	bl	8001754 <HAL_GetTick>
 8005f8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f90:	f7fb fbe0 	bl	8001754 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e21a      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fa2:	4b22      	ldr	r3, [pc, #136]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x45c>
 8005fae:	e018      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005fb6:	f023 0301 	bic.w	r3, r3, #1
 8005fba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbc:	f7fb fbca 	bl	8001754 <HAL_GetTick>
 8005fc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc4:	f7fb fbc6 	bl	8001754 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e200      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fd6:	4b15      	ldr	r3, [pc, #84]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d039      	beq.n	8006062 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01c      	beq.n	8006030 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 8005ffc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006000:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006002:	f7fb fba7 	bl	8001754 <HAL_GetTick>
 8006006:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800600a:	f7fb fba3 	bl	8001754 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e1dd      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800601c:	4b03      	ldr	r3, [pc, #12]	@ (800602c <HAL_RCC_OscConfig+0x4f8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <HAL_RCC_OscConfig+0x4d6>
 8006028:	e01b      	b.n	8006062 <HAL_RCC_OscConfig+0x52e>
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006030:	4b9b      	ldr	r3, [pc, #620]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a9a      	ldr	r2, [pc, #616]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006036:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800603a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800603c:	f7fb fb8a 	bl	8001754 <HAL_GetTick>
 8006040:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006044:	f7fb fb86 	bl	8001754 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e1c0      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006056:	4b92      	ldr	r3, [pc, #584]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8081 	beq.w	8006172 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006070:	4b8c      	ldr	r3, [pc, #560]	@ (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a8b      	ldr	r2, [pc, #556]	@ (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800607a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800607c:	f7fb fb6a 	bl	8001754 <HAL_GetTick>
 8006080:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006084:	f7fb fb66 	bl	8001754 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b64      	cmp	r3, #100	@ 0x64
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e1a0      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006096:	4b83      	ldr	r3, [pc, #524]	@ (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f0      	beq.n	8006084 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d106      	bne.n	80060b8 <HAL_RCC_OscConfig+0x584>
 80060aa:	4b7d      	ldr	r3, [pc, #500]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ae:	4a7c      	ldr	r2, [pc, #496]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060b6:	e02d      	b.n	8006114 <HAL_RCC_OscConfig+0x5e0>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10c      	bne.n	80060da <HAL_RCC_OscConfig+0x5a6>
 80060c0:	4b77      	ldr	r3, [pc, #476]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c4:	4a76      	ldr	r2, [pc, #472]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060c6:	f023 0301 	bic.w	r3, r3, #1
 80060ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80060cc:	4b74      	ldr	r3, [pc, #464]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d0:	4a73      	ldr	r2, [pc, #460]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060d2:	f023 0304 	bic.w	r3, r3, #4
 80060d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d8:	e01c      	b.n	8006114 <HAL_RCC_OscConfig+0x5e0>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b05      	cmp	r3, #5
 80060e0:	d10c      	bne.n	80060fc <HAL_RCC_OscConfig+0x5c8>
 80060e2:	4b6f      	ldr	r3, [pc, #444]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e6:	4a6e      	ldr	r2, [pc, #440]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060e8:	f043 0304 	orr.w	r3, r3, #4
 80060ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ee:	4b6c      	ldr	r3, [pc, #432]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f2:	4a6b      	ldr	r2, [pc, #428]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060fa:	e00b      	b.n	8006114 <HAL_RCC_OscConfig+0x5e0>
 80060fc:	4b68      	ldr	r3, [pc, #416]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80060fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006100:	4a67      	ldr	r2, [pc, #412]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006102:	f023 0301 	bic.w	r3, r3, #1
 8006106:	6713      	str	r3, [r2, #112]	@ 0x70
 8006108:	4b65      	ldr	r3, [pc, #404]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610c:	4a64      	ldr	r2, [pc, #400]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800610e:	f023 0304 	bic.w	r3, r3, #4
 8006112:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d015      	beq.n	8006148 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611c:	f7fb fb1a 	bl	8001754 <HAL_GetTick>
 8006120:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006122:	e00a      	b.n	800613a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006124:	f7fb fb16 	bl	8001754 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e14e      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800613a:	4b59      	ldr	r3, [pc, #356]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800613c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0ee      	beq.n	8006124 <HAL_RCC_OscConfig+0x5f0>
 8006146:	e014      	b.n	8006172 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006148:	f7fb fb04 	bl	8001754 <HAL_GetTick>
 800614c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800614e:	e00a      	b.n	8006166 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006150:	f7fb fb00 	bl	8001754 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e138      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006166:	4b4e      	ldr	r3, [pc, #312]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1ee      	bne.n	8006150 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 812d 	beq.w	80063d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800617c:	4b48      	ldr	r3, [pc, #288]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006184:	2b18      	cmp	r3, #24
 8006186:	f000 80bd 	beq.w	8006304 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	2b02      	cmp	r3, #2
 8006190:	f040 809e 	bne.w	80062d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006194:	4b42      	ldr	r3, [pc, #264]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a41      	ldr	r2, [pc, #260]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800619a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800619e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a0:	f7fb fad8 	bl	8001754 <HAL_GetTick>
 80061a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a8:	f7fb fad4 	bl	8001754 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e10e      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ba:	4b39      	ldr	r3, [pc, #228]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061c6:	4b36      	ldr	r3, [pc, #216]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80061c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061ca:	4b37      	ldr	r3, [pc, #220]	@ (80062a8 <HAL_RCC_OscConfig+0x774>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061d6:	0112      	lsls	r2, r2, #4
 80061d8:	430a      	orrs	r2, r1
 80061da:	4931      	ldr	r1, [pc, #196]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	628b      	str	r3, [r1, #40]	@ 0x28
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e4:	3b01      	subs	r3, #1
 80061e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ee:	3b01      	subs	r3, #1
 80061f0:	025b      	lsls	r3, r3, #9
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	3b01      	subs	r3, #1
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006208:	3b01      	subs	r3, #1
 800620a:	061b      	lsls	r3, r3, #24
 800620c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006210:	4923      	ldr	r1, [pc, #140]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006212:	4313      	orrs	r3, r2
 8006214:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006216:	4b22      	ldr	r3, [pc, #136]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621a:	4a21      	ldr	r2, [pc, #132]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006222:	4b1f      	ldr	r3, [pc, #124]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006226:	4b21      	ldr	r3, [pc, #132]	@ (80062ac <HAL_RCC_OscConfig+0x778>)
 8006228:	4013      	ands	r3, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800622e:	00d2      	lsls	r2, r2, #3
 8006230:	491b      	ldr	r1, [pc, #108]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006236:	4b1a      	ldr	r3, [pc, #104]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623a:	f023 020c 	bic.w	r2, r3, #12
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	4917      	ldr	r1, [pc, #92]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006248:	4b15      	ldr	r3, [pc, #84]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624c:	f023 0202 	bic.w	r2, r3, #2
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006254:	4912      	ldr	r1, [pc, #72]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800625a:	4b11      	ldr	r3, [pc, #68]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625e:	4a10      	ldr	r2, [pc, #64]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006266:	4b0e      	ldr	r3, [pc, #56]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626a:	4a0d      	ldr	r2, [pc, #52]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800626c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006270:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006272:	4b0b      	ldr	r3, [pc, #44]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	4a0a      	ldr	r2, [pc, #40]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800627c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800627e:	4b08      	ldr	r3, [pc, #32]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006282:	4a07      	ldr	r2, [pc, #28]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800628a:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a04      	ldr	r2, [pc, #16]	@ (80062a0 <HAL_RCC_OscConfig+0x76c>)
 8006290:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006296:	f7fb fa5d 	bl	8001754 <HAL_GetTick>
 800629a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800629c:	e011      	b.n	80062c2 <HAL_RCC_OscConfig+0x78e>
 800629e:	bf00      	nop
 80062a0:	58024400 	.word	0x58024400
 80062a4:	58024800 	.word	0x58024800
 80062a8:	fffffc0c 	.word	0xfffffc0c
 80062ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b0:	f7fb fa50 	bl	8001754 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e08a      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062c2:	4b47      	ldr	r3, [pc, #284]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0x77c>
 80062ce:	e082      	b.n	80063d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062d0:	4b43      	ldr	r3, [pc, #268]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a42      	ldr	r2, [pc, #264]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 80062d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062dc:	f7fb fa3a 	bl	8001754 <HAL_GetTick>
 80062e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062e4:	f7fb fa36 	bl	8001754 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e070      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062f6:	4b3a      	ldr	r3, [pc, #232]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0x7b0>
 8006302:	e068      	b.n	80063d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006304:	4b36      	ldr	r3, [pc, #216]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800630a:	4b35      	ldr	r3, [pc, #212]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	2b01      	cmp	r3, #1
 8006316:	d031      	beq.n	800637c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f003 0203 	and.w	r2, r3, #3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006322:	429a      	cmp	r2, r3
 8006324:	d12a      	bne.n	800637c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d122      	bne.n	800637c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006340:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006342:	429a      	cmp	r2, r3
 8006344:	d11a      	bne.n	800637c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	0a5b      	lsrs	r3, r3, #9
 800634a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006352:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006354:	429a      	cmp	r2, r3
 8006356:	d111      	bne.n	800637c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	0c1b      	lsrs	r3, r3, #16
 800635c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006364:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006366:	429a      	cmp	r2, r3
 8006368:	d108      	bne.n	800637c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	0e1b      	lsrs	r3, r3, #24
 800636e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006376:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006378:	429a      	cmp	r2, r3
 800637a:	d001      	beq.n	8006380 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e02b      	b.n	80063d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006380:	4b17      	ldr	r3, [pc, #92]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 8006382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006384:	08db      	lsrs	r3, r3, #3
 8006386:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800638a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	429a      	cmp	r2, r3
 8006394:	d01f      	beq.n	80063d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006396:	4b12      	ldr	r3, [pc, #72]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	4a11      	ldr	r2, [pc, #68]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063a2:	f7fb f9d7 	bl	8001754 <HAL_GetTick>
 80063a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80063a8:	bf00      	nop
 80063aa:	f7fb f9d3 	bl	8001754 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d0f9      	beq.n	80063aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063b6:	4b0a      	ldr	r3, [pc, #40]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 80063b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ba:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <HAL_RCC_OscConfig+0x8b0>)
 80063bc:	4013      	ands	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063c2:	00d2      	lsls	r2, r2, #3
 80063c4:	4906      	ldr	r1, [pc, #24]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80063ca:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 80063cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ce:	4a04      	ldr	r2, [pc, #16]	@ (80063e0 <HAL_RCC_OscConfig+0x8ac>)
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3730      	adds	r7, #48	@ 0x30
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	58024400 	.word	0x58024400
 80063e4:	ffff0007 	.word	0xffff0007

080063e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e19c      	b.n	8006736 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063fc:	4b8a      	ldr	r3, [pc, #552]	@ (8006628 <HAL_RCC_ClockConfig+0x240>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d910      	bls.n	800642c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640a:	4b87      	ldr	r3, [pc, #540]	@ (8006628 <HAL_RCC_ClockConfig+0x240>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 020f 	bic.w	r2, r3, #15
 8006412:	4985      	ldr	r1, [pc, #532]	@ (8006628 <HAL_RCC_ClockConfig+0x240>)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	4313      	orrs	r3, r2
 8006418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641a:	4b83      	ldr	r3, [pc, #524]	@ (8006628 <HAL_RCC_ClockConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d001      	beq.n	800642c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e184      	b.n	8006736 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d010      	beq.n	800645a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	4b7b      	ldr	r3, [pc, #492]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006444:	429a      	cmp	r2, r3
 8006446:	d908      	bls.n	800645a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006448:	4b78      	ldr	r3, [pc, #480]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	4975      	ldr	r1, [pc, #468]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 8006456:	4313      	orrs	r3, r2
 8006458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d010      	beq.n	8006488 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	4b70      	ldr	r3, [pc, #448]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006472:	429a      	cmp	r2, r3
 8006474:	d908      	bls.n	8006488 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006476:	4b6d      	ldr	r3, [pc, #436]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	496a      	ldr	r1, [pc, #424]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 8006484:	4313      	orrs	r3, r2
 8006486:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b00      	cmp	r3, #0
 8006492:	d010      	beq.n	80064b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	4b64      	ldr	r3, [pc, #400]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d908      	bls.n	80064b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064a4:	4b61      	ldr	r3, [pc, #388]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	495e      	ldr	r1, [pc, #376]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d010      	beq.n	80064e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69da      	ldr	r2, [r3, #28]
 80064c6:	4b59      	ldr	r3, [pc, #356]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d908      	bls.n	80064e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064d2:	4b56      	ldr	r3, [pc, #344]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	4953      	ldr	r1, [pc, #332]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d010      	beq.n	8006512 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	4b4d      	ldr	r3, [pc, #308]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d908      	bls.n	8006512 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006500:	4b4a      	ldr	r3, [pc, #296]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	f023 020f 	bic.w	r2, r3, #15
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4947      	ldr	r1, [pc, #284]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800650e:	4313      	orrs	r3, r2
 8006510:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d055      	beq.n	80065ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800651e:	4b43      	ldr	r3, [pc, #268]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	4940      	ldr	r1, [pc, #256]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800652c:	4313      	orrs	r3, r2
 800652e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d107      	bne.n	8006548 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006538:	4b3c      	ldr	r3, [pc, #240]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d121      	bne.n	8006588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0f6      	b.n	8006736 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d107      	bne.n	8006560 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006550:	4b36      	ldr	r3, [pc, #216]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d115      	bne.n	8006588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e0ea      	b.n	8006736 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d107      	bne.n	8006578 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006568:	4b30      	ldr	r3, [pc, #192]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006570:	2b00      	cmp	r3, #0
 8006572:	d109      	bne.n	8006588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0de      	b.n	8006736 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006578:	4b2c      	ldr	r3, [pc, #176]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e0d6      	b.n	8006736 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006588:	4b28      	ldr	r3, [pc, #160]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f023 0207 	bic.w	r2, r3, #7
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4925      	ldr	r1, [pc, #148]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 8006596:	4313      	orrs	r3, r2
 8006598:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659a:	f7fb f8db 	bl	8001754 <HAL_GetTick>
 800659e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a0:	e00a      	b.n	80065b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a2:	f7fb f8d7 	bl	8001754 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e0be      	b.n	8006736 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b8:	4b1c      	ldr	r3, [pc, #112]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d1eb      	bne.n	80065a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d010      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	4b14      	ldr	r3, [pc, #80]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d208      	bcs.n	80065f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e6:	4b11      	ldr	r3, [pc, #68]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f023 020f 	bic.w	r2, r3, #15
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	490e      	ldr	r1, [pc, #56]	@ (800662c <HAL_RCC_ClockConfig+0x244>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006628 <HAL_RCC_ClockConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d214      	bcs.n	8006630 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b08      	ldr	r3, [pc, #32]	@ (8006628 <HAL_RCC_ClockConfig+0x240>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 020f 	bic.w	r2, r3, #15
 800660e:	4906      	ldr	r1, [pc, #24]	@ (8006628 <HAL_RCC_ClockConfig+0x240>)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006616:	4b04      	ldr	r3, [pc, #16]	@ (8006628 <HAL_RCC_ClockConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d005      	beq.n	8006630 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e086      	b.n	8006736 <HAL_RCC_ClockConfig+0x34e>
 8006628:	52002000 	.word	0x52002000
 800662c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d010      	beq.n	800665e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	4b3f      	ldr	r3, [pc, #252]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006648:	429a      	cmp	r2, r3
 800664a:	d208      	bcs.n	800665e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800664c:	4b3c      	ldr	r3, [pc, #240]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	4939      	ldr	r1, [pc, #228]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 800665a:	4313      	orrs	r3, r2
 800665c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d010      	beq.n	800668c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695a      	ldr	r2, [r3, #20]
 800666e:	4b34      	ldr	r3, [pc, #208]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006676:	429a      	cmp	r2, r3
 8006678:	d208      	bcs.n	800668c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800667a:	4b31      	ldr	r3, [pc, #196]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	492e      	ldr	r1, [pc, #184]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 8006688:	4313      	orrs	r3, r2
 800668a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699a      	ldr	r2, [r3, #24]
 800669c:	4b28      	ldr	r3, [pc, #160]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d208      	bcs.n	80066ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066a8:	4b25      	ldr	r3, [pc, #148]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	4922      	ldr	r1, [pc, #136]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d010      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d208      	bcs.n	80066e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	4917      	ldr	r1, [pc, #92]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066e8:	f000 f834 	bl	8006754 <HAL_RCC_GetSysClockFreq>
 80066ec:	4602      	mov	r2, r0
 80066ee:	4b14      	ldr	r3, [pc, #80]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	0a1b      	lsrs	r3, r3, #8
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	4912      	ldr	r1, [pc, #72]	@ (8006744 <HAL_RCC_ClockConfig+0x35c>)
 80066fa:	5ccb      	ldrb	r3, [r1, r3]
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
 8006704:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006706:	4b0e      	ldr	r3, [pc, #56]	@ (8006740 <HAL_RCC_ClockConfig+0x358>)
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	4a0d      	ldr	r2, [pc, #52]	@ (8006744 <HAL_RCC_ClockConfig+0x35c>)
 8006710:	5cd3      	ldrb	r3, [r2, r3]
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
 800671c:	4a0a      	ldr	r2, [pc, #40]	@ (8006748 <HAL_RCC_ClockConfig+0x360>)
 800671e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006720:	4a0a      	ldr	r2, [pc, #40]	@ (800674c <HAL_RCC_ClockConfig+0x364>)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006726:	4b0a      	ldr	r3, [pc, #40]	@ (8006750 <HAL_RCC_ClockConfig+0x368>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f7fa fca2 	bl	8001074 <HAL_InitTick>
 8006730:	4603      	mov	r3, r0
 8006732:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	58024400 	.word	0x58024400
 8006744:	08010b30 	.word	0x08010b30
 8006748:	24000004 	.word	0x24000004
 800674c:	24000000 	.word	0x24000000
 8006750:	24000008 	.word	0x24000008

08006754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006754:	b480      	push	{r7}
 8006756:	b089      	sub	sp, #36	@ 0x24
 8006758:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800675a:	4bb3      	ldr	r3, [pc, #716]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006762:	2b18      	cmp	r3, #24
 8006764:	f200 8155 	bhi.w	8006a12 <HAL_RCC_GetSysClockFreq+0x2be>
 8006768:	a201      	add	r2, pc, #4	@ (adr r2, 8006770 <HAL_RCC_GetSysClockFreq+0x1c>)
 800676a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676e:	bf00      	nop
 8006770:	080067d5 	.word	0x080067d5
 8006774:	08006a13 	.word	0x08006a13
 8006778:	08006a13 	.word	0x08006a13
 800677c:	08006a13 	.word	0x08006a13
 8006780:	08006a13 	.word	0x08006a13
 8006784:	08006a13 	.word	0x08006a13
 8006788:	08006a13 	.word	0x08006a13
 800678c:	08006a13 	.word	0x08006a13
 8006790:	080067fb 	.word	0x080067fb
 8006794:	08006a13 	.word	0x08006a13
 8006798:	08006a13 	.word	0x08006a13
 800679c:	08006a13 	.word	0x08006a13
 80067a0:	08006a13 	.word	0x08006a13
 80067a4:	08006a13 	.word	0x08006a13
 80067a8:	08006a13 	.word	0x08006a13
 80067ac:	08006a13 	.word	0x08006a13
 80067b0:	08006801 	.word	0x08006801
 80067b4:	08006a13 	.word	0x08006a13
 80067b8:	08006a13 	.word	0x08006a13
 80067bc:	08006a13 	.word	0x08006a13
 80067c0:	08006a13 	.word	0x08006a13
 80067c4:	08006a13 	.word	0x08006a13
 80067c8:	08006a13 	.word	0x08006a13
 80067cc:	08006a13 	.word	0x08006a13
 80067d0:	08006807 	.word	0x08006807
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067d4:	4b94      	ldr	r3, [pc, #592]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d009      	beq.n	80067f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067e0:	4b91      	ldr	r3, [pc, #580]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	08db      	lsrs	r3, r3, #3
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	4a90      	ldr	r2, [pc, #576]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
 80067f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80067f2:	e111      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067f4:	4b8d      	ldr	r3, [pc, #564]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067f6:	61bb      	str	r3, [r7, #24]
      break;
 80067f8:	e10e      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80067fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067fc:	61bb      	str	r3, [r7, #24]
      break;
 80067fe:	e10b      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006800:	4b8c      	ldr	r3, [pc, #560]	@ (8006a34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006802:	61bb      	str	r3, [r7, #24]
      break;
 8006804:	e108      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006806:	4b88      	ldr	r3, [pc, #544]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006810:	4b85      	ldr	r3, [pc, #532]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006814:	091b      	lsrs	r3, r3, #4
 8006816:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800681a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800681c:	4b82      	ldr	r3, [pc, #520]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800681e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006826:	4b80      	ldr	r3, [pc, #512]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682a:	08db      	lsrs	r3, r3, #3
 800682c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	fb02 f303 	mul.w	r3, r2, r3
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80e1 	beq.w	8006a0c <HAL_RCC_GetSysClockFreq+0x2b8>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b02      	cmp	r3, #2
 800684e:	f000 8083 	beq.w	8006958 <HAL_RCC_GetSysClockFreq+0x204>
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b02      	cmp	r3, #2
 8006856:	f200 80a1 	bhi.w	800699c <HAL_RCC_GetSysClockFreq+0x248>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <HAL_RCC_GetSysClockFreq+0x114>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d056      	beq.n	8006914 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006866:	e099      	b.n	800699c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006868:	4b6f      	ldr	r3, [pc, #444]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0320 	and.w	r3, r3, #32
 8006870:	2b00      	cmp	r3, #0
 8006872:	d02d      	beq.n	80068d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006874:	4b6c      	ldr	r3, [pc, #432]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	08db      	lsrs	r3, r3, #3
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	4a6b      	ldr	r2, [pc, #428]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006880:	fa22 f303 	lsr.w	r3, r2, r3
 8006884:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800689e:	4b62      	ldr	r3, [pc, #392]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80068b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80068ce:	e087      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006a3c <HAL_RCC_GetSysClockFreq+0x2e8>
 80068de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e2:	4b51      	ldr	r3, [pc, #324]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80068f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006912:	e065      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006926:	4b40      	ldr	r3, [pc, #256]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006936:	ed97 6a02 	vldr	s12, [r7, #8]
 800693a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 800693e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800694a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800694e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006956:	e043      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006962:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696a:	4b2f      	ldr	r3, [pc, #188]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800697a:	ed97 6a02 	vldr	s12, [r7, #8]
 800697e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800698a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800698e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800699a:	e021      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069be:	ed97 6a02 	vldr	s12, [r7, #8]
 80069c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80069e0:	4b11      	ldr	r3, [pc, #68]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e4:	0a5b      	lsrs	r3, r3, #9
 80069e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ea:	3301      	adds	r3, #1
 80069ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80069fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a04:	ee17 3a90 	vmov	r3, s15
 8006a08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006a0a:	e005      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61bb      	str	r3, [r7, #24]
      break;
 8006a10:	e002      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006a12:	4b07      	ldr	r3, [pc, #28]	@ (8006a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a14:	61bb      	str	r3, [r7, #24]
      break;
 8006a16:	bf00      	nop
  }

  return sysclockfreq;
 8006a18:	69bb      	ldr	r3, [r7, #24]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3724      	adds	r7, #36	@ 0x24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	58024400 	.word	0x58024400
 8006a2c:	03d09000 	.word	0x03d09000
 8006a30:	003d0900 	.word	0x003d0900
 8006a34:	017d7840 	.word	0x017d7840
 8006a38:	46000000 	.word	0x46000000
 8006a3c:	4c742400 	.word	0x4c742400
 8006a40:	4a742400 	.word	0x4a742400
 8006a44:	4bbebc20 	.word	0x4bbebc20

08006a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a4e:	f7ff fe81 	bl	8006754 <HAL_RCC_GetSysClockFreq>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4b10      	ldr	r3, [pc, #64]	@ (8006a98 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	490f      	ldr	r1, [pc, #60]	@ (8006a9c <HAL_RCC_GetHCLKFreq+0x54>)
 8006a60:	5ccb      	ldrb	r3, [r1, r3]
 8006a62:	f003 031f 	and.w	r3, r3, #31
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a98 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	4a09      	ldr	r2, [pc, #36]	@ (8006a9c <HAL_RCC_GetHCLKFreq+0x54>)
 8006a76:	5cd3      	ldrb	r3, [r2, r3]
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a82:	4a07      	ldr	r2, [pc, #28]	@ (8006aa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a86:	4a07      	ldr	r2, [pc, #28]	@ (8006aa4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a8c:	4b04      	ldr	r3, [pc, #16]	@ (8006aa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	58024400 	.word	0x58024400
 8006a9c:	08010b30 	.word	0x08010b30
 8006aa0:	24000004 	.word	0x24000004
 8006aa4:	24000000 	.word	0x24000000

08006aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006aac:	f7ff ffcc 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	4b06      	ldr	r3, [pc, #24]	@ (8006acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	091b      	lsrs	r3, r3, #4
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	4904      	ldr	r1, [pc, #16]	@ (8006ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006abe:	5ccb      	ldrb	r3, [r1, r3]
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	08010b30 	.word	0x08010b30

08006ad4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	223f      	movs	r2, #63	@ 0x3f
 8006ae2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0207 	and.w	r2, r3, #7
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006af0:	4b17      	ldr	r3, [pc, #92]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006afc:	4b14      	ldr	r3, [pc, #80]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f003 020f 	and.w	r2, r3, #15
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006b08:	4b11      	ldr	r3, [pc, #68]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006b14:	4b0e      	ldr	r3, [pc, #56]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006b2c:	4b08      	ldr	r3, [pc, #32]	@ (8006b50 <HAL_RCC_GetClockConfig+0x7c>)
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b38:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <HAL_RCC_GetClockConfig+0x80>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 020f 	and.w	r2, r3, #15
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	601a      	str	r2, [r3, #0]
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	58024400 	.word	0x58024400
 8006b54:	52002000 	.word	0x52002000

08006b58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b5c:	b0ca      	sub	sp, #296	@ 0x128
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	ea54 0305 	orrs.w	r3, r4, r5
 8006b82:	d049      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b8e:	d02f      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b94:	d828      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b9a:	d01a      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ba0:	d822      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006baa:	d007      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bac:	e01c      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bae:	4bb8      	ldr	r3, [pc, #736]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb2:	4ab7      	ldr	r2, [pc, #732]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bba:	e01a      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	2102      	movs	r1, #2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 fb61 	bl	800928c <RCCEx_PLL2_Config>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bd0:	e00f      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd6:	3328      	adds	r3, #40	@ 0x28
 8006bd8:	2102      	movs	r1, #2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 fc08 	bl	80093f0 <RCCEx_PLL3_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006be6:	e004      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bee:	e000      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bfa:	4ba5      	ldr	r3, [pc, #660]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c08:	4aa1      	ldr	r2, [pc, #644]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c0e:	e003      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006c24:	f04f 0900 	mov.w	r9, #0
 8006c28:	ea58 0309 	orrs.w	r3, r8, r9
 8006c2c:	d047      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d82a      	bhi.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006c38:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c55 	.word	0x08006c55
 8006c44:	08006c63 	.word	0x08006c63
 8006c48:	08006c79 	.word	0x08006c79
 8006c4c:	08006c97 	.word	0x08006c97
 8006c50:	08006c97 	.word	0x08006c97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c54:	4b8e      	ldr	r3, [pc, #568]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	4a8d      	ldr	r2, [pc, #564]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c60:	e01a      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c66:	3308      	adds	r3, #8
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f002 fb0e 	bl	800928c <RCCEx_PLL2_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c76:	e00f      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7c:	3328      	adds	r3, #40	@ 0x28
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f002 fbb5 	bl	80093f0 <RCCEx_PLL3_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca4:	f023 0107 	bic.w	r1, r3, #7
 8006ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cae:	4a78      	ldr	r2, [pc, #480]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cb4:	e003      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006cca:	f04f 0b00 	mov.w	fp, #0
 8006cce:	ea5a 030b 	orrs.w	r3, sl, fp
 8006cd2:	d04c      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cde:	d030      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ce4:	d829      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ce6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ce8:	d02d      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006cea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cec:	d825      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cee:	2b80      	cmp	r3, #128	@ 0x80
 8006cf0:	d018      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006cf2:	2b80      	cmp	r3, #128	@ 0x80
 8006cf4:	d821      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006cfa:	2b40      	cmp	r3, #64	@ 0x40
 8006cfc:	d007      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006cfe:	e01c      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d00:	4b63      	ldr	r3, [pc, #396]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	4a62      	ldr	r2, [pc, #392]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d0c:	e01c      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d12:	3308      	adds	r3, #8
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f002 fab8 	bl	800928c <RCCEx_PLL2_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d22:	e011      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d28:	3328      	adds	r3, #40	@ 0x28
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 fb5f 	bl	80093f0 <RCCEx_PLL3_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d38:	e006      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d40:	e002      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d50:	4b4f      	ldr	r3, [pc, #316]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d54:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d64:	e003      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006d7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006d84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	d053      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d9a:	d035      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006d9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006da0:	d82e      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006da2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006da6:	d031      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006da8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006dac:	d828      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006db2:	d01a      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006db8:	d822      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dc2:	d007      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006dc4:	e01c      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc6:	4b32      	ldr	r3, [pc, #200]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dca:	4a31      	ldr	r2, [pc, #196]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dd2:	e01c      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd8:	3308      	adds	r3, #8
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f002 fa55 	bl	800928c <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006de8:	e011      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dee:	3328      	adds	r3, #40	@ 0x28
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f002 fafc 	bl	80093f0 <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dfe:	e006      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e06:	e002      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e000      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10b      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e16:	4b1e      	ldr	r3, [pc, #120]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e26:	4a1a      	ldr	r2, [pc, #104]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e2c:	e003      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006e42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e46:	2300      	movs	r3, #0
 8006e48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006e4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006e50:	460b      	mov	r3, r1
 8006e52:	4313      	orrs	r3, r2
 8006e54:	d056      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e62:	d038      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006e64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e68:	d831      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e6e:	d034      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006e70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e74:	d82b      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e7a:	d01d      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e80:	d825      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d006      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e8c:	e01f      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e94:	4ba2      	ldr	r3, [pc, #648]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	4aa1      	ldr	r2, [pc, #644]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ea0:	e01c      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f002 f9ee 	bl	800928c <RCCEx_PLL2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006eb6:	e011      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	3328      	adds	r3, #40	@ 0x28
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f002 fa95 	bl	80093f0 <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ecc:	e006      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ed4:	e002      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ed6:	bf00      	nop
 8006ed8:	e000      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ef4:	4a8a      	ldr	r2, [pc, #552]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006efa:	e003      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006f10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006f14:	2300      	movs	r3, #0
 8006f16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4313      	orrs	r3, r2
 8006f22:	d03a      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f2a:	2b30      	cmp	r3, #48	@ 0x30
 8006f2c:	d01f      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006f2e:	2b30      	cmp	r3, #48	@ 0x30
 8006f30:	d819      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d00c      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d815      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d019      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d111      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f42:	4b77      	ldr	r3, [pc, #476]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f46:	4a76      	ldr	r2, [pc, #472]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f4e:	e011      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f54:	3308      	adds	r3, #8
 8006f56:	2102      	movs	r1, #2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f002 f997 	bl	800928c <RCCEx_PLL2_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f64:	e006      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f6c:	e002      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f7c:	4b68      	ldr	r3, [pc, #416]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f80:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f8a:	4a65      	ldr	r2, [pc, #404]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f90:	e003      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006fa6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006faa:	2300      	movs	r3, #0
 8006fac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	d051      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fc4:	d035      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fca:	d82e      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fd0:	d031      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006fd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fd6:	d828      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fdc:	d01a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe2:	d822      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fec:	d007      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006fee:	e01c      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ffc:	e01c      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007002:	3308      	adds	r3, #8
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f002 f940 	bl	800928c <RCCEx_PLL2_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007012:	e011      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007018:	3328      	adds	r3, #40	@ 0x28
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f002 f9e7 	bl	80093f0 <RCCEx_PLL3_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007028:	e006      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007030:	e002      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007032:	bf00      	nop
 8007034:	e000      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007040:	4b37      	ldr	r3, [pc, #220]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007044:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800704e:	4a34      	ldr	r2, [pc, #208]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007050:	430b      	orrs	r3, r1
 8007052:	6513      	str	r3, [r2, #80]	@ 0x50
 8007054:	e003      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800705a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800706a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800706e:	2300      	movs	r3, #0
 8007070:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007074:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007078:	460b      	mov	r3, r1
 800707a:	4313      	orrs	r3, r2
 800707c:	d056      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007088:	d033      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800708a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800708e:	d82c      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007090:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007094:	d02f      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007096:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800709a:	d826      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800709c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070a0:	d02b      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80070a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070a6:	d820      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070ac:	d012      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80070ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070b2:	d81a      	bhi.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d022      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070bc:	d115      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c2:	3308      	adds	r3, #8
 80070c4:	2101      	movs	r1, #1
 80070c6:	4618      	mov	r0, r3
 80070c8:	f002 f8e0 	bl	800928c <RCCEx_PLL2_Config>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070d2:	e015      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d8:	3328      	adds	r3, #40	@ 0x28
 80070da:	2101      	movs	r1, #1
 80070dc:	4618      	mov	r0, r3
 80070de:	f002 f987 	bl	80093f0 <RCCEx_PLL3_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070e8:	e00a      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070f0:	e006      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070f2:	bf00      	nop
 80070f4:	e004      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070f6:	bf00      	nop
 80070f8:	e002      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070fa:	bf00      	nop
 80070fc:	e000      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10d      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007108:	4b05      	ldr	r3, [pc, #20]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800710a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800710c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007116:	4a02      	ldr	r2, [pc, #8]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007118:	430b      	orrs	r3, r1
 800711a:	6513      	str	r3, [r2, #80]	@ 0x50
 800711c:	e006      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800713c:	2300      	movs	r3, #0
 800713e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007142:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007146:	460b      	mov	r3, r1
 8007148:	4313      	orrs	r3, r2
 800714a:	d055      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800714c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007150:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007158:	d033      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800715a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800715e:	d82c      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007164:	d02f      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800716a:	d826      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800716c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007170:	d02b      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007172:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007176:	d820      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800717c:	d012      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800717e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007182:	d81a      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d022      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800718c:	d115      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007192:	3308      	adds	r3, #8
 8007194:	2101      	movs	r1, #1
 8007196:	4618      	mov	r0, r3
 8007198:	f002 f878 	bl	800928c <RCCEx_PLL2_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071a2:	e015      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a8:	3328      	adds	r3, #40	@ 0x28
 80071aa:	2101      	movs	r1, #1
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 f91f 	bl	80093f0 <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071b8:	e00a      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071c0:	e006      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071c2:	bf00      	nop
 80071c4:	e004      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071c6:	bf00      	nop
 80071c8:	e002      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071ca:	bf00      	nop
 80071cc:	e000      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10b      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071d8:	4ba3      	ldr	r3, [pc, #652]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071dc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071e8:	4a9f      	ldr	r2, [pc, #636]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ea:	430b      	orrs	r3, r1
 80071ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80071ee:	e003      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007204:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007208:	2300      	movs	r3, #0
 800720a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800720e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d037      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007222:	d00e      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007228:	d816      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d018      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800722e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007232:	d111      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007234:	4b8c      	ldr	r3, [pc, #560]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007238:	4a8b      	ldr	r2, [pc, #556]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800723a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800723e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007240:	e00f      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007246:	3308      	adds	r3, #8
 8007248:	2101      	movs	r1, #1
 800724a:	4618      	mov	r0, r3
 800724c:	f002 f81e 	bl	800928c <RCCEx_PLL2_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007256:	e004      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800725e:	e000      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800726a:	4b7f      	ldr	r3, [pc, #508]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800726c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800726e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007278:	4a7b      	ldr	r2, [pc, #492]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800727a:	430b      	orrs	r3, r1
 800727c:	6513      	str	r3, [r2, #80]	@ 0x50
 800727e:	e003      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800729e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4313      	orrs	r3, r2
 80072a6:	d039      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80072a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d81c      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80072b2:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072f5 	.word	0x080072f5
 80072bc:	080072c9 	.word	0x080072c9
 80072c0:	080072d7 	.word	0x080072d7
 80072c4:	080072f5 	.word	0x080072f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c8:	4b67      	ldr	r3, [pc, #412]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	4a66      	ldr	r2, [pc, #408]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072d4:	e00f      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072da:	3308      	adds	r3, #8
 80072dc:	2102      	movs	r1, #2
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 ffd4 	bl	800928c <RCCEx_PLL2_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072ea:	e004      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072f2:	e000      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80072f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80072fe:	4b5a      	ldr	r3, [pc, #360]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007302:	f023 0103 	bic.w	r1, r3, #3
 8007306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800730c:	4a56      	ldr	r2, [pc, #344]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800730e:	430b      	orrs	r3, r1
 8007310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007312:	e003      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007328:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800732c:	2300      	movs	r3, #0
 800732e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007332:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007336:	460b      	mov	r3, r1
 8007338:	4313      	orrs	r3, r2
 800733a:	f000 809f 	beq.w	800747c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800733e:	4b4b      	ldr	r3, [pc, #300]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a4a      	ldr	r2, [pc, #296]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800734a:	f7fa fa03 	bl	8001754 <HAL_GetTick>
 800734e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007352:	e00b      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007354:	f7fa f9fe 	bl	8001754 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b64      	cmp	r3, #100	@ 0x64
 8007362:	d903      	bls.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800736a:	e005      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800736c:	4b3f      	ldr	r3, [pc, #252]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0ed      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800737c:	2b00      	cmp	r3, #0
 800737e:	d179      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007380:	4b39      	ldr	r3, [pc, #228]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007382:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007388:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800738c:	4053      	eors	r3, r2
 800738e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007392:	2b00      	cmp	r3, #0
 8007394:	d015      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007396:	4b34      	ldr	r3, [pc, #208]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800739e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073a2:	4b31      	ldr	r3, [pc, #196]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a6:	4a30      	ldr	r2, [pc, #192]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073ae:	4b2e      	ldr	r3, [pc, #184]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b2:	4a2d      	ldr	r2, [pc, #180]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ce:	d118      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d0:	f7fa f9c0 	bl	8001754 <HAL_GetTick>
 80073d4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073d8:	e00d      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073da:	f7fa f9bb 	bl	8001754 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80073e4:	1ad2      	subs	r2, r2, r3
 80073e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d903      	bls.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80073f4:	e005      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0eb      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007406:	2b00      	cmp	r3, #0
 8007408:	d129      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800741a:	d10e      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800741c:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007428:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800742c:	091a      	lsrs	r2, r3, #4
 800742e:	4b10      	ldr	r3, [pc, #64]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007430:	4013      	ands	r3, r2
 8007432:	4a0d      	ldr	r2, [pc, #52]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007434:	430b      	orrs	r3, r1
 8007436:	6113      	str	r3, [r2, #16]
 8007438:	e005      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800743a:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	4a0a      	ldr	r2, [pc, #40]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007440:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007444:	6113      	str	r3, [r2, #16]
 8007446:	4b08      	ldr	r3, [pc, #32]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007448:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800744a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007456:	4a04      	ldr	r2, [pc, #16]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007458:	430b      	orrs	r3, r1
 800745a:	6713      	str	r3, [r2, #112]	@ 0x70
 800745c:	e00e      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800745e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007466:	e009      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007468:	58024400 	.word	0x58024400
 800746c:	58024800 	.word	0x58024800
 8007470:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f002 0301 	and.w	r3, r2, #1
 8007488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800748c:	2300      	movs	r3, #0
 800748e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007492:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007496:	460b      	mov	r3, r1
 8007498:	4313      	orrs	r3, r2
 800749a:	f000 8089 	beq.w	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074a4:	2b28      	cmp	r3, #40	@ 0x28
 80074a6:	d86b      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80074a8:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	08007589 	.word	0x08007589
 80074b4:	08007581 	.word	0x08007581
 80074b8:	08007581 	.word	0x08007581
 80074bc:	08007581 	.word	0x08007581
 80074c0:	08007581 	.word	0x08007581
 80074c4:	08007581 	.word	0x08007581
 80074c8:	08007581 	.word	0x08007581
 80074cc:	08007581 	.word	0x08007581
 80074d0:	08007555 	.word	0x08007555
 80074d4:	08007581 	.word	0x08007581
 80074d8:	08007581 	.word	0x08007581
 80074dc:	08007581 	.word	0x08007581
 80074e0:	08007581 	.word	0x08007581
 80074e4:	08007581 	.word	0x08007581
 80074e8:	08007581 	.word	0x08007581
 80074ec:	08007581 	.word	0x08007581
 80074f0:	0800756b 	.word	0x0800756b
 80074f4:	08007581 	.word	0x08007581
 80074f8:	08007581 	.word	0x08007581
 80074fc:	08007581 	.word	0x08007581
 8007500:	08007581 	.word	0x08007581
 8007504:	08007581 	.word	0x08007581
 8007508:	08007581 	.word	0x08007581
 800750c:	08007581 	.word	0x08007581
 8007510:	08007589 	.word	0x08007589
 8007514:	08007581 	.word	0x08007581
 8007518:	08007581 	.word	0x08007581
 800751c:	08007581 	.word	0x08007581
 8007520:	08007581 	.word	0x08007581
 8007524:	08007581 	.word	0x08007581
 8007528:	08007581 	.word	0x08007581
 800752c:	08007581 	.word	0x08007581
 8007530:	08007589 	.word	0x08007589
 8007534:	08007581 	.word	0x08007581
 8007538:	08007581 	.word	0x08007581
 800753c:	08007581 	.word	0x08007581
 8007540:	08007581 	.word	0x08007581
 8007544:	08007581 	.word	0x08007581
 8007548:	08007581 	.word	0x08007581
 800754c:	08007581 	.word	0x08007581
 8007550:	08007589 	.word	0x08007589
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007558:	3308      	adds	r3, #8
 800755a:	2101      	movs	r1, #1
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fe95 	bl	800928c <RCCEx_PLL2_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007568:	e00f      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756e:	3328      	adds	r3, #40	@ 0x28
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f001 ff3c 	bl	80093f0 <RCCEx_PLL3_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800757e:	e004      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007586:	e000      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007592:	4bbf      	ldr	r3, [pc, #764]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007596:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075a0:	4abb      	ldr	r2, [pc, #748]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075a2:	430b      	orrs	r3, r1
 80075a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80075a6:	e003      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f002 0302 	and.w	r3, r2, #2
 80075bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075c0:	2300      	movs	r3, #0
 80075c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80075c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80075ca:	460b      	mov	r3, r1
 80075cc:	4313      	orrs	r3, r2
 80075ce:	d041      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80075d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	d824      	bhi.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80075da:	a201      	add	r2, pc, #4	@ (adr r2, 80075e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	0800762d 	.word	0x0800762d
 80075e4:	080075f9 	.word	0x080075f9
 80075e8:	0800760f 	.word	0x0800760f
 80075ec:	0800762d 	.word	0x0800762d
 80075f0:	0800762d 	.word	0x0800762d
 80075f4:	0800762d 	.word	0x0800762d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fc:	3308      	adds	r3, #8
 80075fe:	2101      	movs	r1, #1
 8007600:	4618      	mov	r0, r3
 8007602:	f001 fe43 	bl	800928c <RCCEx_PLL2_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800760c:	e00f      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007612:	3328      	adds	r3, #40	@ 0x28
 8007614:	2101      	movs	r1, #1
 8007616:	4618      	mov	r0, r3
 8007618:	f001 feea 	bl	80093f0 <RCCEx_PLL3_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007622:	e004      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800762a:	e000      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800762c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800762e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007636:	4b96      	ldr	r3, [pc, #600]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763a:	f023 0107 	bic.w	r1, r3, #7
 800763e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007642:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007644:	4a92      	ldr	r2, [pc, #584]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007646:	430b      	orrs	r3, r1
 8007648:	6553      	str	r3, [r2, #84]	@ 0x54
 800764a:	e003      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f002 0304 	and.w	r3, r2, #4
 8007660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007664:	2300      	movs	r3, #0
 8007666:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800766a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800766e:	460b      	mov	r3, r1
 8007670:	4313      	orrs	r3, r2
 8007672:	d044      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800767c:	2b05      	cmp	r3, #5
 800767e:	d825      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007680:	a201      	add	r2, pc, #4	@ (adr r2, 8007688 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	080076d5 	.word	0x080076d5
 800768c:	080076a1 	.word	0x080076a1
 8007690:	080076b7 	.word	0x080076b7
 8007694:	080076d5 	.word	0x080076d5
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076d5 	.word	0x080076d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a4:	3308      	adds	r3, #8
 80076a6:	2101      	movs	r1, #1
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 fdef 	bl	800928c <RCCEx_PLL2_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076b4:	e00f      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	3328      	adds	r3, #40	@ 0x28
 80076bc:	2101      	movs	r1, #1
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 fe96 	bl	80093f0 <RCCEx_PLL3_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076ca:	e004      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076d2:	e000      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80076d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076de:	4b6c      	ldr	r3, [pc, #432]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e2:	f023 0107 	bic.w	r1, r3, #7
 80076e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076ee:	4a68      	ldr	r2, [pc, #416]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076f0:	430b      	orrs	r3, r1
 80076f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80076f4:	e003      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	f002 0320 	and.w	r3, r2, #32
 800770a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800770e:	2300      	movs	r3, #0
 8007710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007718:	460b      	mov	r3, r1
 800771a:	4313      	orrs	r3, r2
 800771c:	d055      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800771e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007726:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800772a:	d033      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800772c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007730:	d82c      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007736:	d02f      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773c:	d826      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800773e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007742:	d02b      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007744:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007748:	d820      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774e:	d012      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007754:	d81a      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d022      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800775a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800775e:	d115      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007764:	3308      	adds	r3, #8
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f001 fd8f 	bl	800928c <RCCEx_PLL2_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007774:	e015      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777a:	3328      	adds	r3, #40	@ 0x28
 800777c:	2102      	movs	r1, #2
 800777e:	4618      	mov	r0, r3
 8007780:	f001 fe36 	bl	80093f0 <RCCEx_PLL3_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800778a:	e00a      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007792:	e006      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007794:	bf00      	nop
 8007796:	e004      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007798:	bf00      	nop
 800779a:	e002      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800779c:	bf00      	nop
 800779e:	e000      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077aa:	4b39      	ldr	r3, [pc, #228]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ba:	4a35      	ldr	r2, [pc, #212]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077bc:	430b      	orrs	r3, r1
 80077be:	6553      	str	r3, [r2, #84]	@ 0x54
 80077c0:	e003      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80077d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077da:	2300      	movs	r3, #0
 80077dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80077e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4313      	orrs	r3, r2
 80077e8:	d058      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80077ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80077f6:	d033      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80077f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80077fc:	d82c      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007802:	d02f      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007808:	d826      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800780a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800780e:	d02b      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007810:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007814:	d820      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800781a:	d012      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800781c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007820:	d81a      	bhi.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d022      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800782a:	d115      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007830:	3308      	adds	r3, #8
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f001 fd29 	bl	800928c <RCCEx_PLL2_Config>
 800783a:	4603      	mov	r3, r0
 800783c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007840:	e015      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007846:	3328      	adds	r3, #40	@ 0x28
 8007848:	2102      	movs	r1, #2
 800784a:	4618      	mov	r0, r3
 800784c:	f001 fdd0 	bl	80093f0 <RCCEx_PLL3_Config>
 8007850:	4603      	mov	r3, r0
 8007852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007856:	e00a      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800785e:	e006      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007860:	bf00      	nop
 8007862:	e004      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007864:	bf00      	nop
 8007866:	e002      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007868:	bf00      	nop
 800786a:	e000      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800786c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10e      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007876:	4b06      	ldr	r3, [pc, #24]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007886:	4a02      	ldr	r2, [pc, #8]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007888:	430b      	orrs	r3, r1
 800788a:	6593      	str	r3, [r2, #88]	@ 0x58
 800788c:	e006      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800788e:	bf00      	nop
 8007890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80078a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078ac:	2300      	movs	r3, #0
 80078ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80078b6:	460b      	mov	r3, r1
 80078b8:	4313      	orrs	r3, r2
 80078ba:	d055      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078c8:	d033      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80078ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078ce:	d82c      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078d4:	d02f      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80078d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078da:	d826      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80078e0:	d02b      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80078e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80078e6:	d820      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078ec:	d012      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80078ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078f2:	d81a      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d022      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80078f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078fc:	d115      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007902:	3308      	adds	r3, #8
 8007904:	2100      	movs	r1, #0
 8007906:	4618      	mov	r0, r3
 8007908:	f001 fcc0 	bl	800928c <RCCEx_PLL2_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007912:	e015      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	3328      	adds	r3, #40	@ 0x28
 800791a:	2102      	movs	r1, #2
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fd67 	bl	80093f0 <RCCEx_PLL3_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007928:	e00a      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007930:	e006      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007932:	bf00      	nop
 8007934:	e004      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007936:	bf00      	nop
 8007938:	e002      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800793a:	bf00      	nop
 800793c:	e000      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800793e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10b      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007948:	4ba1      	ldr	r3, [pc, #644]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800794a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007958:	4a9d      	ldr	r2, [pc, #628]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800795a:	430b      	orrs	r3, r1
 800795c:	6593      	str	r3, [r2, #88]	@ 0x58
 800795e:	e003      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f002 0308 	and.w	r3, r2, #8
 8007974:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007978:	2300      	movs	r3, #0
 800797a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800797e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007982:	460b      	mov	r3, r1
 8007984:	4313      	orrs	r3, r2
 8007986:	d01e      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007994:	d10c      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	3328      	adds	r3, #40	@ 0x28
 800799c:	2102      	movs	r1, #2
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fd26 	bl	80093f0 <RCCEx_PLL3_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80079b0:	4b87      	ldr	r3, [pc, #540]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c0:	4a83      	ldr	r2, [pc, #524]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079c2:	430b      	orrs	r3, r1
 80079c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f002 0310 	and.w	r3, r2, #16
 80079d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80079d6:	2300      	movs	r3, #0
 80079d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80079e0:	460b      	mov	r3, r1
 80079e2:	4313      	orrs	r3, r2
 80079e4:	d01e      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079f2:	d10c      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f8:	3328      	adds	r3, #40	@ 0x28
 80079fa:	2102      	movs	r1, #2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fcf7 	bl	80093f0 <RCCEx_PLL3_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a0e:	4b70      	ldr	r3, [pc, #448]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a1e:	4a6c      	ldr	r2, [pc, #432]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007a30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a34:	2300      	movs	r3, #0
 8007a36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a3a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4313      	orrs	r3, r2
 8007a42:	d03e      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a50:	d022      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007a52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a56:	d81b      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a60:	d00b      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007a62:	e015      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a68:	3308      	adds	r3, #8
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f001 fc0d 	bl	800928c <RCCEx_PLL2_Config>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a78:	e00f      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	3328      	adds	r3, #40	@ 0x28
 8007a80:	2102      	movs	r1, #2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 fcb4 	bl	80093f0 <RCCEx_PLL3_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a8e:	e004      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a96:	e000      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ab2:	4a47      	ldr	r2, [pc, #284]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ab8:	e003      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ace:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ad4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4313      	orrs	r3, r2
 8007adc:	d03b      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007aea:	d01f      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007aec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007af0:	d818      	bhi.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af6:	d003      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007af8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007afc:	d007      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007afe:	e011      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b00:	4b33      	ldr	r3, [pc, #204]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b04:	4a32      	ldr	r2, [pc, #200]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b0c:	e00f      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b12:	3328      	adds	r3, #40	@ 0x28
 8007b14:	2101      	movs	r1, #1
 8007b16:	4618      	mov	r0, r3
 8007b18:	f001 fc6a 	bl	80093f0 <RCCEx_PLL3_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b22:	e004      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b2a:	e000      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b36:	4b26      	ldr	r3, [pc, #152]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b46:	4a22      	ldr	r2, [pc, #136]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b4c:	e003      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b62:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b64:	2300      	movs	r3, #0
 8007b66:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	d034      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b80:	d007      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007b82:	e011      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b84:	4b12      	ldr	r3, [pc, #72]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b88:	4a11      	ldr	r2, [pc, #68]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b90:	e00e      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	3308      	adds	r3, #8
 8007b98:	2102      	movs	r1, #2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 fb76 	bl	800928c <RCCEx_PLL2_Config>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ba6:	e003      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10d      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bb8:	4b05      	ldr	r3, [pc, #20]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bbc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc6:	4a02      	ldr	r2, [pc, #8]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007bcc:	e006      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007bce:	bf00      	nop
 8007bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007be8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bea:	2300      	movs	r3, #0
 8007bec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	d00c      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfc:	3328      	adds	r3, #40	@ 0x28
 8007bfe:	2102      	movs	r1, #2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f001 fbf5 	bl	80093f0 <RCCEx_PLL3_Config>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007c1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c20:	2300      	movs	r3, #0
 8007c22:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	d038      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c3a:	d018      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007c3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c40:	d811      	bhi.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c46:	d014      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c4c:	d80b      	bhi.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d011      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c56:	d106      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c58:	4bc3      	ldr	r3, [pc, #780]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	4ac2      	ldr	r2, [pc, #776]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007c64:	e008      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c6c:	e004      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c6e:	bf00      	nop
 8007c70:	e002      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c72:	bf00      	nop
 8007c74:	e000      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c80:	4bb9      	ldr	r3, [pc, #740]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c84:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c90:	4ab5      	ldr	r2, [pc, #724]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c92:	430b      	orrs	r3, r1
 8007c94:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c96:	e003      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007cac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cae:	2300      	movs	r3, #0
 8007cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cb2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	d009      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007cbc:	4baa      	ldr	r3, [pc, #680]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cca:	4aa7      	ldr	r2, [pc, #668]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007cdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cde:	2300      	movs	r3, #0
 8007ce0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ce2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	d00a      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007cec:	4b9e      	ldr	r3, [pc, #632]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007cfc:	4a9a      	ldr	r2, [pc, #616]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d10:	2300      	movs	r3, #0
 8007d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	d009      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d1e:	4b92      	ldr	r3, [pc, #584]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d22:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d2c:	4a8e      	ldr	r2, [pc, #568]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d40:	2300      	movs	r3, #0
 8007d42:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	d00e      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d4e:	4b86      	ldr	r3, [pc, #536]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	4a85      	ldr	r2, [pc, #532]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d58:	6113      	str	r3, [r2, #16]
 8007d5a:	4b83      	ldr	r3, [pc, #524]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d5c:	6919      	ldr	r1, [r3, #16]
 8007d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d66:	4a80      	ldr	r2, [pc, #512]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007d82:	460b      	mov	r3, r1
 8007d84:	4313      	orrs	r3, r2
 8007d86:	d009      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d88:	4b77      	ldr	r3, [pc, #476]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d8c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d96:	4a74      	ldr	r2, [pc, #464]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007daa:	2300      	movs	r3, #0
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007db2:	460b      	mov	r3, r1
 8007db4:	4313      	orrs	r3, r2
 8007db6:	d00a      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007db8:	4b6b      	ldr	r3, [pc, #428]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dbc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dc8:	4a67      	ldr	r2, [pc, #412]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dca:	430b      	orrs	r3, r1
 8007dcc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007de0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007de4:	460b      	mov	r3, r1
 8007de6:	4313      	orrs	r3, r2
 8007de8:	d011      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dee:	3308      	adds	r3, #8
 8007df0:	2100      	movs	r1, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 fa4a 	bl	800928c <RCCEx_PLL2_Config>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	2100      	movs	r1, #0
 8007e18:	6239      	str	r1, [r7, #32]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e24:	460b      	mov	r3, r1
 8007e26:	4313      	orrs	r3, r2
 8007e28:	d011      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2e:	3308      	adds	r3, #8
 8007e30:	2101      	movs	r1, #1
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 fa2a 	bl	800928c <RCCEx_PLL2_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	2100      	movs	r1, #0
 8007e58:	61b9      	str	r1, [r7, #24]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e64:	460b      	mov	r3, r1
 8007e66:	4313      	orrs	r3, r2
 8007e68:	d011      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6e:	3308      	adds	r3, #8
 8007e70:	2102      	movs	r1, #2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 fa0a 	bl	800928c <RCCEx_PLL2_Config>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	2100      	movs	r1, #0
 8007e98:	6139      	str	r1, [r7, #16]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	d011      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eae:	3328      	adds	r3, #40	@ 0x28
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 fa9c 	bl	80093f0 <RCCEx_PLL3_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	f003 0310 	and.w	r3, r3, #16
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	d011      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eee:	3328      	adds	r3, #40	@ 0x28
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f001 fa7c 	bl	80093f0 <RCCEx_PLL3_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	2100      	movs	r1, #0
 8007f18:	6039      	str	r1, [r7, #0]
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	607b      	str	r3, [r7, #4]
 8007f20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f24:	460b      	mov	r3, r1
 8007f26:	4313      	orrs	r3, r2
 8007f28:	d011      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	3328      	adds	r3, #40	@ 0x28
 8007f30:	2102      	movs	r1, #2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fa5c 	bl	80093f0 <RCCEx_PLL3_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007f4e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	e000      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007f62:	46bd      	mov	sp, r7
 8007f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f68:	58024400 	.word	0x58024400

08007f6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b090      	sub	sp, #64	@ 0x40
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007f7e:	430b      	orrs	r3, r1
 8007f80:	f040 8094 	bne.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007f84:	4b9e      	ldr	r3, [pc, #632]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	f200 8087 	bhi.w	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007f96:	a201      	add	r2, pc, #4	@ (adr r2, 8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9c:	08007fb1 	.word	0x08007fb1
 8007fa0:	08007fd9 	.word	0x08007fd9
 8007fa4:	08008001 	.word	0x08008001
 8007fa8:	0800809d 	.word	0x0800809d
 8007fac:	08008029 	.word	0x08008029
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fb0:	4b93      	ldr	r3, [pc, #588]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fbc:	d108      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f001 f810 	bl	8008fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fcc:	f000 bd45 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd4:	f000 bd41 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fd8:	4b89      	ldr	r3, [pc, #548]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fe4:	d108      	bne.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe6:	f107 0318 	add.w	r3, r7, #24
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 fd54 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff4:	f000 bd31 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ffc:	f000 bd2d 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008000:	4b7f      	ldr	r3, [pc, #508]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800800c:	d108      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800e:	f107 030c 	add.w	r3, r7, #12
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fe94 	bl	8008d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800801c:	f000 bd1d 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008024:	f000 bd19 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008028:	4b75      	ldr	r3, [pc, #468]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800802a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800802c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008030:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008032:	4b73      	ldr	r3, [pc, #460]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b04      	cmp	r3, #4
 800803c:	d10c      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800803e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008044:	4b6e      	ldr	r3, [pc, #440]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	08db      	lsrs	r3, r3, #3
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	4a6d      	ldr	r2, [pc, #436]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008050:	fa22 f303 	lsr.w	r3, r2, r3
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008056:	e01f      	b.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008058:	4b69      	ldr	r3, [pc, #420]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008064:	d106      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800806c:	d102      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800806e:	4b66      	ldr	r3, [pc, #408]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008072:	e011      	b.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008074:	4b62      	ldr	r3, [pc, #392]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800807c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008080:	d106      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008088:	d102      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800808a:	4b60      	ldr	r3, [pc, #384]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800808c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800808e:	e003      	b.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008094:	f000 bce1 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008098:	f000 bcdf 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800809c:	4b5c      	ldr	r3, [pc, #368]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800809e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a0:	f000 bcdb 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a8:	f000 bcd7 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80080ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80080b4:	430b      	orrs	r3, r1
 80080b6:	f040 80ad 	bne.w	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80080ba:	4b51      	ldr	r3, [pc, #324]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080be:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80080c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80080c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ca:	d056      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080d2:	f200 8090 	bhi.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80080da:	f000 8088 	beq.w	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80080e2:	f200 8088 	bhi.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	2b80      	cmp	r3, #128	@ 0x80
 80080ea:	d032      	beq.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	2b80      	cmp	r3, #128	@ 0x80
 80080f0:	f200 8081 	bhi.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	2b40      	cmp	r3, #64	@ 0x40
 80080fe:	d014      	beq.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008100:	e079      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008102:	4b3f      	ldr	r3, [pc, #252]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800810a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800810e:	d108      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008114:	4618      	mov	r0, r3
 8008116:	f000 ff67 	bl	8008fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800811e:	f000 bc9c 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008126:	f000 bc98 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800812a:	4b35      	ldr	r3, [pc, #212]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008136:	d108      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008138:	f107 0318 	add.w	r3, r7, #24
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fcab 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008146:	f000 bc88 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814e:	f000 bc84 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008152:	4b2b      	ldr	r3, [pc, #172]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800815a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800815e:	d108      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008160:	f107 030c 	add.w	r3, r7, #12
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fdeb 	bl	8008d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800816e:	f000 bc74 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008176:	f000 bc70 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800817a:	4b21      	ldr	r3, [pc, #132]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800817c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800817e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008184:	4b1e      	ldr	r3, [pc, #120]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b04      	cmp	r3, #4
 800818e:	d10c      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008196:	4b1a      	ldr	r3, [pc, #104]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	08db      	lsrs	r3, r3, #3
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	4a18      	ldr	r2, [pc, #96]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081a2:	fa22 f303 	lsr.w	r3, r2, r3
 80081a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081a8:	e01f      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081aa:	4b15      	ldr	r3, [pc, #84]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b6:	d106      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80081b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081be:	d102      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081c0:	4b11      	ldr	r3, [pc, #68]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081c4:	e011      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d2:	d106      	bne.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80081d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081da:	d102      	bne.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081dc:	4b0b      	ldr	r3, [pc, #44]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e0:	e003      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081e6:	f000 bc38 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081ea:	f000 bc36 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081ee:	4b08      	ldr	r3, [pc, #32]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f2:	f000 bc32 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081fa:	f000 bc2e 	b.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081fe:	bf00      	nop
 8008200:	58024400 	.word	0x58024400
 8008204:	03d09000 	.word	0x03d09000
 8008208:	003d0900 	.word	0x003d0900
 800820c:	017d7840 	.word	0x017d7840
 8008210:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008218:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800821c:	430b      	orrs	r3, r1
 800821e:	f040 809c 	bne.w	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008222:	4b9e      	ldr	r3, [pc, #632]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008226:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800822a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008232:	d054      	beq.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800823a:	f200 808b 	bhi.w	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008244:	f000 8083 	beq.w	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800824e:	f200 8081 	bhi.w	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008258:	d02f      	beq.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008260:	d878      	bhi.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008264:	2b00      	cmp	r3, #0
 8008266:	d004      	beq.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800826e:	d012      	beq.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008270:	e070      	b.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008272:	4b8a      	ldr	r3, [pc, #552]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800827a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800827e:	d107      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008284:	4618      	mov	r0, r3
 8008286:	f000 feaf 	bl	8008fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800828e:	e3e4      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008294:	e3e1      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008296:	4b81      	ldr	r3, [pc, #516]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800829e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082a2:	d107      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082a4:	f107 0318 	add.w	r3, r7, #24
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fbf5 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b2:	e3d2      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b8:	e3cf      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082ba:	4b78      	ldr	r3, [pc, #480]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082c6:	d107      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c8:	f107 030c 	add.w	r3, r7, #12
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fd37 	bl	8008d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d6:	e3c0      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082dc:	e3bd      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082de:	4b6f      	ldr	r3, [pc, #444]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082e8:	4b6c      	ldr	r3, [pc, #432]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d10c      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80082f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082fa:	4b68      	ldr	r3, [pc, #416]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	08db      	lsrs	r3, r3, #3
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	4a66      	ldr	r2, [pc, #408]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008306:	fa22 f303 	lsr.w	r3, r2, r3
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800830c:	e01e      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800830e:	4b63      	ldr	r3, [pc, #396]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800831a:	d106      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800831c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008322:	d102      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008324:	4b5f      	ldr	r3, [pc, #380]	@ (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008328:	e010      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800832a:	4b5c      	ldr	r3, [pc, #368]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008336:	d106      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800833e:	d102      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008340:	4b59      	ldr	r3, [pc, #356]	@ (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008344:	e002      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008346:	2300      	movs	r3, #0
 8008348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800834a:	e386      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800834c:	e385      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800834e:	4b57      	ldr	r3, [pc, #348]	@ (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008352:	e382      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008358:	e37f      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800835a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800835e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008362:	430b      	orrs	r3, r1
 8008364:	f040 80a7 	bne.w	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008368:	4b4c      	ldr	r3, [pc, #304]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800836a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800836c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008370:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008378:	d055      	beq.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800837a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008380:	f200 8096 	bhi.w	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800838a:	f000 8084 	beq.w	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008394:	f200 808c 	bhi.w	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800839e:	d030      	beq.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80083a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083a6:	f200 8083 	bhi.w	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80083b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083b6:	d012      	beq.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80083b8:	e07a      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083ba:	4b38      	ldr	r3, [pc, #224]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083c6:	d107      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fe0b 	bl	8008fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d6:	e340      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083dc:	e33d      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083de:	4b2f      	ldr	r3, [pc, #188]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083ea:	d107      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ec:	f107 0318 	add.w	r3, r7, #24
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fb51 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083fa:	e32e      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008400:	e32b      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008402:	4b26      	ldr	r3, [pc, #152]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800840a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800840e:	d107      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008410:	f107 030c 	add.w	r3, r7, #12
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fc93 	bl	8008d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800841e:	e31c      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008424:	e319      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008426:	4b1d      	ldr	r3, [pc, #116]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800842a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008430:	4b1a      	ldr	r3, [pc, #104]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b04      	cmp	r3, #4
 800843a:	d10c      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800843c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008442:	4b16      	ldr	r3, [pc, #88]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	08db      	lsrs	r3, r3, #3
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	4a14      	ldr	r2, [pc, #80]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800844e:	fa22 f303 	lsr.w	r3, r2, r3
 8008452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008454:	e01e      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008456:	4b11      	ldr	r3, [pc, #68]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008462:	d106      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800846a:	d102      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800846c:	4b0d      	ldr	r3, [pc, #52]	@ (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800846e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008470:	e010      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008472:	4b0a      	ldr	r3, [pc, #40]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800847a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800847e:	d106      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008486:	d102      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008488:	4b07      	ldr	r3, [pc, #28]	@ (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800848a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800848c:	e002      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008492:	e2e2      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008494:	e2e1      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008496:	4b05      	ldr	r3, [pc, #20]	@ (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800849a:	e2de      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800849c:	58024400 	.word	0x58024400
 80084a0:	03d09000 	.word	0x03d09000
 80084a4:	003d0900 	.word	0x003d0900
 80084a8:	017d7840 	.word	0x017d7840
 80084ac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084b4:	e2d1      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80084b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ba:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80084be:	430b      	orrs	r3, r1
 80084c0:	f040 809c 	bne.w	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80084c4:	4b93      	ldr	r3, [pc, #588]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80084cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80084ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084d4:	d054      	beq.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80084d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084dc:	f200 808b 	bhi.w	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084e6:	f000 8083 	beq.w	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80084ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084f0:	f200 8081 	bhi.w	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084fa:	d02f      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80084fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008502:	d878      	bhi.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800850a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008510:	d012      	beq.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008512:	e070      	b.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008514:	4b7f      	ldr	r3, [pc, #508]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008520:	d107      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fd5e 	bl	8008fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800852c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008530:	e293      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008536:	e290      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008538:	4b76      	ldr	r3, [pc, #472]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008544:	d107      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008546:	f107 0318 	add.w	r3, r7, #24
 800854a:	4618      	mov	r0, r3
 800854c:	f000 faa4 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008554:	e281      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855a:	e27e      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800855c:	4b6d      	ldr	r3, [pc, #436]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008568:	d107      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800856a:	f107 030c 	add.w	r3, r7, #12
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fbe6 	bl	8008d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008578:	e26f      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800857e:	e26c      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008580:	4b64      	ldr	r3, [pc, #400]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008584:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008588:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800858a:	4b62      	ldr	r3, [pc, #392]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b04      	cmp	r3, #4
 8008594:	d10c      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008598:	2b00      	cmp	r3, #0
 800859a:	d109      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800859c:	4b5d      	ldr	r3, [pc, #372]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	08db      	lsrs	r3, r3, #3
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	4a5c      	ldr	r2, [pc, #368]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80085a8:	fa22 f303 	lsr.w	r3, r2, r3
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ae:	e01e      	b.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085b0:	4b58      	ldr	r3, [pc, #352]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085bc:	d106      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80085be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085c4:	d102      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085c6:	4b55      	ldr	r3, [pc, #340]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ca:	e010      	b.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085cc:	4b51      	ldr	r3, [pc, #324]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d8:	d106      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80085da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085e0:	d102      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085e2:	4b4f      	ldr	r3, [pc, #316]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085e6:	e002      	b.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085ec:	e235      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085ee:	e234      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085f0:	4b4c      	ldr	r3, [pc, #304]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f4:	e231      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fa:	e22e      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80085fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008600:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008604:	430b      	orrs	r3, r1
 8008606:	f040 808f 	bne.w	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800860a:	4b42      	ldr	r3, [pc, #264]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800860c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800860e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008612:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008616:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800861a:	d06b      	beq.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008622:	d874      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800862a:	d056      	beq.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008632:	d86c      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008636:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800863a:	d03b      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008642:	d864      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800864a:	d021      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800864c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008652:	d85c      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008656:	2b00      	cmp	r3, #0
 8008658:	d004      	beq.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800865a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008660:	d004      	beq.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008662:	e054      	b.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008664:	f7fe fa20 	bl	8006aa8 <HAL_RCC_GetPCLK1Freq>
 8008668:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800866a:	e1f6      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800866c:	4b29      	ldr	r3, [pc, #164]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008678:	d107      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867a:	f107 0318 	add.w	r3, r7, #24
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fa0a 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008688:	e1e7      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868e:	e1e4      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008690:	4b20      	ldr	r3, [pc, #128]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800869c:	d107      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800869e:	f107 030c 	add.w	r3, r7, #12
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fb4c 	bl	8008d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	e1d5      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b2:	e1d2      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086b4:	4b17      	ldr	r3, [pc, #92]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d109      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c0:	4b14      	ldr	r3, [pc, #80]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	08db      	lsrs	r3, r3, #3
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	4a13      	ldr	r2, [pc, #76]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
 80086d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d2:	e1c2      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d8:	e1bf      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086da:	4b0e      	ldr	r3, [pc, #56]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e6:	d102      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80086e8:	4b0c      	ldr	r3, [pc, #48]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ec:	e1b5      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f2:	e1b2      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086f4:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008700:	d102      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008702:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008706:	e1a8      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800870c:	e1a5      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008712:	e1a2      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008714:	58024400 	.word	0x58024400
 8008718:	03d09000 	.word	0x03d09000
 800871c:	003d0900 	.word	0x003d0900
 8008720:	017d7840 	.word	0x017d7840
 8008724:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008730:	430b      	orrs	r3, r1
 8008732:	d173      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008734:	4b9c      	ldr	r3, [pc, #624]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800873c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800873e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008744:	d02f      	beq.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800874c:	d863      	bhi.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800874e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800875a:	d012      	beq.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800875c:	e05b      	b.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800875e:	4b92      	ldr	r3, [pc, #584]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800876a:	d107      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800876c:	f107 0318 	add.w	r3, r7, #24
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f991 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800877a:	e16e      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008780:	e16b      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008782:	4b89      	ldr	r3, [pc, #548]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800878a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800878e:	d107      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008790:	f107 030c 	add.w	r3, r7, #12
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fad3 	bl	8008d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800879e:	e15c      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a4:	e159      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087a6:	4b80      	ldr	r3, [pc, #512]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087b0:	4b7d      	ldr	r3, [pc, #500]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d10c      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80087bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087c2:	4b79      	ldr	r3, [pc, #484]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	08db      	lsrs	r3, r3, #3
 80087c8:	f003 0303 	and.w	r3, r3, #3
 80087cc:	4a77      	ldr	r2, [pc, #476]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80087ce:	fa22 f303 	lsr.w	r3, r2, r3
 80087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087d4:	e01e      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087d6:	4b74      	ldr	r3, [pc, #464]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087e2:	d106      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80087e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087ea:	d102      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087ec:	4b70      	ldr	r3, [pc, #448]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087f0:	e010      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087f2:	4b6d      	ldr	r3, [pc, #436]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087fe:	d106      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008806:	d102      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008808:	4b6a      	ldr	r3, [pc, #424]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800880c:	e002      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008812:	e122      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008814:	e121      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881a:	e11e      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800881c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008820:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008824:	430b      	orrs	r3, r1
 8008826:	d133      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008828:	4b5f      	ldr	r3, [pc, #380]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800882a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800882c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008830:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800883e:	d012      	beq.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008840:	e023      	b.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008842:	4b59      	ldr	r3, [pc, #356]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800884a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800884e:	d107      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fbc7 	bl	8008fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800885e:	e0fc      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008864:	e0f9      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008866:	4b50      	ldr	r3, [pc, #320]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800886e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008872:	d107      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008874:	f107 0318 	add.w	r3, r7, #24
 8008878:	4618      	mov	r0, r3
 800887a:	f000 f90d 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008882:	e0ea      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008888:	e0e7      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800888e:	e0e4      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008894:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008898:	430b      	orrs	r3, r1
 800889a:	f040 808d 	bne.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800889e:	4b42      	ldr	r3, [pc, #264]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80088a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80088a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088ae:	d06b      	beq.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088b6:	d874      	bhi.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088be:	d056      	beq.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80088c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c6:	d86c      	bhi.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088ce:	d03b      	beq.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80088d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088d6:	d864      	bhi.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088de:	d021      	beq.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80088e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088e6:	d85c      	bhi.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d004      	beq.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80088ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088f4:	d004      	beq.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80088f6:	e054      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80088f8:	f000 f8b8 	bl	8008a6c <HAL_RCCEx_GetD3PCLK1Freq>
 80088fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088fe:	e0ac      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008900:	4b29      	ldr	r3, [pc, #164]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800890c:	d107      	bne.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800890e:	f107 0318 	add.w	r3, r7, #24
 8008912:	4618      	mov	r0, r3
 8008914:	f000 f8c0 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800891c:	e09d      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008922:	e09a      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008924:	4b20      	ldr	r3, [pc, #128]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800892c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008930:	d107      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008932:	f107 030c 	add.w	r3, r7, #12
 8008936:	4618      	mov	r0, r3
 8008938:	f000 fa02 	bl	8008d40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008940:	e08b      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008946:	e088      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008948:	4b17      	ldr	r3, [pc, #92]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b04      	cmp	r3, #4
 8008952:	d109      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008954:	4b14      	ldr	r3, [pc, #80]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	08db      	lsrs	r3, r3, #3
 800895a:	f003 0303 	and.w	r3, r3, #3
 800895e:	4a13      	ldr	r2, [pc, #76]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008960:	fa22 f303 	lsr.w	r3, r2, r3
 8008964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008966:	e078      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800896c:	e075      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800896e:	4b0e      	ldr	r3, [pc, #56]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800897a:	d102      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800897c:	4b0c      	ldr	r3, [pc, #48]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800897e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008980:	e06b      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008986:	e068      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008988:	4b07      	ldr	r3, [pc, #28]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008994:	d102      	bne.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008996:	4b07      	ldr	r3, [pc, #28]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800899a:	e05e      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a0:	e05b      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a6:	e058      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089a8:	58024400 	.word	0x58024400
 80089ac:	03d09000 	.word	0x03d09000
 80089b0:	003d0900 	.word	0x003d0900
 80089b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80089b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089bc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80089c0:	430b      	orrs	r3, r1
 80089c2:	d148      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80089c4:	4b27      	ldr	r3, [pc, #156]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089d4:	d02a      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80089d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089dc:	d838      	bhi.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80089e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ea:	d00d      	beq.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80089ec:	e030      	b.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089fa:	d102      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80089fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80089fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a00:	e02b      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a06:	e028      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a08:	4b16      	ldr	r3, [pc, #88]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a14:	d107      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fae4 	bl	8008fe8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a24:	e019      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2a:	e016      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a38:	d107      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3a:	f107 0318 	add.w	r3, r7, #24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 f82a 	bl	8008a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a48:	e007      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a4e:	e004      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a54:	e001      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3740      	adds	r7, #64	@ 0x40
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	58024400 	.word	0x58024400
 8008a68:	017d7840 	.word	0x017d7840

08008a6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a70:	f7fd ffea 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8008a74:	4602      	mov	r2, r0
 8008a76:	4b06      	ldr	r3, [pc, #24]	@ (8008a90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	091b      	lsrs	r3, r3, #4
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	4904      	ldr	r1, [pc, #16]	@ (8008a94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a82:	5ccb      	ldrb	r3, [r1, r3]
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	58024400 	.word	0x58024400
 8008a94:	08010b30 	.word	0x08010b30

08008a98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b089      	sub	sp, #36	@ 0x24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008aa0:	4ba1      	ldr	r3, [pc, #644]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008aaa:	4b9f      	ldr	r3, [pc, #636]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aae:	0b1b      	lsrs	r3, r3, #12
 8008ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ab4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aba:	091b      	lsrs	r3, r3, #4
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008ac2:	4b99      	ldr	r3, [pc, #612]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac6:	08db      	lsrs	r3, r3, #3
 8008ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	fb02 f303 	mul.w	r3, r2, r3
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ada:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 8111 	beq.w	8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	f000 8083 	beq.w	8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	f200 80a1 	bhi.w	8008c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d056      	beq.n	8008bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b02:	e099      	b.n	8008c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b04:	4b88      	ldr	r3, [pc, #544]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0320 	and.w	r3, r3, #32
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d02d      	beq.n	8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b10:	4b85      	ldr	r3, [pc, #532]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	4a84      	ldr	r2, [pc, #528]	@ (8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b6a:	e087      	b.n	8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bae:	e065      	b.n	8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc2:	4b59      	ldr	r3, [pc, #356]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bf2:	e043      	b.n	8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008d3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c06:	4b48      	ldr	r3, [pc, #288]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c36:	e021      	b.n	8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4a:	4b37      	ldr	r3, [pc, #220]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c80:	0a5b      	lsrs	r3, r3, #9
 8008c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca2:	ee17 2a90 	vmov	r2, s15
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008caa:	4b1f      	ldr	r3, [pc, #124]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cae:	0c1b      	lsrs	r3, r3, #16
 8008cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cb4:	ee07 3a90 	vmov	s15, r3
 8008cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd0:	ee17 2a90 	vmov	r2, s15
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008cd8:	4b13      	ldr	r3, [pc, #76]	@ (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cdc:	0e1b      	lsrs	r3, r3, #24
 8008cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cfe:	ee17 2a90 	vmov	r2, s15
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d06:	e008      	b.n	8008d1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	609a      	str	r2, [r3, #8]
}
 8008d1a:	bf00      	nop
 8008d1c:	3724      	adds	r7, #36	@ 0x24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	03d09000 	.word	0x03d09000
 8008d30:	46000000 	.word	0x46000000
 8008d34:	4c742400 	.word	0x4c742400
 8008d38:	4a742400 	.word	0x4a742400
 8008d3c:	4bbebc20 	.word	0x4bbebc20

08008d40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b089      	sub	sp, #36	@ 0x24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d48:	4ba1      	ldr	r3, [pc, #644]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008d52:	4b9f      	ldr	r3, [pc, #636]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d56:	0d1b      	lsrs	r3, r3, #20
 8008d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d62:	0a1b      	lsrs	r3, r3, #8
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008d6a:	4b99      	ldr	r3, [pc, #612]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6e:	08db      	lsrs	r3, r3, #3
 8008d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 8111 	beq.w	8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	f000 8083 	beq.w	8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	f200 80a1 	bhi.w	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d056      	beq.n	8008e58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008daa:	e099      	b.n	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dac:	4b88      	ldr	r3, [pc, #544]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d02d      	beq.n	8008e14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008db8:	4b85      	ldr	r3, [pc, #532]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	08db      	lsrs	r3, r3, #3
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	4a84      	ldr	r2, [pc, #528]	@ (8008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	ee07 3a90 	vmov	s15, r3
 8008dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008de2:	4b7b      	ldr	r3, [pc, #492]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e12:	e087      	b.n	8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008fdc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e26:	4b6a      	ldr	r3, [pc, #424]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e56:	e065      	b.n	8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6a:	4b59      	ldr	r3, [pc, #356]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e9a:	e043      	b.n	8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eae:	4b48      	ldr	r3, [pc, #288]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ede:	e021      	b.n	8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef2:	4b37      	ldr	r3, [pc, #220]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008f24:	4b2a      	ldr	r3, [pc, #168]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f28:	0a5b      	lsrs	r3, r3, #9
 8008f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4a:	ee17 2a90 	vmov	r2, s15
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008f52:	4b1f      	ldr	r3, [pc, #124]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f56:	0c1b      	lsrs	r3, r3, #16
 8008f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f78:	ee17 2a90 	vmov	r2, s15
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008f80:	4b13      	ldr	r3, [pc, #76]	@ (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f84:	0e1b      	lsrs	r3, r3, #24
 8008f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fa6:	ee17 2a90 	vmov	r2, s15
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008fae:	e008      	b.n	8008fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	609a      	str	r2, [r3, #8]
}
 8008fc2:	bf00      	nop
 8008fc4:	3724      	adds	r7, #36	@ 0x24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	58024400 	.word	0x58024400
 8008fd4:	03d09000 	.word	0x03d09000
 8008fd8:	46000000 	.word	0x46000000
 8008fdc:	4c742400 	.word	0x4c742400
 8008fe0:	4a742400 	.word	0x4a742400
 8008fe4:	4bbebc20 	.word	0x4bbebc20

08008fe8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b089      	sub	sp, #36	@ 0x24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ff0:	4ba0      	ldr	r3, [pc, #640]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008ffa:	4b9e      	ldr	r3, [pc, #632]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffe:	091b      	lsrs	r3, r3, #4
 8009000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009004:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009006:	4b9b      	ldr	r3, [pc, #620]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009010:	4b98      	ldr	r3, [pc, #608]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009014:	08db      	lsrs	r3, r3, #3
 8009016:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009028:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 8111 	beq.w	8009256 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	2b02      	cmp	r3, #2
 8009038:	f000 8083 	beq.w	8009142 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	2b02      	cmp	r3, #2
 8009040:	f200 80a1 	bhi.w	8009186 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d056      	beq.n	80090fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009050:	e099      	b.n	8009186 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009052:	4b88      	ldr	r3, [pc, #544]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d02d      	beq.n	80090ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800905e:	4b85      	ldr	r3, [pc, #532]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	08db      	lsrs	r3, r3, #3
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	4a83      	ldr	r2, [pc, #524]	@ (8009278 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800906a:	fa22 f303 	lsr.w	r3, r2, r3
 800906e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	ee07 3a90 	vmov	s15, r3
 8009080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009088:	4b7a      	ldr	r3, [pc, #488]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800908a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800908c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009090:	ee07 3a90 	vmov	s15, r3
 8009094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009098:	ed97 6a03 	vldr	s12, [r7, #12]
 800909c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800927c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090b8:	e087      	b.n	80091ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	ee07 3a90 	vmov	s15, r3
 80090c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009280 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80090c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090cc:	4b69      	ldr	r3, [pc, #420]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d4:	ee07 3a90 	vmov	s15, r3
 80090d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80090e0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800927c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090fc:	e065      	b.n	80091ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	ee07 3a90 	vmov	s15, r3
 8009104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009108:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009284 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800910c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009110:	4b58      	ldr	r3, [pc, #352]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009118:	ee07 3a90 	vmov	s15, r3
 800911c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009120:	ed97 6a03 	vldr	s12, [r7, #12]
 8009124:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800927c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009130:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009140:	e043      	b.n	80091ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	ee07 3a90 	vmov	s15, r3
 8009148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009288 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009154:	4b47      	ldr	r3, [pc, #284]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009164:	ed97 6a03 	vldr	s12, [r7, #12]
 8009168:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800927c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800916c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009174:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009180:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009184:	e021      	b.n	80091ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	ee07 3a90 	vmov	s15, r3
 800918c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009190:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009280 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009198:	4b36      	ldr	r3, [pc, #216]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800919a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a0:	ee07 3a90 	vmov	s15, r3
 80091a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800927c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80091ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ce:	0a5b      	lsrs	r3, r3, #9
 80091d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091d4:	ee07 3a90 	vmov	s15, r3
 80091d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80091e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f0:	ee17 2a90 	vmov	r2, s15
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80091f8:	4b1e      	ldr	r3, [pc, #120]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091fc:	0c1b      	lsrs	r3, r3, #16
 80091fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800920e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009212:	edd7 6a07 	vldr	s13, [r7, #28]
 8009216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800921a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800921e:	ee17 2a90 	vmov	r2, s15
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009226:	4b13      	ldr	r3, [pc, #76]	@ (8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922a:	0e1b      	lsrs	r3, r3, #24
 800922c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009230:	ee07 3a90 	vmov	s15, r3
 8009234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800923c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009240:	edd7 6a07 	vldr	s13, [r7, #28]
 8009244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800924c:	ee17 2a90 	vmov	r2, s15
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009254:	e008      	b.n	8009268 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	609a      	str	r2, [r3, #8]
}
 8009268:	bf00      	nop
 800926a:	3724      	adds	r7, #36	@ 0x24
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	58024400 	.word	0x58024400
 8009278:	03d09000 	.word	0x03d09000
 800927c:	46000000 	.word	0x46000000
 8009280:	4c742400 	.word	0x4c742400
 8009284:	4a742400 	.word	0x4a742400
 8009288:	4bbebc20 	.word	0x4bbebc20

0800928c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800929a:	4b53      	ldr	r3, [pc, #332]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 800929c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d101      	bne.n	80092aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e099      	b.n	80093de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80092aa:	4b4f      	ldr	r3, [pc, #316]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a4e      	ldr	r2, [pc, #312]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80092b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80092b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092b6:	f7f8 fa4d 	bl	8001754 <HAL_GetTick>
 80092ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092bc:	e008      	b.n	80092d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092be:	f7f8 fa49 	bl	8001754 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e086      	b.n	80093de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092d0:	4b45      	ldr	r3, [pc, #276]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1f0      	bne.n	80092be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80092dc:	4b42      	ldr	r3, [pc, #264]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80092de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	031b      	lsls	r3, r3, #12
 80092ea:	493f      	ldr	r1, [pc, #252]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	3b01      	subs	r3, #1
 8009300:	025b      	lsls	r3, r3, #9
 8009302:	b29b      	uxth	r3, r3
 8009304:	431a      	orrs	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	3b01      	subs	r3, #1
 800930c:	041b      	lsls	r3, r3, #16
 800930e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	3b01      	subs	r3, #1
 800931a:	061b      	lsls	r3, r3, #24
 800931c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009320:	4931      	ldr	r1, [pc, #196]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009322:	4313      	orrs	r3, r2
 8009324:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009326:	4b30      	ldr	r3, [pc, #192]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	492d      	ldr	r1, [pc, #180]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009334:	4313      	orrs	r3, r2
 8009336:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009338:	4b2b      	ldr	r3, [pc, #172]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 800933a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933c:	f023 0220 	bic.w	r2, r3, #32
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	4928      	ldr	r1, [pc, #160]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009346:	4313      	orrs	r3, r2
 8009348:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800934a:	4b27      	ldr	r3, [pc, #156]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 800934c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934e:	4a26      	ldr	r2, [pc, #152]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009350:	f023 0310 	bic.w	r3, r3, #16
 8009354:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009356:	4b24      	ldr	r3, [pc, #144]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800935a:	4b24      	ldr	r3, [pc, #144]	@ (80093ec <RCCEx_PLL2_Config+0x160>)
 800935c:	4013      	ands	r3, r2
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	69d2      	ldr	r2, [r2, #28]
 8009362:	00d2      	lsls	r2, r2, #3
 8009364:	4920      	ldr	r1, [pc, #128]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009366:	4313      	orrs	r3, r2
 8009368:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800936a:	4b1f      	ldr	r3, [pc, #124]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 800936c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936e:	4a1e      	ldr	r2, [pc, #120]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009370:	f043 0310 	orr.w	r3, r3, #16
 8009374:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d106      	bne.n	800938a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800937c:	4b1a      	ldr	r3, [pc, #104]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 800937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009380:	4a19      	ldr	r2, [pc, #100]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009382:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009386:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009388:	e00f      	b.n	80093aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d106      	bne.n	800939e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009390:	4b15      	ldr	r3, [pc, #84]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009394:	4a14      	ldr	r2, [pc, #80]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 8009396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800939a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800939c:	e005      	b.n	80093aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800939e:	4b12      	ldr	r3, [pc, #72]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80093a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a2:	4a11      	ldr	r2, [pc, #68]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80093a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80093a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80093aa:	4b0f      	ldr	r3, [pc, #60]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a0e      	ldr	r2, [pc, #56]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80093b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80093b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093b6:	f7f8 f9cd 	bl	8001754 <HAL_GetTick>
 80093ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093bc:	e008      	b.n	80093d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093be:	f7f8 f9c9 	bl	8001754 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d901      	bls.n	80093d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e006      	b.n	80093de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093d0:	4b05      	ldr	r3, [pc, #20]	@ (80093e8 <RCCEx_PLL2_Config+0x15c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0f0      	beq.n	80093be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	58024400 	.word	0x58024400
 80093ec:	ffff0007 	.word	0xffff0007

080093f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093fe:	4b53      	ldr	r3, [pc, #332]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	2b03      	cmp	r3, #3
 8009408:	d101      	bne.n	800940e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e099      	b.n	8009542 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800940e:	4b4f      	ldr	r3, [pc, #316]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a4e      	ldr	r2, [pc, #312]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800941a:	f7f8 f99b 	bl	8001754 <HAL_GetTick>
 800941e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009420:	e008      	b.n	8009434 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009422:	f7f8 f997 	bl	8001754 <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	2b02      	cmp	r3, #2
 800942e:	d901      	bls.n	8009434 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e086      	b.n	8009542 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009434:	4b45      	ldr	r3, [pc, #276]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1f0      	bne.n	8009422 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009440:	4b42      	ldr	r3, [pc, #264]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009444:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	051b      	lsls	r3, r3, #20
 800944e:	493f      	ldr	r1, [pc, #252]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009450:	4313      	orrs	r3, r2
 8009452:	628b      	str	r3, [r1, #40]	@ 0x28
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	3b01      	subs	r3, #1
 800945a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	3b01      	subs	r3, #1
 8009464:	025b      	lsls	r3, r3, #9
 8009466:	b29b      	uxth	r3, r3
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	3b01      	subs	r3, #1
 8009470:	041b      	lsls	r3, r3, #16
 8009472:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	3b01      	subs	r3, #1
 800947e:	061b      	lsls	r3, r3, #24
 8009480:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009484:	4931      	ldr	r1, [pc, #196]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009486:	4313      	orrs	r3, r2
 8009488:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800948a:	4b30      	ldr	r3, [pc, #192]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 800948c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	492d      	ldr	r1, [pc, #180]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009498:	4313      	orrs	r3, r2
 800949a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800949c:	4b2b      	ldr	r3, [pc, #172]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 800949e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	4928      	ldr	r1, [pc, #160]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80094ae:	4b27      	ldr	r3, [pc, #156]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b2:	4a26      	ldr	r2, [pc, #152]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80094ba:	4b24      	ldr	r3, [pc, #144]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094be:	4b24      	ldr	r3, [pc, #144]	@ (8009550 <RCCEx_PLL3_Config+0x160>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	69d2      	ldr	r2, [r2, #28]
 80094c6:	00d2      	lsls	r2, r2, #3
 80094c8:	4920      	ldr	r1, [pc, #128]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80094ce:	4b1f      	ldr	r3, [pc, #124]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d2:	4a1e      	ldr	r2, [pc, #120]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d106      	bne.n	80094ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80094e0:	4b1a      	ldr	r3, [pc, #104]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e4:	4a19      	ldr	r2, [pc, #100]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80094ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094ec:	e00f      	b.n	800950e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d106      	bne.n	8009502 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094f4:	4b15      	ldr	r3, [pc, #84]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f8:	4a14      	ldr	r2, [pc, #80]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 80094fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80094fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009500:	e005      	b.n	800950e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009502:	4b12      	ldr	r3, [pc, #72]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009506:	4a11      	ldr	r2, [pc, #68]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009508:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800950c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800950e:	4b0f      	ldr	r3, [pc, #60]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a0e      	ldr	r2, [pc, #56]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800951a:	f7f8 f91b 	bl	8001754 <HAL_GetTick>
 800951e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009520:	e008      	b.n	8009534 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009522:	f7f8 f917 	bl	8001754 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	2b02      	cmp	r3, #2
 800952e:	d901      	bls.n	8009534 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e006      	b.n	8009542 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009534:	4b05      	ldr	r3, [pc, #20]	@ (800954c <RCCEx_PLL3_Config+0x15c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0f0      	beq.n	8009522 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009540:	7bfb      	ldrb	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	58024400 	.word	0x58024400
 8009550:	ffff0007 	.word	0xffff0007

08009554 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e10f      	b.n	8009786 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a87      	ldr	r2, [pc, #540]	@ (8009790 <HAL_SPI_Init+0x23c>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00f      	beq.n	8009596 <HAL_SPI_Init+0x42>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a86      	ldr	r2, [pc, #536]	@ (8009794 <HAL_SPI_Init+0x240>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00a      	beq.n	8009596 <HAL_SPI_Init+0x42>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a84      	ldr	r2, [pc, #528]	@ (8009798 <HAL_SPI_Init+0x244>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d005      	beq.n	8009596 <HAL_SPI_Init+0x42>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	2b0f      	cmp	r3, #15
 8009590:	d901      	bls.n	8009596 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e0f7      	b.n	8009786 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fbca 	bl	8009d30 <SPI_GetPacketSize>
 800959c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a7b      	ldr	r2, [pc, #492]	@ (8009790 <HAL_SPI_Init+0x23c>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00c      	beq.n	80095c2 <HAL_SPI_Init+0x6e>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a79      	ldr	r2, [pc, #484]	@ (8009794 <HAL_SPI_Init+0x240>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d007      	beq.n	80095c2 <HAL_SPI_Init+0x6e>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a78      	ldr	r2, [pc, #480]	@ (8009798 <HAL_SPI_Init+0x244>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d002      	beq.n	80095c2 <HAL_SPI_Init+0x6e>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b08      	cmp	r3, #8
 80095c0:	d811      	bhi.n	80095e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095c6:	4a72      	ldr	r2, [pc, #456]	@ (8009790 <HAL_SPI_Init+0x23c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d009      	beq.n	80095e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a70      	ldr	r2, [pc, #448]	@ (8009794 <HAL_SPI_Init+0x240>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d004      	beq.n	80095e0 <HAL_SPI_Init+0x8c>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a6f      	ldr	r2, [pc, #444]	@ (8009798 <HAL_SPI_Init+0x244>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d104      	bne.n	80095ea <HAL_SPI_Init+0x96>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b10      	cmp	r3, #16
 80095e4:	d901      	bls.n	80095ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e0cd      	b.n	8009786 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7f7 fc90 	bl	8000f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0201 	bic.w	r2, r2, #1
 800961a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009626:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009630:	d119      	bne.n	8009666 <HAL_SPI_Init+0x112>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800963a:	d103      	bne.n	8009644 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009640:	2b00      	cmp	r3, #0
 8009642:	d008      	beq.n	8009656 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10c      	bne.n	8009666 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009654:	d107      	bne.n	8009666 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009664:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00f      	beq.n	8009692 <HAL_SPI_Init+0x13e>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	2b06      	cmp	r3, #6
 8009678:	d90b      	bls.n	8009692 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	e007      	b.n	80096a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	69da      	ldr	r2, [r3, #28]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096aa:	431a      	orrs	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	431a      	orrs	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b4:	ea42 0103 	orr.w	r1, r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	430a      	orrs	r2, r1
 80096c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	431a      	orrs	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	431a      	orrs	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	431a      	orrs	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	431a      	orrs	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009702:	ea42 0103 	orr.w	r1, r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d113      	bne.n	8009742 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800972c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009740:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0201 	bic.w	r2, r2, #1
 8009750:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	40013000 	.word	0x40013000
 8009794:	40003800 	.word	0x40003800
 8009798:	40003c00 	.word	0x40003c00

0800979c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08a      	sub	sp, #40	@ 0x28
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	4613      	mov	r3, r2
 80097aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3320      	adds	r3, #32
 80097b2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <HAL_SPI_Transmit+0x2a>
 80097c2:	2302      	movs	r3, #2
 80097c4:	e1e1      	b.n	8009b8a <HAL_SPI_Transmit+0x3ee>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097ce:	f7f7 ffc1 	bl	8001754 <HAL_GetTick>
 80097d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d007      	beq.n	80097f0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80097e0:	2302      	movs	r3, #2
 80097e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 80097ec:	7efb      	ldrb	r3, [r7, #27]
 80097ee:	e1cc      	b.n	8009b8a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <HAL_SPI_Transmit+0x60>
 80097f6:	88fb      	ldrh	r3, [r7, #6]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d107      	bne.n	800980c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8009808:	7efb      	ldrb	r3, [r7, #27]
 800980a:	e1be      	b.n	8009b8a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2203      	movs	r2, #3
 8009810:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	88fa      	ldrh	r2, [r7, #6]
 8009826:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	88fa      	ldrh	r2, [r7, #6]
 800982e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800985c:	d108      	bne.n	8009870 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	e009      	b.n	8009884 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009882:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	4b96      	ldr	r3, [pc, #600]	@ (8009ae4 <HAL_SPI_Transmit+0x348>)
 800988c:	4013      	ands	r3, r2
 800988e:	88f9      	ldrh	r1, [r7, #6]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	6812      	ldr	r2, [r2, #0]
 8009894:	430b      	orrs	r3, r1
 8009896:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f042 0201 	orr.w	r2, r2, #1
 80098a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098b0:	d107      	bne.n	80098c2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	2b0f      	cmp	r3, #15
 80098c8:	d947      	bls.n	800995a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80098ca:	e03f      	b.n	800994c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d114      	bne.n	8009904 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6812      	ldr	r2, [r2, #0]
 80098e4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098ea:	1d1a      	adds	r2, r3, #4
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	3b01      	subs	r3, #1
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009902:	e023      	b.n	800994c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009904:	f7f7 ff26 	bl	8001754 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d803      	bhi.n	800991c <HAL_SPI_Transmit+0x180>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991a:	d102      	bne.n	8009922 <HAL_SPI_Transmit+0x186>
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d114      	bne.n	800994c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 f936 	bl	8009b94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009936:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e11e      	b.n	8009b8a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009952:	b29b      	uxth	r3, r3
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1b9      	bne.n	80098cc <HAL_SPI_Transmit+0x130>
 8009958:	e0f1      	b.n	8009b3e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	2b07      	cmp	r3, #7
 8009960:	f240 80e6 	bls.w	8009b30 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009964:	e05d      	b.n	8009a22 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	2b02      	cmp	r3, #2
 8009972:	d132      	bne.n	80099da <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800997a:	b29b      	uxth	r3, r3
 800997c:	2b01      	cmp	r3, #1
 800997e:	d918      	bls.n	80099b2 <HAL_SPI_Transmit+0x216>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009984:	2b00      	cmp	r3, #0
 8009986:	d014      	beq.n	80099b2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6812      	ldr	r2, [r2, #0]
 8009992:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009998:	1d1a      	adds	r2, r3, #4
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	3b02      	subs	r3, #2
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80099b0:	e037      	b.n	8009a22 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099b6:	881a      	ldrh	r2, [r3, #0]
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099c0:	1c9a      	adds	r2, r3, #2
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80099d8:	e023      	b.n	8009a22 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099da:	f7f7 febb 	bl	8001754 <HAL_GetTick>
 80099de:	4602      	mov	r2, r0
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d803      	bhi.n	80099f2 <HAL_SPI_Transmit+0x256>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f0:	d102      	bne.n	80099f8 <HAL_SPI_Transmit+0x25c>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d114      	bne.n	8009a22 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 f8cb 	bl	8009b94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e0b3      	b.n	8009b8a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d19b      	bne.n	8009966 <HAL_SPI_Transmit+0x1ca>
 8009a2e:	e086      	b.n	8009b3e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d154      	bne.n	8009ae8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d918      	bls.n	8009a7c <HAL_SPI_Transmit+0x2e0>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a4e:	2b40      	cmp	r3, #64	@ 0x40
 8009a50:	d914      	bls.n	8009a7c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6812      	ldr	r2, [r2, #0]
 8009a5c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a62:	1d1a      	adds	r2, r3, #4
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	3b04      	subs	r3, #4
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009a7a:	e059      	b.n	8009b30 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d917      	bls.n	8009ab8 <HAL_SPI_Transmit+0x31c>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d013      	beq.n	8009ab8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a94:	881a      	ldrh	r2, [r3, #0]
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a9e:	1c9a      	adds	r2, r3, #2
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	3b02      	subs	r3, #2
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ab6:	e03b      	b.n	8009b30 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3320      	adds	r3, #32
 8009ac2:	7812      	ldrb	r2, [r2, #0]
 8009ac4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ae2:	e025      	b.n	8009b30 <HAL_SPI_Transmit+0x394>
 8009ae4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ae8:	f7f7 fe34 	bl	8001754 <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d803      	bhi.n	8009b00 <HAL_SPI_Transmit+0x364>
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afe:	d102      	bne.n	8009b06 <HAL_SPI_Transmit+0x36a>
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d114      	bne.n	8009b30 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 f844 	bl	8009b94 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e02c      	b.n	8009b8a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f47f af79 	bne.w	8009a30 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2200      	movs	r2, #0
 8009b46:	2108      	movs	r1, #8
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 f8c3 	bl	8009cd4 <SPI_WaitOnFlagUntilTimeout>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d007      	beq.n	8009b64 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b5a:	f043 0220 	orr.w	r2, r3, #32
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f815 	bl	8009b94 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8009b88:	7efb      	ldrb	r3, [r7, #27]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop

08009b94 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	699a      	ldr	r2, [r3, #24]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f042 0208 	orr.w	r2, r2, #8
 8009bb2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699a      	ldr	r2, [r3, #24]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f042 0210 	orr.w	r2, r2, #16
 8009bc2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0201 	bic.w	r2, r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6919      	ldr	r1, [r3, #16]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	4b3c      	ldr	r3, [pc, #240]	@ (8009cd0 <SPI_CloseTransfer+0x13c>)
 8009be0:	400b      	ands	r3, r1
 8009be2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	689a      	ldr	r2, [r3, #8]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009bf2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	d014      	beq.n	8009c2a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00f      	beq.n	8009c2a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	699a      	ldr	r2, [r3, #24]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f042 0220 	orr.w	r2, r2, #32
 8009c28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d014      	beq.n	8009c60 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00f      	beq.n	8009c60 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c46:	f043 0204 	orr.w	r2, r3, #4
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	699a      	ldr	r2, [r3, #24]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c5e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00f      	beq.n	8009c8a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c70:	f043 0201 	orr.w	r2, r3, #1
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c88:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00f      	beq.n	8009cb4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c9a:	f043 0208 	orr.w	r2, r3, #8
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699a      	ldr	r2, [r3, #24]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009cb2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009cc4:	bf00      	nop
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	fffffc90 	.word	0xfffffc90

08009cd4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	603b      	str	r3, [r7, #0]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ce4:	e010      	b.n	8009d08 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ce6:	f7f7 fd35 	bl	8001754 <HAL_GetTick>
 8009cea:	4602      	mov	r2, r0
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d803      	bhi.n	8009cfe <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfc:	d102      	bne.n	8009d04 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e00f      	b.n	8009d28 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695a      	ldr	r2, [r3, #20]
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	4013      	ands	r3, r2
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	bf0c      	ite	eq
 8009d18:	2301      	moveq	r3, #1
 8009d1a:	2300      	movne	r3, #0
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	461a      	mov	r2, r3
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d0df      	beq.n	8009ce6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d3c:	095b      	lsrs	r3, r3, #5
 8009d3e:	3301      	adds	r3, #1
 8009d40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	3301      	adds	r3, #1
 8009d48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	3307      	adds	r3, #7
 8009d4e:	08db      	lsrs	r3, r3, #3
 8009d50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	fb02 f303 	mul.w	r3, r2, r3
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e049      	b.n	8009e0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7f7 fbef 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2202      	movs	r2, #2
 8009d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	3304      	adds	r3, #4
 8009da2:	4619      	mov	r1, r3
 8009da4:	4610      	mov	r0, r2
 8009da6:	f000 fd71 	bl	800a88c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d001      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e054      	b.n	8009ed6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f042 0201 	orr.w	r2, r2, #1
 8009e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a26      	ldr	r2, [pc, #152]	@ (8009ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d022      	beq.n	8009e94 <HAL_TIM_Base_Start_IT+0x80>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e56:	d01d      	beq.n	8009e94 <HAL_TIM_Base_Start_IT+0x80>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a22      	ldr	r2, [pc, #136]	@ (8009ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d018      	beq.n	8009e94 <HAL_TIM_Base_Start_IT+0x80>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a21      	ldr	r2, [pc, #132]	@ (8009eec <HAL_TIM_Base_Start_IT+0xd8>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d013      	beq.n	8009e94 <HAL_TIM_Base_Start_IT+0x80>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a1f      	ldr	r2, [pc, #124]	@ (8009ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d00e      	beq.n	8009e94 <HAL_TIM_Base_Start_IT+0x80>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ef4 <HAL_TIM_Base_Start_IT+0xe0>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d009      	beq.n	8009e94 <HAL_TIM_Base_Start_IT+0x80>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a1c      	ldr	r2, [pc, #112]	@ (8009ef8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d004      	beq.n	8009e94 <HAL_TIM_Base_Start_IT+0x80>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8009efc <HAL_TIM_Base_Start_IT+0xe8>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d115      	bne.n	8009ec0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	4b19      	ldr	r3, [pc, #100]	@ (8009f00 <HAL_TIM_Base_Start_IT+0xec>)
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b06      	cmp	r3, #6
 8009ea4:	d015      	beq.n	8009ed2 <HAL_TIM_Base_Start_IT+0xbe>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eac:	d011      	beq.n	8009ed2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f042 0201 	orr.w	r2, r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ebe:	e008      	b.n	8009ed2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	e000      	b.n	8009ed4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	40010000 	.word	0x40010000
 8009ee8:	40000400 	.word	0x40000400
 8009eec:	40000800 	.word	0x40000800
 8009ef0:	40000c00 	.word	0x40000c00
 8009ef4:	40010400 	.word	0x40010400
 8009ef8:	40001800 	.word	0x40001800
 8009efc:	40014000 	.word	0x40014000
 8009f00:	00010007 	.word	0x00010007

08009f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e049      	b.n	8009faa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f841 	bl	8009fb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f000 fca2 	bl	800a88c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009fba:	bf00      	nop
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
	...

08009fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d109      	bne.n	8009fec <HAL_TIM_PWM_Start+0x24>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	bf14      	ite	ne
 8009fe4:	2301      	movne	r3, #1
 8009fe6:	2300      	moveq	r3, #0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	e03c      	b.n	800a066 <HAL_TIM_PWM_Start+0x9e>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d109      	bne.n	800a006 <HAL_TIM_PWM_Start+0x3e>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	bf14      	ite	ne
 8009ffe:	2301      	movne	r3, #1
 800a000:	2300      	moveq	r3, #0
 800a002:	b2db      	uxtb	r3, r3
 800a004:	e02f      	b.n	800a066 <HAL_TIM_PWM_Start+0x9e>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b08      	cmp	r3, #8
 800a00a:	d109      	bne.n	800a020 <HAL_TIM_PWM_Start+0x58>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b01      	cmp	r3, #1
 800a016:	bf14      	ite	ne
 800a018:	2301      	movne	r3, #1
 800a01a:	2300      	moveq	r3, #0
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	e022      	b.n	800a066 <HAL_TIM_PWM_Start+0x9e>
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b0c      	cmp	r3, #12
 800a024:	d109      	bne.n	800a03a <HAL_TIM_PWM_Start+0x72>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b01      	cmp	r3, #1
 800a030:	bf14      	ite	ne
 800a032:	2301      	movne	r3, #1
 800a034:	2300      	moveq	r3, #0
 800a036:	b2db      	uxtb	r3, r3
 800a038:	e015      	b.n	800a066 <HAL_TIM_PWM_Start+0x9e>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b10      	cmp	r3, #16
 800a03e:	d109      	bne.n	800a054 <HAL_TIM_PWM_Start+0x8c>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b01      	cmp	r3, #1
 800a04a:	bf14      	ite	ne
 800a04c:	2301      	movne	r3, #1
 800a04e:	2300      	moveq	r3, #0
 800a050:	b2db      	uxtb	r3, r3
 800a052:	e008      	b.n	800a066 <HAL_TIM_PWM_Start+0x9e>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	bf14      	ite	ne
 800a060:	2301      	movne	r3, #1
 800a062:	2300      	moveq	r3, #0
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d001      	beq.n	800a06e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e0a1      	b.n	800a1b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d104      	bne.n	800a07e <HAL_TIM_PWM_Start+0xb6>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a07c:	e023      	b.n	800a0c6 <HAL_TIM_PWM_Start+0xfe>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b04      	cmp	r3, #4
 800a082:	d104      	bne.n	800a08e <HAL_TIM_PWM_Start+0xc6>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a08c:	e01b      	b.n	800a0c6 <HAL_TIM_PWM_Start+0xfe>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b08      	cmp	r3, #8
 800a092:	d104      	bne.n	800a09e <HAL_TIM_PWM_Start+0xd6>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2202      	movs	r2, #2
 800a098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a09c:	e013      	b.n	800a0c6 <HAL_TIM_PWM_Start+0xfe>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b0c      	cmp	r3, #12
 800a0a2:	d104      	bne.n	800a0ae <HAL_TIM_PWM_Start+0xe6>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0ac:	e00b      	b.n	800a0c6 <HAL_TIM_PWM_Start+0xfe>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b10      	cmp	r3, #16
 800a0b2:	d104      	bne.n	800a0be <HAL_TIM_PWM_Start+0xf6>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0bc:	e003      	b.n	800a0c6 <HAL_TIM_PWM_Start+0xfe>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 ffea 	bl	800b0a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a38      	ldr	r2, [pc, #224]	@ (800a1bc <HAL_TIM_PWM_Start+0x1f4>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d013      	beq.n	800a106 <HAL_TIM_PWM_Start+0x13e>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a37      	ldr	r2, [pc, #220]	@ (800a1c0 <HAL_TIM_PWM_Start+0x1f8>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d00e      	beq.n	800a106 <HAL_TIM_PWM_Start+0x13e>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a35      	ldr	r2, [pc, #212]	@ (800a1c4 <HAL_TIM_PWM_Start+0x1fc>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d009      	beq.n	800a106 <HAL_TIM_PWM_Start+0x13e>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a34      	ldr	r2, [pc, #208]	@ (800a1c8 <HAL_TIM_PWM_Start+0x200>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d004      	beq.n	800a106 <HAL_TIM_PWM_Start+0x13e>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a32      	ldr	r2, [pc, #200]	@ (800a1cc <HAL_TIM_PWM_Start+0x204>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d101      	bne.n	800a10a <HAL_TIM_PWM_Start+0x142>
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <HAL_TIM_PWM_Start+0x144>
 800a10a:	2300      	movs	r3, #0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d007      	beq.n	800a120 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a11e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a25      	ldr	r2, [pc, #148]	@ (800a1bc <HAL_TIM_PWM_Start+0x1f4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d022      	beq.n	800a170 <HAL_TIM_PWM_Start+0x1a8>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a132:	d01d      	beq.n	800a170 <HAL_TIM_PWM_Start+0x1a8>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a25      	ldr	r2, [pc, #148]	@ (800a1d0 <HAL_TIM_PWM_Start+0x208>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d018      	beq.n	800a170 <HAL_TIM_PWM_Start+0x1a8>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a24      	ldr	r2, [pc, #144]	@ (800a1d4 <HAL_TIM_PWM_Start+0x20c>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d013      	beq.n	800a170 <HAL_TIM_PWM_Start+0x1a8>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a22      	ldr	r2, [pc, #136]	@ (800a1d8 <HAL_TIM_PWM_Start+0x210>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00e      	beq.n	800a170 <HAL_TIM_PWM_Start+0x1a8>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a1a      	ldr	r2, [pc, #104]	@ (800a1c0 <HAL_TIM_PWM_Start+0x1f8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d009      	beq.n	800a170 <HAL_TIM_PWM_Start+0x1a8>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a1e      	ldr	r2, [pc, #120]	@ (800a1dc <HAL_TIM_PWM_Start+0x214>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d004      	beq.n	800a170 <HAL_TIM_PWM_Start+0x1a8>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a16      	ldr	r2, [pc, #88]	@ (800a1c4 <HAL_TIM_PWM_Start+0x1fc>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d115      	bne.n	800a19c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e0 <HAL_TIM_PWM_Start+0x218>)
 800a178:	4013      	ands	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b06      	cmp	r3, #6
 800a180:	d015      	beq.n	800a1ae <HAL_TIM_PWM_Start+0x1e6>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a188:	d011      	beq.n	800a1ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f042 0201 	orr.w	r2, r2, #1
 800a198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a19a:	e008      	b.n	800a1ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f042 0201 	orr.w	r2, r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	e000      	b.n	800a1b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	40010000 	.word	0x40010000
 800a1c0:	40010400 	.word	0x40010400
 800a1c4:	40014000 	.word	0x40014000
 800a1c8:	40014400 	.word	0x40014400
 800a1cc:	40014800 	.word	0x40014800
 800a1d0:	40000400 	.word	0x40000400
 800a1d4:	40000800 	.word	0x40000800
 800a1d8:	40000c00 	.word	0x40000c00
 800a1dc:	40001800 	.word	0x40001800
 800a1e0:	00010007 	.word	0x00010007

0800a1e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d122      	bne.n	800a240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	f003 0302 	and.w	r3, r3, #2
 800a204:	2b02      	cmp	r3, #2
 800a206:	d11b      	bne.n	800a240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f06f 0202 	mvn.w	r2, #2
 800a210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	f003 0303 	and.w	r3, r3, #3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d003      	beq.n	800a22e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fb12 	bl	800a850 <HAL_TIM_IC_CaptureCallback>
 800a22c:	e005      	b.n	800a23a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fb04 	bl	800a83c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fb15 	bl	800a864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	f003 0304 	and.w	r3, r3, #4
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	d122      	bne.n	800a294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f003 0304 	and.w	r3, r3, #4
 800a258:	2b04      	cmp	r3, #4
 800a25a:	d11b      	bne.n	800a294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f06f 0204 	mvn.w	r2, #4
 800a264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2202      	movs	r2, #2
 800a26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a276:	2b00      	cmp	r3, #0
 800a278:	d003      	beq.n	800a282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fae8 	bl	800a850 <HAL_TIM_IC_CaptureCallback>
 800a280:	e005      	b.n	800a28e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fada 	bl	800a83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 faeb 	bl	800a864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	f003 0308 	and.w	r3, r3, #8
 800a29e:	2b08      	cmp	r3, #8
 800a2a0:	d122      	bne.n	800a2e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f003 0308 	and.w	r3, r3, #8
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d11b      	bne.n	800a2e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f06f 0208 	mvn.w	r2, #8
 800a2b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2204      	movs	r2, #4
 800a2be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fabe 	bl	800a850 <HAL_TIM_IC_CaptureCallback>
 800a2d4:	e005      	b.n	800a2e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fab0 	bl	800a83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fac1 	bl	800a864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	f003 0310 	and.w	r3, r3, #16
 800a2f2:	2b10      	cmp	r3, #16
 800a2f4:	d122      	bne.n	800a33c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	f003 0310 	and.w	r3, r3, #16
 800a300:	2b10      	cmp	r3, #16
 800a302:	d11b      	bne.n	800a33c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f06f 0210 	mvn.w	r2, #16
 800a30c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2208      	movs	r2, #8
 800a312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa94 	bl	800a850 <HAL_TIM_IC_CaptureCallback>
 800a328:	e005      	b.n	800a336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fa86 	bl	800a83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fa97 	bl	800a864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b01      	cmp	r3, #1
 800a348:	d10e      	bne.n	800a368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b01      	cmp	r3, #1
 800a356:	d107      	bne.n	800a368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f06f 0201 	mvn.w	r2, #1
 800a360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7f6 fd02 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a372:	2b80      	cmp	r3, #128	@ 0x80
 800a374:	d10e      	bne.n	800a394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a380:	2b80      	cmp	r3, #128	@ 0x80
 800a382:	d107      	bne.n	800a394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 f888 	bl	800b4a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a39e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3a2:	d10e      	bne.n	800a3c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3ae:	2b80      	cmp	r3, #128	@ 0x80
 800a3b0:	d107      	bne.n	800a3c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a3ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 f87b 	bl	800b4b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3cc:	2b40      	cmp	r3, #64	@ 0x40
 800a3ce:	d10e      	bne.n	800a3ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3da:	2b40      	cmp	r3, #64	@ 0x40
 800a3dc:	d107      	bne.n	800a3ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a3e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fa45 	bl	800a878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	f003 0320 	and.w	r3, r3, #32
 800a3f8:	2b20      	cmp	r3, #32
 800a3fa:	d10e      	bne.n	800a41a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b20      	cmp	r3, #32
 800a408:	d107      	bne.n	800a41a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f06f 0220 	mvn.w	r2, #32
 800a412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f001 f83b 	bl	800b490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
	...

0800a424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a430:	2300      	movs	r3, #0
 800a432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a43e:	2302      	movs	r3, #2
 800a440:	e0ff      	b.n	800a642 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b14      	cmp	r3, #20
 800a44e:	f200 80f0 	bhi.w	800a632 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a452:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a4ad 	.word	0x0800a4ad
 800a45c:	0800a633 	.word	0x0800a633
 800a460:	0800a633 	.word	0x0800a633
 800a464:	0800a633 	.word	0x0800a633
 800a468:	0800a4ed 	.word	0x0800a4ed
 800a46c:	0800a633 	.word	0x0800a633
 800a470:	0800a633 	.word	0x0800a633
 800a474:	0800a633 	.word	0x0800a633
 800a478:	0800a52f 	.word	0x0800a52f
 800a47c:	0800a633 	.word	0x0800a633
 800a480:	0800a633 	.word	0x0800a633
 800a484:	0800a633 	.word	0x0800a633
 800a488:	0800a56f 	.word	0x0800a56f
 800a48c:	0800a633 	.word	0x0800a633
 800a490:	0800a633 	.word	0x0800a633
 800a494:	0800a633 	.word	0x0800a633
 800a498:	0800a5b1 	.word	0x0800a5b1
 800a49c:	0800a633 	.word	0x0800a633
 800a4a0:	0800a633 	.word	0x0800a633
 800a4a4:	0800a633 	.word	0x0800a633
 800a4a8:	0800a5f1 	.word	0x0800a5f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68b9      	ldr	r1, [r7, #8]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fa84 	bl	800a9c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699a      	ldr	r2, [r3, #24]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0208 	orr.w	r2, r2, #8
 800a4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	699a      	ldr	r2, [r3, #24]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 0204 	bic.w	r2, r2, #4
 800a4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6999      	ldr	r1, [r3, #24]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	691a      	ldr	r2, [r3, #16]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	619a      	str	r2, [r3, #24]
      break;
 800a4ea:	e0a5      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 faf4 	bl	800aae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	699a      	ldr	r2, [r3, #24]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	699a      	ldr	r2, [r3, #24]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6999      	ldr	r1, [r3, #24]
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	021a      	lsls	r2, r3, #8
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	619a      	str	r2, [r3, #24]
      break;
 800a52c:	e084      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68b9      	ldr	r1, [r7, #8]
 800a534:	4618      	mov	r0, r3
 800a536:	f000 fb5d 	bl	800abf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69da      	ldr	r2, [r3, #28]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0208 	orr.w	r2, r2, #8
 800a548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69da      	ldr	r2, [r3, #28]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 0204 	bic.w	r2, r2, #4
 800a558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	69d9      	ldr	r1, [r3, #28]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	61da      	str	r2, [r3, #28]
      break;
 800a56c:	e064      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fbc5 	bl	800ad04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	69da      	ldr	r2, [r3, #28]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	69da      	ldr	r2, [r3, #28]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	69d9      	ldr	r1, [r3, #28]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	021a      	lsls	r2, r3, #8
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	61da      	str	r2, [r3, #28]
      break;
 800a5ae:	e043      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68b9      	ldr	r1, [r7, #8]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fc0e 	bl	800add8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0208 	orr.w	r2, r2, #8
 800a5ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0204 	bic.w	r2, r2, #4
 800a5da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	691a      	ldr	r2, [r3, #16]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a5ee:	e023      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fc52 	bl	800aea0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a60a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a61a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	021a      	lsls	r2, r3, #8
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a630:	e002      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	75fb      	strb	r3, [r7, #23]
      break;
 800a636:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a640:	7dfb      	ldrb	r3, [r7, #23]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop

0800a64c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_TIM_ConfigClockSource+0x1c>
 800a664:	2302      	movs	r3, #2
 800a666:	e0dc      	b.n	800a822 <HAL_TIM_ConfigClockSource+0x1d6>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	4b6a      	ldr	r3, [pc, #424]	@ (800a82c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a684:	4013      	ands	r3, r2
 800a686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a68e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a64      	ldr	r2, [pc, #400]	@ (800a830 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	f000 80a9 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a6a4:	4a62      	ldr	r2, [pc, #392]	@ (800a830 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	f200 80ae 	bhi.w	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a6ac:	4a61      	ldr	r2, [pc, #388]	@ (800a834 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	f000 80a1 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a6b4:	4a5f      	ldr	r2, [pc, #380]	@ (800a834 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	f200 80a6 	bhi.w	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a6bc:	4a5e      	ldr	r2, [pc, #376]	@ (800a838 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	f000 8099 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a6c4:	4a5c      	ldr	r2, [pc, #368]	@ (800a838 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	f200 809e 	bhi.w	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a6cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a6d0:	f000 8091 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a6d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a6d8:	f200 8096 	bhi.w	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a6dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6e0:	f000 8089 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a6e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6e8:	f200 808e 	bhi.w	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a6ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6f0:	d03e      	beq.n	800a770 <HAL_TIM_ConfigClockSource+0x124>
 800a6f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6f6:	f200 8087 	bhi.w	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a6fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6fe:	f000 8086 	beq.w	800a80e <HAL_TIM_ConfigClockSource+0x1c2>
 800a702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a706:	d87f      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a708:	2b70      	cmp	r3, #112	@ 0x70
 800a70a:	d01a      	beq.n	800a742 <HAL_TIM_ConfigClockSource+0xf6>
 800a70c:	2b70      	cmp	r3, #112	@ 0x70
 800a70e:	d87b      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a710:	2b60      	cmp	r3, #96	@ 0x60
 800a712:	d050      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x16a>
 800a714:	2b60      	cmp	r3, #96	@ 0x60
 800a716:	d877      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a718:	2b50      	cmp	r3, #80	@ 0x50
 800a71a:	d03c      	beq.n	800a796 <HAL_TIM_ConfigClockSource+0x14a>
 800a71c:	2b50      	cmp	r3, #80	@ 0x50
 800a71e:	d873      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a720:	2b40      	cmp	r3, #64	@ 0x40
 800a722:	d058      	beq.n	800a7d6 <HAL_TIM_ConfigClockSource+0x18a>
 800a724:	2b40      	cmp	r3, #64	@ 0x40
 800a726:	d86f      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a728:	2b30      	cmp	r3, #48	@ 0x30
 800a72a:	d064      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a72c:	2b30      	cmp	r3, #48	@ 0x30
 800a72e:	d86b      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a730:	2b20      	cmp	r3, #32
 800a732:	d060      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a734:	2b20      	cmp	r3, #32
 800a736:	d867      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d05c      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a73c:	2b10      	cmp	r3, #16
 800a73e:	d05a      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a740:	e062      	b.n	800a808 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a752:	f000 fc89 	bl	800b068 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a764:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	609a      	str	r2, [r3, #8]
      break;
 800a76e:	e04f      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a780:	f000 fc72 	bl	800b068 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	689a      	ldr	r2, [r3, #8]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a792:	609a      	str	r2, [r3, #8]
      break;
 800a794:	e03c      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f000 fbe2 	bl	800af6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2150      	movs	r1, #80	@ 0x50
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 fc3c 	bl	800b02c <TIM_ITRx_SetConfig>
      break;
 800a7b4:	e02c      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f000 fc01 	bl	800afca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2160      	movs	r1, #96	@ 0x60
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 fc2c 	bl	800b02c <TIM_ITRx_SetConfig>
      break;
 800a7d4:	e01c      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f000 fbc2 	bl	800af6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2140      	movs	r1, #64	@ 0x40
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 fc1c 	bl	800b02c <TIM_ITRx_SetConfig>
      break;
 800a7f4:	e00c      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4619      	mov	r1, r3
 800a800:	4610      	mov	r0, r2
 800a802:	f000 fc13 	bl	800b02c <TIM_ITRx_SetConfig>
      break;
 800a806:	e003      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	73fb      	strb	r3, [r7, #15]
      break;
 800a80c:	e000      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a80e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a820:	7bfb      	ldrb	r3, [r7, #15]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	ffceff88 	.word	0xffceff88
 800a830:	00100040 	.word	0x00100040
 800a834:	00100030 	.word	0x00100030
 800a838:	00100020 	.word	0x00100020

0800a83c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a40      	ldr	r2, [pc, #256]	@ (800a9a0 <TIM_Base_SetConfig+0x114>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d013      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8aa:	d00f      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a3d      	ldr	r2, [pc, #244]	@ (800a9a4 <TIM_Base_SetConfig+0x118>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00b      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a3c      	ldr	r2, [pc, #240]	@ (800a9a8 <TIM_Base_SetConfig+0x11c>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d007      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a3b      	ldr	r2, [pc, #236]	@ (800a9ac <TIM_Base_SetConfig+0x120>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d003      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a3a      	ldr	r2, [pc, #232]	@ (800a9b0 <TIM_Base_SetConfig+0x124>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d108      	bne.n	800a8de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a2f      	ldr	r2, [pc, #188]	@ (800a9a0 <TIM_Base_SetConfig+0x114>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d01f      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ec:	d01b      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a2c      	ldr	r2, [pc, #176]	@ (800a9a4 <TIM_Base_SetConfig+0x118>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d017      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a2b      	ldr	r2, [pc, #172]	@ (800a9a8 <TIM_Base_SetConfig+0x11c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d013      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a2a      	ldr	r2, [pc, #168]	@ (800a9ac <TIM_Base_SetConfig+0x120>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d00f      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a29      	ldr	r2, [pc, #164]	@ (800a9b0 <TIM_Base_SetConfig+0x124>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00b      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a28      	ldr	r2, [pc, #160]	@ (800a9b4 <TIM_Base_SetConfig+0x128>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d007      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a27      	ldr	r2, [pc, #156]	@ (800a9b8 <TIM_Base_SetConfig+0x12c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d003      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a26      	ldr	r2, [pc, #152]	@ (800a9bc <TIM_Base_SetConfig+0x130>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d108      	bne.n	800a938 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a92c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4313      	orrs	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	4313      	orrs	r3, r2
 800a944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	689a      	ldr	r2, [r3, #8]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a10      	ldr	r2, [pc, #64]	@ (800a9a0 <TIM_Base_SetConfig+0x114>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d00f      	beq.n	800a984 <TIM_Base_SetConfig+0xf8>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a12      	ldr	r2, [pc, #72]	@ (800a9b0 <TIM_Base_SetConfig+0x124>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d00b      	beq.n	800a984 <TIM_Base_SetConfig+0xf8>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a11      	ldr	r2, [pc, #68]	@ (800a9b4 <TIM_Base_SetConfig+0x128>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d007      	beq.n	800a984 <TIM_Base_SetConfig+0xf8>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a10      	ldr	r2, [pc, #64]	@ (800a9b8 <TIM_Base_SetConfig+0x12c>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d003      	beq.n	800a984 <TIM_Base_SetConfig+0xf8>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a0f      	ldr	r2, [pc, #60]	@ (800a9bc <TIM_Base_SetConfig+0x130>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d103      	bne.n	800a98c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	615a      	str	r2, [r3, #20]
}
 800a992:	bf00      	nop
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	40010000 	.word	0x40010000
 800a9a4:	40000400 	.word	0x40000400
 800a9a8:	40000800 	.word	0x40000800
 800a9ac:	40000c00 	.word	0x40000c00
 800a9b0:	40010400 	.word	0x40010400
 800a9b4:	40014000 	.word	0x40014000
 800a9b8:	40014400 	.word	0x40014400
 800a9bc:	40014800 	.word	0x40014800

0800a9c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f023 0201 	bic.w	r2, r3, #1
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4b37      	ldr	r3, [pc, #220]	@ (800aac8 <TIM_OC1_SetConfig+0x108>)
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f023 0303 	bic.w	r3, r3, #3
 800a9f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f023 0302 	bic.w	r3, r3, #2
 800aa08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a2d      	ldr	r2, [pc, #180]	@ (800aacc <TIM_OC1_SetConfig+0x10c>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d00f      	beq.n	800aa3c <TIM_OC1_SetConfig+0x7c>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a2c      	ldr	r2, [pc, #176]	@ (800aad0 <TIM_OC1_SetConfig+0x110>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d00b      	beq.n	800aa3c <TIM_OC1_SetConfig+0x7c>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a2b      	ldr	r2, [pc, #172]	@ (800aad4 <TIM_OC1_SetConfig+0x114>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d007      	beq.n	800aa3c <TIM_OC1_SetConfig+0x7c>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a2a      	ldr	r2, [pc, #168]	@ (800aad8 <TIM_OC1_SetConfig+0x118>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d003      	beq.n	800aa3c <TIM_OC1_SetConfig+0x7c>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a29      	ldr	r2, [pc, #164]	@ (800aadc <TIM_OC1_SetConfig+0x11c>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d10c      	bne.n	800aa56 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f023 0308 	bic.w	r3, r3, #8
 800aa42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f023 0304 	bic.w	r3, r3, #4
 800aa54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a1c      	ldr	r2, [pc, #112]	@ (800aacc <TIM_OC1_SetConfig+0x10c>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00f      	beq.n	800aa7e <TIM_OC1_SetConfig+0xbe>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a1b      	ldr	r2, [pc, #108]	@ (800aad0 <TIM_OC1_SetConfig+0x110>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d00b      	beq.n	800aa7e <TIM_OC1_SetConfig+0xbe>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a1a      	ldr	r2, [pc, #104]	@ (800aad4 <TIM_OC1_SetConfig+0x114>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d007      	beq.n	800aa7e <TIM_OC1_SetConfig+0xbe>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a19      	ldr	r2, [pc, #100]	@ (800aad8 <TIM_OC1_SetConfig+0x118>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d003      	beq.n	800aa7e <TIM_OC1_SetConfig+0xbe>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a18      	ldr	r2, [pc, #96]	@ (800aadc <TIM_OC1_SetConfig+0x11c>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d111      	bne.n	800aaa2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	621a      	str	r2, [r3, #32]
}
 800aabc:	bf00      	nop
 800aabe:	371c      	adds	r7, #28
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	fffeff8f 	.word	0xfffeff8f
 800aacc:	40010000 	.word	0x40010000
 800aad0:	40010400 	.word	0x40010400
 800aad4:	40014000 	.word	0x40014000
 800aad8:	40014400 	.word	0x40014400
 800aadc:	40014800 	.word	0x40014800

0800aae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	f023 0210 	bic.w	r2, r3, #16
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	4b34      	ldr	r3, [pc, #208]	@ (800abdc <TIM_OC2_SetConfig+0xfc>)
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	021b      	lsls	r3, r3, #8
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f023 0320 	bic.w	r3, r3, #32
 800ab2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	011b      	lsls	r3, r3, #4
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a29      	ldr	r2, [pc, #164]	@ (800abe0 <TIM_OC2_SetConfig+0x100>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_OC2_SetConfig+0x68>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a28      	ldr	r2, [pc, #160]	@ (800abe4 <TIM_OC2_SetConfig+0x104>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d10d      	bne.n	800ab64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a1e      	ldr	r2, [pc, #120]	@ (800abe0 <TIM_OC2_SetConfig+0x100>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d00f      	beq.n	800ab8c <TIM_OC2_SetConfig+0xac>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a1d      	ldr	r2, [pc, #116]	@ (800abe4 <TIM_OC2_SetConfig+0x104>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d00b      	beq.n	800ab8c <TIM_OC2_SetConfig+0xac>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a1c      	ldr	r2, [pc, #112]	@ (800abe8 <TIM_OC2_SetConfig+0x108>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d007      	beq.n	800ab8c <TIM_OC2_SetConfig+0xac>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a1b      	ldr	r2, [pc, #108]	@ (800abec <TIM_OC2_SetConfig+0x10c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d003      	beq.n	800ab8c <TIM_OC2_SetConfig+0xac>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a1a      	ldr	r2, [pc, #104]	@ (800abf0 <TIM_OC2_SetConfig+0x110>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d113      	bne.n	800abb4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	621a      	str	r2, [r3, #32]
}
 800abce:	bf00      	nop
 800abd0:	371c      	adds	r7, #28
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	feff8fff 	.word	0xfeff8fff
 800abe0:	40010000 	.word	0x40010000
 800abe4:	40010400 	.word	0x40010400
 800abe8:	40014000 	.word	0x40014000
 800abec:	40014400 	.word	0x40014400
 800abf0:	40014800 	.word	0x40014800

0800abf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b087      	sub	sp, #28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	4b33      	ldr	r3, [pc, #204]	@ (800acec <TIM_OC3_SetConfig+0xf8>)
 800ac20:	4013      	ands	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f023 0303 	bic.w	r3, r3, #3
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a28      	ldr	r2, [pc, #160]	@ (800acf0 <TIM_OC3_SetConfig+0xfc>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d003      	beq.n	800ac5a <TIM_OC3_SetConfig+0x66>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a27      	ldr	r2, [pc, #156]	@ (800acf4 <TIM_OC3_SetConfig+0x100>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d10d      	bne.n	800ac76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	021b      	lsls	r3, r3, #8
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a1d      	ldr	r2, [pc, #116]	@ (800acf0 <TIM_OC3_SetConfig+0xfc>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d00f      	beq.n	800ac9e <TIM_OC3_SetConfig+0xaa>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a1c      	ldr	r2, [pc, #112]	@ (800acf4 <TIM_OC3_SetConfig+0x100>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d00b      	beq.n	800ac9e <TIM_OC3_SetConfig+0xaa>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a1b      	ldr	r2, [pc, #108]	@ (800acf8 <TIM_OC3_SetConfig+0x104>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d007      	beq.n	800ac9e <TIM_OC3_SetConfig+0xaa>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a1a      	ldr	r2, [pc, #104]	@ (800acfc <TIM_OC3_SetConfig+0x108>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d003      	beq.n	800ac9e <TIM_OC3_SetConfig+0xaa>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a19      	ldr	r2, [pc, #100]	@ (800ad00 <TIM_OC3_SetConfig+0x10c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d113      	bne.n	800acc6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800acac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	011b      	lsls	r3, r3, #4
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	697a      	ldr	r2, [r7, #20]
 800acde:	621a      	str	r2, [r3, #32]
}
 800ace0:	bf00      	nop
 800ace2:	371c      	adds	r7, #28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	fffeff8f 	.word	0xfffeff8f
 800acf0:	40010000 	.word	0x40010000
 800acf4:	40010400 	.word	0x40010400
 800acf8:	40014000 	.word	0x40014000
 800acfc:	40014400 	.word	0x40014400
 800ad00:	40014800 	.word	0x40014800

0800ad04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	69db      	ldr	r3, [r3, #28]
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	4b24      	ldr	r3, [pc, #144]	@ (800adc0 <TIM_OC4_SetConfig+0xbc>)
 800ad30:	4013      	ands	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	021b      	lsls	r3, r3, #8
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	031b      	lsls	r3, r3, #12
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a19      	ldr	r2, [pc, #100]	@ (800adc4 <TIM_OC4_SetConfig+0xc0>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d00f      	beq.n	800ad84 <TIM_OC4_SetConfig+0x80>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a18      	ldr	r2, [pc, #96]	@ (800adc8 <TIM_OC4_SetConfig+0xc4>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d00b      	beq.n	800ad84 <TIM_OC4_SetConfig+0x80>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a17      	ldr	r2, [pc, #92]	@ (800adcc <TIM_OC4_SetConfig+0xc8>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d007      	beq.n	800ad84 <TIM_OC4_SetConfig+0x80>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a16      	ldr	r2, [pc, #88]	@ (800add0 <TIM_OC4_SetConfig+0xcc>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d003      	beq.n	800ad84 <TIM_OC4_SetConfig+0x80>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a15      	ldr	r2, [pc, #84]	@ (800add4 <TIM_OC4_SetConfig+0xd0>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d109      	bne.n	800ad98 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	019b      	lsls	r3, r3, #6
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	621a      	str	r2, [r3, #32]
}
 800adb2:	bf00      	nop
 800adb4:	371c      	adds	r7, #28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	feff8fff 	.word	0xfeff8fff
 800adc4:	40010000 	.word	0x40010000
 800adc8:	40010400 	.word	0x40010400
 800adcc:	40014000 	.word	0x40014000
 800add0:	40014400 	.word	0x40014400
 800add4:	40014800 	.word	0x40014800

0800add8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800add8:	b480      	push	{r7}
 800adda:	b087      	sub	sp, #28
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a1b      	ldr	r3, [r3, #32]
 800ade6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	4b21      	ldr	r3, [pc, #132]	@ (800ae88 <TIM_OC5_SetConfig+0xb0>)
 800ae04:	4013      	ands	r3, r2
 800ae06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ae18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	041b      	lsls	r3, r3, #16
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a18      	ldr	r2, [pc, #96]	@ (800ae8c <TIM_OC5_SetConfig+0xb4>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d00f      	beq.n	800ae4e <TIM_OC5_SetConfig+0x76>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a17      	ldr	r2, [pc, #92]	@ (800ae90 <TIM_OC5_SetConfig+0xb8>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d00b      	beq.n	800ae4e <TIM_OC5_SetConfig+0x76>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a16      	ldr	r2, [pc, #88]	@ (800ae94 <TIM_OC5_SetConfig+0xbc>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d007      	beq.n	800ae4e <TIM_OC5_SetConfig+0x76>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a15      	ldr	r2, [pc, #84]	@ (800ae98 <TIM_OC5_SetConfig+0xc0>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d003      	beq.n	800ae4e <TIM_OC5_SetConfig+0x76>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a14      	ldr	r2, [pc, #80]	@ (800ae9c <TIM_OC5_SetConfig+0xc4>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d109      	bne.n	800ae62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	021b      	lsls	r3, r3, #8
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685a      	ldr	r2, [r3, #4]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	621a      	str	r2, [r3, #32]
}
 800ae7c:	bf00      	nop
 800ae7e:	371c      	adds	r7, #28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	fffeff8f 	.word	0xfffeff8f
 800ae8c:	40010000 	.word	0x40010000
 800ae90:	40010400 	.word	0x40010400
 800ae94:	40014000 	.word	0x40014000
 800ae98:	40014400 	.word	0x40014400
 800ae9c:	40014800 	.word	0x40014800

0800aea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4b22      	ldr	r3, [pc, #136]	@ (800af54 <TIM_OC6_SetConfig+0xb4>)
 800aecc:	4013      	ands	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	021b      	lsls	r3, r3, #8
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	051b      	lsls	r3, r3, #20
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a19      	ldr	r2, [pc, #100]	@ (800af58 <TIM_OC6_SetConfig+0xb8>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d00f      	beq.n	800af18 <TIM_OC6_SetConfig+0x78>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a18      	ldr	r2, [pc, #96]	@ (800af5c <TIM_OC6_SetConfig+0xbc>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d00b      	beq.n	800af18 <TIM_OC6_SetConfig+0x78>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a17      	ldr	r2, [pc, #92]	@ (800af60 <TIM_OC6_SetConfig+0xc0>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d007      	beq.n	800af18 <TIM_OC6_SetConfig+0x78>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a16      	ldr	r2, [pc, #88]	@ (800af64 <TIM_OC6_SetConfig+0xc4>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d003      	beq.n	800af18 <TIM_OC6_SetConfig+0x78>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a15      	ldr	r2, [pc, #84]	@ (800af68 <TIM_OC6_SetConfig+0xc8>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d109      	bne.n	800af2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	695b      	ldr	r3, [r3, #20]
 800af24:	029b      	lsls	r3, r3, #10
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	4313      	orrs	r3, r2
 800af2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	621a      	str	r2, [r3, #32]
}
 800af46:	bf00      	nop
 800af48:	371c      	adds	r7, #28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	feff8fff 	.word	0xfeff8fff
 800af58:	40010000 	.word	0x40010000
 800af5c:	40010400 	.word	0x40010400
 800af60:	40014000 	.word	0x40014000
 800af64:	40014400 	.word	0x40014400
 800af68:	40014800 	.word	0x40014800

0800af6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	f023 0201 	bic.w	r2, r3, #1
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	699b      	ldr	r3, [r3, #24]
 800af8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800af96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	011b      	lsls	r3, r3, #4
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f023 030a 	bic.w	r3, r3, #10
 800afa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	4313      	orrs	r3, r2
 800afb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	621a      	str	r2, [r3, #32]
}
 800afbe:	bf00      	nop
 800afc0:	371c      	adds	r7, #28
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afca:	b480      	push	{r7}
 800afcc:	b087      	sub	sp, #28
 800afce:	af00      	add	r7, sp, #0
 800afd0:	60f8      	str	r0, [r7, #12]
 800afd2:	60b9      	str	r1, [r7, #8]
 800afd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	f023 0210 	bic.w	r2, r3, #16
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aff4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	031b      	lsls	r3, r3, #12
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	4313      	orrs	r3, r2
 800affe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b006:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	4313      	orrs	r3, r2
 800b010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	621a      	str	r2, [r3, #32]
}
 800b01e:	bf00      	nop
 800b020:	371c      	adds	r7, #28
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
	...

0800b02c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	4b09      	ldr	r3, [pc, #36]	@ (800b064 <TIM_ITRx_SetConfig+0x38>)
 800b040:	4013      	ands	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	4313      	orrs	r3, r2
 800b04a:	f043 0307 	orr.w	r3, r3, #7
 800b04e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	609a      	str	r2, [r3, #8]
}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	ffcfff8f 	.word	0xffcfff8f

0800b068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b068:	b480      	push	{r7}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	021a      	lsls	r2, r3, #8
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	431a      	orrs	r2, r3
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	4313      	orrs	r3, r2
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	4313      	orrs	r3, r2
 800b094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	609a      	str	r2, [r3, #8]
}
 800b09c:	bf00      	nop
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	f003 031f 	and.w	r3, r3, #31
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6a1a      	ldr	r2, [r3, #32]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	43db      	mvns	r3, r3
 800b0ca:	401a      	ands	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6a1a      	ldr	r2, [r3, #32]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	f003 031f 	and.w	r3, r3, #31
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	621a      	str	r2, [r3, #32]
}
 800b0e6:	bf00      	nop
 800b0e8:	371c      	adds	r7, #28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
	...

0800b0f4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d109      	bne.n	800b118 <HAL_TIMEx_PWMN_Start+0x24>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	bf14      	ite	ne
 800b110:	2301      	movne	r3, #1
 800b112:	2300      	moveq	r3, #0
 800b114:	b2db      	uxtb	r3, r3
 800b116:	e022      	b.n	800b15e <HAL_TIMEx_PWMN_Start+0x6a>
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d109      	bne.n	800b132 <HAL_TIMEx_PWMN_Start+0x3e>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b01      	cmp	r3, #1
 800b128:	bf14      	ite	ne
 800b12a:	2301      	movne	r3, #1
 800b12c:	2300      	moveq	r3, #0
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	e015      	b.n	800b15e <HAL_TIMEx_PWMN_Start+0x6a>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b08      	cmp	r3, #8
 800b136:	d109      	bne.n	800b14c <HAL_TIMEx_PWMN_Start+0x58>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b01      	cmp	r3, #1
 800b142:	bf14      	ite	ne
 800b144:	2301      	movne	r3, #1
 800b146:	2300      	moveq	r3, #0
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	e008      	b.n	800b15e <HAL_TIMEx_PWMN_Start+0x6a>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b01      	cmp	r3, #1
 800b156:	bf14      	ite	ne
 800b158:	2301      	movne	r3, #1
 800b15a:	2300      	moveq	r3, #0
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	e073      	b.n	800b24e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d104      	bne.n	800b176 <HAL_TIMEx_PWMN_Start+0x82>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b174:	e013      	b.n	800b19e <HAL_TIMEx_PWMN_Start+0xaa>
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b04      	cmp	r3, #4
 800b17a:	d104      	bne.n	800b186 <HAL_TIMEx_PWMN_Start+0x92>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b184:	e00b      	b.n	800b19e <HAL_TIMEx_PWMN_Start+0xaa>
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b08      	cmp	r3, #8
 800b18a:	d104      	bne.n	800b196 <HAL_TIMEx_PWMN_Start+0xa2>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b194:	e003      	b.n	800b19e <HAL_TIMEx_PWMN_Start+0xaa>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2202      	movs	r2, #2
 800b19a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2204      	movs	r2, #4
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 f990 	bl	800b4cc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b1ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a25      	ldr	r2, [pc, #148]	@ (800b258 <HAL_TIMEx_PWMN_Start+0x164>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d022      	beq.n	800b20c <HAL_TIMEx_PWMN_Start+0x118>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ce:	d01d      	beq.n	800b20c <HAL_TIMEx_PWMN_Start+0x118>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a21      	ldr	r2, [pc, #132]	@ (800b25c <HAL_TIMEx_PWMN_Start+0x168>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d018      	beq.n	800b20c <HAL_TIMEx_PWMN_Start+0x118>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a20      	ldr	r2, [pc, #128]	@ (800b260 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d013      	beq.n	800b20c <HAL_TIMEx_PWMN_Start+0x118>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a1e      	ldr	r2, [pc, #120]	@ (800b264 <HAL_TIMEx_PWMN_Start+0x170>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d00e      	beq.n	800b20c <HAL_TIMEx_PWMN_Start+0x118>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a1d      	ldr	r2, [pc, #116]	@ (800b268 <HAL_TIMEx_PWMN_Start+0x174>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d009      	beq.n	800b20c <HAL_TIMEx_PWMN_Start+0x118>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b26c <HAL_TIMEx_PWMN_Start+0x178>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d004      	beq.n	800b20c <HAL_TIMEx_PWMN_Start+0x118>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a1a      	ldr	r2, [pc, #104]	@ (800b270 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d115      	bne.n	800b238 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689a      	ldr	r2, [r3, #8]
 800b212:	4b18      	ldr	r3, [pc, #96]	@ (800b274 <HAL_TIMEx_PWMN_Start+0x180>)
 800b214:	4013      	ands	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b06      	cmp	r3, #6
 800b21c:	d015      	beq.n	800b24a <HAL_TIMEx_PWMN_Start+0x156>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b224:	d011      	beq.n	800b24a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f042 0201 	orr.w	r2, r2, #1
 800b234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b236:	e008      	b.n	800b24a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f042 0201 	orr.w	r2, r2, #1
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	e000      	b.n	800b24c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b24a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	40010000 	.word	0x40010000
 800b25c:	40000400 	.word	0x40000400
 800b260:	40000800 	.word	0x40000800
 800b264:	40000c00 	.word	0x40000c00
 800b268:	40010400 	.word	0x40010400
 800b26c:	40001800 	.word	0x40001800
 800b270:	40014000 	.word	0x40014000
 800b274:	00010007 	.word	0x00010007

0800b278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d101      	bne.n	800b290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b28c:	2302      	movs	r3, #2
 800b28e:	e06d      	b.n	800b36c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2202      	movs	r2, #2
 800b29c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a30      	ldr	r2, [pc, #192]	@ (800b378 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d004      	beq.n	800b2c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a2f      	ldr	r2, [pc, #188]	@ (800b37c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d108      	bne.n	800b2d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b2ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a20      	ldr	r2, [pc, #128]	@ (800b378 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d022      	beq.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b302:	d01d      	beq.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a1d      	ldr	r2, [pc, #116]	@ (800b380 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d018      	beq.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a1c      	ldr	r2, [pc, #112]	@ (800b384 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d013      	beq.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a1a      	ldr	r2, [pc, #104]	@ (800b388 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d00e      	beq.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a15      	ldr	r2, [pc, #84]	@ (800b37c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d009      	beq.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a16      	ldr	r2, [pc, #88]	@ (800b38c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d004      	beq.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a15      	ldr	r2, [pc, #84]	@ (800b390 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d10c      	bne.n	800b35a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b346:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2201      	movs	r2, #1
 800b35e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	40010000 	.word	0x40010000
 800b37c:	40010400 	.word	0x40010400
 800b380:	40000400 	.word	0x40000400
 800b384:	40000800 	.word	0x40000800
 800b388:	40000c00 	.word	0x40000c00
 800b38c:	40001800 	.word	0x40001800
 800b390:	40014000 	.word	0x40014000

0800b394 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d101      	bne.n	800b3b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	e065      	b.n	800b47c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	4313      	orrs	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	041b      	lsls	r3, r3, #16
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a16      	ldr	r2, [pc, #88]	@ (800b488 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d004      	beq.n	800b43e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a14      	ldr	r2, [pc, #80]	@ (800b48c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d115      	bne.n	800b46a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b448:	051b      	lsls	r3, r3, #20
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	4313      	orrs	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	4313      	orrs	r3, r2
 800b468:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	40010000 	.word	0x40010000
 800b48c:	40010400 	.word	0x40010400

0800b490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f003 031f 	and.w	r3, r3, #31
 800b4de:	2204      	movs	r2, #4
 800b4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6a1a      	ldr	r2, [r3, #32]
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	43db      	mvns	r3, r3
 800b4ee:	401a      	ands	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6a1a      	ldr	r2, [r3, #32]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f003 031f 	and.w	r3, r3, #31
 800b4fe:	6879      	ldr	r1, [r7, #4]
 800b500:	fa01 f303 	lsl.w	r3, r1, r3
 800b504:	431a      	orrs	r2, r3
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	621a      	str	r2, [r3, #32]
}
 800b50a:	bf00      	nop
 800b50c:	371c      	adds	r7, #28
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
	...

0800b518 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b518:	b084      	sub	sp, #16
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b084      	sub	sp, #16
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	f107 001c 	add.w	r0, r7, #28
 800b526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d120      	bne.n	800b572 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b534:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68da      	ldr	r2, [r3, #12]
 800b540:	4b2a      	ldr	r3, [pc, #168]	@ (800b5ec <USB_CoreInit+0xd4>)
 800b542:	4013      	ands	r3, r2
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b556:	2b01      	cmp	r3, #1
 800b558:	d105      	bne.n	800b566 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 faf8 	bl	800cb5c <USB_CoreReset>
 800b56c:	4603      	mov	r3, r0
 800b56e:	73fb      	strb	r3, [r7, #15]
 800b570:	e01a      	b.n	800b5a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 faec 	bl	800cb5c <USB_CoreReset>
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b592:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	639a      	str	r2, [r3, #56]	@ 0x38
 800b59a:	e005      	b.n	800b5a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d116      	bne.n	800b5dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b5bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f0 <USB_CoreInit+0xd8>)
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f043 0206 	orr.w	r2, r3, #6
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	f043 0220 	orr.w	r2, r3, #32
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5e8:	b004      	add	sp, #16
 800b5ea:	4770      	bx	lr
 800b5ec:	ffbdffbf 	.word	0xffbdffbf
 800b5f0:	03ee0000 	.word	0x03ee0000

0800b5f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b087      	sub	sp, #28
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	4613      	mov	r3, r2
 800b600:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	2b02      	cmp	r3, #2
 800b606:	d165      	bne.n	800b6d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	4a41      	ldr	r2, [pc, #260]	@ (800b710 <USB_SetTurnaroundTime+0x11c>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d906      	bls.n	800b61e <USB_SetTurnaroundTime+0x2a>
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	4a40      	ldr	r2, [pc, #256]	@ (800b714 <USB_SetTurnaroundTime+0x120>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d202      	bcs.n	800b61e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b618:	230f      	movs	r3, #15
 800b61a:	617b      	str	r3, [r7, #20]
 800b61c:	e062      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	4a3c      	ldr	r2, [pc, #240]	@ (800b714 <USB_SetTurnaroundTime+0x120>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d306      	bcc.n	800b634 <USB_SetTurnaroundTime+0x40>
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	4a3b      	ldr	r2, [pc, #236]	@ (800b718 <USB_SetTurnaroundTime+0x124>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d202      	bcs.n	800b634 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b62e:	230e      	movs	r3, #14
 800b630:	617b      	str	r3, [r7, #20]
 800b632:	e057      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	4a38      	ldr	r2, [pc, #224]	@ (800b718 <USB_SetTurnaroundTime+0x124>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d306      	bcc.n	800b64a <USB_SetTurnaroundTime+0x56>
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	4a37      	ldr	r2, [pc, #220]	@ (800b71c <USB_SetTurnaroundTime+0x128>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d202      	bcs.n	800b64a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b644:	230d      	movs	r3, #13
 800b646:	617b      	str	r3, [r7, #20]
 800b648:	e04c      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	4a33      	ldr	r2, [pc, #204]	@ (800b71c <USB_SetTurnaroundTime+0x128>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d306      	bcc.n	800b660 <USB_SetTurnaroundTime+0x6c>
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	4a32      	ldr	r2, [pc, #200]	@ (800b720 <USB_SetTurnaroundTime+0x12c>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d802      	bhi.n	800b660 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b65a:	230c      	movs	r3, #12
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	e041      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	4a2f      	ldr	r2, [pc, #188]	@ (800b720 <USB_SetTurnaroundTime+0x12c>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d906      	bls.n	800b676 <USB_SetTurnaroundTime+0x82>
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	4a2e      	ldr	r2, [pc, #184]	@ (800b724 <USB_SetTurnaroundTime+0x130>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d802      	bhi.n	800b676 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b670:	230b      	movs	r3, #11
 800b672:	617b      	str	r3, [r7, #20]
 800b674:	e036      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	4a2a      	ldr	r2, [pc, #168]	@ (800b724 <USB_SetTurnaroundTime+0x130>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d906      	bls.n	800b68c <USB_SetTurnaroundTime+0x98>
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	4a29      	ldr	r2, [pc, #164]	@ (800b728 <USB_SetTurnaroundTime+0x134>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d802      	bhi.n	800b68c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b686:	230a      	movs	r3, #10
 800b688:	617b      	str	r3, [r7, #20]
 800b68a:	e02b      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	4a26      	ldr	r2, [pc, #152]	@ (800b728 <USB_SetTurnaroundTime+0x134>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d906      	bls.n	800b6a2 <USB_SetTurnaroundTime+0xae>
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	4a25      	ldr	r2, [pc, #148]	@ (800b72c <USB_SetTurnaroundTime+0x138>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d202      	bcs.n	800b6a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b69c:	2309      	movs	r3, #9
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	e020      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	4a21      	ldr	r2, [pc, #132]	@ (800b72c <USB_SetTurnaroundTime+0x138>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d306      	bcc.n	800b6b8 <USB_SetTurnaroundTime+0xc4>
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	4a20      	ldr	r2, [pc, #128]	@ (800b730 <USB_SetTurnaroundTime+0x13c>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d802      	bhi.n	800b6b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b6b2:	2308      	movs	r3, #8
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	e015      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	4a1d      	ldr	r2, [pc, #116]	@ (800b730 <USB_SetTurnaroundTime+0x13c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d906      	bls.n	800b6ce <USB_SetTurnaroundTime+0xda>
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	4a1c      	ldr	r2, [pc, #112]	@ (800b734 <USB_SetTurnaroundTime+0x140>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d202      	bcs.n	800b6ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b6c8:	2307      	movs	r3, #7
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	e00a      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b6ce:	2306      	movs	r3, #6
 800b6d0:	617b      	str	r3, [r7, #20]
 800b6d2:	e007      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d102      	bne.n	800b6e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b6da:	2309      	movs	r3, #9
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	e001      	b.n	800b6e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b6e0:	2309      	movs	r3, #9
 800b6e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	029b      	lsls	r3, r3, #10
 800b6f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b6fc:	431a      	orrs	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	371c      	adds	r7, #28
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr
 800b710:	00d8acbf 	.word	0x00d8acbf
 800b714:	00e4e1c0 	.word	0x00e4e1c0
 800b718:	00f42400 	.word	0x00f42400
 800b71c:	01067380 	.word	0x01067380
 800b720:	011a499f 	.word	0x011a499f
 800b724:	01312cff 	.word	0x01312cff
 800b728:	014ca43f 	.word	0x014ca43f
 800b72c:	016e3600 	.word	0x016e3600
 800b730:	01a6ab1f 	.word	0x01a6ab1f
 800b734:	01e84800 	.word	0x01e84800

0800b738 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	f043 0201 	orr.w	r2, r3, #1
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b083      	sub	sp, #12
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f023 0201 	bic.w	r2, r3, #1
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	460b      	mov	r3, r1
 800b786:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b788:	2300      	movs	r3, #0
 800b78a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b798:	78fb      	ldrb	r3, [r7, #3]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d115      	bne.n	800b7ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	f7f5 ffde 	bl	800176c <HAL_Delay>
      ms++;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f001 f93f 	bl	800ca3a <USB_GetMode>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d01e      	beq.n	800b800 <USB_SetCurrentMode+0x84>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b31      	cmp	r3, #49	@ 0x31
 800b7c6:	d9f0      	bls.n	800b7aa <USB_SetCurrentMode+0x2e>
 800b7c8:	e01a      	b.n	800b800 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b7ca:	78fb      	ldrb	r3, [r7, #3]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d115      	bne.n	800b7fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b7dc:	2001      	movs	r0, #1
 800b7de:	f7f5 ffc5 	bl	800176c <HAL_Delay>
      ms++;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f001 f926 	bl	800ca3a <USB_GetMode>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d005      	beq.n	800b800 <USB_SetCurrentMode+0x84>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b31      	cmp	r3, #49	@ 0x31
 800b7f8:	d9f0      	bls.n	800b7dc <USB_SetCurrentMode+0x60>
 800b7fa:	e001      	b.n	800b800 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e005      	b.n	800b80c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b32      	cmp	r3, #50	@ 0x32
 800b804:	d101      	bne.n	800b80a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e000      	b.n	800b80c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b814:	b084      	sub	sp, #16
 800b816:	b580      	push	{r7, lr}
 800b818:	b086      	sub	sp, #24
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b82e:	2300      	movs	r3, #0
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	e009      	b.n	800b848 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	3340      	adds	r3, #64	@ 0x40
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	2200      	movs	r2, #0
 800b840:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	3301      	adds	r3, #1
 800b846:	613b      	str	r3, [r7, #16]
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	2b0e      	cmp	r3, #14
 800b84c:	d9f2      	bls.n	800b834 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b84e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b850:	2b00      	cmp	r3, #0
 800b852:	d11c      	bne.n	800b88e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b862:	f043 0302 	orr.w	r3, r3, #2
 800b866:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b86c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	e005      	b.n	800b89a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b892:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	680b      	ldr	r3, [r1, #0]
 800b8b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d10c      	bne.n	800b8da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d104      	bne.n	800b8d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f965 	bl	800bb98 <USB_SetDevSpeed>
 800b8ce:	e008      	b.n	800b8e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f960 	bl	800bb98 <USB_SetDevSpeed>
 800b8d8:	e003      	b.n	800b8e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b8da:	2103      	movs	r1, #3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f95b 	bl	800bb98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b8e2:	2110      	movs	r1, #16
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f8f3 	bl	800bad0 <USB_FlushTxFifo>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f91f 	bl	800bb38 <USB_FlushRxFifo>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b90a:	461a      	mov	r2, r3
 800b90c:	2300      	movs	r3, #0
 800b90e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b916:	461a      	mov	r2, r3
 800b918:	2300      	movs	r3, #0
 800b91a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b922:	461a      	mov	r2, r3
 800b924:	2300      	movs	r3, #0
 800b926:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b928:	2300      	movs	r3, #0
 800b92a:	613b      	str	r3, [r7, #16]
 800b92c:	e043      	b.n	800b9b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	4413      	add	r3, r2
 800b936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b940:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b944:	d118      	bne.n	800b978 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10a      	bne.n	800b962 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4413      	add	r3, r2
 800b954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b958:	461a      	mov	r2, r3
 800b95a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	e013      	b.n	800b98a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	015a      	lsls	r2, r3, #5
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	4413      	add	r3, r2
 800b96a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b96e:	461a      	mov	r2, r3
 800b970:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	e008      	b.n	800b98a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b984:	461a      	mov	r2, r3
 800b986:	2300      	movs	r3, #0
 800b988:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	015a      	lsls	r2, r3, #5
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	4413      	add	r3, r2
 800b992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b996:	461a      	mov	r2, r3
 800b998:	2300      	movs	r3, #0
 800b99a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	015a      	lsls	r2, r3, #5
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b9ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	613b      	str	r3, [r7, #16]
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d3b7      	bcc.n	800b92e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9be:	2300      	movs	r3, #0
 800b9c0:	613b      	str	r3, [r7, #16]
 800b9c2:	e043      	b.n	800ba4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9da:	d118      	bne.n	800ba0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10a      	bne.n	800b9f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b9f4:	6013      	str	r3, [r2, #0]
 800b9f6:	e013      	b.n	800ba20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	015a      	lsls	r2, r3, #5
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4413      	add	r3, r2
 800ba00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba04:	461a      	mov	r2, r3
 800ba06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ba0a:	6013      	str	r3, [r2, #0]
 800ba0c:	e008      	b.n	800ba20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	015a      	lsls	r2, r3, #5
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4413      	add	r3, r2
 800ba28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	2300      	movs	r3, #0
 800ba30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba3e:	461a      	mov	r2, r3
 800ba40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ba44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	613b      	str	r3, [r7, #16]
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d3b7      	bcc.n	800b9c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ba74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d105      	bne.n	800ba88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	f043 0210 	orr.w	r2, r3, #16
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	699a      	ldr	r2, [r3, #24]
 800ba8c:	4b0e      	ldr	r3, [pc, #56]	@ (800bac8 <USB_DevInit+0x2b4>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ba94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	699b      	ldr	r3, [r3, #24]
 800ba9e:	f043 0208 	orr.w	r2, r3, #8
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800baa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d105      	bne.n	800bab8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	699a      	ldr	r2, [r3, #24]
 800bab0:	4b06      	ldr	r3, [pc, #24]	@ (800bacc <USB_DevInit+0x2b8>)
 800bab2:	4313      	orrs	r3, r2
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3718      	adds	r7, #24
 800babe:	46bd      	mov	sp, r7
 800bac0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bac4:	b004      	add	sp, #16
 800bac6:	4770      	bx	lr
 800bac8:	803c3800 	.word	0x803c3800
 800bacc:	40000004 	.word	0x40000004

0800bad0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3301      	adds	r3, #1
 800bae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4a13      	ldr	r2, [pc, #76]	@ (800bb34 <USB_FlushTxFifo+0x64>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d901      	bls.n	800baf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800baec:	2303      	movs	r3, #3
 800baee:	e01b      	b.n	800bb28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	daf2      	bge.n	800bade <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	019b      	lsls	r3, r3, #6
 800bb00:	f043 0220 	orr.w	r2, r3, #32
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	4a08      	ldr	r2, [pc, #32]	@ (800bb34 <USB_FlushTxFifo+0x64>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d901      	bls.n	800bb1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bb16:	2303      	movs	r3, #3
 800bb18:	e006      	b.n	800bb28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f003 0320 	and.w	r3, r3, #32
 800bb22:	2b20      	cmp	r3, #32
 800bb24:	d0f0      	beq.n	800bb08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	00030d40 	.word	0x00030d40

0800bb38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb40:	2300      	movs	r3, #0
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	3301      	adds	r3, #1
 800bb48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4a11      	ldr	r2, [pc, #68]	@ (800bb94 <USB_FlushRxFifo+0x5c>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d901      	bls.n	800bb56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e018      	b.n	800bb88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	daf2      	bge.n	800bb44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2210      	movs	r2, #16
 800bb66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	4a08      	ldr	r2, [pc, #32]	@ (800bb94 <USB_FlushRxFifo+0x5c>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d901      	bls.n	800bb7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e006      	b.n	800bb88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	f003 0310 	and.w	r3, r3, #16
 800bb82:	2b10      	cmp	r3, #16
 800bb84:	d0f0      	beq.n	800bb68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	00030d40 	.word	0x00030d40

0800bb98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	68f9      	ldr	r1, [r7, #12]
 800bbb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3714      	adds	r7, #20
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b087      	sub	sp, #28
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f003 0306 	and.w	r3, r3, #6
 800bbe2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d102      	bne.n	800bbf0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bbea:	2300      	movs	r3, #0
 800bbec:	75fb      	strb	r3, [r7, #23]
 800bbee:	e00a      	b.n	800bc06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	d002      	beq.n	800bbfc <USB_GetDevSpeed+0x32>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2b06      	cmp	r3, #6
 800bbfa:	d102      	bne.n	800bc02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	75fb      	strb	r3, [r7, #23]
 800bc00:	e001      	b.n	800bc06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bc02:	230f      	movs	r3, #15
 800bc04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bc06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	371c      	adds	r7, #28
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	785b      	ldrb	r3, [r3, #1]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d139      	bne.n	800bca4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc36:	69da      	ldr	r2, [r3, #28]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	f003 030f 	and.w	r3, r3, #15
 800bc40:	2101      	movs	r1, #1
 800bc42:	fa01 f303 	lsl.w	r3, r1, r3
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	68f9      	ldr	r1, [r7, #12]
 800bc4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	015a      	lsls	r2, r3, #5
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d153      	bne.n	800bd10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	791b      	ldrb	r3, [r3, #4]
 800bc82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	059b      	lsls	r3, r3, #22
 800bc8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc8c:	431a      	orrs	r2, r3
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	0159      	lsls	r1, r3, #5
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	440b      	add	r3, r1
 800bc96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4b20      	ldr	r3, [pc, #128]	@ (800bd20 <USB_ActivateEndpoint+0x10c>)
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	600b      	str	r3, [r1, #0]
 800bca2:	e035      	b.n	800bd10 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcaa:	69da      	ldr	r2, [r3, #28]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	f003 030f 	and.w	r3, r3, #15
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	fa01 f303 	lsl.w	r3, r1, r3
 800bcba:	041b      	lsls	r3, r3, #16
 800bcbc:	68f9      	ldr	r1, [r7, #12]
 800bcbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	015a      	lsls	r2, r3, #5
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	4413      	add	r3, r2
 800bcce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d119      	bne.n	800bd10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	015a      	lsls	r2, r3, #5
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	4413      	add	r3, r2
 800bce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	791b      	ldrb	r3, [r3, #4]
 800bcf6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bcf8:	430b      	orrs	r3, r1
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	0159      	lsls	r1, r3, #5
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	440b      	add	r3, r1
 800bd04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4b05      	ldr	r3, [pc, #20]	@ (800bd20 <USB_ActivateEndpoint+0x10c>)
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	10008000 	.word	0x10008000

0800bd24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	785b      	ldrb	r3, [r3, #1]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d161      	bne.n	800be04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	015a      	lsls	r2, r3, #5
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	4413      	add	r3, r2
 800bd48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd56:	d11f      	bne.n	800bd98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	0151      	lsls	r1, r2, #5
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	440a      	add	r2, r1
 800bd6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	015a      	lsls	r2, r3, #5
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	0151      	lsls	r1, r2, #5
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	440a      	add	r2, r1
 800bd8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	f003 030f 	and.w	r3, r3, #15
 800bda8:	2101      	movs	r1, #1
 800bdaa:	fa01 f303 	lsl.w	r3, r1, r3
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	43db      	mvns	r3, r3
 800bdb2:	68f9      	ldr	r1, [r7, #12]
 800bdb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdb8:	4013      	ands	r3, r2
 800bdba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdc2:	69da      	ldr	r2, [r3, #28]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	f003 030f 	and.w	r3, r3, #15
 800bdcc:	2101      	movs	r1, #1
 800bdce:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	43db      	mvns	r3, r3
 800bdd6:	68f9      	ldr	r1, [r7, #12]
 800bdd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bddc:	4013      	ands	r3, r2
 800bdde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	015a      	lsls	r2, r3, #5
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4413      	add	r3, r2
 800bde8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	0159      	lsls	r1, r3, #5
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	440b      	add	r3, r1
 800bdf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4b35      	ldr	r3, [pc, #212]	@ (800bed4 <USB_DeactivateEndpoint+0x1b0>)
 800bdfe:	4013      	ands	r3, r2
 800be00:	600b      	str	r3, [r1, #0]
 800be02:	e060      	b.n	800bec6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	015a      	lsls	r2, r3, #5
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4413      	add	r3, r2
 800be0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be1a:	d11f      	bne.n	800be5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	4413      	add	r3, r2
 800be24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	0151      	lsls	r1, r2, #5
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	440a      	add	r2, r1
 800be32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800be3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	015a      	lsls	r2, r3, #5
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4413      	add	r3, r2
 800be44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	0151      	lsls	r1, r2, #5
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	440a      	add	r2, r1
 800be52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	f003 030f 	and.w	r3, r3, #15
 800be6c:	2101      	movs	r1, #1
 800be6e:	fa01 f303 	lsl.w	r3, r1, r3
 800be72:	041b      	lsls	r3, r3, #16
 800be74:	43db      	mvns	r3, r3
 800be76:	68f9      	ldr	r1, [r7, #12]
 800be78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be7c:	4013      	ands	r3, r2
 800be7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be86:	69da      	ldr	r2, [r3, #28]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	f003 030f 	and.w	r3, r3, #15
 800be90:	2101      	movs	r1, #1
 800be92:	fa01 f303 	lsl.w	r3, r1, r3
 800be96:	041b      	lsls	r3, r3, #16
 800be98:	43db      	mvns	r3, r3
 800be9a:	68f9      	ldr	r1, [r7, #12]
 800be9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bea0:	4013      	ands	r3, r2
 800bea2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	0159      	lsls	r1, r3, #5
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	440b      	add	r3, r1
 800beba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bebe:	4619      	mov	r1, r3
 800bec0:	4b05      	ldr	r3, [pc, #20]	@ (800bed8 <USB_DeactivateEndpoint+0x1b4>)
 800bec2:	4013      	ands	r3, r2
 800bec4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	ec337800 	.word	0xec337800
 800bed8:	eff37800 	.word	0xeff37800

0800bedc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b08a      	sub	sp, #40	@ 0x28
 800bee0:	af02      	add	r7, sp, #8
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	4613      	mov	r3, r2
 800bee8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	785b      	ldrb	r3, [r3, #1]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	f040 8181 	bne.w	800c200 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d132      	bne.n	800bf6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	015a      	lsls	r2, r3, #5
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf12:	691a      	ldr	r2, [r3, #16]
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	0159      	lsls	r1, r3, #5
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	440b      	add	r3, r1
 800bf1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf20:	4619      	mov	r1, r3
 800bf22:	4ba5      	ldr	r3, [pc, #660]	@ (800c1b8 <USB_EPStartXfer+0x2dc>)
 800bf24:	4013      	ands	r3, r2
 800bf26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	0151      	lsls	r1, r2, #5
 800bf3a:	69fa      	ldr	r2, [r7, #28]
 800bf3c:	440a      	add	r2, r1
 800bf3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf54:	691a      	ldr	r2, [r3, #16]
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	0159      	lsls	r1, r3, #5
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	440b      	add	r3, r1
 800bf5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf62:	4619      	mov	r1, r3
 800bf64:	4b95      	ldr	r3, [pc, #596]	@ (800c1bc <USB_EPStartXfer+0x2e0>)
 800bf66:	4013      	ands	r3, r2
 800bf68:	610b      	str	r3, [r1, #16]
 800bf6a:	e092      	b.n	800c092 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	4413      	add	r3, r2
 800bf74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf78:	691a      	ldr	r2, [r3, #16]
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	0159      	lsls	r1, r3, #5
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	440b      	add	r3, r1
 800bf82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf86:	4619      	mov	r1, r3
 800bf88:	4b8c      	ldr	r3, [pc, #560]	@ (800c1bc <USB_EPStartXfer+0x2e0>)
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	015a      	lsls	r2, r3, #5
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	4413      	add	r3, r2
 800bf96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf9a:	691a      	ldr	r2, [r3, #16]
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	0159      	lsls	r1, r3, #5
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	440b      	add	r3, r1
 800bfa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	4b83      	ldr	r3, [pc, #524]	@ (800c1b8 <USB_EPStartXfer+0x2dc>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d11a      	bne.n	800bfec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	691a      	ldr	r2, [r3, #16]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d903      	bls.n	800bfca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	689a      	ldr	r2, [r3, #8]
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	0151      	lsls	r1, r2, #5
 800bfdc:	69fa      	ldr	r2, [r7, #28]
 800bfde:	440a      	add	r2, r1
 800bfe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfe4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bfe8:	6113      	str	r3, [r2, #16]
 800bfea:	e01b      	b.n	800c024 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	015a      	lsls	r2, r3, #5
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	4413      	add	r3, r2
 800bff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bff8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	6919      	ldr	r1, [r3, #16]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	440b      	add	r3, r1
 800c004:	1e59      	subs	r1, r3, #1
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c00e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c010:	4b6b      	ldr	r3, [pc, #428]	@ (800c1c0 <USB_EPStartXfer+0x2e4>)
 800c012:	400b      	ands	r3, r1
 800c014:	69b9      	ldr	r1, [r7, #24]
 800c016:	0148      	lsls	r0, r1, #5
 800c018:	69f9      	ldr	r1, [r7, #28]
 800c01a:	4401      	add	r1, r0
 800c01c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c020:	4313      	orrs	r3, r2
 800c022:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	015a      	lsls	r2, r3, #5
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	4413      	add	r3, r2
 800c02c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c030:	691a      	ldr	r2, [r3, #16]
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c03a:	69b9      	ldr	r1, [r7, #24]
 800c03c:	0148      	lsls	r0, r1, #5
 800c03e:	69f9      	ldr	r1, [r7, #28]
 800c040:	4401      	add	r1, r0
 800c042:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c046:	4313      	orrs	r3, r2
 800c048:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	791b      	ldrb	r3, [r3, #4]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d11f      	bne.n	800c092 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	015a      	lsls	r2, r3, #5
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	4413      	add	r3, r2
 800c05a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	69ba      	ldr	r2, [r7, #24]
 800c062:	0151      	lsls	r1, r2, #5
 800c064:	69fa      	ldr	r2, [r7, #28]
 800c066:	440a      	add	r2, r1
 800c068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c06c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c070:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	015a      	lsls	r2, r3, #5
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	4413      	add	r3, r2
 800c07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	69ba      	ldr	r2, [r7, #24]
 800c082:	0151      	lsls	r1, r2, #5
 800c084:	69fa      	ldr	r2, [r7, #28]
 800c086:	440a      	add	r2, r1
 800c088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c08c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c090:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c092:	79fb      	ldrb	r3, [r7, #7]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d14b      	bne.n	800c130 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	69db      	ldr	r3, [r3, #28]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d009      	beq.n	800c0b4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	791b      	ldrb	r3, [r3, #4]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d128      	bne.n	800c10e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d110      	bne.n	800c0ee <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	015a      	lsls	r2, r3, #5
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	69ba      	ldr	r2, [r7, #24]
 800c0dc:	0151      	lsls	r1, r2, #5
 800c0de:	69fa      	ldr	r2, [r7, #28]
 800c0e0:	440a      	add	r2, r1
 800c0e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	e00f      	b.n	800c10e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	015a      	lsls	r2, r3, #5
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	0151      	lsls	r1, r2, #5
 800c100:	69fa      	ldr	r2, [r7, #28]
 800c102:	440a      	add	r2, r1
 800c104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c10c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	015a      	lsls	r2, r3, #5
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	4413      	add	r3, r2
 800c116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	0151      	lsls	r1, r2, #5
 800c120:	69fa      	ldr	r2, [r7, #28]
 800c122:	440a      	add	r2, r1
 800c124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c128:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	e16a      	b.n	800c406 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	015a      	lsls	r2, r3, #5
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	4413      	add	r3, r2
 800c138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	69ba      	ldr	r2, [r7, #24]
 800c140:	0151      	lsls	r1, r2, #5
 800c142:	69fa      	ldr	r2, [r7, #28]
 800c144:	440a      	add	r2, r1
 800c146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c14a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c14e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	791b      	ldrb	r3, [r3, #4]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d015      	beq.n	800c184 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 8152 	beq.w	800c406 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	f003 030f 	and.w	r3, r3, #15
 800c172:	2101      	movs	r1, #1
 800c174:	fa01 f303 	lsl.w	r3, r1, r3
 800c178:	69f9      	ldr	r1, [r7, #28]
 800c17a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c17e:	4313      	orrs	r3, r2
 800c180:	634b      	str	r3, [r1, #52]	@ 0x34
 800c182:	e140      	b.n	800c406 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c190:	2b00      	cmp	r3, #0
 800c192:	d117      	bne.n	800c1c4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	015a      	lsls	r2, r3, #5
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	4413      	add	r3, r2
 800c19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	0151      	lsls	r1, r2, #5
 800c1a6:	69fa      	ldr	r2, [r7, #28]
 800c1a8:	440a      	add	r2, r1
 800c1aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	e016      	b.n	800c1e4 <USB_EPStartXfer+0x308>
 800c1b6:	bf00      	nop
 800c1b8:	e007ffff 	.word	0xe007ffff
 800c1bc:	fff80000 	.word	0xfff80000
 800c1c0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	015a      	lsls	r2, r3, #5
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	0151      	lsls	r1, r2, #5
 800c1d6:	69fa      	ldr	r2, [r7, #28]
 800c1d8:	440a      	add	r2, r1
 800c1da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c1e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	68d9      	ldr	r1, [r3, #12]
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	b298      	uxth	r0, r3
 800c1f2:	79fb      	ldrb	r3, [r7, #7]
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f000 f9b9 	bl	800c570 <USB_WritePacket>
 800c1fe:	e102      	b.n	800c406 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	015a      	lsls	r2, r3, #5
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	4413      	add	r3, r2
 800c208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c20c:	691a      	ldr	r2, [r3, #16]
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	0159      	lsls	r1, r3, #5
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	440b      	add	r3, r1
 800c216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c21a:	4619      	mov	r1, r3
 800c21c:	4b7c      	ldr	r3, [pc, #496]	@ (800c410 <USB_EPStartXfer+0x534>)
 800c21e:	4013      	ands	r3, r2
 800c220:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c22e:	691a      	ldr	r2, [r3, #16]
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	0159      	lsls	r1, r3, #5
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	440b      	add	r3, r1
 800c238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c23c:	4619      	mov	r1, r3
 800c23e:	4b75      	ldr	r3, [pc, #468]	@ (800c414 <USB_EPStartXfer+0x538>)
 800c240:	4013      	ands	r3, r2
 800c242:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d12f      	bne.n	800c2aa <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d003      	beq.n	800c25a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	689a      	ldr	r2, [r3, #8]
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	015a      	lsls	r2, r3, #5
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4413      	add	r3, r2
 800c26a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c26e:	691a      	ldr	r2, [r3, #16]
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	6a1b      	ldr	r3, [r3, #32]
 800c274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c278:	69b9      	ldr	r1, [r7, #24]
 800c27a:	0148      	lsls	r0, r1, #5
 800c27c:	69f9      	ldr	r1, [r7, #28]
 800c27e:	4401      	add	r1, r0
 800c280:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c284:	4313      	orrs	r3, r2
 800c286:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	0151      	lsls	r1, r2, #5
 800c29a:	69fa      	ldr	r2, [r7, #28]
 800c29c:	440a      	add	r2, r1
 800c29e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c2a6:	6113      	str	r3, [r2, #16]
 800c2a8:	e05f      	b.n	800c36a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d123      	bne.n	800c2fa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	015a      	lsls	r2, r3, #5
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2be:	691a      	ldr	r2, [r3, #16]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2c8:	69b9      	ldr	r1, [r7, #24]
 800c2ca:	0148      	lsls	r0, r1, #5
 800c2cc:	69f9      	ldr	r1, [r7, #28]
 800c2ce:	4401      	add	r1, r0
 800c2d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	69ba      	ldr	r2, [r7, #24]
 800c2e8:	0151      	lsls	r1, r2, #5
 800c2ea:	69fa      	ldr	r2, [r7, #28]
 800c2ec:	440a      	add	r2, r1
 800c2ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c2f6:	6113      	str	r3, [r2, #16]
 800c2f8:	e037      	b.n	800c36a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	691a      	ldr	r2, [r3, #16]
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	4413      	add	r3, r2
 800c304:	1e5a      	subs	r2, r3, #1
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c30e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	8afa      	ldrh	r2, [r7, #22]
 800c316:	fb03 f202 	mul.w	r2, r3, r2
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	015a      	lsls	r2, r3, #5
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	4413      	add	r3, r2
 800c326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c32a:	691a      	ldr	r2, [r3, #16]
 800c32c:	8afb      	ldrh	r3, [r7, #22]
 800c32e:	04d9      	lsls	r1, r3, #19
 800c330:	4b39      	ldr	r3, [pc, #228]	@ (800c418 <USB_EPStartXfer+0x53c>)
 800c332:	400b      	ands	r3, r1
 800c334:	69b9      	ldr	r1, [r7, #24]
 800c336:	0148      	lsls	r0, r1, #5
 800c338:	69f9      	ldr	r1, [r7, #28]
 800c33a:	4401      	add	r1, r0
 800c33c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c340:	4313      	orrs	r3, r2
 800c342:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	015a      	lsls	r2, r3, #5
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	4413      	add	r3, r2
 800c34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c350:	691a      	ldr	r2, [r3, #16]
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c35a:	69b9      	ldr	r1, [r7, #24]
 800c35c:	0148      	lsls	r0, r1, #5
 800c35e:	69f9      	ldr	r1, [r7, #28]
 800c360:	4401      	add	r1, r0
 800c362:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c366:	4313      	orrs	r3, r2
 800c368:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c36a:	79fb      	ldrb	r3, [r7, #7]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d10d      	bne.n	800c38c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d009      	beq.n	800c38c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	68d9      	ldr	r1, [r3, #12]
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c388:	460a      	mov	r2, r1
 800c38a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	791b      	ldrb	r3, [r3, #4]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d128      	bne.n	800c3e6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d110      	bne.n	800c3c6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	69ba      	ldr	r2, [r7, #24]
 800c3b4:	0151      	lsls	r1, r2, #5
 800c3b6:	69fa      	ldr	r2, [r7, #28]
 800c3b8:	440a      	add	r2, r1
 800c3ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	e00f      	b.n	800c3e6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	015a      	lsls	r2, r3, #5
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	69ba      	ldr	r2, [r7, #24]
 800c3d6:	0151      	lsls	r1, r2, #5
 800c3d8:	69fa      	ldr	r2, [r7, #28]
 800c3da:	440a      	add	r2, r1
 800c3dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3e4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	69ba      	ldr	r2, [r7, #24]
 800c3f6:	0151      	lsls	r1, r2, #5
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	440a      	add	r2, r1
 800c3fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c400:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c404:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3720      	adds	r7, #32
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	fff80000 	.word	0xfff80000
 800c414:	e007ffff 	.word	0xe007ffff
 800c418:	1ff80000 	.word	0x1ff80000

0800c41c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b087      	sub	sp, #28
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c426:	2300      	movs	r3, #0
 800c428:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	785b      	ldrb	r3, [r3, #1]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d14a      	bne.n	800c4d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	015a      	lsls	r2, r3, #5
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	4413      	add	r3, r2
 800c444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c44e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c452:	f040 8086 	bne.w	800c562 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	015a      	lsls	r2, r3, #5
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	4413      	add	r3, r2
 800c460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	7812      	ldrb	r2, [r2, #0]
 800c46a:	0151      	lsls	r1, r2, #5
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	440a      	add	r2, r1
 800c470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c474:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c478:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	015a      	lsls	r2, r3, #5
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	4413      	add	r3, r2
 800c484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	7812      	ldrb	r2, [r2, #0]
 800c48e:	0151      	lsls	r1, r2, #5
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	440a      	add	r2, r1
 800c494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c498:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c49c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d902      	bls.n	800c4b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	75fb      	strb	r3, [r7, #23]
          break;
 800c4b2:	e056      	b.n	800c562 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	015a      	lsls	r2, r3, #5
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	4413      	add	r3, r2
 800c4be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4cc:	d0e7      	beq.n	800c49e <USB_EPStopXfer+0x82>
 800c4ce:	e048      	b.n	800c562 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	4413      	add	r3, r2
 800c4da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4e8:	d13b      	bne.n	800c562 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	7812      	ldrb	r2, [r2, #0]
 800c4fe:	0151      	lsls	r1, r2, #5
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	440a      	add	r2, r1
 800c504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c508:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c50c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	015a      	lsls	r2, r3, #5
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	4413      	add	r3, r2
 800c518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	7812      	ldrb	r2, [r2, #0]
 800c522:	0151      	lsls	r1, r2, #5
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	440a      	add	r2, r1
 800c528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c52c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c530:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	3301      	adds	r3, #1
 800c536:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c53e:	4293      	cmp	r3, r2
 800c540:	d902      	bls.n	800c548 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	75fb      	strb	r3, [r7, #23]
          break;
 800c546:	e00c      	b.n	800c562 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	015a      	lsls	r2, r3, #5
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	4413      	add	r3, r2
 800c552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c55c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c560:	d0e7      	beq.n	800c532 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c562:	7dfb      	ldrb	r3, [r7, #23]
}
 800c564:	4618      	mov	r0, r3
 800c566:	371c      	adds	r7, #28
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c570:	b480      	push	{r7}
 800c572:	b089      	sub	sp, #36	@ 0x24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4611      	mov	r1, r2
 800c57c:	461a      	mov	r2, r3
 800c57e:	460b      	mov	r3, r1
 800c580:	71fb      	strb	r3, [r7, #7]
 800c582:	4613      	mov	r3, r2
 800c584:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c58e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c592:	2b00      	cmp	r3, #0
 800c594:	d123      	bne.n	800c5de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c596:	88bb      	ldrh	r3, [r7, #4]
 800c598:	3303      	adds	r3, #3
 800c59a:	089b      	lsrs	r3, r3, #2
 800c59c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61bb      	str	r3, [r7, #24]
 800c5a2:	e018      	b.n	800c5d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c5a4:	79fb      	ldrb	r3, [r7, #7]
 800c5a6:	031a      	lsls	r2, r3, #12
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	61bb      	str	r3, [r7, #24]
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d3e2      	bcc.n	800c5a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3724      	adds	r7, #36	@ 0x24
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b08b      	sub	sp, #44	@ 0x2c
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c602:	88fb      	ldrh	r3, [r7, #6]
 800c604:	089b      	lsrs	r3, r3, #2
 800c606:	b29b      	uxth	r3, r3
 800c608:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c60a:	88fb      	ldrh	r3, [r7, #6]
 800c60c:	f003 0303 	and.w	r3, r3, #3
 800c610:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c612:	2300      	movs	r3, #0
 800c614:	623b      	str	r3, [r7, #32]
 800c616:	e014      	b.n	800c642 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c622:	601a      	str	r2, [r3, #0]
    pDest++;
 800c624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c626:	3301      	adds	r3, #1
 800c628:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62c:	3301      	adds	r3, #1
 800c62e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c632:	3301      	adds	r3, #1
 800c634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c638:	3301      	adds	r3, #1
 800c63a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	3301      	adds	r3, #1
 800c640:	623b      	str	r3, [r7, #32]
 800c642:	6a3a      	ldr	r2, [r7, #32]
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	429a      	cmp	r2, r3
 800c648:	d3e6      	bcc.n	800c618 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c64a:	8bfb      	ldrh	r3, [r7, #30]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d01e      	beq.n	800c68e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c650:	2300      	movs	r3, #0
 800c652:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c65a:	461a      	mov	r2, r3
 800c65c:	f107 0310 	add.w	r3, r7, #16
 800c660:	6812      	ldr	r2, [r2, #0]
 800c662:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	00db      	lsls	r3, r3, #3
 800c66c:	fa22 f303 	lsr.w	r3, r2, r3
 800c670:	b2da      	uxtb	r2, r3
 800c672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c674:	701a      	strb	r2, [r3, #0]
      i++;
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	3301      	adds	r3, #1
 800c67a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67e:	3301      	adds	r3, #1
 800c680:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c682:	8bfb      	ldrh	r3, [r7, #30]
 800c684:	3b01      	subs	r3, #1
 800c686:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c688:	8bfb      	ldrh	r3, [r7, #30]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1ea      	bne.n	800c664 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c690:	4618      	mov	r0, r3
 800c692:	372c      	adds	r7, #44	@ 0x2c
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	785b      	ldrb	r3, [r3, #1]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d12c      	bne.n	800c712 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	015a      	lsls	r2, r3, #5
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	4413      	add	r3, r2
 800c6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	db12      	blt.n	800c6f0 <USB_EPSetStall+0x54>
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00f      	beq.n	800c6f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	0151      	lsls	r1, r2, #5
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	440a      	add	r2, r1
 800c6e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c6ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	015a      	lsls	r2, r3, #5
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	0151      	lsls	r1, r2, #5
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	440a      	add	r2, r1
 800c706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c70a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	e02b      	b.n	800c76a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	015a      	lsls	r2, r3, #5
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	4413      	add	r3, r2
 800c71a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	db12      	blt.n	800c74a <USB_EPSetStall+0xae>
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00f      	beq.n	800c74a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	015a      	lsls	r2, r3, #5
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	4413      	add	r3, r2
 800c732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	0151      	lsls	r1, r2, #5
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	440a      	add	r2, r1
 800c740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c744:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c748:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	015a      	lsls	r2, r3, #5
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	4413      	add	r3, r2
 800c752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	0151      	lsls	r1, r2, #5
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	440a      	add	r2, r1
 800c760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c768:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	785b      	ldrb	r3, [r3, #1]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d128      	bne.n	800c7e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	0151      	lsls	r1, r2, #5
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	440a      	add	r2, r1
 800c7aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c7b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	791b      	ldrb	r3, [r3, #4]
 800c7b8:	2b03      	cmp	r3, #3
 800c7ba:	d003      	beq.n	800c7c4 <USB_EPClearStall+0x4c>
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	791b      	ldrb	r3, [r3, #4]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d138      	bne.n	800c836 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	68ba      	ldr	r2, [r7, #8]
 800c7d4:	0151      	lsls	r1, r2, #5
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	440a      	add	r2, r1
 800c7da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	e027      	b.n	800c836 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	015a      	lsls	r2, r3, #5
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	0151      	lsls	r1, r2, #5
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	440a      	add	r2, r1
 800c7fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c800:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c804:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	791b      	ldrb	r3, [r3, #4]
 800c80a:	2b03      	cmp	r3, #3
 800c80c:	d003      	beq.n	800c816 <USB_EPClearStall+0x9e>
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	791b      	ldrb	r3, [r3, #4]
 800c812:	2b02      	cmp	r3, #2
 800c814:	d10f      	bne.n	800c836 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	015a      	lsls	r2, r3, #5
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	4413      	add	r3, r2
 800c81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	0151      	lsls	r1, r2, #5
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	440a      	add	r2, r1
 800c82c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c834:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	460b      	mov	r3, r1
 800c84e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c862:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c866:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	011b      	lsls	r3, r3, #4
 800c874:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c878:	68f9      	ldr	r1, [r7, #12]
 800c87a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c87e:	4313      	orrs	r3, r2
 800c880:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c882:	2300      	movs	r3, #0
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c8aa:	f023 0303 	bic.w	r3, r3, #3
 800c8ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c8be:	f023 0302 	bic.w	r3, r3, #2
 800c8c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b085      	sub	sp, #20
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c8ec:	f023 0303 	bic.w	r3, r3, #3
 800c8f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c900:	f043 0302 	orr.w	r3, r3, #2
 800c904:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	695b      	ldr	r3, [r3, #20]
 800c920:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	699b      	ldr	r3, [r3, #24]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	4013      	ands	r3, r2
 800c92a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c92c:	68fb      	ldr	r3, [r7, #12]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b085      	sub	sp, #20
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c94c:	699b      	ldr	r3, [r3, #24]
 800c94e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c956:	69db      	ldr	r3, [r3, #28]
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	4013      	ands	r3, r2
 800c95c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	0c1b      	lsrs	r3, r3, #16
}
 800c962:	4618      	mov	r0, r3
 800c964:	3714      	adds	r7, #20
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c96e:	b480      	push	{r7}
 800c970:	b085      	sub	sp, #20
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c98a:	69db      	ldr	r3, [r3, #28]
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	4013      	ands	r3, r2
 800c990:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	b29b      	uxth	r3, r3
}
 800c996:	4618      	mov	r0, r3
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	b085      	sub	sp, #20
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c9b2:	78fb      	ldrb	r3, [r7, #3]
 800c9b4:	015a      	lsls	r2, r3, #5
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9c8:	695b      	ldr	r3, [r3, #20]
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3714      	adds	r7, #20
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b087      	sub	sp, #28
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ca02:	78fb      	ldrb	r3, [r7, #3]
 800ca04:	f003 030f 	and.w	r3, r3, #15
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca0e:	01db      	lsls	r3, r3, #7
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	693a      	ldr	r2, [r7, #16]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ca18:	78fb      	ldrb	r3, [r7, #3]
 800ca1a:	015a      	lsls	r2, r3, #5
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	4413      	add	r3, r2
 800ca20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	693a      	ldr	r2, [r7, #16]
 800ca28:	4013      	ands	r3, r2
 800ca2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	371c      	adds	r7, #28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	b083      	sub	sp, #12
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	695b      	ldr	r3, [r3, #20]
 800ca46:	f003 0301 	and.w	r3, r3, #1
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
	...

0800ca58 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca72:	4619      	mov	r1, r3
 800ca74:	4b09      	ldr	r3, [pc, #36]	@ (800ca9c <USB_ActivateSetup+0x44>)
 800ca76:	4013      	ands	r3, r2
 800ca78:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	fffff800 	.word	0xfffff800

0800caa0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	460b      	mov	r3, r1
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	333c      	adds	r3, #60	@ 0x3c
 800cab6:	3304      	adds	r3, #4
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	4a26      	ldr	r2, [pc, #152]	@ (800cb58 <USB_EP0_OutStart+0xb8>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d90a      	bls.n	800cada <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cad0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cad4:	d101      	bne.n	800cada <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	e037      	b.n	800cb4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cae0:	461a      	mov	r2, r3
 800cae2:	2300      	movs	r3, #0
 800cae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800caf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800caf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cb08:	f043 0318 	orr.w	r3, r3, #24
 800cb0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	697a      	ldr	r2, [r7, #20]
 800cb18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cb1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cb20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cb22:	7afb      	ldrb	r3, [r7, #11]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d10f      	bne.n	800cb48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb2e:	461a      	mov	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	697a      	ldr	r2, [r7, #20]
 800cb3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cb42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cb46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	371c      	adds	r7, #28
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	4f54300a 	.word	0x4f54300a

0800cb5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb64:	2300      	movs	r3, #0
 800cb66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	4a13      	ldr	r2, [pc, #76]	@ (800cbc0 <USB_CoreReset+0x64>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d901      	bls.n	800cb7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb76:	2303      	movs	r3, #3
 800cb78:	e01b      	b.n	800cbb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	daf2      	bge.n	800cb68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb82:	2300      	movs	r3, #0
 800cb84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	f043 0201 	orr.w	r2, r3, #1
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3301      	adds	r3, #1
 800cb96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	4a09      	ldr	r2, [pc, #36]	@ (800cbc0 <USB_CoreReset+0x64>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d901      	bls.n	800cba4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e006      	b.n	800cbb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	f003 0301 	and.w	r3, r3, #1
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d0f0      	beq.n	800cb92 <USB_CoreReset+0x36>

  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	00030d40 	.word	0x00030d40

0800cbc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cbd0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cbd4:	f003 f8ca 	bl	800fd6c <USBD_static_malloc>
 800cbd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d109      	bne.n	800cbf4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	32b0      	adds	r2, #176	@ 0xb0
 800cbea:	2100      	movs	r1, #0
 800cbec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cbf0:	2302      	movs	r3, #2
 800cbf2:	e0d4      	b.n	800cd9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cbf4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f003 fa60 	bl	80100c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	32b0      	adds	r2, #176	@ 0xb0
 800cc0a:	68f9      	ldr	r1, [r7, #12]
 800cc0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	32b0      	adds	r2, #176	@ 0xb0
 800cc1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	7c1b      	ldrb	r3, [r3, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d138      	bne.n	800cc9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cc2c:	4b5e      	ldr	r3, [pc, #376]	@ (800cda8 <USBD_CDC_Init+0x1e4>)
 800cc2e:	7819      	ldrb	r1, [r3, #0]
 800cc30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc34:	2202      	movs	r2, #2
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f002 ff75 	bl	800fb26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cc3c:	4b5a      	ldr	r3, [pc, #360]	@ (800cda8 <USBD_CDC_Init+0x1e4>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	f003 020f 	and.w	r2, r3, #15
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	4613      	mov	r3, r2
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	440b      	add	r3, r1
 800cc50:	3324      	adds	r3, #36	@ 0x24
 800cc52:	2201      	movs	r2, #1
 800cc54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cc56:	4b55      	ldr	r3, [pc, #340]	@ (800cdac <USBD_CDC_Init+0x1e8>)
 800cc58:	7819      	ldrb	r1, [r3, #0]
 800cc5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc5e:	2202      	movs	r2, #2
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f002 ff60 	bl	800fb26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cc66:	4b51      	ldr	r3, [pc, #324]	@ (800cdac <USBD_CDC_Init+0x1e8>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	f003 020f 	and.w	r2, r3, #15
 800cc6e:	6879      	ldr	r1, [r7, #4]
 800cc70:	4613      	mov	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	4413      	add	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	440b      	add	r3, r1
 800cc7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc7e:	2201      	movs	r2, #1
 800cc80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cc82:	4b4b      	ldr	r3, [pc, #300]	@ (800cdb0 <USBD_CDC_Init+0x1ec>)
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	f003 020f 	and.w	r2, r3, #15
 800cc8a:	6879      	ldr	r1, [r7, #4]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4413      	add	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	440b      	add	r3, r1
 800cc96:	3326      	adds	r3, #38	@ 0x26
 800cc98:	2210      	movs	r2, #16
 800cc9a:	801a      	strh	r2, [r3, #0]
 800cc9c:	e035      	b.n	800cd0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cc9e:	4b42      	ldr	r3, [pc, #264]	@ (800cda8 <USBD_CDC_Init+0x1e4>)
 800cca0:	7819      	ldrb	r1, [r3, #0]
 800cca2:	2340      	movs	r3, #64	@ 0x40
 800cca4:	2202      	movs	r2, #2
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f002 ff3d 	bl	800fb26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ccac:	4b3e      	ldr	r3, [pc, #248]	@ (800cda8 <USBD_CDC_Init+0x1e4>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	f003 020f 	and.w	r2, r3, #15
 800ccb4:	6879      	ldr	r1, [r7, #4]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	440b      	add	r3, r1
 800ccc0:	3324      	adds	r3, #36	@ 0x24
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ccc6:	4b39      	ldr	r3, [pc, #228]	@ (800cdac <USBD_CDC_Init+0x1e8>)
 800ccc8:	7819      	ldrb	r1, [r3, #0]
 800ccca:	2340      	movs	r3, #64	@ 0x40
 800cccc:	2202      	movs	r2, #2
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f002 ff29 	bl	800fb26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ccd4:	4b35      	ldr	r3, [pc, #212]	@ (800cdac <USBD_CDC_Init+0x1e8>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	f003 020f 	and.w	r2, r3, #15
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	440b      	add	r3, r1
 800cce8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ccec:	2201      	movs	r2, #1
 800ccee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ccf0:	4b2f      	ldr	r3, [pc, #188]	@ (800cdb0 <USBD_CDC_Init+0x1ec>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	f003 020f 	and.w	r2, r3, #15
 800ccf8:	6879      	ldr	r1, [r7, #4]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4413      	add	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	440b      	add	r3, r1
 800cd04:	3326      	adds	r3, #38	@ 0x26
 800cd06:	2210      	movs	r2, #16
 800cd08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cd0a:	4b29      	ldr	r3, [pc, #164]	@ (800cdb0 <USBD_CDC_Init+0x1ec>)
 800cd0c:	7819      	ldrb	r1, [r3, #0]
 800cd0e:	2308      	movs	r3, #8
 800cd10:	2203      	movs	r2, #3
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f002 ff07 	bl	800fb26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cd18:	4b25      	ldr	r3, [pc, #148]	@ (800cdb0 <USBD_CDC_Init+0x1ec>)
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	f003 020f 	and.w	r2, r3, #15
 800cd20:	6879      	ldr	r1, [r7, #4]
 800cd22:	4613      	mov	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4413      	add	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	440b      	add	r3, r1
 800cd2c:	3324      	adds	r3, #36	@ 0x24
 800cd2e:	2201      	movs	r2, #1
 800cd30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	33b0      	adds	r3, #176	@ 0xb0
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	4413      	add	r3, r2
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cd68:	2302      	movs	r3, #2
 800cd6a:	e018      	b.n	800cd9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7c1b      	ldrb	r3, [r3, #16]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd74:	4b0d      	ldr	r3, [pc, #52]	@ (800cdac <USBD_CDC_Init+0x1e8>)
 800cd76:	7819      	ldrb	r1, [r3, #0]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f002 ffbe 	bl	800fd04 <USBD_LL_PrepareReceive>
 800cd88:	e008      	b.n	800cd9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd8a:	4b08      	ldr	r3, [pc, #32]	@ (800cdac <USBD_CDC_Init+0x1e8>)
 800cd8c:	7819      	ldrb	r1, [r3, #0]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd94:	2340      	movs	r3, #64	@ 0x40
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f002 ffb4 	bl	800fd04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	24000097 	.word	0x24000097
 800cdac:	24000098 	.word	0x24000098
 800cdb0:	24000099 	.word	0x24000099

0800cdb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cdc0:	4b3a      	ldr	r3, [pc, #232]	@ (800ceac <USBD_CDC_DeInit+0xf8>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f002 fed3 	bl	800fb72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cdcc:	4b37      	ldr	r3, [pc, #220]	@ (800ceac <USBD_CDC_DeInit+0xf8>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	f003 020f 	and.w	r2, r3, #15
 800cdd4:	6879      	ldr	r1, [r7, #4]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	440b      	add	r3, r1
 800cde0:	3324      	adds	r3, #36	@ 0x24
 800cde2:	2200      	movs	r2, #0
 800cde4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cde6:	4b32      	ldr	r3, [pc, #200]	@ (800ceb0 <USBD_CDC_DeInit+0xfc>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f002 fec0 	bl	800fb72 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cdf2:	4b2f      	ldr	r3, [pc, #188]	@ (800ceb0 <USBD_CDC_DeInit+0xfc>)
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	f003 020f 	and.w	r2, r3, #15
 800cdfa:	6879      	ldr	r1, [r7, #4]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	440b      	add	r3, r1
 800ce06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ce0e:	4b29      	ldr	r3, [pc, #164]	@ (800ceb4 <USBD_CDC_DeInit+0x100>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	4619      	mov	r1, r3
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f002 feac 	bl	800fb72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ce1a:	4b26      	ldr	r3, [pc, #152]	@ (800ceb4 <USBD_CDC_DeInit+0x100>)
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	f003 020f 	and.w	r2, r3, #15
 800ce22:	6879      	ldr	r1, [r7, #4]
 800ce24:	4613      	mov	r3, r2
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	4413      	add	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	440b      	add	r3, r1
 800ce2e:	3324      	adds	r3, #36	@ 0x24
 800ce30:	2200      	movs	r2, #0
 800ce32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ce34:	4b1f      	ldr	r3, [pc, #124]	@ (800ceb4 <USBD_CDC_DeInit+0x100>)
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	f003 020f 	and.w	r2, r3, #15
 800ce3c:	6879      	ldr	r1, [r7, #4]
 800ce3e:	4613      	mov	r3, r2
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4413      	add	r3, r2
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	440b      	add	r3, r1
 800ce48:	3326      	adds	r3, #38	@ 0x26
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	32b0      	adds	r2, #176	@ 0xb0
 800ce58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d01f      	beq.n	800cea0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	33b0      	adds	r3, #176	@ 0xb0
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	32b0      	adds	r2, #176	@ 0xb0
 800ce7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f002 ff80 	bl	800fd88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	32b0      	adds	r2, #176	@ 0xb0
 800ce92:	2100      	movs	r1, #0
 800ce94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	24000097 	.word	0x24000097
 800ceb0:	24000098 	.word	0x24000098
 800ceb4:	24000099 	.word	0x24000099

0800ceb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b086      	sub	sp, #24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	32b0      	adds	r2, #176	@ 0xb0
 800cecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ced2:	2300      	movs	r3, #0
 800ced4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ced6:	2300      	movs	r3, #0
 800ced8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d101      	bne.n	800cee8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cee4:	2303      	movs	r3, #3
 800cee6:	e0bf      	b.n	800d068 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d050      	beq.n	800cf96 <USBD_CDC_Setup+0xde>
 800cef4:	2b20      	cmp	r3, #32
 800cef6:	f040 80af 	bne.w	800d058 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	88db      	ldrh	r3, [r3, #6]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d03a      	beq.n	800cf78 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	b25b      	sxtb	r3, r3
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	da1b      	bge.n	800cf44 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	33b0      	adds	r3, #176	@ 0xb0
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	683a      	ldr	r2, [r7, #0]
 800cf20:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cf22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cf24:	683a      	ldr	r2, [r7, #0]
 800cf26:	88d2      	ldrh	r2, [r2, #6]
 800cf28:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	88db      	ldrh	r3, [r3, #6]
 800cf2e:	2b07      	cmp	r3, #7
 800cf30:	bf28      	it	cs
 800cf32:	2307      	movcs	r3, #7
 800cf34:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	89fa      	ldrh	r2, [r7, #14]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f001 fdb1 	bl	800eaa4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cf42:	e090      	b.n	800d066 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	785a      	ldrb	r2, [r3, #1]
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	88db      	ldrh	r3, [r3, #6]
 800cf52:	2b3f      	cmp	r3, #63	@ 0x3f
 800cf54:	d803      	bhi.n	800cf5e <USBD_CDC_Setup+0xa6>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	88db      	ldrh	r3, [r3, #6]
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	e000      	b.n	800cf60 <USBD_CDC_Setup+0xa8>
 800cf5e:	2240      	movs	r2, #64	@ 0x40
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cf66:	6939      	ldr	r1, [r7, #16]
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800cf6e:	461a      	mov	r2, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f001 fdc3 	bl	800eafc <USBD_CtlPrepareRx>
      break;
 800cf76:	e076      	b.n	800d066 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	33b0      	adds	r3, #176	@ 0xb0
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	4413      	add	r3, r2
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	7850      	ldrb	r0, [r2, #1]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	4798      	blx	r3
      break;
 800cf94:	e067      	b.n	800d066 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	785b      	ldrb	r3, [r3, #1]
 800cf9a:	2b0b      	cmp	r3, #11
 800cf9c:	d851      	bhi.n	800d042 <USBD_CDC_Setup+0x18a>
 800cf9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cfa4 <USBD_CDC_Setup+0xec>)
 800cfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa4:	0800cfd5 	.word	0x0800cfd5
 800cfa8:	0800d051 	.word	0x0800d051
 800cfac:	0800d043 	.word	0x0800d043
 800cfb0:	0800d043 	.word	0x0800d043
 800cfb4:	0800d043 	.word	0x0800d043
 800cfb8:	0800d043 	.word	0x0800d043
 800cfbc:	0800d043 	.word	0x0800d043
 800cfc0:	0800d043 	.word	0x0800d043
 800cfc4:	0800d043 	.word	0x0800d043
 800cfc8:	0800d043 	.word	0x0800d043
 800cfcc:	0800cfff 	.word	0x0800cfff
 800cfd0:	0800d029 	.word	0x0800d029
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b03      	cmp	r3, #3
 800cfde:	d107      	bne.n	800cff0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cfe0:	f107 030a 	add.w	r3, r7, #10
 800cfe4:	2202      	movs	r2, #2
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f001 fd5b 	bl	800eaa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cfee:	e032      	b.n	800d056 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f001 fce5 	bl	800e9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cff8:	2303      	movs	r3, #3
 800cffa:	75fb      	strb	r3, [r7, #23]
          break;
 800cffc:	e02b      	b.n	800d056 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b03      	cmp	r3, #3
 800d008:	d107      	bne.n	800d01a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d00a:	f107 030d 	add.w	r3, r7, #13
 800d00e:	2201      	movs	r2, #1
 800d010:	4619      	mov	r1, r3
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f001 fd46 	bl	800eaa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d018:	e01d      	b.n	800d056 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d01a:	6839      	ldr	r1, [r7, #0]
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f001 fcd0 	bl	800e9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d022:	2303      	movs	r3, #3
 800d024:	75fb      	strb	r3, [r7, #23]
          break;
 800d026:	e016      	b.n	800d056 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	2b03      	cmp	r3, #3
 800d032:	d00f      	beq.n	800d054 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d034:	6839      	ldr	r1, [r7, #0]
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f001 fcc3 	bl	800e9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d03c:	2303      	movs	r3, #3
 800d03e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d040:	e008      	b.n	800d054 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d042:	6839      	ldr	r1, [r7, #0]
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f001 fcbc 	bl	800e9c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800d04a:	2303      	movs	r3, #3
 800d04c:	75fb      	strb	r3, [r7, #23]
          break;
 800d04e:	e002      	b.n	800d056 <USBD_CDC_Setup+0x19e>
          break;
 800d050:	bf00      	nop
 800d052:	e008      	b.n	800d066 <USBD_CDC_Setup+0x1ae>
          break;
 800d054:	bf00      	nop
      }
      break;
 800d056:	e006      	b.n	800d066 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f001 fcb1 	bl	800e9c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800d060:	2303      	movs	r3, #3
 800d062:	75fb      	strb	r3, [r7, #23]
      break;
 800d064:	bf00      	nop
  }

  return (uint8_t)ret;
 800d066:	7dfb      	ldrb	r3, [r7, #23]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	460b      	mov	r3, r1
 800d07a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d082:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	32b0      	adds	r2, #176	@ 0xb0
 800d08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d101      	bne.n	800d09a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d096:	2303      	movs	r3, #3
 800d098:	e065      	b.n	800d166 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	32b0      	adds	r2, #176	@ 0xb0
 800d0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d0aa:	78fb      	ldrb	r3, [r7, #3]
 800d0ac:	f003 020f 	and.w	r2, r3, #15
 800d0b0:	6879      	ldr	r1, [r7, #4]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3318      	adds	r3, #24
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d02f      	beq.n	800d124 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d0c4:	78fb      	ldrb	r3, [r7, #3]
 800d0c6:	f003 020f 	and.w	r2, r3, #15
 800d0ca:	6879      	ldr	r1, [r7, #4]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	440b      	add	r3, r1
 800d0d6:	3318      	adds	r3, #24
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	78fb      	ldrb	r3, [r7, #3]
 800d0dc:	f003 010f 	and.w	r1, r3, #15
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	00db      	lsls	r3, r3, #3
 800d0e6:	440b      	add	r3, r1
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4403      	add	r3, r0
 800d0ec:	3344      	adds	r3, #68	@ 0x44
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d0f4:	fb01 f303 	mul.w	r3, r1, r3
 800d0f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d112      	bne.n	800d124 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d0fe:	78fb      	ldrb	r3, [r7, #3]
 800d100:	f003 020f 	and.w	r2, r3, #15
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	4613      	mov	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	440b      	add	r3, r1
 800d110:	3318      	adds	r3, #24
 800d112:	2200      	movs	r2, #0
 800d114:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d116:	78f9      	ldrb	r1, [r7, #3]
 800d118:	2300      	movs	r3, #0
 800d11a:	2200      	movs	r2, #0
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f002 fdd0 	bl	800fcc2 <USBD_LL_Transmit>
 800d122:	e01f      	b.n	800d164 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2200      	movs	r2, #0
 800d128:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	33b0      	adds	r3, #176	@ 0xb0
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d010      	beq.n	800d164 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	33b0      	adds	r3, #176	@ 0xb0
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4413      	add	r3, r2
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	68ba      	ldr	r2, [r7, #8]
 800d156:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d160:	78fa      	ldrb	r2, [r7, #3]
 800d162:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	460b      	mov	r3, r1
 800d178:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	32b0      	adds	r2, #176	@ 0xb0
 800d184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d188:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	32b0      	adds	r2, #176	@ 0xb0
 800d194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d101      	bne.n	800d1a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e01a      	b.n	800d1d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f002 fdce 	bl	800fd46 <USBD_LL_GetRxDataSize>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	33b0      	adds	r3, #176	@ 0xb0
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4413      	add	r3, r2
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	32b0      	adds	r2, #176	@ 0xb0
 800d1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d101      	bne.n	800d200 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e024      	b.n	800d24a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	33b0      	adds	r3, #176	@ 0xb0
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d019      	beq.n	800d248 <USBD_CDC_EP0_RxReady+0x6a>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d21a:	2bff      	cmp	r3, #255	@ 0xff
 800d21c:	d014      	beq.n	800d248 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	33b0      	adds	r3, #176	@ 0xb0
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4413      	add	r3, r2
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d236:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d23e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	22ff      	movs	r2, #255	@ 0xff
 800d244:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
	...

0800d254 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d25c:	2182      	movs	r1, #130	@ 0x82
 800d25e:	4818      	ldr	r0, [pc, #96]	@ (800d2c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d260:	f000 fd4f 	bl	800dd02 <USBD_GetEpDesc>
 800d264:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d266:	2101      	movs	r1, #1
 800d268:	4815      	ldr	r0, [pc, #84]	@ (800d2c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d26a:	f000 fd4a 	bl	800dd02 <USBD_GetEpDesc>
 800d26e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d270:	2181      	movs	r1, #129	@ 0x81
 800d272:	4813      	ldr	r0, [pc, #76]	@ (800d2c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d274:	f000 fd45 	bl	800dd02 <USBD_GetEpDesc>
 800d278:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d002      	beq.n	800d286 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	2210      	movs	r2, #16
 800d284:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d006      	beq.n	800d29a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	2200      	movs	r2, #0
 800d290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d294:	711a      	strb	r2, [r3, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d006      	beq.n	800d2ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2a8:	711a      	strb	r2, [r3, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2243      	movs	r2, #67	@ 0x43
 800d2b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d2b4:	4b02      	ldr	r3, [pc, #8]	@ (800d2c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3718      	adds	r7, #24
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	24000054 	.word	0x24000054

0800d2c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d2cc:	2182      	movs	r1, #130	@ 0x82
 800d2ce:	4818      	ldr	r0, [pc, #96]	@ (800d330 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d2d0:	f000 fd17 	bl	800dd02 <USBD_GetEpDesc>
 800d2d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d2d6:	2101      	movs	r1, #1
 800d2d8:	4815      	ldr	r0, [pc, #84]	@ (800d330 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d2da:	f000 fd12 	bl	800dd02 <USBD_GetEpDesc>
 800d2de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d2e0:	2181      	movs	r1, #129	@ 0x81
 800d2e2:	4813      	ldr	r0, [pc, #76]	@ (800d330 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d2e4:	f000 fd0d 	bl	800dd02 <USBD_GetEpDesc>
 800d2e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	2210      	movs	r2, #16
 800d2f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d006      	beq.n	800d30a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	2200      	movs	r2, #0
 800d300:	711a      	strb	r2, [r3, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f042 0202 	orr.w	r2, r2, #2
 800d308:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d006      	beq.n	800d31e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	711a      	strb	r2, [r3, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	f042 0202 	orr.w	r2, r2, #2
 800d31c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2243      	movs	r2, #67	@ 0x43
 800d322:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d324:	4b02      	ldr	r3, [pc, #8]	@ (800d330 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d326:	4618      	mov	r0, r3
 800d328:	3718      	adds	r7, #24
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	24000054 	.word	0x24000054

0800d334 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d33c:	2182      	movs	r1, #130	@ 0x82
 800d33e:	4818      	ldr	r0, [pc, #96]	@ (800d3a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d340:	f000 fcdf 	bl	800dd02 <USBD_GetEpDesc>
 800d344:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d346:	2101      	movs	r1, #1
 800d348:	4815      	ldr	r0, [pc, #84]	@ (800d3a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d34a:	f000 fcda 	bl	800dd02 <USBD_GetEpDesc>
 800d34e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d350:	2181      	movs	r1, #129	@ 0x81
 800d352:	4813      	ldr	r0, [pc, #76]	@ (800d3a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d354:	f000 fcd5 	bl	800dd02 <USBD_GetEpDesc>
 800d358:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	2210      	movs	r2, #16
 800d364:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d006      	beq.n	800d37a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	2200      	movs	r2, #0
 800d370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d374:	711a      	strb	r2, [r3, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d006      	beq.n	800d38e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2200      	movs	r2, #0
 800d384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d388:	711a      	strb	r2, [r3, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2243      	movs	r2, #67	@ 0x43
 800d392:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d394:	4b02      	ldr	r3, [pc, #8]	@ (800d3a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	24000054 	.word	0x24000054

0800d3a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	220a      	movs	r2, #10
 800d3b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d3b2:	4b03      	ldr	r3, [pc, #12]	@ (800d3c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	24000010 	.word	0x24000010

0800d3c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e009      	b.n	800d3ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	33b0      	adds	r3, #176	@ 0xb0
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	32b0      	adds	r2, #176	@ 0xb0
 800d40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d412:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d101      	bne.n	800d41e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d41a:	2303      	movs	r3, #3
 800d41c:	e008      	b.n	800d430 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	68ba      	ldr	r2, [r7, #8]
 800d422:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	371c      	adds	r7, #28
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	32b0      	adds	r2, #176	@ 0xb0
 800d450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d454:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d45c:	2303      	movs	r3, #3
 800d45e:	e004      	b.n	800d46a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	683a      	ldr	r2, [r7, #0]
 800d464:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3714      	adds	r7, #20
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
	...

0800d478 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	32b0      	adds	r2, #176	@ 0xb0
 800d48a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d48e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d490:	2301      	movs	r3, #1
 800d492:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d49a:	2303      	movs	r3, #3
 800d49c:	e025      	b.n	800d4ea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d11f      	bne.n	800d4e8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d4b0:	4b10      	ldr	r3, [pc, #64]	@ (800d4f4 <USBD_CDC_TransmitPacket+0x7c>)
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	f003 020f 	and.w	r2, r3, #15
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	4413      	add	r3, r2
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	4403      	add	r3, r0
 800d4ca:	3318      	adds	r3, #24
 800d4cc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d4ce:	4b09      	ldr	r3, [pc, #36]	@ (800d4f4 <USBD_CDC_TransmitPacket+0x7c>)
 800d4d0:	7819      	ldrb	r1, [r3, #0]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f002 fbef 	bl	800fcc2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	24000097 	.word	0x24000097

0800d4f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	32b0      	adds	r2, #176	@ 0xb0
 800d50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d50e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	32b0      	adds	r2, #176	@ 0xb0
 800d51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d522:	2303      	movs	r3, #3
 800d524:	e018      	b.n	800d558 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	7c1b      	ldrb	r3, [r3, #16]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d10a      	bne.n	800d544 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d52e:	4b0c      	ldr	r3, [pc, #48]	@ (800d560 <USBD_CDC_ReceivePacket+0x68>)
 800d530:	7819      	ldrb	r1, [r3, #0]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f002 fbe1 	bl	800fd04 <USBD_LL_PrepareReceive>
 800d542:	e008      	b.n	800d556 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d544:	4b06      	ldr	r3, [pc, #24]	@ (800d560 <USBD_CDC_ReceivePacket+0x68>)
 800d546:	7819      	ldrb	r1, [r3, #0]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d54e:	2340      	movs	r3, #64	@ 0x40
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f002 fbd7 	bl	800fd04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	24000098 	.word	0x24000098

0800d564 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	4613      	mov	r3, r2
 800d570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d101      	bne.n	800d57c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d578:	2303      	movs	r3, #3
 800d57a:	e01f      	b.n	800d5bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2200      	movs	r2, #0
 800d580:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2200      	movs	r2, #0
 800d588:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2200      	movs	r2, #0
 800d590:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	79fa      	ldrb	r2, [r7, #7]
 800d5ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f002 fa4d 	bl	800fa50 <USBD_LL_Init>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d5d8:	2303      	movs	r3, #3
 800d5da:	e025      	b.n	800d628 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	32ae      	adds	r2, #174	@ 0xae
 800d5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00f      	beq.n	800d618 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	32ae      	adds	r2, #174	@ 0xae
 800d602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d608:	f107 020e 	add.w	r2, r7, #14
 800d60c:	4610      	mov	r0, r2
 800d60e:	4798      	blx	r3
 800d610:	4602      	mov	r2, r0
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d61e:	1c5a      	adds	r2, r3, #1
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f002 fa59 	bl	800faf0 <USBD_LL_Start>
 800d63e:	4603      	mov	r3, r0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d650:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d652:	4618      	mov	r0, r3
 800d654:	370c      	adds	r7, #12
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b084      	sub	sp, #16
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
 800d666:	460b      	mov	r3, r1
 800d668:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d674:	2b00      	cmp	r3, #0
 800d676:	d009      	beq.n	800d68c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	78fa      	ldrb	r2, [r7, #3]
 800d682:	4611      	mov	r1, r2
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	4798      	blx	r3
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b084      	sub	sp, #16
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	460b      	mov	r3, r1
 800d6a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	78fa      	ldrb	r2, [r7, #3]
 800d6b0:	4611      	mov	r1, r2
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	4798      	blx	r3
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d001      	beq.n	800d6c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d6bc:	2303      	movs	r3, #3
 800d6be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b084      	sub	sp, #16
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
 800d6d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d6da:	6839      	ldr	r1, [r7, #0]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f001 f936 	bl	800e94e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d6fe:	f003 031f 	and.w	r3, r3, #31
 800d702:	2b02      	cmp	r3, #2
 800d704:	d01a      	beq.n	800d73c <USBD_LL_SetupStage+0x72>
 800d706:	2b02      	cmp	r3, #2
 800d708:	d822      	bhi.n	800d750 <USBD_LL_SetupStage+0x86>
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d002      	beq.n	800d714 <USBD_LL_SetupStage+0x4a>
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d00a      	beq.n	800d728 <USBD_LL_SetupStage+0x5e>
 800d712:	e01d      	b.n	800d750 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fb63 	bl	800dde8 <USBD_StdDevReq>
 800d722:	4603      	mov	r3, r0
 800d724:	73fb      	strb	r3, [r7, #15]
      break;
 800d726:	e020      	b.n	800d76a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d72e:	4619      	mov	r1, r3
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fbcb 	bl	800decc <USBD_StdItfReq>
 800d736:	4603      	mov	r3, r0
 800d738:	73fb      	strb	r3, [r7, #15]
      break;
 800d73a:	e016      	b.n	800d76a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d742:	4619      	mov	r1, r3
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fc2d 	bl	800dfa4 <USBD_StdEPReq>
 800d74a:	4603      	mov	r3, r0
 800d74c:	73fb      	strb	r3, [r7, #15]
      break;
 800d74e:	e00c      	b.n	800d76a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d756:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	4619      	mov	r1, r3
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f002 fa26 	bl	800fbb0 <USBD_LL_StallEP>
 800d764:	4603      	mov	r3, r0
 800d766:	73fb      	strb	r3, [r7, #15]
      break;
 800d768:	bf00      	nop
  }

  return ret;
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	460b      	mov	r3, r1
 800d77e:	607a      	str	r2, [r7, #4]
 800d780:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d782:	2300      	movs	r3, #0
 800d784:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d786:	7afb      	ldrb	r3, [r7, #11]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d16e      	bne.n	800d86a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d792:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d79a:	2b03      	cmp	r3, #3
 800d79c:	f040 8098 	bne.w	800d8d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	689a      	ldr	r2, [r3, #8]
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d913      	bls.n	800d7d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	689a      	ldr	r2, [r3, #8]
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	1ad2      	subs	r2, r2, r3
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	68da      	ldr	r2, [r3, #12]
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	bf28      	it	cs
 800d7c6:	4613      	movcs	r3, r2
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	6879      	ldr	r1, [r7, #4]
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f001 f9b2 	bl	800eb36 <USBD_CtlContinueRx>
 800d7d2:	e07d      	b.n	800d8d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d7da:	f003 031f 	and.w	r3, r3, #31
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d014      	beq.n	800d80c <USBD_LL_DataOutStage+0x98>
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d81d      	bhi.n	800d822 <USBD_LL_DataOutStage+0xae>
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d002      	beq.n	800d7f0 <USBD_LL_DataOutStage+0x7c>
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d003      	beq.n	800d7f6 <USBD_LL_DataOutStage+0x82>
 800d7ee:	e018      	b.n	800d822 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	75bb      	strb	r3, [r7, #22]
            break;
 800d7f4:	e018      	b.n	800d828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	4619      	mov	r1, r3
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 fa64 	bl	800dcce <USBD_CoreFindIF>
 800d806:	4603      	mov	r3, r0
 800d808:	75bb      	strb	r3, [r7, #22]
            break;
 800d80a:	e00d      	b.n	800d828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d812:	b2db      	uxtb	r3, r3
 800d814:	4619      	mov	r1, r3
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f000 fa66 	bl	800dce8 <USBD_CoreFindEP>
 800d81c:	4603      	mov	r3, r0
 800d81e:	75bb      	strb	r3, [r7, #22]
            break;
 800d820:	e002      	b.n	800d828 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d822:	2300      	movs	r3, #0
 800d824:	75bb      	strb	r3, [r7, #22]
            break;
 800d826:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d828:	7dbb      	ldrb	r3, [r7, #22]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d119      	bne.n	800d862 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d834:	b2db      	uxtb	r3, r3
 800d836:	2b03      	cmp	r3, #3
 800d838:	d113      	bne.n	800d862 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d83a:	7dba      	ldrb	r2, [r7, #22]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	32ae      	adds	r2, #174	@ 0xae
 800d840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00b      	beq.n	800d862 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d84a:	7dba      	ldrb	r2, [r7, #22]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d852:	7dba      	ldrb	r2, [r7, #22]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	32ae      	adds	r2, #174	@ 0xae
 800d858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f001 f978 	bl	800eb58 <USBD_CtlSendStatus>
 800d868:	e032      	b.n	800d8d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d86a:	7afb      	ldrb	r3, [r7, #11]
 800d86c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d870:	b2db      	uxtb	r3, r3
 800d872:	4619      	mov	r1, r3
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f000 fa37 	bl	800dce8 <USBD_CoreFindEP>
 800d87a:	4603      	mov	r3, r0
 800d87c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d87e:	7dbb      	ldrb	r3, [r7, #22]
 800d880:	2bff      	cmp	r3, #255	@ 0xff
 800d882:	d025      	beq.n	800d8d0 <USBD_LL_DataOutStage+0x15c>
 800d884:	7dbb      	ldrb	r3, [r7, #22]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d122      	bne.n	800d8d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d890:	b2db      	uxtb	r3, r3
 800d892:	2b03      	cmp	r3, #3
 800d894:	d117      	bne.n	800d8c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d896:	7dba      	ldrb	r2, [r7, #22]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	32ae      	adds	r2, #174	@ 0xae
 800d89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00f      	beq.n	800d8c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d8a6:	7dba      	ldrb	r2, [r7, #22]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d8ae:	7dba      	ldrb	r2, [r7, #22]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	32ae      	adds	r2, #174	@ 0xae
 800d8b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b8:	699b      	ldr	r3, [r3, #24]
 800d8ba:	7afa      	ldrb	r2, [r7, #11]
 800d8bc:	4611      	mov	r1, r2
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	4798      	blx	r3
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d001      	beq.n	800d8d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d8cc:	7dfb      	ldrb	r3, [r7, #23]
 800d8ce:	e000      	b.n	800d8d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3718      	adds	r7, #24
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b086      	sub	sp, #24
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	60f8      	str	r0, [r7, #12]
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	607a      	str	r2, [r7, #4]
 800d8e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d8e8:	7afb      	ldrb	r3, [r7, #11]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d16f      	bne.n	800d9ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3314      	adds	r3, #20
 800d8f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d15a      	bne.n	800d9b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	689a      	ldr	r2, [r3, #8]
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	429a      	cmp	r2, r3
 800d908:	d914      	bls.n	800d934 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	689a      	ldr	r2, [r3, #8]
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	1ad2      	subs	r2, r2, r3
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	461a      	mov	r2, r3
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f001 f8da 	bl	800eada <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d926:	2300      	movs	r3, #0
 800d928:	2200      	movs	r2, #0
 800d92a:	2100      	movs	r1, #0
 800d92c:	68f8      	ldr	r0, [r7, #12]
 800d92e:	f002 f9e9 	bl	800fd04 <USBD_LL_PrepareReceive>
 800d932:	e03f      	b.n	800d9b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	68da      	ldr	r2, [r3, #12]
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d11c      	bne.n	800d97a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	685a      	ldr	r2, [r3, #4]
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d948:	429a      	cmp	r2, r3
 800d94a:	d316      	bcc.n	800d97a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d956:	429a      	cmp	r2, r3
 800d958:	d20f      	bcs.n	800d97a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d95a:	2200      	movs	r2, #0
 800d95c:	2100      	movs	r1, #0
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f001 f8bb 	bl	800eada <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2200      	movs	r2, #0
 800d968:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d96c:	2300      	movs	r3, #0
 800d96e:	2200      	movs	r2, #0
 800d970:	2100      	movs	r1, #0
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f002 f9c6 	bl	800fd04 <USBD_LL_PrepareReceive>
 800d978:	e01c      	b.n	800d9b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b03      	cmp	r3, #3
 800d984:	d10f      	bne.n	800d9a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d009      	beq.n	800d9a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2200      	movs	r2, #0
 800d996:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9a6:	2180      	movs	r1, #128	@ 0x80
 800d9a8:	68f8      	ldr	r0, [r7, #12]
 800d9aa:	f002 f901 	bl	800fbb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f001 f8e5 	bl	800eb7e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d03a      	beq.n	800da34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f7ff fe42 	bl	800d648 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d9cc:	e032      	b.n	800da34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d9ce:	7afb      	ldrb	r3, [r7, #11]
 800d9d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 f985 	bl	800dce8 <USBD_CoreFindEP>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9e2:	7dfb      	ldrb	r3, [r7, #23]
 800d9e4:	2bff      	cmp	r3, #255	@ 0xff
 800d9e6:	d025      	beq.n	800da34 <USBD_LL_DataInStage+0x15a>
 800d9e8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d122      	bne.n	800da34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	2b03      	cmp	r3, #3
 800d9f8:	d11c      	bne.n	800da34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d9fa:	7dfa      	ldrb	r2, [r7, #23]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	32ae      	adds	r2, #174	@ 0xae
 800da00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da04:	695b      	ldr	r3, [r3, #20]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d014      	beq.n	800da34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800da0a:	7dfa      	ldrb	r2, [r7, #23]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800da12:	7dfa      	ldrb	r2, [r7, #23]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	32ae      	adds	r2, #174	@ 0xae
 800da18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1c:	695b      	ldr	r3, [r3, #20]
 800da1e:	7afa      	ldrb	r2, [r7, #11]
 800da20:	4611      	mov	r1, r2
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	4798      	blx	r3
 800da26:	4603      	mov	r3, r0
 800da28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800da2a:	7dbb      	ldrb	r3, [r7, #22]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d001      	beq.n	800da34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800da30:	7dbb      	ldrb	r3, [r7, #22]
 800da32:	e000      	b.n	800da36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b084      	sub	sp, #16
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800da46:	2300      	movs	r3, #0
 800da48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2201      	movs	r2, #1
 800da4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da76:	2b00      	cmp	r3, #0
 800da78:	d014      	beq.n	800daa4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00e      	beq.n	800daa4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	6852      	ldr	r2, [r2, #4]
 800da92:	b2d2      	uxtb	r2, r2
 800da94:	4611      	mov	r1, r2
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	4798      	blx	r3
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800daa0:	2303      	movs	r3, #3
 800daa2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800daa4:	2340      	movs	r3, #64	@ 0x40
 800daa6:	2200      	movs	r2, #0
 800daa8:	2100      	movs	r1, #0
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f002 f83b 	bl	800fb26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2240      	movs	r2, #64	@ 0x40
 800dabc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dac0:	2340      	movs	r3, #64	@ 0x40
 800dac2:	2200      	movs	r2, #0
 800dac4:	2180      	movs	r1, #128	@ 0x80
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f002 f82d 	bl	800fb26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2240      	movs	r2, #64	@ 0x40
 800dad6:	621a      	str	r2, [r3, #32]

  return ret;
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dae2:	b480      	push	{r7}
 800dae4:	b083      	sub	sp, #12
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	460b      	mov	r3, r1
 800daec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	78fa      	ldrb	r2, [r7, #3]
 800daf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	370c      	adds	r7, #12
 800dafa:	46bd      	mov	sp, r7
 800dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db00:	4770      	bx	lr

0800db02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800db02:	b480      	push	{r7}
 800db04:	b083      	sub	sp, #12
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db10:	b2db      	uxtb	r3, r3
 800db12:	2b04      	cmp	r3, #4
 800db14:	d006      	beq.n	800db24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db1c:	b2da      	uxtb	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2204      	movs	r2, #4
 800db28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	370c      	adds	r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	2b04      	cmp	r3, #4
 800db4c:	d106      	bne.n	800db5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800db54:	b2da      	uxtb	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr

0800db6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b082      	sub	sp, #8
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d110      	bne.n	800dba0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00b      	beq.n	800dba0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db8e:	69db      	ldr	r3, [r3, #28]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d005      	beq.n	800dba0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db9a:	69db      	ldr	r3, [r3, #28]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	32ae      	adds	r2, #174	@ 0xae
 800dbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d101      	bne.n	800dbcc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dbc8:	2303      	movs	r3, #3
 800dbca:	e01c      	b.n	800dc06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	2b03      	cmp	r3, #3
 800dbd6:	d115      	bne.n	800dc04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	32ae      	adds	r2, #174	@ 0xae
 800dbe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe6:	6a1b      	ldr	r3, [r3, #32]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00b      	beq.n	800dc04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	32ae      	adds	r2, #174	@ 0xae
 800dbf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbfa:	6a1b      	ldr	r3, [r3, #32]
 800dbfc:	78fa      	ldrb	r2, [r7, #3]
 800dbfe:	4611      	mov	r1, r2
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b082      	sub	sp, #8
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
 800dc16:	460b      	mov	r3, r1
 800dc18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	32ae      	adds	r2, #174	@ 0xae
 800dc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d101      	bne.n	800dc30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	e01c      	b.n	800dc6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	2b03      	cmp	r3, #3
 800dc3a:	d115      	bne.n	800dc68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	32ae      	adds	r2, #174	@ 0xae
 800dc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00b      	beq.n	800dc68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	32ae      	adds	r2, #174	@ 0xae
 800dc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc60:	78fa      	ldrb	r2, [r7, #3]
 800dc62:	4611      	mov	r1, r2
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dc72:	b480      	push	{r7}
 800dc74:	b083      	sub	sp, #12
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dc7a:	2300      	movs	r3, #0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dc90:	2300      	movs	r3, #0
 800dc92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2201      	movs	r2, #1
 800dc98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00e      	beq.n	800dcc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	6852      	ldr	r2, [r2, #4]
 800dcb2:	b2d2      	uxtb	r2, r2
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	4798      	blx	r3
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dcc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dcce:	b480      	push	{r7}
 800dcd0:	b083      	sub	sp, #12
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dcda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dcf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b086      	sub	sp, #24
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	885b      	ldrh	r3, [r3, #2]
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	68fa      	ldr	r2, [r7, #12]
 800dd22:	7812      	ldrb	r2, [r2, #0]
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d91f      	bls.n	800dd68 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dd2e:	e013      	b.n	800dd58 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dd30:	f107 030a 	add.w	r3, r7, #10
 800dd34:	4619      	mov	r1, r3
 800dd36:	6978      	ldr	r0, [r7, #20]
 800dd38:	f000 f81b 	bl	800dd72 <USBD_GetNextDesc>
 800dd3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	785b      	ldrb	r3, [r3, #1]
 800dd42:	2b05      	cmp	r3, #5
 800dd44:	d108      	bne.n	800dd58 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	789b      	ldrb	r3, [r3, #2]
 800dd4e:	78fa      	ldrb	r2, [r7, #3]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d008      	beq.n	800dd66 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dd54:	2300      	movs	r3, #0
 800dd56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	885b      	ldrh	r3, [r3, #2]
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	897b      	ldrh	r3, [r7, #10]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d8e5      	bhi.n	800dd30 <USBD_GetEpDesc+0x2e>
 800dd64:	e000      	b.n	800dd68 <USBD_GetEpDesc+0x66>
          break;
 800dd66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dd68:	693b      	ldr	r3, [r7, #16]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3718      	adds	r7, #24
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dd72:	b480      	push	{r7}
 800dd74:	b085      	sub	sp, #20
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	881b      	ldrh	r3, [r3, #0]
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	7812      	ldrb	r2, [r2, #0]
 800dd88:	4413      	add	r3, r2
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	461a      	mov	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4413      	add	r3, r2
 800dd9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr

0800ddaa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ddaa:	b480      	push	{r7}
 800ddac:	b087      	sub	sp, #28
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ddc8:	8a3b      	ldrh	r3, [r7, #16]
 800ddca:	021b      	lsls	r3, r3, #8
 800ddcc:	b21a      	sxth	r2, r3
 800ddce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	b21b      	sxth	r3, r3
 800ddd6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ddd8:	89fb      	ldrh	r3, [r7, #14]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	371c      	adds	r7, #28
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr
	...

0800dde8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ddfe:	2b40      	cmp	r3, #64	@ 0x40
 800de00:	d005      	beq.n	800de0e <USBD_StdDevReq+0x26>
 800de02:	2b40      	cmp	r3, #64	@ 0x40
 800de04:	d857      	bhi.n	800deb6 <USBD_StdDevReq+0xce>
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00f      	beq.n	800de2a <USBD_StdDevReq+0x42>
 800de0a:	2b20      	cmp	r3, #32
 800de0c:	d153      	bne.n	800deb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	32ae      	adds	r2, #174	@ 0xae
 800de18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	4798      	blx	r3
 800de24:	4603      	mov	r3, r0
 800de26:	73fb      	strb	r3, [r7, #15]
      break;
 800de28:	e04a      	b.n	800dec0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	785b      	ldrb	r3, [r3, #1]
 800de2e:	2b09      	cmp	r3, #9
 800de30:	d83b      	bhi.n	800deaa <USBD_StdDevReq+0xc2>
 800de32:	a201      	add	r2, pc, #4	@ (adr r2, 800de38 <USBD_StdDevReq+0x50>)
 800de34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de38:	0800de8d 	.word	0x0800de8d
 800de3c:	0800dea1 	.word	0x0800dea1
 800de40:	0800deab 	.word	0x0800deab
 800de44:	0800de97 	.word	0x0800de97
 800de48:	0800deab 	.word	0x0800deab
 800de4c:	0800de6b 	.word	0x0800de6b
 800de50:	0800de61 	.word	0x0800de61
 800de54:	0800deab 	.word	0x0800deab
 800de58:	0800de83 	.word	0x0800de83
 800de5c:	0800de75 	.word	0x0800de75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 fa3c 	bl	800e2e0 <USBD_GetDescriptor>
          break;
 800de68:	e024      	b.n	800deb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800de6a:	6839      	ldr	r1, [r7, #0]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fbcb 	bl	800e608 <USBD_SetAddress>
          break;
 800de72:	e01f      	b.n	800deb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fc0a 	bl	800e690 <USBD_SetConfig>
 800de7c:	4603      	mov	r3, r0
 800de7e:	73fb      	strb	r3, [r7, #15]
          break;
 800de80:	e018      	b.n	800deb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800de82:	6839      	ldr	r1, [r7, #0]
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 fcad 	bl	800e7e4 <USBD_GetConfig>
          break;
 800de8a:	e013      	b.n	800deb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 fcde 	bl	800e850 <USBD_GetStatus>
          break;
 800de94:	e00e      	b.n	800deb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800de96:	6839      	ldr	r1, [r7, #0]
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 fd0d 	bl	800e8b8 <USBD_SetFeature>
          break;
 800de9e:	e009      	b.n	800deb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dea0:	6839      	ldr	r1, [r7, #0]
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 fd31 	bl	800e90a <USBD_ClrFeature>
          break;
 800dea8:	e004      	b.n	800deb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800deaa:	6839      	ldr	r1, [r7, #0]
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 fd88 	bl	800e9c2 <USBD_CtlError>
          break;
 800deb2:	bf00      	nop
      }
      break;
 800deb4:	e004      	b.n	800dec0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800deb6:	6839      	ldr	r1, [r7, #0]
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fd82 	bl	800e9c2 <USBD_CtlError>
      break;
 800debe:	bf00      	nop
  }

  return ret;
 800dec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop

0800decc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ded6:	2300      	movs	r3, #0
 800ded8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dee2:	2b40      	cmp	r3, #64	@ 0x40
 800dee4:	d005      	beq.n	800def2 <USBD_StdItfReq+0x26>
 800dee6:	2b40      	cmp	r3, #64	@ 0x40
 800dee8:	d852      	bhi.n	800df90 <USBD_StdItfReq+0xc4>
 800deea:	2b00      	cmp	r3, #0
 800deec:	d001      	beq.n	800def2 <USBD_StdItfReq+0x26>
 800deee:	2b20      	cmp	r3, #32
 800def0:	d14e      	bne.n	800df90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800def8:	b2db      	uxtb	r3, r3
 800defa:	3b01      	subs	r3, #1
 800defc:	2b02      	cmp	r3, #2
 800defe:	d840      	bhi.n	800df82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	889b      	ldrh	r3, [r3, #4]
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b01      	cmp	r3, #1
 800df08:	d836      	bhi.n	800df78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	889b      	ldrh	r3, [r3, #4]
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	4619      	mov	r1, r3
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f7ff fedb 	bl	800dcce <USBD_CoreFindIF>
 800df18:	4603      	mov	r3, r0
 800df1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df1c:	7bbb      	ldrb	r3, [r7, #14]
 800df1e:	2bff      	cmp	r3, #255	@ 0xff
 800df20:	d01d      	beq.n	800df5e <USBD_StdItfReq+0x92>
 800df22:	7bbb      	ldrb	r3, [r7, #14]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d11a      	bne.n	800df5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800df28:	7bba      	ldrb	r2, [r7, #14]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	32ae      	adds	r2, #174	@ 0xae
 800df2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d00f      	beq.n	800df58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800df38:	7bba      	ldrb	r2, [r7, #14]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df40:	7bba      	ldrb	r2, [r7, #14]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	32ae      	adds	r2, #174	@ 0xae
 800df46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	6839      	ldr	r1, [r7, #0]
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	4798      	blx	r3
 800df52:	4603      	mov	r3, r0
 800df54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df56:	e004      	b.n	800df62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800df58:	2303      	movs	r3, #3
 800df5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df5c:	e001      	b.n	800df62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800df5e:	2303      	movs	r3, #3
 800df60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	88db      	ldrh	r3, [r3, #6]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d110      	bne.n	800df8c <USBD_StdItfReq+0xc0>
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10d      	bne.n	800df8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fdf1 	bl	800eb58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800df76:	e009      	b.n	800df8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 fd21 	bl	800e9c2 <USBD_CtlError>
          break;
 800df80:	e004      	b.n	800df8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fd1c 	bl	800e9c2 <USBD_CtlError>
          break;
 800df8a:	e000      	b.n	800df8e <USBD_StdItfReq+0xc2>
          break;
 800df8c:	bf00      	nop
      }
      break;
 800df8e:	e004      	b.n	800df9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800df90:	6839      	ldr	r1, [r7, #0]
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fd15 	bl	800e9c2 <USBD_CtlError>
      break;
 800df98:	bf00      	nop
  }

  return ret;
 800df9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	889b      	ldrh	r3, [r3, #4]
 800dfb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dfc0:	2b40      	cmp	r3, #64	@ 0x40
 800dfc2:	d007      	beq.n	800dfd4 <USBD_StdEPReq+0x30>
 800dfc4:	2b40      	cmp	r3, #64	@ 0x40
 800dfc6:	f200 817f 	bhi.w	800e2c8 <USBD_StdEPReq+0x324>
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d02a      	beq.n	800e024 <USBD_StdEPReq+0x80>
 800dfce:	2b20      	cmp	r3, #32
 800dfd0:	f040 817a 	bne.w	800e2c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dfd4:	7bbb      	ldrb	r3, [r7, #14]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f7ff fe85 	bl	800dce8 <USBD_CoreFindEP>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dfe2:	7b7b      	ldrb	r3, [r7, #13]
 800dfe4:	2bff      	cmp	r3, #255	@ 0xff
 800dfe6:	f000 8174 	beq.w	800e2d2 <USBD_StdEPReq+0x32e>
 800dfea:	7b7b      	ldrb	r3, [r7, #13]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f040 8170 	bne.w	800e2d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dff2:	7b7a      	ldrb	r2, [r7, #13]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dffa:	7b7a      	ldrb	r2, [r7, #13]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	32ae      	adds	r2, #174	@ 0xae
 800e000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	2b00      	cmp	r3, #0
 800e008:	f000 8163 	beq.w	800e2d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e00c:	7b7a      	ldrb	r2, [r7, #13]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	32ae      	adds	r2, #174	@ 0xae
 800e012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	4798      	blx	r3
 800e01e:	4603      	mov	r3, r0
 800e020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e022:	e156      	b.n	800e2d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	785b      	ldrb	r3, [r3, #1]
 800e028:	2b03      	cmp	r3, #3
 800e02a:	d008      	beq.n	800e03e <USBD_StdEPReq+0x9a>
 800e02c:	2b03      	cmp	r3, #3
 800e02e:	f300 8145 	bgt.w	800e2bc <USBD_StdEPReq+0x318>
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 809b 	beq.w	800e16e <USBD_StdEPReq+0x1ca>
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d03c      	beq.n	800e0b6 <USBD_StdEPReq+0x112>
 800e03c:	e13e      	b.n	800e2bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b02      	cmp	r3, #2
 800e048:	d002      	beq.n	800e050 <USBD_StdEPReq+0xac>
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d016      	beq.n	800e07c <USBD_StdEPReq+0xd8>
 800e04e:	e02c      	b.n	800e0aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e050:	7bbb      	ldrb	r3, [r7, #14]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d00d      	beq.n	800e072 <USBD_StdEPReq+0xce>
 800e056:	7bbb      	ldrb	r3, [r7, #14]
 800e058:	2b80      	cmp	r3, #128	@ 0x80
 800e05a:	d00a      	beq.n	800e072 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e05c:	7bbb      	ldrb	r3, [r7, #14]
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f001 fda5 	bl	800fbb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e066:	2180      	movs	r1, #128	@ 0x80
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f001 fda1 	bl	800fbb0 <USBD_LL_StallEP>
 800e06e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e070:	e020      	b.n	800e0b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 fca4 	bl	800e9c2 <USBD_CtlError>
              break;
 800e07a:	e01b      	b.n	800e0b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	885b      	ldrh	r3, [r3, #2]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10e      	bne.n	800e0a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e084:	7bbb      	ldrb	r3, [r7, #14]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00b      	beq.n	800e0a2 <USBD_StdEPReq+0xfe>
 800e08a:	7bbb      	ldrb	r3, [r7, #14]
 800e08c:	2b80      	cmp	r3, #128	@ 0x80
 800e08e:	d008      	beq.n	800e0a2 <USBD_StdEPReq+0xfe>
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	88db      	ldrh	r3, [r3, #6]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d104      	bne.n	800e0a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e098:	7bbb      	ldrb	r3, [r7, #14]
 800e09a:	4619      	mov	r1, r3
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f001 fd87 	bl	800fbb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fd58 	bl	800eb58 <USBD_CtlSendStatus>

              break;
 800e0a8:	e004      	b.n	800e0b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e0aa:	6839      	ldr	r1, [r7, #0]
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fc88 	bl	800e9c2 <USBD_CtlError>
              break;
 800e0b2:	bf00      	nop
          }
          break;
 800e0b4:	e107      	b.n	800e2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d002      	beq.n	800e0c8 <USBD_StdEPReq+0x124>
 800e0c2:	2b03      	cmp	r3, #3
 800e0c4:	d016      	beq.n	800e0f4 <USBD_StdEPReq+0x150>
 800e0c6:	e04b      	b.n	800e160 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0c8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00d      	beq.n	800e0ea <USBD_StdEPReq+0x146>
 800e0ce:	7bbb      	ldrb	r3, [r7, #14]
 800e0d0:	2b80      	cmp	r3, #128	@ 0x80
 800e0d2:	d00a      	beq.n	800e0ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0d4:	7bbb      	ldrb	r3, [r7, #14]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f001 fd69 	bl	800fbb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0de:	2180      	movs	r1, #128	@ 0x80
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f001 fd65 	bl	800fbb0 <USBD_LL_StallEP>
 800e0e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e0e8:	e040      	b.n	800e16c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e0ea:	6839      	ldr	r1, [r7, #0]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 fc68 	bl	800e9c2 <USBD_CtlError>
              break;
 800e0f2:	e03b      	b.n	800e16c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	885b      	ldrh	r3, [r3, #2]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d136      	bne.n	800e16a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e0fc:	7bbb      	ldrb	r3, [r7, #14]
 800e0fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e102:	2b00      	cmp	r3, #0
 800e104:	d004      	beq.n	800e110 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e106:	7bbb      	ldrb	r3, [r7, #14]
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f001 fd6f 	bl	800fbee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 fd21 	bl	800eb58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e116:	7bbb      	ldrb	r3, [r7, #14]
 800e118:	4619      	mov	r1, r3
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7ff fde4 	bl	800dce8 <USBD_CoreFindEP>
 800e120:	4603      	mov	r3, r0
 800e122:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e124:	7b7b      	ldrb	r3, [r7, #13]
 800e126:	2bff      	cmp	r3, #255	@ 0xff
 800e128:	d01f      	beq.n	800e16a <USBD_StdEPReq+0x1c6>
 800e12a:	7b7b      	ldrb	r3, [r7, #13]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d11c      	bne.n	800e16a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e130:	7b7a      	ldrb	r2, [r7, #13]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e138:	7b7a      	ldrb	r2, [r7, #13]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	32ae      	adds	r2, #174	@ 0xae
 800e13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d010      	beq.n	800e16a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e148:	7b7a      	ldrb	r2, [r7, #13]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	32ae      	adds	r2, #174	@ 0xae
 800e14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	6839      	ldr	r1, [r7, #0]
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	4798      	blx	r3
 800e15a:	4603      	mov	r3, r0
 800e15c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e15e:	e004      	b.n	800e16a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e160:	6839      	ldr	r1, [r7, #0]
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f000 fc2d 	bl	800e9c2 <USBD_CtlError>
              break;
 800e168:	e000      	b.n	800e16c <USBD_StdEPReq+0x1c8>
              break;
 800e16a:	bf00      	nop
          }
          break;
 800e16c:	e0ab      	b.n	800e2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e174:	b2db      	uxtb	r3, r3
 800e176:	2b02      	cmp	r3, #2
 800e178:	d002      	beq.n	800e180 <USBD_StdEPReq+0x1dc>
 800e17a:	2b03      	cmp	r3, #3
 800e17c:	d032      	beq.n	800e1e4 <USBD_StdEPReq+0x240>
 800e17e:	e097      	b.n	800e2b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e180:	7bbb      	ldrb	r3, [r7, #14]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d007      	beq.n	800e196 <USBD_StdEPReq+0x1f2>
 800e186:	7bbb      	ldrb	r3, [r7, #14]
 800e188:	2b80      	cmp	r3, #128	@ 0x80
 800e18a:	d004      	beq.n	800e196 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 fc17 	bl	800e9c2 <USBD_CtlError>
                break;
 800e194:	e091      	b.n	800e2ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	da0b      	bge.n	800e1b6 <USBD_StdEPReq+0x212>
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
 800e1a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	3310      	adds	r3, #16
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	e00b      	b.n	800e1ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e1b6:	7bbb      	ldrb	r3, [r7, #14]
 800e1b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1bc:	4613      	mov	r3, r2
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	4413      	add	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	2202      	movs	r2, #2
 800e1da:	4619      	mov	r1, r3
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 fc61 	bl	800eaa4 <USBD_CtlSendData>
              break;
 800e1e2:	e06a      	b.n	800e2ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e1e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	da11      	bge.n	800e210 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e1ec:	7bbb      	ldrb	r3, [r7, #14]
 800e1ee:	f003 020f 	and.w	r2, r3, #15
 800e1f2:	6879      	ldr	r1, [r7, #4]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4413      	add	r3, r2
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	440b      	add	r3, r1
 800e1fe:	3324      	adds	r3, #36	@ 0x24
 800e200:	881b      	ldrh	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d117      	bne.n	800e236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e206:	6839      	ldr	r1, [r7, #0]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 fbda 	bl	800e9c2 <USBD_CtlError>
                  break;
 800e20e:	e054      	b.n	800e2ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e210:	7bbb      	ldrb	r3, [r7, #14]
 800e212:	f003 020f 	and.w	r2, r3, #15
 800e216:	6879      	ldr	r1, [r7, #4]
 800e218:	4613      	mov	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	440b      	add	r3, r1
 800e222:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d104      	bne.n	800e236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fbc7 	bl	800e9c2 <USBD_CtlError>
                  break;
 800e234:	e041      	b.n	800e2ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	da0b      	bge.n	800e256 <USBD_StdEPReq+0x2b2>
 800e23e:	7bbb      	ldrb	r3, [r7, #14]
 800e240:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e244:	4613      	mov	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	4413      	add	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	3310      	adds	r3, #16
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	4413      	add	r3, r2
 800e252:	3304      	adds	r3, #4
 800e254:	e00b      	b.n	800e26e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e256:	7bbb      	ldrb	r3, [r7, #14]
 800e258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e25c:	4613      	mov	r3, r2
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4413      	add	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	4413      	add	r3, r2
 800e26c:	3304      	adds	r3, #4
 800e26e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e270:	7bbb      	ldrb	r3, [r7, #14]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d002      	beq.n	800e27c <USBD_StdEPReq+0x2d8>
 800e276:	7bbb      	ldrb	r3, [r7, #14]
 800e278:	2b80      	cmp	r3, #128	@ 0x80
 800e27a:	d103      	bne.n	800e284 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	2200      	movs	r2, #0
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	e00e      	b.n	800e2a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e284:	7bbb      	ldrb	r3, [r7, #14]
 800e286:	4619      	mov	r1, r3
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f001 fccf 	bl	800fc2c <USBD_LL_IsStallEP>
 800e28e:	4603      	mov	r3, r0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d003      	beq.n	800e29c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	2201      	movs	r2, #1
 800e298:	601a      	str	r2, [r3, #0]
 800e29a:	e002      	b.n	800e2a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 fbfb 	bl	800eaa4 <USBD_CtlSendData>
              break;
 800e2ae:	e004      	b.n	800e2ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e2b0:	6839      	ldr	r1, [r7, #0]
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fb85 	bl	800e9c2 <USBD_CtlError>
              break;
 800e2b8:	bf00      	nop
          }
          break;
 800e2ba:	e004      	b.n	800e2c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e2bc:	6839      	ldr	r1, [r7, #0]
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 fb7f 	bl	800e9c2 <USBD_CtlError>
          break;
 800e2c4:	bf00      	nop
      }
      break;
 800e2c6:	e005      	b.n	800e2d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e2c8:	6839      	ldr	r1, [r7, #0]
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 fb79 	bl	800e9c2 <USBD_CtlError>
      break;
 800e2d0:	e000      	b.n	800e2d4 <USBD_StdEPReq+0x330>
      break;
 800e2d2:	bf00      	nop
  }

  return ret;
 800e2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3710      	adds	r7, #16
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
	...

0800e2e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	885b      	ldrh	r3, [r3, #2]
 800e2fa:	0a1b      	lsrs	r3, r3, #8
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	3b01      	subs	r3, #1
 800e300:	2b0e      	cmp	r3, #14
 800e302:	f200 8152 	bhi.w	800e5aa <USBD_GetDescriptor+0x2ca>
 800e306:	a201      	add	r2, pc, #4	@ (adr r2, 800e30c <USBD_GetDescriptor+0x2c>)
 800e308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e30c:	0800e37d 	.word	0x0800e37d
 800e310:	0800e395 	.word	0x0800e395
 800e314:	0800e3d5 	.word	0x0800e3d5
 800e318:	0800e5ab 	.word	0x0800e5ab
 800e31c:	0800e5ab 	.word	0x0800e5ab
 800e320:	0800e54b 	.word	0x0800e54b
 800e324:	0800e577 	.word	0x0800e577
 800e328:	0800e5ab 	.word	0x0800e5ab
 800e32c:	0800e5ab 	.word	0x0800e5ab
 800e330:	0800e5ab 	.word	0x0800e5ab
 800e334:	0800e5ab 	.word	0x0800e5ab
 800e338:	0800e5ab 	.word	0x0800e5ab
 800e33c:	0800e5ab 	.word	0x0800e5ab
 800e340:	0800e5ab 	.word	0x0800e5ab
 800e344:	0800e349 	.word	0x0800e349
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e34e:	69db      	ldr	r3, [r3, #28]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00b      	beq.n	800e36c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e35a:	69db      	ldr	r3, [r3, #28]
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	7c12      	ldrb	r2, [r2, #16]
 800e360:	f107 0108 	add.w	r1, r7, #8
 800e364:	4610      	mov	r0, r2
 800e366:	4798      	blx	r3
 800e368:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e36a:	e126      	b.n	800e5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e36c:	6839      	ldr	r1, [r7, #0]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fb27 	bl	800e9c2 <USBD_CtlError>
        err++;
 800e374:	7afb      	ldrb	r3, [r7, #11]
 800e376:	3301      	adds	r3, #1
 800e378:	72fb      	strb	r3, [r7, #11]
      break;
 800e37a:	e11e      	b.n	800e5ba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	7c12      	ldrb	r2, [r2, #16]
 800e388:	f107 0108 	add.w	r1, r7, #8
 800e38c:	4610      	mov	r0, r2
 800e38e:	4798      	blx	r3
 800e390:	60f8      	str	r0, [r7, #12]
      break;
 800e392:	e112      	b.n	800e5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	7c1b      	ldrb	r3, [r3, #16]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d10d      	bne.n	800e3b8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a4:	f107 0208 	add.w	r2, r7, #8
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	4798      	blx	r3
 800e3ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e3b6:	e100      	b.n	800e5ba <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3c0:	f107 0208 	add.w	r2, r7, #8
 800e3c4:	4610      	mov	r0, r2
 800e3c6:	4798      	blx	r3
 800e3c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	2202      	movs	r2, #2
 800e3d0:	701a      	strb	r2, [r3, #0]
      break;
 800e3d2:	e0f2      	b.n	800e5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	885b      	ldrh	r3, [r3, #2]
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	2b05      	cmp	r3, #5
 800e3dc:	f200 80ac 	bhi.w	800e538 <USBD_GetDescriptor+0x258>
 800e3e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e3e8 <USBD_GetDescriptor+0x108>)
 800e3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e6:	bf00      	nop
 800e3e8:	0800e401 	.word	0x0800e401
 800e3ec:	0800e435 	.word	0x0800e435
 800e3f0:	0800e469 	.word	0x0800e469
 800e3f4:	0800e49d 	.word	0x0800e49d
 800e3f8:	0800e4d1 	.word	0x0800e4d1
 800e3fc:	0800e505 	.word	0x0800e505
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00b      	beq.n	800e424 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	7c12      	ldrb	r2, [r2, #16]
 800e418:	f107 0108 	add.w	r1, r7, #8
 800e41c:	4610      	mov	r0, r2
 800e41e:	4798      	blx	r3
 800e420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e422:	e091      	b.n	800e548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e424:	6839      	ldr	r1, [r7, #0]
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 facb 	bl	800e9c2 <USBD_CtlError>
            err++;
 800e42c:	7afb      	ldrb	r3, [r7, #11]
 800e42e:	3301      	adds	r3, #1
 800e430:	72fb      	strb	r3, [r7, #11]
          break;
 800e432:	e089      	b.n	800e548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00b      	beq.n	800e458 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e446:	689b      	ldr	r3, [r3, #8]
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	7c12      	ldrb	r2, [r2, #16]
 800e44c:	f107 0108 	add.w	r1, r7, #8
 800e450:	4610      	mov	r0, r2
 800e452:	4798      	blx	r3
 800e454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e456:	e077      	b.n	800e548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e458:	6839      	ldr	r1, [r7, #0]
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 fab1 	bl	800e9c2 <USBD_CtlError>
            err++;
 800e460:	7afb      	ldrb	r3, [r7, #11]
 800e462:	3301      	adds	r3, #1
 800e464:	72fb      	strb	r3, [r7, #11]
          break;
 800e466:	e06f      	b.n	800e548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00b      	beq.n	800e48c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	7c12      	ldrb	r2, [r2, #16]
 800e480:	f107 0108 	add.w	r1, r7, #8
 800e484:	4610      	mov	r0, r2
 800e486:	4798      	blx	r3
 800e488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e48a:	e05d      	b.n	800e548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e48c:	6839      	ldr	r1, [r7, #0]
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 fa97 	bl	800e9c2 <USBD_CtlError>
            err++;
 800e494:	7afb      	ldrb	r3, [r7, #11]
 800e496:	3301      	adds	r3, #1
 800e498:	72fb      	strb	r3, [r7, #11]
          break;
 800e49a:	e055      	b.n	800e548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00b      	beq.n	800e4c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4ae:	691b      	ldr	r3, [r3, #16]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	7c12      	ldrb	r2, [r2, #16]
 800e4b4:	f107 0108 	add.w	r1, r7, #8
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	4798      	blx	r3
 800e4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4be:	e043      	b.n	800e548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4c0:	6839      	ldr	r1, [r7, #0]
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fa7d 	bl	800e9c2 <USBD_CtlError>
            err++;
 800e4c8:	7afb      	ldrb	r3, [r7, #11]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e4ce:	e03b      	b.n	800e548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4d6:	695b      	ldr	r3, [r3, #20]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00b      	beq.n	800e4f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4e2:	695b      	ldr	r3, [r3, #20]
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	7c12      	ldrb	r2, [r2, #16]
 800e4e8:	f107 0108 	add.w	r1, r7, #8
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	4798      	blx	r3
 800e4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4f2:	e029      	b.n	800e548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4f4:	6839      	ldr	r1, [r7, #0]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 fa63 	bl	800e9c2 <USBD_CtlError>
            err++;
 800e4fc:	7afb      	ldrb	r3, [r7, #11]
 800e4fe:	3301      	adds	r3, #1
 800e500:	72fb      	strb	r3, [r7, #11]
          break;
 800e502:	e021      	b.n	800e548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e50a:	699b      	ldr	r3, [r3, #24]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00b      	beq.n	800e528 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	7c12      	ldrb	r2, [r2, #16]
 800e51c:	f107 0108 	add.w	r1, r7, #8
 800e520:	4610      	mov	r0, r2
 800e522:	4798      	blx	r3
 800e524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e526:	e00f      	b.n	800e548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e528:	6839      	ldr	r1, [r7, #0]
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 fa49 	bl	800e9c2 <USBD_CtlError>
            err++;
 800e530:	7afb      	ldrb	r3, [r7, #11]
 800e532:	3301      	adds	r3, #1
 800e534:	72fb      	strb	r3, [r7, #11]
          break;
 800e536:	e007      	b.n	800e548 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e538:	6839      	ldr	r1, [r7, #0]
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 fa41 	bl	800e9c2 <USBD_CtlError>
          err++;
 800e540:	7afb      	ldrb	r3, [r7, #11]
 800e542:	3301      	adds	r3, #1
 800e544:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e546:	bf00      	nop
      }
      break;
 800e548:	e037      	b.n	800e5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	7c1b      	ldrb	r3, [r3, #16]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d109      	bne.n	800e566 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e55a:	f107 0208 	add.w	r2, r7, #8
 800e55e:	4610      	mov	r0, r2
 800e560:	4798      	blx	r3
 800e562:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e564:	e029      	b.n	800e5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 fa2a 	bl	800e9c2 <USBD_CtlError>
        err++;
 800e56e:	7afb      	ldrb	r3, [r7, #11]
 800e570:	3301      	adds	r3, #1
 800e572:	72fb      	strb	r3, [r7, #11]
      break;
 800e574:	e021      	b.n	800e5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	7c1b      	ldrb	r3, [r3, #16]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10d      	bne.n	800e59a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e586:	f107 0208 	add.w	r2, r7, #8
 800e58a:	4610      	mov	r0, r2
 800e58c:	4798      	blx	r3
 800e58e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	3301      	adds	r3, #1
 800e594:	2207      	movs	r2, #7
 800e596:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e598:	e00f      	b.n	800e5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e59a:	6839      	ldr	r1, [r7, #0]
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 fa10 	bl	800e9c2 <USBD_CtlError>
        err++;
 800e5a2:	7afb      	ldrb	r3, [r7, #11]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	72fb      	strb	r3, [r7, #11]
      break;
 800e5a8:	e007      	b.n	800e5ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e5aa:	6839      	ldr	r1, [r7, #0]
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 fa08 	bl	800e9c2 <USBD_CtlError>
      err++;
 800e5b2:	7afb      	ldrb	r3, [r7, #11]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	72fb      	strb	r3, [r7, #11]
      break;
 800e5b8:	bf00      	nop
  }

  if (err != 0U)
 800e5ba:	7afb      	ldrb	r3, [r7, #11]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d11e      	bne.n	800e5fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	88db      	ldrh	r3, [r3, #6]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d016      	beq.n	800e5f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e5c8:	893b      	ldrh	r3, [r7, #8]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00e      	beq.n	800e5ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	88da      	ldrh	r2, [r3, #6]
 800e5d2:	893b      	ldrh	r3, [r7, #8]
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	bf28      	it	cs
 800e5d8:	4613      	movcs	r3, r2
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e5de:	893b      	ldrh	r3, [r7, #8]
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	68f9      	ldr	r1, [r7, #12]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fa5d 	bl	800eaa4 <USBD_CtlSendData>
 800e5ea:	e009      	b.n	800e600 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 f9e7 	bl	800e9c2 <USBD_CtlError>
 800e5f4:	e004      	b.n	800e600 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 faae 	bl	800eb58 <USBD_CtlSendStatus>
 800e5fc:	e000      	b.n	800e600 <USBD_GetDescriptor+0x320>
    return;
 800e5fe:	bf00      	nop
  }
}
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop

0800e608 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	889b      	ldrh	r3, [r3, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d131      	bne.n	800e67e <USBD_SetAddress+0x76>
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	88db      	ldrh	r3, [r3, #6]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d12d      	bne.n	800e67e <USBD_SetAddress+0x76>
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	885b      	ldrh	r3, [r3, #2]
 800e626:	2b7f      	cmp	r3, #127	@ 0x7f
 800e628:	d829      	bhi.n	800e67e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	885b      	ldrh	r3, [r3, #2]
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e634:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	2b03      	cmp	r3, #3
 800e640:	d104      	bne.n	800e64c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e642:	6839      	ldr	r1, [r7, #0]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 f9bc 	bl	800e9c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e64a:	e01d      	b.n	800e688 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	7bfa      	ldrb	r2, [r7, #15]
 800e650:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e654:	7bfb      	ldrb	r3, [r7, #15]
 800e656:	4619      	mov	r1, r3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f001 fb13 	bl	800fc84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 fa7a 	bl	800eb58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e664:	7bfb      	ldrb	r3, [r7, #15]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d004      	beq.n	800e674 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2202      	movs	r2, #2
 800e66e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e672:	e009      	b.n	800e688 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e67c:	e004      	b.n	800e688 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e67e:	6839      	ldr	r1, [r7, #0]
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 f99e 	bl	800e9c2 <USBD_CtlError>
  }
}
 800e686:	bf00      	nop
 800e688:	bf00      	nop
 800e68a:	3710      	adds	r7, #16
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e69a:	2300      	movs	r3, #0
 800e69c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	885b      	ldrh	r3, [r3, #2]
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	4b4e      	ldr	r3, [pc, #312]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e6a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e6a8:	4b4d      	ldr	r3, [pc, #308]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d905      	bls.n	800e6bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 f985 	bl	800e9c2 <USBD_CtlError>
    return USBD_FAIL;
 800e6b8:	2303      	movs	r3, #3
 800e6ba:	e08c      	b.n	800e7d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d002      	beq.n	800e6ce <USBD_SetConfig+0x3e>
 800e6c8:	2b03      	cmp	r3, #3
 800e6ca:	d029      	beq.n	800e720 <USBD_SetConfig+0x90>
 800e6cc:	e075      	b.n	800e7ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e6ce:	4b44      	ldr	r3, [pc, #272]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d020      	beq.n	800e718 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e6d6:	4b42      	ldr	r3, [pc, #264]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	461a      	mov	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e6e0:	4b3f      	ldr	r3, [pc, #252]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7fe ffb9 	bl	800d65e <USBD_SetClassConfig>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e6f0:	7bfb      	ldrb	r3, [r7, #15]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d008      	beq.n	800e708 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e6f6:	6839      	ldr	r1, [r7, #0]
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 f962 	bl	800e9c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2202      	movs	r2, #2
 800e702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e706:	e065      	b.n	800e7d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 fa25 	bl	800eb58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2203      	movs	r2, #3
 800e712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e716:	e05d      	b.n	800e7d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 fa1d 	bl	800eb58 <USBD_CtlSendStatus>
      break;
 800e71e:	e059      	b.n	800e7d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e720:	4b2f      	ldr	r3, [pc, #188]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d112      	bne.n	800e74e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2202      	movs	r2, #2
 800e72c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e730:	4b2b      	ldr	r3, [pc, #172]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	461a      	mov	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e73a:	4b29      	ldr	r3, [pc, #164]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	4619      	mov	r1, r3
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7fe ffa8 	bl	800d696 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 fa06 	bl	800eb58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e74c:	e042      	b.n	800e7d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e74e:	4b24      	ldr	r3, [pc, #144]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	461a      	mov	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d02a      	beq.n	800e7b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	b2db      	uxtb	r3, r3
 800e762:	4619      	mov	r1, r3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f7fe ff96 	bl	800d696 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e76a:	4b1d      	ldr	r3, [pc, #116]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	461a      	mov	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e774:	4b1a      	ldr	r3, [pc, #104]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	4619      	mov	r1, r3
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7fe ff6f 	bl	800d65e <USBD_SetClassConfig>
 800e780:	4603      	mov	r3, r0
 800e782:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e784:	7bfb      	ldrb	r3, [r7, #15]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00f      	beq.n	800e7aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e78a:	6839      	ldr	r1, [r7, #0]
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 f918 	bl	800e9c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	b2db      	uxtb	r3, r3
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7fe ff7b 	bl	800d696 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e7a8:	e014      	b.n	800e7d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 f9d4 	bl	800eb58 <USBD_CtlSendStatus>
      break;
 800e7b0:	e010      	b.n	800e7d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 f9d0 	bl	800eb58 <USBD_CtlSendStatus>
      break;
 800e7b8:	e00c      	b.n	800e7d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e7ba:	6839      	ldr	r1, [r7, #0]
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 f900 	bl	800e9c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7c2:	4b07      	ldr	r3, [pc, #28]	@ (800e7e0 <USBD_SetConfig+0x150>)
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7fe ff64 	bl	800d696 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e7ce:	2303      	movs	r3, #3
 800e7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800e7d2:	bf00      	nop
  }

  return ret;
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	240003c0 	.word	0x240003c0

0800e7e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	88db      	ldrh	r3, [r3, #6]
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d004      	beq.n	800e800 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e7f6:	6839      	ldr	r1, [r7, #0]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 f8e2 	bl	800e9c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e7fe:	e023      	b.n	800e848 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b02      	cmp	r3, #2
 800e80a:	dc02      	bgt.n	800e812 <USBD_GetConfig+0x2e>
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	dc03      	bgt.n	800e818 <USBD_GetConfig+0x34>
 800e810:	e015      	b.n	800e83e <USBD_GetConfig+0x5a>
 800e812:	2b03      	cmp	r3, #3
 800e814:	d00b      	beq.n	800e82e <USBD_GetConfig+0x4a>
 800e816:	e012      	b.n	800e83e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	3308      	adds	r3, #8
 800e822:	2201      	movs	r2, #1
 800e824:	4619      	mov	r1, r3
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 f93c 	bl	800eaa4 <USBD_CtlSendData>
        break;
 800e82c:	e00c      	b.n	800e848 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	3304      	adds	r3, #4
 800e832:	2201      	movs	r2, #1
 800e834:	4619      	mov	r1, r3
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 f934 	bl	800eaa4 <USBD_CtlSendData>
        break;
 800e83c:	e004      	b.n	800e848 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e83e:	6839      	ldr	r1, [r7, #0]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 f8be 	bl	800e9c2 <USBD_CtlError>
        break;
 800e846:	bf00      	nop
}
 800e848:	bf00      	nop
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e860:	b2db      	uxtb	r3, r3
 800e862:	3b01      	subs	r3, #1
 800e864:	2b02      	cmp	r3, #2
 800e866:	d81e      	bhi.n	800e8a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	88db      	ldrh	r3, [r3, #6]
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	d004      	beq.n	800e87a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e870:	6839      	ldr	r1, [r7, #0]
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f8a5 	bl	800e9c2 <USBD_CtlError>
        break;
 800e878:	e01a      	b.n	800e8b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2201      	movs	r2, #1
 800e87e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e886:	2b00      	cmp	r3, #0
 800e888:	d005      	beq.n	800e896 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	f043 0202 	orr.w	r2, r3, #2
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	330c      	adds	r3, #12
 800e89a:	2202      	movs	r2, #2
 800e89c:	4619      	mov	r1, r3
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f900 	bl	800eaa4 <USBD_CtlSendData>
      break;
 800e8a4:	e004      	b.n	800e8b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 f88a 	bl	800e9c2 <USBD_CtlError>
      break;
 800e8ae:	bf00      	nop
  }
}
 800e8b0:	bf00      	nop
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	885b      	ldrh	r3, [r3, #2]
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d107      	bne.n	800e8da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f940 	bl	800eb58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e8d8:	e013      	b.n	800e902 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	885b      	ldrh	r3, [r3, #2]
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	d10b      	bne.n	800e8fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	889b      	ldrh	r3, [r3, #4]
 800e8e6:	0a1b      	lsrs	r3, r3, #8
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 f930 	bl	800eb58 <USBD_CtlSendStatus>
}
 800e8f8:	e003      	b.n	800e902 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 f860 	bl	800e9c2 <USBD_CtlError>
}
 800e902:	bf00      	nop
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b082      	sub	sp, #8
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
 800e912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	3b01      	subs	r3, #1
 800e91e:	2b02      	cmp	r3, #2
 800e920:	d80b      	bhi.n	800e93a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	885b      	ldrh	r3, [r3, #2]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d10c      	bne.n	800e944 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 f910 	bl	800eb58 <USBD_CtlSendStatus>
      }
      break;
 800e938:	e004      	b.n	800e944 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 f840 	bl	800e9c2 <USBD_CtlError>
      break;
 800e942:	e000      	b.n	800e946 <USBD_ClrFeature+0x3c>
      break;
 800e944:	bf00      	nop
  }
}
 800e946:	bf00      	nop
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b084      	sub	sp, #16
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	781a      	ldrb	r2, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	3301      	adds	r3, #1
 800e968:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	781a      	ldrb	r2, [r3, #0]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	3301      	adds	r3, #1
 800e976:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	f7ff fa16 	bl	800ddaa <SWAPBYTE>
 800e97e:	4603      	mov	r3, r0
 800e980:	461a      	mov	r2, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	3301      	adds	r3, #1
 800e98a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	3301      	adds	r3, #1
 800e990:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	f7ff fa09 	bl	800ddaa <SWAPBYTE>
 800e998:	4603      	mov	r3, r0
 800e99a:	461a      	mov	r2, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7ff f9fc 	bl	800ddaa <SWAPBYTE>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	80da      	strh	r2, [r3, #6]
}
 800e9ba:	bf00      	nop
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b082      	sub	sp, #8
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9cc:	2180      	movs	r1, #128	@ 0x80
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f001 f8ee 	bl	800fbb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f001 f8ea 	bl	800fbb0 <USBD_LL_StallEP>
}
 800e9dc:	bf00      	nop
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d036      	beq.n	800ea68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e9fe:	6938      	ldr	r0, [r7, #16]
 800ea00:	f000 f836 	bl	800ea70 <USBD_GetLen>
 800ea04:	4603      	mov	r3, r0
 800ea06:	3301      	adds	r3, #1
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	005b      	lsls	r3, r3, #1
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ea12:	7dfb      	ldrb	r3, [r7, #23]
 800ea14:	68ba      	ldr	r2, [r7, #8]
 800ea16:	4413      	add	r3, r2
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	7812      	ldrb	r2, [r2, #0]
 800ea1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea1e:	7dfb      	ldrb	r3, [r7, #23]
 800ea20:	3301      	adds	r3, #1
 800ea22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ea24:	7dfb      	ldrb	r3, [r7, #23]
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	4413      	add	r3, r2
 800ea2a:	2203      	movs	r2, #3
 800ea2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea2e:	7dfb      	ldrb	r3, [r7, #23]
 800ea30:	3301      	adds	r3, #1
 800ea32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ea34:	e013      	b.n	800ea5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	693a      	ldr	r2, [r7, #16]
 800ea3e:	7812      	ldrb	r2, [r2, #0]
 800ea40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	3301      	adds	r3, #1
 800ea46:	613b      	str	r3, [r7, #16]
    idx++;
 800ea48:	7dfb      	ldrb	r3, [r7, #23]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ea4e:	7dfb      	ldrb	r3, [r7, #23]
 800ea50:	68ba      	ldr	r2, [r7, #8]
 800ea52:	4413      	add	r3, r2
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]
    idx++;
 800ea58:	7dfb      	ldrb	r3, [r7, #23]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1e7      	bne.n	800ea36 <USBD_GetString+0x52>
 800ea66:	e000      	b.n	800ea6a <USBD_GetString+0x86>
    return;
 800ea68:	bf00      	nop
  }
}
 800ea6a:	3718      	adds	r7, #24
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b085      	sub	sp, #20
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ea80:	e005      	b.n	800ea8e <USBD_GetLen+0x1e>
  {
    len++;
 800ea82:	7bfb      	ldrb	r3, [r7, #15]
 800ea84:	3301      	adds	r3, #1
 800ea86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1f5      	bne.n	800ea82 <USBD_GetLen+0x12>
  }

  return len;
 800ea96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3714      	adds	r7, #20
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2202      	movs	r2, #2
 800eab4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	68ba      	ldr	r2, [r7, #8]
 800eac8:	2100      	movs	r1, #0
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f001 f8f9 	bl	800fcc2 <USBD_LL_Transmit>

  return USBD_OK;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b084      	sub	sp, #16
 800eade:	af00      	add	r7, sp, #0
 800eae0:	60f8      	str	r0, [r7, #12]
 800eae2:	60b9      	str	r1, [r7, #8]
 800eae4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	68ba      	ldr	r2, [r7, #8]
 800eaea:	2100      	movs	r1, #0
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f001 f8e8 	bl	800fcc2 <USBD_LL_Transmit>

  return USBD_OK;
 800eaf2:	2300      	movs	r3, #0
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2203      	movs	r2, #3
 800eb0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	68ba      	ldr	r2, [r7, #8]
 800eb24:	2100      	movs	r1, #0
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	f001 f8ec 	bl	800fd04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b084      	sub	sp, #16
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	60f8      	str	r0, [r7, #12]
 800eb3e:	60b9      	str	r1, [r7, #8]
 800eb40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	2100      	movs	r1, #0
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	f001 f8db 	bl	800fd04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2204      	movs	r2, #4
 800eb64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eb68:	2300      	movs	r3, #0
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f001 f8a7 	bl	800fcc2 <USBD_LL_Transmit>

  return USBD_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b082      	sub	sp, #8
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2205      	movs	r2, #5
 800eb8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb8e:	2300      	movs	r3, #0
 800eb90:	2200      	movs	r2, #0
 800eb92:	2100      	movs	r1, #0
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f001 f8b5 	bl	800fd04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <OLED_WR_Byte>:
//[7]0 1 2 3 ... 127
// 向SSD1306写入一个字节
// dat:要写入的数据/命令
// cmd:数据/命令标志 0，表示命令；1，表示数据
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	4603      	mov	r3, r0
 800ebac:	460a      	mov	r2, r1
 800ebae:	71fb      	strb	r3, [r7, #7]
 800ebb0:	4613      	mov	r3, r2
 800ebb2:	71bb      	strb	r3, [r7, #6]
	if (cmd)
 800ebb4:	79bb      	ldrb	r3, [r7, #6]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d005      	beq.n	800ebc6 <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set(); // 命令/数据标志位置为1，则表示传送的是命令字节
 800ebba:	2201      	movs	r2, #1
 800ebbc:	2140      	movs	r1, #64	@ 0x40
 800ebbe:	4811      	ldr	r0, [pc, #68]	@ (800ec04 <OLED_WR_Byte+0x60>)
 800ebc0:	f7f5 fb74 	bl	80042ac <HAL_GPIO_WritePin>
 800ebc4:	e004      	b.n	800ebd0 <OLED_WR_Byte+0x2c>
	}
	else
		OLED_DC_Clr();						 // 命令/数据标志位置为0，则表示传送的是数据字节
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	2140      	movs	r1, #64	@ 0x40
 800ebca:	480e      	ldr	r0, [pc, #56]	@ (800ec04 <OLED_WR_Byte+0x60>)
 800ebcc:	f7f5 fb6e 	bl	80042ac <HAL_GPIO_WritePin>
	OLED_CS_Clr();							 // 片选信号为低，表示选中OLED
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	2102      	movs	r1, #2
 800ebd4:	480c      	ldr	r0, [pc, #48]	@ (800ec08 <OLED_WR_Byte+0x64>)
 800ebd6:	f7f5 fb69 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000); // oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 800ebda:	1df9      	adds	r1, r7, #7
 800ebdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	480a      	ldr	r0, [pc, #40]	@ (800ec0c <OLED_WR_Byte+0x68>)
 800ebe4:	f7fa fdda 	bl	800979c <HAL_SPI_Transmit>
	OLED_CS_Set();
 800ebe8:	2201      	movs	r2, #1
 800ebea:	2102      	movs	r1, #2
 800ebec:	4806      	ldr	r0, [pc, #24]	@ (800ec08 <OLED_WR_Byte+0x64>)
 800ebee:	f7f5 fb5d 	bl	80042ac <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	2140      	movs	r1, #64	@ 0x40
 800ebf6:	4803      	ldr	r0, [pc, #12]	@ (800ec04 <OLED_WR_Byte+0x60>)
 800ebf8:	f7f5 fb58 	bl	80042ac <HAL_GPIO_WritePin>
}
 800ebfc:	bf00      	nop
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	58022000 	.word	0x58022000
 800ec08:	58020400 	.word	0x58020400
 800ec0c:	2400024c 	.word	0x2400024c

0800ec10 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	4603      	mov	r3, r0
 800ec18:	460a      	mov	r2, r1
 800ec1a:	71fb      	strb	r3, [r7, #7]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0 + y, OLED_CMD);
 800ec20:	79bb      	ldrb	r3, [r7, #6]
 800ec22:	3b50      	subs	r3, #80	@ 0x50
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2100      	movs	r1, #0
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7ff ffbb 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte((((x + 2) & 0xf0) >> 4) | 0x10, OLED_CMD);
 800ec2e:	79fb      	ldrb	r3, [r7, #7]
 800ec30:	3302      	adds	r3, #2
 800ec32:	111b      	asrs	r3, r3, #4
 800ec34:	b25b      	sxtb	r3, r3
 800ec36:	f003 030f 	and.w	r3, r3, #15
 800ec3a:	b25b      	sxtb	r3, r3
 800ec3c:	f043 0310 	orr.w	r3, r3, #16
 800ec40:	b25b      	sxtb	r3, r3
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	2100      	movs	r1, #0
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7ff ffac 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(((x + 2) & 0x0f), OLED_CMD);
 800ec4c:	79fb      	ldrb	r3, [r7, #7]
 800ec4e:	3302      	adds	r3, #2
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	f003 030f 	and.w	r3, r3, #15
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	2100      	movs	r1, #0
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7ff ffa2 	bl	800eba4 <OLED_WR_Byte>
}
 800ec60:	bf00      	nop
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <OLED_Clear>:
	OLED_WR_Byte(0X10, OLED_CMD); // 关闭电荷泵
	OLED_WR_Byte(0XAE, OLED_CMD); // DISPLAY OFF
}
// 清屏函数，清完后整个屏幕都是黑色的，没有一点光亮
void OLED_Clear(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800ec6e:	2300      	movs	r3, #0
 800ec70:	71fb      	strb	r3, [r7, #7]
 800ec72:	e01f      	b.n	800ecb4 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置页地址
 800ec74:	79fb      	ldrb	r3, [r7, #7]
 800ec76:	3b50      	subs	r3, #80	@ 0x50
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7ff ff91 	bl	800eba4 <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);	  // 设置起始列低地址
 800ec82:	2100      	movs	r1, #0
 800ec84:	2002      	movs	r0, #2
 800ec86:	f7ff ff8d 	bl	800eba4 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置起始列高地址
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	2010      	movs	r0, #16
 800ec8e:	f7ff ff89 	bl	800eba4 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800ec92:	2300      	movs	r3, #0
 800ec94:	71bb      	strb	r3, [r7, #6]
 800ec96:	e006      	b.n	800eca6 <OLED_Clear+0x3e>
			OLED_WR_Byte(0, OLED_DATA);
 800ec98:	2101      	movs	r1, #1
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	f7ff ff82 	bl	800eba4 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800eca0:	79bb      	ldrb	r3, [r7, #6]
 800eca2:	3301      	adds	r3, #1
 800eca4:	71bb      	strb	r3, [r7, #6]
 800eca6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	daf4      	bge.n	800ec98 <OLED_Clear+0x30>
	for (i = 0; i < 8; i++)
 800ecae:	79fb      	ldrb	r3, [r7, #7]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	71fb      	strb	r3, [r7, #7]
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
 800ecb6:	2b07      	cmp	r3, #7
 800ecb8:	d9dc      	bls.n	800ec74 <OLED_Clear+0xc>
	} // 更新显示
}
 800ecba:	bf00      	nop
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <OLED_ShowChar>:
// x:0~127
// y:0~6
// mode:0,反白显示；1，正常显示
// size:选择字体大小 16/12
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	4603      	mov	r3, r0
 800eccc:	71fb      	strb	r3, [r7, #7]
 800ecce:	460b      	mov	r3, r1
 800ecd0:	71bb      	strb	r3, [r7, #6]
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0, i = 0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	73bb      	strb	r3, [r7, #14]
 800ecda:	2300      	movs	r3, #0
 800ecdc:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; // 得到偏移后的值
 800ecde:	797b      	ldrb	r3, [r7, #5]
 800ece0:	3b20      	subs	r3, #32
 800ece2:	73bb      	strb	r3, [r7, #14]
	if (x > Max_Column - 1)
 800ece4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	da04      	bge.n	800ecf6 <OLED_ShowChar+0x32>
	{
		x = 0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 800ecf0:	79bb      	ldrb	r3, [r7, #6]
 800ecf2:	3302      	adds	r3, #2
 800ecf4:	71bb      	strb	r3, [r7, #6]
	}
	if (SIZE == 16)
	{
		OLED_Set_Pos(x, y);
 800ecf6:	79ba      	ldrb	r2, [r7, #6]
 800ecf8:	79fb      	ldrb	r3, [r7, #7]
 800ecfa:	4611      	mov	r1, r2
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7ff ff87 	bl	800ec10 <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 800ed02:	2300      	movs	r3, #0
 800ed04:	73fb      	strb	r3, [r7, #15]
 800ed06:	e00c      	b.n	800ed22 <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 800ed08:	7bbb      	ldrb	r3, [r7, #14]
 800ed0a:	011a      	lsls	r2, r3, #4
 800ed0c:	7bfb      	ldrb	r3, [r7, #15]
 800ed0e:	4413      	add	r3, r2
 800ed10:	4a16      	ldr	r2, [pc, #88]	@ (800ed6c <OLED_ShowChar+0xa8>)
 800ed12:	5cd3      	ldrb	r3, [r2, r3]
 800ed14:	2101      	movs	r1, #1
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7ff ff44 	bl	800eba4 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 800ed1c:	7bfb      	ldrb	r3, [r7, #15]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	73fb      	strb	r3, [r7, #15]
 800ed22:	7bfb      	ldrb	r3, [r7, #15]
 800ed24:	2b07      	cmp	r3, #7
 800ed26:	d9ef      	bls.n	800ed08 <OLED_ShowChar+0x44>
		OLED_Set_Pos(x, y + 1);
 800ed28:	79bb      	ldrb	r3, [r7, #6]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	79fb      	ldrb	r3, [r7, #7]
 800ed30:	4611      	mov	r1, r2
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7ff ff6c 	bl	800ec10 <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 800ed38:	2300      	movs	r3, #0
 800ed3a:	73fb      	strb	r3, [r7, #15]
 800ed3c:	e00d      	b.n	800ed5a <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 800ed3e:	7bbb      	ldrb	r3, [r7, #14]
 800ed40:	011a      	lsls	r2, r3, #4
 800ed42:	7bfb      	ldrb	r3, [r7, #15]
 800ed44:	4413      	add	r3, r2
 800ed46:	3308      	adds	r3, #8
 800ed48:	4a08      	ldr	r2, [pc, #32]	@ (800ed6c <OLED_ShowChar+0xa8>)
 800ed4a:	5cd3      	ldrb	r3, [r2, r3]
 800ed4c:	2101      	movs	r1, #1
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff ff28 	bl	800eba4 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
 800ed56:	3301      	adds	r3, #1
 800ed58:	73fb      	strb	r3, [r7, #15]
 800ed5a:	7bfb      	ldrb	r3, [r7, #15]
 800ed5c:	2b07      	cmp	r3, #7
 800ed5e:	d9ee      	bls.n	800ed3e <OLED_ShowChar+0x7a>
	{
		OLED_Set_Pos(x, y + 1);
		for (i = 0; i < 6; i++)
			OLED_WR_Byte(F6x8[c][i], OLED_DATA);
	}
}
 800ed60:	bf00      	nop
 800ed62:	bf00      	nop
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	08010b40 	.word	0x08010b40

0800ed70 <OLED_ShowString>:
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0');
	}
}
// 显示一个字符串
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	4603      	mov	r3, r0
 800ed78:	603a      	str	r2, [r7, #0]
 800ed7a:	71fb      	strb	r3, [r7, #7]
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	71bb      	strb	r3, [r7, #6]
	unsigned char j = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 800ed84:	e016      	b.n	800edb4 <OLED_ShowString+0x44>
	{
		OLED_ShowChar(x, y, chr[j]);
 800ed86:	7bfb      	ldrb	r3, [r7, #15]
 800ed88:	683a      	ldr	r2, [r7, #0]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	781a      	ldrb	r2, [r3, #0]
 800ed8e:	79b9      	ldrb	r1, [r7, #6]
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff ff96 	bl	800ecc4 <OLED_ShowChar>
		x += 8;
 800ed98:	79fb      	ldrb	r3, [r7, #7]
 800ed9a:	3308      	adds	r3, #8
 800ed9c:	71fb      	strb	r3, [r7, #7]
		if (x > 120)
 800ed9e:	79fb      	ldrb	r3, [r7, #7]
 800eda0:	2b78      	cmp	r3, #120	@ 0x78
 800eda2:	d904      	bls.n	800edae <OLED_ShowString+0x3e>
		{
			x = 0;
 800eda4:	2300      	movs	r3, #0
 800eda6:	71fb      	strb	r3, [r7, #7]
			y += 2;
 800eda8:	79bb      	ldrb	r3, [r7, #6]
 800edaa:	3302      	adds	r3, #2
 800edac:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 800edae:	7bfb      	ldrb	r3, [r7, #15]
 800edb0:	3301      	adds	r3, #1
 800edb2:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	4413      	add	r3, r2
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d1e2      	bne.n	800ed86 <OLED_ShowString+0x16>
	}
}
 800edc0:	bf00      	nop
 800edc2:	bf00      	nop
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
	...

0800edcc <OLED_Init>:
	}
}

// 初始化SSD1306
void OLED_Init(void)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0

	OLED_RST_Clr();
 800edd0:	2200      	movs	r2, #0
 800edd2:	2120      	movs	r1, #32
 800edd4:	4841      	ldr	r0, [pc, #260]	@ (800eedc <OLED_Init+0x110>)
 800edd6:	f7f5 fa69 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800edda:	20c8      	movs	r0, #200	@ 0xc8
 800eddc:	f7f2 fcc6 	bl	800176c <HAL_Delay>
	OLED_RST_Set();
 800ede0:	2201      	movs	r2, #1
 800ede2:	2120      	movs	r1, #32
 800ede4:	483d      	ldr	r0, [pc, #244]	@ (800eedc <OLED_Init+0x110>)
 800ede6:	f7f5 fa61 	bl	80042ac <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800edea:	2100      	movs	r1, #0
 800edec:	20ae      	movs	r0, #174	@ 0xae
 800edee:	f7ff fed9 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //---set low column address
 800edf2:	2100      	movs	r1, #0
 800edf4:	2002      	movs	r0, #2
 800edf6:	f7ff fed5 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800edfa:	2100      	movs	r1, #0
 800edfc:	2010      	movs	r0, #16
 800edfe:	f7ff fed1 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800ee02:	2100      	movs	r1, #0
 800ee04:	2040      	movs	r0, #64	@ 0x40
 800ee06:	f7ff fecd 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	2081      	movs	r0, #129	@ 0x81
 800ee0e:	f7ff fec9 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800ee12:	2100      	movs	r1, #0
 800ee14:	20cf      	movs	r0, #207	@ 0xcf
 800ee16:	f7ff fec5 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0Xa0左右反置 0Xa1正常
 800ee1a:	2100      	movs	r1, #0
 800ee1c:	20a1      	movs	r0, #161	@ 0xa1
 800ee1e:	f7ff fec1 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0Xc0上下反置 0Xc8正常
 800ee22:	2100      	movs	r1, #0
 800ee24:	20c8      	movs	r0, #200	@ 0xc8
 800ee26:	f7ff febd 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	20a6      	movs	r0, #166	@ 0xa6
 800ee2e:	f7ff feb9 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800ee32:	2100      	movs	r1, #0
 800ee34:	20a8      	movs	r0, #168	@ 0xa8
 800ee36:	f7ff feb5 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	203f      	movs	r0, #63	@ 0x3f
 800ee3e:	f7ff feb1 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800ee42:	2100      	movs	r1, #0
 800ee44:	20d3      	movs	r0, #211	@ 0xd3
 800ee46:	f7ff fead 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	f7ff fea9 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800ee52:	2100      	movs	r1, #0
 800ee54:	20d5      	movs	r0, #213	@ 0xd5
 800ee56:	f7ff fea5 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	2080      	movs	r0, #128	@ 0x80
 800ee5e:	f7ff fea1 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800ee62:	2100      	movs	r1, #0
 800ee64:	20d9      	movs	r0, #217	@ 0xd9
 800ee66:	f7ff fe9d 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	20f1      	movs	r0, #241	@ 0xf1
 800ee6e:	f7ff fe99 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800ee72:	2100      	movs	r1, #0
 800ee74:	20da      	movs	r0, #218	@ 0xda
 800ee76:	f7ff fe95 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	2012      	movs	r0, #18
 800ee7e:	f7ff fe91 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800ee82:	2100      	movs	r1, #0
 800ee84:	20db      	movs	r0, #219	@ 0xdb
 800ee86:	f7ff fe8d 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	2040      	movs	r0, #64	@ 0x40
 800ee8e:	f7ff fe89 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800ee92:	2100      	movs	r1, #0
 800ee94:	2020      	movs	r0, #32
 800ee96:	f7ff fe85 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800ee9a:	2100      	movs	r1, #0
 800ee9c:	2002      	movs	r0, #2
 800ee9e:	f7ff fe81 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800eea2:	2100      	movs	r1, #0
 800eea4:	208d      	movs	r0, #141	@ 0x8d
 800eea6:	f7ff fe7d 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800eeaa:	2100      	movs	r1, #0
 800eeac:	2014      	movs	r0, #20
 800eeae:	f7ff fe79 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800eeb2:	2100      	movs	r1, #0
 800eeb4:	20a4      	movs	r0, #164	@ 0xa4
 800eeb6:	f7ff fe75 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800eeba:	2100      	movs	r1, #0
 800eebc:	20a6      	movs	r0, #166	@ 0xa6
 800eebe:	f7ff fe71 	bl	800eba4 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); //--turn on oled panel
 800eec2:	2100      	movs	r1, #0
 800eec4:	20af      	movs	r0, #175	@ 0xaf
 800eec6:	f7ff fe6d 	bl	800eba4 <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*display ON*/
 800eeca:	2100      	movs	r1, #0
 800eecc:	20af      	movs	r0, #175	@ 0xaf
 800eece:	f7ff fe69 	bl	800eba4 <OLED_WR_Byte>
	OLED_Clear();
 800eed2:	f7ff fec9 	bl	800ec68 <OLED_Clear>
}
 800eed6:	bf00      	nop
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	58020800 	.word	0x58020800

0800eee0 <pll_Init>:
 * @param config: 配置指针
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	ed87 0a01 	vstr	s0, [r7, #4]
 800eeee:	4613      	mov	r3, r2
 800eef0:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f04f 0200 	mov.w	r2, #0
 800eef8:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f04f 0200 	mov.w	r2, #0
 800ef00:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f04f 0200 	mov.w	r2, #0
 800ef08:	609a      	str	r2, [r3, #8]

    signal->sogi_d_1 = 0.f;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f04f 0200 	mov.w	r2, #0
 800ef10:	611a      	str	r2, [r3, #16]
    signal->sogi_d_2 = 0.f;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f04f 0200 	mov.w	r2, #0
 800ef18:	615a      	str	r2, [r3, #20]

    signal->sogi_q_1 = 0.f;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f04f 0200 	mov.w	r2, #0
 800ef20:	61da      	str	r2, [r3, #28]
    signal->sogi_q_2 = 0.f;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f04f 0200 	mov.w	r2, #0
 800ef28:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f04f 0200 	mov.w	r2, #0
 800ef30:	62da      	str	r2, [r3, #44]	@ 0x2c

    config->omiga = 2 * PI * f; // f典型值50
 800ef32:	edd7 7a01 	vldr	s15, [r7, #4]
 800ef36:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f09c <pll_Init+0x1bc>
 800ef3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 800ef44:	887b      	ldrh	r3, [r7, #2]
 800ef46:	ee07 3a90 	vmov	s15, r3
 800ef4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ef4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	4a50      	ldr	r2, [pc, #320]	@ (800f0a0 <pll_Init+0x1c0>)
 800ef60:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	f04f 0200 	mov.w	r2, #0
 800ef68:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	edd3 7a00 	vldr	s15, [r3]
 800ef70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ef74:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ef7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	edd3 7a02 	vldr	s15, [r3, #8]
 800ef8e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	edd3 7a00 	vldr	s15, [r3]
 800ef98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	edd3 7a01 	vldr	s15, [r3, #4]
 800efa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	ed93 7a00 	vldr	s14, [r3]
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	edd3 7a01 	vldr	s15, [r3, #4]
 800efb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	edd3 7a00 	vldr	s15, [r3]
 800efc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	edd3 7a01 	vldr	s15, [r3, #4]
 800efcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800efe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efec:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800eff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800f004:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f008:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800f00c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800f01c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f020:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f024:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800f03e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f042:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f046:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800f056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f05a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f05e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	4a0d      	ldr	r2, [pc, #52]	@ (800f0a4 <pll_Init+0x1c4>)
 800f070:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	4a0c      	ldr	r2, [pc, #48]	@ (800f0a8 <pll_Init+0x1c8>)
 800f076:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	f04f 0200 	mov.w	r2, #0
 800f07e:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f04f 0200 	mov.w	r2, #0
 800f086:	639a      	str	r2, [r3, #56]	@ 0x38
    signal->pid_out = 0.f;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f04f 0200 	mov.w	r2, #0
 800f08e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800f090:	bf00      	nop
 800f092:	3714      	adds	r7, #20
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	40c90fdb 	.word	0x40c90fdb
 800f0a0:	3fb4fdf4 	.word	0x3fb4fdf4
 800f0a4:	428d78c3 	.word	0x428d78c3
 800f0a8:	46758fb9 	.word	0x46758fb9
 800f0ac:	00000000 	.word	0x00000000

0800f0b0 <pll_Control>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Control(pll_Signal *signal, pll_Config *config)
{
 800f0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0b2:	ed2d 8b02 	vpush	{d8}
 800f0b6:	b089      	sub	sp, #36	@ 0x24
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal);
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 f8e8 	bl	800f294 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal->sogi_d_0, signal->sogi_q_0 / 382 * 3, &signal->park_d, &signal->park_q, arm_sin_f32(signal->theta), arm_cos_f32(signal->theta));
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68de      	ldr	r6, [r3, #12]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	ed93 7a06 	vldr	s14, [r3, #24]
 800f0ce:	eddf 6a42 	vldr	s13, [pc, #264]	@ 800f1d8 <pll_Control+0x128>
 800f0d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f0d6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800f0da:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f0f0:	eeb0 0a67 	vmov.f32	s0, s15
 800f0f4:	f000 fe7e 	bl	800fdf4 <arm_sin_f32>
 800f0f8:	eef0 8a40 	vmov.f32	s17, s0
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f102:	eeb0 0a67 	vmov.f32	s0, s15
 800f106:	f000 febb 	bl	800fe80 <arm_cos_f32>
 800f10a:	eef0 7a40 	vmov.f32	s15, s0
 800f10e:	61fe      	str	r6, [r7, #28]
 800f110:	ed87 8a06 	vstr	s16, [r7, #24]
 800f114:	617d      	str	r5, [r7, #20]
 800f116:	613c      	str	r4, [r7, #16]
 800f118:	edc7 8a03 	vstr	s17, [r7, #12]
 800f11c:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800f120:	ed97 7a07 	vldr	s14, [r7, #28]
 800f124:	edd7 7a02 	vldr	s15, [r7, #8]
 800f128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f12c:	edd7 6a06 	vldr	s13, [r7, #24]
 800f130:	edd7 7a03 	vldr	s15, [r7, #12]
 800f134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800f142:	edd7 7a07 	vldr	s15, [r7, #28]
 800f146:	eeb1 7a67 	vneg.f32	s14, s15
 800f14a:	edd7 7a03 	vldr	s15, [r7, #12]
 800f14e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f152:	edd7 6a06 	vldr	s13, [r7, #24]
 800f156:	edd7 7a02 	vldr	s15, [r7, #8]
 800f15a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f15e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	edc3 7a00 	vstr	s15, [r3]
  }
 800f168:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal, config);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 f835 	bl	800f1dc <pll_Pid>

    signal->theta += (signal->pid_out + config->omiga) * config->Ts;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	edd3 7a00 	vldr	s15, [r3]
 800f184:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f18e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f192:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    signal->theta = (float)fmod(signal->theta, 2 * PI);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f1a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f1a6:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 800f1d0 <pll_Control+0x120>
 800f1aa:	eeb0 0b47 	vmov.f64	d0, d7
 800f1ae:	f001 fb5b 	bl	8010868 <fmod>
 800f1b2:	eeb0 7b40 	vmov.f64	d7, d0
 800f1b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 800f1c0:	bf00      	nop
 800f1c2:	3724      	adds	r7, #36	@ 0x24
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	ecbd 8b02 	vpop	{d8}
 800f1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1cc:	f3af 8000 	nop.w
 800f1d0:	60000000 	.word	0x60000000
 800f1d4:	401921fb 	.word	0x401921fb
 800f1d8:	43bf0000 	.word	0x43bf0000

0800f1dc <pll_Pid>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	edd3 7a03 	vldr	s15, [r3, #12]
 800f1f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	edd3 6a04 	vldr	s13, [r3, #16]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800f214:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f21c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	edd3 6a05 	vldr	s13, [r3, #20]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f22c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f230:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f240:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800f284 <pll_Pid+0xa8>
 800f244:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f24c:	dd03      	ble.n	800f256 <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4a0d      	ldr	r2, [pc, #52]	@ (800f288 <pll_Pid+0xac>)
 800f252:	631a      	str	r2, [r3, #48]	@ 0x30
 800f254:	e00c      	b.n	800f270 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f25c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800f28c <pll_Pid+0xb0>
 800f260:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f268:	d502      	bpl.n	800f270 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4a08      	ldr	r2, [pc, #32]	@ (800f290 <pll_Pid+0xb4>)
 800f26e:	631a      	str	r2, [r3, #48]	@ 0x30

    signal->pid_err[1] = signal->pid_err[0];
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800f278:	bf00      	nop
 800f27a:	370c      	adds	r7, #12
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr
 800f284:	431d1463 	.word	0x431d1463
 800f288:	431d1463 	.word	0x431d1463
 800f28c:	c27b53d2 	.word	0xc27b53d2
 800f290:	c27b53d2 	.word	0xc27b53d2

0800f294 <pll_Sogi>:
 * @brief Sogi变换
 *
 * @param signal: 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
    signal->sogi_d_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_d_1 + signal->a2 * signal->sogi_d_2;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	edd3 7a00 	vldr	s15, [r3]
 800f2a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	edd3 7a02 	vldr	s15, [r3, #8]
 800f2b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	edd3 7a04 	vldr	s15, [r3, #16]
 800f2cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	edd3 7a05 	vldr	s15, [r3, #20]
 800f2e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_q_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_q_1 + signal->a2 * signal->sogi_q_2;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	edd3 7a00 	vldr	s15, [r3]
 800f2fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800f304:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f30e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f312:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f326:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	edd3 7a07 	vldr	s15, [r3, #28]
 800f336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f33a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	edd3 7a08 	vldr	s15, [r3, #32]
 800f34a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f34e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	685a      	ldr	r2, [r3, #4]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	605a      	str	r2, [r3, #4]
    signal->sogi_d_2 = signal->sogi_d_1;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	691a      	ldr	r2, [r3, #16]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	615a      	str	r2, [r3, #20]
    signal->sogi_d_1 = signal->sogi_d_0;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68da      	ldr	r2, [r3, #12]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	611a      	str	r2, [r3, #16]
    signal->sogi_q_2 = signal->sogi_q_1;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	69da      	ldr	r2, [r3, #28]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	621a      	str	r2, [r3, #32]
    signal->sogi_q_1 = signal->sogi_q_0;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	699a      	ldr	r2, [r3, #24]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	61da      	str	r2, [r3, #28]
}
 800f388:	bf00      	nop
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f398:	2200      	movs	r2, #0
 800f39a:	4913      	ldr	r1, [pc, #76]	@ (800f3e8 <MX_USB_DEVICE_Init+0x54>)
 800f39c:	4813      	ldr	r0, [pc, #76]	@ (800f3ec <MX_USB_DEVICE_Init+0x58>)
 800f39e:	f7fe f8e1 	bl	800d564 <USBD_Init>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d001      	beq.n	800f3ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f3a8:	f7f1 fd60 	bl	8000e6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f3ac:	4910      	ldr	r1, [pc, #64]	@ (800f3f0 <MX_USB_DEVICE_Init+0x5c>)
 800f3ae:	480f      	ldr	r0, [pc, #60]	@ (800f3ec <MX_USB_DEVICE_Init+0x58>)
 800f3b0:	f7fe f908 	bl	800d5c4 <USBD_RegisterClass>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d001      	beq.n	800f3be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f3ba:	f7f1 fd57 	bl	8000e6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f3be:	490d      	ldr	r1, [pc, #52]	@ (800f3f4 <MX_USB_DEVICE_Init+0x60>)
 800f3c0:	480a      	ldr	r0, [pc, #40]	@ (800f3ec <MX_USB_DEVICE_Init+0x58>)
 800f3c2:	f7fd ffff 	bl	800d3c4 <USBD_CDC_RegisterInterface>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d001      	beq.n	800f3d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f3cc:	f7f1 fd4e 	bl	8000e6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f3d0:	4806      	ldr	r0, [pc, #24]	@ (800f3ec <MX_USB_DEVICE_Init+0x58>)
 800f3d2:	f7fe f92d 	bl	800d630 <USBD_Start>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d001      	beq.n	800f3e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f3dc:	f7f1 fd46 	bl	8000e6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f3e0:	f7f6 fb98 	bl	8005b14 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f3e4:	bf00      	nop
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	240000b0 	.word	0x240000b0
 800f3ec:	240003c4 	.word	0x240003c4
 800f3f0:	2400001c 	.word	0x2400001c
 800f3f4:	2400009c 	.word	0x2400009c

0800f3f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	4905      	ldr	r1, [pc, #20]	@ (800f414 <CDC_Init_FS+0x1c>)
 800f400:	4805      	ldr	r0, [pc, #20]	@ (800f418 <CDC_Init_FS+0x20>)
 800f402:	f7fd fff9 	bl	800d3f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f406:	4905      	ldr	r1, [pc, #20]	@ (800f41c <CDC_Init_FS+0x24>)
 800f408:	4803      	ldr	r0, [pc, #12]	@ (800f418 <CDC_Init_FS+0x20>)
 800f40a:	f7fe f817 	bl	800d43c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f40e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f410:	4618      	mov	r0, r3
 800f412:	bd80      	pop	{r7, pc}
 800f414:	24000ea0 	.word	0x24000ea0
 800f418:	240003c4 	.word	0x240003c4
 800f41c:	240006a0 	.word	0x240006a0

0800f420 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f420:	b480      	push	{r7}
 800f422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f424:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f426:	4618      	mov	r0, r3
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	4603      	mov	r3, r0
 800f438:	6039      	str	r1, [r7, #0]
 800f43a:	71fb      	strb	r3, [r7, #7]
 800f43c:	4613      	mov	r3, r2
 800f43e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f440:	79fb      	ldrb	r3, [r7, #7]
 800f442:	2b23      	cmp	r3, #35	@ 0x23
 800f444:	d84a      	bhi.n	800f4dc <CDC_Control_FS+0xac>
 800f446:	a201      	add	r2, pc, #4	@ (adr r2, 800f44c <CDC_Control_FS+0x1c>)
 800f448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f44c:	0800f4dd 	.word	0x0800f4dd
 800f450:	0800f4dd 	.word	0x0800f4dd
 800f454:	0800f4dd 	.word	0x0800f4dd
 800f458:	0800f4dd 	.word	0x0800f4dd
 800f45c:	0800f4dd 	.word	0x0800f4dd
 800f460:	0800f4dd 	.word	0x0800f4dd
 800f464:	0800f4dd 	.word	0x0800f4dd
 800f468:	0800f4dd 	.word	0x0800f4dd
 800f46c:	0800f4dd 	.word	0x0800f4dd
 800f470:	0800f4dd 	.word	0x0800f4dd
 800f474:	0800f4dd 	.word	0x0800f4dd
 800f478:	0800f4dd 	.word	0x0800f4dd
 800f47c:	0800f4dd 	.word	0x0800f4dd
 800f480:	0800f4dd 	.word	0x0800f4dd
 800f484:	0800f4dd 	.word	0x0800f4dd
 800f488:	0800f4dd 	.word	0x0800f4dd
 800f48c:	0800f4dd 	.word	0x0800f4dd
 800f490:	0800f4dd 	.word	0x0800f4dd
 800f494:	0800f4dd 	.word	0x0800f4dd
 800f498:	0800f4dd 	.word	0x0800f4dd
 800f49c:	0800f4dd 	.word	0x0800f4dd
 800f4a0:	0800f4dd 	.word	0x0800f4dd
 800f4a4:	0800f4dd 	.word	0x0800f4dd
 800f4a8:	0800f4dd 	.word	0x0800f4dd
 800f4ac:	0800f4dd 	.word	0x0800f4dd
 800f4b0:	0800f4dd 	.word	0x0800f4dd
 800f4b4:	0800f4dd 	.word	0x0800f4dd
 800f4b8:	0800f4dd 	.word	0x0800f4dd
 800f4bc:	0800f4dd 	.word	0x0800f4dd
 800f4c0:	0800f4dd 	.word	0x0800f4dd
 800f4c4:	0800f4dd 	.word	0x0800f4dd
 800f4c8:	0800f4dd 	.word	0x0800f4dd
 800f4cc:	0800f4dd 	.word	0x0800f4dd
 800f4d0:	0800f4dd 	.word	0x0800f4dd
 800f4d4:	0800f4dd 	.word	0x0800f4dd
 800f4d8:	0800f4dd 	.word	0x0800f4dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f4dc:	bf00      	nop
  }

  return (USBD_OK);
 800f4de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr

0800f4ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f4f6:	6879      	ldr	r1, [r7, #4]
 800f4f8:	4805      	ldr	r0, [pc, #20]	@ (800f510 <CDC_Receive_FS+0x24>)
 800f4fa:	f7fd ff9f 	bl	800d43c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f4fe:	4804      	ldr	r0, [pc, #16]	@ (800f510 <CDC_Receive_FS+0x24>)
 800f500:	f7fd fffa 	bl	800d4f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f504:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f506:	4618      	mov	r0, r3
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	240003c4 	.word	0x240003c4

0800f514 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	460b      	mov	r3, r1
 800f51e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f520:	2300      	movs	r3, #0
 800f522:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f524:	4b0d      	ldr	r3, [pc, #52]	@ (800f55c <CDC_Transmit_FS+0x48>)
 800f526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f52a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f536:	2301      	movs	r3, #1
 800f538:	e00b      	b.n	800f552 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f53a:	887b      	ldrh	r3, [r7, #2]
 800f53c:	461a      	mov	r2, r3
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	4806      	ldr	r0, [pc, #24]	@ (800f55c <CDC_Transmit_FS+0x48>)
 800f542:	f7fd ff59 	bl	800d3f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f546:	4805      	ldr	r0, [pc, #20]	@ (800f55c <CDC_Transmit_FS+0x48>)
 800f548:	f7fd ff96 	bl	800d478 <USBD_CDC_TransmitPacket>
 800f54c:	4603      	mov	r3, r0
 800f54e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f550:	7bfb      	ldrb	r3, [r7, #15]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	240003c4 	.word	0x240003c4

0800f560 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f560:	b480      	push	{r7}
 800f562:	b087      	sub	sp, #28
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	4613      	mov	r3, r2
 800f56c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f56e:	2300      	movs	r3, #0
 800f570:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f576:	4618      	mov	r0, r3
 800f578:	371c      	adds	r7, #28
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
	...

0800f584 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	4603      	mov	r3, r0
 800f58c:	6039      	str	r1, [r7, #0]
 800f58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2212      	movs	r2, #18
 800f594:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f596:	4b03      	ldr	r3, [pc, #12]	@ (800f5a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f598:	4618      	mov	r0, r3
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr
 800f5a4:	240000d0 	.word	0x240000d0

0800f5a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	6039      	str	r1, [r7, #0]
 800f5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	2204      	movs	r2, #4
 800f5b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f5ba:	4b03      	ldr	r3, [pc, #12]	@ (800f5c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr
 800f5c8:	240000e4 	.word	0x240000e4

0800f5cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	6039      	str	r1, [r7, #0]
 800f5d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f5d8:	79fb      	ldrb	r3, [r7, #7]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d105      	bne.n	800f5ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f5de:	683a      	ldr	r2, [r7, #0]
 800f5e0:	4907      	ldr	r1, [pc, #28]	@ (800f600 <USBD_FS_ProductStrDescriptor+0x34>)
 800f5e2:	4808      	ldr	r0, [pc, #32]	@ (800f604 <USBD_FS_ProductStrDescriptor+0x38>)
 800f5e4:	f7ff f9fe 	bl	800e9e4 <USBD_GetString>
 800f5e8:	e004      	b.n	800f5f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	4904      	ldr	r1, [pc, #16]	@ (800f600 <USBD_FS_ProductStrDescriptor+0x34>)
 800f5ee:	4805      	ldr	r0, [pc, #20]	@ (800f604 <USBD_FS_ProductStrDescriptor+0x38>)
 800f5f0:	f7ff f9f8 	bl	800e9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5f4:	4b02      	ldr	r3, [pc, #8]	@ (800f600 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	240016a0 	.word	0x240016a0
 800f604:	08010ae8 	.word	0x08010ae8

0800f608 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	4603      	mov	r3, r0
 800f610:	6039      	str	r1, [r7, #0]
 800f612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f614:	683a      	ldr	r2, [r7, #0]
 800f616:	4904      	ldr	r1, [pc, #16]	@ (800f628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f618:	4804      	ldr	r0, [pc, #16]	@ (800f62c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f61a:	f7ff f9e3 	bl	800e9e4 <USBD_GetString>
  return USBD_StrDesc;
 800f61e:	4b02      	ldr	r3, [pc, #8]	@ (800f628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f620:	4618      	mov	r0, r3
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	240016a0 	.word	0x240016a0
 800f62c:	08010b00 	.word	0x08010b00

0800f630 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	4603      	mov	r3, r0
 800f638:	6039      	str	r1, [r7, #0]
 800f63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	221a      	movs	r2, #26
 800f640:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f642:	f000 f843 	bl	800f6cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f646:	4b02      	ldr	r3, [pc, #8]	@ (800f650 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	240000e8 	.word	0x240000e8

0800f654 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	4603      	mov	r3, r0
 800f65c:	6039      	str	r1, [r7, #0]
 800f65e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f660:	79fb      	ldrb	r3, [r7, #7]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d105      	bne.n	800f672 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f666:	683a      	ldr	r2, [r7, #0]
 800f668:	4907      	ldr	r1, [pc, #28]	@ (800f688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f66a:	4808      	ldr	r0, [pc, #32]	@ (800f68c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f66c:	f7ff f9ba 	bl	800e9e4 <USBD_GetString>
 800f670:	e004      	b.n	800f67c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f672:	683a      	ldr	r2, [r7, #0]
 800f674:	4904      	ldr	r1, [pc, #16]	@ (800f688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f676:	4805      	ldr	r0, [pc, #20]	@ (800f68c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f678:	f7ff f9b4 	bl	800e9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f67c:	4b02      	ldr	r3, [pc, #8]	@ (800f688 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	240016a0 	.word	0x240016a0
 800f68c:	08010b14 	.word	0x08010b14

0800f690 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	4603      	mov	r3, r0
 800f698:	6039      	str	r1, [r7, #0]
 800f69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f69c:	79fb      	ldrb	r3, [r7, #7]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d105      	bne.n	800f6ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	4907      	ldr	r1, [pc, #28]	@ (800f6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f6a6:	4808      	ldr	r0, [pc, #32]	@ (800f6c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f6a8:	f7ff f99c 	bl	800e9e4 <USBD_GetString>
 800f6ac:	e004      	b.n	800f6b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f6ae:	683a      	ldr	r2, [r7, #0]
 800f6b0:	4904      	ldr	r1, [pc, #16]	@ (800f6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f6b2:	4805      	ldr	r0, [pc, #20]	@ (800f6c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f6b4:	f7ff f996 	bl	800e9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6b8:	4b02      	ldr	r3, [pc, #8]	@ (800f6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3708      	adds	r7, #8
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	240016a0 	.word	0x240016a0
 800f6c8:	08010b20 	.word	0x08010b20

0800f6cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d009      	beq.n	800f6f4 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f6e0:	2208      	movs	r2, #8
 800f6e2:	4906      	ldr	r1, [pc, #24]	@ (800f6fc <Get_SerialNum+0x30>)
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	f000 f80d 	bl	800f704 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f6ea:	2204      	movs	r2, #4
 800f6ec:	4904      	ldr	r1, [pc, #16]	@ (800f700 <Get_SerialNum+0x34>)
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 f808 	bl	800f704 <IntToUnicode>
  }
}
 800f6f4:	bf00      	nop
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	240000ea 	.word	0x240000ea
 800f700:	240000fa 	.word	0x240000fa

0800f704 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f704:	b480      	push	{r7}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	4613      	mov	r3, r2
 800f710:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f712:	2300      	movs	r3, #0
 800f714:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f716:	2300      	movs	r3, #0
 800f718:	75fb      	strb	r3, [r7, #23]
 800f71a:	e027      	b.n	800f76c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	0f1b      	lsrs	r3, r3, #28
 800f720:	2b09      	cmp	r3, #9
 800f722:	d80b      	bhi.n	800f73c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	0f1b      	lsrs	r3, r3, #28
 800f728:	b2da      	uxtb	r2, r3
 800f72a:	7dfb      	ldrb	r3, [r7, #23]
 800f72c:	005b      	lsls	r3, r3, #1
 800f72e:	4619      	mov	r1, r3
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	440b      	add	r3, r1
 800f734:	3230      	adds	r2, #48	@ 0x30
 800f736:	b2d2      	uxtb	r2, r2
 800f738:	701a      	strb	r2, [r3, #0]
 800f73a:	e00a      	b.n	800f752 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	0f1b      	lsrs	r3, r3, #28
 800f740:	b2da      	uxtb	r2, r3
 800f742:	7dfb      	ldrb	r3, [r7, #23]
 800f744:	005b      	lsls	r3, r3, #1
 800f746:	4619      	mov	r1, r3
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	440b      	add	r3, r1
 800f74c:	3237      	adds	r2, #55	@ 0x37
 800f74e:	b2d2      	uxtb	r2, r2
 800f750:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	011b      	lsls	r3, r3, #4
 800f756:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f758:	7dfb      	ldrb	r3, [r7, #23]
 800f75a:	005b      	lsls	r3, r3, #1
 800f75c:	3301      	adds	r3, #1
 800f75e:	68ba      	ldr	r2, [r7, #8]
 800f760:	4413      	add	r3, r2
 800f762:	2200      	movs	r2, #0
 800f764:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f766:	7dfb      	ldrb	r3, [r7, #23]
 800f768:	3301      	adds	r3, #1
 800f76a:	75fb      	strb	r3, [r7, #23]
 800f76c:	7dfa      	ldrb	r2, [r7, #23]
 800f76e:	79fb      	ldrb	r3, [r7, #7]
 800f770:	429a      	cmp	r2, r3
 800f772:	d3d3      	bcc.n	800f71c <IntToUnicode+0x18>
  }
}
 800f774:	bf00      	nop
 800f776:	bf00      	nop
 800f778:	371c      	adds	r7, #28
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
	...

0800f784 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b0ba      	sub	sp, #232	@ 0xe8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f78c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f790:	2200      	movs	r2, #0
 800f792:	601a      	str	r2, [r3, #0]
 800f794:	605a      	str	r2, [r3, #4]
 800f796:	609a      	str	r2, [r3, #8]
 800f798:	60da      	str	r2, [r3, #12]
 800f79a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f79c:	f107 0310 	add.w	r3, r7, #16
 800f7a0:	22c0      	movs	r2, #192	@ 0xc0
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f000 fc8b 	bl	80100c0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	4a2c      	ldr	r2, [pc, #176]	@ (800f860 <HAL_PCD_MspInit+0xdc>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d151      	bne.n	800f858 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f7b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f7b8:	f04f 0300 	mov.w	r3, #0
 800f7bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800f7c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f7c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f7c8:	f107 0310 	add.w	r3, r7, #16
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7f7 f9c3 	bl	8006b58 <HAL_RCCEx_PeriphCLKConfig>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d001      	beq.n	800f7dc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f7d8:	f7f1 fb48 	bl	8000e6c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f7dc:	f7f6 f99a 	bl	8005b14 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f7e0:	4b20      	ldr	r3, [pc, #128]	@ (800f864 <HAL_PCD_MspInit+0xe0>)
 800f7e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f7e6:	4a1f      	ldr	r2, [pc, #124]	@ (800f864 <HAL_PCD_MspInit+0xe0>)
 800f7e8:	f043 0301 	orr.w	r3, r3, #1
 800f7ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f7f0:	4b1c      	ldr	r3, [pc, #112]	@ (800f864 <HAL_PCD_MspInit+0xe0>)
 800f7f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f7f6:	f003 0301 	and.w	r3, r3, #1
 800f7fa:	60fb      	str	r3, [r7, #12]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f7fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f802:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f806:	2302      	movs	r3, #2
 800f808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f80c:	2300      	movs	r3, #0
 800f80e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f812:	2300      	movs	r3, #0
 800f814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f818:	230a      	movs	r3, #10
 800f81a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f81e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f822:	4619      	mov	r1, r3
 800f824:	4810      	ldr	r0, [pc, #64]	@ (800f868 <HAL_PCD_MspInit+0xe4>)
 800f826:	f7f4 fb91 	bl	8003f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f82a:	4b0e      	ldr	r3, [pc, #56]	@ (800f864 <HAL_PCD_MspInit+0xe0>)
 800f82c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f830:	4a0c      	ldr	r2, [pc, #48]	@ (800f864 <HAL_PCD_MspInit+0xe0>)
 800f832:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f836:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f83a:	4b0a      	ldr	r3, [pc, #40]	@ (800f864 <HAL_PCD_MspInit+0xe0>)
 800f83c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f844:	60bb      	str	r3, [r7, #8]
 800f846:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f848:	2200      	movs	r2, #0
 800f84a:	2100      	movs	r1, #0
 800f84c:	2065      	movs	r0, #101	@ 0x65
 800f84e:	f7f3 fc7d 	bl	800314c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f852:	2065      	movs	r0, #101	@ 0x65
 800f854:	f7f3 fc94 	bl	8003180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f858:	bf00      	nop
 800f85a:	37e8      	adds	r7, #232	@ 0xe8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	40080000 	.word	0x40080000
 800f864:	58024400 	.word	0x58024400
 800f868:	58020000 	.word	0x58020000

0800f86c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800f880:	4619      	mov	r1, r3
 800f882:	4610      	mov	r0, r2
 800f884:	f7fd ff21 	bl	800d6ca <USBD_LL_SetupStage>
}
 800f888:	bf00      	nop
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800f8a2:	78fa      	ldrb	r2, [r7, #3]
 800f8a4:	6879      	ldr	r1, [r7, #4]
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	00db      	lsls	r3, r3, #3
 800f8aa:	4413      	add	r3, r2
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	440b      	add	r3, r1
 800f8b0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	78fb      	ldrb	r3, [r7, #3]
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	f7fd ff5b 	bl	800d774 <USBD_LL_DataOutStage>
}
 800f8be:	bf00      	nop
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8c6:	b580      	push	{r7, lr}
 800f8c8:	b082      	sub	sp, #8
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800f8d8:	78fa      	ldrb	r2, [r7, #3]
 800f8da:	6879      	ldr	r1, [r7, #4]
 800f8dc:	4613      	mov	r3, r2
 800f8de:	00db      	lsls	r3, r3, #3
 800f8e0:	4413      	add	r3, r2
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	440b      	add	r3, r1
 800f8e6:	3348      	adds	r3, #72	@ 0x48
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	78fb      	ldrb	r3, [r7, #3]
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	f7fd fff4 	bl	800d8da <USBD_LL_DataInStage>
}
 800f8f2:	bf00      	nop
 800f8f4:	3708      	adds	r7, #8
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b082      	sub	sp, #8
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fe f92e 	bl	800db6a <USBD_LL_SOF>
}
 800f90e:	bf00      	nop
 800f910:	3708      	adds	r7, #8
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f916:	b580      	push	{r7, lr}
 800f918:	b084      	sub	sp, #16
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f91e:	2301      	movs	r3, #1
 800f920:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	691b      	ldr	r3, [r3, #16]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d102      	bne.n	800f930 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f92a:	2300      	movs	r3, #0
 800f92c:	73fb      	strb	r3, [r7, #15]
 800f92e:	e008      	b.n	800f942 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	2b02      	cmp	r3, #2
 800f936:	d102      	bne.n	800f93e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f938:	2301      	movs	r3, #1
 800f93a:	73fb      	strb	r3, [r7, #15]
 800f93c:	e001      	b.n	800f942 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f93e:	f7f1 fa95 	bl	8000e6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800f948:	7bfa      	ldrb	r2, [r7, #15]
 800f94a:	4611      	mov	r1, r2
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fe f8c8 	bl	800dae2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800f958:	4618      	mov	r0, r3
 800f95a:	f7fe f870 	bl	800da3e <USBD_LL_Reset>
}
 800f95e:	bf00      	nop
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
	...

0800f968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800f976:	4618      	mov	r0, r3
 800f978:	f7fe f8c3 	bl	800db02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	6812      	ldr	r2, [r2, #0]
 800f98a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f98e:	f043 0301 	orr.w	r3, r3, #1
 800f992:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a1b      	ldr	r3, [r3, #32]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d005      	beq.n	800f9a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f99c:	4b04      	ldr	r3, [pc, #16]	@ (800f9b0 <HAL_PCD_SuspendCallback+0x48>)
 800f99e:	691b      	ldr	r3, [r3, #16]
 800f9a0:	4a03      	ldr	r2, [pc, #12]	@ (800f9b0 <HAL_PCD_SuspendCallback+0x48>)
 800f9a2:	f043 0306 	orr.w	r3, r3, #6
 800f9a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f9a8:	bf00      	nop
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	e000ed00 	.word	0xe000ed00

0800f9b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fe f8b9 	bl	800db3a <USBD_LL_Resume>
}
 800f9c8:	bf00      	nop
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800f9e2:	78fa      	ldrb	r2, [r7, #3]
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fe f911 	bl	800dc0e <USBD_LL_IsoOUTIncomplete>
}
 800f9ec:	bf00      	nop
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fa06:	78fa      	ldrb	r2, [r7, #3]
 800fa08:	4611      	mov	r1, r2
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe f8cd 	bl	800dbaa <USBD_LL_IsoINIncomplete>
}
 800fa10:	bf00      	nop
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fe f923 	bl	800dc72 <USBD_LL_DevConnected>
}
 800fa2c:	bf00      	nop
 800fa2e:	3708      	adds	r7, #8
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fe f920 	bl	800dc88 <USBD_LL_DevDisconnected>
}
 800fa48:	bf00      	nop
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d13e      	bne.n	800fade <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fa60:	4a21      	ldr	r2, [pc, #132]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a1f      	ldr	r2, [pc, #124]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa6c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa70:	4b1d      	ldr	r3, [pc, #116]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa72:	4a1e      	ldr	r2, [pc, #120]	@ (800faec <USBD_LL_Init+0x9c>)
 800fa74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fa76:	4b1c      	ldr	r3, [pc, #112]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa78:	2209      	movs	r2, #9
 800fa7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fa7c:	4b1a      	ldr	r3, [pc, #104]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa7e:	2202      	movs	r2, #2
 800fa80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fa82:	4b19      	ldr	r3, [pc, #100]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa88:	4b17      	ldr	r3, [pc, #92]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa8a:	2202      	movs	r2, #2
 800fa8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fa8e:	4b16      	ldr	r3, [pc, #88]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fa94:	4b14      	ldr	r3, [pc, #80]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fa9a:	4b13      	ldr	r3, [pc, #76]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800faa0:	4b11      	ldr	r3, [pc, #68]	@ (800fae8 <USBD_LL_Init+0x98>)
 800faa2:	2200      	movs	r2, #0
 800faa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800faa6:	4b10      	ldr	r3, [pc, #64]	@ (800fae8 <USBD_LL_Init+0x98>)
 800faa8:	2200      	movs	r2, #0
 800faaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800faac:	4b0e      	ldr	r3, [pc, #56]	@ (800fae8 <USBD_LL_Init+0x98>)
 800faae:	2200      	movs	r2, #0
 800fab0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fab2:	480d      	ldr	r0, [pc, #52]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fab4:	f7f4 fd3b 	bl	800452e <HAL_PCD_Init>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d001      	beq.n	800fac2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fabe:	f7f1 f9d5 	bl	8000e6c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fac2:	2180      	movs	r1, #128	@ 0x80
 800fac4:	4808      	ldr	r0, [pc, #32]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fac6:	f7f5 ffaa 	bl	8005a1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800faca:	2240      	movs	r2, #64	@ 0x40
 800facc:	2100      	movs	r1, #0
 800face:	4806      	ldr	r0, [pc, #24]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fad0:	f7f5 ff5e 	bl	8005990 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fad4:	2280      	movs	r2, #128	@ 0x80
 800fad6:	2101      	movs	r1, #1
 800fad8:	4803      	ldr	r0, [pc, #12]	@ (800fae8 <USBD_LL_Init+0x98>)
 800fada:	f7f5 ff59 	bl	8005990 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	240018a0 	.word	0x240018a0
 800faec:	40080000 	.word	0x40080000

0800faf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faf8:	2300      	movs	r3, #0
 800fafa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fafc:	2300      	movs	r3, #0
 800fafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7f4 fe35 	bl	8004776 <HAL_PCD_Start>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb10:	7bfb      	ldrb	r3, [r7, #15]
 800fb12:	4618      	mov	r0, r3
 800fb14:	f000 f942 	bl	800fd9c <USBD_Get_USB_Status>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b084      	sub	sp, #16
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
 800fb2e:	4608      	mov	r0, r1
 800fb30:	4611      	mov	r1, r2
 800fb32:	461a      	mov	r2, r3
 800fb34:	4603      	mov	r3, r0
 800fb36:	70fb      	strb	r3, [r7, #3]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	70bb      	strb	r3, [r7, #2]
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb40:	2300      	movs	r3, #0
 800fb42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb44:	2300      	movs	r3, #0
 800fb46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fb4e:	78bb      	ldrb	r3, [r7, #2]
 800fb50:	883a      	ldrh	r2, [r7, #0]
 800fb52:	78f9      	ldrb	r1, [r7, #3]
 800fb54:	f7f5 fb35 	bl	80051c2 <HAL_PCD_EP_Open>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f000 f91c 	bl	800fd9c <USBD_Get_USB_Status>
 800fb64:	4603      	mov	r3, r0
 800fb66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb68:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b084      	sub	sp, #16
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb82:	2300      	movs	r3, #0
 800fb84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb8c:	78fa      	ldrb	r2, [r7, #3]
 800fb8e:	4611      	mov	r1, r2
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7f5 fb7e 	bl	8005292 <HAL_PCD_EP_Close>
 800fb96:	4603      	mov	r3, r0
 800fb98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb9a:	7bfb      	ldrb	r3, [r7, #15]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f000 f8fd 	bl	800fd9c <USBD_Get_USB_Status>
 800fba2:	4603      	mov	r3, r0
 800fba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fba6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fbca:	78fa      	ldrb	r2, [r7, #3]
 800fbcc:	4611      	mov	r1, r2
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7f5 fc38 	bl	8005444 <HAL_PCD_EP_SetStall>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f000 f8de 	bl	800fd9c <USBD_Get_USB_Status>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3710      	adds	r7, #16
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b084      	sub	sp, #16
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
 800fbf6:	460b      	mov	r3, r1
 800fbf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fc08:	78fa      	ldrb	r2, [r7, #3]
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f5 fc7d 	bl	800550c <HAL_PCD_EP_ClrStall>
 800fc12:	4603      	mov	r3, r0
 800fc14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc16:	7bfb      	ldrb	r3, [r7, #15]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f000 f8bf 	bl	800fd9c <USBD_Get_USB_Status>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc22:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b085      	sub	sp, #20
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	460b      	mov	r3, r1
 800fc36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fc3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	da0b      	bge.n	800fc60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc48:	78fb      	ldrb	r3, [r7, #3]
 800fc4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc4e:	68f9      	ldr	r1, [r7, #12]
 800fc50:	4613      	mov	r3, r2
 800fc52:	00db      	lsls	r3, r3, #3
 800fc54:	4413      	add	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	440b      	add	r3, r1
 800fc5a:	333e      	adds	r3, #62	@ 0x3e
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	e00b      	b.n	800fc78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fc60:	78fb      	ldrb	r3, [r7, #3]
 800fc62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc66:	68f9      	ldr	r1, [r7, #12]
 800fc68:	4613      	mov	r3, r2
 800fc6a:	00db      	lsls	r3, r3, #3
 800fc6c:	4413      	add	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	440b      	add	r3, r1
 800fc72:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800fc76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3714      	adds	r7, #20
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc90:	2300      	movs	r3, #0
 800fc92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc94:	2300      	movs	r3, #0
 800fc96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fc9e:	78fa      	ldrb	r2, [r7, #3]
 800fca0:	4611      	mov	r1, r2
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7f5 fa68 	bl	8005178 <HAL_PCD_SetAddress>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcac:	7bfb      	ldrb	r3, [r7, #15]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f000 f874 	bl	800fd9c <USBD_Get_USB_Status>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b086      	sub	sp, #24
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	60f8      	str	r0, [r7, #12]
 800fcca:	607a      	str	r2, [r7, #4]
 800fccc:	603b      	str	r3, [r7, #0]
 800fcce:	460b      	mov	r3, r1
 800fcd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fce0:	7af9      	ldrb	r1, [r7, #11]
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	f7f5 fb72 	bl	80053ce <HAL_PCD_EP_Transmit>
 800fcea:	4603      	mov	r3, r0
 800fcec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcee:	7dfb      	ldrb	r3, [r7, #23]
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f000 f853 	bl	800fd9c <USBD_Get_USB_Status>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcfa:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b086      	sub	sp, #24
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	607a      	str	r2, [r7, #4]
 800fd0e:	603b      	str	r3, [r7, #0]
 800fd10:	460b      	mov	r3, r1
 800fd12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd14:	2300      	movs	r3, #0
 800fd16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fd22:	7af9      	ldrb	r1, [r7, #11]
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	f7f5 fafd 	bl	8005326 <HAL_PCD_EP_Receive>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd30:	7dfb      	ldrb	r3, [r7, #23]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f000 f832 	bl	800fd9c <USBD_Get_USB_Status>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd3c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3718      	adds	r7, #24
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}

0800fd46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd46:	b580      	push	{r7, lr}
 800fd48:	b082      	sub	sp, #8
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
 800fd4e:	460b      	mov	r3, r1
 800fd50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fd58:	78fa      	ldrb	r2, [r7, #3]
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7f5 fb1e 	bl	800539e <HAL_PCD_EP_GetRxCount>
 800fd62:	4603      	mov	r3, r0
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fd74:	4b03      	ldr	r3, [pc, #12]	@ (800fd84 <USBD_static_malloc+0x18>)
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	24001dac 	.word	0x24001dac

0800fd88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800fd90:	bf00      	nop
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	4603      	mov	r3, r0
 800fda4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fda6:	2300      	movs	r3, #0
 800fda8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fdaa:	79fb      	ldrb	r3, [r7, #7]
 800fdac:	2b03      	cmp	r3, #3
 800fdae:	d817      	bhi.n	800fde0 <USBD_Get_USB_Status+0x44>
 800fdb0:	a201      	add	r2, pc, #4	@ (adr r2, 800fdb8 <USBD_Get_USB_Status+0x1c>)
 800fdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdb6:	bf00      	nop
 800fdb8:	0800fdc9 	.word	0x0800fdc9
 800fdbc:	0800fdcf 	.word	0x0800fdcf
 800fdc0:	0800fdd5 	.word	0x0800fdd5
 800fdc4:	0800fddb 	.word	0x0800fddb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	73fb      	strb	r3, [r7, #15]
    break;
 800fdcc:	e00b      	b.n	800fde6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fdce:	2303      	movs	r3, #3
 800fdd0:	73fb      	strb	r3, [r7, #15]
    break;
 800fdd2:	e008      	b.n	800fde6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	73fb      	strb	r3, [r7, #15]
    break;
 800fdd8:	e005      	b.n	800fde6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fdda:	2303      	movs	r3, #3
 800fddc:	73fb      	strb	r3, [r7, #15]
    break;
 800fdde:	e002      	b.n	800fde6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fde0:	2303      	movs	r3, #3
 800fde2:	73fb      	strb	r3, [r7, #15]
    break;
 800fde4:	bf00      	nop
  }
  return usb_status;
 800fde6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3714      	adds	r7, #20
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <arm_sin_f32>:
 800fdf4:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800fe74 <arm_sin_f32+0x80>
 800fdf8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fdfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fe04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe08:	d504      	bpl.n	800fe14 <arm_sin_f32+0x20>
 800fe0a:	ee17 3a90 	vmov	r3, s15
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	ee07 3a90 	vmov	s15, r3
 800fe14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe18:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800fe78 <arm_sin_f32+0x84>
 800fe1c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fe20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fe24:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800fe28:	ee17 3a10 	vmov	r3, s14
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe32:	d21a      	bcs.n	800fe6a <arm_sin_f32+0x76>
 800fe34:	ee07 3a10 	vmov	s14, r3
 800fe38:	1c59      	adds	r1, r3, #1
 800fe3a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800fe3e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fe42:	4a0e      	ldr	r2, [pc, #56]	@ (800fe7c <arm_sin_f32+0x88>)
 800fe44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fe48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fe50:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fe54:	edd3 6a00 	vldr	s13, [r3]
 800fe58:	ed92 7a00 	vldr	s14, [r2]
 800fe5c:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fe60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe64:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe68:	4770      	bx	lr
 800fe6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fe6e:	2101      	movs	r1, #1
 800fe70:	2300      	movs	r3, #0
 800fe72:	e7e6      	b.n	800fe42 <arm_sin_f32+0x4e>
 800fe74:	3e22f983 	.word	0x3e22f983
 800fe78:	44000000 	.word	0x44000000
 800fe7c:	08011130 	.word	0x08011130

0800fe80 <arm_cos_f32>:
 800fe80:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800ff08 <arm_cos_f32+0x88>
 800fe84:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800fe88:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fe8c:	ee30 0a07 	vadd.f32	s0, s0, s14
 800fe90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe94:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fe98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9c:	d504      	bpl.n	800fea8 <arm_cos_f32+0x28>
 800fe9e:	ee17 3a90 	vmov	r3, s15
 800fea2:	3b01      	subs	r3, #1
 800fea4:	ee07 3a90 	vmov	s15, r3
 800fea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800feac:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800ff0c <arm_cos_f32+0x8c>
 800feb0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800feb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800feb8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800febc:	ee17 3a10 	vmov	r3, s14
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fec6:	d21a      	bcs.n	800fefe <arm_cos_f32+0x7e>
 800fec8:	ee07 3a10 	vmov	s14, r3
 800fecc:	1c59      	adds	r1, r3, #1
 800fece:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800fed2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fed6:	4a0e      	ldr	r2, [pc, #56]	@ (800ff10 <arm_cos_f32+0x90>)
 800fed8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fedc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fee0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fee4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fee8:	edd3 6a00 	vldr	s13, [r3]
 800feec:	ed92 7a00 	vldr	s14, [r2]
 800fef0:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fef8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fefc:	4770      	bx	lr
 800fefe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ff02:	2101      	movs	r1, #1
 800ff04:	2300      	movs	r3, #0
 800ff06:	e7e6      	b.n	800fed6 <arm_cos_f32+0x56>
 800ff08:	3e22f983 	.word	0x3e22f983
 800ff0c:	44000000 	.word	0x44000000
 800ff10:	08011130 	.word	0x08011130

0800ff14 <malloc>:
 800ff14:	4b02      	ldr	r3, [pc, #8]	@ (800ff20 <malloc+0xc>)
 800ff16:	4601      	mov	r1, r0
 800ff18:	6818      	ldr	r0, [r3, #0]
 800ff1a:	f000 b825 	b.w	800ff68 <_malloc_r>
 800ff1e:	bf00      	nop
 800ff20:	24000104 	.word	0x24000104

0800ff24 <sbrk_aligned>:
 800ff24:	b570      	push	{r4, r5, r6, lr}
 800ff26:	4e0f      	ldr	r6, [pc, #60]	@ (800ff64 <sbrk_aligned+0x40>)
 800ff28:	460c      	mov	r4, r1
 800ff2a:	6831      	ldr	r1, [r6, #0]
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	b911      	cbnz	r1, 800ff36 <sbrk_aligned+0x12>
 800ff30:	f000 f8ce 	bl	80100d0 <_sbrk_r>
 800ff34:	6030      	str	r0, [r6, #0]
 800ff36:	4621      	mov	r1, r4
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f000 f8c9 	bl	80100d0 <_sbrk_r>
 800ff3e:	1c43      	adds	r3, r0, #1
 800ff40:	d103      	bne.n	800ff4a <sbrk_aligned+0x26>
 800ff42:	f04f 34ff 	mov.w	r4, #4294967295
 800ff46:	4620      	mov	r0, r4
 800ff48:	bd70      	pop	{r4, r5, r6, pc}
 800ff4a:	1cc4      	adds	r4, r0, #3
 800ff4c:	f024 0403 	bic.w	r4, r4, #3
 800ff50:	42a0      	cmp	r0, r4
 800ff52:	d0f8      	beq.n	800ff46 <sbrk_aligned+0x22>
 800ff54:	1a21      	subs	r1, r4, r0
 800ff56:	4628      	mov	r0, r5
 800ff58:	f000 f8ba 	bl	80100d0 <_sbrk_r>
 800ff5c:	3001      	adds	r0, #1
 800ff5e:	d1f2      	bne.n	800ff46 <sbrk_aligned+0x22>
 800ff60:	e7ef      	b.n	800ff42 <sbrk_aligned+0x1e>
 800ff62:	bf00      	nop
 800ff64:	24001fcc 	.word	0x24001fcc

0800ff68 <_malloc_r>:
 800ff68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff6c:	1ccd      	adds	r5, r1, #3
 800ff6e:	f025 0503 	bic.w	r5, r5, #3
 800ff72:	3508      	adds	r5, #8
 800ff74:	2d0c      	cmp	r5, #12
 800ff76:	bf38      	it	cc
 800ff78:	250c      	movcc	r5, #12
 800ff7a:	2d00      	cmp	r5, #0
 800ff7c:	4606      	mov	r6, r0
 800ff7e:	db01      	blt.n	800ff84 <_malloc_r+0x1c>
 800ff80:	42a9      	cmp	r1, r5
 800ff82:	d904      	bls.n	800ff8e <_malloc_r+0x26>
 800ff84:	230c      	movs	r3, #12
 800ff86:	6033      	str	r3, [r6, #0]
 800ff88:	2000      	movs	r0, #0
 800ff8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010064 <_malloc_r+0xfc>
 800ff92:	f000 f869 	bl	8010068 <__malloc_lock>
 800ff96:	f8d8 3000 	ldr.w	r3, [r8]
 800ff9a:	461c      	mov	r4, r3
 800ff9c:	bb44      	cbnz	r4, 800fff0 <_malloc_r+0x88>
 800ff9e:	4629      	mov	r1, r5
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f7ff ffbf 	bl	800ff24 <sbrk_aligned>
 800ffa6:	1c43      	adds	r3, r0, #1
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	d158      	bne.n	801005e <_malloc_r+0xf6>
 800ffac:	f8d8 4000 	ldr.w	r4, [r8]
 800ffb0:	4627      	mov	r7, r4
 800ffb2:	2f00      	cmp	r7, #0
 800ffb4:	d143      	bne.n	801003e <_malloc_r+0xd6>
 800ffb6:	2c00      	cmp	r4, #0
 800ffb8:	d04b      	beq.n	8010052 <_malloc_r+0xea>
 800ffba:	6823      	ldr	r3, [r4, #0]
 800ffbc:	4639      	mov	r1, r7
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	eb04 0903 	add.w	r9, r4, r3
 800ffc4:	f000 f884 	bl	80100d0 <_sbrk_r>
 800ffc8:	4581      	cmp	r9, r0
 800ffca:	d142      	bne.n	8010052 <_malloc_r+0xea>
 800ffcc:	6821      	ldr	r1, [r4, #0]
 800ffce:	1a6d      	subs	r5, r5, r1
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	f7ff ffa6 	bl	800ff24 <sbrk_aligned>
 800ffd8:	3001      	adds	r0, #1
 800ffda:	d03a      	beq.n	8010052 <_malloc_r+0xea>
 800ffdc:	6823      	ldr	r3, [r4, #0]
 800ffde:	442b      	add	r3, r5
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	f8d8 3000 	ldr.w	r3, [r8]
 800ffe6:	685a      	ldr	r2, [r3, #4]
 800ffe8:	bb62      	cbnz	r2, 8010044 <_malloc_r+0xdc>
 800ffea:	f8c8 7000 	str.w	r7, [r8]
 800ffee:	e00f      	b.n	8010010 <_malloc_r+0xa8>
 800fff0:	6822      	ldr	r2, [r4, #0]
 800fff2:	1b52      	subs	r2, r2, r5
 800fff4:	d420      	bmi.n	8010038 <_malloc_r+0xd0>
 800fff6:	2a0b      	cmp	r2, #11
 800fff8:	d917      	bls.n	801002a <_malloc_r+0xc2>
 800fffa:	1961      	adds	r1, r4, r5
 800fffc:	42a3      	cmp	r3, r4
 800fffe:	6025      	str	r5, [r4, #0]
 8010000:	bf18      	it	ne
 8010002:	6059      	strne	r1, [r3, #4]
 8010004:	6863      	ldr	r3, [r4, #4]
 8010006:	bf08      	it	eq
 8010008:	f8c8 1000 	streq.w	r1, [r8]
 801000c:	5162      	str	r2, [r4, r5]
 801000e:	604b      	str	r3, [r1, #4]
 8010010:	4630      	mov	r0, r6
 8010012:	f000 f82f 	bl	8010074 <__malloc_unlock>
 8010016:	f104 000b 	add.w	r0, r4, #11
 801001a:	1d23      	adds	r3, r4, #4
 801001c:	f020 0007 	bic.w	r0, r0, #7
 8010020:	1ac2      	subs	r2, r0, r3
 8010022:	bf1c      	itt	ne
 8010024:	1a1b      	subne	r3, r3, r0
 8010026:	50a3      	strne	r3, [r4, r2]
 8010028:	e7af      	b.n	800ff8a <_malloc_r+0x22>
 801002a:	6862      	ldr	r2, [r4, #4]
 801002c:	42a3      	cmp	r3, r4
 801002e:	bf0c      	ite	eq
 8010030:	f8c8 2000 	streq.w	r2, [r8]
 8010034:	605a      	strne	r2, [r3, #4]
 8010036:	e7eb      	b.n	8010010 <_malloc_r+0xa8>
 8010038:	4623      	mov	r3, r4
 801003a:	6864      	ldr	r4, [r4, #4]
 801003c:	e7ae      	b.n	800ff9c <_malloc_r+0x34>
 801003e:	463c      	mov	r4, r7
 8010040:	687f      	ldr	r7, [r7, #4]
 8010042:	e7b6      	b.n	800ffb2 <_malloc_r+0x4a>
 8010044:	461a      	mov	r2, r3
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	42a3      	cmp	r3, r4
 801004a:	d1fb      	bne.n	8010044 <_malloc_r+0xdc>
 801004c:	2300      	movs	r3, #0
 801004e:	6053      	str	r3, [r2, #4]
 8010050:	e7de      	b.n	8010010 <_malloc_r+0xa8>
 8010052:	230c      	movs	r3, #12
 8010054:	6033      	str	r3, [r6, #0]
 8010056:	4630      	mov	r0, r6
 8010058:	f000 f80c 	bl	8010074 <__malloc_unlock>
 801005c:	e794      	b.n	800ff88 <_malloc_r+0x20>
 801005e:	6005      	str	r5, [r0, #0]
 8010060:	e7d6      	b.n	8010010 <_malloc_r+0xa8>
 8010062:	bf00      	nop
 8010064:	24001fd0 	.word	0x24001fd0

08010068 <__malloc_lock>:
 8010068:	4801      	ldr	r0, [pc, #4]	@ (8010070 <__malloc_lock+0x8>)
 801006a:	f000 b86b 	b.w	8010144 <__retarget_lock_acquire_recursive>
 801006e:	bf00      	nop
 8010070:	24002110 	.word	0x24002110

08010074 <__malloc_unlock>:
 8010074:	4801      	ldr	r0, [pc, #4]	@ (801007c <__malloc_unlock+0x8>)
 8010076:	f000 b866 	b.w	8010146 <__retarget_lock_release_recursive>
 801007a:	bf00      	nop
 801007c:	24002110 	.word	0x24002110

08010080 <siprintf>:
 8010080:	b40e      	push	{r1, r2, r3}
 8010082:	b500      	push	{lr}
 8010084:	b09c      	sub	sp, #112	@ 0x70
 8010086:	ab1d      	add	r3, sp, #116	@ 0x74
 8010088:	9002      	str	r0, [sp, #8]
 801008a:	9006      	str	r0, [sp, #24]
 801008c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010090:	4809      	ldr	r0, [pc, #36]	@ (80100b8 <siprintf+0x38>)
 8010092:	9107      	str	r1, [sp, #28]
 8010094:	9104      	str	r1, [sp, #16]
 8010096:	4909      	ldr	r1, [pc, #36]	@ (80100bc <siprintf+0x3c>)
 8010098:	f853 2b04 	ldr.w	r2, [r3], #4
 801009c:	9105      	str	r1, [sp, #20]
 801009e:	6800      	ldr	r0, [r0, #0]
 80100a0:	9301      	str	r3, [sp, #4]
 80100a2:	a902      	add	r1, sp, #8
 80100a4:	f000 f8f6 	bl	8010294 <_svfiprintf_r>
 80100a8:	9b02      	ldr	r3, [sp, #8]
 80100aa:	2200      	movs	r2, #0
 80100ac:	701a      	strb	r2, [r3, #0]
 80100ae:	b01c      	add	sp, #112	@ 0x70
 80100b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80100b4:	b003      	add	sp, #12
 80100b6:	4770      	bx	lr
 80100b8:	24000104 	.word	0x24000104
 80100bc:	ffff0208 	.word	0xffff0208

080100c0 <memset>:
 80100c0:	4402      	add	r2, r0
 80100c2:	4603      	mov	r3, r0
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d100      	bne.n	80100ca <memset+0xa>
 80100c8:	4770      	bx	lr
 80100ca:	f803 1b01 	strb.w	r1, [r3], #1
 80100ce:	e7f9      	b.n	80100c4 <memset+0x4>

080100d0 <_sbrk_r>:
 80100d0:	b538      	push	{r3, r4, r5, lr}
 80100d2:	4d06      	ldr	r5, [pc, #24]	@ (80100ec <_sbrk_r+0x1c>)
 80100d4:	2300      	movs	r3, #0
 80100d6:	4604      	mov	r4, r0
 80100d8:	4608      	mov	r0, r1
 80100da:	602b      	str	r3, [r5, #0]
 80100dc:	f7f1 f88e 	bl	80011fc <_sbrk>
 80100e0:	1c43      	adds	r3, r0, #1
 80100e2:	d102      	bne.n	80100ea <_sbrk_r+0x1a>
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	b103      	cbz	r3, 80100ea <_sbrk_r+0x1a>
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	2400210c 	.word	0x2400210c

080100f0 <__errno>:
 80100f0:	4b01      	ldr	r3, [pc, #4]	@ (80100f8 <__errno+0x8>)
 80100f2:	6818      	ldr	r0, [r3, #0]
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	24000104 	.word	0x24000104

080100fc <__libc_init_array>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	4d0d      	ldr	r5, [pc, #52]	@ (8010134 <__libc_init_array+0x38>)
 8010100:	4c0d      	ldr	r4, [pc, #52]	@ (8010138 <__libc_init_array+0x3c>)
 8010102:	1b64      	subs	r4, r4, r5
 8010104:	10a4      	asrs	r4, r4, #2
 8010106:	2600      	movs	r6, #0
 8010108:	42a6      	cmp	r6, r4
 801010a:	d109      	bne.n	8010120 <__libc_init_array+0x24>
 801010c:	4d0b      	ldr	r5, [pc, #44]	@ (801013c <__libc_init_array+0x40>)
 801010e:	4c0c      	ldr	r4, [pc, #48]	@ (8010140 <__libc_init_array+0x44>)
 8010110:	f000 fcda 	bl	8010ac8 <_init>
 8010114:	1b64      	subs	r4, r4, r5
 8010116:	10a4      	asrs	r4, r4, #2
 8010118:	2600      	movs	r6, #0
 801011a:	42a6      	cmp	r6, r4
 801011c:	d105      	bne.n	801012a <__libc_init_array+0x2e>
 801011e:	bd70      	pop	{r4, r5, r6, pc}
 8010120:	f855 3b04 	ldr.w	r3, [r5], #4
 8010124:	4798      	blx	r3
 8010126:	3601      	adds	r6, #1
 8010128:	e7ee      	b.n	8010108 <__libc_init_array+0xc>
 801012a:	f855 3b04 	ldr.w	r3, [r5], #4
 801012e:	4798      	blx	r3
 8010130:	3601      	adds	r6, #1
 8010132:	e7f2      	b.n	801011a <__libc_init_array+0x1e>
 8010134:	08011980 	.word	0x08011980
 8010138:	08011980 	.word	0x08011980
 801013c:	08011980 	.word	0x08011980
 8010140:	08011984 	.word	0x08011984

08010144 <__retarget_lock_acquire_recursive>:
 8010144:	4770      	bx	lr

08010146 <__retarget_lock_release_recursive>:
 8010146:	4770      	bx	lr

08010148 <_free_r>:
 8010148:	b538      	push	{r3, r4, r5, lr}
 801014a:	4605      	mov	r5, r0
 801014c:	2900      	cmp	r1, #0
 801014e:	d041      	beq.n	80101d4 <_free_r+0x8c>
 8010150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010154:	1f0c      	subs	r4, r1, #4
 8010156:	2b00      	cmp	r3, #0
 8010158:	bfb8      	it	lt
 801015a:	18e4      	addlt	r4, r4, r3
 801015c:	f7ff ff84 	bl	8010068 <__malloc_lock>
 8010160:	4a1d      	ldr	r2, [pc, #116]	@ (80101d8 <_free_r+0x90>)
 8010162:	6813      	ldr	r3, [r2, #0]
 8010164:	b933      	cbnz	r3, 8010174 <_free_r+0x2c>
 8010166:	6063      	str	r3, [r4, #4]
 8010168:	6014      	str	r4, [r2, #0]
 801016a:	4628      	mov	r0, r5
 801016c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010170:	f7ff bf80 	b.w	8010074 <__malloc_unlock>
 8010174:	42a3      	cmp	r3, r4
 8010176:	d908      	bls.n	801018a <_free_r+0x42>
 8010178:	6820      	ldr	r0, [r4, #0]
 801017a:	1821      	adds	r1, r4, r0
 801017c:	428b      	cmp	r3, r1
 801017e:	bf01      	itttt	eq
 8010180:	6819      	ldreq	r1, [r3, #0]
 8010182:	685b      	ldreq	r3, [r3, #4]
 8010184:	1809      	addeq	r1, r1, r0
 8010186:	6021      	streq	r1, [r4, #0]
 8010188:	e7ed      	b.n	8010166 <_free_r+0x1e>
 801018a:	461a      	mov	r2, r3
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	b10b      	cbz	r3, 8010194 <_free_r+0x4c>
 8010190:	42a3      	cmp	r3, r4
 8010192:	d9fa      	bls.n	801018a <_free_r+0x42>
 8010194:	6811      	ldr	r1, [r2, #0]
 8010196:	1850      	adds	r0, r2, r1
 8010198:	42a0      	cmp	r0, r4
 801019a:	d10b      	bne.n	80101b4 <_free_r+0x6c>
 801019c:	6820      	ldr	r0, [r4, #0]
 801019e:	4401      	add	r1, r0
 80101a0:	1850      	adds	r0, r2, r1
 80101a2:	4283      	cmp	r3, r0
 80101a4:	6011      	str	r1, [r2, #0]
 80101a6:	d1e0      	bne.n	801016a <_free_r+0x22>
 80101a8:	6818      	ldr	r0, [r3, #0]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	6053      	str	r3, [r2, #4]
 80101ae:	4408      	add	r0, r1
 80101b0:	6010      	str	r0, [r2, #0]
 80101b2:	e7da      	b.n	801016a <_free_r+0x22>
 80101b4:	d902      	bls.n	80101bc <_free_r+0x74>
 80101b6:	230c      	movs	r3, #12
 80101b8:	602b      	str	r3, [r5, #0]
 80101ba:	e7d6      	b.n	801016a <_free_r+0x22>
 80101bc:	6820      	ldr	r0, [r4, #0]
 80101be:	1821      	adds	r1, r4, r0
 80101c0:	428b      	cmp	r3, r1
 80101c2:	bf04      	itt	eq
 80101c4:	6819      	ldreq	r1, [r3, #0]
 80101c6:	685b      	ldreq	r3, [r3, #4]
 80101c8:	6063      	str	r3, [r4, #4]
 80101ca:	bf04      	itt	eq
 80101cc:	1809      	addeq	r1, r1, r0
 80101ce:	6021      	streq	r1, [r4, #0]
 80101d0:	6054      	str	r4, [r2, #4]
 80101d2:	e7ca      	b.n	801016a <_free_r+0x22>
 80101d4:	bd38      	pop	{r3, r4, r5, pc}
 80101d6:	bf00      	nop
 80101d8:	24001fd0 	.word	0x24001fd0

080101dc <__ssputs_r>:
 80101dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101e0:	688e      	ldr	r6, [r1, #8]
 80101e2:	461f      	mov	r7, r3
 80101e4:	42be      	cmp	r6, r7
 80101e6:	680b      	ldr	r3, [r1, #0]
 80101e8:	4682      	mov	sl, r0
 80101ea:	460c      	mov	r4, r1
 80101ec:	4690      	mov	r8, r2
 80101ee:	d82d      	bhi.n	801024c <__ssputs_r+0x70>
 80101f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80101f8:	d026      	beq.n	8010248 <__ssputs_r+0x6c>
 80101fa:	6965      	ldr	r5, [r4, #20]
 80101fc:	6909      	ldr	r1, [r1, #16]
 80101fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010202:	eba3 0901 	sub.w	r9, r3, r1
 8010206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801020a:	1c7b      	adds	r3, r7, #1
 801020c:	444b      	add	r3, r9
 801020e:	106d      	asrs	r5, r5, #1
 8010210:	429d      	cmp	r5, r3
 8010212:	bf38      	it	cc
 8010214:	461d      	movcc	r5, r3
 8010216:	0553      	lsls	r3, r2, #21
 8010218:	d527      	bpl.n	801026a <__ssputs_r+0x8e>
 801021a:	4629      	mov	r1, r5
 801021c:	f7ff fea4 	bl	800ff68 <_malloc_r>
 8010220:	4606      	mov	r6, r0
 8010222:	b360      	cbz	r0, 801027e <__ssputs_r+0xa2>
 8010224:	6921      	ldr	r1, [r4, #16]
 8010226:	464a      	mov	r2, r9
 8010228:	f000 fad8 	bl	80107dc <memcpy>
 801022c:	89a3      	ldrh	r3, [r4, #12]
 801022e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010236:	81a3      	strh	r3, [r4, #12]
 8010238:	6126      	str	r6, [r4, #16]
 801023a:	6165      	str	r5, [r4, #20]
 801023c:	444e      	add	r6, r9
 801023e:	eba5 0509 	sub.w	r5, r5, r9
 8010242:	6026      	str	r6, [r4, #0]
 8010244:	60a5      	str	r5, [r4, #8]
 8010246:	463e      	mov	r6, r7
 8010248:	42be      	cmp	r6, r7
 801024a:	d900      	bls.n	801024e <__ssputs_r+0x72>
 801024c:	463e      	mov	r6, r7
 801024e:	6820      	ldr	r0, [r4, #0]
 8010250:	4632      	mov	r2, r6
 8010252:	4641      	mov	r1, r8
 8010254:	f000 faa8 	bl	80107a8 <memmove>
 8010258:	68a3      	ldr	r3, [r4, #8]
 801025a:	1b9b      	subs	r3, r3, r6
 801025c:	60a3      	str	r3, [r4, #8]
 801025e:	6823      	ldr	r3, [r4, #0]
 8010260:	4433      	add	r3, r6
 8010262:	6023      	str	r3, [r4, #0]
 8010264:	2000      	movs	r0, #0
 8010266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801026a:	462a      	mov	r2, r5
 801026c:	f000 fac4 	bl	80107f8 <_realloc_r>
 8010270:	4606      	mov	r6, r0
 8010272:	2800      	cmp	r0, #0
 8010274:	d1e0      	bne.n	8010238 <__ssputs_r+0x5c>
 8010276:	6921      	ldr	r1, [r4, #16]
 8010278:	4650      	mov	r0, sl
 801027a:	f7ff ff65 	bl	8010148 <_free_r>
 801027e:	230c      	movs	r3, #12
 8010280:	f8ca 3000 	str.w	r3, [sl]
 8010284:	89a3      	ldrh	r3, [r4, #12]
 8010286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801028a:	81a3      	strh	r3, [r4, #12]
 801028c:	f04f 30ff 	mov.w	r0, #4294967295
 8010290:	e7e9      	b.n	8010266 <__ssputs_r+0x8a>
	...

08010294 <_svfiprintf_r>:
 8010294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010298:	4698      	mov	r8, r3
 801029a:	898b      	ldrh	r3, [r1, #12]
 801029c:	061b      	lsls	r3, r3, #24
 801029e:	b09d      	sub	sp, #116	@ 0x74
 80102a0:	4607      	mov	r7, r0
 80102a2:	460d      	mov	r5, r1
 80102a4:	4614      	mov	r4, r2
 80102a6:	d510      	bpl.n	80102ca <_svfiprintf_r+0x36>
 80102a8:	690b      	ldr	r3, [r1, #16]
 80102aa:	b973      	cbnz	r3, 80102ca <_svfiprintf_r+0x36>
 80102ac:	2140      	movs	r1, #64	@ 0x40
 80102ae:	f7ff fe5b 	bl	800ff68 <_malloc_r>
 80102b2:	6028      	str	r0, [r5, #0]
 80102b4:	6128      	str	r0, [r5, #16]
 80102b6:	b930      	cbnz	r0, 80102c6 <_svfiprintf_r+0x32>
 80102b8:	230c      	movs	r3, #12
 80102ba:	603b      	str	r3, [r7, #0]
 80102bc:	f04f 30ff 	mov.w	r0, #4294967295
 80102c0:	b01d      	add	sp, #116	@ 0x74
 80102c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c6:	2340      	movs	r3, #64	@ 0x40
 80102c8:	616b      	str	r3, [r5, #20]
 80102ca:	2300      	movs	r3, #0
 80102cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ce:	2320      	movs	r3, #32
 80102d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80102d8:	2330      	movs	r3, #48	@ 0x30
 80102da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010478 <_svfiprintf_r+0x1e4>
 80102de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102e2:	f04f 0901 	mov.w	r9, #1
 80102e6:	4623      	mov	r3, r4
 80102e8:	469a      	mov	sl, r3
 80102ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102ee:	b10a      	cbz	r2, 80102f4 <_svfiprintf_r+0x60>
 80102f0:	2a25      	cmp	r2, #37	@ 0x25
 80102f2:	d1f9      	bne.n	80102e8 <_svfiprintf_r+0x54>
 80102f4:	ebba 0b04 	subs.w	fp, sl, r4
 80102f8:	d00b      	beq.n	8010312 <_svfiprintf_r+0x7e>
 80102fa:	465b      	mov	r3, fp
 80102fc:	4622      	mov	r2, r4
 80102fe:	4629      	mov	r1, r5
 8010300:	4638      	mov	r0, r7
 8010302:	f7ff ff6b 	bl	80101dc <__ssputs_r>
 8010306:	3001      	adds	r0, #1
 8010308:	f000 80a7 	beq.w	801045a <_svfiprintf_r+0x1c6>
 801030c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801030e:	445a      	add	r2, fp
 8010310:	9209      	str	r2, [sp, #36]	@ 0x24
 8010312:	f89a 3000 	ldrb.w	r3, [sl]
 8010316:	2b00      	cmp	r3, #0
 8010318:	f000 809f 	beq.w	801045a <_svfiprintf_r+0x1c6>
 801031c:	2300      	movs	r3, #0
 801031e:	f04f 32ff 	mov.w	r2, #4294967295
 8010322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010326:	f10a 0a01 	add.w	sl, sl, #1
 801032a:	9304      	str	r3, [sp, #16]
 801032c:	9307      	str	r3, [sp, #28]
 801032e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010332:	931a      	str	r3, [sp, #104]	@ 0x68
 8010334:	4654      	mov	r4, sl
 8010336:	2205      	movs	r2, #5
 8010338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801033c:	484e      	ldr	r0, [pc, #312]	@ (8010478 <_svfiprintf_r+0x1e4>)
 801033e:	f7ef ffcf 	bl	80002e0 <memchr>
 8010342:	9a04      	ldr	r2, [sp, #16]
 8010344:	b9d8      	cbnz	r0, 801037e <_svfiprintf_r+0xea>
 8010346:	06d0      	lsls	r0, r2, #27
 8010348:	bf44      	itt	mi
 801034a:	2320      	movmi	r3, #32
 801034c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010350:	0711      	lsls	r1, r2, #28
 8010352:	bf44      	itt	mi
 8010354:	232b      	movmi	r3, #43	@ 0x2b
 8010356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801035a:	f89a 3000 	ldrb.w	r3, [sl]
 801035e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010360:	d015      	beq.n	801038e <_svfiprintf_r+0xfa>
 8010362:	9a07      	ldr	r2, [sp, #28]
 8010364:	4654      	mov	r4, sl
 8010366:	2000      	movs	r0, #0
 8010368:	f04f 0c0a 	mov.w	ip, #10
 801036c:	4621      	mov	r1, r4
 801036e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010372:	3b30      	subs	r3, #48	@ 0x30
 8010374:	2b09      	cmp	r3, #9
 8010376:	d94b      	bls.n	8010410 <_svfiprintf_r+0x17c>
 8010378:	b1b0      	cbz	r0, 80103a8 <_svfiprintf_r+0x114>
 801037a:	9207      	str	r2, [sp, #28]
 801037c:	e014      	b.n	80103a8 <_svfiprintf_r+0x114>
 801037e:	eba0 0308 	sub.w	r3, r0, r8
 8010382:	fa09 f303 	lsl.w	r3, r9, r3
 8010386:	4313      	orrs	r3, r2
 8010388:	9304      	str	r3, [sp, #16]
 801038a:	46a2      	mov	sl, r4
 801038c:	e7d2      	b.n	8010334 <_svfiprintf_r+0xa0>
 801038e:	9b03      	ldr	r3, [sp, #12]
 8010390:	1d19      	adds	r1, r3, #4
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	9103      	str	r1, [sp, #12]
 8010396:	2b00      	cmp	r3, #0
 8010398:	bfbb      	ittet	lt
 801039a:	425b      	neglt	r3, r3
 801039c:	f042 0202 	orrlt.w	r2, r2, #2
 80103a0:	9307      	strge	r3, [sp, #28]
 80103a2:	9307      	strlt	r3, [sp, #28]
 80103a4:	bfb8      	it	lt
 80103a6:	9204      	strlt	r2, [sp, #16]
 80103a8:	7823      	ldrb	r3, [r4, #0]
 80103aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80103ac:	d10a      	bne.n	80103c4 <_svfiprintf_r+0x130>
 80103ae:	7863      	ldrb	r3, [r4, #1]
 80103b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80103b2:	d132      	bne.n	801041a <_svfiprintf_r+0x186>
 80103b4:	9b03      	ldr	r3, [sp, #12]
 80103b6:	1d1a      	adds	r2, r3, #4
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	9203      	str	r2, [sp, #12]
 80103bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103c0:	3402      	adds	r4, #2
 80103c2:	9305      	str	r3, [sp, #20]
 80103c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010488 <_svfiprintf_r+0x1f4>
 80103c8:	7821      	ldrb	r1, [r4, #0]
 80103ca:	2203      	movs	r2, #3
 80103cc:	4650      	mov	r0, sl
 80103ce:	f7ef ff87 	bl	80002e0 <memchr>
 80103d2:	b138      	cbz	r0, 80103e4 <_svfiprintf_r+0x150>
 80103d4:	9b04      	ldr	r3, [sp, #16]
 80103d6:	eba0 000a 	sub.w	r0, r0, sl
 80103da:	2240      	movs	r2, #64	@ 0x40
 80103dc:	4082      	lsls	r2, r0
 80103de:	4313      	orrs	r3, r2
 80103e0:	3401      	adds	r4, #1
 80103e2:	9304      	str	r3, [sp, #16]
 80103e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103e8:	4824      	ldr	r0, [pc, #144]	@ (801047c <_svfiprintf_r+0x1e8>)
 80103ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103ee:	2206      	movs	r2, #6
 80103f0:	f7ef ff76 	bl	80002e0 <memchr>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	d036      	beq.n	8010466 <_svfiprintf_r+0x1d2>
 80103f8:	4b21      	ldr	r3, [pc, #132]	@ (8010480 <_svfiprintf_r+0x1ec>)
 80103fa:	bb1b      	cbnz	r3, 8010444 <_svfiprintf_r+0x1b0>
 80103fc:	9b03      	ldr	r3, [sp, #12]
 80103fe:	3307      	adds	r3, #7
 8010400:	f023 0307 	bic.w	r3, r3, #7
 8010404:	3308      	adds	r3, #8
 8010406:	9303      	str	r3, [sp, #12]
 8010408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801040a:	4433      	add	r3, r6
 801040c:	9309      	str	r3, [sp, #36]	@ 0x24
 801040e:	e76a      	b.n	80102e6 <_svfiprintf_r+0x52>
 8010410:	fb0c 3202 	mla	r2, ip, r2, r3
 8010414:	460c      	mov	r4, r1
 8010416:	2001      	movs	r0, #1
 8010418:	e7a8      	b.n	801036c <_svfiprintf_r+0xd8>
 801041a:	2300      	movs	r3, #0
 801041c:	3401      	adds	r4, #1
 801041e:	9305      	str	r3, [sp, #20]
 8010420:	4619      	mov	r1, r3
 8010422:	f04f 0c0a 	mov.w	ip, #10
 8010426:	4620      	mov	r0, r4
 8010428:	f810 2b01 	ldrb.w	r2, [r0], #1
 801042c:	3a30      	subs	r2, #48	@ 0x30
 801042e:	2a09      	cmp	r2, #9
 8010430:	d903      	bls.n	801043a <_svfiprintf_r+0x1a6>
 8010432:	2b00      	cmp	r3, #0
 8010434:	d0c6      	beq.n	80103c4 <_svfiprintf_r+0x130>
 8010436:	9105      	str	r1, [sp, #20]
 8010438:	e7c4      	b.n	80103c4 <_svfiprintf_r+0x130>
 801043a:	fb0c 2101 	mla	r1, ip, r1, r2
 801043e:	4604      	mov	r4, r0
 8010440:	2301      	movs	r3, #1
 8010442:	e7f0      	b.n	8010426 <_svfiprintf_r+0x192>
 8010444:	ab03      	add	r3, sp, #12
 8010446:	9300      	str	r3, [sp, #0]
 8010448:	462a      	mov	r2, r5
 801044a:	4b0e      	ldr	r3, [pc, #56]	@ (8010484 <_svfiprintf_r+0x1f0>)
 801044c:	a904      	add	r1, sp, #16
 801044e:	4638      	mov	r0, r7
 8010450:	f3af 8000 	nop.w
 8010454:	1c42      	adds	r2, r0, #1
 8010456:	4606      	mov	r6, r0
 8010458:	d1d6      	bne.n	8010408 <_svfiprintf_r+0x174>
 801045a:	89ab      	ldrh	r3, [r5, #12]
 801045c:	065b      	lsls	r3, r3, #25
 801045e:	f53f af2d 	bmi.w	80102bc <_svfiprintf_r+0x28>
 8010462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010464:	e72c      	b.n	80102c0 <_svfiprintf_r+0x2c>
 8010466:	ab03      	add	r3, sp, #12
 8010468:	9300      	str	r3, [sp, #0]
 801046a:	462a      	mov	r2, r5
 801046c:	4b05      	ldr	r3, [pc, #20]	@ (8010484 <_svfiprintf_r+0x1f0>)
 801046e:	a904      	add	r1, sp, #16
 8010470:	4638      	mov	r0, r7
 8010472:	f000 f879 	bl	8010568 <_printf_i>
 8010476:	e7ed      	b.n	8010454 <_svfiprintf_r+0x1c0>
 8010478:	08011934 	.word	0x08011934
 801047c:	0801193e 	.word	0x0801193e
 8010480:	00000000 	.word	0x00000000
 8010484:	080101dd 	.word	0x080101dd
 8010488:	0801193a 	.word	0x0801193a

0801048c <_printf_common>:
 801048c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010490:	4616      	mov	r6, r2
 8010492:	4698      	mov	r8, r3
 8010494:	688a      	ldr	r2, [r1, #8]
 8010496:	690b      	ldr	r3, [r1, #16]
 8010498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801049c:	4293      	cmp	r3, r2
 801049e:	bfb8      	it	lt
 80104a0:	4613      	movlt	r3, r2
 80104a2:	6033      	str	r3, [r6, #0]
 80104a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80104a8:	4607      	mov	r7, r0
 80104aa:	460c      	mov	r4, r1
 80104ac:	b10a      	cbz	r2, 80104b2 <_printf_common+0x26>
 80104ae:	3301      	adds	r3, #1
 80104b0:	6033      	str	r3, [r6, #0]
 80104b2:	6823      	ldr	r3, [r4, #0]
 80104b4:	0699      	lsls	r1, r3, #26
 80104b6:	bf42      	ittt	mi
 80104b8:	6833      	ldrmi	r3, [r6, #0]
 80104ba:	3302      	addmi	r3, #2
 80104bc:	6033      	strmi	r3, [r6, #0]
 80104be:	6825      	ldr	r5, [r4, #0]
 80104c0:	f015 0506 	ands.w	r5, r5, #6
 80104c4:	d106      	bne.n	80104d4 <_printf_common+0x48>
 80104c6:	f104 0a19 	add.w	sl, r4, #25
 80104ca:	68e3      	ldr	r3, [r4, #12]
 80104cc:	6832      	ldr	r2, [r6, #0]
 80104ce:	1a9b      	subs	r3, r3, r2
 80104d0:	42ab      	cmp	r3, r5
 80104d2:	dc26      	bgt.n	8010522 <_printf_common+0x96>
 80104d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80104d8:	6822      	ldr	r2, [r4, #0]
 80104da:	3b00      	subs	r3, #0
 80104dc:	bf18      	it	ne
 80104de:	2301      	movne	r3, #1
 80104e0:	0692      	lsls	r2, r2, #26
 80104e2:	d42b      	bmi.n	801053c <_printf_common+0xb0>
 80104e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80104e8:	4641      	mov	r1, r8
 80104ea:	4638      	mov	r0, r7
 80104ec:	47c8      	blx	r9
 80104ee:	3001      	adds	r0, #1
 80104f0:	d01e      	beq.n	8010530 <_printf_common+0xa4>
 80104f2:	6823      	ldr	r3, [r4, #0]
 80104f4:	6922      	ldr	r2, [r4, #16]
 80104f6:	f003 0306 	and.w	r3, r3, #6
 80104fa:	2b04      	cmp	r3, #4
 80104fc:	bf02      	ittt	eq
 80104fe:	68e5      	ldreq	r5, [r4, #12]
 8010500:	6833      	ldreq	r3, [r6, #0]
 8010502:	1aed      	subeq	r5, r5, r3
 8010504:	68a3      	ldr	r3, [r4, #8]
 8010506:	bf0c      	ite	eq
 8010508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801050c:	2500      	movne	r5, #0
 801050e:	4293      	cmp	r3, r2
 8010510:	bfc4      	itt	gt
 8010512:	1a9b      	subgt	r3, r3, r2
 8010514:	18ed      	addgt	r5, r5, r3
 8010516:	2600      	movs	r6, #0
 8010518:	341a      	adds	r4, #26
 801051a:	42b5      	cmp	r5, r6
 801051c:	d11a      	bne.n	8010554 <_printf_common+0xc8>
 801051e:	2000      	movs	r0, #0
 8010520:	e008      	b.n	8010534 <_printf_common+0xa8>
 8010522:	2301      	movs	r3, #1
 8010524:	4652      	mov	r2, sl
 8010526:	4641      	mov	r1, r8
 8010528:	4638      	mov	r0, r7
 801052a:	47c8      	blx	r9
 801052c:	3001      	adds	r0, #1
 801052e:	d103      	bne.n	8010538 <_printf_common+0xac>
 8010530:	f04f 30ff 	mov.w	r0, #4294967295
 8010534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010538:	3501      	adds	r5, #1
 801053a:	e7c6      	b.n	80104ca <_printf_common+0x3e>
 801053c:	18e1      	adds	r1, r4, r3
 801053e:	1c5a      	adds	r2, r3, #1
 8010540:	2030      	movs	r0, #48	@ 0x30
 8010542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010546:	4422      	add	r2, r4
 8010548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801054c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010550:	3302      	adds	r3, #2
 8010552:	e7c7      	b.n	80104e4 <_printf_common+0x58>
 8010554:	2301      	movs	r3, #1
 8010556:	4622      	mov	r2, r4
 8010558:	4641      	mov	r1, r8
 801055a:	4638      	mov	r0, r7
 801055c:	47c8      	blx	r9
 801055e:	3001      	adds	r0, #1
 8010560:	d0e6      	beq.n	8010530 <_printf_common+0xa4>
 8010562:	3601      	adds	r6, #1
 8010564:	e7d9      	b.n	801051a <_printf_common+0x8e>
	...

08010568 <_printf_i>:
 8010568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801056c:	7e0f      	ldrb	r7, [r1, #24]
 801056e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010570:	2f78      	cmp	r7, #120	@ 0x78
 8010572:	4691      	mov	r9, r2
 8010574:	4680      	mov	r8, r0
 8010576:	460c      	mov	r4, r1
 8010578:	469a      	mov	sl, r3
 801057a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801057e:	d807      	bhi.n	8010590 <_printf_i+0x28>
 8010580:	2f62      	cmp	r7, #98	@ 0x62
 8010582:	d80a      	bhi.n	801059a <_printf_i+0x32>
 8010584:	2f00      	cmp	r7, #0
 8010586:	f000 80d2 	beq.w	801072e <_printf_i+0x1c6>
 801058a:	2f58      	cmp	r7, #88	@ 0x58
 801058c:	f000 80b9 	beq.w	8010702 <_printf_i+0x19a>
 8010590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010598:	e03a      	b.n	8010610 <_printf_i+0xa8>
 801059a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801059e:	2b15      	cmp	r3, #21
 80105a0:	d8f6      	bhi.n	8010590 <_printf_i+0x28>
 80105a2:	a101      	add	r1, pc, #4	@ (adr r1, 80105a8 <_printf_i+0x40>)
 80105a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105a8:	08010601 	.word	0x08010601
 80105ac:	08010615 	.word	0x08010615
 80105b0:	08010591 	.word	0x08010591
 80105b4:	08010591 	.word	0x08010591
 80105b8:	08010591 	.word	0x08010591
 80105bc:	08010591 	.word	0x08010591
 80105c0:	08010615 	.word	0x08010615
 80105c4:	08010591 	.word	0x08010591
 80105c8:	08010591 	.word	0x08010591
 80105cc:	08010591 	.word	0x08010591
 80105d0:	08010591 	.word	0x08010591
 80105d4:	08010715 	.word	0x08010715
 80105d8:	0801063f 	.word	0x0801063f
 80105dc:	080106cf 	.word	0x080106cf
 80105e0:	08010591 	.word	0x08010591
 80105e4:	08010591 	.word	0x08010591
 80105e8:	08010737 	.word	0x08010737
 80105ec:	08010591 	.word	0x08010591
 80105f0:	0801063f 	.word	0x0801063f
 80105f4:	08010591 	.word	0x08010591
 80105f8:	08010591 	.word	0x08010591
 80105fc:	080106d7 	.word	0x080106d7
 8010600:	6833      	ldr	r3, [r6, #0]
 8010602:	1d1a      	adds	r2, r3, #4
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	6032      	str	r2, [r6, #0]
 8010608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801060c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010610:	2301      	movs	r3, #1
 8010612:	e09d      	b.n	8010750 <_printf_i+0x1e8>
 8010614:	6833      	ldr	r3, [r6, #0]
 8010616:	6820      	ldr	r0, [r4, #0]
 8010618:	1d19      	adds	r1, r3, #4
 801061a:	6031      	str	r1, [r6, #0]
 801061c:	0606      	lsls	r6, r0, #24
 801061e:	d501      	bpl.n	8010624 <_printf_i+0xbc>
 8010620:	681d      	ldr	r5, [r3, #0]
 8010622:	e003      	b.n	801062c <_printf_i+0xc4>
 8010624:	0645      	lsls	r5, r0, #25
 8010626:	d5fb      	bpl.n	8010620 <_printf_i+0xb8>
 8010628:	f9b3 5000 	ldrsh.w	r5, [r3]
 801062c:	2d00      	cmp	r5, #0
 801062e:	da03      	bge.n	8010638 <_printf_i+0xd0>
 8010630:	232d      	movs	r3, #45	@ 0x2d
 8010632:	426d      	negs	r5, r5
 8010634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010638:	4859      	ldr	r0, [pc, #356]	@ (80107a0 <_printf_i+0x238>)
 801063a:	230a      	movs	r3, #10
 801063c:	e011      	b.n	8010662 <_printf_i+0xfa>
 801063e:	6821      	ldr	r1, [r4, #0]
 8010640:	6833      	ldr	r3, [r6, #0]
 8010642:	0608      	lsls	r0, r1, #24
 8010644:	f853 5b04 	ldr.w	r5, [r3], #4
 8010648:	d402      	bmi.n	8010650 <_printf_i+0xe8>
 801064a:	0649      	lsls	r1, r1, #25
 801064c:	bf48      	it	mi
 801064e:	b2ad      	uxthmi	r5, r5
 8010650:	2f6f      	cmp	r7, #111	@ 0x6f
 8010652:	4853      	ldr	r0, [pc, #332]	@ (80107a0 <_printf_i+0x238>)
 8010654:	6033      	str	r3, [r6, #0]
 8010656:	bf14      	ite	ne
 8010658:	230a      	movne	r3, #10
 801065a:	2308      	moveq	r3, #8
 801065c:	2100      	movs	r1, #0
 801065e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010662:	6866      	ldr	r6, [r4, #4]
 8010664:	60a6      	str	r6, [r4, #8]
 8010666:	2e00      	cmp	r6, #0
 8010668:	bfa2      	ittt	ge
 801066a:	6821      	ldrge	r1, [r4, #0]
 801066c:	f021 0104 	bicge.w	r1, r1, #4
 8010670:	6021      	strge	r1, [r4, #0]
 8010672:	b90d      	cbnz	r5, 8010678 <_printf_i+0x110>
 8010674:	2e00      	cmp	r6, #0
 8010676:	d04b      	beq.n	8010710 <_printf_i+0x1a8>
 8010678:	4616      	mov	r6, r2
 801067a:	fbb5 f1f3 	udiv	r1, r5, r3
 801067e:	fb03 5711 	mls	r7, r3, r1, r5
 8010682:	5dc7      	ldrb	r7, [r0, r7]
 8010684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010688:	462f      	mov	r7, r5
 801068a:	42bb      	cmp	r3, r7
 801068c:	460d      	mov	r5, r1
 801068e:	d9f4      	bls.n	801067a <_printf_i+0x112>
 8010690:	2b08      	cmp	r3, #8
 8010692:	d10b      	bne.n	80106ac <_printf_i+0x144>
 8010694:	6823      	ldr	r3, [r4, #0]
 8010696:	07df      	lsls	r7, r3, #31
 8010698:	d508      	bpl.n	80106ac <_printf_i+0x144>
 801069a:	6923      	ldr	r3, [r4, #16]
 801069c:	6861      	ldr	r1, [r4, #4]
 801069e:	4299      	cmp	r1, r3
 80106a0:	bfde      	ittt	le
 80106a2:	2330      	movle	r3, #48	@ 0x30
 80106a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80106a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80106ac:	1b92      	subs	r2, r2, r6
 80106ae:	6122      	str	r2, [r4, #16]
 80106b0:	f8cd a000 	str.w	sl, [sp]
 80106b4:	464b      	mov	r3, r9
 80106b6:	aa03      	add	r2, sp, #12
 80106b8:	4621      	mov	r1, r4
 80106ba:	4640      	mov	r0, r8
 80106bc:	f7ff fee6 	bl	801048c <_printf_common>
 80106c0:	3001      	adds	r0, #1
 80106c2:	d14a      	bne.n	801075a <_printf_i+0x1f2>
 80106c4:	f04f 30ff 	mov.w	r0, #4294967295
 80106c8:	b004      	add	sp, #16
 80106ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	f043 0320 	orr.w	r3, r3, #32
 80106d4:	6023      	str	r3, [r4, #0]
 80106d6:	4833      	ldr	r0, [pc, #204]	@ (80107a4 <_printf_i+0x23c>)
 80106d8:	2778      	movs	r7, #120	@ 0x78
 80106da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	6831      	ldr	r1, [r6, #0]
 80106e2:	061f      	lsls	r7, r3, #24
 80106e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80106e8:	d402      	bmi.n	80106f0 <_printf_i+0x188>
 80106ea:	065f      	lsls	r7, r3, #25
 80106ec:	bf48      	it	mi
 80106ee:	b2ad      	uxthmi	r5, r5
 80106f0:	6031      	str	r1, [r6, #0]
 80106f2:	07d9      	lsls	r1, r3, #31
 80106f4:	bf44      	itt	mi
 80106f6:	f043 0320 	orrmi.w	r3, r3, #32
 80106fa:	6023      	strmi	r3, [r4, #0]
 80106fc:	b11d      	cbz	r5, 8010706 <_printf_i+0x19e>
 80106fe:	2310      	movs	r3, #16
 8010700:	e7ac      	b.n	801065c <_printf_i+0xf4>
 8010702:	4827      	ldr	r0, [pc, #156]	@ (80107a0 <_printf_i+0x238>)
 8010704:	e7e9      	b.n	80106da <_printf_i+0x172>
 8010706:	6823      	ldr	r3, [r4, #0]
 8010708:	f023 0320 	bic.w	r3, r3, #32
 801070c:	6023      	str	r3, [r4, #0]
 801070e:	e7f6      	b.n	80106fe <_printf_i+0x196>
 8010710:	4616      	mov	r6, r2
 8010712:	e7bd      	b.n	8010690 <_printf_i+0x128>
 8010714:	6833      	ldr	r3, [r6, #0]
 8010716:	6825      	ldr	r5, [r4, #0]
 8010718:	6961      	ldr	r1, [r4, #20]
 801071a:	1d18      	adds	r0, r3, #4
 801071c:	6030      	str	r0, [r6, #0]
 801071e:	062e      	lsls	r6, r5, #24
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	d501      	bpl.n	8010728 <_printf_i+0x1c0>
 8010724:	6019      	str	r1, [r3, #0]
 8010726:	e002      	b.n	801072e <_printf_i+0x1c6>
 8010728:	0668      	lsls	r0, r5, #25
 801072a:	d5fb      	bpl.n	8010724 <_printf_i+0x1bc>
 801072c:	8019      	strh	r1, [r3, #0]
 801072e:	2300      	movs	r3, #0
 8010730:	6123      	str	r3, [r4, #16]
 8010732:	4616      	mov	r6, r2
 8010734:	e7bc      	b.n	80106b0 <_printf_i+0x148>
 8010736:	6833      	ldr	r3, [r6, #0]
 8010738:	1d1a      	adds	r2, r3, #4
 801073a:	6032      	str	r2, [r6, #0]
 801073c:	681e      	ldr	r6, [r3, #0]
 801073e:	6862      	ldr	r2, [r4, #4]
 8010740:	2100      	movs	r1, #0
 8010742:	4630      	mov	r0, r6
 8010744:	f7ef fdcc 	bl	80002e0 <memchr>
 8010748:	b108      	cbz	r0, 801074e <_printf_i+0x1e6>
 801074a:	1b80      	subs	r0, r0, r6
 801074c:	6060      	str	r0, [r4, #4]
 801074e:	6863      	ldr	r3, [r4, #4]
 8010750:	6123      	str	r3, [r4, #16]
 8010752:	2300      	movs	r3, #0
 8010754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010758:	e7aa      	b.n	80106b0 <_printf_i+0x148>
 801075a:	6923      	ldr	r3, [r4, #16]
 801075c:	4632      	mov	r2, r6
 801075e:	4649      	mov	r1, r9
 8010760:	4640      	mov	r0, r8
 8010762:	47d0      	blx	sl
 8010764:	3001      	adds	r0, #1
 8010766:	d0ad      	beq.n	80106c4 <_printf_i+0x15c>
 8010768:	6823      	ldr	r3, [r4, #0]
 801076a:	079b      	lsls	r3, r3, #30
 801076c:	d413      	bmi.n	8010796 <_printf_i+0x22e>
 801076e:	68e0      	ldr	r0, [r4, #12]
 8010770:	9b03      	ldr	r3, [sp, #12]
 8010772:	4298      	cmp	r0, r3
 8010774:	bfb8      	it	lt
 8010776:	4618      	movlt	r0, r3
 8010778:	e7a6      	b.n	80106c8 <_printf_i+0x160>
 801077a:	2301      	movs	r3, #1
 801077c:	4632      	mov	r2, r6
 801077e:	4649      	mov	r1, r9
 8010780:	4640      	mov	r0, r8
 8010782:	47d0      	blx	sl
 8010784:	3001      	adds	r0, #1
 8010786:	d09d      	beq.n	80106c4 <_printf_i+0x15c>
 8010788:	3501      	adds	r5, #1
 801078a:	68e3      	ldr	r3, [r4, #12]
 801078c:	9903      	ldr	r1, [sp, #12]
 801078e:	1a5b      	subs	r3, r3, r1
 8010790:	42ab      	cmp	r3, r5
 8010792:	dcf2      	bgt.n	801077a <_printf_i+0x212>
 8010794:	e7eb      	b.n	801076e <_printf_i+0x206>
 8010796:	2500      	movs	r5, #0
 8010798:	f104 0619 	add.w	r6, r4, #25
 801079c:	e7f5      	b.n	801078a <_printf_i+0x222>
 801079e:	bf00      	nop
 80107a0:	08011945 	.word	0x08011945
 80107a4:	08011956 	.word	0x08011956

080107a8 <memmove>:
 80107a8:	4288      	cmp	r0, r1
 80107aa:	b510      	push	{r4, lr}
 80107ac:	eb01 0402 	add.w	r4, r1, r2
 80107b0:	d902      	bls.n	80107b8 <memmove+0x10>
 80107b2:	4284      	cmp	r4, r0
 80107b4:	4623      	mov	r3, r4
 80107b6:	d807      	bhi.n	80107c8 <memmove+0x20>
 80107b8:	1e43      	subs	r3, r0, #1
 80107ba:	42a1      	cmp	r1, r4
 80107bc:	d008      	beq.n	80107d0 <memmove+0x28>
 80107be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107c6:	e7f8      	b.n	80107ba <memmove+0x12>
 80107c8:	4402      	add	r2, r0
 80107ca:	4601      	mov	r1, r0
 80107cc:	428a      	cmp	r2, r1
 80107ce:	d100      	bne.n	80107d2 <memmove+0x2a>
 80107d0:	bd10      	pop	{r4, pc}
 80107d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107da:	e7f7      	b.n	80107cc <memmove+0x24>

080107dc <memcpy>:
 80107dc:	440a      	add	r2, r1
 80107de:	4291      	cmp	r1, r2
 80107e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80107e4:	d100      	bne.n	80107e8 <memcpy+0xc>
 80107e6:	4770      	bx	lr
 80107e8:	b510      	push	{r4, lr}
 80107ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107f2:	4291      	cmp	r1, r2
 80107f4:	d1f9      	bne.n	80107ea <memcpy+0xe>
 80107f6:	bd10      	pop	{r4, pc}

080107f8 <_realloc_r>:
 80107f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107fc:	4680      	mov	r8, r0
 80107fe:	4615      	mov	r5, r2
 8010800:	460c      	mov	r4, r1
 8010802:	b921      	cbnz	r1, 801080e <_realloc_r+0x16>
 8010804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010808:	4611      	mov	r1, r2
 801080a:	f7ff bbad 	b.w	800ff68 <_malloc_r>
 801080e:	b92a      	cbnz	r2, 801081c <_realloc_r+0x24>
 8010810:	f7ff fc9a 	bl	8010148 <_free_r>
 8010814:	2400      	movs	r4, #0
 8010816:	4620      	mov	r0, r4
 8010818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081c:	f000 f81a 	bl	8010854 <_malloc_usable_size_r>
 8010820:	4285      	cmp	r5, r0
 8010822:	4606      	mov	r6, r0
 8010824:	d802      	bhi.n	801082c <_realloc_r+0x34>
 8010826:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801082a:	d8f4      	bhi.n	8010816 <_realloc_r+0x1e>
 801082c:	4629      	mov	r1, r5
 801082e:	4640      	mov	r0, r8
 8010830:	f7ff fb9a 	bl	800ff68 <_malloc_r>
 8010834:	4607      	mov	r7, r0
 8010836:	2800      	cmp	r0, #0
 8010838:	d0ec      	beq.n	8010814 <_realloc_r+0x1c>
 801083a:	42b5      	cmp	r5, r6
 801083c:	462a      	mov	r2, r5
 801083e:	4621      	mov	r1, r4
 8010840:	bf28      	it	cs
 8010842:	4632      	movcs	r2, r6
 8010844:	f7ff ffca 	bl	80107dc <memcpy>
 8010848:	4621      	mov	r1, r4
 801084a:	4640      	mov	r0, r8
 801084c:	f7ff fc7c 	bl	8010148 <_free_r>
 8010850:	463c      	mov	r4, r7
 8010852:	e7e0      	b.n	8010816 <_realloc_r+0x1e>

08010854 <_malloc_usable_size_r>:
 8010854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010858:	1f18      	subs	r0, r3, #4
 801085a:	2b00      	cmp	r3, #0
 801085c:	bfbc      	itt	lt
 801085e:	580b      	ldrlt	r3, [r1, r0]
 8010860:	18c0      	addlt	r0, r0, r3
 8010862:	4770      	bx	lr
 8010864:	0000      	movs	r0, r0
	...

08010868 <fmod>:
 8010868:	b508      	push	{r3, lr}
 801086a:	ed2d 8b04 	vpush	{d8-d9}
 801086e:	eeb0 9b40 	vmov.f64	d9, d0
 8010872:	eeb0 8b41 	vmov.f64	d8, d1
 8010876:	f000 f81b 	bl	80108b0 <__ieee754_fmod>
 801087a:	eeb4 9b48 	vcmp.f64	d9, d8
 801087e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010882:	d60c      	bvs.n	801089e <fmod+0x36>
 8010884:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 80108a8 <fmod+0x40>
 8010888:	eeb4 8b49 	vcmp.f64	d8, d9
 801088c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010890:	d105      	bne.n	801089e <fmod+0x36>
 8010892:	f7ff fc2d 	bl	80100f0 <__errno>
 8010896:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801089a:	2321      	movs	r3, #33	@ 0x21
 801089c:	6003      	str	r3, [r0, #0]
 801089e:	ecbd 8b04 	vpop	{d8-d9}
 80108a2:	bd08      	pop	{r3, pc}
 80108a4:	f3af 8000 	nop.w
	...

080108b0 <__ieee754_fmod>:
 80108b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108b4:	ed8d 1b00 	vstr	d1, [sp]
 80108b8:	e9dd 6500 	ldrd	r6, r5, [sp]
 80108bc:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80108c0:	ea56 0307 	orrs.w	r3, r6, r7
 80108c4:	46b6      	mov	lr, r6
 80108c6:	d00d      	beq.n	80108e4 <__ieee754_fmod+0x34>
 80108c8:	ee10 ca90 	vmov	ip, s1
 80108cc:	4b78      	ldr	r3, [pc, #480]	@ (8010ab0 <__ieee754_fmod+0x200>)
 80108ce:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 80108d2:	4598      	cmp	r8, r3
 80108d4:	d806      	bhi.n	80108e4 <__ieee754_fmod+0x34>
 80108d6:	4273      	negs	r3, r6
 80108d8:	4a76      	ldr	r2, [pc, #472]	@ (8010ab4 <__ieee754_fmod+0x204>)
 80108da:	4333      	orrs	r3, r6
 80108dc:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d908      	bls.n	80108f6 <__ieee754_fmod+0x46>
 80108e4:	ed9d 7b00 	vldr	d7, [sp]
 80108e8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80108ec:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80108f0:	b003      	add	sp, #12
 80108f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108f6:	ee10 9a10 	vmov	r9, s0
 80108fa:	45b8      	cmp	r8, r7
 80108fc:	4649      	mov	r1, r9
 80108fe:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8010902:	dc09      	bgt.n	8010918 <__ieee754_fmod+0x68>
 8010904:	dbf4      	blt.n	80108f0 <__ieee754_fmod+0x40>
 8010906:	454e      	cmp	r6, r9
 8010908:	d8f2      	bhi.n	80108f0 <__ieee754_fmod+0x40>
 801090a:	d105      	bne.n	8010918 <__ieee754_fmod+0x68>
 801090c:	4b6a      	ldr	r3, [pc, #424]	@ (8010ab8 <__ieee754_fmod+0x208>)
 801090e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8010912:	ed93 0b00 	vldr	d0, [r3]
 8010916:	e7eb      	b.n	80108f0 <__ieee754_fmod+0x40>
 8010918:	4a66      	ldr	r2, [pc, #408]	@ (8010ab4 <__ieee754_fmod+0x204>)
 801091a:	ea1c 0f02 	tst.w	ip, r2
 801091e:	d14a      	bne.n	80109b6 <__ieee754_fmod+0x106>
 8010920:	f1b8 0f00 	cmp.w	r8, #0
 8010924:	d13f      	bne.n	80109a6 <__ieee754_fmod+0xf6>
 8010926:	4865      	ldr	r0, [pc, #404]	@ (8010abc <__ieee754_fmod+0x20c>)
 8010928:	464b      	mov	r3, r9
 801092a:	2b00      	cmp	r3, #0
 801092c:	dc38      	bgt.n	80109a0 <__ieee754_fmod+0xf0>
 801092e:	4215      	tst	r5, r2
 8010930:	d150      	bne.n	80109d4 <__ieee754_fmod+0x124>
 8010932:	2f00      	cmp	r7, #0
 8010934:	d147      	bne.n	80109c6 <__ieee754_fmod+0x116>
 8010936:	4a61      	ldr	r2, [pc, #388]	@ (8010abc <__ieee754_fmod+0x20c>)
 8010938:	4633      	mov	r3, r6
 801093a:	2b00      	cmp	r3, #0
 801093c:	dc40      	bgt.n	80109c0 <__ieee754_fmod+0x110>
 801093e:	4b60      	ldr	r3, [pc, #384]	@ (8010ac0 <__ieee754_fmod+0x210>)
 8010940:	4298      	cmp	r0, r3
 8010942:	db4b      	blt.n	80109dc <__ieee754_fmod+0x12c>
 8010944:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8010948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801094c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8010ac0 <__ieee754_fmod+0x210>
 8010950:	4562      	cmp	r2, ip
 8010952:	db58      	blt.n	8010a06 <__ieee754_fmod+0x156>
 8010954:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010958:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 801095c:	1a80      	subs	r0, r0, r2
 801095e:	1b5e      	subs	r6, r3, r5
 8010960:	eba1 070e 	sub.w	r7, r1, lr
 8010964:	2800      	cmp	r0, #0
 8010966:	d164      	bne.n	8010a32 <__ieee754_fmod+0x182>
 8010968:	4571      	cmp	r1, lr
 801096a:	bf38      	it	cc
 801096c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8010970:	2e00      	cmp	r6, #0
 8010972:	bfa4      	itt	ge
 8010974:	4639      	movge	r1, r7
 8010976:	4633      	movge	r3, r6
 8010978:	ea53 0001 	orrs.w	r0, r3, r1
 801097c:	d0c6      	beq.n	801090c <__ieee754_fmod+0x5c>
 801097e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010982:	db6b      	blt.n	8010a5c <__ieee754_fmod+0x1ac>
 8010984:	484e      	ldr	r0, [pc, #312]	@ (8010ac0 <__ieee754_fmod+0x210>)
 8010986:	4282      	cmp	r2, r0
 8010988:	db6e      	blt.n	8010a68 <__ieee754_fmod+0x1b8>
 801098a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801098e:	4323      	orrs	r3, r4
 8010990:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8010994:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010998:	460c      	mov	r4, r1
 801099a:	ec45 4b10 	vmov	d0, r4, r5
 801099e:	e7a7      	b.n	80108f0 <__ieee754_fmod+0x40>
 80109a0:	3801      	subs	r0, #1
 80109a2:	005b      	lsls	r3, r3, #1
 80109a4:	e7c1      	b.n	801092a <__ieee754_fmod+0x7a>
 80109a6:	4846      	ldr	r0, [pc, #280]	@ (8010ac0 <__ieee754_fmod+0x210>)
 80109a8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	ddbe      	ble.n	801092e <__ieee754_fmod+0x7e>
 80109b0:	3801      	subs	r0, #1
 80109b2:	005b      	lsls	r3, r3, #1
 80109b4:	e7fa      	b.n	80109ac <__ieee754_fmod+0xfc>
 80109b6:	ea4f 5028 	mov.w	r0, r8, asr #20
 80109ba:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 80109be:	e7b6      	b.n	801092e <__ieee754_fmod+0x7e>
 80109c0:	3a01      	subs	r2, #1
 80109c2:	005b      	lsls	r3, r3, #1
 80109c4:	e7b9      	b.n	801093a <__ieee754_fmod+0x8a>
 80109c6:	4a3e      	ldr	r2, [pc, #248]	@ (8010ac0 <__ieee754_fmod+0x210>)
 80109c8:	02fb      	lsls	r3, r7, #11
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	ddb7      	ble.n	801093e <__ieee754_fmod+0x8e>
 80109ce:	3a01      	subs	r2, #1
 80109d0:	005b      	lsls	r3, r3, #1
 80109d2:	e7fa      	b.n	80109ca <__ieee754_fmod+0x11a>
 80109d4:	153a      	asrs	r2, r7, #20
 80109d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80109da:	e7b0      	b.n	801093e <__ieee754_fmod+0x8e>
 80109dc:	eba3 0c00 	sub.w	ip, r3, r0
 80109e0:	f1bc 0f1f 	cmp.w	ip, #31
 80109e4:	dc09      	bgt.n	80109fa <__ieee754_fmod+0x14a>
 80109e6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 80109ea:	fa08 f10c 	lsl.w	r1, r8, ip
 80109ee:	fa29 f303 	lsr.w	r3, r9, r3
 80109f2:	430b      	orrs	r3, r1
 80109f4:	fa09 f10c 	lsl.w	r1, r9, ip
 80109f8:	e7a8      	b.n	801094c <__ieee754_fmod+0x9c>
 80109fa:	4b32      	ldr	r3, [pc, #200]	@ (8010ac4 <__ieee754_fmod+0x214>)
 80109fc:	1a1b      	subs	r3, r3, r0
 80109fe:	fa09 f303 	lsl.w	r3, r9, r3
 8010a02:	2100      	movs	r1, #0
 8010a04:	e7a2      	b.n	801094c <__ieee754_fmod+0x9c>
 8010a06:	ebac 0c02 	sub.w	ip, ip, r2
 8010a0a:	f1bc 0f1f 	cmp.w	ip, #31
 8010a0e:	dc09      	bgt.n	8010a24 <__ieee754_fmod+0x174>
 8010a10:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8010a14:	fa07 f70c 	lsl.w	r7, r7, ip
 8010a18:	fa26 f505 	lsr.w	r5, r6, r5
 8010a1c:	433d      	orrs	r5, r7
 8010a1e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8010a22:	e79b      	b.n	801095c <__ieee754_fmod+0xac>
 8010a24:	4d27      	ldr	r5, [pc, #156]	@ (8010ac4 <__ieee754_fmod+0x214>)
 8010a26:	1aad      	subs	r5, r5, r2
 8010a28:	fa06 f505 	lsl.w	r5, r6, r5
 8010a2c:	f04f 0e00 	mov.w	lr, #0
 8010a30:	e794      	b.n	801095c <__ieee754_fmod+0xac>
 8010a32:	4571      	cmp	r1, lr
 8010a34:	bf38      	it	cc
 8010a36:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8010a3a:	2e00      	cmp	r6, #0
 8010a3c:	da05      	bge.n	8010a4a <__ieee754_fmod+0x19a>
 8010a3e:	0fce      	lsrs	r6, r1, #31
 8010a40:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8010a44:	0049      	lsls	r1, r1, #1
 8010a46:	3801      	subs	r0, #1
 8010a48:	e789      	b.n	801095e <__ieee754_fmod+0xae>
 8010a4a:	ea56 0307 	orrs.w	r3, r6, r7
 8010a4e:	f43f af5d 	beq.w	801090c <__ieee754_fmod+0x5c>
 8010a52:	0ffb      	lsrs	r3, r7, #31
 8010a54:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8010a58:	0079      	lsls	r1, r7, #1
 8010a5a:	e7f4      	b.n	8010a46 <__ieee754_fmod+0x196>
 8010a5c:	0fc8      	lsrs	r0, r1, #31
 8010a5e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010a62:	0049      	lsls	r1, r1, #1
 8010a64:	3a01      	subs	r2, #1
 8010a66:	e78a      	b.n	801097e <__ieee754_fmod+0xce>
 8010a68:	1a80      	subs	r0, r0, r2
 8010a6a:	2814      	cmp	r0, #20
 8010a6c:	dc0c      	bgt.n	8010a88 <__ieee754_fmod+0x1d8>
 8010a6e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8010a72:	fa03 f202 	lsl.w	r2, r3, r2
 8010a76:	40c1      	lsrs	r1, r0
 8010a78:	430a      	orrs	r2, r1
 8010a7a:	4103      	asrs	r3, r0
 8010a7c:	ea43 0104 	orr.w	r1, r3, r4
 8010a80:	4610      	mov	r0, r2
 8010a82:	ec41 0b10 	vmov	d0, r0, r1
 8010a86:	e733      	b.n	80108f0 <__ieee754_fmod+0x40>
 8010a88:	281f      	cmp	r0, #31
 8010a8a:	dc07      	bgt.n	8010a9c <__ieee754_fmod+0x1ec>
 8010a8c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8010a90:	40c1      	lsrs	r1, r0
 8010a92:	fa03 f202 	lsl.w	r2, r3, r2
 8010a96:	430a      	orrs	r2, r1
 8010a98:	4623      	mov	r3, r4
 8010a9a:	e7ef      	b.n	8010a7c <__ieee754_fmod+0x1cc>
 8010a9c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8010aa0:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8010aa4:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8010aa8:	32e2      	adds	r2, #226	@ 0xe2
 8010aaa:	fa43 f202 	asr.w	r2, r3, r2
 8010aae:	e7f3      	b.n	8010a98 <__ieee754_fmod+0x1e8>
 8010ab0:	7fefffff 	.word	0x7fefffff
 8010ab4:	7ff00000 	.word	0x7ff00000
 8010ab8:	08011968 	.word	0x08011968
 8010abc:	fffffbed 	.word	0xfffffbed
 8010ac0:	fffffc02 	.word	0xfffffc02
 8010ac4:	fffffbe2 	.word	0xfffffbe2

08010ac8 <_init>:
 8010ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aca:	bf00      	nop
 8010acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ace:	bc08      	pop	{r3}
 8010ad0:	469e      	mov	lr, r3
 8010ad2:	4770      	bx	lr

08010ad4 <_fini>:
 8010ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad6:	bf00      	nop
 8010ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ada:	bc08      	pop	{r3}
 8010adc:	469e      	mov	lr, r3
 8010ade:	4770      	bx	lr
